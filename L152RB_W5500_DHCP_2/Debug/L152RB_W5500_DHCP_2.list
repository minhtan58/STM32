
L152RB_W5500_DHCP_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050e8  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000069c  08005224  08005224  00015224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058c0  080058c0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080058c0  080058c0  000158c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058c8  080058c8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058c8  080058c8  000158c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058cc  080058cc  000158cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080058d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008e4  20000070  08005940  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000954  08005940  00020954  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce00  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000216e  00000000  00000000  0002ce99  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a00  00000000  00000000  0002f008  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008f8  00000000  00000000  0002fa08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001594a  00000000  00000000  00030300  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009274  00000000  00000000  00045c4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007a51a  00000000  00000000  0004eebe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c93d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ed8  00000000  00000000  000c9454  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000070 	.word	0x20000070
 8000158:	00000000 	.word	0x00000000
 800015c:	0800520c 	.word	0x0800520c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000074 	.word	0x20000074
 8000178:	0800520c 	.word	0x0800520c

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b974 	b.w	800047c <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	468c      	mov	ip, r1
 80001b2:	4604      	mov	r4, r0
 80001b4:	9e08      	ldr	r6, [sp, #32]
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d14b      	bne.n	8000252 <__udivmoddi4+0xa6>
 80001ba:	428a      	cmp	r2, r1
 80001bc:	4615      	mov	r5, r2
 80001be:	d967      	bls.n	8000290 <__udivmoddi4+0xe4>
 80001c0:	fab2 f282 	clz	r2, r2
 80001c4:	b14a      	cbz	r2, 80001da <__udivmoddi4+0x2e>
 80001c6:	f1c2 0720 	rsb	r7, r2, #32
 80001ca:	fa01 f302 	lsl.w	r3, r1, r2
 80001ce:	fa20 f707 	lsr.w	r7, r0, r7
 80001d2:	4095      	lsls	r5, r2
 80001d4:	ea47 0c03 	orr.w	ip, r7, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001de:	fbbc f7fe 	udiv	r7, ip, lr
 80001e2:	fa1f f885 	uxth.w	r8, r5
 80001e6:	fb0e c317 	mls	r3, lr, r7, ip
 80001ea:	fb07 f908 	mul.w	r9, r7, r8
 80001ee:	0c21      	lsrs	r1, r4, #16
 80001f0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f4:	4599      	cmp	r9, r3
 80001f6:	d909      	bls.n	800020c <__udivmoddi4+0x60>
 80001f8:	18eb      	adds	r3, r5, r3
 80001fa:	f107 31ff 	add.w	r1, r7, #4294967295
 80001fe:	f080 811c 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000202:	4599      	cmp	r9, r3
 8000204:	f240 8119 	bls.w	800043a <__udivmoddi4+0x28e>
 8000208:	3f02      	subs	r7, #2
 800020a:	442b      	add	r3, r5
 800020c:	eba3 0309 	sub.w	r3, r3, r9
 8000210:	fbb3 f0fe 	udiv	r0, r3, lr
 8000214:	fb0e 3310 	mls	r3, lr, r0, r3
 8000218:	fb00 f108 	mul.w	r1, r0, r8
 800021c:	b2a4      	uxth	r4, r4
 800021e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000222:	42a1      	cmp	r1, r4
 8000224:	d909      	bls.n	800023a <__udivmoddi4+0x8e>
 8000226:	192c      	adds	r4, r5, r4
 8000228:	f100 33ff 	add.w	r3, r0, #4294967295
 800022c:	f080 8107 	bcs.w	800043e <__udivmoddi4+0x292>
 8000230:	42a1      	cmp	r1, r4
 8000232:	f240 8104 	bls.w	800043e <__udivmoddi4+0x292>
 8000236:	3802      	subs	r0, #2
 8000238:	442c      	add	r4, r5
 800023a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800023e:	2700      	movs	r7, #0
 8000240:	1a64      	subs	r4, r4, r1
 8000242:	b11e      	cbz	r6, 800024c <__udivmoddi4+0xa0>
 8000244:	2300      	movs	r3, #0
 8000246:	40d4      	lsrs	r4, r2
 8000248:	e9c6 4300 	strd	r4, r3, [r6]
 800024c:	4639      	mov	r1, r7
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	428b      	cmp	r3, r1
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0xbe>
 8000256:	2e00      	cmp	r6, #0
 8000258:	f000 80ec 	beq.w	8000434 <__udivmoddi4+0x288>
 800025c:	2700      	movs	r7, #0
 800025e:	e9c6 0100 	strd	r0, r1, [r6]
 8000262:	4638      	mov	r0, r7
 8000264:	4639      	mov	r1, r7
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f783 	clz	r7, r3
 800026e:	2f00      	cmp	r7, #0
 8000270:	d148      	bne.n	8000304 <__udivmoddi4+0x158>
 8000272:	428b      	cmp	r3, r1
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd0>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80fb 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb61 0303 	sbc.w	r3, r1, r3
 8000282:	2001      	movs	r0, #1
 8000284:	469c      	mov	ip, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e0      	beq.n	800024c <__udivmoddi4+0xa0>
 800028a:	e9c6 4c00 	strd	r4, ip, [r6]
 800028e:	e7dd      	b.n	800024c <__udivmoddi4+0xa0>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xe8>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 808f 	bne.w	80003bc <__udivmoddi4+0x210>
 800029e:	2701      	movs	r7, #1
 80002a0:	1b49      	subs	r1, r1, r5
 80002a2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80002a6:	fa1f f985 	uxth.w	r9, r5
 80002aa:	fbb1 fef8 	udiv	lr, r1, r8
 80002ae:	fb08 111e 	mls	r1, r8, lr, r1
 80002b2:	fb09 f00e 	mul.w	r0, r9, lr
 80002b6:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80002ba:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 80002be:	4298      	cmp	r0, r3
 80002c0:	d907      	bls.n	80002d2 <__udivmoddi4+0x126>
 80002c2:	18eb      	adds	r3, r5, r3
 80002c4:	f10e 31ff 	add.w	r1, lr, #4294967295
 80002c8:	d202      	bcs.n	80002d0 <__udivmoddi4+0x124>
 80002ca:	4298      	cmp	r0, r3
 80002cc:	f200 80cd 	bhi.w	800046a <__udivmoddi4+0x2be>
 80002d0:	468e      	mov	lr, r1
 80002d2:	1a1b      	subs	r3, r3, r0
 80002d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d8:	fb08 3310 	mls	r3, r8, r0, r3
 80002dc:	fb09 f900 	mul.w	r9, r9, r0
 80002e0:	b2a4      	uxth	r4, r4
 80002e2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e6:	45a1      	cmp	r9, r4
 80002e8:	d907      	bls.n	80002fa <__udivmoddi4+0x14e>
 80002ea:	192c      	adds	r4, r5, r4
 80002ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f0:	d202      	bcs.n	80002f8 <__udivmoddi4+0x14c>
 80002f2:	45a1      	cmp	r9, r4
 80002f4:	f200 80b6 	bhi.w	8000464 <__udivmoddi4+0x2b8>
 80002f8:	4618      	mov	r0, r3
 80002fa:	eba4 0409 	sub.w	r4, r4, r9
 80002fe:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000302:	e79e      	b.n	8000242 <__udivmoddi4+0x96>
 8000304:	f1c7 0520 	rsb	r5, r7, #32
 8000308:	40bb      	lsls	r3, r7
 800030a:	fa22 fc05 	lsr.w	ip, r2, r5
 800030e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000312:	fa21 f405 	lsr.w	r4, r1, r5
 8000316:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800031a:	fbb4 f9fe 	udiv	r9, r4, lr
 800031e:	fa1f f88c 	uxth.w	r8, ip
 8000322:	fb0e 4419 	mls	r4, lr, r9, r4
 8000326:	fa20 f305 	lsr.w	r3, r0, r5
 800032a:	40b9      	lsls	r1, r7
 800032c:	fb09 fa08 	mul.w	sl, r9, r8
 8000330:	4319      	orrs	r1, r3
 8000332:	0c0b      	lsrs	r3, r1, #16
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	45a2      	cmp	sl, r4
 800033a:	fa02 f207 	lsl.w	r2, r2, r7
 800033e:	fa00 f307 	lsl.w	r3, r0, r7
 8000342:	d90b      	bls.n	800035c <__udivmoddi4+0x1b0>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f109 30ff 	add.w	r0, r9, #4294967295
 800034c:	f080 8088 	bcs.w	8000460 <__udivmoddi4+0x2b4>
 8000350:	45a2      	cmp	sl, r4
 8000352:	f240 8085 	bls.w	8000460 <__udivmoddi4+0x2b4>
 8000356:	f1a9 0902 	sub.w	r9, r9, #2
 800035a:	4464      	add	r4, ip
 800035c:	eba4 040a 	sub.w	r4, r4, sl
 8000360:	fbb4 f0fe 	udiv	r0, r4, lr
 8000364:	fb0e 4410 	mls	r4, lr, r0, r4
 8000368:	fb00 fa08 	mul.w	sl, r0, r8
 800036c:	b289      	uxth	r1, r1
 800036e:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000372:	45a2      	cmp	sl, r4
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x1dc>
 8000376:	eb1c 0404 	adds.w	r4, ip, r4
 800037a:	f100 31ff 	add.w	r1, r0, #4294967295
 800037e:	d26b      	bcs.n	8000458 <__udivmoddi4+0x2ac>
 8000380:	45a2      	cmp	sl, r4
 8000382:	d969      	bls.n	8000458 <__udivmoddi4+0x2ac>
 8000384:	3802      	subs	r0, #2
 8000386:	4464      	add	r4, ip
 8000388:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800038c:	fba0 8902 	umull	r8, r9, r0, r2
 8000390:	eba4 040a 	sub.w	r4, r4, sl
 8000394:	454c      	cmp	r4, r9
 8000396:	4641      	mov	r1, r8
 8000398:	46ce      	mov	lr, r9
 800039a:	d354      	bcc.n	8000446 <__udivmoddi4+0x29a>
 800039c:	d051      	beq.n	8000442 <__udivmoddi4+0x296>
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d069      	beq.n	8000476 <__udivmoddi4+0x2ca>
 80003a2:	1a5a      	subs	r2, r3, r1
 80003a4:	eb64 040e 	sbc.w	r4, r4, lr
 80003a8:	fa04 f505 	lsl.w	r5, r4, r5
 80003ac:	fa22 f307 	lsr.w	r3, r2, r7
 80003b0:	40fc      	lsrs	r4, r7
 80003b2:	431d      	orrs	r5, r3
 80003b4:	e9c6 5400 	strd	r5, r4, [r6]
 80003b8:	2700      	movs	r7, #0
 80003ba:	e747      	b.n	800024c <__udivmoddi4+0xa0>
 80003bc:	4095      	lsls	r5, r2
 80003be:	f1c2 0320 	rsb	r3, r2, #32
 80003c2:	fa21 f003 	lsr.w	r0, r1, r3
 80003c6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80003ca:	fbb0 f7f8 	udiv	r7, r0, r8
 80003ce:	fa1f f985 	uxth.w	r9, r5
 80003d2:	fb08 0017 	mls	r0, r8, r7, r0
 80003d6:	fa24 f303 	lsr.w	r3, r4, r3
 80003da:	4091      	lsls	r1, r2
 80003dc:	fb07 fc09 	mul.w	ip, r7, r9
 80003e0:	430b      	orrs	r3, r1
 80003e2:	0c19      	lsrs	r1, r3, #16
 80003e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80003e8:	458c      	cmp	ip, r1
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d907      	bls.n	8000400 <__udivmoddi4+0x254>
 80003f0:	1869      	adds	r1, r5, r1
 80003f2:	f107 30ff 	add.w	r0, r7, #4294967295
 80003f6:	d231      	bcs.n	800045c <__udivmoddi4+0x2b0>
 80003f8:	458c      	cmp	ip, r1
 80003fa:	d92f      	bls.n	800045c <__udivmoddi4+0x2b0>
 80003fc:	3f02      	subs	r7, #2
 80003fe:	4429      	add	r1, r5
 8000400:	eba1 010c 	sub.w	r1, r1, ip
 8000404:	fbb1 f0f8 	udiv	r0, r1, r8
 8000408:	fb08 1c10 	mls	ip, r8, r0, r1
 800040c:	fb00 fe09 	mul.w	lr, r0, r9
 8000410:	b299      	uxth	r1, r3
 8000412:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000416:	458e      	cmp	lr, r1
 8000418:	d907      	bls.n	800042a <__udivmoddi4+0x27e>
 800041a:	1869      	adds	r1, r5, r1
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000420:	d218      	bcs.n	8000454 <__udivmoddi4+0x2a8>
 8000422:	458e      	cmp	lr, r1
 8000424:	d916      	bls.n	8000454 <__udivmoddi4+0x2a8>
 8000426:	3802      	subs	r0, #2
 8000428:	4429      	add	r1, r5
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000432:	e73a      	b.n	80002aa <__udivmoddi4+0xfe>
 8000434:	4637      	mov	r7, r6
 8000436:	4630      	mov	r0, r6
 8000438:	e708      	b.n	800024c <__udivmoddi4+0xa0>
 800043a:	460f      	mov	r7, r1
 800043c:	e6e6      	b.n	800020c <__udivmoddi4+0x60>
 800043e:	4618      	mov	r0, r3
 8000440:	e6fb      	b.n	800023a <__udivmoddi4+0x8e>
 8000442:	4543      	cmp	r3, r8
 8000444:	d2ab      	bcs.n	800039e <__udivmoddi4+0x1f2>
 8000446:	ebb8 0102 	subs.w	r1, r8, r2
 800044a:	eb69 020c 	sbc.w	r2, r9, ip
 800044e:	3801      	subs	r0, #1
 8000450:	4696      	mov	lr, r2
 8000452:	e7a4      	b.n	800039e <__udivmoddi4+0x1f2>
 8000454:	4618      	mov	r0, r3
 8000456:	e7e8      	b.n	800042a <__udivmoddi4+0x27e>
 8000458:	4608      	mov	r0, r1
 800045a:	e795      	b.n	8000388 <__udivmoddi4+0x1dc>
 800045c:	4607      	mov	r7, r0
 800045e:	e7cf      	b.n	8000400 <__udivmoddi4+0x254>
 8000460:	4681      	mov	r9, r0
 8000462:	e77b      	b.n	800035c <__udivmoddi4+0x1b0>
 8000464:	3802      	subs	r0, #2
 8000466:	442c      	add	r4, r5
 8000468:	e747      	b.n	80002fa <__udivmoddi4+0x14e>
 800046a:	f1ae 0e02 	sub.w	lr, lr, #2
 800046e:	442b      	add	r3, r5
 8000470:	e72f      	b.n	80002d2 <__udivmoddi4+0x126>
 8000472:	4638      	mov	r0, r7
 8000474:	e707      	b.n	8000286 <__udivmoddi4+0xda>
 8000476:	4637      	mov	r7, r6
 8000478:	e6e8      	b.n	800024c <__udivmoddi4+0xa0>
 800047a:	bf00      	nop

0800047c <__aeabi_idiv0>:
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop

08000480 <http_client_request>:
 * @brief  Makes an HTTP request os a remote server and prints the response
 * @param  state: zero to turn off; otherwise to turn on
 * @retval None
 */
void http_client_request(uint16_t state)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b084      	sub	sp, #16
 8000484:	af00      	add	r7, sp, #0
 8000486:	4603      	mov	r3, r0
 8000488:	80fb      	strh	r3, [r7, #6]
    if (DEBUG) printf("http_client_request( %u ) starting\r\n", state);
 800048a:	88fb      	ldrh	r3, [r7, #6]
 800048c:	4619      	mov	r1, r3
 800048e:	485a      	ldr	r0, [pc, #360]	; (80005f8 <http_client_request+0x178>)
 8000490:	f003 ff6a 	bl	8004368 <iprintf>

    uint8_t err = 0;
 8000494:	2300      	movs	r3, #0
 8000496:	73fb      	strb	r3, [r7, #15]

    /* Initialize TCP connection socket */
    if (DEBUG) printf("Calling SOCK_socket()\r\n");
 8000498:	4858      	ldr	r0, [pc, #352]	; (80005fc <http_client_request+0x17c>)
 800049a:	f003 ffd9 	bl	8004450 <puts>
    err = SOCK_socket(HTTP_SOCKET, SOCK_STREAM, HTTP_PORT);
 800049e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004a2:	2101      	movs	r1, #1
 80004a4:	2000      	movs	r0, #0
 80004a6:	f000 fa59 	bl	800095c <SOCK_socket>
 80004aa:	4603      	mov	r3, r0
 80004ac:	73fb      	strb	r3, [r7, #15]
    if (err != SOCK_OK)
 80004ae:	7bfb      	ldrb	r3, [r7, #15]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d005      	beq.n	80004c0 <http_client_request+0x40>
    {
        if (DEBUG) printf("SOCK_ERR: %u\r\n", (uint16_t) err);
 80004b4:	7bfb      	ldrb	r3, [r7, #15]
 80004b6:	4619      	mov	r1, r3
 80004b8:	4851      	ldr	r0, [pc, #324]	; (8000600 <http_client_request+0x180>)
 80004ba:	f003 ff55 	bl	8004368 <iprintf>
        return;
 80004be:	e098      	b.n	80005f2 <http_client_request+0x172>
    }

    /* connect to remote server */
    if (DEBUG) printf("Calling SOCK_connect()\r\n");
 80004c0:	4850      	ldr	r0, [pc, #320]	; (8000604 <http_client_request+0x184>)
 80004c2:	f003 ffc5 	bl	8004450 <puts>
    err = SOCK_connect(HTTP_SOCKET, server_ip, server_port);
 80004c6:	f44f 735e 	mov.w	r3, #888	; 0x378
 80004ca:	461a      	mov	r2, r3
 80004cc:	494e      	ldr	r1, [pc, #312]	; (8000608 <http_client_request+0x188>)
 80004ce:	2000      	movs	r0, #0
 80004d0:	f000 fad0 	bl	8000a74 <SOCK_connect>
 80004d4:	4603      	mov	r3, r0
 80004d6:	73fb      	strb	r3, [r7, #15]
    if (err != SOCK_OK)
 80004d8:	7bfb      	ldrb	r3, [r7, #15]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d005      	beq.n	80004ea <http_client_request+0x6a>
    {
        if (DEBUG) printf("SOCK_ERR: %u\r\n", (uint16_t) err);
 80004de:	7bfb      	ldrb	r3, [r7, #15]
 80004e0:	4619      	mov	r1, r3
 80004e2:	4847      	ldr	r0, [pc, #284]	; (8000600 <http_client_request+0x180>)
 80004e4:	f003 ff40 	bl	8004368 <iprintf>
        return;
 80004e8:	e083      	b.n	80005f2 <http_client_request+0x172>
    }

    if (state)
 80004ea:	88fb      	ldrh	r3, [r7, #6]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d006      	beq.n	80004fe <http_client_request+0x7e>
    {
        request = LIGHT_ON;
 80004f0:	4b46      	ldr	r3, [pc, #280]	; (800060c <http_client_request+0x18c>)
 80004f2:	4a47      	ldr	r2, [pc, #284]	; (8000610 <http_client_request+0x190>)
 80004f4:	601a      	str	r2, [r3, #0]
        length = sizeof(LIGHT_ON);
 80004f6:	4b47      	ldr	r3, [pc, #284]	; (8000614 <http_client_request+0x194>)
 80004f8:	22cc      	movs	r2, #204	; 0xcc
 80004fa:	801a      	strh	r2, [r3, #0]
 80004fc:	e005      	b.n	800050a <http_client_request+0x8a>
    }
    else
    {
        request = LIGHT_OFF;
 80004fe:	4b43      	ldr	r3, [pc, #268]	; (800060c <http_client_request+0x18c>)
 8000500:	4a45      	ldr	r2, [pc, #276]	; (8000618 <http_client_request+0x198>)
 8000502:	601a      	str	r2, [r3, #0]
        length = sizeof(LIGHT_OFF);
 8000504:	4b43      	ldr	r3, [pc, #268]	; (8000614 <http_client_request+0x194>)
 8000506:	22ba      	movs	r2, #186	; 0xba
 8000508:	801a      	strh	r2, [r3, #0]
    }

    /* send the request */
    if (DEBUG) printf("Calling SOCK_send(len=%u)\r\n", (uint16_t) length);
 800050a:	4b42      	ldr	r3, [pc, #264]	; (8000614 <http_client_request+0x194>)
 800050c:	881b      	ldrh	r3, [r3, #0]
 800050e:	4619      	mov	r1, r3
 8000510:	4842      	ldr	r0, [pc, #264]	; (800061c <http_client_request+0x19c>)
 8000512:	f003 ff29 	bl	8004368 <iprintf>
    length = SOCK_send(HTTP_SOCKET, (const uint8_t*) request, length);
 8000516:	4b3d      	ldr	r3, [pc, #244]	; (800060c <http_client_request+0x18c>)
 8000518:	6819      	ldr	r1, [r3, #0]
 800051a:	4b3e      	ldr	r3, [pc, #248]	; (8000614 <http_client_request+0x194>)
 800051c:	881b      	ldrh	r3, [r3, #0]
 800051e:	461a      	mov	r2, r3
 8000520:	2000      	movs	r0, #0
 8000522:	f000 fbf3 	bl	8000d0c <SOCK_send>
 8000526:	4603      	mov	r3, r0
 8000528:	461a      	mov	r2, r3
 800052a:	4b3a      	ldr	r3, [pc, #232]	; (8000614 <http_client_request+0x194>)
 800052c:	801a      	strh	r2, [r3, #0]
    if (DEBUG) printf("length sent: %u\r\n", (uint16_t) length);
 800052e:	4b39      	ldr	r3, [pc, #228]	; (8000614 <http_client_request+0x194>)
 8000530:	881b      	ldrh	r3, [r3, #0]
 8000532:	4619      	mov	r1, r3
 8000534:	483a      	ldr	r0, [pc, #232]	; (8000620 <http_client_request+0x1a0>)
 8000536:	f003 ff17 	bl	8004368 <iprintf>
    if (length == 0) return;
 800053a:	4b36      	ldr	r3, [pc, #216]	; (8000614 <http_client_request+0x194>)
 800053c:	881b      	ldrh	r3, [r3, #0]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d054      	beq.n	80005ec <http_client_request+0x16c>

    /* receive the response */
    if (DEBUG) printf("Calling SOCK_recv()\r\n");
 8000542:	4838      	ldr	r0, [pc, #224]	; (8000624 <http_client_request+0x1a4>)
 8000544:	f003 ff84 	bl	8004450 <puts>
    length = SOCK_recv(HTTP_SOCKET, recv_buf, RECV_BUFFER_LENGTH);
 8000548:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800054c:	4936      	ldr	r1, [pc, #216]	; (8000628 <http_client_request+0x1a8>)
 800054e:	2000      	movs	r0, #0
 8000550:	f000 fc70 	bl	8000e34 <SOCK_recv>
 8000554:	4603      	mov	r3, r0
 8000556:	461a      	mov	r2, r3
 8000558:	4b2e      	ldr	r3, [pc, #184]	; (8000614 <http_client_request+0x194>)
 800055a:	801a      	strh	r2, [r3, #0]
    if (DEBUG) printf("length recv: %u\r\n", (uint16_t) length);
 800055c:	4b2d      	ldr	r3, [pc, #180]	; (8000614 <http_client_request+0x194>)
 800055e:	881b      	ldrh	r3, [r3, #0]
 8000560:	4619      	mov	r1, r3
 8000562:	4832      	ldr	r0, [pc, #200]	; (800062c <http_client_request+0x1ac>)
 8000564:	f003 ff00 	bl	8004368 <iprintf>

    if (length == 0) return;
 8000568:	4b2a      	ldr	r3, [pc, #168]	; (8000614 <http_client_request+0x194>)
 800056a:	881b      	ldrh	r3, [r3, #0]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d03f      	beq.n	80005f0 <http_client_request+0x170>

    if (length > (RECV_BUFFER_LENGTH - 1)) length = (RECV_BUFFER_LENGTH - 1);
 8000570:	4b28      	ldr	r3, [pc, #160]	; (8000614 <http_client_request+0x194>)
 8000572:	881b      	ldrh	r3, [r3, #0]
 8000574:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000578:	d303      	bcc.n	8000582 <http_client_request+0x102>
 800057a:	4b26      	ldr	r3, [pc, #152]	; (8000614 <http_client_request+0x194>)
 800057c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000580:	801a      	strh	r2, [r3, #0]
    recv_buf[length] = '\0';
 8000582:	4b24      	ldr	r3, [pc, #144]	; (8000614 <http_client_request+0x194>)
 8000584:	881b      	ldrh	r3, [r3, #0]
 8000586:	461a      	mov	r2, r3
 8000588:	4b27      	ldr	r3, [pc, #156]	; (8000628 <http_client_request+0x1a8>)
 800058a:	2100      	movs	r1, #0
 800058c:	5499      	strb	r1, [r3, r2]

    if (DEBUG)
    {
        printf("### RESPONSE BEGIN ###\r\n");
 800058e:	4828      	ldr	r0, [pc, #160]	; (8000630 <http_client_request+0x1b0>)
 8000590:	f003 ff5e 	bl	8004450 <puts>
        printf((const char*) recv_buf);
 8000594:	4824      	ldr	r0, [pc, #144]	; (8000628 <http_client_request+0x1a8>)
 8000596:	f003 fee7 	bl	8004368 <iprintf>
        printf("\r\n### RESPONSE END ###\r\n");
 800059a:	4826      	ldr	r0, [pc, #152]	; (8000634 <http_client_request+0x1b4>)
 800059c:	f003 ff58 	bl	8004450 <puts>
    }

    /* disconnect the socket */
    if (DEBUG) printf("Calling SOCK_disconnect()\r\n");
 80005a0:	4825      	ldr	r0, [pc, #148]	; (8000638 <http_client_request+0x1b8>)
 80005a2:	f003 ff55 	bl	8004450 <puts>
    err = SOCK_disconnect(HTTP_SOCKET);
 80005a6:	2000      	movs	r0, #0
 80005a8:	f000 fb58 	bl	8000c5c <SOCK_disconnect>
 80005ac:	4603      	mov	r3, r0
 80005ae:	73fb      	strb	r3, [r7, #15]
    if (err != SOCK_OK)
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d005      	beq.n	80005c2 <http_client_request+0x142>
    {
        if (DEBUG) printf("SOCK_ERR: %u\r\n", (uint16_t) err);
 80005b6:	7bfb      	ldrb	r3, [r7, #15]
 80005b8:	4619      	mov	r1, r3
 80005ba:	4811      	ldr	r0, [pc, #68]	; (8000600 <http_client_request+0x180>)
 80005bc:	f003 fed4 	bl	8004368 <iprintf>
        return;
 80005c0:	e017      	b.n	80005f2 <http_client_request+0x172>
    }

    /* close the socket */
    if (DEBUG) printf("Calling SOCK_close()\r\n");
 80005c2:	481e      	ldr	r0, [pc, #120]	; (800063c <http_client_request+0x1bc>)
 80005c4:	f003 ff44 	bl	8004450 <puts>
    err = SOCK_close(HTTP_SOCKET);
 80005c8:	2000      	movs	r0, #0
 80005ca:	f000 fa27 	bl	8000a1c <SOCK_close>
 80005ce:	4603      	mov	r3, r0
 80005d0:	73fb      	strb	r3, [r7, #15]
    if (err != SOCK_OK)
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d005      	beq.n	80005e4 <http_client_request+0x164>
    {
        if (DEBUG) printf("SOCK_ERR: %u\r\n", (uint16_t) err);
 80005d8:	7bfb      	ldrb	r3, [r7, #15]
 80005da:	4619      	mov	r1, r3
 80005dc:	4808      	ldr	r0, [pc, #32]	; (8000600 <http_client_request+0x180>)
 80005de:	f003 fec3 	bl	8004368 <iprintf>
        return;
 80005e2:	e006      	b.n	80005f2 <http_client_request+0x172>
    }

    if (DEBUG) printf("http_client_request() exiting\r\n");
 80005e4:	4816      	ldr	r0, [pc, #88]	; (8000640 <http_client_request+0x1c0>)
 80005e6:	f003 ff33 	bl	8004450 <puts>
 80005ea:	e002      	b.n	80005f2 <http_client_request+0x172>
    if (length == 0) return;
 80005ec:	bf00      	nop
 80005ee:	e000      	b.n	80005f2 <http_client_request+0x172>
    if (length == 0) return;
 80005f0:	bf00      	nop
}
 80005f2:	3710      	adds	r7, #16
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	08005224 	.word	0x08005224
 80005fc:	0800524c 	.word	0x0800524c
 8000600:	08005264 	.word	0x08005264
 8000604:	08005274 	.word	0x08005274
 8000608:	08005678 	.word	0x08005678
 800060c:	2000008c 	.word	0x2000008c
 8000610:	0800567c 	.word	0x0800567c
 8000614:	20000090 	.word	0x20000090
 8000618:	08005748 	.word	0x08005748
 800061c:	0800528c 	.word	0x0800528c
 8000620:	080052a8 	.word	0x080052a8
 8000624:	080052bc 	.word	0x080052bc
 8000628:	20000094 	.word	0x20000094
 800062c:	080052d4 	.word	0x080052d4
 8000630:	080052e8 	.word	0x080052e8
 8000634:	08005300 	.word	0x08005300
 8000638:	08005318 	.word	0x08005318
 800063c:	08005334 	.word	0x08005334
 8000640:	0800534c 	.word	0x0800534c

08000644 <__io_putchar>:
static void MX_SPI1_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */
int __io_putchar (int ch) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	uint8_t c = ch;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	b2db      	uxtb	r3, r3
 8000650:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, &c, 1, 100);
 8000652:	f107 010f 	add.w	r1, r7, #15
 8000656:	2364      	movs	r3, #100	; 0x64
 8000658:	2201      	movs	r2, #1
 800065a:	4804      	ldr	r0, [pc, #16]	; (800066c <__io_putchar+0x28>)
 800065c:	f003 fa51 	bl	8003b02 <HAL_UART_Transmit>
	//HAL_UART_Transmit_IT(&huart1, (uint8_t*)&UART1_TxBuffer, countof(UART1_TxBuffer)-1);
	return ch;
 8000660:	687b      	ldr	r3, [r7, #4]
}
 8000662:	4618      	mov	r0, r3
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	200008b4 	.word	0x200008b4

08000670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000674:	f001 fa19 	bl	8001aaa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000678:	f000 f84e 	bl	8000718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067c:	f000 f8fa 	bl	8000874 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000680:	f000 f898 	bl	80007b4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000684:	f000 f8cc 	bl	8000820 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  printf("\r\nPower On\r\n");
 8000688:	481a      	ldr	r0, [pc, #104]	; (80006f4 <main+0x84>)
 800068a:	f003 fee1 	bl	8004450 <puts>
  printf("Compiled: " __DATE__ " " __TIME__ "\r\n");
 800068e:	481a      	ldr	r0, [pc, #104]	; (80006f8 <main+0x88>)
 8000690:	f003 fede 	bl	8004450 <puts>

  printf("SPI2->CR1: %04X\r\n", (uint16_t) SPI1->CR1);
 8000694:	4b19      	ldr	r3, [pc, #100]	; (80006fc <main+0x8c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	b29b      	uxth	r3, r3
 800069a:	4619      	mov	r1, r3
 800069c:	4818      	ldr	r0, [pc, #96]	; (8000700 <main+0x90>)
 800069e:	f003 fe63 	bl	8004368 <iprintf>
  printf("SPI2->CR2: %04X\r\n", (uint16_t) SPI1->CR2);
 80006a2:	4b16      	ldr	r3, [pc, #88]	; (80006fc <main+0x8c>)
 80006a4:	685b      	ldr	r3, [r3, #4]
 80006a6:	b29b      	uxth	r3, r3
 80006a8:	4619      	mov	r1, r3
 80006aa:	4816      	ldr	r0, [pc, #88]	; (8000704 <main+0x94>)
 80006ac:	f003 fe5c 	bl	8004368 <iprintf>

  W5500_Init();
 80006b0:	f000 fe16 	bl	80012e0 <W5500_Init>

  printf("Press Blue User Button.\r\n");
 80006b4:	4814      	ldr	r0, [pc, #80]	; (8000708 <main+0x98>)
 80006b6:	f003 fecb 	bl	8004450 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
      if (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0) == GPIO_PIN_SET)
 80006ba:	2101      	movs	r1, #1
 80006bc:	4813      	ldr	r0, [pc, #76]	; (800070c <main+0x9c>)
 80006be:	f001 fd51 	bl	8002164 <HAL_GPIO_ReadPin>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d1f8      	bne.n	80006ba <main+0x4a>
      {
    	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 80006c8:	2140      	movs	r1, #64	; 0x40
 80006ca:	4811      	ldr	r0, [pc, #68]	; (8000710 <main+0xa0>)
 80006cc:	f001 fd79 	bl	80021c2 <HAL_GPIO_TogglePin>
    	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80006d0:	2180      	movs	r1, #128	; 0x80
 80006d2:	480f      	ldr	r0, [pc, #60]	; (8000710 <main+0xa0>)
 80006d4:	f001 fd75 	bl	80021c2 <HAL_GPIO_TogglePin>
          toggle = 1 - toggle;
 80006d8:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <main+0xa4>)
 80006da:	881b      	ldrh	r3, [r3, #0]
 80006dc:	f1c3 0301 	rsb	r3, r3, #1
 80006e0:	b29a      	uxth	r2, r3
 80006e2:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <main+0xa4>)
 80006e4:	801a      	strh	r2, [r3, #0]
          http_client_request(toggle);
 80006e6:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <main+0xa4>)
 80006e8:	881b      	ldrh	r3, [r3, #0]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff fec8 	bl	8000480 <http_client_request>
      if (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0) == GPIO_PIN_SET)
 80006f0:	e7e3      	b.n	80006ba <main+0x4a>
 80006f2:	bf00      	nop
 80006f4:	0800536c 	.word	0x0800536c
 80006f8:	08005378 	.word	0x08005378
 80006fc:	40013000 	.word	0x40013000
 8000700:	08005398 	.word	0x08005398
 8000704:	080053ac 	.word	0x080053ac
 8000708:	080053c0 	.word	0x080053c0
 800070c:	40020000 	.word	0x40020000
 8000710:	40020400 	.word	0x40020400
 8000714:	20000894 	.word	0x20000894

08000718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b092      	sub	sp, #72	; 0x48
 800071c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	2234      	movs	r2, #52	; 0x34
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f003 fe16 	bl	8004358 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072c:	463b      	mov	r3, r7
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800073a:	4b1d      	ldr	r3, [pc, #116]	; (80007b0 <SystemClock_Config+0x98>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000742:	4a1b      	ldr	r2, [pc, #108]	; (80007b0 <SystemClock_Config+0x98>)
 8000744:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000748:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800074a:	2302      	movs	r3, #2
 800074c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800074e:	2301      	movs	r3, #1
 8000750:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000752:	2310      	movs	r3, #16
 8000754:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000756:	2302      	movs	r3, #2
 8000758:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800075a:	2300      	movs	r3, #0
 800075c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800075e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000762:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8000764:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000768:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	4618      	mov	r0, r3
 8000770:	f001 fd40 	bl	80021f4 <HAL_RCC_OscConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800077a:	f000 f8e9 	bl	8000950 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077e:	230f      	movs	r3, #15
 8000780:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000782:	2303      	movs	r3, #3
 8000784:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000786:	2300      	movs	r3, #0
 8000788:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000792:	463b      	mov	r3, r7
 8000794:	2101      	movs	r1, #1
 8000796:	4618      	mov	r0, r3
 8000798:	f002 f85c 	bl	8002854 <HAL_RCC_ClockConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80007a2:	f000 f8d5 	bl	8000950 <Error_Handler>
  }
}
 80007a6:	bf00      	nop
 80007a8:	3748      	adds	r7, #72	; 0x48
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40007000 	.word	0x40007000

080007b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007b8:	4b17      	ldr	r3, [pc, #92]	; (8000818 <MX_SPI1_Init+0x64>)
 80007ba:	4a18      	ldr	r2, [pc, #96]	; (800081c <MX_SPI1_Init+0x68>)
 80007bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007be:	4b16      	ldr	r3, [pc, #88]	; (8000818 <MX_SPI1_Init+0x64>)
 80007c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007c6:	4b14      	ldr	r3, [pc, #80]	; (8000818 <MX_SPI1_Init+0x64>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <MX_SPI1_Init+0x64>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_SPI1_Init+0x64>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_SPI1_Init+0x64>)
 80007da:	2200      	movs	r2, #0
 80007dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_SPI1_Init+0x64>)
 80007e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80007e6:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_SPI1_Init+0x64>)
 80007e8:	2210      	movs	r2, #16
 80007ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ec:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <MX_SPI1_Init+0x64>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_SPI1_Init+0x64>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <MX_SPI1_Init+0x64>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_SPI1_Init+0x64>)
 8000800:	220a      	movs	r2, #10
 8000802:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000804:	4804      	ldr	r0, [pc, #16]	; (8000818 <MX_SPI1_Init+0x64>)
 8000806:	f002 fa8d 	bl	8002d24 <HAL_SPI_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000810:	f000 f89e 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	200008f4 	.word	0x200008f4
 800081c:	40013000 	.word	0x40013000

08000820 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000824:	4b11      	ldr	r3, [pc, #68]	; (800086c <MX_USART1_UART_Init+0x4c>)
 8000826:	4a12      	ldr	r2, [pc, #72]	; (8000870 <MX_USART1_UART_Init+0x50>)
 8000828:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800082a:	4b10      	ldr	r3, [pc, #64]	; (800086c <MX_USART1_UART_Init+0x4c>)
 800082c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000830:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <MX_USART1_UART_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MX_USART1_UART_Init+0x4c>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <MX_USART1_UART_Init+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000844:	4b09      	ldr	r3, [pc, #36]	; (800086c <MX_USART1_UART_Init+0x4c>)
 8000846:	220c      	movs	r2, #12
 8000848:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <MX_USART1_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <MX_USART1_UART_Init+0x4c>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000856:	4805      	ldr	r0, [pc, #20]	; (800086c <MX_USART1_UART_Init+0x4c>)
 8000858:	f003 f906 	bl	8003a68 <HAL_UART_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000862:	f000 f875 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	200008b4 	.word	0x200008b4
 8000870:	40013800 	.word	0x40013800

08000874 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b088      	sub	sp, #32
 8000878:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087a:	f107 030c 	add.w	r3, r7, #12
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
 8000888:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	4b2d      	ldr	r3, [pc, #180]	; (8000940 <MX_GPIO_Init+0xcc>)
 800088c:	69db      	ldr	r3, [r3, #28]
 800088e:	4a2c      	ldr	r2, [pc, #176]	; (8000940 <MX_GPIO_Init+0xcc>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	61d3      	str	r3, [r2, #28]
 8000896:	4b2a      	ldr	r3, [pc, #168]	; (8000940 <MX_GPIO_Init+0xcc>)
 8000898:	69db      	ldr	r3, [r3, #28]
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a2:	4b27      	ldr	r3, [pc, #156]	; (8000940 <MX_GPIO_Init+0xcc>)
 80008a4:	69db      	ldr	r3, [r3, #28]
 80008a6:	4a26      	ldr	r2, [pc, #152]	; (8000940 <MX_GPIO_Init+0xcc>)
 80008a8:	f043 0308 	orr.w	r3, r3, #8
 80008ac:	61d3      	str	r3, [r2, #28]
 80008ae:	4b24      	ldr	r3, [pc, #144]	; (8000940 <MX_GPIO_Init+0xcc>)
 80008b0:	69db      	ldr	r3, [r3, #28]
 80008b2:	f003 0308 	and.w	r3, r3, #8
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ba:	4b21      	ldr	r3, [pc, #132]	; (8000940 <MX_GPIO_Init+0xcc>)
 80008bc:	69db      	ldr	r3, [r3, #28]
 80008be:	4a20      	ldr	r2, [pc, #128]	; (8000940 <MX_GPIO_Init+0xcc>)
 80008c0:	f043 0302 	orr.w	r3, r3, #2
 80008c4:	61d3      	str	r3, [r2, #28]
 80008c6:	4b1e      	ldr	r3, [pc, #120]	; (8000940 <MX_GPIO_Init+0xcc>)
 80008c8:	69db      	ldr	r3, [r3, #28]
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 80008d2:	2201      	movs	r2, #1
 80008d4:	2104      	movs	r1, #4
 80008d6:	481b      	ldr	r0, [pc, #108]	; (8000944 <MX_GPIO_Init+0xd0>)
 80008d8:	f001 fc5b 	bl	8002192 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80008dc:	2200      	movs	r2, #0
 80008de:	21c8      	movs	r1, #200	; 0xc8
 80008e0:	4819      	ldr	r0, [pc, #100]	; (8000948 <MX_GPIO_Init+0xd4>)
 80008e2:	f001 fc56 	bl	8002192 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008e6:	2301      	movs	r3, #1
 80008e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ea:	2300      	movs	r3, #0
 80008ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f2:	f107 030c 	add.w	r3, r7, #12
 80008f6:	4619      	mov	r1, r3
 80008f8:	4814      	ldr	r0, [pc, #80]	; (800094c <MX_GPIO_Init+0xd8>)
 80008fa:	f001 fab5 	bl	8001e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008fe:	2304      	movs	r3, #4
 8000900:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000902:	2301      	movs	r3, #1
 8000904:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090a:	2303      	movs	r3, #3
 800090c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800090e:	f107 030c 	add.w	r3, r7, #12
 8000912:	4619      	mov	r1, r3
 8000914:	480b      	ldr	r0, [pc, #44]	; (8000944 <MX_GPIO_Init+0xd0>)
 8000916:	f001 faa7 	bl	8001e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7;
 800091a:	23c8      	movs	r3, #200	; 0xc8
 800091c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091e:	2301      	movs	r3, #1
 8000920:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092a:	f107 030c 	add.w	r3, r7, #12
 800092e:	4619      	mov	r1, r3
 8000930:	4805      	ldr	r0, [pc, #20]	; (8000948 <MX_GPIO_Init+0xd4>)
 8000932:	f001 fa99 	bl	8001e68 <HAL_GPIO_Init>

}
 8000936:	bf00      	nop
 8000938:	3720      	adds	r7, #32
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800
 8000944:	40020c00 	.word	0x40020c00
 8000948:	40020400 	.word	0x40020400
 800094c:	40020000 	.word	0x40020000

08000950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr

0800095c <SOCK_socket>:
 * @param  port: The local port number to use with this socket.
 * @param  flag: Flag at add the Socket N Command Register.
 * @retval Error status.
 */
uint8_t SOCK_socket(uint8_t sn, uint8_t protocol, uint16_t port)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	71fb      	strb	r3, [r7, #7]
 8000966:	460b      	mov	r3, r1
 8000968:	71bb      	strb	r3, [r7, #6]
 800096a:	4613      	mov	r3, r2
 800096c:	80bb      	strh	r3, [r7, #4]
    if (DEBUG)
    {
        printf("SOCK_socket(%u, 0x%02X, %u)\r\n", (uint16_t) sn,
 800096e:	79f9      	ldrb	r1, [r7, #7]
 8000970:	79ba      	ldrb	r2, [r7, #6]
 8000972:	88bb      	ldrh	r3, [r7, #4]
 8000974:	4828      	ldr	r0, [pc, #160]	; (8000a18 <SOCK_socket+0xbc>)
 8000976:	f003 fcf7 	bl	8004368 <iprintf>
                (uint16_t) protocol, port);
    }

    /* Validate Socket Range is 0 to 7 */
    if (sn > 7) return SOCK_ERR;
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	2b07      	cmp	r3, #7
 800097e:	d901      	bls.n	8000984 <SOCK_socket+0x28>
 8000980:	23ff      	movs	r3, #255	; 0xff
 8000982:	e045      	b.n	8000a10 <SOCK_socket+0xb4>
 8000984:	f107 0308 	add.w	r3, r7, #8
 8000988:	617b      	str	r3, [r7, #20]
    W5500_ReadBuf(W5500_CB_REG, W5500_REG_SHAR, ptr, 6);
}
/* Reads the common Source IP Addr register */
INLINE void W5500_ReadSIPR(uint8_t *ptr)
{
    W5500_ReadBuf(W5500_CB_REG, W5500_REG_SIPR, ptr, 4);
 800098a:	2304      	movs	r3, #4
 800098c:	697a      	ldr	r2, [r7, #20]
 800098e:	210f      	movs	r1, #15
 8000990:	2000      	movs	r0, #0
 8000992:	f000 fecd 	bl	8001730 <W5500_ReadBuf>

    /* Check that source IP address has been set */
    uint32_t ip_addr;
    W5500_ReadSIPR((uint8_t*) &ip_addr);
    if (ip_addr == 0) return SOCK_ERR;
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d101      	bne.n	80009a0 <SOCK_socket+0x44>
 800099c:	23ff      	movs	r3, #255	; 0xff
 800099e:	e037      	b.n	8000a10 <SOCK_socket+0xb4>

    /* Get port if not already assigned */
    if (port == 0)
 80009a0:	88bb      	ldrh	r3, [r7, #4]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d105      	bne.n	80009b2 <SOCK_socket+0x56>
    {
        port = 10000 + sn;
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80009ae:	3310      	adds	r3, #16
 80009b0:	80bb      	strh	r3, [r7, #4]
    }

    /* Check socket is closed before opening */
    if (SOCK_close(sn) != SOCK_OK) return SOCK_ERR;
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	4618      	mov	r0, r3
 80009b6:	f000 f831 	bl	8000a1c <SOCK_close>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <SOCK_socket+0x68>
 80009c0:	23ff      	movs	r3, #255	; 0xff
 80009c2:	e025      	b.n	8000a10 <SOCK_socket+0xb4>
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	73fb      	strb	r3, [r7, #15]
 80009c8:	79bb      	ldrb	r3, [r7, #6]
 80009ca:	73bb      	strb	r3, [r7, #14]
    W5500_WriteReg8(W5500_CB_SnREG(s), W5500_REG_SnMR, val);
 80009cc:	7bfb      	ldrb	r3, [r7, #15]
 80009ce:	015b      	lsls	r3, r3, #5
 80009d0:	b25b      	sxtb	r3, r3
 80009d2:	f043 0308 	orr.w	r3, r3, #8
 80009d6:	b25b      	sxtb	r3, r3
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	7bba      	ldrb	r2, [r7, #14]
 80009dc:	2100      	movs	r1, #0
 80009de:	4618      	mov	r0, r3
 80009e0:	f000 fd16 	bl	8001410 <W5500_WriteReg8>
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	74fb      	strb	r3, [r7, #19]
 80009e8:	88bb      	ldrh	r3, [r7, #4]
 80009ea:	823b      	strh	r3, [r7, #16]
    W5500_WriteReg16(W5500_CB_SnREG(s), W5500_REG_SnPORT, val);
 80009ec:	7cfb      	ldrb	r3, [r7, #19]
 80009ee:	015b      	lsls	r3, r3, #5
 80009f0:	b25b      	sxtb	r3, r3
 80009f2:	f043 0308 	orr.w	r3, r3, #8
 80009f6:	b25b      	sxtb	r3, r3
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	8a3a      	ldrh	r2, [r7, #16]
 80009fc:	2104      	movs	r1, #4
 80009fe:	4618      	mov	r0, r3
 8000a00:	f000 fd46 	bl	8001490 <W5500_WriteReg16>
    /* Set protocol and port */
    W5500_WriteSnMR(sn, protocol);
    W5500_WriteSnPORT(sn, port);

    /* open the socket */
    W5500_ExecuteSnCmd(sn, W5500_SnCR_OPEN);
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	2101      	movs	r1, #1
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f000 ffef 	bl	80019ec <W5500_ExecuteSnCmd>
    return SOCK_OK;
 8000a0e:	2300      	movs	r3, #0
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3718      	adds	r7, #24
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	080053dc 	.word	0x080053dc

08000a1c <SOCK_close>:
 *
 * @param  sn: The socket number to close. Must be in range 0 to 7.
 * @retval Error status.
 */
uint8_t SOCK_close(uint8_t sn)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	71fb      	strb	r3, [r7, #7]
    if (DEBUG)
    {
        printf("SOCK_close(%u)\r\n", (uint16_t) sn);
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4811      	ldr	r0, [pc, #68]	; (8000a70 <SOCK_close+0x54>)
 8000a2c:	f003 fc9c 	bl	8004368 <iprintf>
    }

    /* Validate Socket Range is 0 to 7 */
    if (sn > 7) return SOCK_ERR;
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	2b07      	cmp	r3, #7
 8000a34:	d901      	bls.n	8000a3a <SOCK_close+0x1e>
 8000a36:	23ff      	movs	r3, #255	; 0xff
 8000a38:	e015      	b.n	8000a66 <SOCK_close+0x4a>

    /* issue socket close command */
    W5500_ExecuteSnCmd(sn, W5500_SnCR_CLOSE);
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	2110      	movs	r1, #16
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f000 ffd4 	bl	80019ec <W5500_ExecuteSnCmd>
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	73fb      	strb	r3, [r7, #15]
 8000a48:	23ff      	movs	r3, #255	; 0xff
 8000a4a:	73bb      	strb	r3, [r7, #14]
    W5500_WriteReg8(W5500_CB_SnREG(s), W5500_REG_SnIR, val);
 8000a4c:	7bfb      	ldrb	r3, [r7, #15]
 8000a4e:	015b      	lsls	r3, r3, #5
 8000a50:	b25b      	sxtb	r3, r3
 8000a52:	f043 0308 	orr.w	r3, r3, #8
 8000a56:	b25b      	sxtb	r3, r3
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	7bba      	ldrb	r2, [r7, #14]
 8000a5c:	2102      	movs	r1, #2
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 fcd6 	bl	8001410 <W5500_WriteReg8>

    /* clear all interrupts of the socket. */
    W5500_WriteSnIR(sn, 0xFF);

    return SOCK_OK;
 8000a64:	2300      	movs	r3, #0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	080053fc 	.word	0x080053fc

08000a74 <SOCK_connect>:
 * @param  addr: pointer to the IPV4 address (4 bytes) of the remote server.
 * @param  port: port of remote server
 * @retval Error status.
 */
uint8_t SOCK_connect(uint8_t sn, const uint8_t *addr, uint16_t port)
{
 8000a74:	b5b0      	push	{r4, r5, r7, lr}
 8000a76:	b08c      	sub	sp, #48	; 0x30
 8000a78:	af04      	add	r7, sp, #16
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	6039      	str	r1, [r7, #0]
 8000a7e:	71fb      	strb	r3, [r7, #7]
 8000a80:	4613      	mov	r3, r2
 8000a82:	80bb      	strh	r3, [r7, #4]
    if (DEBUG)
    {
        printf("SOCK_connect(%u, %u.%u.%u.%u, %u)\r\n", (uint16_t) sn,
 8000a84:	79f9      	ldrb	r1, [r7, #7]
                (uint16_t) addr[0], (uint16_t) addr[1], (uint16_t) addr[2],
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	781b      	ldrb	r3, [r3, #0]
        printf("SOCK_connect(%u, %u.%u.%u.%u, %u)\r\n", (uint16_t) sn,
 8000a8a:	461c      	mov	r4, r3
                (uint16_t) addr[0], (uint16_t) addr[1], (uint16_t) addr[2],
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	781b      	ldrb	r3, [r3, #0]
        printf("SOCK_connect(%u, %u.%u.%u.%u, %u)\r\n", (uint16_t) sn,
 8000a92:	461d      	mov	r5, r3
                (uint16_t) addr[0], (uint16_t) addr[1], (uint16_t) addr[2],
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	3302      	adds	r3, #2
 8000a98:	781b      	ldrb	r3, [r3, #0]
        printf("SOCK_connect(%u, %u.%u.%u.%u, %u)\r\n", (uint16_t) sn,
 8000a9a:	461a      	mov	r2, r3
                (uint16_t) addr[3], (uint16_t) port);
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	3303      	adds	r3, #3
 8000aa0:	781b      	ldrb	r3, [r3, #0]
        printf("SOCK_connect(%u, %u.%u.%u.%u, %u)\r\n", (uint16_t) sn,
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	88bb      	ldrh	r3, [r7, #4]
 8000aa6:	9302      	str	r3, [sp, #8]
 8000aa8:	9001      	str	r0, [sp, #4]
 8000aaa:	9200      	str	r2, [sp, #0]
 8000aac:	462b      	mov	r3, r5
 8000aae:	4622      	mov	r2, r4
 8000ab0:	4868      	ldr	r0, [pc, #416]	; (8000c54 <SOCK_connect+0x1e0>)
 8000ab2:	f003 fc59 	bl	8004368 <iprintf>
    }

    /* Validate Socket Range is 0 to 7 */
    if (sn > 7) return SOCK_ERR;
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	2b07      	cmp	r3, #7
 8000aba:	d901      	bls.n	8000ac0 <SOCK_connect+0x4c>
 8000abc:	23ff      	movs	r3, #255	; 0xff
 8000abe:	e0c4      	b.n	8000c4a <SOCK_connect+0x1d6>
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	77fb      	strb	r3, [r7, #31]
 */

/* Reads the Mode Reg register for the specified socket */
INLINE uint8_t W5500_ReadSnMR(uint8_t s)
{
    return W5500_ReadReg8(W5500_CB_SnREG(s), W5500_REG_SnMR);
 8000ac4:	7ffb      	ldrb	r3, [r7, #31]
 8000ac6:	015b      	lsls	r3, r3, #5
 8000ac8:	b25b      	sxtb	r3, r3
 8000aca:	f043 0308 	orr.w	r3, r3, #8
 8000ace:	b25b      	sxtb	r3, r3
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 fd23 	bl	8001520 <W5500_ReadReg8>
 8000ada:	4603      	mov	r3, r0

    /* check that socket is in TCP mode */
    if ((W5500_ReadSnMR(sn) & W5500_SnMR_PROTOCOL) != W5500_SnMR_TCP)
 8000adc:	f003 030f 	and.w	r3, r3, #15
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d001      	beq.n	8000ae8 <SOCK_connect+0x74>
    {
        return SOCK_ERR;
 8000ae4:	23ff      	movs	r3, #255	; 0xff
 8000ae6:	e0b0      	b.n	8000c4a <SOCK_connect+0x1d6>
    }

    /* Check IP address is not 255.255.255.255 */
    if ((addr[0] == 0xFF) && (addr[1] == 0xFF) && (addr[2] == 0xFF)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2bff      	cmp	r3, #255	; 0xff
 8000aee:	d110      	bne.n	8000b12 <SOCK_connect+0x9e>
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	3301      	adds	r3, #1
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	2bff      	cmp	r3, #255	; 0xff
 8000af8:	d10b      	bne.n	8000b12 <SOCK_connect+0x9e>
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	3302      	adds	r3, #2
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2bff      	cmp	r3, #255	; 0xff
 8000b02:	d106      	bne.n	8000b12 <SOCK_connect+0x9e>
            && (addr[3] == 0xFF))
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	3303      	adds	r3, #3
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	2bff      	cmp	r3, #255	; 0xff
 8000b0c:	d101      	bne.n	8000b12 <SOCK_connect+0x9e>
    {
        return SOCK_ERR;
 8000b0e:	23ff      	movs	r3, #255	; 0xff
 8000b10:	e09b      	b.n	8000c4a <SOCK_connect+0x1d6>
    }

    /* Check IP address is not 0.0.0.0 */
    if ((addr[0] == 0xFF) && (addr[1] == 0xFF) && (addr[2] == 0xFF)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2bff      	cmp	r3, #255	; 0xff
 8000b18:	d110      	bne.n	8000b3c <SOCK_connect+0xc8>
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2bff      	cmp	r3, #255	; 0xff
 8000b22:	d10b      	bne.n	8000b3c <SOCK_connect+0xc8>
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	3302      	adds	r3, #2
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	2bff      	cmp	r3, #255	; 0xff
 8000b2c:	d106      	bne.n	8000b3c <SOCK_connect+0xc8>
            && (addr[3] == 0xFF))
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	3303      	adds	r3, #3
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2bff      	cmp	r3, #255	; 0xff
 8000b36:	d101      	bne.n	8000b3c <SOCK_connect+0xc8>
    {
        return SOCK_ERR;
 8000b38:	23ff      	movs	r3, #255	; 0xff
 8000b3a:	e086      	b.n	8000c4a <SOCK_connect+0x1d6>
    }

    /* Check that the remote port is not zero */
    if (port == 0) return SOCK_ERR;
 8000b3c:	88bb      	ldrh	r3, [r7, #4]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d101      	bne.n	8000b46 <SOCK_connect+0xd2>
 8000b42:	23ff      	movs	r3, #255	; 0xff
 8000b44:	e081      	b.n	8000c4a <SOCK_connect+0x1d6>
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	77bb      	strb	r3, [r7, #30]
    return W5500_ReadReg8(W5500_CB_SnREG(s), W5500_REG_SnIR);
}
/* Reads the Status Reg register for the specified socket */
INLINE uint8_t W5500_ReadSnSR(uint8_t s)
{
    return W5500_ReadReg8(W5500_CB_SnREG(s), W5500_REG_SnSR);
 8000b4a:	7fbb      	ldrb	r3, [r7, #30]
 8000b4c:	015b      	lsls	r3, r3, #5
 8000b4e:	b25b      	sxtb	r3, r3
 8000b50:	f043 0308 	orr.w	r3, r3, #8
 8000b54:	b25b      	sxtb	r3, r3
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	2103      	movs	r1, #3
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f000 fce0 	bl	8001520 <W5500_ReadReg8>
 8000b60:	4603      	mov	r3, r0

    /*Check that the socket is initialized */
    if ((W5500_ReadSnSR(sn) != W5500_SnSR_INIT)) return SOCK_ERR;
 8000b62:	2b13      	cmp	r3, #19
 8000b64:	d001      	beq.n	8000b6a <SOCK_connect+0xf6>
 8000b66:	23ff      	movs	r3, #255	; 0xff
 8000b68:	e06f      	b.n	8000c4a <SOCK_connect+0x1d6>
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	767b      	strb	r3, [r7, #25]
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	617b      	str	r3, [r7, #20]
    W5500_WriteBuf(W5500_CB_SnREG(s), W5500_REG_SnDIPR, ptr, 4);
 8000b72:	7e7b      	ldrb	r3, [r7, #25]
 8000b74:	015b      	lsls	r3, r3, #5
 8000b76:	b25b      	sxtb	r3, r3
 8000b78:	f043 0308 	orr.w	r3, r3, #8
 8000b7c:	b25b      	sxtb	r3, r3
 8000b7e:	b2d8      	uxtb	r0, r3
 8000b80:	2304      	movs	r3, #4
 8000b82:	697a      	ldr	r2, [r7, #20]
 8000b84:	210c      	movs	r1, #12
 8000b86:	f000 fd85 	bl	8001694 <W5500_WriteBuf>
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	777b      	strb	r3, [r7, #29]
 8000b8e:	88bb      	ldrh	r3, [r7, #4]
 8000b90:	837b      	strh	r3, [r7, #26]
    W5500_WriteReg16(W5500_CB_SnREG(s), W5500_REG_SnDPORT, val);
 8000b92:	7f7b      	ldrb	r3, [r7, #29]
 8000b94:	015b      	lsls	r3, r3, #5
 8000b96:	b25b      	sxtb	r3, r3
 8000b98:	f043 0308 	orr.w	r3, r3, #8
 8000b9c:	b25b      	sxtb	r3, r3
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	8b7a      	ldrh	r2, [r7, #26]
 8000ba2:	2110      	movs	r1, #16
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f000 fc73 	bl	8001490 <W5500_WriteReg16>
    /* Set remote address and port for socket */
    W5500_WriteSnDIPR(sn, addr);
    W5500_WriteSnDPORT(sn, port);

    /* Do connection */
    W5500_ExecuteSnCmd(sn, W5500_SnCR_CONNECT);
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	2104      	movs	r1, #4
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f000 ff1c 	bl	80019ec <W5500_ExecuteSnCmd>

    /* Wait until connection is established */
    while (W5500_ReadSnSR(sn) != W5500_SnSR_ESTABLISHED)
 8000bb4:	e035      	b.n	8000c22 <SOCK_connect+0x1ae>
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	74fb      	strb	r3, [r7, #19]
    return W5500_ReadReg8(W5500_CB_SnREG(s), W5500_REG_SnIR);
 8000bba:	7cfb      	ldrb	r3, [r7, #19]
 8000bbc:	015b      	lsls	r3, r3, #5
 8000bbe:	b25b      	sxtb	r3, r3
 8000bc0:	f043 0308 	orr.w	r3, r3, #8
 8000bc4:	b25b      	sxtb	r3, r3
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	2102      	movs	r1, #2
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f000 fca8 	bl	8001520 <W5500_ReadReg8>
 8000bd0:	4603      	mov	r3, r0
    {
        /* Check for timeout interrupt flag */
        if (W5500_ReadSnIR(sn) & W5500_SnIR_TIMEOUT)
 8000bd2:	f003 0308 	and.w	r3, r3, #8
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d011      	beq.n	8000bfe <SOCK_connect+0x18a>
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	74bb      	strb	r3, [r7, #18]
 8000bde:	2308      	movs	r3, #8
 8000be0:	747b      	strb	r3, [r7, #17]
    W5500_WriteReg8(W5500_CB_SnREG(s), W5500_REG_SnIR, val);
 8000be2:	7cbb      	ldrb	r3, [r7, #18]
 8000be4:	015b      	lsls	r3, r3, #5
 8000be6:	b25b      	sxtb	r3, r3
 8000be8:	f043 0308 	orr.w	r3, r3, #8
 8000bec:	b25b      	sxtb	r3, r3
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	7c7a      	ldrb	r2, [r7, #17]
 8000bf2:	2102      	movs	r1, #2
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f000 fc0b 	bl	8001410 <W5500_WriteReg8>
        {
            /* Clear interrupt flag*/
            W5500_WriteSnIR(sn, W5500_SnIR_TIMEOUT);
            return SOCK_ERR_TIMEOUT;
 8000bfa:	23fb      	movs	r3, #251	; 0xfb
 8000bfc:	e025      	b.n	8000c4a <SOCK_connect+0x1d6>
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	743b      	strb	r3, [r7, #16]
    return W5500_ReadReg8(W5500_CB_SnREG(s), W5500_REG_SnSR);
 8000c02:	7c3b      	ldrb	r3, [r7, #16]
 8000c04:	015b      	lsls	r3, r3, #5
 8000c06:	b25b      	sxtb	r3, r3
 8000c08:	f043 0308 	orr.w	r3, r3, #8
 8000c0c:	b25b      	sxtb	r3, r3
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	2103      	movs	r1, #3
 8000c12:	4618      	mov	r0, r3
 8000c14:	f000 fc84 	bl	8001520 <W5500_ReadReg8>
 8000c18:	4603      	mov	r3, r0
        }

        /* Check if socket was closed (by remote host?) */
        if (W5500_ReadSnSR(sn) == W5500_SnSR_CLOSED)
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d101      	bne.n	8000c22 <SOCK_connect+0x1ae>
        {
            return SOCK_ERR_CLOSED;
 8000c1e:	23fd      	movs	r3, #253	; 0xfd
 8000c20:	e013      	b.n	8000c4a <SOCK_connect+0x1d6>
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	73fb      	strb	r3, [r7, #15]
 8000c26:	7bfb      	ldrb	r3, [r7, #15]
 8000c28:	015b      	lsls	r3, r3, #5
 8000c2a:	b25b      	sxtb	r3, r3
 8000c2c:	f043 0308 	orr.w	r3, r3, #8
 8000c30:	b25b      	sxtb	r3, r3
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	2103      	movs	r1, #3
 8000c36:	4618      	mov	r0, r3
 8000c38:	f000 fc72 	bl	8001520 <W5500_ReadReg8>
 8000c3c:	4603      	mov	r3, r0
    while (W5500_ReadSnSR(sn) != W5500_SnSR_ESTABLISHED)
 8000c3e:	2b17      	cmp	r3, #23
 8000c40:	d1b9      	bne.n	8000bb6 <SOCK_connect+0x142>
        }
    }

    if (DEBUG) printf("SOCK_connect( ) done\r\n");
 8000c42:	4805      	ldr	r0, [pc, #20]	; (8000c58 <SOCK_connect+0x1e4>)
 8000c44:	f003 fc04 	bl	8004450 <puts>

    return SOCK_OK;
 8000c48:	2300      	movs	r3, #0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3720      	adds	r7, #32
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bdb0      	pop	{r4, r5, r7, pc}
 8000c52:	bf00      	nop
 8000c54:	08005424 	.word	0x08005424
 8000c58:	08005448 	.word	0x08005448

08000c5c <SOCK_disconnect>:
 *
 * @param  sn: The socket number to close. Must be in range 0 to 7.
 * @retval Error status.
 */
uint8_t SOCK_disconnect(uint8_t sn)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]
    if (DEBUG) printf("SOCK_disconnect(%u)\r\n", (uint16_t) sn);
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4827      	ldr	r0, [pc, #156]	; (8000d08 <SOCK_disconnect+0xac>)
 8000c6c:	f003 fb7c 	bl	8004368 <iprintf>

    /* Validate Socket Range is 0 to 7 */
    if (sn > 7) return SOCK_ERR;
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	2b07      	cmp	r3, #7
 8000c74:	d901      	bls.n	8000c7a <SOCK_disconnect+0x1e>
 8000c76:	23ff      	movs	r3, #255	; 0xff
 8000c78:	e042      	b.n	8000d00 <SOCK_disconnect+0xa4>
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	73fb      	strb	r3, [r7, #15]
    return W5500_ReadReg8(W5500_CB_SnREG(s), W5500_REG_SnMR);
 8000c7e:	7bfb      	ldrb	r3, [r7, #15]
 8000c80:	015b      	lsls	r3, r3, #5
 8000c82:	b25b      	sxtb	r3, r3
 8000c84:	f043 0308 	orr.w	r3, r3, #8
 8000c88:	b25b      	sxtb	r3, r3
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 fc46 	bl	8001520 <W5500_ReadReg8>
 8000c94:	4603      	mov	r3, r0

    /* check that socket is in TCP mode */
    if ((W5500_ReadSnMR(sn) & W5500_SnMR_PROTOCOL) != W5500_SnMR_TCP)
 8000c96:	f003 030f 	and.w	r3, r3, #15
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d001      	beq.n	8000ca2 <SOCK_disconnect+0x46>
    {
        return SOCK_ERR;
 8000c9e:	23ff      	movs	r3, #255	; 0xff
 8000ca0:	e02e      	b.n	8000d00 <SOCK_disconnect+0xa4>
    }

    /* do disconnect */
    W5500_ExecuteSnCmd(sn, W5500_SnCR_DISCON);
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	2108      	movs	r1, #8
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 fea0 	bl	80019ec <W5500_ExecuteSnCmd>

    /* wait for the socket to close */
    while (W5500_ReadSnSR(sn) != W5500_SnSR_CLOSED)
 8000cac:	e017      	b.n	8000cde <SOCK_disconnect+0x82>
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	73bb      	strb	r3, [r7, #14]
    return W5500_ReadReg8(W5500_CB_SnREG(s), W5500_REG_SnIR);
 8000cb2:	7bbb      	ldrb	r3, [r7, #14]
 8000cb4:	015b      	lsls	r3, r3, #5
 8000cb6:	b25b      	sxtb	r3, r3
 8000cb8:	f043 0308 	orr.w	r3, r3, #8
 8000cbc:	b25b      	sxtb	r3, r3
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	2102      	movs	r1, #2
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f000 fc2c 	bl	8001520 <W5500_ReadReg8>
 8000cc8:	4603      	mov	r3, r0
    {
        /* Check for timeout interrupt flag */
        if (W5500_ReadSnIR(sn) & W5500_SnIR_TIMEOUT)
 8000cca:	f003 0308 	and.w	r3, r3, #8
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d005      	beq.n	8000cde <SOCK_disconnect+0x82>
        {
            /* Close the socket (which clear interrupt flags */
            SOCK_close(sn);
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fea1 	bl	8000a1c <SOCK_close>
            return SOCK_ERR_TIMEOUT;
 8000cda:	23fb      	movs	r3, #251	; 0xfb
 8000cdc:	e010      	b.n	8000d00 <SOCK_disconnect+0xa4>
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	737b      	strb	r3, [r7, #13]
    return W5500_ReadReg8(W5500_CB_SnREG(s), W5500_REG_SnSR);
 8000ce2:	7b7b      	ldrb	r3, [r7, #13]
 8000ce4:	015b      	lsls	r3, r3, #5
 8000ce6:	b25b      	sxtb	r3, r3
 8000ce8:	f043 0308 	orr.w	r3, r3, #8
 8000cec:	b25b      	sxtb	r3, r3
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	2103      	movs	r1, #3
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 fc14 	bl	8001520 <W5500_ReadReg8>
 8000cf8:	4603      	mov	r3, r0
    while (W5500_ReadSnSR(sn) != W5500_SnSR_CLOSED)
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d1d7      	bne.n	8000cae <SOCK_disconnect+0x52>
        }
    }
    return SOCK_OK;
 8000cfe:	2300      	movs	r3, #0
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3710      	adds	r7, #16
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	08005460 	.word	0x08005460

08000d0c <SOCK_send>:
 * @param  *buf: pointer to the local buffer to write.
 * @param  len: number of the bytes to write.
 * @retval Number of bytes sent or zero on error.
 */
uint16_t SOCK_send(uint8_t sn, const uint8_t *buf, uint16_t len)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	6039      	str	r1, [r7, #0]
 8000d16:	71fb      	strb	r3, [r7, #7]
 8000d18:	4613      	mov	r3, r2
 8000d1a:	80bb      	strh	r3, [r7, #4]
    if (DEBUG)
    {
        printf("SOCK_send(%u, 0x%lX, %u)\r\n", (uint16_t) sn, (uint32_t) buf,
 8000d1c:	79f9      	ldrb	r1, [r7, #7]
 8000d1e:	683a      	ldr	r2, [r7, #0]
 8000d20:	88bb      	ldrh	r3, [r7, #4]
 8000d22:	4841      	ldr	r0, [pc, #260]	; (8000e28 <SOCK_send+0x11c>)
 8000d24:	f003 fb20 	bl	8004368 <iprintf>
                (uint16_t) len);
    }

    /* Validate Socket Range is 0 to 7 */
    if (sn > 7) return SOCK_ERR_PARAM;
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	2b07      	cmp	r3, #7
 8000d2c:	d902      	bls.n	8000d34 <SOCK_send+0x28>
 8000d2e:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 8000d32:	e075      	b.n	8000e20 <SOCK_send+0x114>
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	73bb      	strb	r3, [r7, #14]
    return W5500_ReadReg8(W5500_CB_SnREG(s), W5500_REG_SnMR);
 8000d38:	7bbb      	ldrb	r3, [r7, #14]
 8000d3a:	015b      	lsls	r3, r3, #5
 8000d3c:	b25b      	sxtb	r3, r3
 8000d3e:	f043 0308 	orr.w	r3, r3, #8
 8000d42:	b25b      	sxtb	r3, r3
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	2100      	movs	r1, #0
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f000 fbe9 	bl	8001520 <W5500_ReadReg8>
 8000d4e:	4603      	mov	r3, r0

    /* check that socket is in TCP mode */
    if ((W5500_ReadSnMR(sn) & W5500_SnMR_PROTOCOL) != W5500_SnMR_TCP)
 8000d50:	f003 030f 	and.w	r3, r3, #15
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d002      	beq.n	8000d5e <SOCK_send+0x52>
    {
        return SOCK_ERR_MODE;
 8000d58:	f64f 73fa 	movw	r3, #65530	; 0xfffa
 8000d5c:	e060      	b.n	8000e20 <SOCK_send+0x114>
    }

    /* validate the data length */
    if (len == 0) return 0;
 8000d5e:	88bb      	ldrh	r3, [r7, #4]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d101      	bne.n	8000d68 <SOCK_send+0x5c>
 8000d64:	2300      	movs	r3, #0
 8000d66:	e05b      	b.n	8000e20 <SOCK_send+0x114>
    if (len > W5500_TXBUF_SIZE) len = W5500_TXBUF_SIZE;
 8000d68:	88bb      	ldrh	r3, [r7, #4]
 8000d6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000d6e:	d902      	bls.n	8000d76 <SOCK_send+0x6a>
 8000d70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d74:	80bb      	strh	r3, [r7, #4]
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	737b      	strb	r3, [r7, #13]
    return W5500_ReadReg8(W5500_CB_SnREG(s), W5500_REG_SnSR);
 8000d7a:	7b7b      	ldrb	r3, [r7, #13]
 8000d7c:	015b      	lsls	r3, r3, #5
 8000d7e:	b25b      	sxtb	r3, r3
 8000d80:	f043 0308 	orr.w	r3, r3, #8
 8000d84:	b25b      	sxtb	r3, r3
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	2103      	movs	r1, #3
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 fbc8 	bl	8001520 <W5500_ReadReg8>
 8000d90:	4603      	mov	r3, r0

    /* check the socket status */
    uint8_t status = W5500_ReadSnSR(sn);
 8000d92:	73fb      	strb	r3, [r7, #15]
    if (status != W5500_SnSR_ESTABLISHED && status != W5500_SnSR_CLOSE_WAIT)
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
 8000d96:	2b17      	cmp	r3, #23
 8000d98:	d005      	beq.n	8000da6 <SOCK_send+0x9a>
 8000d9a:	7bfb      	ldrb	r3, [r7, #15]
 8000d9c:	2b1c      	cmp	r3, #28
 8000d9e:	d002      	beq.n	8000da6 <SOCK_send+0x9a>
    {
        return SOCK_ERR_STATUS;
 8000da0:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8000da4:	e03c      	b.n	8000e20 <SOCK_send+0x114>
    }

    /* wait for enough space to free up for the whole message */
    if (DEBUG) printf("SOCK: waiting for FSR space\r\n");
 8000da6:	4821      	ldr	r0, [pc, #132]	; (8000e2c <SOCK_send+0x120>)
 8000da8:	f003 fb52 	bl	8004450 <puts>
    while (W5500_ReadSnTX_FSR(sn) < len)
 8000dac:	e017      	b.n	8000dde <SOCK_send+0xd2>
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	733b      	strb	r3, [r7, #12]
 8000db2:	7b3b      	ldrb	r3, [r7, #12]
 8000db4:	015b      	lsls	r3, r3, #5
 8000db6:	b25b      	sxtb	r3, r3
 8000db8:	f043 0308 	orr.w	r3, r3, #8
 8000dbc:	b25b      	sxtb	r3, r3
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	2103      	movs	r1, #3
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f000 fbac 	bl	8001520 <W5500_ReadReg8>
 8000dc8:	4603      	mov	r3, r0
    {
        status = W5500_ReadSnSR(sn);
 8000dca:	73fb      	strb	r3, [r7, #15]
        if (status != W5500_SnSR_ESTABLISHED && status != W5500_SnSR_CLOSE_WAIT)
 8000dcc:	7bfb      	ldrb	r3, [r7, #15]
 8000dce:	2b17      	cmp	r3, #23
 8000dd0:	d005      	beq.n	8000dde <SOCK_send+0xd2>
 8000dd2:	7bfb      	ldrb	r3, [r7, #15]
 8000dd4:	2b1c      	cmp	r3, #28
 8000dd6:	d002      	beq.n	8000dde <SOCK_send+0xd2>
        {
            return SOCK_ERR_STATUS;
 8000dd8:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8000ddc:	e020      	b.n	8000e20 <SOCK_send+0x114>
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	72fb      	strb	r3, [r7, #11]
    return W5500_ReadReg8(W5500_CB_SnREG(s), W5500_REG_SnTXBUF_SIZE);
}
/* Reads the Tx Free Size register for the specified socket */
INLINE uint16_t W5500_ReadSnTX_FSR(uint8_t s)
{
    return W5500_ReadReg16Val(W5500_CB_SnREG(s), W5500_REG_SnTX_FSR);
 8000de2:	7afb      	ldrb	r3, [r7, #11]
 8000de4:	015b      	lsls	r3, r3, #5
 8000de6:	b25b      	sxtb	r3, r3
 8000de8:	f043 0308 	orr.w	r3, r3, #8
 8000dec:	b25b      	sxtb	r3, r3
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	2120      	movs	r1, #32
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 fc28 	bl	8001648 <W5500_ReadReg16Val>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	461a      	mov	r2, r3
    while (W5500_ReadSnTX_FSR(sn) < len)
 8000dfc:	88bb      	ldrh	r3, [r7, #4]
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d8d5      	bhi.n	8000dae <SOCK_send+0xa2>
        }
        /* TODO: add timeout */
    }
    if (DEBUG) printf("SOCK: FSR space available\r\n");
 8000e02:	480b      	ldr	r0, [pc, #44]	; (8000e30 <SOCK_send+0x124>)
 8000e04:	f003 fb24 	bl	8004450 <puts>

    W5500_WriteTxBuffer(sn, buf, len);
 8000e08:	88ba      	ldrh	r2, [r7, #4]
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	6839      	ldr	r1, [r7, #0]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f000 fcd8 	bl	80017c4 <W5500_WriteTxBuffer>
    W5500_ExecuteSnCmd(sn, W5500_SnCR_SEND);
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	2120      	movs	r1, #32
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 fde7 	bl	80019ec <W5500_ExecuteSnCmd>

    return len;
 8000e1e:	88bb      	ldrh	r3, [r7, #4]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3710      	adds	r7, #16
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	08005478 	.word	0x08005478
 8000e2c:	08005494 	.word	0x08005494
 8000e30:	080054b4 	.word	0x080054b4

08000e34 <SOCK_recv>:
 * @param  *buf: pointer to the local buffer to receive the data.
 * @param  len: length of the receive buffer in bytes.
 * @retval Number of bytes received or zero on error.
 */
uint16_t SOCK_recv(uint8_t sn, uint8_t *buf, uint16_t len)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	6039      	str	r1, [r7, #0]
 8000e3e:	71fb      	strb	r3, [r7, #7]
 8000e40:	4613      	mov	r3, r2
 8000e42:	80bb      	strh	r3, [r7, #4]
    if (DEBUG)
    {
        printf("SOCK_recv(%u, 0x%lX, %u)\r\n", (uint16_t) sn, (uint32_t) buf,
 8000e44:	79f9      	ldrb	r1, [r7, #7]
 8000e46:	683a      	ldr	r2, [r7, #0]
 8000e48:	88bb      	ldrh	r3, [r7, #4]
 8000e4a:	483d      	ldr	r0, [pc, #244]	; (8000f40 <SOCK_recv+0x10c>)
 8000e4c:	f003 fa8c 	bl	8004368 <iprintf>
                (uint16_t) len);
    }

    /* Validate Socket Range is 0 to 7 */
    if (sn > 7) return 0;
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	2b07      	cmp	r3, #7
 8000e54:	d901      	bls.n	8000e5a <SOCK_recv+0x26>
 8000e56:	2300      	movs	r3, #0
 8000e58:	e06d      	b.n	8000f36 <SOCK_recv+0x102>
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	72fb      	strb	r3, [r7, #11]
    return W5500_ReadReg8(W5500_CB_SnREG(s), W5500_REG_SnMR);
 8000e5e:	7afb      	ldrb	r3, [r7, #11]
 8000e60:	015b      	lsls	r3, r3, #5
 8000e62:	b25b      	sxtb	r3, r3
 8000e64:	f043 0308 	orr.w	r3, r3, #8
 8000e68:	b25b      	sxtb	r3, r3
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 fb56 	bl	8001520 <W5500_ReadReg8>
 8000e74:	4603      	mov	r3, r0

    /* check that socket is in TCP mode */
    if ((W5500_ReadSnMR(sn) & W5500_SnMR_PROTOCOL) != W5500_SnMR_TCP)
 8000e76:	f003 030f 	and.w	r3, r3, #15
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d001      	beq.n	8000e82 <SOCK_recv+0x4e>
    {
        return 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e059      	b.n	8000f36 <SOCK_recv+0x102>
    }

    /* validate the data length */
    if (len == 0) return 0;
 8000e82:	88bb      	ldrh	r3, [r7, #4]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d101      	bne.n	8000e8c <SOCK_recv+0x58>
 8000e88:	2300      	movs	r3, #0
 8000e8a:	e054      	b.n	8000f36 <SOCK_recv+0x102>
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	72bb      	strb	r3, [r7, #10]
    return W5500_ReadReg8(W5500_CB_SnREG(s), W5500_REG_SnSR);
 8000e90:	7abb      	ldrb	r3, [r7, #10]
 8000e92:	015b      	lsls	r3, r3, #5
 8000e94:	b25b      	sxtb	r3, r3
 8000e96:	f043 0308 	orr.w	r3, r3, #8
 8000e9a:	b25b      	sxtb	r3, r3
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	2103      	movs	r1, #3
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f000 fb3d 	bl	8001520 <W5500_ReadReg8>
 8000ea6:	4603      	mov	r3, r0

    /* check the socket status */
    uint8_t status = W5500_ReadSnSR(sn);
 8000ea8:	73fb      	strb	r3, [r7, #15]
    if (status != W5500_SnSR_ESTABLISHED && status != W5500_SnSR_CLOSE_WAIT)
 8000eaa:	7bfb      	ldrb	r3, [r7, #15]
 8000eac:	2b17      	cmp	r3, #23
 8000eae:	d004      	beq.n	8000eba <SOCK_recv+0x86>
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
 8000eb2:	2b1c      	cmp	r3, #28
 8000eb4:	d001      	beq.n	8000eba <SOCK_recv+0x86>
    {
        return 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	e03d      	b.n	8000f36 <SOCK_recv+0x102>
    }

    /* wait for receive data to be available */
    uint16_t recvsize = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	81bb      	strh	r3, [r7, #12]
    while ((recvsize = W5500_ReadSnRX_RSR(sn)) == 0)
 8000ebe:	e016      	b.n	8000eee <SOCK_recv+0xba>
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	727b      	strb	r3, [r7, #9]
 8000ec4:	7a7b      	ldrb	r3, [r7, #9]
 8000ec6:	015b      	lsls	r3, r3, #5
 8000ec8:	b25b      	sxtb	r3, r3
 8000eca:	f043 0308 	orr.w	r3, r3, #8
 8000ece:	b25b      	sxtb	r3, r3
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	2103      	movs	r1, #3
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f000 fb23 	bl	8001520 <W5500_ReadReg8>
 8000eda:	4603      	mov	r3, r0
    {
        status = W5500_ReadSnSR(sn);
 8000edc:	73fb      	strb	r3, [r7, #15]
        if (status != W5500_SnSR_ESTABLISHED && status != W5500_SnSR_CLOSE_WAIT)
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
 8000ee0:	2b17      	cmp	r3, #23
 8000ee2:	d004      	beq.n	8000eee <SOCK_recv+0xba>
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
 8000ee6:	2b1c      	cmp	r3, #28
 8000ee8:	d001      	beq.n	8000eee <SOCK_recv+0xba>
        {
            return 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	e023      	b.n	8000f36 <SOCK_recv+0x102>
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	723b      	strb	r3, [r7, #8]
    return W5500_ReadReg16(W5500_CB_SnREG(s), W5500_REG_SnTX_WR);
}
/* Reads the Rx Received Size register for the specified socket */
INLINE uint16_t W5500_ReadSnRX_RSR(uint8_t s)
{
    return W5500_ReadReg16Val(W5500_CB_SnREG(s), W5500_REG_SnRX_RSR);
 8000ef2:	7a3b      	ldrb	r3, [r7, #8]
 8000ef4:	015b      	lsls	r3, r3, #5
 8000ef6:	b25b      	sxtb	r3, r3
 8000ef8:	f043 0308 	orr.w	r3, r3, #8
 8000efc:	b25b      	sxtb	r3, r3
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	2126      	movs	r1, #38	; 0x26
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 fba0 	bl	8001648 <W5500_ReadReg16Val>
 8000f08:	4603      	mov	r3, r0
    while ((recvsize = W5500_ReadSnRX_RSR(sn)) == 0)
 8000f0a:	81bb      	strh	r3, [r7, #12]
 8000f0c:	89bb      	ldrh	r3, [r7, #12]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d0d6      	beq.n	8000ec0 <SOCK_recv+0x8c>
        }
    }

    if (recvsize < len) len = recvsize;
 8000f12:	89ba      	ldrh	r2, [r7, #12]
 8000f14:	88bb      	ldrh	r3, [r7, #4]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d201      	bcs.n	8000f1e <SOCK_recv+0xea>
 8000f1a:	89bb      	ldrh	r3, [r7, #12]
 8000f1c:	80bb      	strh	r3, [r7, #4]
    W5500_ReadRXBuffer(sn, buf, len);
 8000f1e:	88ba      	ldrh	r2, [r7, #4]
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	6839      	ldr	r1, [r7, #0]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f000 fcdb 	bl	80018e0 <W5500_ReadRXBuffer>
    W5500_ExecuteSnCmd(sn, W5500_SnCR_RECV);
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	2140      	movs	r1, #64	; 0x40
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 fd5c 	bl	80019ec <W5500_ExecuteSnCmd>

    return len;
 8000f34:	88bb      	ldrh	r3, [r7, #4]
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	080054d0 	.word	0x080054d0

08000f44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000f4a:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <HAL_MspInit+0x58>)
 8000f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4e:	4a13      	ldr	r2, [pc, #76]	; (8000f9c <HAL_MspInit+0x58>)
 8000f50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f54:	6253      	str	r3, [r2, #36]	; 0x24
 8000f56:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <HAL_MspInit+0x58>)
 8000f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f62:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <HAL_MspInit+0x58>)
 8000f64:	6a1b      	ldr	r3, [r3, #32]
 8000f66:	4a0d      	ldr	r2, [pc, #52]	; (8000f9c <HAL_MspInit+0x58>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6213      	str	r3, [r2, #32]
 8000f6e:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <HAL_MspInit+0x58>)
 8000f70:	6a1b      	ldr	r3, [r3, #32]
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7a:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <HAL_MspInit+0x58>)
 8000f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7e:	4a07      	ldr	r2, [pc, #28]	; (8000f9c <HAL_MspInit+0x58>)
 8000f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f84:	6253      	str	r3, [r2, #36]	; 0x24
 8000f86:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <HAL_MspInit+0x58>)
 8000f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f92:	bf00      	nop
 8000f94:	3714      	adds	r7, #20
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr
 8000f9c:	40023800 	.word	0x40023800

08000fa0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	; 0x28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a29      	ldr	r2, [pc, #164]	; (8001064 <HAL_SPI_MspInit+0xc4>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d14b      	bne.n	800105a <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fc2:	4b29      	ldr	r3, [pc, #164]	; (8001068 <HAL_SPI_MspInit+0xc8>)
 8000fc4:	6a1b      	ldr	r3, [r3, #32]
 8000fc6:	4a28      	ldr	r2, [pc, #160]	; (8001068 <HAL_SPI_MspInit+0xc8>)
 8000fc8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fcc:	6213      	str	r3, [r2, #32]
 8000fce:	4b26      	ldr	r3, [pc, #152]	; (8001068 <HAL_SPI_MspInit+0xc8>)
 8000fd0:	6a1b      	ldr	r3, [r3, #32]
 8000fd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	4b23      	ldr	r3, [pc, #140]	; (8001068 <HAL_SPI_MspInit+0xc8>)
 8000fdc:	69db      	ldr	r3, [r3, #28]
 8000fde:	4a22      	ldr	r2, [pc, #136]	; (8001068 <HAL_SPI_MspInit+0xc8>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	61d3      	str	r3, [r2, #28]
 8000fe6:	4b20      	ldr	r3, [pc, #128]	; (8001068 <HAL_SPI_MspInit+0xc8>)
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff2:	4b1d      	ldr	r3, [pc, #116]	; (8001068 <HAL_SPI_MspInit+0xc8>)
 8000ff4:	69db      	ldr	r3, [r3, #28]
 8000ff6:	4a1c      	ldr	r2, [pc, #112]	; (8001068 <HAL_SPI_MspInit+0xc8>)
 8000ff8:	f043 0302 	orr.w	r3, r3, #2
 8000ffc:	61d3      	str	r3, [r2, #28]
 8000ffe:	4b1a      	ldr	r3, [pc, #104]	; (8001068 <HAL_SPI_MspInit+0xc8>)
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800100a:	2320      	movs	r3, #32
 800100c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100e:	2302      	movs	r3, #2
 8001010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001016:	2303      	movs	r3, #3
 8001018:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800101a:	2305      	movs	r3, #5
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	4619      	mov	r1, r3
 8001024:	4811      	ldr	r0, [pc, #68]	; (800106c <HAL_SPI_MspInit+0xcc>)
 8001026:	f000 ff1f 	bl	8001e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800102a:	2330      	movs	r3, #48	; 0x30
 800102c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102e:	2302      	movs	r3, #2
 8001030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001036:	2303      	movs	r3, #3
 8001038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800103a:	2305      	movs	r3, #5
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	4619      	mov	r1, r3
 8001044:	480a      	ldr	r0, [pc, #40]	; (8001070 <HAL_SPI_MspInit+0xd0>)
 8001046:	f000 ff0f 	bl	8001e68 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	2100      	movs	r1, #0
 800104e:	2023      	movs	r0, #35	; 0x23
 8001050:	f000 fe93 	bl	8001d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001054:	2023      	movs	r0, #35	; 0x23
 8001056:	f000 feac 	bl	8001db2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800105a:	bf00      	nop
 800105c:	3728      	adds	r7, #40	; 0x28
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40013000 	.word	0x40013000
 8001068:	40023800 	.word	0x40023800
 800106c:	40020000 	.word	0x40020000
 8001070:	40020400 	.word	0x40020400

08001074 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08a      	sub	sp, #40	; 0x28
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	f107 0314 	add.w	r3, r7, #20
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a1b      	ldr	r2, [pc, #108]	; (8001100 <HAL_UART_MspInit+0x8c>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d130      	bne.n	80010f8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001096:	4b1b      	ldr	r3, [pc, #108]	; (8001104 <HAL_UART_MspInit+0x90>)
 8001098:	6a1b      	ldr	r3, [r3, #32]
 800109a:	4a1a      	ldr	r2, [pc, #104]	; (8001104 <HAL_UART_MspInit+0x90>)
 800109c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a0:	6213      	str	r3, [r2, #32]
 80010a2:	4b18      	ldr	r3, [pc, #96]	; (8001104 <HAL_UART_MspInit+0x90>)
 80010a4:	6a1b      	ldr	r3, [r3, #32]
 80010a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010aa:	613b      	str	r3, [r7, #16]
 80010ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ae:	4b15      	ldr	r3, [pc, #84]	; (8001104 <HAL_UART_MspInit+0x90>)
 80010b0:	69db      	ldr	r3, [r3, #28]
 80010b2:	4a14      	ldr	r2, [pc, #80]	; (8001104 <HAL_UART_MspInit+0x90>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	61d3      	str	r3, [r2, #28]
 80010ba:	4b12      	ldr	r3, [pc, #72]	; (8001104 <HAL_UART_MspInit+0x90>)
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010c6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010cc:	2302      	movs	r3, #2
 80010ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d4:	2303      	movs	r3, #3
 80010d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010d8:	2307      	movs	r3, #7
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	4619      	mov	r1, r3
 80010e2:	4809      	ldr	r0, [pc, #36]	; (8001108 <HAL_UART_MspInit+0x94>)
 80010e4:	f000 fec0 	bl	8001e68 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2100      	movs	r1, #0
 80010ec:	2025      	movs	r0, #37	; 0x25
 80010ee:	f000 fe44 	bl	8001d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010f2:	2025      	movs	r0, #37	; 0x25
 80010f4:	f000 fe5d 	bl	8001db2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80010f8:	bf00      	nop
 80010fa:	3728      	adds	r7, #40	; 0x28
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40013800 	.word	0x40013800
 8001104:	40023800 	.word	0x40023800
 8001108:	40020000 	.word	0x40020000

0800110c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr

08001118 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800111c:	e7fe      	b.n	800111c <HardFault_Handler+0x4>

0800111e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001122:	e7fe      	b.n	8001122 <MemManage_Handler+0x4>

08001124 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001128:	e7fe      	b.n	8001128 <BusFault_Handler+0x4>

0800112a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800112e:	e7fe      	b.n	800112e <UsageFault_Handler+0x4>

08001130 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr

0800113c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr

08001148 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr

08001154 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001158:	f000 fcfa 	bl	8001b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}

08001160 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001164:	4802      	ldr	r0, [pc, #8]	; (8001170 <SPI1_IRQHandler+0x10>)
 8001166:	f002 fa49 	bl	80035fc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	200008f4 	.word	0x200008f4

08001174 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001178:	4802      	ldr	r0, [pc, #8]	; (8001184 <USART1_IRQHandler+0x10>)
 800117a:	f002 fd5b 	bl	8003c34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	200008b4 	.word	0x200008b4

08001188 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
 8001198:	e00a      	b.n	80011b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800119a:	f3af 8000 	nop.w
 800119e:	4601      	mov	r1, r0
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	1c5a      	adds	r2, r3, #1
 80011a4:	60ba      	str	r2, [r7, #8]
 80011a6:	b2ca      	uxtb	r2, r1
 80011a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	3301      	adds	r3, #1
 80011ae:	617b      	str	r3, [r7, #20]
 80011b0:	697a      	ldr	r2, [r7, #20]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	dbf0      	blt.n	800119a <_read+0x12>
	}

return len;
 80011b8:	687b      	ldr	r3, [r7, #4]
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3718      	adds	r7, #24
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b086      	sub	sp, #24
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	60f8      	str	r0, [r7, #12]
 80011ca:	60b9      	str	r1, [r7, #8]
 80011cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ce:	2300      	movs	r3, #0
 80011d0:	617b      	str	r3, [r7, #20]
 80011d2:	e009      	b.n	80011e8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	1c5a      	adds	r2, r3, #1
 80011d8:	60ba      	str	r2, [r7, #8]
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff fa31 	bl	8000644 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	3301      	adds	r3, #1
 80011e6:	617b      	str	r3, [r7, #20]
 80011e8:	697a      	ldr	r2, [r7, #20]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	dbf1      	blt.n	80011d4 <_write+0x12>
	}
	return len;
 80011f0:	687b      	ldr	r3, [r7, #4]
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3718      	adds	r7, #24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <_close>:

int _close(int file)
{
 80011fa:	b480      	push	{r7}
 80011fc:	b083      	sub	sp, #12
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
	return -1;
 8001202:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001206:	4618      	mov	r0, r3
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr

08001210 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001220:	605a      	str	r2, [r3, #4]
	return 0;
 8001222:	2300      	movs	r3, #0
}
 8001224:	4618      	mov	r0, r3
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	bc80      	pop	{r7}
 800122c:	4770      	bx	lr

0800122e <_isatty>:

int _isatty(int file)
{
 800122e:	b480      	push	{r7}
 8001230:	b083      	sub	sp, #12
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
	return 1;
 8001236:	2301      	movs	r3, #1
}
 8001238:	4618      	mov	r0, r3
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr

08001242 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001242:	b480      	push	{r7}
 8001244:	b085      	sub	sp, #20
 8001246:	af00      	add	r7, sp, #0
 8001248:	60f8      	str	r0, [r7, #12]
 800124a:	60b9      	str	r1, [r7, #8]
 800124c:	607a      	str	r2, [r7, #4]
	return 0;
 800124e:	2300      	movs	r3, #0
}
 8001250:	4618      	mov	r0, r3
 8001252:	3714      	adds	r7, #20
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr
	...

0800125c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001264:	4a14      	ldr	r2, [pc, #80]	; (80012b8 <_sbrk+0x5c>)
 8001266:	4b15      	ldr	r3, [pc, #84]	; (80012bc <_sbrk+0x60>)
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001270:	4b13      	ldr	r3, [pc, #76]	; (80012c0 <_sbrk+0x64>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d102      	bne.n	800127e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001278:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <_sbrk+0x64>)
 800127a:	4a12      	ldr	r2, [pc, #72]	; (80012c4 <_sbrk+0x68>)
 800127c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800127e:	4b10      	ldr	r3, [pc, #64]	; (80012c0 <_sbrk+0x64>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4413      	add	r3, r2
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	429a      	cmp	r2, r3
 800128a:	d207      	bcs.n	800129c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800128c:	f003 f83a 	bl	8004304 <__errno>
 8001290:	4602      	mov	r2, r0
 8001292:	230c      	movs	r3, #12
 8001294:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001296:	f04f 33ff 	mov.w	r3, #4294967295
 800129a:	e009      	b.n	80012b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800129c:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <_sbrk+0x64>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012a2:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <_sbrk+0x64>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4413      	add	r3, r2
 80012aa:	4a05      	ldr	r2, [pc, #20]	; (80012c0 <_sbrk+0x64>)
 80012ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ae:	68fb      	ldr	r3, [r7, #12]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20004000 	.word	0x20004000
 80012bc:	00000400 	.word	0x00000400
 80012c0:	20000898 	.word	0x20000898
 80012c4:	20000958 	.word	0x20000958

080012c8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80012cc:	4b03      	ldr	r3, [pc, #12]	; (80012dc <SystemInit+0x14>)
 80012ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012d2:	609a      	str	r2, [r3, #8]
#endif
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <W5500_Init>:
 *
 * @param  None
 * @retval None
 */
void W5500_Init()
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08c      	sub	sp, #48	; 0x30
 80012e4:	af00      	add	r7, sp, #0
    W5500_NEGATE_CS();
 80012e6:	2201      	movs	r2, #1
 80012e8:	2104      	movs	r1, #4
 80012ea:	483b      	ldr	r0, [pc, #236]	; (80013d8 <W5500_Init+0xf8>)
 80012ec:	f000 ff51 	bl	8002192 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80012f0:	200a      	movs	r0, #10
 80012f2:	f000 fc49 	bl	8001b88 <HAL_Delay>
    W5500_SoftReset();
 80012f6:	f000 f879 	bl	80013ec <W5500_SoftReset>

    /* set all 8 socket buffers to 2 KB Tx and 2 KB Rx */
    for (uint8_t s = 0; s < W5500_MAX_SOCKET_NUM; s++ )
 80012fa:	2300      	movs	r3, #0
 80012fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001300:	e02e      	b.n	8001360 <W5500_Init+0x80>
 8001302:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001306:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800130a:	2302      	movs	r3, #2
 800130c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    W5500_WriteReg8(W5500_CB_SnREG(s), W5500_REG_SnRXBUF_SIZE, val);
 8001310:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001314:	015b      	lsls	r3, r3, #5
 8001316:	b25b      	sxtb	r3, r3
 8001318:	f043 0308 	orr.w	r3, r3, #8
 800131c:	b25b      	sxtb	r3, r3
 800131e:	b2db      	uxtb	r3, r3
 8001320:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001324:	211e      	movs	r1, #30
 8001326:	4618      	mov	r0, r3
 8001328:	f000 f872 	bl	8001410 <W5500_WriteReg8>
 800132c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001330:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001334:	2302      	movs	r3, #2
 8001336:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    W5500_WriteReg8(W5500_CB_SnREG(s), W5500_REG_SnTXBUF_SIZE, val);
 800133a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800133e:	015b      	lsls	r3, r3, #5
 8001340:	b25b      	sxtb	r3, r3
 8001342:	f043 0308 	orr.w	r3, r3, #8
 8001346:	b25b      	sxtb	r3, r3
 8001348:	b2db      	uxtb	r3, r3
 800134a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800134e:	211f      	movs	r1, #31
 8001350:	4618      	mov	r0, r3
 8001352:	f000 f85d 	bl	8001410 <W5500_WriteReg8>
 8001356:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800135a:	3301      	adds	r3, #1
 800135c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001360:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001364:	2b07      	cmp	r3, #7
 8001366:	d9cc      	bls.n	8001302 <W5500_Init+0x22>
        W5500_WriteSnRXBUF_SIZE(s, W5500_RXBUF_SIZE >> 10);
        W5500_WriteSnTXBUF_SIZE(s, W5500_TXBUF_SIZE >> 10);
    }

    /* Ethernet FeatherWing #3201 MAC address = 98:76:b6:10:62:21 */
    const uint8_t mac[6] =
 8001368:	4a1c      	ldr	r2, [pc, #112]	; (80013dc <W5500_Init+0xfc>)
 800136a:	f107 0310 	add.w	r3, r7, #16
 800136e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001372:	6018      	str	r0, [r3, #0]
 8001374:	3304      	adds	r3, #4
 8001376:	8019      	strh	r1, [r3, #0]
 8001378:	f107 0310 	add.w	r3, r7, #16
 800137c:	61bb      	str	r3, [r7, #24]
    W5500_WriteBuf(W5500_CB_REG, W5500_REG_SHAR, ptr, 6);
 800137e:	2306      	movs	r3, #6
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	2109      	movs	r1, #9
 8001384:	2000      	movs	r0, #0
 8001386:	f000 f985 	bl	8001694 <W5500_WriteBuf>
    {0x98, 0x76, 0xb6, 0x10, 0x62, 0x21};
    W5500_setMACAddress(mac);

    /* Local Fixed IP address = 192.168.1.150 */
    const uint8_t ip[4] =
 800138a:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <W5500_Init+0x100>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	f107 030c 	add.w	r3, r7, #12
 8001394:	61fb      	str	r3, [r7, #28]
    W5500_WriteBuf(W5500_CB_REG, W5500_REG_SIPR, ptr, 4);
 8001396:	2304      	movs	r3, #4
 8001398:	69fa      	ldr	r2, [r7, #28]
 800139a:	210f      	movs	r1, #15
 800139c:	2000      	movs	r0, #0
 800139e:	f000 f979 	bl	8001694 <W5500_WriteBuf>
    {192, 168, 2, 155};
    W5500_setIPAddress(ip);

    /* Gateway IP address = 192.168.1.1 */
    const uint8_t gw[4] =
 80013a2:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <W5500_Init+0x104>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	f107 0308 	add.w	r3, r7, #8
 80013ac:	623b      	str	r3, [r7, #32]
    W5500_WriteBuf(W5500_CB_REG, W5500_REG_GAR, ptr, 4);
 80013ae:	2304      	movs	r3, #4
 80013b0:	6a3a      	ldr	r2, [r7, #32]
 80013b2:	2101      	movs	r1, #1
 80013b4:	2000      	movs	r0, #0
 80013b6:	f000 f96d 	bl	8001694 <W5500_WriteBuf>
    {192, 168, 2, 1};
    W5500_setGatewayIp(gw);

    /* Subnet Mask = 255.255.255.0 */
    const uint8_t sn[4] =
 80013ba:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <W5500_Init+0x108>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	1d3b      	adds	r3, r7, #4
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24
    W5500_WriteBuf(W5500_CB_REG, W5500_REG_SUBR, ptr, 4);
 80013c4:	2304      	movs	r3, #4
 80013c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013c8:	2105      	movs	r1, #5
 80013ca:	2000      	movs	r0, #0
 80013cc:	f000 f962 	bl	8001694 <W5500_WriteBuf>
    {255, 255, 255, 0};
    W5500_setSubnetMask(sn);

}
 80013d0:	bf00      	nop
 80013d2:	3730      	adds	r7, #48	; 0x30
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40020c00 	.word	0x40020c00
 80013dc:	080054ec 	.word	0x080054ec
 80013e0:	080054f4 	.word	0x080054f4
 80013e4:	080054f8 	.word	0x080054f8
 80013e8:	080054fc 	.word	0x080054fc

080013ec <W5500_SoftReset>:
 *
 * @param  None
 * @retval None
 */
void W5500_SoftReset()
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	2380      	movs	r3, #128	; 0x80
 80013f4:	71fb      	strb	r3, [r7, #7]
    W5500_WriteReg8(W5500_CB_REG, W5500_REG_MR, val);
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	461a      	mov	r2, r3
 80013fa:	2100      	movs	r1, #0
 80013fc:	2000      	movs	r0, #0
 80013fe:	f000 f807 	bl	8001410 <W5500_WriteReg8>
    W5500_WriteMR(W5500_MR_RST);
    HAL_Delay(250);
 8001402:	20fa      	movs	r0, #250	; 0xfa
 8001404:	f000 fbc0 	bl	8001b88 <HAL_Delay>
}
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <W5500_WriteReg8>:
 * @param  reg: The address of the register to write. Register addresses are 8-bits.
 * @param  val: The value to write to the register.
 * @retval None
 */
void W5500_WriteReg8(uint8_t bsb, uint8_t reg, uint8_t val)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]
 800141a:	460b      	mov	r3, r1
 800141c:	71bb      	strb	r3, [r7, #6]
 800141e:	4613      	mov	r3, r2
 8001420:	717b      	strb	r3, [r7, #5]
    /* SPI Packet: [0:RegAddrHi][1:RegAddrLo][2:ControlByte][3:Value] */

    /* SPI packet length */
    const uint16_t len = 4;
 8001422:	2304      	movs	r3, #4
 8001424:	81fb      	strh	r3, [r7, #14]

    /* Register Address (8-bit, so first byte is zero) */
    txbuf[0] = 0x00;
 8001426:	4b16      	ldr	r3, [pc, #88]	; (8001480 <W5500_WriteReg8+0x70>)
 8001428:	2200      	movs	r2, #0
 800142a:	701a      	strb	r2, [r3, #0]
    txbuf[1] = reg;
 800142c:	4a14      	ldr	r2, [pc, #80]	; (8001480 <W5500_WriteReg8+0x70>)
 800142e:	79bb      	ldrb	r3, [r7, #6]
 8001430:	7053      	strb	r3, [r2, #1]

    /* Control Byte */
    txbuf[2] = bsb | W5500_CB_WRITE;
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	f043 0304 	orr.w	r3, r3, #4
 8001438:	b2da      	uxtb	r2, r3
 800143a:	4b11      	ldr	r3, [pc, #68]	; (8001480 <W5500_WriteReg8+0x70>)
 800143c:	709a      	strb	r2, [r3, #2]

    /* Register Value (b-bit) */
    txbuf[3] = val;
 800143e:	4a10      	ldr	r2, [pc, #64]	; (8001480 <W5500_WriteReg8+0x70>)
 8001440:	797b      	ldrb	r3, [r7, #5]
 8001442:	70d3      	strb	r3, [r2, #3]

    if (DEBUG)
    {
        printf("W5500_WriteReg8(0x%02X, 0x%02X, 0x%02X)\r\n", (uint16_t) bsb,
 8001444:	79f9      	ldrb	r1, [r7, #7]
 8001446:	79ba      	ldrb	r2, [r7, #6]
 8001448:	797b      	ldrb	r3, [r7, #5]
 800144a:	480e      	ldr	r0, [pc, #56]	; (8001484 <W5500_WriteReg8+0x74>)
 800144c:	f002 ff8c 	bl	8004368 <iprintf>
                (uint16_t) reg, (uint16_t) val);
    }

    /* Write SPI packet */
    W5500_CRITICAL_SPI_ENTER();
    W5500_ASSERT_CS();
 8001450:	2200      	movs	r2, #0
 8001452:	2104      	movs	r1, #4
 8001454:	480c      	ldr	r0, [pc, #48]	; (8001488 <W5500_WriteReg8+0x78>)
 8001456:	f000 fe9c 	bl	8002192 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800145a:	2001      	movs	r0, #1
 800145c:	f000 fb94 	bl	8001b88 <HAL_Delay>
    HAL_SPI_Transmit( &hspi1, txbuf, len, TIMEOUT_1_SEC);
 8001460:	89fa      	ldrh	r2, [r7, #14]
 8001462:	f242 7310 	movw	r3, #10000	; 0x2710
 8001466:	4906      	ldr	r1, [pc, #24]	; (8001480 <W5500_WriteReg8+0x70>)
 8001468:	4808      	ldr	r0, [pc, #32]	; (800148c <W5500_WriteReg8+0x7c>)
 800146a:	f001 fcd7 	bl	8002e1c <HAL_SPI_Transmit>
    W5500_NEGATE_CS();W5500_CRITICAL_SPI_EXIT();
 800146e:	2201      	movs	r2, #1
 8001470:	2104      	movs	r1, #4
 8001472:	4805      	ldr	r0, [pc, #20]	; (8001488 <W5500_WriteReg8+0x78>)
 8001474:	f000 fe8d 	bl	8002192 <HAL_GPIO_WritePin>
}
 8001478:	bf00      	nop
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	2000089c 	.word	0x2000089c
 8001484:	08005500 	.word	0x08005500
 8001488:	40020c00 	.word	0x40020c00
 800148c:	200008f4 	.word	0x200008f4

08001490 <W5500_WriteReg16>:
 * @param  reg: The address of the register to write. Register addresses are 8-bits.
 * @param  val: The value to write to the register.
 * @retval None
 */
void W5500_WriteReg16(uint8_t bsb, uint8_t reg, uint16_t val)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	71fb      	strb	r3, [r7, #7]
 800149a:	460b      	mov	r3, r1
 800149c:	71bb      	strb	r3, [r7, #6]
 800149e:	4613      	mov	r3, r2
 80014a0:	80bb      	strh	r3, [r7, #4]
    /* SPI Packet: [0:RegAddrHi][1:RegAddrLo][2:ControlByte][3:ValueHi][4:ValueLo] */

    /* SPI packet length */
    const uint16_t len = 5;
 80014a2:	2305      	movs	r3, #5
 80014a4:	81fb      	strh	r3, [r7, #14]

    /* Register Address (8-bit) */
    txbuf[0] = 0x00;
 80014a6:	4b1a      	ldr	r3, [pc, #104]	; (8001510 <W5500_WriteReg16+0x80>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	701a      	strb	r2, [r3, #0]
    txbuf[1] = reg;
 80014ac:	4a18      	ldr	r2, [pc, #96]	; (8001510 <W5500_WriteReg16+0x80>)
 80014ae:	79bb      	ldrb	r3, [r7, #6]
 80014b0:	7053      	strb	r3, [r2, #1]

    /* Control Byte */
    txbuf[2] = bsb | W5500_CB_WRITE;
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	f043 0304 	orr.w	r3, r3, #4
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	4b15      	ldr	r3, [pc, #84]	; (8001510 <W5500_WriteReg16+0x80>)
 80014bc:	709a      	strb	r2, [r3, #2]

    /* Register Value (16-bit) */
    txbuf[3] = (uint8_t) (val >> 8);
 80014be:	88bb      	ldrh	r3, [r7, #4]
 80014c0:	0a1b      	lsrs	r3, r3, #8
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	4b12      	ldr	r3, [pc, #72]	; (8001510 <W5500_WriteReg16+0x80>)
 80014c8:	70da      	strb	r2, [r3, #3]
    txbuf[4] = (uint8_t) (val & 0xFF);
 80014ca:	88bb      	ldrh	r3, [r7, #4]
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	4b10      	ldr	r3, [pc, #64]	; (8001510 <W5500_WriteReg16+0x80>)
 80014d0:	711a      	strb	r2, [r3, #4]

    if (DEBUG)
    {
        printf("W5500_WriteReg16(0x%02X, 0x%02X, 0x%04X)\r\n", (uint16_t) bsb,
 80014d2:	79f9      	ldrb	r1, [r7, #7]
 80014d4:	79ba      	ldrb	r2, [r7, #6]
 80014d6:	88bb      	ldrh	r3, [r7, #4]
 80014d8:	480e      	ldr	r0, [pc, #56]	; (8001514 <W5500_WriteReg16+0x84>)
 80014da:	f002 ff45 	bl	8004368 <iprintf>
                (uint16_t) reg, (uint16_t) val);
    }

    /* Write SPI packet */
    W5500_CRITICAL_SPI_ENTER();
    W5500_ASSERT_CS();
 80014de:	2200      	movs	r2, #0
 80014e0:	2104      	movs	r1, #4
 80014e2:	480d      	ldr	r0, [pc, #52]	; (8001518 <W5500_WriteReg16+0x88>)
 80014e4:	f000 fe55 	bl	8002192 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80014e8:	2001      	movs	r0, #1
 80014ea:	f000 fb4d 	bl	8001b88 <HAL_Delay>
    HAL_SPI_Transmit( &hspi1, txbuf, len, TIMEOUT_1_SEC);
 80014ee:	89fa      	ldrh	r2, [r7, #14]
 80014f0:	f242 7310 	movw	r3, #10000	; 0x2710
 80014f4:	4906      	ldr	r1, [pc, #24]	; (8001510 <W5500_WriteReg16+0x80>)
 80014f6:	4809      	ldr	r0, [pc, #36]	; (800151c <W5500_WriteReg16+0x8c>)
 80014f8:	f001 fc90 	bl	8002e1c <HAL_SPI_Transmit>
    W5500_NEGATE_CS();W5500_CRITICAL_SPI_EXIT();
 80014fc:	2201      	movs	r2, #1
 80014fe:	2104      	movs	r1, #4
 8001500:	4805      	ldr	r0, [pc, #20]	; (8001518 <W5500_WriteReg16+0x88>)
 8001502:	f000 fe46 	bl	8002192 <HAL_GPIO_WritePin>
}
 8001506:	bf00      	nop
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	2000089c 	.word	0x2000089c
 8001514:	0800552c 	.word	0x0800552c
 8001518:	40020c00 	.word	0x40020c00
 800151c:	200008f4 	.word	0x200008f4

08001520 <W5500_ReadReg8>:
 * @param  bsb: The block select bits to use in the control byte.
 * @param  reg: The address of the register to read. Register addresses are 8-bits.
 * @retval The value read from the register.
 */
uint8_t W5500_ReadReg8(uint8_t bsb, uint8_t reg)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af02      	add	r7, sp, #8
 8001526:	4603      	mov	r3, r0
 8001528:	460a      	mov	r2, r1
 800152a:	71fb      	strb	r3, [r7, #7]
 800152c:	4613      	mov	r3, r2
 800152e:	71bb      	strb	r3, [r7, #6]
    /* SPI Packet: [0:RegAddrHi][1:RegAddrLo][2:ControlByte][3:Value] */

    /* SPI packet length */
    const uint16_t len = 4;
 8001530:	2304      	movs	r3, #4
 8001532:	81fb      	strh	r3, [r7, #14]

    /* Register Address (8-bit) */
    txbuf[0] = 0x00;
 8001534:	4b17      	ldr	r3, [pc, #92]	; (8001594 <W5500_ReadReg8+0x74>)
 8001536:	2200      	movs	r2, #0
 8001538:	701a      	strb	r2, [r3, #0]
    txbuf[1] = reg;
 800153a:	4a16      	ldr	r2, [pc, #88]	; (8001594 <W5500_ReadReg8+0x74>)
 800153c:	79bb      	ldrb	r3, [r7, #6]
 800153e:	7053      	strb	r3, [r2, #1]

    /* Control Byte */
    txbuf[2] = bsb | W5500_CB_READ;
 8001540:	4a14      	ldr	r2, [pc, #80]	; (8001594 <W5500_ReadReg8+0x74>)
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	7093      	strb	r3, [r2, #2]

    /* Zero the read value (8-bits) */
    rxbuf[3] = 0x00;
 8001546:	4b14      	ldr	r3, [pc, #80]	; (8001598 <W5500_ReadReg8+0x78>)
 8001548:	2200      	movs	r2, #0
 800154a:	70da      	strb	r2, [r3, #3]

    /* Write & Read SPI packets */
    W5500_CRITICAL_SPI_ENTER();
    W5500_ASSERT_CS();
 800154c:	2200      	movs	r2, #0
 800154e:	2104      	movs	r1, #4
 8001550:	4812      	ldr	r0, [pc, #72]	; (800159c <W5500_ReadReg8+0x7c>)
 8001552:	f000 fe1e 	bl	8002192 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001556:	2001      	movs	r0, #1
 8001558:	f000 fb16 	bl	8001b88 <HAL_Delay>
    HAL_SPI_TransmitReceive( &hspi1, txbuf, rxbuf, len, TIMEOUT_1_SEC);
 800155c:	89fa      	ldrh	r2, [r7, #14]
 800155e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	4613      	mov	r3, r2
 8001566:	4a0c      	ldr	r2, [pc, #48]	; (8001598 <W5500_ReadReg8+0x78>)
 8001568:	490a      	ldr	r1, [pc, #40]	; (8001594 <W5500_ReadReg8+0x74>)
 800156a:	480d      	ldr	r0, [pc, #52]	; (80015a0 <W5500_ReadReg8+0x80>)
 800156c:	f001 fea3 	bl	80032b6 <HAL_SPI_TransmitReceive>
    W5500_NEGATE_CS();W5500_CRITICAL_SPI_EXIT();
 8001570:	2201      	movs	r2, #1
 8001572:	2104      	movs	r1, #4
 8001574:	4809      	ldr	r0, [pc, #36]	; (800159c <W5500_ReadReg8+0x7c>)
 8001576:	f000 fe0c 	bl	8002192 <HAL_GPIO_WritePin>

    if (DEBUG)
    {
        printf("W5500_ReadReg8(0x%02X, 0x%02X)=0x%02X\r\n", (uint16_t) bsb,
 800157a:	79f9      	ldrb	r1, [r7, #7]
 800157c:	79ba      	ldrb	r2, [r7, #6]
                (uint16_t) reg, (uint16_t) rxbuf[3]);
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <W5500_ReadReg8+0x78>)
 8001580:	78db      	ldrb	r3, [r3, #3]
        printf("W5500_ReadReg8(0x%02X, 0x%02X)=0x%02X\r\n", (uint16_t) bsb,
 8001582:	4808      	ldr	r0, [pc, #32]	; (80015a4 <W5500_ReadReg8+0x84>)
 8001584:	f002 fef0 	bl	8004368 <iprintf>
    }

    /* Read value (8-bits) */
    return rxbuf[3];
 8001588:	4b03      	ldr	r3, [pc, #12]	; (8001598 <W5500_ReadReg8+0x78>)
 800158a:	78db      	ldrb	r3, [r3, #3]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	2000089c 	.word	0x2000089c
 8001598:	200008a4 	.word	0x200008a4
 800159c:	40020c00 	.word	0x40020c00
 80015a0:	200008f4 	.word	0x200008f4
 80015a4:	08005558 	.word	0x08005558

080015a8 <W5500_ReadReg16>:
 * @param  bsb: The block select bits to use in the control byte.
 * @param  reg: The address of the register to read. Register addresses are 8-bits.
 * @retval The value read from the register.
 */
uint16_t W5500_ReadReg16(uint8_t bsb, uint8_t reg)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af02      	add	r7, sp, #8
 80015ae:	4603      	mov	r3, r0
 80015b0:	460a      	mov	r2, r1
 80015b2:	71fb      	strb	r3, [r7, #7]
 80015b4:	4613      	mov	r3, r2
 80015b6:	71bb      	strb	r3, [r7, #6]
    /* SPI Packet: [0:RegAddrHi][1:RegAddrLo][2:ControlByte][3:ValueHi][4:ValueLo] */

    /* SPI packet length */
    const uint16_t len = 5;
 80015b8:	2305      	movs	r3, #5
 80015ba:	81fb      	strh	r3, [r7, #14]

    /* Register Address (8-bit) */
    txbuf[0] = 0x00;
 80015bc:	4b1d      	ldr	r3, [pc, #116]	; (8001634 <W5500_ReadReg16+0x8c>)
 80015be:	2200      	movs	r2, #0
 80015c0:	701a      	strb	r2, [r3, #0]
    txbuf[1] = reg;
 80015c2:	4a1c      	ldr	r2, [pc, #112]	; (8001634 <W5500_ReadReg16+0x8c>)
 80015c4:	79bb      	ldrb	r3, [r7, #6]
 80015c6:	7053      	strb	r3, [r2, #1]

    /* Control Byte */
    txbuf[2] = bsb | W5500_CB_READ;
 80015c8:	4a1a      	ldr	r2, [pc, #104]	; (8001634 <W5500_ReadReg16+0x8c>)
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	7093      	strb	r3, [r2, #2]

    /* Zero the read value (16-bits) */
    rxbuf[3] = 0x00;
 80015ce:	4b1a      	ldr	r3, [pc, #104]	; (8001638 <W5500_ReadReg16+0x90>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	70da      	strb	r2, [r3, #3]
    rxbuf[4] = 0x00;
 80015d4:	4b18      	ldr	r3, [pc, #96]	; (8001638 <W5500_ReadReg16+0x90>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	711a      	strb	r2, [r3, #4]

    /* Write & Read SPI packets */
    W5500_CRITICAL_SPI_ENTER();
    W5500_ASSERT_CS();
 80015da:	2200      	movs	r2, #0
 80015dc:	2104      	movs	r1, #4
 80015de:	4817      	ldr	r0, [pc, #92]	; (800163c <W5500_ReadReg16+0x94>)
 80015e0:	f000 fdd7 	bl	8002192 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80015e4:	2001      	movs	r0, #1
 80015e6:	f000 facf 	bl	8001b88 <HAL_Delay>
    HAL_SPI_TransmitReceive( &hspi1, txbuf, rxbuf, len, TIMEOUT_1_SEC);
 80015ea:	89fa      	ldrh	r2, [r7, #14]
 80015ec:	f242 7310 	movw	r3, #10000	; 0x2710
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	4613      	mov	r3, r2
 80015f4:	4a10      	ldr	r2, [pc, #64]	; (8001638 <W5500_ReadReg16+0x90>)
 80015f6:	490f      	ldr	r1, [pc, #60]	; (8001634 <W5500_ReadReg16+0x8c>)
 80015f8:	4811      	ldr	r0, [pc, #68]	; (8001640 <W5500_ReadReg16+0x98>)
 80015fa:	f001 fe5c 	bl	80032b6 <HAL_SPI_TransmitReceive>
    W5500_NEGATE_CS();W5500_CRITICAL_SPI_EXIT();
 80015fe:	2201      	movs	r2, #1
 8001600:	2104      	movs	r1, #4
 8001602:	480e      	ldr	r0, [pc, #56]	; (800163c <W5500_ReadReg16+0x94>)
 8001604:	f000 fdc5 	bl	8002192 <HAL_GPIO_WritePin>

    /* Read value (16-bits) */
    uint16_t ret = (rxbuf[3] << 8) | rxbuf[4];
 8001608:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <W5500_ReadReg16+0x90>)
 800160a:	78db      	ldrb	r3, [r3, #3]
 800160c:	021b      	lsls	r3, r3, #8
 800160e:	b21a      	sxth	r2, r3
 8001610:	4b09      	ldr	r3, [pc, #36]	; (8001638 <W5500_ReadReg16+0x90>)
 8001612:	791b      	ldrb	r3, [r3, #4]
 8001614:	b21b      	sxth	r3, r3
 8001616:	4313      	orrs	r3, r2
 8001618:	b21b      	sxth	r3, r3
 800161a:	81bb      	strh	r3, [r7, #12]

    if (DEBUG)
    {
        printf("W5500_ReadReg16(0x%02X, 0x%02X)=0x%04X\r\n", (uint16_t) bsb,
 800161c:	79f9      	ldrb	r1, [r7, #7]
 800161e:	79ba      	ldrb	r2, [r7, #6]
 8001620:	89bb      	ldrh	r3, [r7, #12]
 8001622:	4808      	ldr	r0, [pc, #32]	; (8001644 <W5500_ReadReg16+0x9c>)
 8001624:	f002 fea0 	bl	8004368 <iprintf>
                (uint16_t) reg, ret);
    }

    return ret;
 8001628:	89bb      	ldrh	r3, [r7, #12]
}
 800162a:	4618      	mov	r0, r3
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	2000089c 	.word	0x2000089c
 8001638:	200008a4 	.word	0x200008a4
 800163c:	40020c00 	.word	0x40020c00
 8001640:	200008f4 	.word	0x200008f4
 8001644:	08005580 	.word	0x08005580

08001648 <W5500_ReadReg16Val>:
 * @param  bsb: The block select bits to use in the control byte.
 * @param  reg: The address of the register to read. Register addresses are 8-bits.
 * @retval The validated value read from the register.
 */
uint16_t W5500_ReadReg16Val(uint8_t bsb, uint8_t reg)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	460a      	mov	r2, r1
 8001652:	71fb      	strb	r3, [r7, #7]
 8001654:	4613      	mov	r3, r2
 8001656:	71bb      	strb	r3, [r7, #6]
    uint16_t val1 = 0;
 8001658:	2300      	movs	r3, #0
 800165a:	81bb      	strh	r3, [r7, #12]
    uint16_t val2 = W5500_ReadReg16(bsb, reg);
 800165c:	79ba      	ldrb	r2, [r7, #6]
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	4611      	mov	r1, r2
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff ffa0 	bl	80015a8 <W5500_ReadReg16>
 8001668:	4603      	mov	r3, r0
 800166a:	81fb      	strh	r3, [r7, #14]
    do
    {
        val1 = val2;
 800166c:	89fb      	ldrh	r3, [r7, #14]
 800166e:	81bb      	strh	r3, [r7, #12]
        val2 = W5500_ReadReg16(bsb, reg);
 8001670:	79ba      	ldrb	r2, [r7, #6]
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	4611      	mov	r1, r2
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff ff96 	bl	80015a8 <W5500_ReadReg16>
 800167c:	4603      	mov	r3, r0
 800167e:	81fb      	strh	r3, [r7, #14]
    } while (val1 != val2);
 8001680:	89ba      	ldrh	r2, [r7, #12]
 8001682:	89fb      	ldrh	r3, [r7, #14]
 8001684:	429a      	cmp	r2, r3
 8001686:	d1f1      	bne.n	800166c <W5500_ReadReg16Val+0x24>

    return val1;
 8001688:	89bb      	ldrh	r3, [r7, #12]
}
 800168a:	4618      	mov	r0, r3
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <W5500_WriteBuf>:
 * @param  len: number of the bytes to write.
 * @retval None
 */
void W5500_WriteBuf(uint8_t bsb, uint16_t addr, const uint8_t *buf,
        uint16_t len)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b088      	sub	sp, #32
 8001698:	af02      	add	r7, sp, #8
 800169a:	60ba      	str	r2, [r7, #8]
 800169c:	461a      	mov	r2, r3
 800169e:	4603      	mov	r3, r0
 80016a0:	73fb      	strb	r3, [r7, #15]
 80016a2:	460b      	mov	r3, r1
 80016a4:	81bb      	strh	r3, [r7, #12]
 80016a6:	4613      	mov	r3, r2
 80016a8:	80fb      	strh	r3, [r7, #6]
    /* SPI Packet: [0:RegAddrHi][1:RegAddrLo][2:ControlByte][3:Data0]...[N+3:DataN] */

    /* header length */
    const uint16_t header_len = 3;
 80016aa:	2303      	movs	r3, #3
 80016ac:	82fb      	strh	r3, [r7, #22]

    /* Address */
    txbuf[0] = (uint8_t) (addr >> 8);
 80016ae:	89bb      	ldrh	r3, [r7, #12]
 80016b0:	0a1b      	lsrs	r3, r3, #8
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	4b1a      	ldr	r3, [pc, #104]	; (8001720 <W5500_WriteBuf+0x8c>)
 80016b8:	701a      	strb	r2, [r3, #0]
    txbuf[1] = (uint8_t) (addr & 0xFF);
 80016ba:	89bb      	ldrh	r3, [r7, #12]
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	4b18      	ldr	r3, [pc, #96]	; (8001720 <W5500_WriteBuf+0x8c>)
 80016c0:	705a      	strb	r2, [r3, #1]

    /* Control Byte */
    txbuf[2] = bsb | W5500_CB_WRITE;
 80016c2:	7bfb      	ldrb	r3, [r7, #15]
 80016c4:	f043 0304 	orr.w	r3, r3, #4
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	4b15      	ldr	r3, [pc, #84]	; (8001720 <W5500_WriteBuf+0x8c>)
 80016cc:	709a      	strb	r2, [r3, #2]

    if (DEBUG)
    {
        printf("W5500_WriteBuf(0x%02X, 0x%04X, &0x%08lX, 0x%04X)\r\n",
 80016ce:	7bf9      	ldrb	r1, [r7, #15]
 80016d0:	89ba      	ldrh	r2, [r7, #12]
 80016d2:	68b8      	ldr	r0, [r7, #8]
 80016d4:	88fb      	ldrh	r3, [r7, #6]
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	4603      	mov	r3, r0
 80016da:	4812      	ldr	r0, [pc, #72]	; (8001724 <W5500_WriteBuf+0x90>)
 80016dc:	f002 fe44 	bl	8004368 <iprintf>
                (uint16_t) len);
    }

    /* Write 2-part SPI packet */
    W5500_CRITICAL_SPI_ENTER();
    W5500_ASSERT_CS();
 80016e0:	2200      	movs	r2, #0
 80016e2:	2104      	movs	r1, #4
 80016e4:	4810      	ldr	r0, [pc, #64]	; (8001728 <W5500_WriteBuf+0x94>)
 80016e6:	f000 fd54 	bl	8002192 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80016ea:	2001      	movs	r0, #1
 80016ec:	f000 fa4c 	bl	8001b88 <HAL_Delay>

    /* Write header */
    HAL_SPI_Transmit( &hspi1, txbuf, header_len, TIMEOUT_1_SEC);
 80016f0:	8afa      	ldrh	r2, [r7, #22]
 80016f2:	f242 7310 	movw	r3, #10000	; 0x2710
 80016f6:	490a      	ldr	r1, [pc, #40]	; (8001720 <W5500_WriteBuf+0x8c>)
 80016f8:	480c      	ldr	r0, [pc, #48]	; (800172c <W5500_WriteBuf+0x98>)
 80016fa:	f001 fb8f 	bl	8002e1c <HAL_SPI_Transmit>

    /* Write buffer */
    /* NOTE: buf is cast from pointer to const to pointer to non-const */
    /* the assumption is that HAL_SPI_Transmit(..) does not modify the buffer */
    HAL_SPI_Transmit( &hspi1, (uint8_t*) buf, len, TIMEOUT_1_SEC);
 80016fe:	88fa      	ldrh	r2, [r7, #6]
 8001700:	f242 7310 	movw	r3, #10000	; 0x2710
 8001704:	68b9      	ldr	r1, [r7, #8]
 8001706:	4809      	ldr	r0, [pc, #36]	; (800172c <W5500_WriteBuf+0x98>)
 8001708:	f001 fb88 	bl	8002e1c <HAL_SPI_Transmit>

    W5500_NEGATE_CS();W5500_CRITICAL_SPI_EXIT();
 800170c:	2201      	movs	r2, #1
 800170e:	2104      	movs	r1, #4
 8001710:	4805      	ldr	r0, [pc, #20]	; (8001728 <W5500_WriteBuf+0x94>)
 8001712:	f000 fd3e 	bl	8002192 <HAL_GPIO_WritePin>
}
 8001716:	bf00      	nop
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	2000089c 	.word	0x2000089c
 8001724:	080055ac 	.word	0x080055ac
 8001728:	40020c00 	.word	0x40020c00
 800172c:	200008f4 	.word	0x200008f4

08001730 <W5500_ReadBuf>:
 * @param  *buf: pointer to the local buffer to store read data.
 * @param  len: number of the bytes to read.
 * @retval None
 */
void W5500_ReadBuf(uint8_t bsb, uint16_t addr, uint8_t *buf, uint16_t len)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b088      	sub	sp, #32
 8001734:	af02      	add	r7, sp, #8
 8001736:	60ba      	str	r2, [r7, #8]
 8001738:	461a      	mov	r2, r3
 800173a:	4603      	mov	r3, r0
 800173c:	73fb      	strb	r3, [r7, #15]
 800173e:	460b      	mov	r3, r1
 8001740:	81bb      	strh	r3, [r7, #12]
 8001742:	4613      	mov	r3, r2
 8001744:	80fb      	strh	r3, [r7, #6]
    /* SPI Packet: [0:RegAddrHi][1:RegAddrLo][2:ControlByte][3:Data0]...[N+3:DataN] */

    /* header length */
    const uint16_t header_len = 3;
 8001746:	2303      	movs	r3, #3
 8001748:	82fb      	strh	r3, [r7, #22]

    /* Address */
    txbuf[0] = (uint8_t) (addr >> 8);
 800174a:	89bb      	ldrh	r3, [r7, #12]
 800174c:	0a1b      	lsrs	r3, r3, #8
 800174e:	b29b      	uxth	r3, r3
 8001750:	b2da      	uxtb	r2, r3
 8001752:	4b18      	ldr	r3, [pc, #96]	; (80017b4 <W5500_ReadBuf+0x84>)
 8001754:	701a      	strb	r2, [r3, #0]
    txbuf[1] = (uint8_t) (addr & 0xFF);
 8001756:	89bb      	ldrh	r3, [r7, #12]
 8001758:	b2da      	uxtb	r2, r3
 800175a:	4b16      	ldr	r3, [pc, #88]	; (80017b4 <W5500_ReadBuf+0x84>)
 800175c:	705a      	strb	r2, [r3, #1]

    /* Control Byte */
    txbuf[2] = bsb | W5500_CB_READ;
 800175e:	4a15      	ldr	r2, [pc, #84]	; (80017b4 <W5500_ReadBuf+0x84>)
 8001760:	7bfb      	ldrb	r3, [r7, #15]
 8001762:	7093      	strb	r3, [r2, #2]

    if (DEBUG)
    {
        printf("W5500_ReadBuf(0x%02X, 0x%04X, &0x%08lX, 0x%04X)\r\n",
 8001764:	7bf9      	ldrb	r1, [r7, #15]
 8001766:	89ba      	ldrh	r2, [r7, #12]
 8001768:	68b8      	ldr	r0, [r7, #8]
 800176a:	88fb      	ldrh	r3, [r7, #6]
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	4603      	mov	r3, r0
 8001770:	4811      	ldr	r0, [pc, #68]	; (80017b8 <W5500_ReadBuf+0x88>)
 8001772:	f002 fdf9 	bl	8004368 <iprintf>
                (uint16_t) len);
    }

    /* Write 2-part SPI packet */
    W5500_CRITICAL_SPI_ENTER();
    W5500_ASSERT_CS();
 8001776:	2200      	movs	r2, #0
 8001778:	2104      	movs	r1, #4
 800177a:	4810      	ldr	r0, [pc, #64]	; (80017bc <W5500_ReadBuf+0x8c>)
 800177c:	f000 fd09 	bl	8002192 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001780:	2001      	movs	r0, #1
 8001782:	f000 fa01 	bl	8001b88 <HAL_Delay>

    /* Write header */
    HAL_SPI_Transmit( &hspi1, txbuf, header_len, TIMEOUT_1_SEC);
 8001786:	8afa      	ldrh	r2, [r7, #22]
 8001788:	f242 7310 	movw	r3, #10000	; 0x2710
 800178c:	4909      	ldr	r1, [pc, #36]	; (80017b4 <W5500_ReadBuf+0x84>)
 800178e:	480c      	ldr	r0, [pc, #48]	; (80017c0 <W5500_ReadBuf+0x90>)
 8001790:	f001 fb44 	bl	8002e1c <HAL_SPI_Transmit>

    /* Write buffer */
    HAL_SPI_Receive( &hspi1, buf, len, TIMEOUT_1_SEC);
 8001794:	88fa      	ldrh	r2, [r7, #6]
 8001796:	f242 7310 	movw	r3, #10000	; 0x2710
 800179a:	68b9      	ldr	r1, [r7, #8]
 800179c:	4808      	ldr	r0, [pc, #32]	; (80017c0 <W5500_ReadBuf+0x90>)
 800179e:	f001 fc79 	bl	8003094 <HAL_SPI_Receive>

    W5500_NEGATE_CS();W5500_CRITICAL_SPI_EXIT();
 80017a2:	2201      	movs	r2, #1
 80017a4:	2104      	movs	r1, #4
 80017a6:	4805      	ldr	r0, [pc, #20]	; (80017bc <W5500_ReadBuf+0x8c>)
 80017a8:	f000 fcf3 	bl	8002192 <HAL_GPIO_WritePin>
}
 80017ac:	bf00      	nop
 80017ae:	3718      	adds	r7, #24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	2000089c 	.word	0x2000089c
 80017b8:	080055e0 	.word	0x080055e0
 80017bc:	40020c00 	.word	0x40020c00
 80017c0:	200008f4 	.word	0x200008f4

080017c4 <W5500_WriteTxBuffer>:
 * @param  len: number of the bytes to write.
 * @retval None
 *
 */
void W5500_WriteTxBuffer(uint8_t sn, const uint8_t *buf, uint16_t len)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08e      	sub	sp, #56	; 0x38
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	6039      	str	r1, [r7, #0]
 80017ce:	71fb      	strb	r3, [r7, #7]
 80017d0:	4613      	mov	r3, r2
 80017d2:	80bb      	strh	r3, [r7, #4]
    if (DEBUG)
    {
        printf("W5500_WriteTxBuffer(%u, 0x%lX, %u)\r\n", (uint16_t) sn,
 80017d4:	79f9      	ldrb	r1, [r7, #7]
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	88bb      	ldrh	r3, [r7, #4]
 80017da:	4840      	ldr	r0, [pc, #256]	; (80018dc <W5500_WriteTxBuffer+0x118>)
 80017dc:	f002 fdc4 	bl	8004368 <iprintf>
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    return W5500_ReadReg16(W5500_CB_SnREG(s), W5500_REG_SnTX_WR);
 80017e6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80017ea:	015b      	lsls	r3, r3, #5
 80017ec:	b25b      	sxtb	r3, r3
 80017ee:	f043 0308 	orr.w	r3, r3, #8
 80017f2:	b25b      	sxtb	r3, r3
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2124      	movs	r1, #36	; 0x24
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff fed5 	bl	80015a8 <W5500_ReadReg16>
 80017fe:	4603      	mov	r3, r0

    uint16_t tx_ptr;
    uint16_t buf_ptr;

    /* get the transmit pointer */
    tx_ptr = W5500_ReadSnTX_WR(sn);
 8001800:	86fb      	strh	r3, [r7, #54]	; 0x36

    /* mask it to be within the physical Tx buffer */
    buf_ptr = tx_ptr & W5500_TXBUF_MASK;
 8001802:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001804:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001808:	86bb      	strh	r3, [r7, #52]	; 0x34

    /* If this data extends past the end of the TX buffer, it has
     * to wrap around to the beginning of the TX buffer. */
    if ((buf_ptr + len) > W5500_TXBUF_SIZE)
 800180a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800180c:	88bb      	ldrh	r3, [r7, #4]
 800180e:	4413      	add	r3, r2
 8001810:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001814:	dd36      	ble.n	8001884 <W5500_WriteTxBuffer+0xc0>
    {
        /* compute the size that fits to the end of TX buffer */
        uint16_t size = W5500_TXBUF_SIZE - buf_ptr;
 8001816:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001818:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800181c:	867b      	strh	r3, [r7, #50]	; 0x32
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001824:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001826:	847b      	strh	r3, [r7, #34]	; 0x22
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	61fb      	str	r3, [r7, #28]
 800182c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800182e:	837b      	strh	r3, [r7, #26]
    W5500_WriteBuf(W5500_CB_SnTX(s), addr, buf, len);
 8001830:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001834:	015b      	lsls	r3, r3, #5
 8001836:	b25b      	sxtb	r3, r3
 8001838:	f043 0310 	orr.w	r3, r3, #16
 800183c:	b25b      	sxtb	r3, r3
 800183e:	b2d8      	uxtb	r0, r3
 8001840:	8b7b      	ldrh	r3, [r7, #26]
 8001842:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8001844:	69fa      	ldr	r2, [r7, #28]
 8001846:	f7ff ff25 	bl	8001694 <W5500_WriteBuf>
        W5500_WriteSnTXBuf(sn, buf_ptr, buf, size);

        /* what's left goes in the beginning of the TX buffer */
        W5500_WriteSnTXBuf(sn, 0, (buf + size), (len - size));
 800184a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	4413      	add	r3, r2
 8001850:	88b9      	ldrh	r1, [r7, #4]
 8001852:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8001854:	1a8a      	subs	r2, r1, r2
 8001856:	b291      	uxth	r1, r2
 8001858:	79fa      	ldrb	r2, [r7, #7]
 800185a:	f887 2030 	strb.w	r2, [r7, #48]	; 0x30
 800185e:	2200      	movs	r2, #0
 8001860:	85fa      	strh	r2, [r7, #46]	; 0x2e
 8001862:	62bb      	str	r3, [r7, #40]	; 0x28
 8001864:	460b      	mov	r3, r1
 8001866:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001868:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800186c:	015b      	lsls	r3, r3, #5
 800186e:	b25b      	sxtb	r3, r3
 8001870:	f043 0310 	orr.w	r3, r3, #16
 8001874:	b25b      	sxtb	r3, r3
 8001876:	b2d8      	uxtb	r0, r3
 8001878:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800187a:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 800187c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800187e:	f7ff ff09 	bl	8001694 <W5500_WriteBuf>
 8001882:	e013      	b.n	80018ac <W5500_WriteTxBuffer+0xe8>
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	767b      	strb	r3, [r7, #25]
 8001888:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800188a:	82fb      	strh	r3, [r7, #22]
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	613b      	str	r3, [r7, #16]
 8001890:	88bb      	ldrh	r3, [r7, #4]
 8001892:	81fb      	strh	r3, [r7, #14]
 8001894:	7e7b      	ldrb	r3, [r7, #25]
 8001896:	015b      	lsls	r3, r3, #5
 8001898:	b25b      	sxtb	r3, r3
 800189a:	f043 0310 	orr.w	r3, r3, #16
 800189e:	b25b      	sxtb	r3, r3
 80018a0:	b2d8      	uxtb	r0, r3
 80018a2:	89fb      	ldrh	r3, [r7, #14]
 80018a4:	8af9      	ldrh	r1, [r7, #22]
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	f7ff fef4 	bl	8001694 <W5500_WriteBuf>
        /* does not wrap around end of Tx buffer */
        W5500_WriteSnTXBuf(sn, buf_ptr, buf, len);
    }

    /* indicate how much we have written into the Tx buffer */
    W5500_WriteSnTX_WR(sn, tx_ptr + len);
 80018ac:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80018ae:	88bb      	ldrh	r3, [r7, #4]
 80018b0:	4413      	add	r3, r2
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	737b      	strb	r3, [r7, #13]
 80018b8:	4613      	mov	r3, r2
 80018ba:	817b      	strh	r3, [r7, #10]
    W5500_WriteReg16(W5500_CB_SnREG(s), W5500_REG_SnTX_WR, val);
 80018bc:	7b7b      	ldrb	r3, [r7, #13]
 80018be:	015b      	lsls	r3, r3, #5
 80018c0:	b25b      	sxtb	r3, r3
 80018c2:	f043 0308 	orr.w	r3, r3, #8
 80018c6:	b25b      	sxtb	r3, r3
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	897a      	ldrh	r2, [r7, #10]
 80018cc:	2124      	movs	r1, #36	; 0x24
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff fdde 	bl	8001490 <W5500_WriteReg16>
}
 80018d4:	bf00      	nop
 80018d6:	3738      	adds	r7, #56	; 0x38
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	08005614 	.word	0x08005614

080018e0 <W5500_ReadRXBuffer>:
 * @param  len: number of the bytes to read.
 * @retval None
 *
 */
void W5500_ReadRXBuffer(uint8_t sn, uint8_t *buf, uint16_t len)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08e      	sub	sp, #56	; 0x38
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	6039      	str	r1, [r7, #0]
 80018ea:	71fb      	strb	r3, [r7, #7]
 80018ec:	4613      	mov	r3, r2
 80018ee:	80bb      	strh	r3, [r7, #4]
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
}
/* Reads the Rx Read Pointer register for the specified socket */
INLINE uint16_t W5500_ReadSnRX_RD(uint8_t s)
{
    return W5500_ReadReg16(W5500_CB_SnREG(s), W5500_REG_SnRX_RD);
 80018f6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80018fa:	015b      	lsls	r3, r3, #5
 80018fc:	b25b      	sxtb	r3, r3
 80018fe:	f043 0308 	orr.w	r3, r3, #8
 8001902:	b25b      	sxtb	r3, r3
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2128      	movs	r1, #40	; 0x28
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff fe4d 	bl	80015a8 <W5500_ReadReg16>
 800190e:	4603      	mov	r3, r0
    uint16_t rx_ptr;
    uint16_t buf_ptr;

    /* get the receive pointer */
    rx_ptr = W5500_ReadSnRX_RD(sn);
 8001910:	86fb      	strh	r3, [r7, #54]	; 0x36

    /* mask it to be within the physical Rx buffer */
    buf_ptr = rx_ptr & W5500_RXBUF_MASK;
 8001912:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001914:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001918:	86bb      	strh	r3, [r7, #52]	; 0x34

    /* If this data extends past the end of the Rx buffer, it is
     * wrapped around to the beginning of the Rx buffer. */
    if ((buf_ptr + len) > W5500_RXBUF_SIZE)
 800191a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800191c:	88bb      	ldrh	r3, [r7, #4]
 800191e:	4413      	add	r3, r2
 8001920:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001924:	dd36      	ble.n	8001994 <W5500_ReadRXBuffer+0xb4>
    {
        /* compute the size that fits to the end of Rx buffer */
        uint16_t size = W5500_RXBUF_SIZE - buf_ptr;
 8001926:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001928:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800192c:	867b      	strh	r3, [r7, #50]	; 0x32
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001934:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001936:	847b      	strh	r3, [r7, #34]	; 0x22
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	61fb      	str	r3, [r7, #28]
 800193c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800193e:	837b      	strh	r3, [r7, #26]
    W5500_ReadBuf(W5500_CB_SnRX(s), addr, buf, len);
 8001940:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001944:	015b      	lsls	r3, r3, #5
 8001946:	b25b      	sxtb	r3, r3
 8001948:	f043 0318 	orr.w	r3, r3, #24
 800194c:	b25b      	sxtb	r3, r3
 800194e:	b2d8      	uxtb	r0, r3
 8001950:	8b7b      	ldrh	r3, [r7, #26]
 8001952:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8001954:	69fa      	ldr	r2, [r7, #28]
 8001956:	f7ff feeb 	bl	8001730 <W5500_ReadBuf>
        W5500_ReadSnRXBuf(sn, buf_ptr, buf, size);

        /* what's left is at the beginning of he Rx buffer */
        W5500_ReadSnRXBuf(sn, 0, (buf + size), (len - size));
 800195a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	4413      	add	r3, r2
 8001960:	88b9      	ldrh	r1, [r7, #4]
 8001962:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8001964:	1a8a      	subs	r2, r1, r2
 8001966:	b291      	uxth	r1, r2
 8001968:	79fa      	ldrb	r2, [r7, #7]
 800196a:	f887 2030 	strb.w	r2, [r7, #48]	; 0x30
 800196e:	2200      	movs	r2, #0
 8001970:	85fa      	strh	r2, [r7, #46]	; 0x2e
 8001972:	62bb      	str	r3, [r7, #40]	; 0x28
 8001974:	460b      	mov	r3, r1
 8001976:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001978:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800197c:	015b      	lsls	r3, r3, #5
 800197e:	b25b      	sxtb	r3, r3
 8001980:	f043 0318 	orr.w	r3, r3, #24
 8001984:	b25b      	sxtb	r3, r3
 8001986:	b2d8      	uxtb	r0, r3
 8001988:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800198a:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 800198c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800198e:	f7ff fecf 	bl	8001730 <W5500_ReadBuf>
 8001992:	e013      	b.n	80019bc <W5500_ReadRXBuffer+0xdc>
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	767b      	strb	r3, [r7, #25]
 8001998:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800199a:	82fb      	strh	r3, [r7, #22]
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	613b      	str	r3, [r7, #16]
 80019a0:	88bb      	ldrh	r3, [r7, #4]
 80019a2:	81fb      	strh	r3, [r7, #14]
 80019a4:	7e7b      	ldrb	r3, [r7, #25]
 80019a6:	015b      	lsls	r3, r3, #5
 80019a8:	b25b      	sxtb	r3, r3
 80019aa:	f043 0318 	orr.w	r3, r3, #24
 80019ae:	b25b      	sxtb	r3, r3
 80019b0:	b2d8      	uxtb	r0, r3
 80019b2:	89fb      	ldrh	r3, [r7, #14]
 80019b4:	8af9      	ldrh	r1, [r7, #22]
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	f7ff feba 	bl	8001730 <W5500_ReadBuf>
        /* does not wrap around end of Rx buffer */
        W5500_ReadSnRXBuf(sn, buf_ptr, buf, len);
    }

    /* indicate how much we have read from the Rx buffer*/
    W5500_WriteSnRX_RD(sn, rx_ptr + len);
 80019bc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80019be:	88bb      	ldrh	r3, [r7, #4]
 80019c0:	4413      	add	r3, r2
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	737b      	strb	r3, [r7, #13]
 80019c8:	4613      	mov	r3, r2
 80019ca:	817b      	strh	r3, [r7, #10]
    W5500_WriteReg16(W5500_CB_SnREG(s), W5500_REG_SnRX_RD, val);
 80019cc:	7b7b      	ldrb	r3, [r7, #13]
 80019ce:	015b      	lsls	r3, r3, #5
 80019d0:	b25b      	sxtb	r3, r3
 80019d2:	f043 0308 	orr.w	r3, r3, #8
 80019d6:	b25b      	sxtb	r3, r3
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	897a      	ldrh	r2, [r7, #10]
 80019dc:	2128      	movs	r1, #40	; 0x28
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff fd56 	bl	8001490 <W5500_WriteReg16>
}
 80019e4:	bf00      	nop
 80019e6:	3738      	adds	r7, #56	; 0x38
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <W5500_ExecuteSnCmd>:
 * @param  sn: The socket number.
 * @param  cmd: The command to execute.
 * @retval None
 */
void W5500_ExecuteSnCmd(uint8_t sn, uint8_t cmd)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	460a      	mov	r2, r1
 80019f6:	71fb      	strb	r3, [r7, #7]
 80019f8:	4613      	mov	r3, r2
 80019fa:	71bb      	strb	r3, [r7, #6]
    uint32_t count = 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60fb      	str	r3, [r7, #12]

    if (DEBUG)
    {
        printf("W5500_ExecuteSnCmd(0x%02X, 0x%02X)\r\n", (uint16_t) sn,
 8001a00:	79fb      	ldrb	r3, [r7, #7]
 8001a02:	79ba      	ldrb	r2, [r7, #6]
 8001a04:	4619      	mov	r1, r3
 8001a06:	4814      	ldr	r0, [pc, #80]	; (8001a58 <W5500_ExecuteSnCmd+0x6c>)
 8001a08:	f002 fcae 	bl	8004368 <iprintf>
                (uint16_t) cmd);
    }

    /* Send command to socket command register */
    W5500_WriteReg8(W5500_CB_SnREG(sn), W5500_REG_SnCR, cmd);
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	015b      	lsls	r3, r3, #5
 8001a10:	b25b      	sxtb	r3, r3
 8001a12:	f043 0308 	orr.w	r3, r3, #8
 8001a16:	b25b      	sxtb	r3, r3
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	79ba      	ldrb	r2, [r7, #6]
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff fcf6 	bl	8001410 <W5500_WriteReg8>

    /*  Wait for command to be accepted */
    while (W5500_ReadReg8(W5500_CB_SnREG(sn), W5500_REG_SnCR))
 8001a24:	e002      	b.n	8001a2c <W5500_ExecuteSnCmd+0x40>
    {
        /* spin wait */
        count++;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	60fb      	str	r3, [r7, #12]
    while (W5500_ReadReg8(W5500_CB_SnREG(sn), W5500_REG_SnCR))
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	015b      	lsls	r3, r3, #5
 8001a30:	b25b      	sxtb	r3, r3
 8001a32:	f043 0308 	orr.w	r3, r3, #8
 8001a36:	b25b      	sxtb	r3, r3
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff fd6f 	bl	8001520 <W5500_ReadReg8>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1ee      	bne.n	8001a26 <W5500_ExecuteSnCmd+0x3a>
        /* TODO: add timeout */
    }
    /* loop count for debug */
    if (DEBUG) printf("Loop count: %lu\r\n", count);
 8001a48:	68f9      	ldr	r1, [r7, #12]
 8001a4a:	4804      	ldr	r0, [pc, #16]	; (8001a5c <W5500_ExecuteSnCmd+0x70>)
 8001a4c:	f002 fc8c 	bl	8004368 <iprintf>
}
 8001a50:	bf00      	nop
 8001a52:	3710      	adds	r7, #16
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	0800563c 	.word	0x0800563c
 8001a5c:	08005664 	.word	0x08005664

08001a60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001a60:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001a62:	e003      	b.n	8001a6c <LoopCopyDataInit>

08001a64 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001a64:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001a66:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001a68:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001a6a:	3104      	adds	r1, #4

08001a6c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001a6c:	480a      	ldr	r0, [pc, #40]	; (8001a98 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001a6e:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001a70:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001a72:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001a74:	d3f6      	bcc.n	8001a64 <CopyDataInit>
  ldr r2, =_sbss
 8001a76:	4a0a      	ldr	r2, [pc, #40]	; (8001aa0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001a78:	e002      	b.n	8001a80 <LoopFillZerobss>

08001a7a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001a7a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001a7c:	f842 3b04 	str.w	r3, [r2], #4

08001a80 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001a80:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001a82:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001a84:	d3f9      	bcc.n	8001a7a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a86:	f7ff fc1f 	bl	80012c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a8a:	f002 fc41 	bl	8004310 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a8e:	f7fe fdef 	bl	8000670 <main>
  bx lr
 8001a92:	4770      	bx	lr
  ldr r3, =_sidata
 8001a94:	080058d0 	.word	0x080058d0
  ldr r0, =_sdata
 8001a98:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001a9c:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8001aa0:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001aa4:	20000954 	.word	0x20000954

08001aa8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001aa8:	e7fe      	b.n	8001aa8 <ADC1_IRQHandler>

08001aaa <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b082      	sub	sp, #8
 8001aae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ab4:	2003      	movs	r0, #3
 8001ab6:	f000 f955 	bl	8001d64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001aba:	2000      	movs	r0, #0
 8001abc:	f000 f80e 	bl	8001adc <HAL_InitTick>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d002      	beq.n	8001acc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	71fb      	strb	r3, [r7, #7]
 8001aca:	e001      	b.n	8001ad0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001acc:	f7ff fa3a 	bl	8000f44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001ae8:	4b16      	ldr	r3, [pc, #88]	; (8001b44 <HAL_InitTick+0x68>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d022      	beq.n	8001b36 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001af0:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <HAL_InitTick+0x6c>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	4b13      	ldr	r3, [pc, #76]	; (8001b44 <HAL_InitTick+0x68>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001afc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b04:	4618      	mov	r0, r3
 8001b06:	f000 f962 	bl	8001dce <HAL_SYSTICK_Config>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d10f      	bne.n	8001b30 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b0f      	cmp	r3, #15
 8001b14:	d809      	bhi.n	8001b2a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b16:	2200      	movs	r2, #0
 8001b18:	6879      	ldr	r1, [r7, #4]
 8001b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8001b1e:	f000 f92c 	bl	8001d7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b22:	4a0a      	ldr	r2, [pc, #40]	; (8001b4c <HAL_InitTick+0x70>)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6013      	str	r3, [r2, #0]
 8001b28:	e007      	b.n	8001b3a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	73fb      	strb	r3, [r7, #15]
 8001b2e:	e004      	b.n	8001b3a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	73fb      	strb	r3, [r7, #15]
 8001b34:	e001      	b.n	8001b3a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20000008 	.word	0x20000008
 8001b48:	20000000 	.word	0x20000000
 8001b4c:	20000004 	.word	0x20000004

08001b50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b54:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <HAL_IncTick+0x1c>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <HAL_IncTick+0x20>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	4a03      	ldr	r2, [pc, #12]	; (8001b6c <HAL_IncTick+0x1c>)
 8001b60:	6013      	str	r3, [r2, #0]
}
 8001b62:	bf00      	nop
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	2000094c 	.word	0x2000094c
 8001b70:	20000008 	.word	0x20000008

08001b74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return uwTick;
 8001b78:	4b02      	ldr	r3, [pc, #8]	; (8001b84 <HAL_GetTick+0x10>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr
 8001b84:	2000094c 	.word	0x2000094c

08001b88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b90:	f7ff fff0 	bl	8001b74 <HAL_GetTick>
 8001b94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba0:	d004      	beq.n	8001bac <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ba2:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <HAL_Delay+0x40>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	4413      	add	r3, r2
 8001baa:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bac:	bf00      	nop
 8001bae:	f7ff ffe1 	bl	8001b74 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d8f7      	bhi.n	8001bae <HAL_Delay+0x26>
  {
  }
}
 8001bbe:	bf00      	nop
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000008 	.word	0x20000008

08001bcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <__NVIC_SetPriorityGrouping+0x44>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001be2:	68ba      	ldr	r2, [r7, #8]
 8001be4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001be8:	4013      	ands	r3, r2
 8001bea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bfe:	4a04      	ldr	r2, [pc, #16]	; (8001c10 <__NVIC_SetPriorityGrouping+0x44>)
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	60d3      	str	r3, [r2, #12]
}
 8001c04:	bf00      	nop
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c18:	4b04      	ldr	r3, [pc, #16]	; (8001c2c <__NVIC_GetPriorityGrouping+0x18>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	0a1b      	lsrs	r3, r3, #8
 8001c1e:	f003 0307 	and.w	r3, r3, #7
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	db0b      	blt.n	8001c5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	f003 021f 	and.w	r2, r3, #31
 8001c48:	4906      	ldr	r1, [pc, #24]	; (8001c64 <__NVIC_EnableIRQ+0x34>)
 8001c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4e:	095b      	lsrs	r3, r3, #5
 8001c50:	2001      	movs	r0, #1
 8001c52:	fa00 f202 	lsl.w	r2, r0, r2
 8001c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr
 8001c64:	e000e100 	.word	0xe000e100

08001c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	6039      	str	r1, [r7, #0]
 8001c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	db0a      	blt.n	8001c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	b2da      	uxtb	r2, r3
 8001c80:	490c      	ldr	r1, [pc, #48]	; (8001cb4 <__NVIC_SetPriority+0x4c>)
 8001c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c86:	0112      	lsls	r2, r2, #4
 8001c88:	b2d2      	uxtb	r2, r2
 8001c8a:	440b      	add	r3, r1
 8001c8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c90:	e00a      	b.n	8001ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	4908      	ldr	r1, [pc, #32]	; (8001cb8 <__NVIC_SetPriority+0x50>)
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	f003 030f 	and.w	r3, r3, #15
 8001c9e:	3b04      	subs	r3, #4
 8001ca0:	0112      	lsls	r2, r2, #4
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	440b      	add	r3, r1
 8001ca6:	761a      	strb	r2, [r3, #24]
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bc80      	pop	{r7}
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	e000e100 	.word	0xe000e100
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b089      	sub	sp, #36	; 0x24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f1c3 0307 	rsb	r3, r3, #7
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	bf28      	it	cs
 8001cda:	2304      	movcs	r3, #4
 8001cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	2b06      	cmp	r3, #6
 8001ce4:	d902      	bls.n	8001cec <NVIC_EncodePriority+0x30>
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	3b03      	subs	r3, #3
 8001cea:	e000      	b.n	8001cee <NVIC_EncodePriority+0x32>
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43da      	mvns	r2, r3
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	401a      	ands	r2, r3
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d04:	f04f 31ff 	mov.w	r1, #4294967295
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0e:	43d9      	mvns	r1, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d14:	4313      	orrs	r3, r2
         );
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3724      	adds	r7, #36	; 0x24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr

08001d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d30:	d301      	bcc.n	8001d36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d32:	2301      	movs	r3, #1
 8001d34:	e00f      	b.n	8001d56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d36:	4a0a      	ldr	r2, [pc, #40]	; (8001d60 <SysTick_Config+0x40>)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d3e:	210f      	movs	r1, #15
 8001d40:	f04f 30ff 	mov.w	r0, #4294967295
 8001d44:	f7ff ff90 	bl	8001c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d48:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <SysTick_Config+0x40>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d4e:	4b04      	ldr	r3, [pc, #16]	; (8001d60 <SysTick_Config+0x40>)
 8001d50:	2207      	movs	r2, #7
 8001d52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	e000e010 	.word	0xe000e010

08001d64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f7ff ff2d 	bl	8001bcc <__NVIC_SetPriorityGrouping>
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b086      	sub	sp, #24
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	4603      	mov	r3, r0
 8001d82:	60b9      	str	r1, [r7, #8]
 8001d84:	607a      	str	r2, [r7, #4]
 8001d86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d8c:	f7ff ff42 	bl	8001c14 <__NVIC_GetPriorityGrouping>
 8001d90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	68b9      	ldr	r1, [r7, #8]
 8001d96:	6978      	ldr	r0, [r7, #20]
 8001d98:	f7ff ff90 	bl	8001cbc <NVIC_EncodePriority>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001da2:	4611      	mov	r1, r2
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff ff5f 	bl	8001c68 <__NVIC_SetPriority>
}
 8001daa:	bf00      	nop
 8001dac:	3718      	adds	r7, #24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	4603      	mov	r3, r0
 8001dba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff ff35 	bl	8001c30 <__NVIC_EnableIRQ>
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b082      	sub	sp, #8
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7ff ffa2 	bl	8001d20 <SysTick_Config>
 8001ddc:	4603      	mov	r3, r0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b084      	sub	sp, #16
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dee:	2300      	movs	r3, #0
 8001df0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d005      	beq.n	8001e0a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2204      	movs	r2, #4
 8001e02:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	73fb      	strb	r3, [r7, #15]
 8001e08:	e029      	b.n	8001e5e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 020e 	bic.w	r2, r2, #14
 8001e18:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f022 0201 	bic.w	r2, r2, #1
 8001e28:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	f003 021c 	and.w	r2, r3, #28
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e36:	2101      	movs	r1, #1
 8001e38:	fa01 f202 	lsl.w	r2, r1, r2
 8001e3c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2201      	movs	r2, #1
 8001e42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	4798      	blx	r3
    }
  }
  return status;
 8001e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3710      	adds	r7, #16
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b087      	sub	sp, #28
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001e72:	2300      	movs	r3, #0
 8001e74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001e76:	2300      	movs	r3, #0
 8001e78:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001e7e:	e154      	b.n	800212a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	2101      	movs	r1, #1
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f000 8146 	beq.w	8002124 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d00b      	beq.n	8001eb8 <HAL_GPIO_Init+0x50>
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d007      	beq.n	8001eb8 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001eac:	2b11      	cmp	r3, #17
 8001eae:	d003      	beq.n	8001eb8 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b12      	cmp	r3, #18
 8001eb6:	d130      	bne.n	8001f1a <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	2203      	movs	r2, #3
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	68da      	ldr	r2, [r3, #12]
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001eee:	2201      	movs	r2, #1
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	4013      	ands	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	091b      	lsrs	r3, r3, #4
 8001f04:	f003 0201 	and.w	r2, r3, #1
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	2203      	movs	r2, #3
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	689a      	ldr	r2, [r3, #8]
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d003      	beq.n	8001f5a <HAL_GPIO_Init+0xf2>
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b12      	cmp	r3, #18
 8001f58:	d123      	bne.n	8001fa2 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	08da      	lsrs	r2, r3, #3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	3208      	adds	r2, #8
 8001f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f66:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	220f      	movs	r2, #15
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	43db      	mvns	r3, r3
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	691a      	ldr	r2, [r3, #16]
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	08da      	lsrs	r2, r3, #3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3208      	adds	r2, #8
 8001f9c:	6939      	ldr	r1, [r7, #16]
 8001f9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	2203      	movs	r2, #3
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f003 0203 	and.w	r2, r3, #3
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f000 80a0 	beq.w	8002124 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe4:	4b57      	ldr	r3, [pc, #348]	; (8002144 <HAL_GPIO_Init+0x2dc>)
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	4a56      	ldr	r2, [pc, #344]	; (8002144 <HAL_GPIO_Init+0x2dc>)
 8001fea:	f043 0301 	orr.w	r3, r3, #1
 8001fee:	6213      	str	r3, [r2, #32]
 8001ff0:	4b54      	ldr	r3, [pc, #336]	; (8002144 <HAL_GPIO_Init+0x2dc>)
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	60bb      	str	r3, [r7, #8]
 8001ffa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001ffc:	4a52      	ldr	r2, [pc, #328]	; (8002148 <HAL_GPIO_Init+0x2e0>)
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	089b      	lsrs	r3, r3, #2
 8002002:	3302      	adds	r3, #2
 8002004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002008:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	f003 0303 	and.w	r3, r3, #3
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	220f      	movs	r2, #15
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	43db      	mvns	r3, r3
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	4013      	ands	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a4a      	ldr	r2, [pc, #296]	; (800214c <HAL_GPIO_Init+0x2e4>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d019      	beq.n	800205c <HAL_GPIO_Init+0x1f4>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a49      	ldr	r2, [pc, #292]	; (8002150 <HAL_GPIO_Init+0x2e8>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d013      	beq.n	8002058 <HAL_GPIO_Init+0x1f0>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a48      	ldr	r2, [pc, #288]	; (8002154 <HAL_GPIO_Init+0x2ec>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d00d      	beq.n	8002054 <HAL_GPIO_Init+0x1ec>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a47      	ldr	r2, [pc, #284]	; (8002158 <HAL_GPIO_Init+0x2f0>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d007      	beq.n	8002050 <HAL_GPIO_Init+0x1e8>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a46      	ldr	r2, [pc, #280]	; (800215c <HAL_GPIO_Init+0x2f4>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d101      	bne.n	800204c <HAL_GPIO_Init+0x1e4>
 8002048:	2304      	movs	r3, #4
 800204a:	e008      	b.n	800205e <HAL_GPIO_Init+0x1f6>
 800204c:	2305      	movs	r3, #5
 800204e:	e006      	b.n	800205e <HAL_GPIO_Init+0x1f6>
 8002050:	2303      	movs	r3, #3
 8002052:	e004      	b.n	800205e <HAL_GPIO_Init+0x1f6>
 8002054:	2302      	movs	r3, #2
 8002056:	e002      	b.n	800205e <HAL_GPIO_Init+0x1f6>
 8002058:	2301      	movs	r3, #1
 800205a:	e000      	b.n	800205e <HAL_GPIO_Init+0x1f6>
 800205c:	2300      	movs	r3, #0
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	f002 0203 	and.w	r2, r2, #3
 8002064:	0092      	lsls	r2, r2, #2
 8002066:	4093      	lsls	r3, r2
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	4313      	orrs	r3, r2
 800206c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800206e:	4936      	ldr	r1, [pc, #216]	; (8002148 <HAL_GPIO_Init+0x2e0>)
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	089b      	lsrs	r3, r3, #2
 8002074:	3302      	adds	r3, #2
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800207c:	4b38      	ldr	r3, [pc, #224]	; (8002160 <HAL_GPIO_Init+0x2f8>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	43db      	mvns	r3, r3
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	4013      	ands	r3, r2
 800208a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d003      	beq.n	80020a0 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	4313      	orrs	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80020a0:	4a2f      	ldr	r2, [pc, #188]	; (8002160 <HAL_GPIO_Init+0x2f8>)
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020a6:	4b2e      	ldr	r3, [pc, #184]	; (8002160 <HAL_GPIO_Init+0x2f8>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	43db      	mvns	r3, r3
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	4013      	ands	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80020ca:	4a25      	ldr	r2, [pc, #148]	; (8002160 <HAL_GPIO_Init+0x2f8>)
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020d0:	4b23      	ldr	r3, [pc, #140]	; (8002160 <HAL_GPIO_Init+0x2f8>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	43db      	mvns	r3, r3
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	4013      	ands	r3, r2
 80020de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d003      	beq.n	80020f4 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80020f4:	4a1a      	ldr	r2, [pc, #104]	; (8002160 <HAL_GPIO_Init+0x2f8>)
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020fa:	4b19      	ldr	r3, [pc, #100]	; (8002160 <HAL_GPIO_Init+0x2f8>)
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	43db      	mvns	r3, r3
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	4013      	ands	r3, r2
 8002108:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	4313      	orrs	r3, r2
 800211c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800211e:	4a10      	ldr	r2, [pc, #64]	; (8002160 <HAL_GPIO_Init+0x2f8>)
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	3301      	adds	r3, #1
 8002128:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	fa22 f303 	lsr.w	r3, r2, r3
 8002134:	2b00      	cmp	r3, #0
 8002136:	f47f aea3 	bne.w	8001e80 <HAL_GPIO_Init+0x18>
  }
}
 800213a:	bf00      	nop
 800213c:	371c      	adds	r7, #28
 800213e:	46bd      	mov	sp, r7
 8002140:	bc80      	pop	{r7}
 8002142:	4770      	bx	lr
 8002144:	40023800 	.word	0x40023800
 8002148:	40010000 	.word	0x40010000
 800214c:	40020000 	.word	0x40020000
 8002150:	40020400 	.word	0x40020400
 8002154:	40020800 	.word	0x40020800
 8002158:	40020c00 	.word	0x40020c00
 800215c:	40021000 	.word	0x40021000
 8002160:	40010400 	.word	0x40010400

08002164 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	460b      	mov	r3, r1
 800216e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	691a      	ldr	r2, [r3, #16]
 8002174:	887b      	ldrh	r3, [r7, #2]
 8002176:	4013      	ands	r3, r2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d002      	beq.n	8002182 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800217c:	2301      	movs	r3, #1
 800217e:	73fb      	strb	r3, [r7, #15]
 8002180:	e001      	b.n	8002186 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002182:	2300      	movs	r3, #0
 8002184:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002186:	7bfb      	ldrb	r3, [r7, #15]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	bc80      	pop	{r7}
 8002190:	4770      	bx	lr

08002192 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002192:	b480      	push	{r7}
 8002194:	b083      	sub	sp, #12
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
 800219a:	460b      	mov	r3, r1
 800219c:	807b      	strh	r3, [r7, #2]
 800219e:	4613      	mov	r3, r2
 80021a0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021a2:	787b      	ldrb	r3, [r7, #1]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d003      	beq.n	80021b0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021a8:	887a      	ldrh	r2, [r7, #2]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80021ae:	e003      	b.n	80021b8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80021b0:	887b      	ldrh	r3, [r7, #2]
 80021b2:	041a      	lsls	r2, r3, #16
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	619a      	str	r2, [r3, #24]
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	bc80      	pop	{r7}
 80021c0:	4770      	bx	lr

080021c2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b085      	sub	sp, #20
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
 80021ca:	460b      	mov	r3, r1
 80021cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021d4:	887a      	ldrh	r2, [r7, #2]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	4013      	ands	r3, r2
 80021da:	041a      	lsls	r2, r3, #16
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	43d9      	mvns	r1, r3
 80021e0:	887b      	ldrh	r3, [r7, #2]
 80021e2:	400b      	ands	r3, r1
 80021e4:	431a      	orrs	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	619a      	str	r2, [r3, #24]
}
 80021ea:	bf00      	nop
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr

080021f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b088      	sub	sp, #32
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e31d      	b.n	8002842 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002206:	4b94      	ldr	r3, [pc, #592]	; (8002458 <HAL_RCC_OscConfig+0x264>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 030c 	and.w	r3, r3, #12
 800220e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002210:	4b91      	ldr	r3, [pc, #580]	; (8002458 <HAL_RCC_OscConfig+0x264>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002218:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b00      	cmp	r3, #0
 8002224:	d07b      	beq.n	800231e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	2b08      	cmp	r3, #8
 800222a:	d006      	beq.n	800223a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	2b0c      	cmp	r3, #12
 8002230:	d10f      	bne.n	8002252 <HAL_RCC_OscConfig+0x5e>
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002238:	d10b      	bne.n	8002252 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800223a:	4b87      	ldr	r3, [pc, #540]	; (8002458 <HAL_RCC_OscConfig+0x264>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d06a      	beq.n	800231c <HAL_RCC_OscConfig+0x128>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d166      	bne.n	800231c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e2f7      	b.n	8002842 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d106      	bne.n	8002268 <HAL_RCC_OscConfig+0x74>
 800225a:	4b7f      	ldr	r3, [pc, #508]	; (8002458 <HAL_RCC_OscConfig+0x264>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a7e      	ldr	r2, [pc, #504]	; (8002458 <HAL_RCC_OscConfig+0x264>)
 8002260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002264:	6013      	str	r3, [r2, #0]
 8002266:	e02d      	b.n	80022c4 <HAL_RCC_OscConfig+0xd0>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d10c      	bne.n	800228a <HAL_RCC_OscConfig+0x96>
 8002270:	4b79      	ldr	r3, [pc, #484]	; (8002458 <HAL_RCC_OscConfig+0x264>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a78      	ldr	r2, [pc, #480]	; (8002458 <HAL_RCC_OscConfig+0x264>)
 8002276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800227a:	6013      	str	r3, [r2, #0]
 800227c:	4b76      	ldr	r3, [pc, #472]	; (8002458 <HAL_RCC_OscConfig+0x264>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a75      	ldr	r2, [pc, #468]	; (8002458 <HAL_RCC_OscConfig+0x264>)
 8002282:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002286:	6013      	str	r3, [r2, #0]
 8002288:	e01c      	b.n	80022c4 <HAL_RCC_OscConfig+0xd0>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b05      	cmp	r3, #5
 8002290:	d10c      	bne.n	80022ac <HAL_RCC_OscConfig+0xb8>
 8002292:	4b71      	ldr	r3, [pc, #452]	; (8002458 <HAL_RCC_OscConfig+0x264>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a70      	ldr	r2, [pc, #448]	; (8002458 <HAL_RCC_OscConfig+0x264>)
 8002298:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800229c:	6013      	str	r3, [r2, #0]
 800229e:	4b6e      	ldr	r3, [pc, #440]	; (8002458 <HAL_RCC_OscConfig+0x264>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a6d      	ldr	r2, [pc, #436]	; (8002458 <HAL_RCC_OscConfig+0x264>)
 80022a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	e00b      	b.n	80022c4 <HAL_RCC_OscConfig+0xd0>
 80022ac:	4b6a      	ldr	r3, [pc, #424]	; (8002458 <HAL_RCC_OscConfig+0x264>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a69      	ldr	r2, [pc, #420]	; (8002458 <HAL_RCC_OscConfig+0x264>)
 80022b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022b6:	6013      	str	r3, [r2, #0]
 80022b8:	4b67      	ldr	r3, [pc, #412]	; (8002458 <HAL_RCC_OscConfig+0x264>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a66      	ldr	r2, [pc, #408]	; (8002458 <HAL_RCC_OscConfig+0x264>)
 80022be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d013      	beq.n	80022f4 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022cc:	f7ff fc52 	bl	8001b74 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022d4:	f7ff fc4e 	bl	8001b74 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b64      	cmp	r3, #100	; 0x64
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e2ad      	b.n	8002842 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022e6:	4b5c      	ldr	r3, [pc, #368]	; (8002458 <HAL_RCC_OscConfig+0x264>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0f0      	beq.n	80022d4 <HAL_RCC_OscConfig+0xe0>
 80022f2:	e014      	b.n	800231e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f4:	f7ff fc3e 	bl	8001b74 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022fc:	f7ff fc3a 	bl	8001b74 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b64      	cmp	r3, #100	; 0x64
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e299      	b.n	8002842 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800230e:	4b52      	ldr	r3, [pc, #328]	; (8002458 <HAL_RCC_OscConfig+0x264>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f0      	bne.n	80022fc <HAL_RCC_OscConfig+0x108>
 800231a:	e000      	b.n	800231e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800231c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d05a      	beq.n	80023e0 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	2b04      	cmp	r3, #4
 800232e:	d005      	beq.n	800233c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	2b0c      	cmp	r3, #12
 8002334:	d119      	bne.n	800236a <HAL_RCC_OscConfig+0x176>
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d116      	bne.n	800236a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800233c:	4b46      	ldr	r3, [pc, #280]	; (8002458 <HAL_RCC_OscConfig+0x264>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d005      	beq.n	8002354 <HAL_RCC_OscConfig+0x160>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d001      	beq.n	8002354 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e276      	b.n	8002842 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002354:	4b40      	ldr	r3, [pc, #256]	; (8002458 <HAL_RCC_OscConfig+0x264>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	021b      	lsls	r3, r3, #8
 8002362:	493d      	ldr	r1, [pc, #244]	; (8002458 <HAL_RCC_OscConfig+0x264>)
 8002364:	4313      	orrs	r3, r2
 8002366:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002368:	e03a      	b.n	80023e0 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d020      	beq.n	80023b4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002372:	4b3a      	ldr	r3, [pc, #232]	; (800245c <HAL_RCC_OscConfig+0x268>)
 8002374:	2201      	movs	r2, #1
 8002376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002378:	f7ff fbfc 	bl	8001b74 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002380:	f7ff fbf8 	bl	8001b74 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e257      	b.n	8002842 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002392:	4b31      	ldr	r3, [pc, #196]	; (8002458 <HAL_RCC_OscConfig+0x264>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0f0      	beq.n	8002380 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800239e:	4b2e      	ldr	r3, [pc, #184]	; (8002458 <HAL_RCC_OscConfig+0x264>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	021b      	lsls	r3, r3, #8
 80023ac:	492a      	ldr	r1, [pc, #168]	; (8002458 <HAL_RCC_OscConfig+0x264>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	604b      	str	r3, [r1, #4]
 80023b2:	e015      	b.n	80023e0 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023b4:	4b29      	ldr	r3, [pc, #164]	; (800245c <HAL_RCC_OscConfig+0x268>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ba:	f7ff fbdb 	bl	8001b74 <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023c2:	f7ff fbd7 	bl	8001b74 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e236      	b.n	8002842 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023d4:	4b20      	ldr	r3, [pc, #128]	; (8002458 <HAL_RCC_OscConfig+0x264>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1f0      	bne.n	80023c2 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0310 	and.w	r3, r3, #16
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 80b8 	beq.w	800255e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d170      	bne.n	80024d6 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023f4:	4b18      	ldr	r3, [pc, #96]	; (8002458 <HAL_RCC_OscConfig+0x264>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d005      	beq.n	800240c <HAL_RCC_OscConfig+0x218>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e21a      	b.n	8002842 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a1a      	ldr	r2, [r3, #32]
 8002410:	4b11      	ldr	r3, [pc, #68]	; (8002458 <HAL_RCC_OscConfig+0x264>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002418:	429a      	cmp	r2, r3
 800241a:	d921      	bls.n	8002460 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	4618      	mov	r0, r3
 8002422:	f000 fc1f 	bl	8002c64 <RCC_SetFlashLatencyFromMSIRange>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e208      	b.n	8002842 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002430:	4b09      	ldr	r3, [pc, #36]	; (8002458 <HAL_RCC_OscConfig+0x264>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	4906      	ldr	r1, [pc, #24]	; (8002458 <HAL_RCC_OscConfig+0x264>)
 800243e:	4313      	orrs	r3, r2
 8002440:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002442:	4b05      	ldr	r3, [pc, #20]	; (8002458 <HAL_RCC_OscConfig+0x264>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	061b      	lsls	r3, r3, #24
 8002450:	4901      	ldr	r1, [pc, #4]	; (8002458 <HAL_RCC_OscConfig+0x264>)
 8002452:	4313      	orrs	r3, r2
 8002454:	604b      	str	r3, [r1, #4]
 8002456:	e020      	b.n	800249a <HAL_RCC_OscConfig+0x2a6>
 8002458:	40023800 	.word	0x40023800
 800245c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002460:	4ba4      	ldr	r3, [pc, #656]	; (80026f4 <HAL_RCC_OscConfig+0x500>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	49a1      	ldr	r1, [pc, #644]	; (80026f4 <HAL_RCC_OscConfig+0x500>)
 800246e:	4313      	orrs	r3, r2
 8002470:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002472:	4ba0      	ldr	r3, [pc, #640]	; (80026f4 <HAL_RCC_OscConfig+0x500>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	061b      	lsls	r3, r3, #24
 8002480:	499c      	ldr	r1, [pc, #624]	; (80026f4 <HAL_RCC_OscConfig+0x500>)
 8002482:	4313      	orrs	r3, r2
 8002484:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	4618      	mov	r0, r3
 800248c:	f000 fbea 	bl	8002c64 <RCC_SetFlashLatencyFromMSIRange>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e1d3      	b.n	8002842 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	0b5b      	lsrs	r3, r3, #13
 80024a0:	3301      	adds	r3, #1
 80024a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80024aa:	4a92      	ldr	r2, [pc, #584]	; (80026f4 <HAL_RCC_OscConfig+0x500>)
 80024ac:	6892      	ldr	r2, [r2, #8]
 80024ae:	0912      	lsrs	r2, r2, #4
 80024b0:	f002 020f 	and.w	r2, r2, #15
 80024b4:	4990      	ldr	r1, [pc, #576]	; (80026f8 <HAL_RCC_OscConfig+0x504>)
 80024b6:	5c8a      	ldrb	r2, [r1, r2]
 80024b8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80024ba:	4a90      	ldr	r2, [pc, #576]	; (80026fc <HAL_RCC_OscConfig+0x508>)
 80024bc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80024be:	4b90      	ldr	r3, [pc, #576]	; (8002700 <HAL_RCC_OscConfig+0x50c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff fb0a 	bl	8001adc <HAL_InitTick>
 80024c8:	4603      	mov	r3, r0
 80024ca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d045      	beq.n	800255e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
 80024d4:	e1b5      	b.n	8002842 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d029      	beq.n	8002532 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80024de:	4b89      	ldr	r3, [pc, #548]	; (8002704 <HAL_RCC_OscConfig+0x510>)
 80024e0:	2201      	movs	r2, #1
 80024e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e4:	f7ff fb46 	bl	8001b74 <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024ec:	f7ff fb42 	bl	8001b74 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e1a1      	b.n	8002842 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80024fe:	4b7d      	ldr	r3, [pc, #500]	; (80026f4 <HAL_RCC_OscConfig+0x500>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002506:	2b00      	cmp	r3, #0
 8002508:	d0f0      	beq.n	80024ec <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800250a:	4b7a      	ldr	r3, [pc, #488]	; (80026f4 <HAL_RCC_OscConfig+0x500>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	4977      	ldr	r1, [pc, #476]	; (80026f4 <HAL_RCC_OscConfig+0x500>)
 8002518:	4313      	orrs	r3, r2
 800251a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800251c:	4b75      	ldr	r3, [pc, #468]	; (80026f4 <HAL_RCC_OscConfig+0x500>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	061b      	lsls	r3, r3, #24
 800252a:	4972      	ldr	r1, [pc, #456]	; (80026f4 <HAL_RCC_OscConfig+0x500>)
 800252c:	4313      	orrs	r3, r2
 800252e:	604b      	str	r3, [r1, #4]
 8002530:	e015      	b.n	800255e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002532:	4b74      	ldr	r3, [pc, #464]	; (8002704 <HAL_RCC_OscConfig+0x510>)
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002538:	f7ff fb1c 	bl	8001b74 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002540:	f7ff fb18 	bl	8001b74 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e177      	b.n	8002842 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002552:	4b68      	ldr	r3, [pc, #416]	; (80026f4 <HAL_RCC_OscConfig+0x500>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f0      	bne.n	8002540 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	2b00      	cmp	r3, #0
 8002568:	d030      	beq.n	80025cc <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d016      	beq.n	80025a0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002572:	4b65      	ldr	r3, [pc, #404]	; (8002708 <HAL_RCC_OscConfig+0x514>)
 8002574:	2201      	movs	r2, #1
 8002576:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002578:	f7ff fafc 	bl	8001b74 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002580:	f7ff faf8 	bl	8001b74 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e157      	b.n	8002842 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002592:	4b58      	ldr	r3, [pc, #352]	; (80026f4 <HAL_RCC_OscConfig+0x500>)
 8002594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0f0      	beq.n	8002580 <HAL_RCC_OscConfig+0x38c>
 800259e:	e015      	b.n	80025cc <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025a0:	4b59      	ldr	r3, [pc, #356]	; (8002708 <HAL_RCC_OscConfig+0x514>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025a6:	f7ff fae5 	bl	8001b74 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ae:	f7ff fae1 	bl	8001b74 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e140      	b.n	8002842 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80025c0:	4b4c      	ldr	r3, [pc, #304]	; (80026f4 <HAL_RCC_OscConfig+0x500>)
 80025c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1f0      	bne.n	80025ae <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0304 	and.w	r3, r3, #4
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f000 80b5 	beq.w	8002744 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025da:	2300      	movs	r3, #0
 80025dc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025de:	4b45      	ldr	r3, [pc, #276]	; (80026f4 <HAL_RCC_OscConfig+0x500>)
 80025e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10d      	bne.n	8002606 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ea:	4b42      	ldr	r3, [pc, #264]	; (80026f4 <HAL_RCC_OscConfig+0x500>)
 80025ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ee:	4a41      	ldr	r2, [pc, #260]	; (80026f4 <HAL_RCC_OscConfig+0x500>)
 80025f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025f4:	6253      	str	r3, [r2, #36]	; 0x24
 80025f6:	4b3f      	ldr	r3, [pc, #252]	; (80026f4 <HAL_RCC_OscConfig+0x500>)
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fe:	60bb      	str	r3, [r7, #8]
 8002600:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002602:	2301      	movs	r3, #1
 8002604:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002606:	4b41      	ldr	r3, [pc, #260]	; (800270c <HAL_RCC_OscConfig+0x518>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260e:	2b00      	cmp	r3, #0
 8002610:	d118      	bne.n	8002644 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002612:	4b3e      	ldr	r3, [pc, #248]	; (800270c <HAL_RCC_OscConfig+0x518>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a3d      	ldr	r2, [pc, #244]	; (800270c <HAL_RCC_OscConfig+0x518>)
 8002618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800261c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800261e:	f7ff faa9 	bl	8001b74 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002626:	f7ff faa5 	bl	8001b74 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b64      	cmp	r3, #100	; 0x64
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e104      	b.n	8002842 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002638:	4b34      	ldr	r3, [pc, #208]	; (800270c <HAL_RCC_OscConfig+0x518>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0f0      	beq.n	8002626 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d106      	bne.n	800265a <HAL_RCC_OscConfig+0x466>
 800264c:	4b29      	ldr	r3, [pc, #164]	; (80026f4 <HAL_RCC_OscConfig+0x500>)
 800264e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002650:	4a28      	ldr	r2, [pc, #160]	; (80026f4 <HAL_RCC_OscConfig+0x500>)
 8002652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002656:	6353      	str	r3, [r2, #52]	; 0x34
 8002658:	e02d      	b.n	80026b6 <HAL_RCC_OscConfig+0x4c2>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10c      	bne.n	800267c <HAL_RCC_OscConfig+0x488>
 8002662:	4b24      	ldr	r3, [pc, #144]	; (80026f4 <HAL_RCC_OscConfig+0x500>)
 8002664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002666:	4a23      	ldr	r2, [pc, #140]	; (80026f4 <HAL_RCC_OscConfig+0x500>)
 8002668:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800266c:	6353      	str	r3, [r2, #52]	; 0x34
 800266e:	4b21      	ldr	r3, [pc, #132]	; (80026f4 <HAL_RCC_OscConfig+0x500>)
 8002670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002672:	4a20      	ldr	r2, [pc, #128]	; (80026f4 <HAL_RCC_OscConfig+0x500>)
 8002674:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002678:	6353      	str	r3, [r2, #52]	; 0x34
 800267a:	e01c      	b.n	80026b6 <HAL_RCC_OscConfig+0x4c2>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	2b05      	cmp	r3, #5
 8002682:	d10c      	bne.n	800269e <HAL_RCC_OscConfig+0x4aa>
 8002684:	4b1b      	ldr	r3, [pc, #108]	; (80026f4 <HAL_RCC_OscConfig+0x500>)
 8002686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002688:	4a1a      	ldr	r2, [pc, #104]	; (80026f4 <HAL_RCC_OscConfig+0x500>)
 800268a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800268e:	6353      	str	r3, [r2, #52]	; 0x34
 8002690:	4b18      	ldr	r3, [pc, #96]	; (80026f4 <HAL_RCC_OscConfig+0x500>)
 8002692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002694:	4a17      	ldr	r2, [pc, #92]	; (80026f4 <HAL_RCC_OscConfig+0x500>)
 8002696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800269a:	6353      	str	r3, [r2, #52]	; 0x34
 800269c:	e00b      	b.n	80026b6 <HAL_RCC_OscConfig+0x4c2>
 800269e:	4b15      	ldr	r3, [pc, #84]	; (80026f4 <HAL_RCC_OscConfig+0x500>)
 80026a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026a2:	4a14      	ldr	r2, [pc, #80]	; (80026f4 <HAL_RCC_OscConfig+0x500>)
 80026a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026a8:	6353      	str	r3, [r2, #52]	; 0x34
 80026aa:	4b12      	ldr	r3, [pc, #72]	; (80026f4 <HAL_RCC_OscConfig+0x500>)
 80026ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ae:	4a11      	ldr	r2, [pc, #68]	; (80026f4 <HAL_RCC_OscConfig+0x500>)
 80026b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026b4:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d015      	beq.n	80026ea <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026be:	f7ff fa59 	bl	8001b74 <HAL_GetTick>
 80026c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026c4:	e00a      	b.n	80026dc <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026c6:	f7ff fa55 	bl	8001b74 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e0b2      	b.n	8002842 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026dc:	4b05      	ldr	r3, [pc, #20]	; (80026f4 <HAL_RCC_OscConfig+0x500>)
 80026de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0ee      	beq.n	80026c6 <HAL_RCC_OscConfig+0x4d2>
 80026e8:	e023      	b.n	8002732 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ea:	f7ff fa43 	bl	8001b74 <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80026f0:	e019      	b.n	8002726 <HAL_RCC_OscConfig+0x532>
 80026f2:	bf00      	nop
 80026f4:	40023800 	.word	0x40023800
 80026f8:	08005810 	.word	0x08005810
 80026fc:	20000000 	.word	0x20000000
 8002700:	20000004 	.word	0x20000004
 8002704:	42470020 	.word	0x42470020
 8002708:	42470680 	.word	0x42470680
 800270c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002710:	f7ff fa30 	bl	8001b74 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	f241 3288 	movw	r2, #5000	; 0x1388
 800271e:	4293      	cmp	r3, r2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e08d      	b.n	8002842 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002726:	4b49      	ldr	r3, [pc, #292]	; (800284c <HAL_RCC_OscConfig+0x658>)
 8002728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800272a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1ee      	bne.n	8002710 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002732:	7ffb      	ldrb	r3, [r7, #31]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d105      	bne.n	8002744 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002738:	4b44      	ldr	r3, [pc, #272]	; (800284c <HAL_RCC_OscConfig+0x658>)
 800273a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273c:	4a43      	ldr	r2, [pc, #268]	; (800284c <HAL_RCC_OscConfig+0x658>)
 800273e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002742:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	2b00      	cmp	r3, #0
 800274a:	d079      	beq.n	8002840 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	2b0c      	cmp	r3, #12
 8002750:	d056      	beq.n	8002800 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002756:	2b02      	cmp	r3, #2
 8002758:	d13b      	bne.n	80027d2 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800275a:	4b3d      	ldr	r3, [pc, #244]	; (8002850 <HAL_RCC_OscConfig+0x65c>)
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002760:	f7ff fa08 	bl	8001b74 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002768:	f7ff fa04 	bl	8001b74 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e063      	b.n	8002842 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800277a:	4b34      	ldr	r3, [pc, #208]	; (800284c <HAL_RCC_OscConfig+0x658>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1f0      	bne.n	8002768 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002786:	4b31      	ldr	r3, [pc, #196]	; (800284c <HAL_RCC_OscConfig+0x658>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002796:	4319      	orrs	r1, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279c:	430b      	orrs	r3, r1
 800279e:	492b      	ldr	r1, [pc, #172]	; (800284c <HAL_RCC_OscConfig+0x658>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027a4:	4b2a      	ldr	r3, [pc, #168]	; (8002850 <HAL_RCC_OscConfig+0x65c>)
 80027a6:	2201      	movs	r2, #1
 80027a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027aa:	f7ff f9e3 	bl	8001b74 <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80027b0:	e008      	b.n	80027c4 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027b2:	f7ff f9df 	bl	8001b74 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e03e      	b.n	8002842 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80027c4:	4b21      	ldr	r3, [pc, #132]	; (800284c <HAL_RCC_OscConfig+0x658>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0f0      	beq.n	80027b2 <HAL_RCC_OscConfig+0x5be>
 80027d0:	e036      	b.n	8002840 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027d2:	4b1f      	ldr	r3, [pc, #124]	; (8002850 <HAL_RCC_OscConfig+0x65c>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d8:	f7ff f9cc 	bl	8001b74 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027e0:	f7ff f9c8 	bl	8001b74 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e027      	b.n	8002842 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027f2:	4b16      	ldr	r3, [pc, #88]	; (800284c <HAL_RCC_OscConfig+0x658>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1f0      	bne.n	80027e0 <HAL_RCC_OscConfig+0x5ec>
 80027fe:	e01f      	b.n	8002840 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002804:	2b01      	cmp	r3, #1
 8002806:	d101      	bne.n	800280c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e01a      	b.n	8002842 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800280c:	4b0f      	ldr	r3, [pc, #60]	; (800284c <HAL_RCC_OscConfig+0x658>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281c:	429a      	cmp	r2, r3
 800281e:	d10d      	bne.n	800283c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800282a:	429a      	cmp	r2, r3
 800282c:	d106      	bne.n	800283c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002838:	429a      	cmp	r2, r3
 800283a:	d001      	beq.n	8002840 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e000      	b.n	8002842 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3720      	adds	r7, #32
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	40023800 	.word	0x40023800
 8002850:	42470060 	.word	0x42470060

08002854 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e11a      	b.n	8002a9e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002868:	4b8f      	ldr	r3, [pc, #572]	; (8002aa8 <HAL_RCC_ClockConfig+0x254>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d919      	bls.n	80028aa <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d105      	bne.n	8002888 <HAL_RCC_ClockConfig+0x34>
 800287c:	4b8a      	ldr	r3, [pc, #552]	; (8002aa8 <HAL_RCC_ClockConfig+0x254>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a89      	ldr	r2, [pc, #548]	; (8002aa8 <HAL_RCC_ClockConfig+0x254>)
 8002882:	f043 0304 	orr.w	r3, r3, #4
 8002886:	6013      	str	r3, [r2, #0]
 8002888:	4b87      	ldr	r3, [pc, #540]	; (8002aa8 <HAL_RCC_ClockConfig+0x254>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f023 0201 	bic.w	r2, r3, #1
 8002890:	4985      	ldr	r1, [pc, #532]	; (8002aa8 <HAL_RCC_ClockConfig+0x254>)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	4313      	orrs	r3, r2
 8002896:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002898:	4b83      	ldr	r3, [pc, #524]	; (8002aa8 <HAL_RCC_ClockConfig+0x254>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d001      	beq.n	80028aa <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e0f9      	b.n	8002a9e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d008      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028b6:	4b7d      	ldr	r3, [pc, #500]	; (8002aac <HAL_RCC_ClockConfig+0x258>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	497a      	ldr	r1, [pc, #488]	; (8002aac <HAL_RCC_ClockConfig+0x258>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f000 808e 	beq.w	80029f2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d107      	bne.n	80028ee <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028de:	4b73      	ldr	r3, [pc, #460]	; (8002aac <HAL_RCC_ClockConfig+0x258>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d121      	bne.n	800292e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e0d7      	b.n	8002a9e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	2b03      	cmp	r3, #3
 80028f4:	d107      	bne.n	8002906 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028f6:	4b6d      	ldr	r3, [pc, #436]	; (8002aac <HAL_RCC_ClockConfig+0x258>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d115      	bne.n	800292e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e0cb      	b.n	8002a9e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d107      	bne.n	800291e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800290e:	4b67      	ldr	r3, [pc, #412]	; (8002aac <HAL_RCC_ClockConfig+0x258>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d109      	bne.n	800292e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e0bf      	b.n	8002a9e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800291e:	4b63      	ldr	r3, [pc, #396]	; (8002aac <HAL_RCC_ClockConfig+0x258>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e0b7      	b.n	8002a9e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800292e:	4b5f      	ldr	r3, [pc, #380]	; (8002aac <HAL_RCC_ClockConfig+0x258>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f023 0203 	bic.w	r2, r3, #3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	495c      	ldr	r1, [pc, #368]	; (8002aac <HAL_RCC_ClockConfig+0x258>)
 800293c:	4313      	orrs	r3, r2
 800293e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002940:	f7ff f918 	bl	8001b74 <HAL_GetTick>
 8002944:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	2b02      	cmp	r3, #2
 800294c:	d112      	bne.n	8002974 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800294e:	e00a      	b.n	8002966 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002950:	f7ff f910 	bl	8001b74 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	f241 3288 	movw	r2, #5000	; 0x1388
 800295e:	4293      	cmp	r3, r2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e09b      	b.n	8002a9e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002966:	4b51      	ldr	r3, [pc, #324]	; (8002aac <HAL_RCC_ClockConfig+0x258>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 030c 	and.w	r3, r3, #12
 800296e:	2b08      	cmp	r3, #8
 8002970:	d1ee      	bne.n	8002950 <HAL_RCC_ClockConfig+0xfc>
 8002972:	e03e      	b.n	80029f2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	2b03      	cmp	r3, #3
 800297a:	d112      	bne.n	80029a2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800297c:	e00a      	b.n	8002994 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800297e:	f7ff f8f9 	bl	8001b74 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	f241 3288 	movw	r2, #5000	; 0x1388
 800298c:	4293      	cmp	r3, r2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e084      	b.n	8002a9e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002994:	4b45      	ldr	r3, [pc, #276]	; (8002aac <HAL_RCC_ClockConfig+0x258>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 030c 	and.w	r3, r3, #12
 800299c:	2b0c      	cmp	r3, #12
 800299e:	d1ee      	bne.n	800297e <HAL_RCC_ClockConfig+0x12a>
 80029a0:	e027      	b.n	80029f2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d11d      	bne.n	80029e6 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80029aa:	e00a      	b.n	80029c2 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029ac:	f7ff f8e2 	bl	8001b74 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e06d      	b.n	8002a9e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80029c2:	4b3a      	ldr	r3, [pc, #232]	; (8002aac <HAL_RCC_ClockConfig+0x258>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 030c 	and.w	r3, r3, #12
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d1ee      	bne.n	80029ac <HAL_RCC_ClockConfig+0x158>
 80029ce:	e010      	b.n	80029f2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d0:	f7ff f8d0 	bl	8001b74 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	f241 3288 	movw	r2, #5000	; 0x1388
 80029de:	4293      	cmp	r3, r2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e05b      	b.n	8002a9e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80029e6:	4b31      	ldr	r3, [pc, #196]	; (8002aac <HAL_RCC_ClockConfig+0x258>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 030c 	and.w	r3, r3, #12
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1ee      	bne.n	80029d0 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029f2:	4b2d      	ldr	r3, [pc, #180]	; (8002aa8 <HAL_RCC_ClockConfig+0x254>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d219      	bcs.n	8002a34 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d105      	bne.n	8002a12 <HAL_RCC_ClockConfig+0x1be>
 8002a06:	4b28      	ldr	r3, [pc, #160]	; (8002aa8 <HAL_RCC_ClockConfig+0x254>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a27      	ldr	r2, [pc, #156]	; (8002aa8 <HAL_RCC_ClockConfig+0x254>)
 8002a0c:	f043 0304 	orr.w	r3, r3, #4
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	4b25      	ldr	r3, [pc, #148]	; (8002aa8 <HAL_RCC_ClockConfig+0x254>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f023 0201 	bic.w	r2, r3, #1
 8002a1a:	4923      	ldr	r1, [pc, #140]	; (8002aa8 <HAL_RCC_ClockConfig+0x254>)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a22:	4b21      	ldr	r3, [pc, #132]	; (8002aa8 <HAL_RCC_ClockConfig+0x254>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d001      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e034      	b.n	8002a9e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d008      	beq.n	8002a52 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a40:	4b1a      	ldr	r3, [pc, #104]	; (8002aac <HAL_RCC_ClockConfig+0x258>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	4917      	ldr	r1, [pc, #92]	; (8002aac <HAL_RCC_ClockConfig+0x258>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d009      	beq.n	8002a72 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a5e:	4b13      	ldr	r3, [pc, #76]	; (8002aac <HAL_RCC_ClockConfig+0x258>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	490f      	ldr	r1, [pc, #60]	; (8002aac <HAL_RCC_ClockConfig+0x258>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a72:	f000 f823 	bl	8002abc <HAL_RCC_GetSysClockFreq>
 8002a76:	4601      	mov	r1, r0
 8002a78:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <HAL_RCC_ClockConfig+0x258>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	091b      	lsrs	r3, r3, #4
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	4a0b      	ldr	r2, [pc, #44]	; (8002ab0 <HAL_RCC_ClockConfig+0x25c>)
 8002a84:	5cd3      	ldrb	r3, [r2, r3]
 8002a86:	fa21 f303 	lsr.w	r3, r1, r3
 8002a8a:	4a0a      	ldr	r2, [pc, #40]	; (8002ab4 <HAL_RCC_ClockConfig+0x260>)
 8002a8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a8e:	4b0a      	ldr	r3, [pc, #40]	; (8002ab8 <HAL_RCC_ClockConfig+0x264>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7ff f822 	bl	8001adc <HAL_InitTick>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a9c:	7afb      	ldrb	r3, [r7, #11]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40023c00 	.word	0x40023c00
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	08005810 	.word	0x08005810
 8002ab4:	20000000 	.word	0x20000000
 8002ab8:	20000004 	.word	0x20000004

08002abc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002abe:	b087      	sub	sp, #28
 8002ac0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002ac2:	4b4b      	ldr	r3, [pc, #300]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x134>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f003 030c 	and.w	r3, r3, #12
 8002ace:	2b08      	cmp	r3, #8
 8002ad0:	d006      	beq.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x24>
 8002ad2:	2b0c      	cmp	r3, #12
 8002ad4:	d007      	beq.n	8002ae6 <HAL_RCC_GetSysClockFreq+0x2a>
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	d176      	bne.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x10c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ada:	4b46      	ldr	r3, [pc, #280]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002adc:	613b      	str	r3, [r7, #16]
      break;
 8002ade:	e081      	b.n	8002be4 <HAL_RCC_GetSysClockFreq+0x128>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ae0:	4b45      	ldr	r3, [pc, #276]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002ae2:	613b      	str	r3, [r7, #16]
      break;
 8002ae4:	e07e      	b.n	8002be4 <HAL_RCC_GetSysClockFreq+0x128>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	0c9b      	lsrs	r3, r3, #18
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	4a43      	ldr	r2, [pc, #268]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x140>)
 8002af0:	5cd3      	ldrb	r3, [r2, r3]
 8002af2:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	0d9b      	lsrs	r3, r3, #22
 8002af8:	f003 0303 	and.w	r3, r3, #3
 8002afc:	3301      	adds	r3, #1
 8002afe:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b00:	4b3b      	ldr	r3, [pc, #236]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x134>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d019      	beq.n	8002b40 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	f04f 0400 	mov.w	r4, #0
 8002b12:	4a39      	ldr	r2, [pc, #228]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002b14:	fb02 f104 	mul.w	r1, r2, r4
 8002b18:	2200      	movs	r2, #0
 8002b1a:	fb02 f203 	mul.w	r2, r2, r3
 8002b1e:	440a      	add	r2, r1
 8002b20:	4935      	ldr	r1, [pc, #212]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002b22:	fba3 0101 	umull	r0, r1, r3, r1
 8002b26:	1853      	adds	r3, r2, r1
 8002b28:	4619      	mov	r1, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f04f 0400 	mov.w	r4, #0
 8002b30:	461a      	mov	r2, r3
 8002b32:	4623      	mov	r3, r4
 8002b34:	f7fd fb22 	bl	800017c <__aeabi_uldivmod>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	460c      	mov	r4, r1
 8002b3c:	617b      	str	r3, [r7, #20]
 8002b3e:	e040      	b.n	8002bc2 <HAL_RCC_GetSysClockFreq+0x106>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	461d      	mov	r5, r3
 8002b44:	f04f 0600 	mov.w	r6, #0
 8002b48:	4629      	mov	r1, r5
 8002b4a:	4632      	mov	r2, r6
 8002b4c:	f04f 0300 	mov.w	r3, #0
 8002b50:	f04f 0400 	mov.w	r4, #0
 8002b54:	0154      	lsls	r4, r2, #5
 8002b56:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b5a:	014b      	lsls	r3, r1, #5
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4622      	mov	r2, r4
 8002b60:	1b49      	subs	r1, r1, r5
 8002b62:	eb62 0206 	sbc.w	r2, r2, r6
 8002b66:	f04f 0300 	mov.w	r3, #0
 8002b6a:	f04f 0400 	mov.w	r4, #0
 8002b6e:	0194      	lsls	r4, r2, #6
 8002b70:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b74:	018b      	lsls	r3, r1, #6
 8002b76:	1a5b      	subs	r3, r3, r1
 8002b78:	eb64 0402 	sbc.w	r4, r4, r2
 8002b7c:	f04f 0100 	mov.w	r1, #0
 8002b80:	f04f 0200 	mov.w	r2, #0
 8002b84:	00e2      	lsls	r2, r4, #3
 8002b86:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b8a:	00d9      	lsls	r1, r3, #3
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	4614      	mov	r4, r2
 8002b90:	195b      	adds	r3, r3, r5
 8002b92:	eb44 0406 	adc.w	r4, r4, r6
 8002b96:	f04f 0100 	mov.w	r1, #0
 8002b9a:	f04f 0200 	mov.w	r2, #0
 8002b9e:	02a2      	lsls	r2, r4, #10
 8002ba0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002ba4:	0299      	lsls	r1, r3, #10
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	4614      	mov	r4, r2
 8002baa:	4618      	mov	r0, r3
 8002bac:	4621      	mov	r1, r4
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f04f 0400 	mov.w	r4, #0
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	4623      	mov	r3, r4
 8002bb8:	f7fd fae0 	bl	800017c <__aeabi_uldivmod>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	460c      	mov	r4, r1
 8002bc0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	613b      	str	r3, [r7, #16]
      break;
 8002bc6:	e00d      	b.n	8002be4 <HAL_RCC_GetSysClockFreq+0x128>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002bc8:	4b09      	ldr	r3, [pc, #36]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x134>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	0b5b      	lsrs	r3, r3, #13
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	613b      	str	r3, [r7, #16]
      break;
 8002be2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002be4:	693b      	ldr	r3, [r7, #16]
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	371c      	adds	r7, #28
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	00f42400 	.word	0x00f42400
 8002bf8:	016e3600 	.word	0x016e3600
 8002bfc:	08005804 	.word	0x08005804

08002c00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c04:	4b02      	ldr	r3, [pc, #8]	; (8002c10 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c06:	681b      	ldr	r3, [r3, #0]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr
 8002c10:	20000000 	.word	0x20000000

08002c14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c18:	f7ff fff2 	bl	8002c00 <HAL_RCC_GetHCLKFreq>
 8002c1c:	4601      	mov	r1, r0
 8002c1e:	4b05      	ldr	r3, [pc, #20]	; (8002c34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	0a1b      	lsrs	r3, r3, #8
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	4a03      	ldr	r2, [pc, #12]	; (8002c38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c2a:	5cd3      	ldrb	r3, [r2, r3]
 8002c2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40023800 	.word	0x40023800
 8002c38:	08005820 	.word	0x08005820

08002c3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c40:	f7ff ffde 	bl	8002c00 <HAL_RCC_GetHCLKFreq>
 8002c44:	4601      	mov	r1, r0
 8002c46:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	0adb      	lsrs	r3, r3, #11
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	4a03      	ldr	r2, [pc, #12]	; (8002c60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c52:	5cd3      	ldrb	r3, [r2, r3]
 8002c54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	08005820 	.word	0x08005820

08002c64 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b087      	sub	sp, #28
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002c70:	4b29      	ldr	r3, [pc, #164]	; (8002d18 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d12c      	bne.n	8002cd6 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c7c:	4b26      	ldr	r3, [pc, #152]	; (8002d18 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d005      	beq.n	8002c94 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002c88:	4b24      	ldr	r3, [pc, #144]	; (8002d1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002c90:	617b      	str	r3, [r7, #20]
 8002c92:	e016      	b.n	8002cc2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c94:	4b20      	ldr	r3, [pc, #128]	; (8002d18 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	4a1f      	ldr	r2, [pc, #124]	; (8002d18 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002c9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c9e:	6253      	str	r3, [r2, #36]	; 0x24
 8002ca0:	4b1d      	ldr	r3, [pc, #116]	; (8002d18 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002cac:	4b1b      	ldr	r3, [pc, #108]	; (8002d1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002cb4:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cb6:	4b18      	ldr	r3, [pc, #96]	; (8002d18 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	4a17      	ldr	r2, [pc, #92]	; (8002d18 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002cbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cc0:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002cc8:	d105      	bne.n	8002cd6 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002cd0:	d101      	bne.n	8002cd6 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d105      	bne.n	8002ce8 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002cdc:	4b10      	ldr	r3, [pc, #64]	; (8002d20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a0f      	ldr	r2, [pc, #60]	; (8002d20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ce2:	f043 0304 	orr.w	r3, r3, #4
 8002ce6:	6013      	str	r3, [r2, #0]
 8002ce8:	4b0d      	ldr	r3, [pc, #52]	; (8002d20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f023 0201 	bic.w	r2, r3, #1
 8002cf0:	490b      	ldr	r1, [pc, #44]	; (8002d20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002cf8:	4b09      	ldr	r3, [pc, #36]	; (8002d20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d001      	beq.n	8002d0a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e000      	b.n	8002d0c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	371c      	adds	r7, #28
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bc80      	pop	{r7}
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	40007000 	.word	0x40007000
 8002d20:	40023c00 	.word	0x40023c00

08002d24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e06e      	b.n	8002e14 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d108      	bne.n	8002d50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d46:	d009      	beq.n	8002d5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	61da      	str	r2, [r3, #28]
 8002d4e:	e005      	b.n	8002d5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d106      	bne.n	8002d7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f7fe f912 	bl	8000fa0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2202      	movs	r2, #2
 8002d80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d92:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002da4:	431a      	orrs	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	431a      	orrs	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de0:	ea42 0103 	orr.w	r1, r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	430a      	orrs	r2, r1
 8002df2:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	0c1a      	lsrs	r2, r3, #16
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f002 0204 	and.w	r2, r2, #4
 8002e02:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b088      	sub	sp, #32
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	603b      	str	r3, [r7, #0]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d101      	bne.n	8002e3e <HAL_SPI_Transmit+0x22>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	e126      	b.n	800308c <HAL_SPI_Transmit+0x270>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e46:	f7fe fe95 	bl	8001b74 <HAL_GetTick>
 8002e4a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002e4c:	88fb      	ldrh	r3, [r7, #6]
 8002e4e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d002      	beq.n	8002e62 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e60:	e10b      	b.n	800307a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d002      	beq.n	8002e6e <HAL_SPI_Transmit+0x52>
 8002e68:	88fb      	ldrh	r3, [r7, #6]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d102      	bne.n	8002e74 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e72:	e102      	b.n	800307a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2203      	movs	r2, #3
 8002e78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	68ba      	ldr	r2, [r7, #8]
 8002e86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	88fa      	ldrh	r2, [r7, #6]
 8002e8c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	88fa      	ldrh	r2, [r7, #6]
 8002e92:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eba:	d10f      	bne.n	8002edc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002eda:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee6:	2b40      	cmp	r3, #64	; 0x40
 8002ee8:	d007      	beq.n	8002efa <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ef8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f02:	d14b      	bne.n	8002f9c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d002      	beq.n	8002f12 <HAL_SPI_Transmit+0xf6>
 8002f0c:	8afb      	ldrh	r3, [r7, #22]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d13e      	bne.n	8002f90 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f16:	881a      	ldrh	r2, [r3, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f22:	1c9a      	adds	r2, r3, #2
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002f36:	e02b      	b.n	8002f90 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d112      	bne.n	8002f6c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	881a      	ldrh	r2, [r3, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	1c9a      	adds	r2, r3, #2
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	3b01      	subs	r3, #1
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	86da      	strh	r2, [r3, #54]	; 0x36
 8002f6a:	e011      	b.n	8002f90 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f6c:	f7fe fe02 	bl	8001b74 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d803      	bhi.n	8002f84 <HAL_SPI_Transmit+0x168>
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f82:	d102      	bne.n	8002f8a <HAL_SPI_Transmit+0x16e>
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d102      	bne.n	8002f90 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f8e:	e074      	b.n	800307a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1ce      	bne.n	8002f38 <HAL_SPI_Transmit+0x11c>
 8002f9a:	e04c      	b.n	8003036 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d002      	beq.n	8002faa <HAL_SPI_Transmit+0x18e>
 8002fa4:	8afb      	ldrh	r3, [r7, #22]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d140      	bne.n	800302c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	330c      	adds	r3, #12
 8002fb4:	7812      	ldrb	r2, [r2, #0]
 8002fb6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbc:	1c5a      	adds	r2, r3, #1
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002fd0:	e02c      	b.n	800302c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d113      	bne.n	8003008 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	330c      	adds	r3, #12
 8002fea:	7812      	ldrb	r2, [r2, #0]
 8002fec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	1c5a      	adds	r2, r3, #1
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	3b01      	subs	r3, #1
 8003000:	b29a      	uxth	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	86da      	strh	r2, [r3, #54]	; 0x36
 8003006:	e011      	b.n	800302c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003008:	f7fe fdb4 	bl	8001b74 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	429a      	cmp	r2, r3
 8003016:	d803      	bhi.n	8003020 <HAL_SPI_Transmit+0x204>
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800301e:	d102      	bne.n	8003026 <HAL_SPI_Transmit+0x20a>
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d102      	bne.n	800302c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	77fb      	strb	r3, [r7, #31]
          goto error;
 800302a:	e026      	b.n	800307a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003030:	b29b      	uxth	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1cd      	bne.n	8002fd2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	6839      	ldr	r1, [r7, #0]
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f000 fcd2 	bl	80039e4 <SPI_EndRxTxTransaction>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d002      	beq.n	800304c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2220      	movs	r2, #32
 800304a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10a      	bne.n	800306a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003054:	2300      	movs	r3, #0
 8003056:	613b      	str	r3, [r7, #16]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	613b      	str	r3, [r7, #16]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	613b      	str	r3, [r7, #16]
 8003068:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306e:	2b00      	cmp	r3, #0
 8003070:	d002      	beq.n	8003078 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	77fb      	strb	r3, [r7, #31]
 8003076:	e000      	b.n	800307a <HAL_SPI_Transmit+0x25e>
  }

error:
 8003078:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800308a:	7ffb      	ldrb	r3, [r7, #31]
}
 800308c:	4618      	mov	r0, r3
 800308e:	3720      	adds	r7, #32
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b088      	sub	sp, #32
 8003098:	af02      	add	r7, sp, #8
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	603b      	str	r3, [r7, #0]
 80030a0:	4613      	mov	r3, r2
 80030a2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80030a4:	2300      	movs	r3, #0
 80030a6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030b0:	d112      	bne.n	80030d8 <HAL_SPI_Receive+0x44>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10e      	bne.n	80030d8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2204      	movs	r2, #4
 80030be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80030c2:	88fa      	ldrh	r2, [r7, #6]
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	9300      	str	r3, [sp, #0]
 80030c8:	4613      	mov	r3, r2
 80030ca:	68ba      	ldr	r2, [r7, #8]
 80030cc:	68b9      	ldr	r1, [r7, #8]
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 f8f1 	bl	80032b6 <HAL_SPI_TransmitReceive>
 80030d4:	4603      	mov	r3, r0
 80030d6:	e0ea      	b.n	80032ae <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d101      	bne.n	80030e6 <HAL_SPI_Receive+0x52>
 80030e2:	2302      	movs	r3, #2
 80030e4:	e0e3      	b.n	80032ae <HAL_SPI_Receive+0x21a>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030ee:	f7fe fd41 	bl	8001b74 <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d002      	beq.n	8003106 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003100:	2302      	movs	r3, #2
 8003102:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003104:	e0ca      	b.n	800329c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d002      	beq.n	8003112 <HAL_SPI_Receive+0x7e>
 800310c:	88fb      	ldrh	r3, [r7, #6]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d102      	bne.n	8003118 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003116:	e0c1      	b.n	800329c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2204      	movs	r2, #4
 800311c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	88fa      	ldrh	r2, [r7, #6]
 8003130:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	88fa      	ldrh	r2, [r7, #6]
 8003136:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800315e:	d10f      	bne.n	8003180 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800316e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800317e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318a:	2b40      	cmp	r3, #64	; 0x40
 800318c:	d007      	beq.n	800319e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800319c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d162      	bne.n	800326c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80031a6:	e02e      	b.n	8003206 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d115      	bne.n	80031e2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f103 020c 	add.w	r2, r3, #12
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c2:	7812      	ldrb	r2, [r2, #0]
 80031c4:	b2d2      	uxtb	r2, r2
 80031c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031cc:	1c5a      	adds	r2, r3, #1
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	3b01      	subs	r3, #1
 80031da:	b29a      	uxth	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80031e0:	e011      	b.n	8003206 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031e2:	f7fe fcc7 	bl	8001b74 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d803      	bhi.n	80031fa <HAL_SPI_Receive+0x166>
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f8:	d102      	bne.n	8003200 <HAL_SPI_Receive+0x16c>
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d102      	bne.n	8003206 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003204:	e04a      	b.n	800329c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800320a:	b29b      	uxth	r3, r3
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1cb      	bne.n	80031a8 <HAL_SPI_Receive+0x114>
 8003210:	e031      	b.n	8003276 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b01      	cmp	r3, #1
 800321e:	d113      	bne.n	8003248 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68da      	ldr	r2, [r3, #12]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322a:	b292      	uxth	r2, r2
 800322c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003232:	1c9a      	adds	r2, r3, #2
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800323c:	b29b      	uxth	r3, r3
 800323e:	3b01      	subs	r3, #1
 8003240:	b29a      	uxth	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003246:	e011      	b.n	800326c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003248:	f7fe fc94 	bl	8001b74 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	429a      	cmp	r2, r3
 8003256:	d803      	bhi.n	8003260 <HAL_SPI_Receive+0x1cc>
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800325e:	d102      	bne.n	8003266 <HAL_SPI_Receive+0x1d2>
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d102      	bne.n	800326c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	75fb      	strb	r3, [r7, #23]
          goto error;
 800326a:	e017      	b.n	800329c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003270:	b29b      	uxth	r3, r3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1cd      	bne.n	8003212 <HAL_SPI_Receive+0x17e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	6839      	ldr	r1, [r7, #0]
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 fb4c 	bl	8003918 <SPI_EndRxTransaction>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d002      	beq.n	800328c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2220      	movs	r2, #32
 800328a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003290:	2b00      	cmp	r3, #0
 8003292:	d002      	beq.n	800329a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	75fb      	strb	r3, [r7, #23]
 8003298:	e000      	b.n	800329c <HAL_SPI_Receive+0x208>
  }

error :
 800329a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80032ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3718      	adds	r7, #24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b08c      	sub	sp, #48	; 0x30
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	60f8      	str	r0, [r7, #12]
 80032be:	60b9      	str	r1, [r7, #8]
 80032c0:	607a      	str	r2, [r7, #4]
 80032c2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80032c4:	2301      	movs	r3, #1
 80032c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80032c8:	2300      	movs	r3, #0
 80032ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d101      	bne.n	80032dc <HAL_SPI_TransmitReceive+0x26>
 80032d8:	2302      	movs	r3, #2
 80032da:	e18a      	b.n	80035f2 <HAL_SPI_TransmitReceive+0x33c>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032e4:	f7fe fc46 	bl	8001b74 <HAL_GetTick>
 80032e8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80032fa:	887b      	ldrh	r3, [r7, #2]
 80032fc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80032fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003302:	2b01      	cmp	r3, #1
 8003304:	d00f      	beq.n	8003326 <HAL_SPI_TransmitReceive+0x70>
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800330c:	d107      	bne.n	800331e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d103      	bne.n	800331e <HAL_SPI_TransmitReceive+0x68>
 8003316:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800331a:	2b04      	cmp	r3, #4
 800331c:	d003      	beq.n	8003326 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800331e:	2302      	movs	r3, #2
 8003320:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003324:	e15b      	b.n	80035de <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d005      	beq.n	8003338 <HAL_SPI_TransmitReceive+0x82>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d002      	beq.n	8003338 <HAL_SPI_TransmitReceive+0x82>
 8003332:	887b      	ldrh	r3, [r7, #2]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d103      	bne.n	8003340 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800333e:	e14e      	b.n	80035de <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b04      	cmp	r3, #4
 800334a:	d003      	beq.n	8003354 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2205      	movs	r2, #5
 8003350:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	887a      	ldrh	r2, [r7, #2]
 8003364:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	887a      	ldrh	r2, [r7, #2]
 800336a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	887a      	ldrh	r2, [r7, #2]
 8003376:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	887a      	ldrh	r2, [r7, #2]
 800337c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003394:	2b40      	cmp	r3, #64	; 0x40
 8003396:	d007      	beq.n	80033a8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033b0:	d178      	bne.n	80034a4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d002      	beq.n	80033c0 <HAL_SPI_TransmitReceive+0x10a>
 80033ba:	8b7b      	ldrh	r3, [r7, #26]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d166      	bne.n	800348e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c4:	881a      	ldrh	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d0:	1c9a      	adds	r2, r3, #2
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033da:	b29b      	uxth	r3, r3
 80033dc:	3b01      	subs	r3, #1
 80033de:	b29a      	uxth	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033e4:	e053      	b.n	800348e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d11b      	bne.n	800342c <HAL_SPI_TransmitReceive+0x176>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d016      	beq.n	800342c <HAL_SPI_TransmitReceive+0x176>
 80033fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003400:	2b01      	cmp	r3, #1
 8003402:	d113      	bne.n	800342c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003408:	881a      	ldrh	r2, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003414:	1c9a      	adds	r2, r3, #2
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800341e:	b29b      	uxth	r3, r3
 8003420:	3b01      	subs	r3, #1
 8003422:	b29a      	uxth	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003428:	2300      	movs	r3, #0
 800342a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b01      	cmp	r3, #1
 8003438:	d119      	bne.n	800346e <HAL_SPI_TransmitReceive+0x1b8>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800343e:	b29b      	uxth	r3, r3
 8003440:	2b00      	cmp	r3, #0
 8003442:	d014      	beq.n	800346e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68da      	ldr	r2, [r3, #12]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344e:	b292      	uxth	r2, r2
 8003450:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003456:	1c9a      	adds	r2, r3, #2
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003460:	b29b      	uxth	r3, r3
 8003462:	3b01      	subs	r3, #1
 8003464:	b29a      	uxth	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800346a:	2301      	movs	r3, #1
 800346c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800346e:	f7fe fb81 	bl	8001b74 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800347a:	429a      	cmp	r2, r3
 800347c:	d807      	bhi.n	800348e <HAL_SPI_TransmitReceive+0x1d8>
 800347e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003484:	d003      	beq.n	800348e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800348c:	e0a7      	b.n	80035de <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003492:	b29b      	uxth	r3, r3
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1a6      	bne.n	80033e6 <HAL_SPI_TransmitReceive+0x130>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800349c:	b29b      	uxth	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1a1      	bne.n	80033e6 <HAL_SPI_TransmitReceive+0x130>
 80034a2:	e07c      	b.n	800359e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d002      	beq.n	80034b2 <HAL_SPI_TransmitReceive+0x1fc>
 80034ac:	8b7b      	ldrh	r3, [r7, #26]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d16b      	bne.n	800358a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	330c      	adds	r3, #12
 80034bc:	7812      	ldrb	r2, [r2, #0]
 80034be:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c4:	1c5a      	adds	r2, r3, #1
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	3b01      	subs	r3, #1
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034d8:	e057      	b.n	800358a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d11c      	bne.n	8003522 <HAL_SPI_TransmitReceive+0x26c>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d017      	beq.n	8003522 <HAL_SPI_TransmitReceive+0x26c>
 80034f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d114      	bne.n	8003522 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	330c      	adds	r3, #12
 8003502:	7812      	ldrb	r2, [r2, #0]
 8003504:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350a:	1c5a      	adds	r2, r3, #1
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003514:	b29b      	uxth	r3, r3
 8003516:	3b01      	subs	r3, #1
 8003518:	b29a      	uxth	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800351e:	2300      	movs	r3, #0
 8003520:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b01      	cmp	r3, #1
 800352e:	d119      	bne.n	8003564 <HAL_SPI_TransmitReceive+0x2ae>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003534:	b29b      	uxth	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d014      	beq.n	8003564 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68da      	ldr	r2, [r3, #12]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003544:	b2d2      	uxtb	r2, r2
 8003546:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354c:	1c5a      	adds	r2, r3, #1
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003556:	b29b      	uxth	r3, r3
 8003558:	3b01      	subs	r3, #1
 800355a:	b29a      	uxth	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003560:	2301      	movs	r3, #1
 8003562:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003564:	f7fe fb06 	bl	8001b74 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003570:	429a      	cmp	r2, r3
 8003572:	d803      	bhi.n	800357c <HAL_SPI_TransmitReceive+0x2c6>
 8003574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800357a:	d102      	bne.n	8003582 <HAL_SPI_TransmitReceive+0x2cc>
 800357c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800357e:	2b00      	cmp	r3, #0
 8003580:	d103      	bne.n	800358a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003588:	e029      	b.n	80035de <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800358e:	b29b      	uxth	r3, r3
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1a2      	bne.n	80034da <HAL_SPI_TransmitReceive+0x224>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003598:	b29b      	uxth	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d19d      	bne.n	80034da <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800359e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f000 fa1e 	bl	80039e4 <SPI_EndRxTxTransaction>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d006      	beq.n	80035bc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2220      	movs	r2, #32
 80035b8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80035ba:	e010      	b.n	80035de <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d10b      	bne.n	80035dc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035c4:	2300      	movs	r3, #0
 80035c6:	617b      	str	r3, [r7, #20]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	617b      	str	r3, [r7, #20]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	617b      	str	r3, [r7, #20]
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	e000      	b.n	80035de <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80035dc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80035ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3730      	adds	r7, #48	; 0x30
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
	...

080035fc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b088      	sub	sp, #32
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	099b      	lsrs	r3, r3, #6
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10f      	bne.n	8003640 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00a      	beq.n	8003640 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	099b      	lsrs	r3, r3, #6
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d004      	beq.n	8003640 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	4798      	blx	r3
    return;
 800363e:	e0bf      	b.n	80037c0 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	085b      	lsrs	r3, r3, #1
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00a      	beq.n	8003662 <HAL_SPI_IRQHandler+0x66>
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	09db      	lsrs	r3, r3, #7
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b00      	cmp	r3, #0
 8003656:	d004      	beq.n	8003662 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	4798      	blx	r3
    return;
 8003660:	e0ae      	b.n	80037c0 <HAL_SPI_IRQHandler+0x1c4>
  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#else
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	095b      	lsrs	r3, r3, #5
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	2b00      	cmp	r3, #0
 800366c:	d106      	bne.n	800367c <HAL_SPI_IRQHandler+0x80>
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	099b      	lsrs	r3, r3, #6
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b00      	cmp	r3, #0
 8003678:	f000 80a2 	beq.w	80037c0 <HAL_SPI_IRQHandler+0x1c4>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	095b      	lsrs	r3, r3, #5
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b00      	cmp	r3, #0
 8003686:	f000 809b 	beq.w	80037c0 <HAL_SPI_IRQHandler+0x1c4>
#endif
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	099b      	lsrs	r3, r3, #6
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	d023      	beq.n	80036de <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b03      	cmp	r3, #3
 80036a0:	d011      	beq.n	80036c6 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a6:	f043 0204 	orr.w	r2, r3, #4
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036ae:	2300      	movs	r3, #0
 80036b0:	617b      	str	r3, [r7, #20]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	617b      	str	r3, [r7, #20]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	617b      	str	r3, [r7, #20]
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	e00b      	b.n	80036de <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036c6:	2300      	movs	r3, #0
 80036c8:	613b      	str	r3, [r7, #16]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	613b      	str	r3, [r7, #16]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	613b      	str	r3, [r7, #16]
 80036da:	693b      	ldr	r3, [r7, #16]
        return;
 80036dc:	e070      	b.n	80037c0 <HAL_SPI_IRQHandler+0x1c4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	095b      	lsrs	r3, r3, #5
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d014      	beq.n	8003714 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ee:	f043 0201 	orr.w	r2, r3, #1
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80036f6:	2300      	movs	r3, #0
 80036f8:	60fb      	str	r3, [r7, #12]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	60fb      	str	r3, [r7, #12]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	68fb      	ldr	r3, [r7, #12]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
      __HAL_SPI_CLEAR_FREFLAG(hspi);
    }
#endif

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003718:	2b00      	cmp	r3, #0
 800371a:	d050      	beq.n	80037be <HAL_SPI_IRQHandler+0x1c2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800372a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d104      	bne.n	8003748 <HAL_SPI_IRQHandler+0x14c>
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	2b00      	cmp	r3, #0
 8003746:	d034      	beq.n	80037b2 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 0203 	bic.w	r2, r2, #3
 8003756:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800375c:	2b00      	cmp	r3, #0
 800375e:	d011      	beq.n	8003784 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003764:	4a18      	ldr	r2, [pc, #96]	; (80037c8 <HAL_SPI_IRQHandler+0x1cc>)
 8003766:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800376c:	4618      	mov	r0, r3
 800376e:	f7fe fb3a 	bl	8001de6 <HAL_DMA_Abort_IT>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d005      	beq.n	8003784 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800377c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003788:	2b00      	cmp	r3, #0
 800378a:	d016      	beq.n	80037ba <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003790:	4a0d      	ldr	r2, [pc, #52]	; (80037c8 <HAL_SPI_IRQHandler+0x1cc>)
 8003792:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003798:	4618      	mov	r0, r3
 800379a:	f7fe fb24 	bl	8001de6 <HAL_DMA_Abort_IT>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00a      	beq.n	80037ba <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80037b0:	e003      	b.n	80037ba <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f80a 	bl	80037cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80037b8:	e000      	b.n	80037bc <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80037ba:	bf00      	nop
    return;
 80037bc:	bf00      	nop
 80037be:	bf00      	nop
  }
}
 80037c0:	3720      	adds	r7, #32
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	080037df 	.word	0x080037df

080037cc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	bc80      	pop	{r7}
 80037dc:	4770      	bx	lr

080037de <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b084      	sub	sp, #16
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ea:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f7ff ffe7 	bl	80037cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80037fe:	bf00      	nop
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
	...

08003808 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b088      	sub	sp, #32
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	603b      	str	r3, [r7, #0]
 8003814:	4613      	mov	r3, r2
 8003816:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003818:	f7fe f9ac 	bl	8001b74 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003820:	1a9b      	subs	r3, r3, r2
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	4413      	add	r3, r2
 8003826:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003828:	f7fe f9a4 	bl	8001b74 <HAL_GetTick>
 800382c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800382e:	4b39      	ldr	r3, [pc, #228]	; (8003914 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	015b      	lsls	r3, r3, #5
 8003834:	0d1b      	lsrs	r3, r3, #20
 8003836:	69fa      	ldr	r2, [r7, #28]
 8003838:	fb02 f303 	mul.w	r3, r2, r3
 800383c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800383e:	e054      	b.n	80038ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003846:	d050      	beq.n	80038ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003848:	f7fe f994 	bl	8001b74 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	69fa      	ldr	r2, [r7, #28]
 8003854:	429a      	cmp	r2, r3
 8003856:	d902      	bls.n	800385e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d13d      	bne.n	80038da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	685a      	ldr	r2, [r3, #4]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800386c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003876:	d111      	bne.n	800389c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003880:	d004      	beq.n	800388c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800388a:	d107      	bne.n	800389c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800389a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038a4:	d10f      	bne.n	80038c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038b4:	601a      	str	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e017      	b.n	800390a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d101      	bne.n	80038e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	3b01      	subs	r3, #1
 80038e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	4013      	ands	r3, r2
 80038f4:	68ba      	ldr	r2, [r7, #8]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	bf0c      	ite	eq
 80038fa:	2301      	moveq	r3, #1
 80038fc:	2300      	movne	r3, #0
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	461a      	mov	r2, r3
 8003902:	79fb      	ldrb	r3, [r7, #7]
 8003904:	429a      	cmp	r2, r3
 8003906:	d19b      	bne.n	8003840 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3720      	adds	r7, #32
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	20000000 	.word	0x20000000

08003918 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af02      	add	r7, sp, #8
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800392c:	d111      	bne.n	8003952 <SPI_EndRxTransaction+0x3a>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003936:	d004      	beq.n	8003942 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003940:	d107      	bne.n	8003952 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003950:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800395a:	d12a      	bne.n	80039b2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003964:	d012      	beq.n	800398c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	2200      	movs	r2, #0
 800396e:	2180      	movs	r1, #128	; 0x80
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f7ff ff49 	bl	8003808 <SPI_WaitFlagStateUntilTimeout>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d02d      	beq.n	80039d8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003980:	f043 0220 	orr.w	r2, r3, #32
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e026      	b.n	80039da <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	9300      	str	r3, [sp, #0]
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	2200      	movs	r2, #0
 8003994:	2101      	movs	r1, #1
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f7ff ff36 	bl	8003808 <SPI_WaitFlagStateUntilTimeout>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d01a      	beq.n	80039d8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a6:	f043 0220 	orr.w	r2, r3, #32
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e013      	b.n	80039da <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	9300      	str	r3, [sp, #0]
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	2200      	movs	r2, #0
 80039ba:	2101      	movs	r1, #1
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f7ff ff23 	bl	8003808 <SPI_WaitFlagStateUntilTimeout>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d007      	beq.n	80039d8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039cc:	f043 0220 	orr.w	r2, r3, #32
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e000      	b.n	80039da <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
	...

080039e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b088      	sub	sp, #32
 80039e8:	af02      	add	r7, sp, #8
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80039f0:	4b1b      	ldr	r3, [pc, #108]	; (8003a60 <SPI_EndRxTxTransaction+0x7c>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a1b      	ldr	r2, [pc, #108]	; (8003a64 <SPI_EndRxTxTransaction+0x80>)
 80039f6:	fba2 2303 	umull	r2, r3, r2, r3
 80039fa:	0d5b      	lsrs	r3, r3, #21
 80039fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a00:	fb02 f303 	mul.w	r3, r2, r3
 8003a04:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a0e:	d112      	bne.n	8003a36 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	2200      	movs	r2, #0
 8003a18:	2180      	movs	r1, #128	; 0x80
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f7ff fef4 	bl	8003808 <SPI_WaitFlagStateUntilTimeout>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d016      	beq.n	8003a54 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a2a:	f043 0220 	orr.w	r2, r3, #32
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e00f      	b.n	8003a56 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00a      	beq.n	8003a52 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a4c:	2b80      	cmp	r3, #128	; 0x80
 8003a4e:	d0f2      	beq.n	8003a36 <SPI_EndRxTxTransaction+0x52>
 8003a50:	e000      	b.n	8003a54 <SPI_EndRxTxTransaction+0x70>
        break;
 8003a52:	bf00      	nop
  }

  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3718      	adds	r7, #24
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	20000000 	.word	0x20000000
 8003a64:	165e9f81 	.word	0x165e9f81

08003a68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e03f      	b.n	8003afa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d106      	bne.n	8003a94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7fd faf0 	bl	8001074 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2224      	movs	r2, #36	; 0x24
 8003a98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68da      	ldr	r2, [r3, #12]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003aaa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 fb45 	bl	800413c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	691a      	ldr	r2, [r3, #16]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ac0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	695a      	ldr	r2, [r3, #20]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ad0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68da      	ldr	r2, [r3, #12]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ae0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2220      	movs	r2, #32
 8003aec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2220      	movs	r2, #32
 8003af4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b088      	sub	sp, #32
 8003b06:	af02      	add	r7, sp, #8
 8003b08:	60f8      	str	r0, [r7, #12]
 8003b0a:	60b9      	str	r1, [r7, #8]
 8003b0c:	603b      	str	r3, [r7, #0]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003b12:	2300      	movs	r3, #0
 8003b14:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b20      	cmp	r3, #32
 8003b20:	f040 8083 	bne.w	8003c2a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d002      	beq.n	8003b30 <HAL_UART_Transmit+0x2e>
 8003b2a:	88fb      	ldrh	r3, [r7, #6]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e07b      	b.n	8003c2c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d101      	bne.n	8003b42 <HAL_UART_Transmit+0x40>
 8003b3e:	2302      	movs	r3, #2
 8003b40:	e074      	b.n	8003c2c <HAL_UART_Transmit+0x12a>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2221      	movs	r2, #33	; 0x21
 8003b54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003b58:	f7fe f80c 	bl	8001b74 <HAL_GetTick>
 8003b5c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	88fa      	ldrh	r2, [r7, #6]
 8003b62:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	88fa      	ldrh	r2, [r7, #6]
 8003b68:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003b72:	e042      	b.n	8003bfa <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	b29a      	uxth	r2, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b8a:	d122      	bne.n	8003bd2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	9300      	str	r3, [sp, #0]
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	2200      	movs	r2, #0
 8003b94:	2180      	movs	r1, #128	; 0x80
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	f000 f967 	bl	8003e6a <UART_WaitOnFlagUntilTimeout>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e042      	b.n	8003c2c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	881b      	ldrh	r3, [r3, #0]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bb8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d103      	bne.n	8003bca <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	3302      	adds	r3, #2
 8003bc6:	60bb      	str	r3, [r7, #8]
 8003bc8:	e017      	b.n	8003bfa <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	3301      	adds	r3, #1
 8003bce:	60bb      	str	r3, [r7, #8]
 8003bd0:	e013      	b.n	8003bfa <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	2180      	movs	r1, #128	; 0x80
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f000 f944 	bl	8003e6a <UART_WaitOnFlagUntilTimeout>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d001      	beq.n	8003bec <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e01f      	b.n	8003c2c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	1c5a      	adds	r2, r3, #1
 8003bf0:	60ba      	str	r2, [r7, #8]
 8003bf2:	781a      	ldrb	r2, [r3, #0]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1b7      	bne.n	8003b74 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	2140      	movs	r1, #64	; 0x40
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f000 f92b 	bl	8003e6a <UART_WaitOnFlagUntilTimeout>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e006      	b.n	8003c2c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2220      	movs	r2, #32
 8003c22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003c26:	2300      	movs	r3, #0
 8003c28:	e000      	b.n	8003c2c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003c2a:	2302      	movs	r3, #2
  }
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3718      	adds	r7, #24
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b088      	sub	sp, #32
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003c54:	2300      	movs	r3, #0
 8003c56:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	f003 030f 	and.w	r3, r3, #15
 8003c62:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10d      	bne.n	8003c86 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	f003 0320 	and.w	r3, r3, #32
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d008      	beq.n	8003c86 <HAL_UART_IRQHandler+0x52>
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	f003 0320 	and.w	r3, r3, #32
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d003      	beq.n	8003c86 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f9db 	bl	800403a <UART_Receive_IT>
      return;
 8003c84:	e0d1      	b.n	8003e2a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 80b0 	beq.w	8003dee <HAL_UART_IRQHandler+0x1ba>
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d105      	bne.n	8003ca4 <HAL_UART_IRQHandler+0x70>
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f000 80a5 	beq.w	8003dee <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00a      	beq.n	8003cc4 <HAL_UART_IRQHandler+0x90>
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d005      	beq.n	8003cc4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cbc:	f043 0201 	orr.w	r2, r3, #1
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	f003 0304 	and.w	r3, r3, #4
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00a      	beq.n	8003ce4 <HAL_UART_IRQHandler+0xb0>
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d005      	beq.n	8003ce4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cdc:	f043 0202 	orr.w	r2, r3, #2
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00a      	beq.n	8003d04 <HAL_UART_IRQHandler+0xd0>
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d005      	beq.n	8003d04 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cfc:	f043 0204 	orr.w	r2, r3, #4
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	f003 0308 	and.w	r3, r3, #8
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00f      	beq.n	8003d2e <HAL_UART_IRQHandler+0xfa>
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	f003 0320 	and.w	r3, r3, #32
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d104      	bne.n	8003d22 <HAL_UART_IRQHandler+0xee>
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d005      	beq.n	8003d2e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d26:	f043 0208 	orr.w	r2, r3, #8
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d078      	beq.n	8003e28 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	f003 0320 	and.w	r3, r3, #32
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d007      	beq.n	8003d50 <HAL_UART_IRQHandler+0x11c>
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	f003 0320 	and.w	r3, r3, #32
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d002      	beq.n	8003d50 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f975 	bl	800403a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d5a:	2b40      	cmp	r3, #64	; 0x40
 8003d5c:	bf0c      	ite	eq
 8003d5e:	2301      	moveq	r3, #1
 8003d60:	2300      	movne	r3, #0
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d6a:	f003 0308 	and.w	r3, r3, #8
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d102      	bne.n	8003d78 <HAL_UART_IRQHandler+0x144>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d031      	beq.n	8003ddc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 f8c0 	bl	8003efe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d88:	2b40      	cmp	r3, #64	; 0x40
 8003d8a:	d123      	bne.n	8003dd4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	695a      	ldr	r2, [r3, #20]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d9a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d013      	beq.n	8003dcc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da8:	4a21      	ldr	r2, [pc, #132]	; (8003e30 <HAL_UART_IRQHandler+0x1fc>)
 8003daa:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7fe f818 	bl	8001de6 <HAL_DMA_Abort_IT>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d016      	beq.n	8003dea <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003dc6:	4610      	mov	r0, r2
 8003dc8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dca:	e00e      	b.n	8003dea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 f843 	bl	8003e58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd2:	e00a      	b.n	8003dea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 f83f 	bl	8003e58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dda:	e006      	b.n	8003dea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 f83b 	bl	8003e58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003de8:	e01e      	b.n	8003e28 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dea:	bf00      	nop
    return;
 8003dec:	e01c      	b.n	8003e28 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d008      	beq.n	8003e0a <HAL_UART_IRQHandler+0x1d6>
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d003      	beq.n	8003e0a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f8ac 	bl	8003f60 <UART_Transmit_IT>
    return;
 8003e08:	e00f      	b.n	8003e2a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00a      	beq.n	8003e2a <HAL_UART_IRQHandler+0x1f6>
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d005      	beq.n	8003e2a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 f8f3 	bl	800400a <UART_EndTransmit_IT>
    return;
 8003e24:	bf00      	nop
 8003e26:	e000      	b.n	8003e2a <HAL_UART_IRQHandler+0x1f6>
    return;
 8003e28:	bf00      	nop
  }
}
 8003e2a:	3720      	adds	r7, #32
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	08003f39 	.word	0x08003f39

08003e34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bc80      	pop	{r7}
 8003e44:	4770      	bx	lr

08003e46 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b083      	sub	sp, #12
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003e4e:	bf00      	nop
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bc80      	pop	{r7}
 8003e56:	4770      	bx	lr

08003e58 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bc80      	pop	{r7}
 8003e68:	4770      	bx	lr

08003e6a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b084      	sub	sp, #16
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	60f8      	str	r0, [r7, #12]
 8003e72:	60b9      	str	r1, [r7, #8]
 8003e74:	603b      	str	r3, [r7, #0]
 8003e76:	4613      	mov	r3, r2
 8003e78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e7a:	e02c      	b.n	8003ed6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e82:	d028      	beq.n	8003ed6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d007      	beq.n	8003e9a <UART_WaitOnFlagUntilTimeout+0x30>
 8003e8a:	f7fd fe73 	bl	8001b74 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d21d      	bcs.n	8003ed6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68da      	ldr	r2, [r3, #12]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ea8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	695a      	ldr	r2, [r3, #20]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 0201 	bic.w	r2, r2, #1
 8003eb8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e00f      	b.n	8003ef6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	68ba      	ldr	r2, [r7, #8]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	bf0c      	ite	eq
 8003ee6:	2301      	moveq	r3, #1
 8003ee8:	2300      	movne	r3, #0
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	461a      	mov	r2, r3
 8003eee:	79fb      	ldrb	r3, [r7, #7]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d0c3      	beq.n	8003e7c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003efe:	b480      	push	{r7}
 8003f00:	b083      	sub	sp, #12
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68da      	ldr	r2, [r3, #12]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f14:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	695a      	ldr	r2, [r3, #20]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 0201 	bic.w	r2, r2, #1
 8003f24:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003f2e:	bf00      	nop
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bc80      	pop	{r7}
 8003f36:	4770      	bx	lr

08003f38 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f7ff ff80 	bl	8003e58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f58:	bf00      	nop
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	2b21      	cmp	r3, #33	; 0x21
 8003f72:	d144      	bne.n	8003ffe <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f7c:	d11a      	bne.n	8003fb4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	881b      	ldrh	r3, [r3, #0]
 8003f88:	461a      	mov	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f92:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d105      	bne.n	8003fa8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
 8003fa0:	1c9a      	adds	r2, r3, #2
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	621a      	str	r2, [r3, #32]
 8003fa6:	e00e      	b.n	8003fc6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	1c5a      	adds	r2, r3, #1
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	621a      	str	r2, [r3, #32]
 8003fb2:	e008      	b.n	8003fc6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	1c59      	adds	r1, r3, #1
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	6211      	str	r1, [r2, #32]
 8003fbe:	781a      	ldrb	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10f      	bne.n	8003ffa <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68da      	ldr	r2, [r3, #12]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fe8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68da      	ldr	r2, [r3, #12]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ff8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	e000      	b.n	8004000 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003ffe:	2302      	movs	r3, #2
  }
}
 8004000:	4618      	mov	r0, r3
 8004002:	3714      	adds	r7, #20
 8004004:	46bd      	mov	sp, r7
 8004006:	bc80      	pop	{r7}
 8004008:	4770      	bx	lr

0800400a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b082      	sub	sp, #8
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68da      	ldr	r2, [r3, #12]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004020:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2220      	movs	r2, #32
 8004026:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7ff ff02 	bl	8003e34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800403a:	b580      	push	{r7, lr}
 800403c:	b084      	sub	sp, #16
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b22      	cmp	r3, #34	; 0x22
 800404c:	d171      	bne.n	8004132 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004056:	d123      	bne.n	80040a0 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405c:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10e      	bne.n	8004084 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	b29b      	uxth	r3, r3
 800406e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004072:	b29a      	uxth	r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407c:	1c9a      	adds	r2, r3, #2
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	629a      	str	r2, [r3, #40]	; 0x28
 8004082:	e029      	b.n	80040d8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	b29b      	uxth	r3, r3
 800408c:	b2db      	uxtb	r3, r3
 800408e:	b29a      	uxth	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004098:	1c5a      	adds	r2, r3, #1
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	629a      	str	r2, [r3, #40]	; 0x28
 800409e:	e01b      	b.n	80040d8 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d10a      	bne.n	80040be <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6858      	ldr	r0, [r3, #4]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b2:	1c59      	adds	r1, r3, #1
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	6291      	str	r1, [r2, #40]	; 0x28
 80040b8:	b2c2      	uxtb	r2, r0
 80040ba:	701a      	strb	r2, [r3, #0]
 80040bc:	e00c      	b.n	80040d8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	b2da      	uxtb	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ca:	1c58      	adds	r0, r3, #1
 80040cc:	6879      	ldr	r1, [r7, #4]
 80040ce:	6288      	str	r0, [r1, #40]	; 0x28
 80040d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040d4:	b2d2      	uxtb	r2, r2
 80040d6:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040dc:	b29b      	uxth	r3, r3
 80040de:	3b01      	subs	r3, #1
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	4619      	mov	r1, r3
 80040e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d120      	bne.n	800412e <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68da      	ldr	r2, [r3, #12]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f022 0220 	bic.w	r2, r2, #32
 80040fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68da      	ldr	r2, [r3, #12]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800410a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	695a      	ldr	r2, [r3, #20]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f022 0201 	bic.w	r2, r2, #1
 800411a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2220      	movs	r2, #32
 8004120:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f7ff fe8e 	bl	8003e46 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800412a:	2300      	movs	r3, #0
 800412c:	e002      	b.n	8004134 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800412e:	2300      	movs	r3, #0
 8004130:	e000      	b.n	8004134 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004132:	2302      	movs	r3, #2
  }
}
 8004134:	4618      	mov	r0, r3
 8004136:	3710      	adds	r7, #16
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68da      	ldr	r2, [r3, #12]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	430a      	orrs	r2, r1
 8004158:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	689a      	ldr	r2, [r3, #8]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	431a      	orrs	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	431a      	orrs	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	69db      	ldr	r3, [r3, #28]
 800416e:	4313      	orrs	r3, r2
 8004170:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800417c:	f023 030c 	bic.w	r3, r3, #12
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	6812      	ldr	r2, [r2, #0]
 8004184:	68b9      	ldr	r1, [r7, #8]
 8004186:	430b      	orrs	r3, r1
 8004188:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	699a      	ldr	r2, [r3, #24]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	430a      	orrs	r2, r1
 800419e:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a55      	ldr	r2, [pc, #340]	; (80042fc <UART_SetConfig+0x1c0>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d103      	bne.n	80041b2 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80041aa:	f7fe fd47 	bl	8002c3c <HAL_RCC_GetPCLK2Freq>
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	e002      	b.n	80041b8 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80041b2:	f7fe fd2f 	bl	8002c14 <HAL_RCC_GetPCLK1Freq>
 80041b6:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	69db      	ldr	r3, [r3, #28]
 80041bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041c0:	d14c      	bne.n	800425c <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	4613      	mov	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	4413      	add	r3, r2
 80041ca:	009a      	lsls	r2, r3, #2
 80041cc:	441a      	add	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	005b      	lsls	r3, r3, #1
 80041d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d8:	4a49      	ldr	r2, [pc, #292]	; (8004300 <UART_SetConfig+0x1c4>)
 80041da:	fba2 2303 	umull	r2, r3, r2, r3
 80041de:	095b      	lsrs	r3, r3, #5
 80041e0:	0119      	lsls	r1, r3, #4
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	4613      	mov	r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	4413      	add	r3, r2
 80041ea:	009a      	lsls	r2, r3, #2
 80041ec:	441a      	add	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	005b      	lsls	r3, r3, #1
 80041f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80041f8:	4b41      	ldr	r3, [pc, #260]	; (8004300 <UART_SetConfig+0x1c4>)
 80041fa:	fba3 0302 	umull	r0, r3, r3, r2
 80041fe:	095b      	lsrs	r3, r3, #5
 8004200:	2064      	movs	r0, #100	; 0x64
 8004202:	fb00 f303 	mul.w	r3, r0, r3
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	00db      	lsls	r3, r3, #3
 800420a:	3332      	adds	r3, #50	; 0x32
 800420c:	4a3c      	ldr	r2, [pc, #240]	; (8004300 <UART_SetConfig+0x1c4>)
 800420e:	fba2 2303 	umull	r2, r3, r2, r3
 8004212:	095b      	lsrs	r3, r3, #5
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800421a:	4419      	add	r1, r3
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	4613      	mov	r3, r2
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4413      	add	r3, r2
 8004224:	009a      	lsls	r2, r3, #2
 8004226:	441a      	add	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	005b      	lsls	r3, r3, #1
 800422e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004232:	4b33      	ldr	r3, [pc, #204]	; (8004300 <UART_SetConfig+0x1c4>)
 8004234:	fba3 0302 	umull	r0, r3, r3, r2
 8004238:	095b      	lsrs	r3, r3, #5
 800423a:	2064      	movs	r0, #100	; 0x64
 800423c:	fb00 f303 	mul.w	r3, r0, r3
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	3332      	adds	r3, #50	; 0x32
 8004246:	4a2e      	ldr	r2, [pc, #184]	; (8004300 <UART_SetConfig+0x1c4>)
 8004248:	fba2 2303 	umull	r2, r3, r2, r3
 800424c:	095b      	lsrs	r3, r3, #5
 800424e:	f003 0207 	and.w	r2, r3, #7
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	440a      	add	r2, r1
 8004258:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800425a:	e04a      	b.n	80042f2 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	4613      	mov	r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4413      	add	r3, r2
 8004264:	009a      	lsls	r2, r3, #2
 8004266:	441a      	add	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004272:	4a23      	ldr	r2, [pc, #140]	; (8004300 <UART_SetConfig+0x1c4>)
 8004274:	fba2 2303 	umull	r2, r3, r2, r3
 8004278:	095b      	lsrs	r3, r3, #5
 800427a:	0119      	lsls	r1, r3, #4
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	4613      	mov	r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	4413      	add	r3, r2
 8004284:	009a      	lsls	r2, r3, #2
 8004286:	441a      	add	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004292:	4b1b      	ldr	r3, [pc, #108]	; (8004300 <UART_SetConfig+0x1c4>)
 8004294:	fba3 0302 	umull	r0, r3, r3, r2
 8004298:	095b      	lsrs	r3, r3, #5
 800429a:	2064      	movs	r0, #100	; 0x64
 800429c:	fb00 f303 	mul.w	r3, r0, r3
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	011b      	lsls	r3, r3, #4
 80042a4:	3332      	adds	r3, #50	; 0x32
 80042a6:	4a16      	ldr	r2, [pc, #88]	; (8004300 <UART_SetConfig+0x1c4>)
 80042a8:	fba2 2303 	umull	r2, r3, r2, r3
 80042ac:	095b      	lsrs	r3, r3, #5
 80042ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042b2:	4419      	add	r1, r3
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	4613      	mov	r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	4413      	add	r3, r2
 80042bc:	009a      	lsls	r2, r3, #2
 80042be:	441a      	add	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80042ca:	4b0d      	ldr	r3, [pc, #52]	; (8004300 <UART_SetConfig+0x1c4>)
 80042cc:	fba3 0302 	umull	r0, r3, r3, r2
 80042d0:	095b      	lsrs	r3, r3, #5
 80042d2:	2064      	movs	r0, #100	; 0x64
 80042d4:	fb00 f303 	mul.w	r3, r0, r3
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	011b      	lsls	r3, r3, #4
 80042dc:	3332      	adds	r3, #50	; 0x32
 80042de:	4a08      	ldr	r2, [pc, #32]	; (8004300 <UART_SetConfig+0x1c4>)
 80042e0:	fba2 2303 	umull	r2, r3, r2, r3
 80042e4:	095b      	lsrs	r3, r3, #5
 80042e6:	f003 020f 	and.w	r2, r3, #15
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	440a      	add	r2, r1
 80042f0:	609a      	str	r2, [r3, #8]
}
 80042f2:	bf00      	nop
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	40013800 	.word	0x40013800
 8004300:	51eb851f 	.word	0x51eb851f

08004304 <__errno>:
 8004304:	4b01      	ldr	r3, [pc, #4]	; (800430c <__errno+0x8>)
 8004306:	6818      	ldr	r0, [r3, #0]
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	2000000c 	.word	0x2000000c

08004310 <__libc_init_array>:
 8004310:	b570      	push	{r4, r5, r6, lr}
 8004312:	2500      	movs	r5, #0
 8004314:	4e0c      	ldr	r6, [pc, #48]	; (8004348 <__libc_init_array+0x38>)
 8004316:	4c0d      	ldr	r4, [pc, #52]	; (800434c <__libc_init_array+0x3c>)
 8004318:	1ba4      	subs	r4, r4, r6
 800431a:	10a4      	asrs	r4, r4, #2
 800431c:	42a5      	cmp	r5, r4
 800431e:	d109      	bne.n	8004334 <__libc_init_array+0x24>
 8004320:	f000 ff74 	bl	800520c <_init>
 8004324:	2500      	movs	r5, #0
 8004326:	4e0a      	ldr	r6, [pc, #40]	; (8004350 <__libc_init_array+0x40>)
 8004328:	4c0a      	ldr	r4, [pc, #40]	; (8004354 <__libc_init_array+0x44>)
 800432a:	1ba4      	subs	r4, r4, r6
 800432c:	10a4      	asrs	r4, r4, #2
 800432e:	42a5      	cmp	r5, r4
 8004330:	d105      	bne.n	800433e <__libc_init_array+0x2e>
 8004332:	bd70      	pop	{r4, r5, r6, pc}
 8004334:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004338:	4798      	blx	r3
 800433a:	3501      	adds	r5, #1
 800433c:	e7ee      	b.n	800431c <__libc_init_array+0xc>
 800433e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004342:	4798      	blx	r3
 8004344:	3501      	adds	r5, #1
 8004346:	e7f2      	b.n	800432e <__libc_init_array+0x1e>
 8004348:	080058c8 	.word	0x080058c8
 800434c:	080058c8 	.word	0x080058c8
 8004350:	080058c8 	.word	0x080058c8
 8004354:	080058cc 	.word	0x080058cc

08004358 <memset>:
 8004358:	4603      	mov	r3, r0
 800435a:	4402      	add	r2, r0
 800435c:	4293      	cmp	r3, r2
 800435e:	d100      	bne.n	8004362 <memset+0xa>
 8004360:	4770      	bx	lr
 8004362:	f803 1b01 	strb.w	r1, [r3], #1
 8004366:	e7f9      	b.n	800435c <memset+0x4>

08004368 <iprintf>:
 8004368:	b40f      	push	{r0, r1, r2, r3}
 800436a:	4b0a      	ldr	r3, [pc, #40]	; (8004394 <iprintf+0x2c>)
 800436c:	b513      	push	{r0, r1, r4, lr}
 800436e:	681c      	ldr	r4, [r3, #0]
 8004370:	b124      	cbz	r4, 800437c <iprintf+0x14>
 8004372:	69a3      	ldr	r3, [r4, #24]
 8004374:	b913      	cbnz	r3, 800437c <iprintf+0x14>
 8004376:	4620      	mov	r0, r4
 8004378:	f000 fa22 	bl	80047c0 <__sinit>
 800437c:	ab05      	add	r3, sp, #20
 800437e:	9a04      	ldr	r2, [sp, #16]
 8004380:	68a1      	ldr	r1, [r4, #8]
 8004382:	4620      	mov	r0, r4
 8004384:	9301      	str	r3, [sp, #4]
 8004386:	f000 fbd7 	bl	8004b38 <_vfiprintf_r>
 800438a:	b002      	add	sp, #8
 800438c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004390:	b004      	add	sp, #16
 8004392:	4770      	bx	lr
 8004394:	2000000c 	.word	0x2000000c

08004398 <_puts_r>:
 8004398:	b570      	push	{r4, r5, r6, lr}
 800439a:	460e      	mov	r6, r1
 800439c:	4605      	mov	r5, r0
 800439e:	b118      	cbz	r0, 80043a8 <_puts_r+0x10>
 80043a0:	6983      	ldr	r3, [r0, #24]
 80043a2:	b90b      	cbnz	r3, 80043a8 <_puts_r+0x10>
 80043a4:	f000 fa0c 	bl	80047c0 <__sinit>
 80043a8:	69ab      	ldr	r3, [r5, #24]
 80043aa:	68ac      	ldr	r4, [r5, #8]
 80043ac:	b913      	cbnz	r3, 80043b4 <_puts_r+0x1c>
 80043ae:	4628      	mov	r0, r5
 80043b0:	f000 fa06 	bl	80047c0 <__sinit>
 80043b4:	4b23      	ldr	r3, [pc, #140]	; (8004444 <_puts_r+0xac>)
 80043b6:	429c      	cmp	r4, r3
 80043b8:	d117      	bne.n	80043ea <_puts_r+0x52>
 80043ba:	686c      	ldr	r4, [r5, #4]
 80043bc:	89a3      	ldrh	r3, [r4, #12]
 80043be:	071b      	lsls	r3, r3, #28
 80043c0:	d51d      	bpl.n	80043fe <_puts_r+0x66>
 80043c2:	6923      	ldr	r3, [r4, #16]
 80043c4:	b1db      	cbz	r3, 80043fe <_puts_r+0x66>
 80043c6:	3e01      	subs	r6, #1
 80043c8:	68a3      	ldr	r3, [r4, #8]
 80043ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80043ce:	3b01      	subs	r3, #1
 80043d0:	60a3      	str	r3, [r4, #8]
 80043d2:	b9e9      	cbnz	r1, 8004410 <_puts_r+0x78>
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	da2e      	bge.n	8004436 <_puts_r+0x9e>
 80043d8:	4622      	mov	r2, r4
 80043da:	210a      	movs	r1, #10
 80043dc:	4628      	mov	r0, r5
 80043de:	f000 f83f 	bl	8004460 <__swbuf_r>
 80043e2:	3001      	adds	r0, #1
 80043e4:	d011      	beq.n	800440a <_puts_r+0x72>
 80043e6:	200a      	movs	r0, #10
 80043e8:	e011      	b.n	800440e <_puts_r+0x76>
 80043ea:	4b17      	ldr	r3, [pc, #92]	; (8004448 <_puts_r+0xb0>)
 80043ec:	429c      	cmp	r4, r3
 80043ee:	d101      	bne.n	80043f4 <_puts_r+0x5c>
 80043f0:	68ac      	ldr	r4, [r5, #8]
 80043f2:	e7e3      	b.n	80043bc <_puts_r+0x24>
 80043f4:	4b15      	ldr	r3, [pc, #84]	; (800444c <_puts_r+0xb4>)
 80043f6:	429c      	cmp	r4, r3
 80043f8:	bf08      	it	eq
 80043fa:	68ec      	ldreq	r4, [r5, #12]
 80043fc:	e7de      	b.n	80043bc <_puts_r+0x24>
 80043fe:	4621      	mov	r1, r4
 8004400:	4628      	mov	r0, r5
 8004402:	f000 f87f 	bl	8004504 <__swsetup_r>
 8004406:	2800      	cmp	r0, #0
 8004408:	d0dd      	beq.n	80043c6 <_puts_r+0x2e>
 800440a:	f04f 30ff 	mov.w	r0, #4294967295
 800440e:	bd70      	pop	{r4, r5, r6, pc}
 8004410:	2b00      	cmp	r3, #0
 8004412:	da04      	bge.n	800441e <_puts_r+0x86>
 8004414:	69a2      	ldr	r2, [r4, #24]
 8004416:	429a      	cmp	r2, r3
 8004418:	dc06      	bgt.n	8004428 <_puts_r+0x90>
 800441a:	290a      	cmp	r1, #10
 800441c:	d004      	beq.n	8004428 <_puts_r+0x90>
 800441e:	6823      	ldr	r3, [r4, #0]
 8004420:	1c5a      	adds	r2, r3, #1
 8004422:	6022      	str	r2, [r4, #0]
 8004424:	7019      	strb	r1, [r3, #0]
 8004426:	e7cf      	b.n	80043c8 <_puts_r+0x30>
 8004428:	4622      	mov	r2, r4
 800442a:	4628      	mov	r0, r5
 800442c:	f000 f818 	bl	8004460 <__swbuf_r>
 8004430:	3001      	adds	r0, #1
 8004432:	d1c9      	bne.n	80043c8 <_puts_r+0x30>
 8004434:	e7e9      	b.n	800440a <_puts_r+0x72>
 8004436:	200a      	movs	r0, #10
 8004438:	6823      	ldr	r3, [r4, #0]
 800443a:	1c5a      	adds	r2, r3, #1
 800443c:	6022      	str	r2, [r4, #0]
 800443e:	7018      	strb	r0, [r3, #0]
 8004440:	e7e5      	b.n	800440e <_puts_r+0x76>
 8004442:	bf00      	nop
 8004444:	0800584c 	.word	0x0800584c
 8004448:	0800586c 	.word	0x0800586c
 800444c:	0800582c 	.word	0x0800582c

08004450 <puts>:
 8004450:	4b02      	ldr	r3, [pc, #8]	; (800445c <puts+0xc>)
 8004452:	4601      	mov	r1, r0
 8004454:	6818      	ldr	r0, [r3, #0]
 8004456:	f7ff bf9f 	b.w	8004398 <_puts_r>
 800445a:	bf00      	nop
 800445c:	2000000c 	.word	0x2000000c

08004460 <__swbuf_r>:
 8004460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004462:	460e      	mov	r6, r1
 8004464:	4614      	mov	r4, r2
 8004466:	4605      	mov	r5, r0
 8004468:	b118      	cbz	r0, 8004472 <__swbuf_r+0x12>
 800446a:	6983      	ldr	r3, [r0, #24]
 800446c:	b90b      	cbnz	r3, 8004472 <__swbuf_r+0x12>
 800446e:	f000 f9a7 	bl	80047c0 <__sinit>
 8004472:	4b21      	ldr	r3, [pc, #132]	; (80044f8 <__swbuf_r+0x98>)
 8004474:	429c      	cmp	r4, r3
 8004476:	d12a      	bne.n	80044ce <__swbuf_r+0x6e>
 8004478:	686c      	ldr	r4, [r5, #4]
 800447a:	69a3      	ldr	r3, [r4, #24]
 800447c:	60a3      	str	r3, [r4, #8]
 800447e:	89a3      	ldrh	r3, [r4, #12]
 8004480:	071a      	lsls	r2, r3, #28
 8004482:	d52e      	bpl.n	80044e2 <__swbuf_r+0x82>
 8004484:	6923      	ldr	r3, [r4, #16]
 8004486:	b363      	cbz	r3, 80044e2 <__swbuf_r+0x82>
 8004488:	6923      	ldr	r3, [r4, #16]
 800448a:	6820      	ldr	r0, [r4, #0]
 800448c:	b2f6      	uxtb	r6, r6
 800448e:	1ac0      	subs	r0, r0, r3
 8004490:	6963      	ldr	r3, [r4, #20]
 8004492:	4637      	mov	r7, r6
 8004494:	4283      	cmp	r3, r0
 8004496:	dc04      	bgt.n	80044a2 <__swbuf_r+0x42>
 8004498:	4621      	mov	r1, r4
 800449a:	4628      	mov	r0, r5
 800449c:	f000 f926 	bl	80046ec <_fflush_r>
 80044a0:	bb28      	cbnz	r0, 80044ee <__swbuf_r+0x8e>
 80044a2:	68a3      	ldr	r3, [r4, #8]
 80044a4:	3001      	adds	r0, #1
 80044a6:	3b01      	subs	r3, #1
 80044a8:	60a3      	str	r3, [r4, #8]
 80044aa:	6823      	ldr	r3, [r4, #0]
 80044ac:	1c5a      	adds	r2, r3, #1
 80044ae:	6022      	str	r2, [r4, #0]
 80044b0:	701e      	strb	r6, [r3, #0]
 80044b2:	6963      	ldr	r3, [r4, #20]
 80044b4:	4283      	cmp	r3, r0
 80044b6:	d004      	beq.n	80044c2 <__swbuf_r+0x62>
 80044b8:	89a3      	ldrh	r3, [r4, #12]
 80044ba:	07db      	lsls	r3, r3, #31
 80044bc:	d519      	bpl.n	80044f2 <__swbuf_r+0x92>
 80044be:	2e0a      	cmp	r6, #10
 80044c0:	d117      	bne.n	80044f2 <__swbuf_r+0x92>
 80044c2:	4621      	mov	r1, r4
 80044c4:	4628      	mov	r0, r5
 80044c6:	f000 f911 	bl	80046ec <_fflush_r>
 80044ca:	b190      	cbz	r0, 80044f2 <__swbuf_r+0x92>
 80044cc:	e00f      	b.n	80044ee <__swbuf_r+0x8e>
 80044ce:	4b0b      	ldr	r3, [pc, #44]	; (80044fc <__swbuf_r+0x9c>)
 80044d0:	429c      	cmp	r4, r3
 80044d2:	d101      	bne.n	80044d8 <__swbuf_r+0x78>
 80044d4:	68ac      	ldr	r4, [r5, #8]
 80044d6:	e7d0      	b.n	800447a <__swbuf_r+0x1a>
 80044d8:	4b09      	ldr	r3, [pc, #36]	; (8004500 <__swbuf_r+0xa0>)
 80044da:	429c      	cmp	r4, r3
 80044dc:	bf08      	it	eq
 80044de:	68ec      	ldreq	r4, [r5, #12]
 80044e0:	e7cb      	b.n	800447a <__swbuf_r+0x1a>
 80044e2:	4621      	mov	r1, r4
 80044e4:	4628      	mov	r0, r5
 80044e6:	f000 f80d 	bl	8004504 <__swsetup_r>
 80044ea:	2800      	cmp	r0, #0
 80044ec:	d0cc      	beq.n	8004488 <__swbuf_r+0x28>
 80044ee:	f04f 37ff 	mov.w	r7, #4294967295
 80044f2:	4638      	mov	r0, r7
 80044f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044f6:	bf00      	nop
 80044f8:	0800584c 	.word	0x0800584c
 80044fc:	0800586c 	.word	0x0800586c
 8004500:	0800582c 	.word	0x0800582c

08004504 <__swsetup_r>:
 8004504:	4b32      	ldr	r3, [pc, #200]	; (80045d0 <__swsetup_r+0xcc>)
 8004506:	b570      	push	{r4, r5, r6, lr}
 8004508:	681d      	ldr	r5, [r3, #0]
 800450a:	4606      	mov	r6, r0
 800450c:	460c      	mov	r4, r1
 800450e:	b125      	cbz	r5, 800451a <__swsetup_r+0x16>
 8004510:	69ab      	ldr	r3, [r5, #24]
 8004512:	b913      	cbnz	r3, 800451a <__swsetup_r+0x16>
 8004514:	4628      	mov	r0, r5
 8004516:	f000 f953 	bl	80047c0 <__sinit>
 800451a:	4b2e      	ldr	r3, [pc, #184]	; (80045d4 <__swsetup_r+0xd0>)
 800451c:	429c      	cmp	r4, r3
 800451e:	d10f      	bne.n	8004540 <__swsetup_r+0x3c>
 8004520:	686c      	ldr	r4, [r5, #4]
 8004522:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004526:	b29a      	uxth	r2, r3
 8004528:	0715      	lsls	r5, r2, #28
 800452a:	d42c      	bmi.n	8004586 <__swsetup_r+0x82>
 800452c:	06d0      	lsls	r0, r2, #27
 800452e:	d411      	bmi.n	8004554 <__swsetup_r+0x50>
 8004530:	2209      	movs	r2, #9
 8004532:	6032      	str	r2, [r6, #0]
 8004534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004538:	81a3      	strh	r3, [r4, #12]
 800453a:	f04f 30ff 	mov.w	r0, #4294967295
 800453e:	e03e      	b.n	80045be <__swsetup_r+0xba>
 8004540:	4b25      	ldr	r3, [pc, #148]	; (80045d8 <__swsetup_r+0xd4>)
 8004542:	429c      	cmp	r4, r3
 8004544:	d101      	bne.n	800454a <__swsetup_r+0x46>
 8004546:	68ac      	ldr	r4, [r5, #8]
 8004548:	e7eb      	b.n	8004522 <__swsetup_r+0x1e>
 800454a:	4b24      	ldr	r3, [pc, #144]	; (80045dc <__swsetup_r+0xd8>)
 800454c:	429c      	cmp	r4, r3
 800454e:	bf08      	it	eq
 8004550:	68ec      	ldreq	r4, [r5, #12]
 8004552:	e7e6      	b.n	8004522 <__swsetup_r+0x1e>
 8004554:	0751      	lsls	r1, r2, #29
 8004556:	d512      	bpl.n	800457e <__swsetup_r+0x7a>
 8004558:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800455a:	b141      	cbz	r1, 800456e <__swsetup_r+0x6a>
 800455c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004560:	4299      	cmp	r1, r3
 8004562:	d002      	beq.n	800456a <__swsetup_r+0x66>
 8004564:	4630      	mov	r0, r6
 8004566:	f000 fa19 	bl	800499c <_free_r>
 800456a:	2300      	movs	r3, #0
 800456c:	6363      	str	r3, [r4, #52]	; 0x34
 800456e:	89a3      	ldrh	r3, [r4, #12]
 8004570:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004574:	81a3      	strh	r3, [r4, #12]
 8004576:	2300      	movs	r3, #0
 8004578:	6063      	str	r3, [r4, #4]
 800457a:	6923      	ldr	r3, [r4, #16]
 800457c:	6023      	str	r3, [r4, #0]
 800457e:	89a3      	ldrh	r3, [r4, #12]
 8004580:	f043 0308 	orr.w	r3, r3, #8
 8004584:	81a3      	strh	r3, [r4, #12]
 8004586:	6923      	ldr	r3, [r4, #16]
 8004588:	b94b      	cbnz	r3, 800459e <__swsetup_r+0x9a>
 800458a:	89a3      	ldrh	r3, [r4, #12]
 800458c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004594:	d003      	beq.n	800459e <__swsetup_r+0x9a>
 8004596:	4621      	mov	r1, r4
 8004598:	4630      	mov	r0, r6
 800459a:	f000 f9bf 	bl	800491c <__smakebuf_r>
 800459e:	89a2      	ldrh	r2, [r4, #12]
 80045a0:	f012 0301 	ands.w	r3, r2, #1
 80045a4:	d00c      	beq.n	80045c0 <__swsetup_r+0xbc>
 80045a6:	2300      	movs	r3, #0
 80045a8:	60a3      	str	r3, [r4, #8]
 80045aa:	6963      	ldr	r3, [r4, #20]
 80045ac:	425b      	negs	r3, r3
 80045ae:	61a3      	str	r3, [r4, #24]
 80045b0:	6923      	ldr	r3, [r4, #16]
 80045b2:	b953      	cbnz	r3, 80045ca <__swsetup_r+0xc6>
 80045b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045b8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80045bc:	d1ba      	bne.n	8004534 <__swsetup_r+0x30>
 80045be:	bd70      	pop	{r4, r5, r6, pc}
 80045c0:	0792      	lsls	r2, r2, #30
 80045c2:	bf58      	it	pl
 80045c4:	6963      	ldrpl	r3, [r4, #20]
 80045c6:	60a3      	str	r3, [r4, #8]
 80045c8:	e7f2      	b.n	80045b0 <__swsetup_r+0xac>
 80045ca:	2000      	movs	r0, #0
 80045cc:	e7f7      	b.n	80045be <__swsetup_r+0xba>
 80045ce:	bf00      	nop
 80045d0:	2000000c 	.word	0x2000000c
 80045d4:	0800584c 	.word	0x0800584c
 80045d8:	0800586c 	.word	0x0800586c
 80045dc:	0800582c 	.word	0x0800582c

080045e0 <__sflush_r>:
 80045e0:	898a      	ldrh	r2, [r1, #12]
 80045e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045e6:	4605      	mov	r5, r0
 80045e8:	0710      	lsls	r0, r2, #28
 80045ea:	460c      	mov	r4, r1
 80045ec:	d458      	bmi.n	80046a0 <__sflush_r+0xc0>
 80045ee:	684b      	ldr	r3, [r1, #4]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	dc05      	bgt.n	8004600 <__sflush_r+0x20>
 80045f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	dc02      	bgt.n	8004600 <__sflush_r+0x20>
 80045fa:	2000      	movs	r0, #0
 80045fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004600:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004602:	2e00      	cmp	r6, #0
 8004604:	d0f9      	beq.n	80045fa <__sflush_r+0x1a>
 8004606:	2300      	movs	r3, #0
 8004608:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800460c:	682f      	ldr	r7, [r5, #0]
 800460e:	6a21      	ldr	r1, [r4, #32]
 8004610:	602b      	str	r3, [r5, #0]
 8004612:	d032      	beq.n	800467a <__sflush_r+0x9a>
 8004614:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004616:	89a3      	ldrh	r3, [r4, #12]
 8004618:	075a      	lsls	r2, r3, #29
 800461a:	d505      	bpl.n	8004628 <__sflush_r+0x48>
 800461c:	6863      	ldr	r3, [r4, #4]
 800461e:	1ac0      	subs	r0, r0, r3
 8004620:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004622:	b10b      	cbz	r3, 8004628 <__sflush_r+0x48>
 8004624:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004626:	1ac0      	subs	r0, r0, r3
 8004628:	2300      	movs	r3, #0
 800462a:	4602      	mov	r2, r0
 800462c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800462e:	6a21      	ldr	r1, [r4, #32]
 8004630:	4628      	mov	r0, r5
 8004632:	47b0      	blx	r6
 8004634:	1c43      	adds	r3, r0, #1
 8004636:	89a3      	ldrh	r3, [r4, #12]
 8004638:	d106      	bne.n	8004648 <__sflush_r+0x68>
 800463a:	6829      	ldr	r1, [r5, #0]
 800463c:	291d      	cmp	r1, #29
 800463e:	d848      	bhi.n	80046d2 <__sflush_r+0xf2>
 8004640:	4a29      	ldr	r2, [pc, #164]	; (80046e8 <__sflush_r+0x108>)
 8004642:	40ca      	lsrs	r2, r1
 8004644:	07d6      	lsls	r6, r2, #31
 8004646:	d544      	bpl.n	80046d2 <__sflush_r+0xf2>
 8004648:	2200      	movs	r2, #0
 800464a:	6062      	str	r2, [r4, #4]
 800464c:	6922      	ldr	r2, [r4, #16]
 800464e:	04d9      	lsls	r1, r3, #19
 8004650:	6022      	str	r2, [r4, #0]
 8004652:	d504      	bpl.n	800465e <__sflush_r+0x7e>
 8004654:	1c42      	adds	r2, r0, #1
 8004656:	d101      	bne.n	800465c <__sflush_r+0x7c>
 8004658:	682b      	ldr	r3, [r5, #0]
 800465a:	b903      	cbnz	r3, 800465e <__sflush_r+0x7e>
 800465c:	6560      	str	r0, [r4, #84]	; 0x54
 800465e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004660:	602f      	str	r7, [r5, #0]
 8004662:	2900      	cmp	r1, #0
 8004664:	d0c9      	beq.n	80045fa <__sflush_r+0x1a>
 8004666:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800466a:	4299      	cmp	r1, r3
 800466c:	d002      	beq.n	8004674 <__sflush_r+0x94>
 800466e:	4628      	mov	r0, r5
 8004670:	f000 f994 	bl	800499c <_free_r>
 8004674:	2000      	movs	r0, #0
 8004676:	6360      	str	r0, [r4, #52]	; 0x34
 8004678:	e7c0      	b.n	80045fc <__sflush_r+0x1c>
 800467a:	2301      	movs	r3, #1
 800467c:	4628      	mov	r0, r5
 800467e:	47b0      	blx	r6
 8004680:	1c41      	adds	r1, r0, #1
 8004682:	d1c8      	bne.n	8004616 <__sflush_r+0x36>
 8004684:	682b      	ldr	r3, [r5, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d0c5      	beq.n	8004616 <__sflush_r+0x36>
 800468a:	2b1d      	cmp	r3, #29
 800468c:	d001      	beq.n	8004692 <__sflush_r+0xb2>
 800468e:	2b16      	cmp	r3, #22
 8004690:	d101      	bne.n	8004696 <__sflush_r+0xb6>
 8004692:	602f      	str	r7, [r5, #0]
 8004694:	e7b1      	b.n	80045fa <__sflush_r+0x1a>
 8004696:	89a3      	ldrh	r3, [r4, #12]
 8004698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800469c:	81a3      	strh	r3, [r4, #12]
 800469e:	e7ad      	b.n	80045fc <__sflush_r+0x1c>
 80046a0:	690f      	ldr	r7, [r1, #16]
 80046a2:	2f00      	cmp	r7, #0
 80046a4:	d0a9      	beq.n	80045fa <__sflush_r+0x1a>
 80046a6:	0793      	lsls	r3, r2, #30
 80046a8:	bf18      	it	ne
 80046aa:	2300      	movne	r3, #0
 80046ac:	680e      	ldr	r6, [r1, #0]
 80046ae:	bf08      	it	eq
 80046b0:	694b      	ldreq	r3, [r1, #20]
 80046b2:	eba6 0807 	sub.w	r8, r6, r7
 80046b6:	600f      	str	r7, [r1, #0]
 80046b8:	608b      	str	r3, [r1, #8]
 80046ba:	f1b8 0f00 	cmp.w	r8, #0
 80046be:	dd9c      	ble.n	80045fa <__sflush_r+0x1a>
 80046c0:	4643      	mov	r3, r8
 80046c2:	463a      	mov	r2, r7
 80046c4:	6a21      	ldr	r1, [r4, #32]
 80046c6:	4628      	mov	r0, r5
 80046c8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80046ca:	47b0      	blx	r6
 80046cc:	2800      	cmp	r0, #0
 80046ce:	dc06      	bgt.n	80046de <__sflush_r+0xfe>
 80046d0:	89a3      	ldrh	r3, [r4, #12]
 80046d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046d6:	81a3      	strh	r3, [r4, #12]
 80046d8:	f04f 30ff 	mov.w	r0, #4294967295
 80046dc:	e78e      	b.n	80045fc <__sflush_r+0x1c>
 80046de:	4407      	add	r7, r0
 80046e0:	eba8 0800 	sub.w	r8, r8, r0
 80046e4:	e7e9      	b.n	80046ba <__sflush_r+0xda>
 80046e6:	bf00      	nop
 80046e8:	20400001 	.word	0x20400001

080046ec <_fflush_r>:
 80046ec:	b538      	push	{r3, r4, r5, lr}
 80046ee:	690b      	ldr	r3, [r1, #16]
 80046f0:	4605      	mov	r5, r0
 80046f2:	460c      	mov	r4, r1
 80046f4:	b1db      	cbz	r3, 800472e <_fflush_r+0x42>
 80046f6:	b118      	cbz	r0, 8004700 <_fflush_r+0x14>
 80046f8:	6983      	ldr	r3, [r0, #24]
 80046fa:	b90b      	cbnz	r3, 8004700 <_fflush_r+0x14>
 80046fc:	f000 f860 	bl	80047c0 <__sinit>
 8004700:	4b0c      	ldr	r3, [pc, #48]	; (8004734 <_fflush_r+0x48>)
 8004702:	429c      	cmp	r4, r3
 8004704:	d109      	bne.n	800471a <_fflush_r+0x2e>
 8004706:	686c      	ldr	r4, [r5, #4]
 8004708:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800470c:	b17b      	cbz	r3, 800472e <_fflush_r+0x42>
 800470e:	4621      	mov	r1, r4
 8004710:	4628      	mov	r0, r5
 8004712:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004716:	f7ff bf63 	b.w	80045e0 <__sflush_r>
 800471a:	4b07      	ldr	r3, [pc, #28]	; (8004738 <_fflush_r+0x4c>)
 800471c:	429c      	cmp	r4, r3
 800471e:	d101      	bne.n	8004724 <_fflush_r+0x38>
 8004720:	68ac      	ldr	r4, [r5, #8]
 8004722:	e7f1      	b.n	8004708 <_fflush_r+0x1c>
 8004724:	4b05      	ldr	r3, [pc, #20]	; (800473c <_fflush_r+0x50>)
 8004726:	429c      	cmp	r4, r3
 8004728:	bf08      	it	eq
 800472a:	68ec      	ldreq	r4, [r5, #12]
 800472c:	e7ec      	b.n	8004708 <_fflush_r+0x1c>
 800472e:	2000      	movs	r0, #0
 8004730:	bd38      	pop	{r3, r4, r5, pc}
 8004732:	bf00      	nop
 8004734:	0800584c 	.word	0x0800584c
 8004738:	0800586c 	.word	0x0800586c
 800473c:	0800582c 	.word	0x0800582c

08004740 <std>:
 8004740:	2300      	movs	r3, #0
 8004742:	b510      	push	{r4, lr}
 8004744:	4604      	mov	r4, r0
 8004746:	e9c0 3300 	strd	r3, r3, [r0]
 800474a:	6083      	str	r3, [r0, #8]
 800474c:	8181      	strh	r1, [r0, #12]
 800474e:	6643      	str	r3, [r0, #100]	; 0x64
 8004750:	81c2      	strh	r2, [r0, #14]
 8004752:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004756:	6183      	str	r3, [r0, #24]
 8004758:	4619      	mov	r1, r3
 800475a:	2208      	movs	r2, #8
 800475c:	305c      	adds	r0, #92	; 0x5c
 800475e:	f7ff fdfb 	bl	8004358 <memset>
 8004762:	4b05      	ldr	r3, [pc, #20]	; (8004778 <std+0x38>)
 8004764:	6224      	str	r4, [r4, #32]
 8004766:	6263      	str	r3, [r4, #36]	; 0x24
 8004768:	4b04      	ldr	r3, [pc, #16]	; (800477c <std+0x3c>)
 800476a:	62a3      	str	r3, [r4, #40]	; 0x28
 800476c:	4b04      	ldr	r3, [pc, #16]	; (8004780 <std+0x40>)
 800476e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004770:	4b04      	ldr	r3, [pc, #16]	; (8004784 <std+0x44>)
 8004772:	6323      	str	r3, [r4, #48]	; 0x30
 8004774:	bd10      	pop	{r4, pc}
 8004776:	bf00      	nop
 8004778:	08005095 	.word	0x08005095
 800477c:	080050b7 	.word	0x080050b7
 8004780:	080050ef 	.word	0x080050ef
 8004784:	08005113 	.word	0x08005113

08004788 <_cleanup_r>:
 8004788:	4901      	ldr	r1, [pc, #4]	; (8004790 <_cleanup_r+0x8>)
 800478a:	f000 b885 	b.w	8004898 <_fwalk_reent>
 800478e:	bf00      	nop
 8004790:	080046ed 	.word	0x080046ed

08004794 <__sfmoreglue>:
 8004794:	b570      	push	{r4, r5, r6, lr}
 8004796:	2568      	movs	r5, #104	; 0x68
 8004798:	1e4a      	subs	r2, r1, #1
 800479a:	4355      	muls	r5, r2
 800479c:	460e      	mov	r6, r1
 800479e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80047a2:	f000 f947 	bl	8004a34 <_malloc_r>
 80047a6:	4604      	mov	r4, r0
 80047a8:	b140      	cbz	r0, 80047bc <__sfmoreglue+0x28>
 80047aa:	2100      	movs	r1, #0
 80047ac:	e9c0 1600 	strd	r1, r6, [r0]
 80047b0:	300c      	adds	r0, #12
 80047b2:	60a0      	str	r0, [r4, #8]
 80047b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80047b8:	f7ff fdce 	bl	8004358 <memset>
 80047bc:	4620      	mov	r0, r4
 80047be:	bd70      	pop	{r4, r5, r6, pc}

080047c0 <__sinit>:
 80047c0:	6983      	ldr	r3, [r0, #24]
 80047c2:	b510      	push	{r4, lr}
 80047c4:	4604      	mov	r4, r0
 80047c6:	bb33      	cbnz	r3, 8004816 <__sinit+0x56>
 80047c8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80047cc:	6503      	str	r3, [r0, #80]	; 0x50
 80047ce:	4b12      	ldr	r3, [pc, #72]	; (8004818 <__sinit+0x58>)
 80047d0:	4a12      	ldr	r2, [pc, #72]	; (800481c <__sinit+0x5c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	6282      	str	r2, [r0, #40]	; 0x28
 80047d6:	4298      	cmp	r0, r3
 80047d8:	bf04      	itt	eq
 80047da:	2301      	moveq	r3, #1
 80047dc:	6183      	streq	r3, [r0, #24]
 80047de:	f000 f81f 	bl	8004820 <__sfp>
 80047e2:	6060      	str	r0, [r4, #4]
 80047e4:	4620      	mov	r0, r4
 80047e6:	f000 f81b 	bl	8004820 <__sfp>
 80047ea:	60a0      	str	r0, [r4, #8]
 80047ec:	4620      	mov	r0, r4
 80047ee:	f000 f817 	bl	8004820 <__sfp>
 80047f2:	2200      	movs	r2, #0
 80047f4:	60e0      	str	r0, [r4, #12]
 80047f6:	2104      	movs	r1, #4
 80047f8:	6860      	ldr	r0, [r4, #4]
 80047fa:	f7ff ffa1 	bl	8004740 <std>
 80047fe:	2201      	movs	r2, #1
 8004800:	2109      	movs	r1, #9
 8004802:	68a0      	ldr	r0, [r4, #8]
 8004804:	f7ff ff9c 	bl	8004740 <std>
 8004808:	2202      	movs	r2, #2
 800480a:	2112      	movs	r1, #18
 800480c:	68e0      	ldr	r0, [r4, #12]
 800480e:	f7ff ff97 	bl	8004740 <std>
 8004812:	2301      	movs	r3, #1
 8004814:	61a3      	str	r3, [r4, #24]
 8004816:	bd10      	pop	{r4, pc}
 8004818:	08005828 	.word	0x08005828
 800481c:	08004789 	.word	0x08004789

08004820 <__sfp>:
 8004820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004822:	4b1b      	ldr	r3, [pc, #108]	; (8004890 <__sfp+0x70>)
 8004824:	4607      	mov	r7, r0
 8004826:	681e      	ldr	r6, [r3, #0]
 8004828:	69b3      	ldr	r3, [r6, #24]
 800482a:	b913      	cbnz	r3, 8004832 <__sfp+0x12>
 800482c:	4630      	mov	r0, r6
 800482e:	f7ff ffc7 	bl	80047c0 <__sinit>
 8004832:	3648      	adds	r6, #72	; 0x48
 8004834:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004838:	3b01      	subs	r3, #1
 800483a:	d503      	bpl.n	8004844 <__sfp+0x24>
 800483c:	6833      	ldr	r3, [r6, #0]
 800483e:	b133      	cbz	r3, 800484e <__sfp+0x2e>
 8004840:	6836      	ldr	r6, [r6, #0]
 8004842:	e7f7      	b.n	8004834 <__sfp+0x14>
 8004844:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004848:	b16d      	cbz	r5, 8004866 <__sfp+0x46>
 800484a:	3468      	adds	r4, #104	; 0x68
 800484c:	e7f4      	b.n	8004838 <__sfp+0x18>
 800484e:	2104      	movs	r1, #4
 8004850:	4638      	mov	r0, r7
 8004852:	f7ff ff9f 	bl	8004794 <__sfmoreglue>
 8004856:	6030      	str	r0, [r6, #0]
 8004858:	2800      	cmp	r0, #0
 800485a:	d1f1      	bne.n	8004840 <__sfp+0x20>
 800485c:	230c      	movs	r3, #12
 800485e:	4604      	mov	r4, r0
 8004860:	603b      	str	r3, [r7, #0]
 8004862:	4620      	mov	r0, r4
 8004864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004866:	4b0b      	ldr	r3, [pc, #44]	; (8004894 <__sfp+0x74>)
 8004868:	6665      	str	r5, [r4, #100]	; 0x64
 800486a:	e9c4 5500 	strd	r5, r5, [r4]
 800486e:	60a5      	str	r5, [r4, #8]
 8004870:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004874:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004878:	2208      	movs	r2, #8
 800487a:	4629      	mov	r1, r5
 800487c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004880:	f7ff fd6a 	bl	8004358 <memset>
 8004884:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004888:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800488c:	e7e9      	b.n	8004862 <__sfp+0x42>
 800488e:	bf00      	nop
 8004890:	08005828 	.word	0x08005828
 8004894:	ffff0001 	.word	0xffff0001

08004898 <_fwalk_reent>:
 8004898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800489c:	4680      	mov	r8, r0
 800489e:	4689      	mov	r9, r1
 80048a0:	2600      	movs	r6, #0
 80048a2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80048a6:	b914      	cbnz	r4, 80048ae <_fwalk_reent+0x16>
 80048a8:	4630      	mov	r0, r6
 80048aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048ae:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80048b2:	3f01      	subs	r7, #1
 80048b4:	d501      	bpl.n	80048ba <_fwalk_reent+0x22>
 80048b6:	6824      	ldr	r4, [r4, #0]
 80048b8:	e7f5      	b.n	80048a6 <_fwalk_reent+0xe>
 80048ba:	89ab      	ldrh	r3, [r5, #12]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d907      	bls.n	80048d0 <_fwalk_reent+0x38>
 80048c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80048c4:	3301      	adds	r3, #1
 80048c6:	d003      	beq.n	80048d0 <_fwalk_reent+0x38>
 80048c8:	4629      	mov	r1, r5
 80048ca:	4640      	mov	r0, r8
 80048cc:	47c8      	blx	r9
 80048ce:	4306      	orrs	r6, r0
 80048d0:	3568      	adds	r5, #104	; 0x68
 80048d2:	e7ee      	b.n	80048b2 <_fwalk_reent+0x1a>

080048d4 <__swhatbuf_r>:
 80048d4:	b570      	push	{r4, r5, r6, lr}
 80048d6:	460e      	mov	r6, r1
 80048d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048dc:	b096      	sub	sp, #88	; 0x58
 80048de:	2900      	cmp	r1, #0
 80048e0:	4614      	mov	r4, r2
 80048e2:	461d      	mov	r5, r3
 80048e4:	da07      	bge.n	80048f6 <__swhatbuf_r+0x22>
 80048e6:	2300      	movs	r3, #0
 80048e8:	602b      	str	r3, [r5, #0]
 80048ea:	89b3      	ldrh	r3, [r6, #12]
 80048ec:	061a      	lsls	r2, r3, #24
 80048ee:	d410      	bmi.n	8004912 <__swhatbuf_r+0x3e>
 80048f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048f4:	e00e      	b.n	8004914 <__swhatbuf_r+0x40>
 80048f6:	466a      	mov	r2, sp
 80048f8:	f000 fc32 	bl	8005160 <_fstat_r>
 80048fc:	2800      	cmp	r0, #0
 80048fe:	dbf2      	blt.n	80048e6 <__swhatbuf_r+0x12>
 8004900:	9a01      	ldr	r2, [sp, #4]
 8004902:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004906:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800490a:	425a      	negs	r2, r3
 800490c:	415a      	adcs	r2, r3
 800490e:	602a      	str	r2, [r5, #0]
 8004910:	e7ee      	b.n	80048f0 <__swhatbuf_r+0x1c>
 8004912:	2340      	movs	r3, #64	; 0x40
 8004914:	2000      	movs	r0, #0
 8004916:	6023      	str	r3, [r4, #0]
 8004918:	b016      	add	sp, #88	; 0x58
 800491a:	bd70      	pop	{r4, r5, r6, pc}

0800491c <__smakebuf_r>:
 800491c:	898b      	ldrh	r3, [r1, #12]
 800491e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004920:	079d      	lsls	r5, r3, #30
 8004922:	4606      	mov	r6, r0
 8004924:	460c      	mov	r4, r1
 8004926:	d507      	bpl.n	8004938 <__smakebuf_r+0x1c>
 8004928:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800492c:	6023      	str	r3, [r4, #0]
 800492e:	6123      	str	r3, [r4, #16]
 8004930:	2301      	movs	r3, #1
 8004932:	6163      	str	r3, [r4, #20]
 8004934:	b002      	add	sp, #8
 8004936:	bd70      	pop	{r4, r5, r6, pc}
 8004938:	ab01      	add	r3, sp, #4
 800493a:	466a      	mov	r2, sp
 800493c:	f7ff ffca 	bl	80048d4 <__swhatbuf_r>
 8004940:	9900      	ldr	r1, [sp, #0]
 8004942:	4605      	mov	r5, r0
 8004944:	4630      	mov	r0, r6
 8004946:	f000 f875 	bl	8004a34 <_malloc_r>
 800494a:	b948      	cbnz	r0, 8004960 <__smakebuf_r+0x44>
 800494c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004950:	059a      	lsls	r2, r3, #22
 8004952:	d4ef      	bmi.n	8004934 <__smakebuf_r+0x18>
 8004954:	f023 0303 	bic.w	r3, r3, #3
 8004958:	f043 0302 	orr.w	r3, r3, #2
 800495c:	81a3      	strh	r3, [r4, #12]
 800495e:	e7e3      	b.n	8004928 <__smakebuf_r+0xc>
 8004960:	4b0d      	ldr	r3, [pc, #52]	; (8004998 <__smakebuf_r+0x7c>)
 8004962:	62b3      	str	r3, [r6, #40]	; 0x28
 8004964:	89a3      	ldrh	r3, [r4, #12]
 8004966:	6020      	str	r0, [r4, #0]
 8004968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800496c:	81a3      	strh	r3, [r4, #12]
 800496e:	9b00      	ldr	r3, [sp, #0]
 8004970:	6120      	str	r0, [r4, #16]
 8004972:	6163      	str	r3, [r4, #20]
 8004974:	9b01      	ldr	r3, [sp, #4]
 8004976:	b15b      	cbz	r3, 8004990 <__smakebuf_r+0x74>
 8004978:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800497c:	4630      	mov	r0, r6
 800497e:	f000 fc01 	bl	8005184 <_isatty_r>
 8004982:	b128      	cbz	r0, 8004990 <__smakebuf_r+0x74>
 8004984:	89a3      	ldrh	r3, [r4, #12]
 8004986:	f023 0303 	bic.w	r3, r3, #3
 800498a:	f043 0301 	orr.w	r3, r3, #1
 800498e:	81a3      	strh	r3, [r4, #12]
 8004990:	89a3      	ldrh	r3, [r4, #12]
 8004992:	431d      	orrs	r5, r3
 8004994:	81a5      	strh	r5, [r4, #12]
 8004996:	e7cd      	b.n	8004934 <__smakebuf_r+0x18>
 8004998:	08004789 	.word	0x08004789

0800499c <_free_r>:
 800499c:	b538      	push	{r3, r4, r5, lr}
 800499e:	4605      	mov	r5, r0
 80049a0:	2900      	cmp	r1, #0
 80049a2:	d043      	beq.n	8004a2c <_free_r+0x90>
 80049a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049a8:	1f0c      	subs	r4, r1, #4
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	bfb8      	it	lt
 80049ae:	18e4      	addlt	r4, r4, r3
 80049b0:	f000 fc18 	bl	80051e4 <__malloc_lock>
 80049b4:	4a1e      	ldr	r2, [pc, #120]	; (8004a30 <_free_r+0x94>)
 80049b6:	6813      	ldr	r3, [r2, #0]
 80049b8:	4610      	mov	r0, r2
 80049ba:	b933      	cbnz	r3, 80049ca <_free_r+0x2e>
 80049bc:	6063      	str	r3, [r4, #4]
 80049be:	6014      	str	r4, [r2, #0]
 80049c0:	4628      	mov	r0, r5
 80049c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049c6:	f000 bc0e 	b.w	80051e6 <__malloc_unlock>
 80049ca:	42a3      	cmp	r3, r4
 80049cc:	d90b      	bls.n	80049e6 <_free_r+0x4a>
 80049ce:	6821      	ldr	r1, [r4, #0]
 80049d0:	1862      	adds	r2, r4, r1
 80049d2:	4293      	cmp	r3, r2
 80049d4:	bf01      	itttt	eq
 80049d6:	681a      	ldreq	r2, [r3, #0]
 80049d8:	685b      	ldreq	r3, [r3, #4]
 80049da:	1852      	addeq	r2, r2, r1
 80049dc:	6022      	streq	r2, [r4, #0]
 80049de:	6063      	str	r3, [r4, #4]
 80049e0:	6004      	str	r4, [r0, #0]
 80049e2:	e7ed      	b.n	80049c0 <_free_r+0x24>
 80049e4:	4613      	mov	r3, r2
 80049e6:	685a      	ldr	r2, [r3, #4]
 80049e8:	b10a      	cbz	r2, 80049ee <_free_r+0x52>
 80049ea:	42a2      	cmp	r2, r4
 80049ec:	d9fa      	bls.n	80049e4 <_free_r+0x48>
 80049ee:	6819      	ldr	r1, [r3, #0]
 80049f0:	1858      	adds	r0, r3, r1
 80049f2:	42a0      	cmp	r0, r4
 80049f4:	d10b      	bne.n	8004a0e <_free_r+0x72>
 80049f6:	6820      	ldr	r0, [r4, #0]
 80049f8:	4401      	add	r1, r0
 80049fa:	1858      	adds	r0, r3, r1
 80049fc:	4282      	cmp	r2, r0
 80049fe:	6019      	str	r1, [r3, #0]
 8004a00:	d1de      	bne.n	80049c0 <_free_r+0x24>
 8004a02:	6810      	ldr	r0, [r2, #0]
 8004a04:	6852      	ldr	r2, [r2, #4]
 8004a06:	4401      	add	r1, r0
 8004a08:	6019      	str	r1, [r3, #0]
 8004a0a:	605a      	str	r2, [r3, #4]
 8004a0c:	e7d8      	b.n	80049c0 <_free_r+0x24>
 8004a0e:	d902      	bls.n	8004a16 <_free_r+0x7a>
 8004a10:	230c      	movs	r3, #12
 8004a12:	602b      	str	r3, [r5, #0]
 8004a14:	e7d4      	b.n	80049c0 <_free_r+0x24>
 8004a16:	6820      	ldr	r0, [r4, #0]
 8004a18:	1821      	adds	r1, r4, r0
 8004a1a:	428a      	cmp	r2, r1
 8004a1c:	bf01      	itttt	eq
 8004a1e:	6811      	ldreq	r1, [r2, #0]
 8004a20:	6852      	ldreq	r2, [r2, #4]
 8004a22:	1809      	addeq	r1, r1, r0
 8004a24:	6021      	streq	r1, [r4, #0]
 8004a26:	6062      	str	r2, [r4, #4]
 8004a28:	605c      	str	r4, [r3, #4]
 8004a2a:	e7c9      	b.n	80049c0 <_free_r+0x24>
 8004a2c:	bd38      	pop	{r3, r4, r5, pc}
 8004a2e:	bf00      	nop
 8004a30:	200008ac 	.word	0x200008ac

08004a34 <_malloc_r>:
 8004a34:	b570      	push	{r4, r5, r6, lr}
 8004a36:	1ccd      	adds	r5, r1, #3
 8004a38:	f025 0503 	bic.w	r5, r5, #3
 8004a3c:	3508      	adds	r5, #8
 8004a3e:	2d0c      	cmp	r5, #12
 8004a40:	bf38      	it	cc
 8004a42:	250c      	movcc	r5, #12
 8004a44:	2d00      	cmp	r5, #0
 8004a46:	4606      	mov	r6, r0
 8004a48:	db01      	blt.n	8004a4e <_malloc_r+0x1a>
 8004a4a:	42a9      	cmp	r1, r5
 8004a4c:	d903      	bls.n	8004a56 <_malloc_r+0x22>
 8004a4e:	230c      	movs	r3, #12
 8004a50:	6033      	str	r3, [r6, #0]
 8004a52:	2000      	movs	r0, #0
 8004a54:	bd70      	pop	{r4, r5, r6, pc}
 8004a56:	f000 fbc5 	bl	80051e4 <__malloc_lock>
 8004a5a:	4a21      	ldr	r2, [pc, #132]	; (8004ae0 <_malloc_r+0xac>)
 8004a5c:	6814      	ldr	r4, [r2, #0]
 8004a5e:	4621      	mov	r1, r4
 8004a60:	b991      	cbnz	r1, 8004a88 <_malloc_r+0x54>
 8004a62:	4c20      	ldr	r4, [pc, #128]	; (8004ae4 <_malloc_r+0xb0>)
 8004a64:	6823      	ldr	r3, [r4, #0]
 8004a66:	b91b      	cbnz	r3, 8004a70 <_malloc_r+0x3c>
 8004a68:	4630      	mov	r0, r6
 8004a6a:	f000 fb03 	bl	8005074 <_sbrk_r>
 8004a6e:	6020      	str	r0, [r4, #0]
 8004a70:	4629      	mov	r1, r5
 8004a72:	4630      	mov	r0, r6
 8004a74:	f000 fafe 	bl	8005074 <_sbrk_r>
 8004a78:	1c43      	adds	r3, r0, #1
 8004a7a:	d124      	bne.n	8004ac6 <_malloc_r+0x92>
 8004a7c:	230c      	movs	r3, #12
 8004a7e:	4630      	mov	r0, r6
 8004a80:	6033      	str	r3, [r6, #0]
 8004a82:	f000 fbb0 	bl	80051e6 <__malloc_unlock>
 8004a86:	e7e4      	b.n	8004a52 <_malloc_r+0x1e>
 8004a88:	680b      	ldr	r3, [r1, #0]
 8004a8a:	1b5b      	subs	r3, r3, r5
 8004a8c:	d418      	bmi.n	8004ac0 <_malloc_r+0x8c>
 8004a8e:	2b0b      	cmp	r3, #11
 8004a90:	d90f      	bls.n	8004ab2 <_malloc_r+0x7e>
 8004a92:	600b      	str	r3, [r1, #0]
 8004a94:	18cc      	adds	r4, r1, r3
 8004a96:	50cd      	str	r5, [r1, r3]
 8004a98:	4630      	mov	r0, r6
 8004a9a:	f000 fba4 	bl	80051e6 <__malloc_unlock>
 8004a9e:	f104 000b 	add.w	r0, r4, #11
 8004aa2:	1d23      	adds	r3, r4, #4
 8004aa4:	f020 0007 	bic.w	r0, r0, #7
 8004aa8:	1ac3      	subs	r3, r0, r3
 8004aaa:	d0d3      	beq.n	8004a54 <_malloc_r+0x20>
 8004aac:	425a      	negs	r2, r3
 8004aae:	50e2      	str	r2, [r4, r3]
 8004ab0:	e7d0      	b.n	8004a54 <_malloc_r+0x20>
 8004ab2:	684b      	ldr	r3, [r1, #4]
 8004ab4:	428c      	cmp	r4, r1
 8004ab6:	bf16      	itet	ne
 8004ab8:	6063      	strne	r3, [r4, #4]
 8004aba:	6013      	streq	r3, [r2, #0]
 8004abc:	460c      	movne	r4, r1
 8004abe:	e7eb      	b.n	8004a98 <_malloc_r+0x64>
 8004ac0:	460c      	mov	r4, r1
 8004ac2:	6849      	ldr	r1, [r1, #4]
 8004ac4:	e7cc      	b.n	8004a60 <_malloc_r+0x2c>
 8004ac6:	1cc4      	adds	r4, r0, #3
 8004ac8:	f024 0403 	bic.w	r4, r4, #3
 8004acc:	42a0      	cmp	r0, r4
 8004ace:	d005      	beq.n	8004adc <_malloc_r+0xa8>
 8004ad0:	1a21      	subs	r1, r4, r0
 8004ad2:	4630      	mov	r0, r6
 8004ad4:	f000 face 	bl	8005074 <_sbrk_r>
 8004ad8:	3001      	adds	r0, #1
 8004ada:	d0cf      	beq.n	8004a7c <_malloc_r+0x48>
 8004adc:	6025      	str	r5, [r4, #0]
 8004ade:	e7db      	b.n	8004a98 <_malloc_r+0x64>
 8004ae0:	200008ac 	.word	0x200008ac
 8004ae4:	200008b0 	.word	0x200008b0

08004ae8 <__sfputc_r>:
 8004ae8:	6893      	ldr	r3, [r2, #8]
 8004aea:	b410      	push	{r4}
 8004aec:	3b01      	subs	r3, #1
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	6093      	str	r3, [r2, #8]
 8004af2:	da07      	bge.n	8004b04 <__sfputc_r+0x1c>
 8004af4:	6994      	ldr	r4, [r2, #24]
 8004af6:	42a3      	cmp	r3, r4
 8004af8:	db01      	blt.n	8004afe <__sfputc_r+0x16>
 8004afa:	290a      	cmp	r1, #10
 8004afc:	d102      	bne.n	8004b04 <__sfputc_r+0x1c>
 8004afe:	bc10      	pop	{r4}
 8004b00:	f7ff bcae 	b.w	8004460 <__swbuf_r>
 8004b04:	6813      	ldr	r3, [r2, #0]
 8004b06:	1c58      	adds	r0, r3, #1
 8004b08:	6010      	str	r0, [r2, #0]
 8004b0a:	7019      	strb	r1, [r3, #0]
 8004b0c:	4608      	mov	r0, r1
 8004b0e:	bc10      	pop	{r4}
 8004b10:	4770      	bx	lr

08004b12 <__sfputs_r>:
 8004b12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b14:	4606      	mov	r6, r0
 8004b16:	460f      	mov	r7, r1
 8004b18:	4614      	mov	r4, r2
 8004b1a:	18d5      	adds	r5, r2, r3
 8004b1c:	42ac      	cmp	r4, r5
 8004b1e:	d101      	bne.n	8004b24 <__sfputs_r+0x12>
 8004b20:	2000      	movs	r0, #0
 8004b22:	e007      	b.n	8004b34 <__sfputs_r+0x22>
 8004b24:	463a      	mov	r2, r7
 8004b26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b2a:	4630      	mov	r0, r6
 8004b2c:	f7ff ffdc 	bl	8004ae8 <__sfputc_r>
 8004b30:	1c43      	adds	r3, r0, #1
 8004b32:	d1f3      	bne.n	8004b1c <__sfputs_r+0xa>
 8004b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004b38 <_vfiprintf_r>:
 8004b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b3c:	460c      	mov	r4, r1
 8004b3e:	b09d      	sub	sp, #116	; 0x74
 8004b40:	4617      	mov	r7, r2
 8004b42:	461d      	mov	r5, r3
 8004b44:	4606      	mov	r6, r0
 8004b46:	b118      	cbz	r0, 8004b50 <_vfiprintf_r+0x18>
 8004b48:	6983      	ldr	r3, [r0, #24]
 8004b4a:	b90b      	cbnz	r3, 8004b50 <_vfiprintf_r+0x18>
 8004b4c:	f7ff fe38 	bl	80047c0 <__sinit>
 8004b50:	4b7c      	ldr	r3, [pc, #496]	; (8004d44 <_vfiprintf_r+0x20c>)
 8004b52:	429c      	cmp	r4, r3
 8004b54:	d158      	bne.n	8004c08 <_vfiprintf_r+0xd0>
 8004b56:	6874      	ldr	r4, [r6, #4]
 8004b58:	89a3      	ldrh	r3, [r4, #12]
 8004b5a:	0718      	lsls	r0, r3, #28
 8004b5c:	d55e      	bpl.n	8004c1c <_vfiprintf_r+0xe4>
 8004b5e:	6923      	ldr	r3, [r4, #16]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d05b      	beq.n	8004c1c <_vfiprintf_r+0xe4>
 8004b64:	2300      	movs	r3, #0
 8004b66:	9309      	str	r3, [sp, #36]	; 0x24
 8004b68:	2320      	movs	r3, #32
 8004b6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b6e:	2330      	movs	r3, #48	; 0x30
 8004b70:	f04f 0b01 	mov.w	fp, #1
 8004b74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b78:	9503      	str	r5, [sp, #12]
 8004b7a:	46b8      	mov	r8, r7
 8004b7c:	4645      	mov	r5, r8
 8004b7e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004b82:	b10b      	cbz	r3, 8004b88 <_vfiprintf_r+0x50>
 8004b84:	2b25      	cmp	r3, #37	; 0x25
 8004b86:	d154      	bne.n	8004c32 <_vfiprintf_r+0xfa>
 8004b88:	ebb8 0a07 	subs.w	sl, r8, r7
 8004b8c:	d00b      	beq.n	8004ba6 <_vfiprintf_r+0x6e>
 8004b8e:	4653      	mov	r3, sl
 8004b90:	463a      	mov	r2, r7
 8004b92:	4621      	mov	r1, r4
 8004b94:	4630      	mov	r0, r6
 8004b96:	f7ff ffbc 	bl	8004b12 <__sfputs_r>
 8004b9a:	3001      	adds	r0, #1
 8004b9c:	f000 80c2 	beq.w	8004d24 <_vfiprintf_r+0x1ec>
 8004ba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ba2:	4453      	add	r3, sl
 8004ba4:	9309      	str	r3, [sp, #36]	; 0x24
 8004ba6:	f898 3000 	ldrb.w	r3, [r8]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	f000 80ba 	beq.w	8004d24 <_vfiprintf_r+0x1ec>
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8004bb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bba:	9304      	str	r3, [sp, #16]
 8004bbc:	9307      	str	r3, [sp, #28]
 8004bbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004bc2:	931a      	str	r3, [sp, #104]	; 0x68
 8004bc4:	46a8      	mov	r8, r5
 8004bc6:	2205      	movs	r2, #5
 8004bc8:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004bcc:	485e      	ldr	r0, [pc, #376]	; (8004d48 <_vfiprintf_r+0x210>)
 8004bce:	f000 fafb 	bl	80051c8 <memchr>
 8004bd2:	9b04      	ldr	r3, [sp, #16]
 8004bd4:	bb78      	cbnz	r0, 8004c36 <_vfiprintf_r+0xfe>
 8004bd6:	06d9      	lsls	r1, r3, #27
 8004bd8:	bf44      	itt	mi
 8004bda:	2220      	movmi	r2, #32
 8004bdc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004be0:	071a      	lsls	r2, r3, #28
 8004be2:	bf44      	itt	mi
 8004be4:	222b      	movmi	r2, #43	; 0x2b
 8004be6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004bea:	782a      	ldrb	r2, [r5, #0]
 8004bec:	2a2a      	cmp	r2, #42	; 0x2a
 8004bee:	d02a      	beq.n	8004c46 <_vfiprintf_r+0x10e>
 8004bf0:	46a8      	mov	r8, r5
 8004bf2:	2000      	movs	r0, #0
 8004bf4:	250a      	movs	r5, #10
 8004bf6:	9a07      	ldr	r2, [sp, #28]
 8004bf8:	4641      	mov	r1, r8
 8004bfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bfe:	3b30      	subs	r3, #48	; 0x30
 8004c00:	2b09      	cmp	r3, #9
 8004c02:	d969      	bls.n	8004cd8 <_vfiprintf_r+0x1a0>
 8004c04:	b360      	cbz	r0, 8004c60 <_vfiprintf_r+0x128>
 8004c06:	e024      	b.n	8004c52 <_vfiprintf_r+0x11a>
 8004c08:	4b50      	ldr	r3, [pc, #320]	; (8004d4c <_vfiprintf_r+0x214>)
 8004c0a:	429c      	cmp	r4, r3
 8004c0c:	d101      	bne.n	8004c12 <_vfiprintf_r+0xda>
 8004c0e:	68b4      	ldr	r4, [r6, #8]
 8004c10:	e7a2      	b.n	8004b58 <_vfiprintf_r+0x20>
 8004c12:	4b4f      	ldr	r3, [pc, #316]	; (8004d50 <_vfiprintf_r+0x218>)
 8004c14:	429c      	cmp	r4, r3
 8004c16:	bf08      	it	eq
 8004c18:	68f4      	ldreq	r4, [r6, #12]
 8004c1a:	e79d      	b.n	8004b58 <_vfiprintf_r+0x20>
 8004c1c:	4621      	mov	r1, r4
 8004c1e:	4630      	mov	r0, r6
 8004c20:	f7ff fc70 	bl	8004504 <__swsetup_r>
 8004c24:	2800      	cmp	r0, #0
 8004c26:	d09d      	beq.n	8004b64 <_vfiprintf_r+0x2c>
 8004c28:	f04f 30ff 	mov.w	r0, #4294967295
 8004c2c:	b01d      	add	sp, #116	; 0x74
 8004c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c32:	46a8      	mov	r8, r5
 8004c34:	e7a2      	b.n	8004b7c <_vfiprintf_r+0x44>
 8004c36:	4a44      	ldr	r2, [pc, #272]	; (8004d48 <_vfiprintf_r+0x210>)
 8004c38:	4645      	mov	r5, r8
 8004c3a:	1a80      	subs	r0, r0, r2
 8004c3c:	fa0b f000 	lsl.w	r0, fp, r0
 8004c40:	4318      	orrs	r0, r3
 8004c42:	9004      	str	r0, [sp, #16]
 8004c44:	e7be      	b.n	8004bc4 <_vfiprintf_r+0x8c>
 8004c46:	9a03      	ldr	r2, [sp, #12]
 8004c48:	1d11      	adds	r1, r2, #4
 8004c4a:	6812      	ldr	r2, [r2, #0]
 8004c4c:	9103      	str	r1, [sp, #12]
 8004c4e:	2a00      	cmp	r2, #0
 8004c50:	db01      	blt.n	8004c56 <_vfiprintf_r+0x11e>
 8004c52:	9207      	str	r2, [sp, #28]
 8004c54:	e004      	b.n	8004c60 <_vfiprintf_r+0x128>
 8004c56:	4252      	negs	r2, r2
 8004c58:	f043 0302 	orr.w	r3, r3, #2
 8004c5c:	9207      	str	r2, [sp, #28]
 8004c5e:	9304      	str	r3, [sp, #16]
 8004c60:	f898 3000 	ldrb.w	r3, [r8]
 8004c64:	2b2e      	cmp	r3, #46	; 0x2e
 8004c66:	d10e      	bne.n	8004c86 <_vfiprintf_r+0x14e>
 8004c68:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004c6c:	2b2a      	cmp	r3, #42	; 0x2a
 8004c6e:	d138      	bne.n	8004ce2 <_vfiprintf_r+0x1aa>
 8004c70:	9b03      	ldr	r3, [sp, #12]
 8004c72:	f108 0802 	add.w	r8, r8, #2
 8004c76:	1d1a      	adds	r2, r3, #4
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	9203      	str	r2, [sp, #12]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	bfb8      	it	lt
 8004c80:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c84:	9305      	str	r3, [sp, #20]
 8004c86:	4d33      	ldr	r5, [pc, #204]	; (8004d54 <_vfiprintf_r+0x21c>)
 8004c88:	2203      	movs	r2, #3
 8004c8a:	f898 1000 	ldrb.w	r1, [r8]
 8004c8e:	4628      	mov	r0, r5
 8004c90:	f000 fa9a 	bl	80051c8 <memchr>
 8004c94:	b140      	cbz	r0, 8004ca8 <_vfiprintf_r+0x170>
 8004c96:	2340      	movs	r3, #64	; 0x40
 8004c98:	1b40      	subs	r0, r0, r5
 8004c9a:	fa03 f000 	lsl.w	r0, r3, r0
 8004c9e:	9b04      	ldr	r3, [sp, #16]
 8004ca0:	f108 0801 	add.w	r8, r8, #1
 8004ca4:	4303      	orrs	r3, r0
 8004ca6:	9304      	str	r3, [sp, #16]
 8004ca8:	f898 1000 	ldrb.w	r1, [r8]
 8004cac:	2206      	movs	r2, #6
 8004cae:	482a      	ldr	r0, [pc, #168]	; (8004d58 <_vfiprintf_r+0x220>)
 8004cb0:	f108 0701 	add.w	r7, r8, #1
 8004cb4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004cb8:	f000 fa86 	bl	80051c8 <memchr>
 8004cbc:	2800      	cmp	r0, #0
 8004cbe:	d037      	beq.n	8004d30 <_vfiprintf_r+0x1f8>
 8004cc0:	4b26      	ldr	r3, [pc, #152]	; (8004d5c <_vfiprintf_r+0x224>)
 8004cc2:	bb1b      	cbnz	r3, 8004d0c <_vfiprintf_r+0x1d4>
 8004cc4:	9b03      	ldr	r3, [sp, #12]
 8004cc6:	3307      	adds	r3, #7
 8004cc8:	f023 0307 	bic.w	r3, r3, #7
 8004ccc:	3308      	adds	r3, #8
 8004cce:	9303      	str	r3, [sp, #12]
 8004cd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cd2:	444b      	add	r3, r9
 8004cd4:	9309      	str	r3, [sp, #36]	; 0x24
 8004cd6:	e750      	b.n	8004b7a <_vfiprintf_r+0x42>
 8004cd8:	fb05 3202 	mla	r2, r5, r2, r3
 8004cdc:	2001      	movs	r0, #1
 8004cde:	4688      	mov	r8, r1
 8004ce0:	e78a      	b.n	8004bf8 <_vfiprintf_r+0xc0>
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	250a      	movs	r5, #10
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	f108 0801 	add.w	r8, r8, #1
 8004cec:	9305      	str	r3, [sp, #20]
 8004cee:	4640      	mov	r0, r8
 8004cf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cf4:	3a30      	subs	r2, #48	; 0x30
 8004cf6:	2a09      	cmp	r2, #9
 8004cf8:	d903      	bls.n	8004d02 <_vfiprintf_r+0x1ca>
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d0c3      	beq.n	8004c86 <_vfiprintf_r+0x14e>
 8004cfe:	9105      	str	r1, [sp, #20]
 8004d00:	e7c1      	b.n	8004c86 <_vfiprintf_r+0x14e>
 8004d02:	fb05 2101 	mla	r1, r5, r1, r2
 8004d06:	2301      	movs	r3, #1
 8004d08:	4680      	mov	r8, r0
 8004d0a:	e7f0      	b.n	8004cee <_vfiprintf_r+0x1b6>
 8004d0c:	ab03      	add	r3, sp, #12
 8004d0e:	9300      	str	r3, [sp, #0]
 8004d10:	4622      	mov	r2, r4
 8004d12:	4b13      	ldr	r3, [pc, #76]	; (8004d60 <_vfiprintf_r+0x228>)
 8004d14:	a904      	add	r1, sp, #16
 8004d16:	4630      	mov	r0, r6
 8004d18:	f3af 8000 	nop.w
 8004d1c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004d20:	4681      	mov	r9, r0
 8004d22:	d1d5      	bne.n	8004cd0 <_vfiprintf_r+0x198>
 8004d24:	89a3      	ldrh	r3, [r4, #12]
 8004d26:	065b      	lsls	r3, r3, #25
 8004d28:	f53f af7e 	bmi.w	8004c28 <_vfiprintf_r+0xf0>
 8004d2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d2e:	e77d      	b.n	8004c2c <_vfiprintf_r+0xf4>
 8004d30:	ab03      	add	r3, sp, #12
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	4622      	mov	r2, r4
 8004d36:	4b0a      	ldr	r3, [pc, #40]	; (8004d60 <_vfiprintf_r+0x228>)
 8004d38:	a904      	add	r1, sp, #16
 8004d3a:	4630      	mov	r0, r6
 8004d3c:	f000 f888 	bl	8004e50 <_printf_i>
 8004d40:	e7ec      	b.n	8004d1c <_vfiprintf_r+0x1e4>
 8004d42:	bf00      	nop
 8004d44:	0800584c 	.word	0x0800584c
 8004d48:	0800588c 	.word	0x0800588c
 8004d4c:	0800586c 	.word	0x0800586c
 8004d50:	0800582c 	.word	0x0800582c
 8004d54:	08005892 	.word	0x08005892
 8004d58:	08005896 	.word	0x08005896
 8004d5c:	00000000 	.word	0x00000000
 8004d60:	08004b13 	.word	0x08004b13

08004d64 <_printf_common>:
 8004d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d68:	4691      	mov	r9, r2
 8004d6a:	461f      	mov	r7, r3
 8004d6c:	688a      	ldr	r2, [r1, #8]
 8004d6e:	690b      	ldr	r3, [r1, #16]
 8004d70:	4606      	mov	r6, r0
 8004d72:	4293      	cmp	r3, r2
 8004d74:	bfb8      	it	lt
 8004d76:	4613      	movlt	r3, r2
 8004d78:	f8c9 3000 	str.w	r3, [r9]
 8004d7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d80:	460c      	mov	r4, r1
 8004d82:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d86:	b112      	cbz	r2, 8004d8e <_printf_common+0x2a>
 8004d88:	3301      	adds	r3, #1
 8004d8a:	f8c9 3000 	str.w	r3, [r9]
 8004d8e:	6823      	ldr	r3, [r4, #0]
 8004d90:	0699      	lsls	r1, r3, #26
 8004d92:	bf42      	ittt	mi
 8004d94:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004d98:	3302      	addmi	r3, #2
 8004d9a:	f8c9 3000 	strmi.w	r3, [r9]
 8004d9e:	6825      	ldr	r5, [r4, #0]
 8004da0:	f015 0506 	ands.w	r5, r5, #6
 8004da4:	d107      	bne.n	8004db6 <_printf_common+0x52>
 8004da6:	f104 0a19 	add.w	sl, r4, #25
 8004daa:	68e3      	ldr	r3, [r4, #12]
 8004dac:	f8d9 2000 	ldr.w	r2, [r9]
 8004db0:	1a9b      	subs	r3, r3, r2
 8004db2:	42ab      	cmp	r3, r5
 8004db4:	dc29      	bgt.n	8004e0a <_printf_common+0xa6>
 8004db6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004dba:	6822      	ldr	r2, [r4, #0]
 8004dbc:	3300      	adds	r3, #0
 8004dbe:	bf18      	it	ne
 8004dc0:	2301      	movne	r3, #1
 8004dc2:	0692      	lsls	r2, r2, #26
 8004dc4:	d42e      	bmi.n	8004e24 <_printf_common+0xc0>
 8004dc6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004dca:	4639      	mov	r1, r7
 8004dcc:	4630      	mov	r0, r6
 8004dce:	47c0      	blx	r8
 8004dd0:	3001      	adds	r0, #1
 8004dd2:	d021      	beq.n	8004e18 <_printf_common+0xb4>
 8004dd4:	6823      	ldr	r3, [r4, #0]
 8004dd6:	68e5      	ldr	r5, [r4, #12]
 8004dd8:	f003 0306 	and.w	r3, r3, #6
 8004ddc:	2b04      	cmp	r3, #4
 8004dde:	bf18      	it	ne
 8004de0:	2500      	movne	r5, #0
 8004de2:	f8d9 2000 	ldr.w	r2, [r9]
 8004de6:	f04f 0900 	mov.w	r9, #0
 8004dea:	bf08      	it	eq
 8004dec:	1aad      	subeq	r5, r5, r2
 8004dee:	68a3      	ldr	r3, [r4, #8]
 8004df0:	6922      	ldr	r2, [r4, #16]
 8004df2:	bf08      	it	eq
 8004df4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	bfc4      	itt	gt
 8004dfc:	1a9b      	subgt	r3, r3, r2
 8004dfe:	18ed      	addgt	r5, r5, r3
 8004e00:	341a      	adds	r4, #26
 8004e02:	454d      	cmp	r5, r9
 8004e04:	d11a      	bne.n	8004e3c <_printf_common+0xd8>
 8004e06:	2000      	movs	r0, #0
 8004e08:	e008      	b.n	8004e1c <_printf_common+0xb8>
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	4652      	mov	r2, sl
 8004e0e:	4639      	mov	r1, r7
 8004e10:	4630      	mov	r0, r6
 8004e12:	47c0      	blx	r8
 8004e14:	3001      	adds	r0, #1
 8004e16:	d103      	bne.n	8004e20 <_printf_common+0xbc>
 8004e18:	f04f 30ff 	mov.w	r0, #4294967295
 8004e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e20:	3501      	adds	r5, #1
 8004e22:	e7c2      	b.n	8004daa <_printf_common+0x46>
 8004e24:	2030      	movs	r0, #48	; 0x30
 8004e26:	18e1      	adds	r1, r4, r3
 8004e28:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e2c:	1c5a      	adds	r2, r3, #1
 8004e2e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e32:	4422      	add	r2, r4
 8004e34:	3302      	adds	r3, #2
 8004e36:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e3a:	e7c4      	b.n	8004dc6 <_printf_common+0x62>
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	4622      	mov	r2, r4
 8004e40:	4639      	mov	r1, r7
 8004e42:	4630      	mov	r0, r6
 8004e44:	47c0      	blx	r8
 8004e46:	3001      	adds	r0, #1
 8004e48:	d0e6      	beq.n	8004e18 <_printf_common+0xb4>
 8004e4a:	f109 0901 	add.w	r9, r9, #1
 8004e4e:	e7d8      	b.n	8004e02 <_printf_common+0x9e>

08004e50 <_printf_i>:
 8004e50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004e54:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004e58:	460c      	mov	r4, r1
 8004e5a:	7e09      	ldrb	r1, [r1, #24]
 8004e5c:	b085      	sub	sp, #20
 8004e5e:	296e      	cmp	r1, #110	; 0x6e
 8004e60:	4617      	mov	r7, r2
 8004e62:	4606      	mov	r6, r0
 8004e64:	4698      	mov	r8, r3
 8004e66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004e68:	f000 80b3 	beq.w	8004fd2 <_printf_i+0x182>
 8004e6c:	d822      	bhi.n	8004eb4 <_printf_i+0x64>
 8004e6e:	2963      	cmp	r1, #99	; 0x63
 8004e70:	d036      	beq.n	8004ee0 <_printf_i+0x90>
 8004e72:	d80a      	bhi.n	8004e8a <_printf_i+0x3a>
 8004e74:	2900      	cmp	r1, #0
 8004e76:	f000 80b9 	beq.w	8004fec <_printf_i+0x19c>
 8004e7a:	2958      	cmp	r1, #88	; 0x58
 8004e7c:	f000 8083 	beq.w	8004f86 <_printf_i+0x136>
 8004e80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e84:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004e88:	e032      	b.n	8004ef0 <_printf_i+0xa0>
 8004e8a:	2964      	cmp	r1, #100	; 0x64
 8004e8c:	d001      	beq.n	8004e92 <_printf_i+0x42>
 8004e8e:	2969      	cmp	r1, #105	; 0x69
 8004e90:	d1f6      	bne.n	8004e80 <_printf_i+0x30>
 8004e92:	6820      	ldr	r0, [r4, #0]
 8004e94:	6813      	ldr	r3, [r2, #0]
 8004e96:	0605      	lsls	r5, r0, #24
 8004e98:	f103 0104 	add.w	r1, r3, #4
 8004e9c:	d52a      	bpl.n	8004ef4 <_printf_i+0xa4>
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6011      	str	r1, [r2, #0]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	da03      	bge.n	8004eae <_printf_i+0x5e>
 8004ea6:	222d      	movs	r2, #45	; 0x2d
 8004ea8:	425b      	negs	r3, r3
 8004eaa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004eae:	486f      	ldr	r0, [pc, #444]	; (800506c <_printf_i+0x21c>)
 8004eb0:	220a      	movs	r2, #10
 8004eb2:	e039      	b.n	8004f28 <_printf_i+0xd8>
 8004eb4:	2973      	cmp	r1, #115	; 0x73
 8004eb6:	f000 809d 	beq.w	8004ff4 <_printf_i+0x1a4>
 8004eba:	d808      	bhi.n	8004ece <_printf_i+0x7e>
 8004ebc:	296f      	cmp	r1, #111	; 0x6f
 8004ebe:	d020      	beq.n	8004f02 <_printf_i+0xb2>
 8004ec0:	2970      	cmp	r1, #112	; 0x70
 8004ec2:	d1dd      	bne.n	8004e80 <_printf_i+0x30>
 8004ec4:	6823      	ldr	r3, [r4, #0]
 8004ec6:	f043 0320 	orr.w	r3, r3, #32
 8004eca:	6023      	str	r3, [r4, #0]
 8004ecc:	e003      	b.n	8004ed6 <_printf_i+0x86>
 8004ece:	2975      	cmp	r1, #117	; 0x75
 8004ed0:	d017      	beq.n	8004f02 <_printf_i+0xb2>
 8004ed2:	2978      	cmp	r1, #120	; 0x78
 8004ed4:	d1d4      	bne.n	8004e80 <_printf_i+0x30>
 8004ed6:	2378      	movs	r3, #120	; 0x78
 8004ed8:	4865      	ldr	r0, [pc, #404]	; (8005070 <_printf_i+0x220>)
 8004eda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ede:	e055      	b.n	8004f8c <_printf_i+0x13c>
 8004ee0:	6813      	ldr	r3, [r2, #0]
 8004ee2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ee6:	1d19      	adds	r1, r3, #4
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	6011      	str	r1, [r2, #0]
 8004eec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e08c      	b.n	800500e <_printf_i+0x1be>
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004efa:	6011      	str	r1, [r2, #0]
 8004efc:	bf18      	it	ne
 8004efe:	b21b      	sxthne	r3, r3
 8004f00:	e7cf      	b.n	8004ea2 <_printf_i+0x52>
 8004f02:	6813      	ldr	r3, [r2, #0]
 8004f04:	6825      	ldr	r5, [r4, #0]
 8004f06:	1d18      	adds	r0, r3, #4
 8004f08:	6010      	str	r0, [r2, #0]
 8004f0a:	0628      	lsls	r0, r5, #24
 8004f0c:	d501      	bpl.n	8004f12 <_printf_i+0xc2>
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	e002      	b.n	8004f18 <_printf_i+0xc8>
 8004f12:	0668      	lsls	r0, r5, #25
 8004f14:	d5fb      	bpl.n	8004f0e <_printf_i+0xbe>
 8004f16:	881b      	ldrh	r3, [r3, #0]
 8004f18:	296f      	cmp	r1, #111	; 0x6f
 8004f1a:	bf14      	ite	ne
 8004f1c:	220a      	movne	r2, #10
 8004f1e:	2208      	moveq	r2, #8
 8004f20:	4852      	ldr	r0, [pc, #328]	; (800506c <_printf_i+0x21c>)
 8004f22:	2100      	movs	r1, #0
 8004f24:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f28:	6865      	ldr	r5, [r4, #4]
 8004f2a:	2d00      	cmp	r5, #0
 8004f2c:	60a5      	str	r5, [r4, #8]
 8004f2e:	f2c0 8095 	blt.w	800505c <_printf_i+0x20c>
 8004f32:	6821      	ldr	r1, [r4, #0]
 8004f34:	f021 0104 	bic.w	r1, r1, #4
 8004f38:	6021      	str	r1, [r4, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d13d      	bne.n	8004fba <_printf_i+0x16a>
 8004f3e:	2d00      	cmp	r5, #0
 8004f40:	f040 808e 	bne.w	8005060 <_printf_i+0x210>
 8004f44:	4665      	mov	r5, ip
 8004f46:	2a08      	cmp	r2, #8
 8004f48:	d10b      	bne.n	8004f62 <_printf_i+0x112>
 8004f4a:	6823      	ldr	r3, [r4, #0]
 8004f4c:	07db      	lsls	r3, r3, #31
 8004f4e:	d508      	bpl.n	8004f62 <_printf_i+0x112>
 8004f50:	6923      	ldr	r3, [r4, #16]
 8004f52:	6862      	ldr	r2, [r4, #4]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	bfde      	ittt	le
 8004f58:	2330      	movle	r3, #48	; 0x30
 8004f5a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f5e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f62:	ebac 0305 	sub.w	r3, ip, r5
 8004f66:	6123      	str	r3, [r4, #16]
 8004f68:	f8cd 8000 	str.w	r8, [sp]
 8004f6c:	463b      	mov	r3, r7
 8004f6e:	aa03      	add	r2, sp, #12
 8004f70:	4621      	mov	r1, r4
 8004f72:	4630      	mov	r0, r6
 8004f74:	f7ff fef6 	bl	8004d64 <_printf_common>
 8004f78:	3001      	adds	r0, #1
 8004f7a:	d14d      	bne.n	8005018 <_printf_i+0x1c8>
 8004f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f80:	b005      	add	sp, #20
 8004f82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004f86:	4839      	ldr	r0, [pc, #228]	; (800506c <_printf_i+0x21c>)
 8004f88:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004f8c:	6813      	ldr	r3, [r2, #0]
 8004f8e:	6821      	ldr	r1, [r4, #0]
 8004f90:	1d1d      	adds	r5, r3, #4
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6015      	str	r5, [r2, #0]
 8004f96:	060a      	lsls	r2, r1, #24
 8004f98:	d50b      	bpl.n	8004fb2 <_printf_i+0x162>
 8004f9a:	07ca      	lsls	r2, r1, #31
 8004f9c:	bf44      	itt	mi
 8004f9e:	f041 0120 	orrmi.w	r1, r1, #32
 8004fa2:	6021      	strmi	r1, [r4, #0]
 8004fa4:	b91b      	cbnz	r3, 8004fae <_printf_i+0x15e>
 8004fa6:	6822      	ldr	r2, [r4, #0]
 8004fa8:	f022 0220 	bic.w	r2, r2, #32
 8004fac:	6022      	str	r2, [r4, #0]
 8004fae:	2210      	movs	r2, #16
 8004fb0:	e7b7      	b.n	8004f22 <_printf_i+0xd2>
 8004fb2:	064d      	lsls	r5, r1, #25
 8004fb4:	bf48      	it	mi
 8004fb6:	b29b      	uxthmi	r3, r3
 8004fb8:	e7ef      	b.n	8004f9a <_printf_i+0x14a>
 8004fba:	4665      	mov	r5, ip
 8004fbc:	fbb3 f1f2 	udiv	r1, r3, r2
 8004fc0:	fb02 3311 	mls	r3, r2, r1, r3
 8004fc4:	5cc3      	ldrb	r3, [r0, r3]
 8004fc6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004fca:	460b      	mov	r3, r1
 8004fcc:	2900      	cmp	r1, #0
 8004fce:	d1f5      	bne.n	8004fbc <_printf_i+0x16c>
 8004fd0:	e7b9      	b.n	8004f46 <_printf_i+0xf6>
 8004fd2:	6813      	ldr	r3, [r2, #0]
 8004fd4:	6825      	ldr	r5, [r4, #0]
 8004fd6:	1d18      	adds	r0, r3, #4
 8004fd8:	6961      	ldr	r1, [r4, #20]
 8004fda:	6010      	str	r0, [r2, #0]
 8004fdc:	0628      	lsls	r0, r5, #24
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	d501      	bpl.n	8004fe6 <_printf_i+0x196>
 8004fe2:	6019      	str	r1, [r3, #0]
 8004fe4:	e002      	b.n	8004fec <_printf_i+0x19c>
 8004fe6:	066a      	lsls	r2, r5, #25
 8004fe8:	d5fb      	bpl.n	8004fe2 <_printf_i+0x192>
 8004fea:	8019      	strh	r1, [r3, #0]
 8004fec:	2300      	movs	r3, #0
 8004fee:	4665      	mov	r5, ip
 8004ff0:	6123      	str	r3, [r4, #16]
 8004ff2:	e7b9      	b.n	8004f68 <_printf_i+0x118>
 8004ff4:	6813      	ldr	r3, [r2, #0]
 8004ff6:	1d19      	adds	r1, r3, #4
 8004ff8:	6011      	str	r1, [r2, #0]
 8004ffa:	681d      	ldr	r5, [r3, #0]
 8004ffc:	6862      	ldr	r2, [r4, #4]
 8004ffe:	2100      	movs	r1, #0
 8005000:	4628      	mov	r0, r5
 8005002:	f000 f8e1 	bl	80051c8 <memchr>
 8005006:	b108      	cbz	r0, 800500c <_printf_i+0x1bc>
 8005008:	1b40      	subs	r0, r0, r5
 800500a:	6060      	str	r0, [r4, #4]
 800500c:	6863      	ldr	r3, [r4, #4]
 800500e:	6123      	str	r3, [r4, #16]
 8005010:	2300      	movs	r3, #0
 8005012:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005016:	e7a7      	b.n	8004f68 <_printf_i+0x118>
 8005018:	6923      	ldr	r3, [r4, #16]
 800501a:	462a      	mov	r2, r5
 800501c:	4639      	mov	r1, r7
 800501e:	4630      	mov	r0, r6
 8005020:	47c0      	blx	r8
 8005022:	3001      	adds	r0, #1
 8005024:	d0aa      	beq.n	8004f7c <_printf_i+0x12c>
 8005026:	6823      	ldr	r3, [r4, #0]
 8005028:	079b      	lsls	r3, r3, #30
 800502a:	d413      	bmi.n	8005054 <_printf_i+0x204>
 800502c:	68e0      	ldr	r0, [r4, #12]
 800502e:	9b03      	ldr	r3, [sp, #12]
 8005030:	4298      	cmp	r0, r3
 8005032:	bfb8      	it	lt
 8005034:	4618      	movlt	r0, r3
 8005036:	e7a3      	b.n	8004f80 <_printf_i+0x130>
 8005038:	2301      	movs	r3, #1
 800503a:	464a      	mov	r2, r9
 800503c:	4639      	mov	r1, r7
 800503e:	4630      	mov	r0, r6
 8005040:	47c0      	blx	r8
 8005042:	3001      	adds	r0, #1
 8005044:	d09a      	beq.n	8004f7c <_printf_i+0x12c>
 8005046:	3501      	adds	r5, #1
 8005048:	68e3      	ldr	r3, [r4, #12]
 800504a:	9a03      	ldr	r2, [sp, #12]
 800504c:	1a9b      	subs	r3, r3, r2
 800504e:	42ab      	cmp	r3, r5
 8005050:	dcf2      	bgt.n	8005038 <_printf_i+0x1e8>
 8005052:	e7eb      	b.n	800502c <_printf_i+0x1dc>
 8005054:	2500      	movs	r5, #0
 8005056:	f104 0919 	add.w	r9, r4, #25
 800505a:	e7f5      	b.n	8005048 <_printf_i+0x1f8>
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1ac      	bne.n	8004fba <_printf_i+0x16a>
 8005060:	7803      	ldrb	r3, [r0, #0]
 8005062:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005066:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800506a:	e76c      	b.n	8004f46 <_printf_i+0xf6>
 800506c:	0800589d 	.word	0x0800589d
 8005070:	080058ae 	.word	0x080058ae

08005074 <_sbrk_r>:
 8005074:	b538      	push	{r3, r4, r5, lr}
 8005076:	2300      	movs	r3, #0
 8005078:	4c05      	ldr	r4, [pc, #20]	; (8005090 <_sbrk_r+0x1c>)
 800507a:	4605      	mov	r5, r0
 800507c:	4608      	mov	r0, r1
 800507e:	6023      	str	r3, [r4, #0]
 8005080:	f7fc f8ec 	bl	800125c <_sbrk>
 8005084:	1c43      	adds	r3, r0, #1
 8005086:	d102      	bne.n	800508e <_sbrk_r+0x1a>
 8005088:	6823      	ldr	r3, [r4, #0]
 800508a:	b103      	cbz	r3, 800508e <_sbrk_r+0x1a>
 800508c:	602b      	str	r3, [r5, #0]
 800508e:	bd38      	pop	{r3, r4, r5, pc}
 8005090:	20000950 	.word	0x20000950

08005094 <__sread>:
 8005094:	b510      	push	{r4, lr}
 8005096:	460c      	mov	r4, r1
 8005098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800509c:	f000 f8a4 	bl	80051e8 <_read_r>
 80050a0:	2800      	cmp	r0, #0
 80050a2:	bfab      	itete	ge
 80050a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80050a6:	89a3      	ldrhlt	r3, [r4, #12]
 80050a8:	181b      	addge	r3, r3, r0
 80050aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80050ae:	bfac      	ite	ge
 80050b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80050b2:	81a3      	strhlt	r3, [r4, #12]
 80050b4:	bd10      	pop	{r4, pc}

080050b6 <__swrite>:
 80050b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050ba:	461f      	mov	r7, r3
 80050bc:	898b      	ldrh	r3, [r1, #12]
 80050be:	4605      	mov	r5, r0
 80050c0:	05db      	lsls	r3, r3, #23
 80050c2:	460c      	mov	r4, r1
 80050c4:	4616      	mov	r6, r2
 80050c6:	d505      	bpl.n	80050d4 <__swrite+0x1e>
 80050c8:	2302      	movs	r3, #2
 80050ca:	2200      	movs	r2, #0
 80050cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050d0:	f000 f868 	bl	80051a4 <_lseek_r>
 80050d4:	89a3      	ldrh	r3, [r4, #12]
 80050d6:	4632      	mov	r2, r6
 80050d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050dc:	81a3      	strh	r3, [r4, #12]
 80050de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050e2:	463b      	mov	r3, r7
 80050e4:	4628      	mov	r0, r5
 80050e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050ea:	f000 b817 	b.w	800511c <_write_r>

080050ee <__sseek>:
 80050ee:	b510      	push	{r4, lr}
 80050f0:	460c      	mov	r4, r1
 80050f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050f6:	f000 f855 	bl	80051a4 <_lseek_r>
 80050fa:	1c43      	adds	r3, r0, #1
 80050fc:	89a3      	ldrh	r3, [r4, #12]
 80050fe:	bf15      	itete	ne
 8005100:	6560      	strne	r0, [r4, #84]	; 0x54
 8005102:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005106:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800510a:	81a3      	strheq	r3, [r4, #12]
 800510c:	bf18      	it	ne
 800510e:	81a3      	strhne	r3, [r4, #12]
 8005110:	bd10      	pop	{r4, pc}

08005112 <__sclose>:
 8005112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005116:	f000 b813 	b.w	8005140 <_close_r>
	...

0800511c <_write_r>:
 800511c:	b538      	push	{r3, r4, r5, lr}
 800511e:	4605      	mov	r5, r0
 8005120:	4608      	mov	r0, r1
 8005122:	4611      	mov	r1, r2
 8005124:	2200      	movs	r2, #0
 8005126:	4c05      	ldr	r4, [pc, #20]	; (800513c <_write_r+0x20>)
 8005128:	6022      	str	r2, [r4, #0]
 800512a:	461a      	mov	r2, r3
 800512c:	f7fc f849 	bl	80011c2 <_write>
 8005130:	1c43      	adds	r3, r0, #1
 8005132:	d102      	bne.n	800513a <_write_r+0x1e>
 8005134:	6823      	ldr	r3, [r4, #0]
 8005136:	b103      	cbz	r3, 800513a <_write_r+0x1e>
 8005138:	602b      	str	r3, [r5, #0]
 800513a:	bd38      	pop	{r3, r4, r5, pc}
 800513c:	20000950 	.word	0x20000950

08005140 <_close_r>:
 8005140:	b538      	push	{r3, r4, r5, lr}
 8005142:	2300      	movs	r3, #0
 8005144:	4c05      	ldr	r4, [pc, #20]	; (800515c <_close_r+0x1c>)
 8005146:	4605      	mov	r5, r0
 8005148:	4608      	mov	r0, r1
 800514a:	6023      	str	r3, [r4, #0]
 800514c:	f7fc f855 	bl	80011fa <_close>
 8005150:	1c43      	adds	r3, r0, #1
 8005152:	d102      	bne.n	800515a <_close_r+0x1a>
 8005154:	6823      	ldr	r3, [r4, #0]
 8005156:	b103      	cbz	r3, 800515a <_close_r+0x1a>
 8005158:	602b      	str	r3, [r5, #0]
 800515a:	bd38      	pop	{r3, r4, r5, pc}
 800515c:	20000950 	.word	0x20000950

08005160 <_fstat_r>:
 8005160:	b538      	push	{r3, r4, r5, lr}
 8005162:	2300      	movs	r3, #0
 8005164:	4c06      	ldr	r4, [pc, #24]	; (8005180 <_fstat_r+0x20>)
 8005166:	4605      	mov	r5, r0
 8005168:	4608      	mov	r0, r1
 800516a:	4611      	mov	r1, r2
 800516c:	6023      	str	r3, [r4, #0]
 800516e:	f7fc f84f 	bl	8001210 <_fstat>
 8005172:	1c43      	adds	r3, r0, #1
 8005174:	d102      	bne.n	800517c <_fstat_r+0x1c>
 8005176:	6823      	ldr	r3, [r4, #0]
 8005178:	b103      	cbz	r3, 800517c <_fstat_r+0x1c>
 800517a:	602b      	str	r3, [r5, #0]
 800517c:	bd38      	pop	{r3, r4, r5, pc}
 800517e:	bf00      	nop
 8005180:	20000950 	.word	0x20000950

08005184 <_isatty_r>:
 8005184:	b538      	push	{r3, r4, r5, lr}
 8005186:	2300      	movs	r3, #0
 8005188:	4c05      	ldr	r4, [pc, #20]	; (80051a0 <_isatty_r+0x1c>)
 800518a:	4605      	mov	r5, r0
 800518c:	4608      	mov	r0, r1
 800518e:	6023      	str	r3, [r4, #0]
 8005190:	f7fc f84d 	bl	800122e <_isatty>
 8005194:	1c43      	adds	r3, r0, #1
 8005196:	d102      	bne.n	800519e <_isatty_r+0x1a>
 8005198:	6823      	ldr	r3, [r4, #0]
 800519a:	b103      	cbz	r3, 800519e <_isatty_r+0x1a>
 800519c:	602b      	str	r3, [r5, #0]
 800519e:	bd38      	pop	{r3, r4, r5, pc}
 80051a0:	20000950 	.word	0x20000950

080051a4 <_lseek_r>:
 80051a4:	b538      	push	{r3, r4, r5, lr}
 80051a6:	4605      	mov	r5, r0
 80051a8:	4608      	mov	r0, r1
 80051aa:	4611      	mov	r1, r2
 80051ac:	2200      	movs	r2, #0
 80051ae:	4c05      	ldr	r4, [pc, #20]	; (80051c4 <_lseek_r+0x20>)
 80051b0:	6022      	str	r2, [r4, #0]
 80051b2:	461a      	mov	r2, r3
 80051b4:	f7fc f845 	bl	8001242 <_lseek>
 80051b8:	1c43      	adds	r3, r0, #1
 80051ba:	d102      	bne.n	80051c2 <_lseek_r+0x1e>
 80051bc:	6823      	ldr	r3, [r4, #0]
 80051be:	b103      	cbz	r3, 80051c2 <_lseek_r+0x1e>
 80051c0:	602b      	str	r3, [r5, #0]
 80051c2:	bd38      	pop	{r3, r4, r5, pc}
 80051c4:	20000950 	.word	0x20000950

080051c8 <memchr>:
 80051c8:	b510      	push	{r4, lr}
 80051ca:	b2c9      	uxtb	r1, r1
 80051cc:	4402      	add	r2, r0
 80051ce:	4290      	cmp	r0, r2
 80051d0:	4603      	mov	r3, r0
 80051d2:	d101      	bne.n	80051d8 <memchr+0x10>
 80051d4:	2300      	movs	r3, #0
 80051d6:	e003      	b.n	80051e0 <memchr+0x18>
 80051d8:	781c      	ldrb	r4, [r3, #0]
 80051da:	3001      	adds	r0, #1
 80051dc:	428c      	cmp	r4, r1
 80051de:	d1f6      	bne.n	80051ce <memchr+0x6>
 80051e0:	4618      	mov	r0, r3
 80051e2:	bd10      	pop	{r4, pc}

080051e4 <__malloc_lock>:
 80051e4:	4770      	bx	lr

080051e6 <__malloc_unlock>:
 80051e6:	4770      	bx	lr

080051e8 <_read_r>:
 80051e8:	b538      	push	{r3, r4, r5, lr}
 80051ea:	4605      	mov	r5, r0
 80051ec:	4608      	mov	r0, r1
 80051ee:	4611      	mov	r1, r2
 80051f0:	2200      	movs	r2, #0
 80051f2:	4c05      	ldr	r4, [pc, #20]	; (8005208 <_read_r+0x20>)
 80051f4:	6022      	str	r2, [r4, #0]
 80051f6:	461a      	mov	r2, r3
 80051f8:	f7fb ffc6 	bl	8001188 <_read>
 80051fc:	1c43      	adds	r3, r0, #1
 80051fe:	d102      	bne.n	8005206 <_read_r+0x1e>
 8005200:	6823      	ldr	r3, [r4, #0]
 8005202:	b103      	cbz	r3, 8005206 <_read_r+0x1e>
 8005204:	602b      	str	r3, [r5, #0]
 8005206:	bd38      	pop	{r3, r4, r5, pc}
 8005208:	20000950 	.word	0x20000950

0800520c <_init>:
 800520c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800520e:	bf00      	nop
 8005210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005212:	bc08      	pop	{r3}
 8005214:	469e      	mov	lr, r3
 8005216:	4770      	bx	lr

08005218 <_fini>:
 8005218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800521a:	bf00      	nop
 800521c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800521e:	bc08      	pop	{r3}
 8005220:	469e      	mov	lr, r3
 8005222:	4770      	bx	lr
