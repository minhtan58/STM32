
H747_SD_Card_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a410  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  0800a6a8  0800a6a8  0001a6a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a8ac  0800a8ac  0001a8ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a8b4  0800a8b4  0001a8b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a8b8  0800a8b8  0001a8b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  20000000  0800a8bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000a4c  20000090  0800a94c  00020090  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000adc  0800a94c  00020adc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 10 .debug_info   000255c8  00000000  00000000  000200be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000429c  00000000  00000000  00045686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001320  00000000  00000000  00049928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001198  00000000  00000000  0004ac48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00041f93  00000000  00000000  0004bde0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019dac  00000000  00000000  0008dd73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0019c3f0  00000000  00000000  000a7b1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00243f0f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005534  00000000  00000000  00243f64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000090 	.word	0x20000090
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800a690 	.word	0x0800a690

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000094 	.word	0x20000094
 80002d4:	0800a690 	.word	0x0800a690

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <__io_putchar>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SDMMC1_SD_Init(void);
static void MX_UART8_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar (int ch) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	uint8_t c = ch;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	b2db      	uxtb	r3, r3
 8000710:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart8, &c, 1, 1000);
 8000712:	f107 010f 	add.w	r1, r7, #15
 8000716:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800071a:	2201      	movs	r2, #1
 800071c:	4803      	ldr	r0, [pc, #12]	; (800072c <__io_putchar+0x28>)
 800071e:	f004 fc81 	bl	8005024 <HAL_UART_Transmit>
	return ch;
 8000722:	687b      	ldr	r3, [r7, #4]
}
 8000724:	4618      	mov	r0, r3
 8000726:	3710      	adds	r7, #16
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000170 	.word	0x20000170

08000730 <Sd_Card_Manager>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Sd_Card_Manager()
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
	printf("===================Sd_Card_Manager====================\r\n");
 8000734:	4817      	ldr	r0, [pc, #92]	; (8000794 <Sd_Card_Manager+0x64>)
 8000736:	f009 fb53 	bl	8009de0 <puts>
	if(BSP_SD_Init() == MSD_OK)
 800073a:	f006 fd01 	bl	8007140 <BSP_SD_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d124      	bne.n	800078e <Sd_Card_Manager+0x5e>
	{
		printf("===================ok====================\r\n");
 8000744:	4814      	ldr	r0, [pc, #80]	; (8000798 <Sd_Card_Manager+0x68>)
 8000746:	f009 fb4b 	bl	8009de0 <puts>
		fresult = f_mount(&fatfs,"",1);
 800074a:	2201      	movs	r2, #1
 800074c:	4913      	ldr	r1, [pc, #76]	; (800079c <Sd_Card_Manager+0x6c>)
 800074e:	4814      	ldr	r0, [pc, #80]	; (80007a0 <Sd_Card_Manager+0x70>)
 8000750:	f008 fb98 	bl	8008e84 <f_mount>
 8000754:	4603      	mov	r3, r0
 8000756:	461a      	mov	r2, r3
 8000758:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <Sd_Card_Manager+0x74>)
 800075a:	701a      	strb	r2, [r3, #0]

		/* Create File with name "stm32.txt" and file access is write */
		fresult = f_open(&myfile,"stm.txt",FA_CREATE_ALWAYS|FA_WRITE);
 800075c:	220a      	movs	r2, #10
 800075e:	4912      	ldr	r1, [pc, #72]	; (80007a8 <Sd_Card_Manager+0x78>)
 8000760:	4812      	ldr	r0, [pc, #72]	; (80007ac <Sd_Card_Manager+0x7c>)
 8000762:	f008 fbd5 	bl	8008f10 <f_open>
 8000766:	4603      	mov	r3, r0
 8000768:	461a      	mov	r2, r3
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <Sd_Card_Manager+0x74>)
 800076c:	701a      	strb	r2, [r3, #0]

		byte_written = f_printf(&myfile,"%s",write_data);
 800076e:	4a10      	ldr	r2, [pc, #64]	; (80007b0 <Sd_Card_Manager+0x80>)
 8000770:	4910      	ldr	r1, [pc, #64]	; (80007b4 <Sd_Card_Manager+0x84>)
 8000772:	480e      	ldr	r0, [pc, #56]	; (80007ac <Sd_Card_Manager+0x7c>)
 8000774:	f009 f818 	bl	80097a8 <f_printf>
 8000778:	4603      	mov	r3, r0
 800077a:	b2da      	uxtb	r2, r3
 800077c:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <Sd_Card_Manager+0x88>)
 800077e:	701a      	strb	r2, [r3, #0]

		fresult = f_close(&myfile);
 8000780:	480a      	ldr	r0, [pc, #40]	; (80007ac <Sd_Card_Manager+0x7c>)
 8000782:	f008 ff76 	bl	8009672 <f_close>
 8000786:	4603      	mov	r3, r0
 8000788:	461a      	mov	r2, r3
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <Sd_Card_Manager+0x74>)
 800078c:	701a      	strb	r2, [r3, #0]
	}
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	0800a6a8 	.word	0x0800a6a8
 8000798:	0800a6e0 	.word	0x0800a6e0
 800079c:	0800a70c 	.word	0x0800a70c
 80007a0:	20000200 	.word	0x20000200
 80007a4:	200001fc 	.word	0x200001fc
 80007a8:	0800a710 	.word	0x0800a710
 80007ac:	20000430 	.word	0x20000430
 80007b0:	20000008 	.word	0x20000008
 80007b4:	0800a718 	.word	0x0800a718
 80007b8:	200000ac 	.word	0x200000ac

080007bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
	int32_t timeout;
	/* USER CODE END Boot_Mode_Sequence_0 */

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 80007c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007c6:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007c8:	bf00      	nop
 80007ca:	4b28      	ldr	r3, [pc, #160]	; (800086c <main+0xb0>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d004      	beq.n	80007e0 <main+0x24>
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	1e5a      	subs	r2, r3, #1
 80007da:	607a      	str	r2, [r7, #4]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	dcf4      	bgt.n	80007ca <main+0xe>
	if ( timeout < 0 )
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	da01      	bge.n	80007ea <main+0x2e>
	{
	Error_Handler();
 80007e6:	f000 f97d 	bl	8000ae4 <Error_Handler>
	}
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80007ea:	f000 fb5d 	bl	8000ea8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80007ee:	f000 f841 	bl	8000874 <SystemClock_Config>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 80007f2:	4b1e      	ldr	r3, [pc, #120]	; (800086c <main+0xb0>)
 80007f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f8:	4a1c      	ldr	r2, [pc, #112]	; (800086c <main+0xb0>)
 80007fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000802:	4b1a      	ldr	r3, [pc, #104]	; (800086c <main+0xb0>)
 8000804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000810:	2000      	movs	r0, #0
 8000812:	f001 f90f 	bl	8001a34 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8000816:	2100      	movs	r1, #0
 8000818:	2000      	movs	r0, #0
 800081a:	f001 f925 	bl	8001a68 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 800081e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000822:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000824:	bf00      	nop
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <main+0xb0>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800082e:	2b00      	cmp	r3, #0
 8000830:	d104      	bne.n	800083c <main+0x80>
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	1e5a      	subs	r2, r3, #1
 8000836:	607a      	str	r2, [r7, #4]
 8000838:	2b00      	cmp	r3, #0
 800083a:	dcf4      	bgt.n	8000826 <main+0x6a>
	if ( timeout < 0 )
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2b00      	cmp	r3, #0
 8000840:	da01      	bge.n	8000846 <main+0x8a>
	{
	Error_Handler();
 8000842:	f000 f94f 	bl	8000ae4 <Error_Handler>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000846:	f000 f905 	bl	8000a54 <MX_GPIO_Init>
	MX_SDMMC1_SD_Init();
 800084a:	f000 f891 	bl	8000970 <MX_SDMMC1_SD_Init>
	MX_UART8_Init();
 800084e:	f000 f8b5 	bl	80009bc <MX_UART8_Init>
	MX_FATFS_Init();
 8000852:	f006 fc5b 	bl	800710c <MX_FATFS_Init>

	/* USER CODE BEGIN 2 */
	Sd_Card_Manager();
 8000856:	f7ff ff6b 	bl	8000730 <Sd_Card_Manager>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
	/* USER CODE END WHILE */
		printf("=====Tran Minh Tan=====\r\n");
 800085a:	4805      	ldr	r0, [pc, #20]	; (8000870 <main+0xb4>)
 800085c:	f009 fac0 	bl	8009de0 <puts>
		HAL_Delay(1000);
 8000860:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000864:	f000 fbb2 	bl	8000fcc <HAL_Delay>
		printf("=====Tran Minh Tan=====\r\n");
 8000868:	e7f7      	b.n	800085a <main+0x9e>
 800086a:	bf00      	nop
 800086c:	58024400 	.word	0x58024400
 8000870:	0800a71c 	.word	0x0800a71c

08000874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b09e      	sub	sp, #120	; 0x78
 8000878:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 800087a:	2300      	movs	r3, #0
 800087c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000880:	2004      	movs	r0, #4
 8000882:	f001 f905 	bl	8001a90 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	4b37      	ldr	r3, [pc, #220]	; (8000968 <SystemClock_Config+0xf4>)
 800088c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800088e:	4a36      	ldr	r2, [pc, #216]	; (8000968 <SystemClock_Config+0xf4>)
 8000890:	f023 0301 	bic.w	r3, r3, #1
 8000894:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000896:	4b34      	ldr	r3, [pc, #208]	; (8000968 <SystemClock_Config+0xf4>)
 8000898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	4b32      	ldr	r3, [pc, #200]	; (800096c <SystemClock_Config+0xf8>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	4a31      	ldr	r2, [pc, #196]	; (800096c <SystemClock_Config+0xf8>)
 80008a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008aa:	6193      	str	r3, [r2, #24]
 80008ac:	4b2f      	ldr	r3, [pc, #188]	; (800096c <SystemClock_Config+0xf8>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008b8:	bf00      	nop
 80008ba:	4b2c      	ldr	r3, [pc, #176]	; (800096c <SystemClock_Config+0xf8>)
 80008bc:	699b      	ldr	r3, [r3, #24]
 80008be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008c6:	d1f8      	bne.n	80008ba <SystemClock_Config+0x46>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008c8:	2301      	movs	r3, #1
 80008ca:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008d0:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 80008d2:	2300      	movs	r3, #0
 80008d4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008da:	2302      	movs	r3, #2
 80008dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008de:	2302      	movs	r3, #2
 80008e0:	633b      	str	r3, [r7, #48]	; 0x30

  RCC_OscInitStruct.PLL.PLLM = 5;
 80008e2:	2305      	movs	r3, #5
 80008e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 160;
 80008e6:	23a0      	movs	r3, #160	; 0xa0
 80008e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008ee:	2302      	movs	r3, #2
 80008f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008f2:	2302      	movs	r3, #2
 80008f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008f6:	2304      	movs	r3, #4
 80008f8:	643b      	str	r3, [r7, #64]	; 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008fa:	2300      	movs	r3, #0
 80008fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80008fe:	2308      	movs	r3, #8
 8000900:	64bb      	str	r3, [r7, #72]	; 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000902:	f107 0308 	add.w	r3, r7, #8
 8000906:	4618      	mov	r0, r3
 8000908:	f001 f91c 	bl	8001b44 <HAL_RCC_OscConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 8000912:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800091a:	f000 f8e3 	bl	8000ae4 <Error_Handler>
  }

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 800091e:	233f      	movs	r3, #63	; 0x3f
 8000920:	657b      	str	r3, [r7, #84]	; 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000922:	2303      	movs	r3, #3
 8000924:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000926:	2300      	movs	r3, #0
 8000928:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800092a:	2308      	movs	r3, #8
 800092c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800092e:	2340      	movs	r3, #64	; 0x40
 8000930:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000932:	2340      	movs	r3, #64	; 0x40
 8000934:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000936:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800093a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800093c:	2340      	movs	r3, #64	; 0x40
 800093e:	673b      	str	r3, [r7, #112]	; 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8000940:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000944:	2104      	movs	r1, #4
 8000946:	4618      	mov	r0, r3
 8000948:	f001 fd0c 	bl	8002364 <HAL_RCC_ClockConfig>
 800094c:	4603      	mov	r3, r0
 800094e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 8000952:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <SystemClock_Config+0xea>
  {
    Error_Handler();
 800095a:	f000 f8c3 	bl	8000ae4 <Error_Handler>

  __HAL_RCC_SYSCFG_CLK_ENABLE() ;

  HAL_EnableCompensationCell();
  */
}
 800095e:	bf00      	nop
 8000960:	3778      	adds	r7, #120	; 0x78
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	58000400 	.word	0x58000400
 800096c:	58024800 	.word	0x58024800

08000970 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000974:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <MX_SDMMC1_SD_Init+0x44>)
 8000976:	4a10      	ldr	r2, [pc, #64]	; (80009b8 <MX_SDMMC1_SD_Init+0x48>)
 8000978:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MX_SDMMC1_SD_Init+0x44>)
 800097c:	2200      	movs	r2, #0
 800097e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <MX_SDMMC1_SD_Init+0x44>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <MX_SDMMC1_SD_Init+0x44>)
 8000988:	2200      	movs	r2, #0
 800098a:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800098c:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <MX_SDMMC1_SD_Init+0x44>)
 800098e:	2200      	movs	r2, #0
 8000990:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <MX_SDMMC1_SD_Init+0x44>)
 8000994:	2200      	movs	r2, #0
 8000996:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <MX_SDMMC1_SD_Init+0x44>)
 800099a:	2201      	movs	r2, #1
 800099c:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_SDMMC1_SD_Init+0x44>)
 80009a0:	f002 ff34 	bl	800380c <HAL_SD_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_SDMMC1_SD_Init+0x3e>
  {
    Error_Handler();
 80009aa:	f000 f89b 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	200000f0 	.word	0x200000f0
 80009b8:	52007000 	.word	0x52007000

080009bc <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80009c0:	4b22      	ldr	r3, [pc, #136]	; (8000a4c <MX_UART8_Init+0x90>)
 80009c2:	4a23      	ldr	r2, [pc, #140]	; (8000a50 <MX_UART8_Init+0x94>)
 80009c4:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80009c6:	4b21      	ldr	r3, [pc, #132]	; (8000a4c <MX_UART8_Init+0x90>)
 80009c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009cc:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80009ce:	4b1f      	ldr	r3, [pc, #124]	; (8000a4c <MX_UART8_Init+0x90>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80009d4:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <MX_UART8_Init+0x90>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80009da:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <MX_UART8_Init+0x90>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80009e0:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <MX_UART8_Init+0x90>)
 80009e2:	220c      	movs	r2, #12
 80009e4:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e6:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <MX_UART8_Init+0x90>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ec:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <MX_UART8_Init+0x90>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009f2:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <MX_UART8_Init+0x90>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009f8:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <MX_UART8_Init+0x90>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009fe:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <MX_UART8_Init+0x90>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000a04:	4811      	ldr	r0, [pc, #68]	; (8000a4c <MX_UART8_Init+0x90>)
 8000a06:	f004 fabd 	bl	8004f84 <HAL_UART_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8000a10:	f000 f868 	bl	8000ae4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a14:	2100      	movs	r1, #0
 8000a16:	480d      	ldr	r0, [pc, #52]	; (8000a4c <MX_UART8_Init+0x90>)
 8000a18:	f005 fca7 	bl	800636a <HAL_UARTEx_SetTxFifoThreshold>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8000a22:	f000 f85f 	bl	8000ae4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a26:	2100      	movs	r1, #0
 8000a28:	4808      	ldr	r0, [pc, #32]	; (8000a4c <MX_UART8_Init+0x90>)
 8000a2a:	f005 fcdc 	bl	80063e6 <HAL_UARTEx_SetRxFifoThreshold>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8000a34:	f000 f856 	bl	8000ae4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000a38:	4804      	ldr	r0, [pc, #16]	; (8000a4c <MX_UART8_Init+0x90>)
 8000a3a:	f005 fc5d 	bl	80062f8 <HAL_UARTEx_DisableFifoMode>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8000a44:	f000 f84e 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000170 	.word	0x20000170
 8000a50:	40007c00 	.word	0x40007c00

08000a54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5a:	4b21      	ldr	r3, [pc, #132]	; (8000ae0 <MX_GPIO_Init+0x8c>)
 8000a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a60:	4a1f      	ldr	r2, [pc, #124]	; (8000ae0 <MX_GPIO_Init+0x8c>)
 8000a62:	f043 0304 	orr.w	r3, r3, #4
 8000a66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ae0 <MX_GPIO_Init+0x8c>)
 8000a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a70:	f003 0304 	and.w	r3, r3, #4
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a78:	4b19      	ldr	r3, [pc, #100]	; (8000ae0 <MX_GPIO_Init+0x8c>)
 8000a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a7e:	4a18      	ldr	r2, [pc, #96]	; (8000ae0 <MX_GPIO_Init+0x8c>)
 8000a80:	f043 0308 	orr.w	r3, r3, #8
 8000a84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a88:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <MX_GPIO_Init+0x8c>)
 8000a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a8e:	f003 0308 	and.w	r3, r3, #8
 8000a92:	60bb      	str	r3, [r7, #8]
 8000a94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a96:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <MX_GPIO_Init+0x8c>)
 8000a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9c:	4a10      	ldr	r2, [pc, #64]	; (8000ae0 <MX_GPIO_Init+0x8c>)
 8000a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aa2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <MX_GPIO_Init+0x8c>)
 8000aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000ab4:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <MX_GPIO_Init+0x8c>)
 8000ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aba:	4a09      	ldr	r2, [pc, #36]	; (8000ae0 <MX_GPIO_Init+0x8c>)
 8000abc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ac0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <MX_GPIO_Init+0x8c>)
 8000ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ace:	603b      	str	r3, [r7, #0]
 8000ad0:	683b      	ldr	r3, [r7, #0]

}
 8000ad2:	bf00      	nop
 8000ad4:	3714      	adds	r7, #20
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	58024400 	.word	0x58024400

08000ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
//  __disable_irq();
//  while (1)
//  {
//  }
  /* USER CODE END Error_Handler_Debug */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
	...

08000af4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afa:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <HAL_MspInit+0x30>)
 8000afc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b00:	4a08      	ldr	r2, [pc, #32]	; (8000b24 <HAL_MspInit+0x30>)
 8000b02:	f043 0302 	orr.w	r3, r3, #2
 8000b06:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_MspInit+0x30>)
 8000b0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b10:	f003 0302 	and.w	r3, r3, #2
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	58024400 	.word	0x58024400

08000b28 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	; 0x28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a2a      	ldr	r2, [pc, #168]	; (8000bf0 <HAL_SD_MspInit+0xc8>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d14d      	bne.n	8000be6 <HAL_SD_MspInit+0xbe>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000b4a:	4b2a      	ldr	r3, [pc, #168]	; (8000bf4 <HAL_SD_MspInit+0xcc>)
 8000b4c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000b50:	4a28      	ldr	r2, [pc, #160]	; (8000bf4 <HAL_SD_MspInit+0xcc>)
 8000b52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b56:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000b5a:	4b26      	ldr	r3, [pc, #152]	; (8000bf4 <HAL_SD_MspInit+0xcc>)
 8000b5c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b68:	4b22      	ldr	r3, [pc, #136]	; (8000bf4 <HAL_SD_MspInit+0xcc>)
 8000b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b6e:	4a21      	ldr	r2, [pc, #132]	; (8000bf4 <HAL_SD_MspInit+0xcc>)
 8000b70:	f043 0304 	orr.w	r3, r3, #4
 8000b74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b78:	4b1e      	ldr	r3, [pc, #120]	; (8000bf4 <HAL_SD_MspInit+0xcc>)
 8000b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b7e:	f003 0304 	and.w	r3, r3, #4
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b86:	4b1b      	ldr	r3, [pc, #108]	; (8000bf4 <HAL_SD_MspInit+0xcc>)
 8000b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8c:	4a19      	ldr	r2, [pc, #100]	; (8000bf4 <HAL_SD_MspInit+0xcc>)
 8000b8e:	f043 0308 	orr.w	r3, r3, #8
 8000b92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b96:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <HAL_SD_MspInit+0xcc>)
 8000b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9c:	f003 0308 	and.w	r3, r3, #8
 8000ba0:	60bb      	str	r3, [r7, #8]
 8000ba2:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 8000ba4:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000ba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000baa:	2302      	movs	r3, #2
 8000bac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000bb6:	230c      	movs	r3, #12
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bba:	f107 0314 	add.w	r3, r7, #20
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <HAL_SD_MspInit+0xd0>)
 8000bc2:	f000 fd87 	bl	80016d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bc6:	2304      	movs	r3, #4
 8000bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000bd6:	230c      	movs	r3, #12
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	4619      	mov	r1, r3
 8000be0:	4806      	ldr	r0, [pc, #24]	; (8000bfc <HAL_SD_MspInit+0xd4>)
 8000be2:	f000 fd77 	bl	80016d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8000be6:	bf00      	nop
 8000be8:	3728      	adds	r7, #40	; 0x28
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	52007000 	.word	0x52007000
 8000bf4:	58024400 	.word	0x58024400
 8000bf8:	58020800 	.word	0x58020800
 8000bfc:	58020c00 	.word	0x58020c00

08000c00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08a      	sub	sp, #40	; 0x28
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a1e      	ldr	r2, [pc, #120]	; (8000c98 <HAL_UART_MspInit+0x98>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d136      	bne.n	8000c90 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8000c22:	4b1e      	ldr	r3, [pc, #120]	; (8000c9c <HAL_UART_MspInit+0x9c>)
 8000c24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c28:	4a1c      	ldr	r2, [pc, #112]	; (8000c9c <HAL_UART_MspInit+0x9c>)
 8000c2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c2e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c32:	4b1a      	ldr	r3, [pc, #104]	; (8000c9c <HAL_UART_MspInit+0x9c>)
 8000c34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000c3c:	613b      	str	r3, [r7, #16]
 8000c3e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000c40:	4b16      	ldr	r3, [pc, #88]	; (8000c9c <HAL_UART_MspInit+0x9c>)
 8000c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c46:	4a15      	ldr	r2, [pc, #84]	; (8000c9c <HAL_UART_MspInit+0x9c>)
 8000c48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c50:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <HAL_UART_MspInit+0x9c>)
 8000c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
    /**UART8 GPIO Configuration
    PJ9     ------> UART8_RX
    PJ8     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8000c5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8000c70:	2308      	movs	r3, #8
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4809      	ldr	r0, [pc, #36]	; (8000ca0 <HAL_UART_MspInit+0xa0>)
 8000c7c:	f000 fd2a 	bl	80016d4 <HAL_GPIO_Init>

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2100      	movs	r1, #0
 8000c84:	2053      	movs	r0, #83	; 0x53
 8000c86:	f000 faac 	bl	80011e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8000c8a:	2053      	movs	r0, #83	; 0x53
 8000c8c:	f000 fac3 	bl	8001216 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }

}
 8000c90:	bf00      	nop
 8000c92:	3728      	adds	r7, #40	; 0x28
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40007c00 	.word	0x40007c00
 8000c9c:	58024400 	.word	0x58024400
 8000ca0:	58022400 	.word	0x58022400

08000ca4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <NMI_Handler+0x4>

08000caa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cae:	e7fe      	b.n	8000cae <HardFault_Handler+0x4>

08000cb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb4:	e7fe      	b.n	8000cb4 <MemManage_Handler+0x4>

08000cb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cba:	e7fe      	b.n	8000cba <BusFault_Handler+0x4>

08000cbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <UsageFault_Handler+0x4>

08000cc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf0:	f000 f94c 	bl	8000f8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8000cfc:	4802      	ldr	r0, [pc, #8]	; (8000d08 <UART8_IRQHandler+0x10>)
 8000cfe:	f004 fa27 	bl	8005150 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000170 	.word	0x20000170

08000d0c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]
 8000d1c:	e00a      	b.n	8000d34 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d1e:	f3af 8000 	nop.w
 8000d22:	4601      	mov	r1, r0
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	1c5a      	adds	r2, r3, #1
 8000d28:	60ba      	str	r2, [r7, #8]
 8000d2a:	b2ca      	uxtb	r2, r1
 8000d2c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	3301      	adds	r3, #1
 8000d32:	617b      	str	r3, [r7, #20]
 8000d34:	697a      	ldr	r2, [r7, #20]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	dbf0      	blt.n	8000d1e <_read+0x12>
	}

return len;
 8000d3c:	687b      	ldr	r3, [r7, #4]
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3718      	adds	r7, #24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b086      	sub	sp, #24
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	60f8      	str	r0, [r7, #12]
 8000d4e:	60b9      	str	r1, [r7, #8]
 8000d50:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d52:	2300      	movs	r3, #0
 8000d54:	617b      	str	r3, [r7, #20]
 8000d56:	e009      	b.n	8000d6c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	1c5a      	adds	r2, r3, #1
 8000d5c:	60ba      	str	r2, [r7, #8]
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff fccf 	bl	8000704 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	617b      	str	r3, [r7, #20]
 8000d6c:	697a      	ldr	r2, [r7, #20]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	dbf1      	blt.n	8000d58 <_write+0x12>
	}
	return len;
 8000d74:	687b      	ldr	r3, [r7, #4]
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3718      	adds	r7, #24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <_close>:

int _close(int file)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	b083      	sub	sp, #12
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
	return -1;
 8000d86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d96:	b480      	push	{r7}
 8000d98:	b083      	sub	sp, #12
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
 8000d9e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000da6:	605a      	str	r2, [r3, #4]
	return 0;
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <_isatty>:

int _isatty(int file)
{
 8000db6:	b480      	push	{r7}
 8000db8:	b083      	sub	sp, #12
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
	return 1;
 8000dbe:	2301      	movs	r3, #1
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
	return 0;
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3714      	adds	r7, #20
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
	...

08000de8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000df0:	4a14      	ldr	r2, [pc, #80]	; (8000e44 <_sbrk+0x5c>)
 8000df2:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <_sbrk+0x60>)
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dfc:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <_sbrk+0x64>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d102      	bne.n	8000e0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e04:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <_sbrk+0x64>)
 8000e06:	4a12      	ldr	r2, [pc, #72]	; (8000e50 <_sbrk+0x68>)
 8000e08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e0a:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <_sbrk+0x64>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4413      	add	r3, r2
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d207      	bcs.n	8000e28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e18:	f008 ff42 	bl	8009ca0 <__errno>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	220c      	movs	r2, #12
 8000e20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e22:	f04f 33ff 	mov.w	r3, #4294967295
 8000e26:	e009      	b.n	8000e3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e28:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <_sbrk+0x64>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e2e:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <_sbrk+0x64>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4413      	add	r3, r2
 8000e36:	4a05      	ldr	r2, [pc, #20]	; (8000e4c <_sbrk+0x64>)
 8000e38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3718      	adds	r7, #24
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20020000 	.word	0x20020000
 8000e48:	00000400 	.word	0x00000400
 8000e4c:	200000b0 	.word	0x200000b0
 8000e50:	20000ae0 	.word	0x20000ae0

08000e54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e8c <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000e58:	f7ff fbba 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e5c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e5e:	e003      	b.n	8000e68 <LoopCopyDataInit>

08000e60 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e60:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8000e62:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e64:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e66:	3104      	adds	r1, #4

08000e68 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e68:	480a      	ldr	r0, [pc, #40]	; (8000e94 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8000e6a:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8000e6c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e6e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e70:	d3f6      	bcc.n	8000e60 <CopyDataInit>
  ldr  r2, =_sbss
 8000e72:	4a0a      	ldr	r2, [pc, #40]	; (8000e9c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8000e74:	e002      	b.n	8000e7c <LoopFillZerobss>

08000e76 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e76:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e78:	f842 3b04 	str.w	r3, [r2], #4

08000e7c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e7c:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8000e7e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e80:	d3f9      	bcc.n	8000e76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e82:	f008 ff13 	bl	8009cac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e86:	f7ff fc99 	bl	80007bc <main>
  bx  lr    
 8000e8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e8c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e90:	0800a8bc 	.word	0x0800a8bc
  ldr  r0, =_sdata
 8000e94:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e98:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8000e9c:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8000ea0:	20000adc 	.word	0x20000adc

08000ea4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea4:	e7fe      	b.n	8000ea4 <ADC3_IRQHandler>
	...

08000ea8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eae:	2003      	movs	r0, #3
 8000eb0:	f000 f98c 	bl	80011cc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000eb4:	f001 fc0c 	bl	80026d0 <HAL_RCC_GetSysClockFreq>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <HAL_Init+0x68>)
 8000ebc:	699b      	ldr	r3, [r3, #24]
 8000ebe:	0a1b      	lsrs	r3, r3, #8
 8000ec0:	f003 030f 	and.w	r3, r3, #15
 8000ec4:	4913      	ldr	r1, [pc, #76]	; (8000f14 <HAL_Init+0x6c>)
 8000ec6:	5ccb      	ldrb	r3, [r1, r3]
 8000ec8:	f003 031f 	and.w	r3, r3, #31
 8000ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8000ed0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ed2:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <HAL_Init+0x68>)
 8000ed4:	699b      	ldr	r3, [r3, #24]
 8000ed6:	f003 030f 	and.w	r3, r3, #15
 8000eda:	4a0e      	ldr	r2, [pc, #56]	; (8000f14 <HAL_Init+0x6c>)
 8000edc:	5cd3      	ldrb	r3, [r2, r3]
 8000ede:	f003 031f 	and.w	r3, r3, #31
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ee8:	4a0b      	ldr	r2, [pc, #44]	; (8000f18 <HAL_Init+0x70>)
 8000eea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000eec:	4a0b      	ldr	r2, [pc, #44]	; (8000f1c <HAL_Init+0x74>)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f000 f814 	bl	8000f20 <HAL_InitTick>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e002      	b.n	8000f08 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f02:	f7ff fdf7 	bl	8000af4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f06:	2300      	movs	r3, #0
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	58024400 	.word	0x58024400
 8000f14:	0800a78c 	.word	0x0800a78c
 8000f18:	20000004 	.word	0x20000004
 8000f1c:	20000000 	.word	0x20000000

08000f20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f28:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <HAL_InitTick+0x60>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d101      	bne.n	8000f34 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e021      	b.n	8000f78 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f34:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <HAL_InitTick+0x64>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <HAL_InitTick+0x60>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 f971 	bl	8001232 <HAL_SYSTICK_Config>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e00e      	b.n	8000f78 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2b0f      	cmp	r3, #15
 8000f5e:	d80a      	bhi.n	8000f76 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f60:	2200      	movs	r2, #0
 8000f62:	6879      	ldr	r1, [r7, #4]
 8000f64:	f04f 30ff 	mov.w	r0, #4294967295
 8000f68:	f000 f93b 	bl	80011e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f6c:	4a06      	ldr	r2, [pc, #24]	; (8000f88 <HAL_InitTick+0x68>)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f72:	2300      	movs	r3, #0
 8000f74:	e000      	b.n	8000f78 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000028 	.word	0x20000028
 8000f84:	20000000 	.word	0x20000000
 8000f88:	20000024 	.word	0x20000024

08000f8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_IncTick+0x20>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_IncTick+0x24>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <HAL_IncTick+0x24>)
 8000f9e:	6013      	str	r3, [r2, #0]
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	20000028 	.word	0x20000028
 8000fb0:	20000660 	.word	0x20000660

08000fb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb8:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <HAL_GetTick+0x14>)
 8000fba:	681b      	ldr	r3, [r3, #0]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	20000660 	.word	0x20000660

08000fcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fd4:	f7ff ffee 	bl	8000fb4 <HAL_GetTick>
 8000fd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe4:	d005      	beq.n	8000ff2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <HAL_Delay+0x44>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	461a      	mov	r2, r3
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4413      	add	r3, r2
 8000ff0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ff2:	bf00      	nop
 8000ff4:	f7ff ffde 	bl	8000fb4 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	429a      	cmp	r2, r3
 8001002:	d8f7      	bhi.n	8000ff4 <HAL_Delay+0x28>
  {
  }
}
 8001004:	bf00      	nop
 8001006:	bf00      	nop
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000028 	.word	0x20000028

08001014 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001018:	4b03      	ldr	r3, [pc, #12]	; (8001028 <HAL_GetREVID+0x14>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	0c1b      	lsrs	r3, r3, #16
}
 800101e:	4618      	mov	r0, r3
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	5c001000 	.word	0x5c001000

0800102c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800103c:	4b0b      	ldr	r3, [pc, #44]	; (800106c <__NVIC_SetPriorityGrouping+0x40>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001042:	68ba      	ldr	r2, [r7, #8]
 8001044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001048:	4013      	ands	r3, r2
 800104a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <__NVIC_SetPriorityGrouping+0x44>)
 8001056:	4313      	orrs	r3, r2
 8001058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800105a:	4a04      	ldr	r2, [pc, #16]	; (800106c <__NVIC_SetPriorityGrouping+0x40>)
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	60d3      	str	r3, [r2, #12]
}
 8001060:	bf00      	nop
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000ed00 	.word	0xe000ed00
 8001070:	05fa0000 	.word	0x05fa0000

08001074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001078:	4b04      	ldr	r3, [pc, #16]	; (800108c <__NVIC_GetPriorityGrouping+0x18>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	0a1b      	lsrs	r3, r3, #8
 800107e:	f003 0307 	and.w	r3, r3, #7
}
 8001082:	4618      	mov	r0, r3
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800109a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	db0b      	blt.n	80010ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010a2:	88fb      	ldrh	r3, [r7, #6]
 80010a4:	f003 021f 	and.w	r2, r3, #31
 80010a8:	4907      	ldr	r1, [pc, #28]	; (80010c8 <__NVIC_EnableIRQ+0x38>)
 80010aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010ae:	095b      	lsrs	r3, r3, #5
 80010b0:	2001      	movs	r0, #1
 80010b2:	fa00 f202 	lsl.w	r2, r0, r2
 80010b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	e000e100 	.word	0xe000e100

080010cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	6039      	str	r1, [r7, #0]
 80010d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	db0a      	blt.n	80010f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	490c      	ldr	r1, [pc, #48]	; (8001118 <__NVIC_SetPriority+0x4c>)
 80010e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010ea:	0112      	lsls	r2, r2, #4
 80010ec:	b2d2      	uxtb	r2, r2
 80010ee:	440b      	add	r3, r1
 80010f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f4:	e00a      	b.n	800110c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	4908      	ldr	r1, [pc, #32]	; (800111c <__NVIC_SetPriority+0x50>)
 80010fc:	88fb      	ldrh	r3, [r7, #6]
 80010fe:	f003 030f 	and.w	r3, r3, #15
 8001102:	3b04      	subs	r3, #4
 8001104:	0112      	lsls	r2, r2, #4
 8001106:	b2d2      	uxtb	r2, r2
 8001108:	440b      	add	r3, r1
 800110a:	761a      	strb	r2, [r3, #24]
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000e100 	.word	0xe000e100
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001120:	b480      	push	{r7}
 8001122:	b089      	sub	sp, #36	; 0x24
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	f1c3 0307 	rsb	r3, r3, #7
 800113a:	2b04      	cmp	r3, #4
 800113c:	bf28      	it	cs
 800113e:	2304      	movcs	r3, #4
 8001140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3304      	adds	r3, #4
 8001146:	2b06      	cmp	r3, #6
 8001148:	d902      	bls.n	8001150 <NVIC_EncodePriority+0x30>
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	3b03      	subs	r3, #3
 800114e:	e000      	b.n	8001152 <NVIC_EncodePriority+0x32>
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001154:	f04f 32ff 	mov.w	r2, #4294967295
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43da      	mvns	r2, r3
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	401a      	ands	r2, r3
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001168:	f04f 31ff 	mov.w	r1, #4294967295
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	fa01 f303 	lsl.w	r3, r1, r3
 8001172:	43d9      	mvns	r1, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001178:	4313      	orrs	r3, r2
         );
}
 800117a:	4618      	mov	r0, r3
 800117c:	3724      	adds	r7, #36	; 0x24
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
	...

08001188 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3b01      	subs	r3, #1
 8001194:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001198:	d301      	bcc.n	800119e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800119a:	2301      	movs	r3, #1
 800119c:	e00f      	b.n	80011be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800119e:	4a0a      	ldr	r2, [pc, #40]	; (80011c8 <SysTick_Config+0x40>)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011a6:	210f      	movs	r1, #15
 80011a8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ac:	f7ff ff8e 	bl	80010cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <SysTick_Config+0x40>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011b6:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <SysTick_Config+0x40>)
 80011b8:	2207      	movs	r2, #7
 80011ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	e000e010 	.word	0xe000e010

080011cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff ff29 	bl	800102c <__NVIC_SetPriorityGrouping>
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b086      	sub	sp, #24
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	4603      	mov	r3, r0
 80011ea:	60b9      	str	r1, [r7, #8]
 80011ec:	607a      	str	r2, [r7, #4]
 80011ee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011f0:	f7ff ff40 	bl	8001074 <__NVIC_GetPriorityGrouping>
 80011f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	68b9      	ldr	r1, [r7, #8]
 80011fa:	6978      	ldr	r0, [r7, #20]
 80011fc:	f7ff ff90 	bl	8001120 <NVIC_EncodePriority>
 8001200:	4602      	mov	r2, r0
 8001202:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001206:	4611      	mov	r1, r2
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff5f 	bl	80010cc <__NVIC_SetPriority>
}
 800120e:	bf00      	nop
 8001210:	3718      	adds	r7, #24
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	4603      	mov	r3, r0
 800121e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001220:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff33 	bl	8001090 <__NVIC_EnableIRQ>
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff ffa4 	bl	8001188 <SysTick_Config>
 8001240:	4603      	mov	r3, r0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d101      	bne.n	800125e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e205      	b.n	800166a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2b02      	cmp	r3, #2
 8001268:	d004      	beq.n	8001274 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2280      	movs	r2, #128	; 0x80
 800126e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e1fa      	b.n	800166a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a8c      	ldr	r2, [pc, #560]	; (80014ac <HAL_DMA_Abort_IT+0x260>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d04a      	beq.n	8001314 <HAL_DMA_Abort_IT+0xc8>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a8b      	ldr	r2, [pc, #556]	; (80014b0 <HAL_DMA_Abort_IT+0x264>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d045      	beq.n	8001314 <HAL_DMA_Abort_IT+0xc8>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a89      	ldr	r2, [pc, #548]	; (80014b4 <HAL_DMA_Abort_IT+0x268>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d040      	beq.n	8001314 <HAL_DMA_Abort_IT+0xc8>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a88      	ldr	r2, [pc, #544]	; (80014b8 <HAL_DMA_Abort_IT+0x26c>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d03b      	beq.n	8001314 <HAL_DMA_Abort_IT+0xc8>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a86      	ldr	r2, [pc, #536]	; (80014bc <HAL_DMA_Abort_IT+0x270>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d036      	beq.n	8001314 <HAL_DMA_Abort_IT+0xc8>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a85      	ldr	r2, [pc, #532]	; (80014c0 <HAL_DMA_Abort_IT+0x274>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d031      	beq.n	8001314 <HAL_DMA_Abort_IT+0xc8>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a83      	ldr	r2, [pc, #524]	; (80014c4 <HAL_DMA_Abort_IT+0x278>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d02c      	beq.n	8001314 <HAL_DMA_Abort_IT+0xc8>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a82      	ldr	r2, [pc, #520]	; (80014c8 <HAL_DMA_Abort_IT+0x27c>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d027      	beq.n	8001314 <HAL_DMA_Abort_IT+0xc8>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a80      	ldr	r2, [pc, #512]	; (80014cc <HAL_DMA_Abort_IT+0x280>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d022      	beq.n	8001314 <HAL_DMA_Abort_IT+0xc8>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a7f      	ldr	r2, [pc, #508]	; (80014d0 <HAL_DMA_Abort_IT+0x284>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d01d      	beq.n	8001314 <HAL_DMA_Abort_IT+0xc8>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a7d      	ldr	r2, [pc, #500]	; (80014d4 <HAL_DMA_Abort_IT+0x288>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d018      	beq.n	8001314 <HAL_DMA_Abort_IT+0xc8>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a7c      	ldr	r2, [pc, #496]	; (80014d8 <HAL_DMA_Abort_IT+0x28c>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d013      	beq.n	8001314 <HAL_DMA_Abort_IT+0xc8>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a7a      	ldr	r2, [pc, #488]	; (80014dc <HAL_DMA_Abort_IT+0x290>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d00e      	beq.n	8001314 <HAL_DMA_Abort_IT+0xc8>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a79      	ldr	r2, [pc, #484]	; (80014e0 <HAL_DMA_Abort_IT+0x294>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d009      	beq.n	8001314 <HAL_DMA_Abort_IT+0xc8>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a77      	ldr	r2, [pc, #476]	; (80014e4 <HAL_DMA_Abort_IT+0x298>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d004      	beq.n	8001314 <HAL_DMA_Abort_IT+0xc8>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a76      	ldr	r2, [pc, #472]	; (80014e8 <HAL_DMA_Abort_IT+0x29c>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d101      	bne.n	8001318 <HAL_DMA_Abort_IT+0xcc>
 8001314:	2301      	movs	r3, #1
 8001316:	e000      	b.n	800131a <HAL_DMA_Abort_IT+0xce>
 8001318:	2300      	movs	r3, #0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d065      	beq.n	80013ea <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2204      	movs	r2, #4
 8001322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a60      	ldr	r2, [pc, #384]	; (80014ac <HAL_DMA_Abort_IT+0x260>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d04a      	beq.n	80013c6 <HAL_DMA_Abort_IT+0x17a>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a5e      	ldr	r2, [pc, #376]	; (80014b0 <HAL_DMA_Abort_IT+0x264>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d045      	beq.n	80013c6 <HAL_DMA_Abort_IT+0x17a>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a5d      	ldr	r2, [pc, #372]	; (80014b4 <HAL_DMA_Abort_IT+0x268>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d040      	beq.n	80013c6 <HAL_DMA_Abort_IT+0x17a>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a5b      	ldr	r2, [pc, #364]	; (80014b8 <HAL_DMA_Abort_IT+0x26c>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d03b      	beq.n	80013c6 <HAL_DMA_Abort_IT+0x17a>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a5a      	ldr	r2, [pc, #360]	; (80014bc <HAL_DMA_Abort_IT+0x270>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d036      	beq.n	80013c6 <HAL_DMA_Abort_IT+0x17a>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a58      	ldr	r2, [pc, #352]	; (80014c0 <HAL_DMA_Abort_IT+0x274>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d031      	beq.n	80013c6 <HAL_DMA_Abort_IT+0x17a>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a57      	ldr	r2, [pc, #348]	; (80014c4 <HAL_DMA_Abort_IT+0x278>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d02c      	beq.n	80013c6 <HAL_DMA_Abort_IT+0x17a>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a55      	ldr	r2, [pc, #340]	; (80014c8 <HAL_DMA_Abort_IT+0x27c>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d027      	beq.n	80013c6 <HAL_DMA_Abort_IT+0x17a>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a54      	ldr	r2, [pc, #336]	; (80014cc <HAL_DMA_Abort_IT+0x280>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d022      	beq.n	80013c6 <HAL_DMA_Abort_IT+0x17a>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a52      	ldr	r2, [pc, #328]	; (80014d0 <HAL_DMA_Abort_IT+0x284>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d01d      	beq.n	80013c6 <HAL_DMA_Abort_IT+0x17a>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a51      	ldr	r2, [pc, #324]	; (80014d4 <HAL_DMA_Abort_IT+0x288>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d018      	beq.n	80013c6 <HAL_DMA_Abort_IT+0x17a>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a4f      	ldr	r2, [pc, #316]	; (80014d8 <HAL_DMA_Abort_IT+0x28c>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d013      	beq.n	80013c6 <HAL_DMA_Abort_IT+0x17a>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a4e      	ldr	r2, [pc, #312]	; (80014dc <HAL_DMA_Abort_IT+0x290>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d00e      	beq.n	80013c6 <HAL_DMA_Abort_IT+0x17a>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a4c      	ldr	r2, [pc, #304]	; (80014e0 <HAL_DMA_Abort_IT+0x294>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d009      	beq.n	80013c6 <HAL_DMA_Abort_IT+0x17a>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a4b      	ldr	r2, [pc, #300]	; (80014e4 <HAL_DMA_Abort_IT+0x298>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d004      	beq.n	80013c6 <HAL_DMA_Abort_IT+0x17a>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a49      	ldr	r2, [pc, #292]	; (80014e8 <HAL_DMA_Abort_IT+0x29c>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d108      	bne.n	80013d8 <HAL_DMA_Abort_IT+0x18c>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f022 0201 	bic.w	r2, r2, #1
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	e147      	b.n	8001668 <HAL_DMA_Abort_IT+0x41c>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f022 0201 	bic.w	r2, r2, #1
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	e13e      	b.n	8001668 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f022 020e 	bic.w	r2, r2, #14
 80013f8:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a2b      	ldr	r2, [pc, #172]	; (80014ac <HAL_DMA_Abort_IT+0x260>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d04a      	beq.n	800149a <HAL_DMA_Abort_IT+0x24e>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a29      	ldr	r2, [pc, #164]	; (80014b0 <HAL_DMA_Abort_IT+0x264>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d045      	beq.n	800149a <HAL_DMA_Abort_IT+0x24e>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a28      	ldr	r2, [pc, #160]	; (80014b4 <HAL_DMA_Abort_IT+0x268>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d040      	beq.n	800149a <HAL_DMA_Abort_IT+0x24e>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a26      	ldr	r2, [pc, #152]	; (80014b8 <HAL_DMA_Abort_IT+0x26c>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d03b      	beq.n	800149a <HAL_DMA_Abort_IT+0x24e>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a25      	ldr	r2, [pc, #148]	; (80014bc <HAL_DMA_Abort_IT+0x270>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d036      	beq.n	800149a <HAL_DMA_Abort_IT+0x24e>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a23      	ldr	r2, [pc, #140]	; (80014c0 <HAL_DMA_Abort_IT+0x274>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d031      	beq.n	800149a <HAL_DMA_Abort_IT+0x24e>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a22      	ldr	r2, [pc, #136]	; (80014c4 <HAL_DMA_Abort_IT+0x278>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d02c      	beq.n	800149a <HAL_DMA_Abort_IT+0x24e>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a20      	ldr	r2, [pc, #128]	; (80014c8 <HAL_DMA_Abort_IT+0x27c>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d027      	beq.n	800149a <HAL_DMA_Abort_IT+0x24e>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a1f      	ldr	r2, [pc, #124]	; (80014cc <HAL_DMA_Abort_IT+0x280>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d022      	beq.n	800149a <HAL_DMA_Abort_IT+0x24e>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a1d      	ldr	r2, [pc, #116]	; (80014d0 <HAL_DMA_Abort_IT+0x284>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d01d      	beq.n	800149a <HAL_DMA_Abort_IT+0x24e>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a1c      	ldr	r2, [pc, #112]	; (80014d4 <HAL_DMA_Abort_IT+0x288>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d018      	beq.n	800149a <HAL_DMA_Abort_IT+0x24e>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a1a      	ldr	r2, [pc, #104]	; (80014d8 <HAL_DMA_Abort_IT+0x28c>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d013      	beq.n	800149a <HAL_DMA_Abort_IT+0x24e>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a19      	ldr	r2, [pc, #100]	; (80014dc <HAL_DMA_Abort_IT+0x290>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d00e      	beq.n	800149a <HAL_DMA_Abort_IT+0x24e>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a17      	ldr	r2, [pc, #92]	; (80014e0 <HAL_DMA_Abort_IT+0x294>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d009      	beq.n	800149a <HAL_DMA_Abort_IT+0x24e>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a16      	ldr	r2, [pc, #88]	; (80014e4 <HAL_DMA_Abort_IT+0x298>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d004      	beq.n	800149a <HAL_DMA_Abort_IT+0x24e>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a14      	ldr	r2, [pc, #80]	; (80014e8 <HAL_DMA_Abort_IT+0x29c>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d128      	bne.n	80014ec <HAL_DMA_Abort_IT+0x2a0>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f022 0201 	bic.w	r2, r2, #1
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	e027      	b.n	80014fc <HAL_DMA_Abort_IT+0x2b0>
 80014ac:	40020010 	.word	0x40020010
 80014b0:	40020028 	.word	0x40020028
 80014b4:	40020040 	.word	0x40020040
 80014b8:	40020058 	.word	0x40020058
 80014bc:	40020070 	.word	0x40020070
 80014c0:	40020088 	.word	0x40020088
 80014c4:	400200a0 	.word	0x400200a0
 80014c8:	400200b8 	.word	0x400200b8
 80014cc:	40020410 	.word	0x40020410
 80014d0:	40020428 	.word	0x40020428
 80014d4:	40020440 	.word	0x40020440
 80014d8:	40020458 	.word	0x40020458
 80014dc:	40020470 	.word	0x40020470
 80014e0:	40020488 	.word	0x40020488
 80014e4:	400204a0 	.word	0x400204a0
 80014e8:	400204b8 	.word	0x400204b8
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f022 0201 	bic.w	r2, r2, #1
 80014fa:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a5c      	ldr	r2, [pc, #368]	; (8001674 <HAL_DMA_Abort_IT+0x428>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d072      	beq.n	80015ec <HAL_DMA_Abort_IT+0x3a0>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a5b      	ldr	r2, [pc, #364]	; (8001678 <HAL_DMA_Abort_IT+0x42c>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d06d      	beq.n	80015ec <HAL_DMA_Abort_IT+0x3a0>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a59      	ldr	r2, [pc, #356]	; (800167c <HAL_DMA_Abort_IT+0x430>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d068      	beq.n	80015ec <HAL_DMA_Abort_IT+0x3a0>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a58      	ldr	r2, [pc, #352]	; (8001680 <HAL_DMA_Abort_IT+0x434>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d063      	beq.n	80015ec <HAL_DMA_Abort_IT+0x3a0>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a56      	ldr	r2, [pc, #344]	; (8001684 <HAL_DMA_Abort_IT+0x438>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d05e      	beq.n	80015ec <HAL_DMA_Abort_IT+0x3a0>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a55      	ldr	r2, [pc, #340]	; (8001688 <HAL_DMA_Abort_IT+0x43c>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d059      	beq.n	80015ec <HAL_DMA_Abort_IT+0x3a0>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a53      	ldr	r2, [pc, #332]	; (800168c <HAL_DMA_Abort_IT+0x440>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d054      	beq.n	80015ec <HAL_DMA_Abort_IT+0x3a0>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a52      	ldr	r2, [pc, #328]	; (8001690 <HAL_DMA_Abort_IT+0x444>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d04f      	beq.n	80015ec <HAL_DMA_Abort_IT+0x3a0>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a50      	ldr	r2, [pc, #320]	; (8001694 <HAL_DMA_Abort_IT+0x448>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d04a      	beq.n	80015ec <HAL_DMA_Abort_IT+0x3a0>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a4f      	ldr	r2, [pc, #316]	; (8001698 <HAL_DMA_Abort_IT+0x44c>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d045      	beq.n	80015ec <HAL_DMA_Abort_IT+0x3a0>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a4d      	ldr	r2, [pc, #308]	; (800169c <HAL_DMA_Abort_IT+0x450>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d040      	beq.n	80015ec <HAL_DMA_Abort_IT+0x3a0>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a4c      	ldr	r2, [pc, #304]	; (80016a0 <HAL_DMA_Abort_IT+0x454>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d03b      	beq.n	80015ec <HAL_DMA_Abort_IT+0x3a0>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a4a      	ldr	r2, [pc, #296]	; (80016a4 <HAL_DMA_Abort_IT+0x458>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d036      	beq.n	80015ec <HAL_DMA_Abort_IT+0x3a0>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a49      	ldr	r2, [pc, #292]	; (80016a8 <HAL_DMA_Abort_IT+0x45c>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d031      	beq.n	80015ec <HAL_DMA_Abort_IT+0x3a0>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a47      	ldr	r2, [pc, #284]	; (80016ac <HAL_DMA_Abort_IT+0x460>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d02c      	beq.n	80015ec <HAL_DMA_Abort_IT+0x3a0>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a46      	ldr	r2, [pc, #280]	; (80016b0 <HAL_DMA_Abort_IT+0x464>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d027      	beq.n	80015ec <HAL_DMA_Abort_IT+0x3a0>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a44      	ldr	r2, [pc, #272]	; (80016b4 <HAL_DMA_Abort_IT+0x468>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d022      	beq.n	80015ec <HAL_DMA_Abort_IT+0x3a0>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a43      	ldr	r2, [pc, #268]	; (80016b8 <HAL_DMA_Abort_IT+0x46c>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d01d      	beq.n	80015ec <HAL_DMA_Abort_IT+0x3a0>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a41      	ldr	r2, [pc, #260]	; (80016bc <HAL_DMA_Abort_IT+0x470>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d018      	beq.n	80015ec <HAL_DMA_Abort_IT+0x3a0>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a40      	ldr	r2, [pc, #256]	; (80016c0 <HAL_DMA_Abort_IT+0x474>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d013      	beq.n	80015ec <HAL_DMA_Abort_IT+0x3a0>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a3e      	ldr	r2, [pc, #248]	; (80016c4 <HAL_DMA_Abort_IT+0x478>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d00e      	beq.n	80015ec <HAL_DMA_Abort_IT+0x3a0>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a3d      	ldr	r2, [pc, #244]	; (80016c8 <HAL_DMA_Abort_IT+0x47c>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d009      	beq.n	80015ec <HAL_DMA_Abort_IT+0x3a0>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a3b      	ldr	r2, [pc, #236]	; (80016cc <HAL_DMA_Abort_IT+0x480>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d004      	beq.n	80015ec <HAL_DMA_Abort_IT+0x3a0>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a3a      	ldr	r2, [pc, #232]	; (80016d0 <HAL_DMA_Abort_IT+0x484>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d101      	bne.n	80015f0 <HAL_DMA_Abort_IT+0x3a4>
 80015ec:	2301      	movs	r3, #1
 80015ee:	e000      	b.n	80015f2 <HAL_DMA_Abort_IT+0x3a6>
 80015f0:	2300      	movs	r3, #0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d028      	beq.n	8001648 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001600:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001604:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800160a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001610:	f003 031f 	and.w	r3, r3, #31
 8001614:	2201      	movs	r2, #1
 8001616:	409a      	lsls	r2, r3
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001624:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800162a:	2b00      	cmp	r3, #0
 800162c:	d00c      	beq.n	8001648 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001638:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800163c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001646:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2201      	movs	r2, #1
 8001654:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800165c:	2b00      	cmp	r3, #0
 800165e:	d003      	beq.n	8001668 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40020010 	.word	0x40020010
 8001678:	40020028 	.word	0x40020028
 800167c:	40020040 	.word	0x40020040
 8001680:	40020058 	.word	0x40020058
 8001684:	40020070 	.word	0x40020070
 8001688:	40020088 	.word	0x40020088
 800168c:	400200a0 	.word	0x400200a0
 8001690:	400200b8 	.word	0x400200b8
 8001694:	40020410 	.word	0x40020410
 8001698:	40020428 	.word	0x40020428
 800169c:	40020440 	.word	0x40020440
 80016a0:	40020458 	.word	0x40020458
 80016a4:	40020470 	.word	0x40020470
 80016a8:	40020488 	.word	0x40020488
 80016ac:	400204a0 	.word	0x400204a0
 80016b0:	400204b8 	.word	0x400204b8
 80016b4:	58025408 	.word	0x58025408
 80016b8:	5802541c 	.word	0x5802541c
 80016bc:	58025430 	.word	0x58025430
 80016c0:	58025444 	.word	0x58025444
 80016c4:	58025458 	.word	0x58025458
 80016c8:	5802546c 	.word	0x5802546c
 80016cc:	58025480 	.word	0x58025480
 80016d0:	58025494 	.word	0x58025494

080016d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b089      	sub	sp, #36	; 0x24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80016e2:	4b89      	ldr	r3, [pc, #548]	; (8001908 <HAL_GPIO_Init+0x234>)
 80016e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80016e6:	e194      	b.n	8001a12 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	2101      	movs	r1, #1
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	fa01 f303 	lsl.w	r3, r1, r3
 80016f4:	4013      	ands	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f000 8186 	beq.w	8001a0c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d00b      	beq.n	8001720 <HAL_GPIO_Init+0x4c>
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	2b02      	cmp	r3, #2
 800170e:	d007      	beq.n	8001720 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001714:	2b11      	cmp	r3, #17
 8001716:	d003      	beq.n	8001720 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	2b12      	cmp	r3, #18
 800171e:	d130      	bne.n	8001782 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	2203      	movs	r2, #3
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	43db      	mvns	r3, r3
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	4013      	ands	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	68da      	ldr	r2, [r3, #12]
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4313      	orrs	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001756:	2201      	movs	r2, #1
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43db      	mvns	r3, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4013      	ands	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	091b      	lsrs	r3, r3, #4
 800176c:	f003 0201 	and.w	r2, r3, #1
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	4313      	orrs	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	2203      	movs	r2, #3
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43db      	mvns	r3, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4013      	ands	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	689a      	ldr	r2, [r3, #8]
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d003      	beq.n	80017c2 <HAL_GPIO_Init+0xee>
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b12      	cmp	r3, #18
 80017c0:	d123      	bne.n	800180a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	08da      	lsrs	r2, r3, #3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	3208      	adds	r2, #8
 80017ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	220f      	movs	r2, #15
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43db      	mvns	r3, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4013      	ands	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	691a      	ldr	r2, [r3, #16]
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	f003 0307 	and.w	r3, r3, #7
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	08da      	lsrs	r2, r3, #3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3208      	adds	r2, #8
 8001804:	69b9      	ldr	r1, [r7, #24]
 8001806:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	2203      	movs	r2, #3
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	43db      	mvns	r3, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4013      	ands	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f003 0203 	and.w	r2, r3, #3
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4313      	orrs	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001846:	2b00      	cmp	r3, #0
 8001848:	f000 80e0 	beq.w	8001a0c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800184c:	4b2f      	ldr	r3, [pc, #188]	; (800190c <HAL_GPIO_Init+0x238>)
 800184e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001852:	4a2e      	ldr	r2, [pc, #184]	; (800190c <HAL_GPIO_Init+0x238>)
 8001854:	f043 0302 	orr.w	r3, r3, #2
 8001858:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800185c:	4b2b      	ldr	r3, [pc, #172]	; (800190c <HAL_GPIO_Init+0x238>)
 800185e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800186a:	4a29      	ldr	r2, [pc, #164]	; (8001910 <HAL_GPIO_Init+0x23c>)
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	089b      	lsrs	r3, r3, #2
 8001870:	3302      	adds	r3, #2
 8001872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001876:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	f003 0303 	and.w	r3, r3, #3
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	220f      	movs	r2, #15
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43db      	mvns	r3, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4013      	ands	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a20      	ldr	r2, [pc, #128]	; (8001914 <HAL_GPIO_Init+0x240>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d052      	beq.n	800193c <HAL_GPIO_Init+0x268>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a1f      	ldr	r2, [pc, #124]	; (8001918 <HAL_GPIO_Init+0x244>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d031      	beq.n	8001902 <HAL_GPIO_Init+0x22e>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a1e      	ldr	r2, [pc, #120]	; (800191c <HAL_GPIO_Init+0x248>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d02b      	beq.n	80018fe <HAL_GPIO_Init+0x22a>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a1d      	ldr	r2, [pc, #116]	; (8001920 <HAL_GPIO_Init+0x24c>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d025      	beq.n	80018fa <HAL_GPIO_Init+0x226>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a1c      	ldr	r2, [pc, #112]	; (8001924 <HAL_GPIO_Init+0x250>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d01f      	beq.n	80018f6 <HAL_GPIO_Init+0x222>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a1b      	ldr	r2, [pc, #108]	; (8001928 <HAL_GPIO_Init+0x254>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d019      	beq.n	80018f2 <HAL_GPIO_Init+0x21e>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a1a      	ldr	r2, [pc, #104]	; (800192c <HAL_GPIO_Init+0x258>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d013      	beq.n	80018ee <HAL_GPIO_Init+0x21a>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a19      	ldr	r2, [pc, #100]	; (8001930 <HAL_GPIO_Init+0x25c>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d00d      	beq.n	80018ea <HAL_GPIO_Init+0x216>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a18      	ldr	r2, [pc, #96]	; (8001934 <HAL_GPIO_Init+0x260>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d007      	beq.n	80018e6 <HAL_GPIO_Init+0x212>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a17      	ldr	r2, [pc, #92]	; (8001938 <HAL_GPIO_Init+0x264>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d101      	bne.n	80018e2 <HAL_GPIO_Init+0x20e>
 80018de:	2309      	movs	r3, #9
 80018e0:	e02d      	b.n	800193e <HAL_GPIO_Init+0x26a>
 80018e2:	230a      	movs	r3, #10
 80018e4:	e02b      	b.n	800193e <HAL_GPIO_Init+0x26a>
 80018e6:	2308      	movs	r3, #8
 80018e8:	e029      	b.n	800193e <HAL_GPIO_Init+0x26a>
 80018ea:	2307      	movs	r3, #7
 80018ec:	e027      	b.n	800193e <HAL_GPIO_Init+0x26a>
 80018ee:	2306      	movs	r3, #6
 80018f0:	e025      	b.n	800193e <HAL_GPIO_Init+0x26a>
 80018f2:	2305      	movs	r3, #5
 80018f4:	e023      	b.n	800193e <HAL_GPIO_Init+0x26a>
 80018f6:	2304      	movs	r3, #4
 80018f8:	e021      	b.n	800193e <HAL_GPIO_Init+0x26a>
 80018fa:	2303      	movs	r3, #3
 80018fc:	e01f      	b.n	800193e <HAL_GPIO_Init+0x26a>
 80018fe:	2302      	movs	r3, #2
 8001900:	e01d      	b.n	800193e <HAL_GPIO_Init+0x26a>
 8001902:	2301      	movs	r3, #1
 8001904:	e01b      	b.n	800193e <HAL_GPIO_Init+0x26a>
 8001906:	bf00      	nop
 8001908:	58000080 	.word	0x58000080
 800190c:	58024400 	.word	0x58024400
 8001910:	58000400 	.word	0x58000400
 8001914:	58020000 	.word	0x58020000
 8001918:	58020400 	.word	0x58020400
 800191c:	58020800 	.word	0x58020800
 8001920:	58020c00 	.word	0x58020c00
 8001924:	58021000 	.word	0x58021000
 8001928:	58021400 	.word	0x58021400
 800192c:	58021800 	.word	0x58021800
 8001930:	58021c00 	.word	0x58021c00
 8001934:	58022000 	.word	0x58022000
 8001938:	58022400 	.word	0x58022400
 800193c:	2300      	movs	r3, #0
 800193e:	69fa      	ldr	r2, [r7, #28]
 8001940:	f002 0203 	and.w	r2, r2, #3
 8001944:	0092      	lsls	r2, r2, #2
 8001946:	4093      	lsls	r3, r2
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4313      	orrs	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800194e:	4938      	ldr	r1, [pc, #224]	; (8001a30 <HAL_GPIO_Init+0x35c>)
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	089b      	lsrs	r3, r3, #2
 8001954:	3302      	adds	r3, #2
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	43db      	mvns	r3, r3
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4013      	ands	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d003      	beq.n	8001980 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	4313      	orrs	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	43db      	mvns	r3, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4013      	ands	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d003      	beq.n	80019aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	43db      	mvns	r3, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4013      	ands	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d003      	beq.n	80019d6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80019d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80019de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	43db      	mvns	r3, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4013      	ands	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d003      	beq.n	8001a04 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001a04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	fa22 f303 	lsr.w	r3, r2, r3
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f47f ae63 	bne.w	80016e8 <HAL_GPIO_Init+0x14>
  }
}
 8001a22:	bf00      	nop
 8001a24:	bf00      	nop
 8001a26:	3724      	adds	r7, #36	; 0x24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	58000400 	.word	0x58000400

08001a34 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001a3c:	4a08      	ldr	r2, [pc, #32]	; (8001a60 <HAL_HSEM_FastTake+0x2c>)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	3320      	adds	r3, #32
 8001a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a46:	4a07      	ldr	r2, [pc, #28]	; (8001a64 <HAL_HSEM_FastTake+0x30>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d101      	bne.n	8001a50 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	e000      	b.n	8001a52 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	58026400 	.word	0x58026400
 8001a64:	80000300 	.word	0x80000300

08001a68 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001a72:	4906      	ldr	r1, [pc, #24]	; (8001a8c <HAL_HSEM_Release+0x24>)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	58026400 	.word	0x58026400

08001a90 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001a98:	4b29      	ldr	r3, [pc, #164]	; (8001b40 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	f003 0307 	and.w	r3, r3, #7
 8001aa0:	2b06      	cmp	r3, #6
 8001aa2:	d00a      	beq.n	8001aba <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001aa4:	4b26      	ldr	r3, [pc, #152]	; (8001b40 <HAL_PWREx_ConfigSupply+0xb0>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d001      	beq.n	8001ab6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e040      	b.n	8001b38 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	e03e      	b.n	8001b38 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001aba:	4b21      	ldr	r3, [pc, #132]	; (8001b40 <HAL_PWREx_ConfigSupply+0xb0>)
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001ac2:	491f      	ldr	r1, [pc, #124]	; (8001b40 <HAL_PWREx_ConfigSupply+0xb0>)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001aca:	f7ff fa73 	bl	8000fb4 <HAL_GetTick>
 8001ace:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001ad0:	e009      	b.n	8001ae6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001ad2:	f7ff fa6f 	bl	8000fb4 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ae0:	d901      	bls.n	8001ae6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e028      	b.n	8001b38 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001ae6:	4b16      	ldr	r3, [pc, #88]	; (8001b40 <HAL_PWREx_ConfigSupply+0xb0>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001aee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001af2:	d1ee      	bne.n	8001ad2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b1e      	cmp	r3, #30
 8001af8:	d008      	beq.n	8001b0c <HAL_PWREx_ConfigSupply+0x7c>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b2e      	cmp	r3, #46	; 0x2e
 8001afe:	d005      	beq.n	8001b0c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b1d      	cmp	r3, #29
 8001b04:	d002      	beq.n	8001b0c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b2d      	cmp	r3, #45	; 0x2d
 8001b0a:	d114      	bne.n	8001b36 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001b0c:	f7ff fa52 	bl	8000fb4 <HAL_GetTick>
 8001b10:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001b12:	e009      	b.n	8001b28 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001b14:	f7ff fa4e 	bl	8000fb4 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b22:	d901      	bls.n	8001b28 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e007      	b.n	8001b38 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001b28:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <HAL_PWREx_ConfigSupply+0xb0>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b34:	d1ee      	bne.n	8001b14 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	58024800 	.word	0x58024800

08001b44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08c      	sub	sp, #48	; 0x30
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e3ff      	b.n	8002356 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f000 8087 	beq.w	8001c72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b64:	4b99      	ldr	r3, [pc, #612]	; (8001dcc <HAL_RCC_OscConfig+0x288>)
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b6e:	4b97      	ldr	r3, [pc, #604]	; (8001dcc <HAL_RCC_OscConfig+0x288>)
 8001b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b72:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b76:	2b10      	cmp	r3, #16
 8001b78:	d007      	beq.n	8001b8a <HAL_RCC_OscConfig+0x46>
 8001b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b7c:	2b18      	cmp	r3, #24
 8001b7e:	d110      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x5e>
 8001b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b82:	f003 0303 	and.w	r3, r3, #3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d10b      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b8a:	4b90      	ldr	r3, [pc, #576]	; (8001dcc <HAL_RCC_OscConfig+0x288>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d06c      	beq.n	8001c70 <HAL_RCC_OscConfig+0x12c>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d168      	bne.n	8001c70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e3d9      	b.n	8002356 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001baa:	d106      	bne.n	8001bba <HAL_RCC_OscConfig+0x76>
 8001bac:	4b87      	ldr	r3, [pc, #540]	; (8001dcc <HAL_RCC_OscConfig+0x288>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a86      	ldr	r2, [pc, #536]	; (8001dcc <HAL_RCC_OscConfig+0x288>)
 8001bb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb6:	6013      	str	r3, [r2, #0]
 8001bb8:	e02e      	b.n	8001c18 <HAL_RCC_OscConfig+0xd4>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d10c      	bne.n	8001bdc <HAL_RCC_OscConfig+0x98>
 8001bc2:	4b82      	ldr	r3, [pc, #520]	; (8001dcc <HAL_RCC_OscConfig+0x288>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a81      	ldr	r2, [pc, #516]	; (8001dcc <HAL_RCC_OscConfig+0x288>)
 8001bc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bcc:	6013      	str	r3, [r2, #0]
 8001bce:	4b7f      	ldr	r3, [pc, #508]	; (8001dcc <HAL_RCC_OscConfig+0x288>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a7e      	ldr	r2, [pc, #504]	; (8001dcc <HAL_RCC_OscConfig+0x288>)
 8001bd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	e01d      	b.n	8001c18 <HAL_RCC_OscConfig+0xd4>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001be4:	d10c      	bne.n	8001c00 <HAL_RCC_OscConfig+0xbc>
 8001be6:	4b79      	ldr	r3, [pc, #484]	; (8001dcc <HAL_RCC_OscConfig+0x288>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a78      	ldr	r2, [pc, #480]	; (8001dcc <HAL_RCC_OscConfig+0x288>)
 8001bec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bf0:	6013      	str	r3, [r2, #0]
 8001bf2:	4b76      	ldr	r3, [pc, #472]	; (8001dcc <HAL_RCC_OscConfig+0x288>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a75      	ldr	r2, [pc, #468]	; (8001dcc <HAL_RCC_OscConfig+0x288>)
 8001bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bfc:	6013      	str	r3, [r2, #0]
 8001bfe:	e00b      	b.n	8001c18 <HAL_RCC_OscConfig+0xd4>
 8001c00:	4b72      	ldr	r3, [pc, #456]	; (8001dcc <HAL_RCC_OscConfig+0x288>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a71      	ldr	r2, [pc, #452]	; (8001dcc <HAL_RCC_OscConfig+0x288>)
 8001c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c0a:	6013      	str	r3, [r2, #0]
 8001c0c:	4b6f      	ldr	r3, [pc, #444]	; (8001dcc <HAL_RCC_OscConfig+0x288>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a6e      	ldr	r2, [pc, #440]	; (8001dcc <HAL_RCC_OscConfig+0x288>)
 8001c12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d013      	beq.n	8001c48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c20:	f7ff f9c8 	bl	8000fb4 <HAL_GetTick>
 8001c24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c28:	f7ff f9c4 	bl	8000fb4 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b64      	cmp	r3, #100	; 0x64
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e38d      	b.n	8002356 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c3a:	4b64      	ldr	r3, [pc, #400]	; (8001dcc <HAL_RCC_OscConfig+0x288>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0f0      	beq.n	8001c28 <HAL_RCC_OscConfig+0xe4>
 8001c46:	e014      	b.n	8001c72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c48:	f7ff f9b4 	bl	8000fb4 <HAL_GetTick>
 8001c4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c50:	f7ff f9b0 	bl	8000fb4 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b64      	cmp	r3, #100	; 0x64
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e379      	b.n	8002356 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c62:	4b5a      	ldr	r3, [pc, #360]	; (8001dcc <HAL_RCC_OscConfig+0x288>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1f0      	bne.n	8001c50 <HAL_RCC_OscConfig+0x10c>
 8001c6e:	e000      	b.n	8001c72 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f000 80ae 	beq.w	8001ddc <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c80:	4b52      	ldr	r3, [pc, #328]	; (8001dcc <HAL_RCC_OscConfig+0x288>)
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c88:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c8a:	4b50      	ldr	r3, [pc, #320]	; (8001dcc <HAL_RCC_OscConfig+0x288>)
 8001c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001c90:	6a3b      	ldr	r3, [r7, #32]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d007      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x162>
 8001c96:	6a3b      	ldr	r3, [r7, #32]
 8001c98:	2b18      	cmp	r3, #24
 8001c9a:	d13a      	bne.n	8001d12 <HAL_RCC_OscConfig+0x1ce>
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f003 0303 	and.w	r3, r3, #3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d135      	bne.n	8001d12 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ca6:	4b49      	ldr	r3, [pc, #292]	; (8001dcc <HAL_RCC_OscConfig+0x288>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0304 	and.w	r3, r3, #4
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d005      	beq.n	8001cbe <HAL_RCC_OscConfig+0x17a>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e34b      	b.n	8002356 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cbe:	f7ff f9a9 	bl	8001014 <HAL_GetREVID>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	f241 0203 	movw	r2, #4099	; 0x1003
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d817      	bhi.n	8001cfc <HAL_RCC_OscConfig+0x1b8>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	2b40      	cmp	r3, #64	; 0x40
 8001cd2:	d108      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x1a2>
 8001cd4:	4b3d      	ldr	r3, [pc, #244]	; (8001dcc <HAL_RCC_OscConfig+0x288>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001cdc:	4a3b      	ldr	r2, [pc, #236]	; (8001dcc <HAL_RCC_OscConfig+0x288>)
 8001cde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ce2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ce4:	e07a      	b.n	8001ddc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce6:	4b39      	ldr	r3, [pc, #228]	; (8001dcc <HAL_RCC_OscConfig+0x288>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	031b      	lsls	r3, r3, #12
 8001cf4:	4935      	ldr	r1, [pc, #212]	; (8001dcc <HAL_RCC_OscConfig+0x288>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cfa:	e06f      	b.n	8001ddc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cfc:	4b33      	ldr	r3, [pc, #204]	; (8001dcc <HAL_RCC_OscConfig+0x288>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	061b      	lsls	r3, r3, #24
 8001d0a:	4930      	ldr	r1, [pc, #192]	; (8001dcc <HAL_RCC_OscConfig+0x288>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d10:	e064      	b.n	8001ddc <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d045      	beq.n	8001da6 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001d1a:	4b2c      	ldr	r3, [pc, #176]	; (8001dcc <HAL_RCC_OscConfig+0x288>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f023 0219 	bic.w	r2, r3, #25
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	4929      	ldr	r1, [pc, #164]	; (8001dcc <HAL_RCC_OscConfig+0x288>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2c:	f7ff f942 	bl	8000fb4 <HAL_GetTick>
 8001d30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d34:	f7ff f93e 	bl	8000fb4 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e307      	b.n	8002356 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d46:	4b21      	ldr	r3, [pc, #132]	; (8001dcc <HAL_RCC_OscConfig+0x288>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0304 	and.w	r3, r3, #4
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0f0      	beq.n	8001d34 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d52:	f7ff f95f 	bl	8001014 <HAL_GetREVID>
 8001d56:	4603      	mov	r3, r0
 8001d58:	f241 0203 	movw	r2, #4099	; 0x1003
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d817      	bhi.n	8001d90 <HAL_RCC_OscConfig+0x24c>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	2b40      	cmp	r3, #64	; 0x40
 8001d66:	d108      	bne.n	8001d7a <HAL_RCC_OscConfig+0x236>
 8001d68:	4b18      	ldr	r3, [pc, #96]	; (8001dcc <HAL_RCC_OscConfig+0x288>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001d70:	4a16      	ldr	r2, [pc, #88]	; (8001dcc <HAL_RCC_OscConfig+0x288>)
 8001d72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d76:	6053      	str	r3, [r2, #4]
 8001d78:	e030      	b.n	8001ddc <HAL_RCC_OscConfig+0x298>
 8001d7a:	4b14      	ldr	r3, [pc, #80]	; (8001dcc <HAL_RCC_OscConfig+0x288>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	031b      	lsls	r3, r3, #12
 8001d88:	4910      	ldr	r1, [pc, #64]	; (8001dcc <HAL_RCC_OscConfig+0x288>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	604b      	str	r3, [r1, #4]
 8001d8e:	e025      	b.n	8001ddc <HAL_RCC_OscConfig+0x298>
 8001d90:	4b0e      	ldr	r3, [pc, #56]	; (8001dcc <HAL_RCC_OscConfig+0x288>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	061b      	lsls	r3, r3, #24
 8001d9e:	490b      	ldr	r1, [pc, #44]	; (8001dcc <HAL_RCC_OscConfig+0x288>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	604b      	str	r3, [r1, #4]
 8001da4:	e01a      	b.n	8001ddc <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001da6:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <HAL_RCC_OscConfig+0x288>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a08      	ldr	r2, [pc, #32]	; (8001dcc <HAL_RCC_OscConfig+0x288>)
 8001dac:	f023 0301 	bic.w	r3, r3, #1
 8001db0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db2:	f7ff f8ff 	bl	8000fb4 <HAL_GetTick>
 8001db6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001db8:	e00a      	b.n	8001dd0 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dba:	f7ff f8fb 	bl	8000fb4 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d903      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e2c4      	b.n	8002356 <HAL_RCC_OscConfig+0x812>
 8001dcc:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001dd0:	4ba4      	ldr	r3, [pc, #656]	; (8002064 <HAL_RCC_OscConfig+0x520>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0304 	and.w	r3, r3, #4
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1ee      	bne.n	8001dba <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0310 	and.w	r3, r3, #16
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f000 80a9 	beq.w	8001f3c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dea:	4b9e      	ldr	r3, [pc, #632]	; (8002064 <HAL_RCC_OscConfig+0x520>)
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001df2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001df4:	4b9b      	ldr	r3, [pc, #620]	; (8002064 <HAL_RCC_OscConfig+0x520>)
 8001df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	2b08      	cmp	r3, #8
 8001dfe:	d007      	beq.n	8001e10 <HAL_RCC_OscConfig+0x2cc>
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	2b18      	cmp	r3, #24
 8001e04:	d13a      	bne.n	8001e7c <HAL_RCC_OscConfig+0x338>
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	f003 0303 	and.w	r3, r3, #3
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d135      	bne.n	8001e7c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e10:	4b94      	ldr	r3, [pc, #592]	; (8002064 <HAL_RCC_OscConfig+0x520>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d005      	beq.n	8001e28 <HAL_RCC_OscConfig+0x2e4>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	69db      	ldr	r3, [r3, #28]
 8001e20:	2b80      	cmp	r3, #128	; 0x80
 8001e22:	d001      	beq.n	8001e28 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e296      	b.n	8002356 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e28:	f7ff f8f4 	bl	8001014 <HAL_GetREVID>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d817      	bhi.n	8001e66 <HAL_RCC_OscConfig+0x322>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a1b      	ldr	r3, [r3, #32]
 8001e3a:	2b20      	cmp	r3, #32
 8001e3c:	d108      	bne.n	8001e50 <HAL_RCC_OscConfig+0x30c>
 8001e3e:	4b89      	ldr	r3, [pc, #548]	; (8002064 <HAL_RCC_OscConfig+0x520>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001e46:	4a87      	ldr	r2, [pc, #540]	; (8002064 <HAL_RCC_OscConfig+0x520>)
 8001e48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001e4c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e4e:	e075      	b.n	8001f3c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e50:	4b84      	ldr	r3, [pc, #528]	; (8002064 <HAL_RCC_OscConfig+0x520>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	069b      	lsls	r3, r3, #26
 8001e5e:	4981      	ldr	r1, [pc, #516]	; (8002064 <HAL_RCC_OscConfig+0x520>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e64:	e06a      	b.n	8001f3c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e66:	4b7f      	ldr	r3, [pc, #508]	; (8002064 <HAL_RCC_OscConfig+0x520>)
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	061b      	lsls	r3, r3, #24
 8001e74:	497b      	ldr	r1, [pc, #492]	; (8002064 <HAL_RCC_OscConfig+0x520>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e7a:	e05f      	b.n	8001f3c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	69db      	ldr	r3, [r3, #28]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d042      	beq.n	8001f0a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001e84:	4b77      	ldr	r3, [pc, #476]	; (8002064 <HAL_RCC_OscConfig+0x520>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a76      	ldr	r2, [pc, #472]	; (8002064 <HAL_RCC_OscConfig+0x520>)
 8001e8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e90:	f7ff f890 	bl	8000fb4 <HAL_GetTick>
 8001e94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001e98:	f7ff f88c 	bl	8000fb4 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e255      	b.n	8002356 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001eaa:	4b6e      	ldr	r3, [pc, #440]	; (8002064 <HAL_RCC_OscConfig+0x520>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0f0      	beq.n	8001e98 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001eb6:	f7ff f8ad 	bl	8001014 <HAL_GetREVID>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	f241 0203 	movw	r2, #4099	; 0x1003
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d817      	bhi.n	8001ef4 <HAL_RCC_OscConfig+0x3b0>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	2b20      	cmp	r3, #32
 8001eca:	d108      	bne.n	8001ede <HAL_RCC_OscConfig+0x39a>
 8001ecc:	4b65      	ldr	r3, [pc, #404]	; (8002064 <HAL_RCC_OscConfig+0x520>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001ed4:	4a63      	ldr	r2, [pc, #396]	; (8002064 <HAL_RCC_OscConfig+0x520>)
 8001ed6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001eda:	6053      	str	r3, [r2, #4]
 8001edc:	e02e      	b.n	8001f3c <HAL_RCC_OscConfig+0x3f8>
 8001ede:	4b61      	ldr	r3, [pc, #388]	; (8002064 <HAL_RCC_OscConfig+0x520>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
 8001eea:	069b      	lsls	r3, r3, #26
 8001eec:	495d      	ldr	r1, [pc, #372]	; (8002064 <HAL_RCC_OscConfig+0x520>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	604b      	str	r3, [r1, #4]
 8001ef2:	e023      	b.n	8001f3c <HAL_RCC_OscConfig+0x3f8>
 8001ef4:	4b5b      	ldr	r3, [pc, #364]	; (8002064 <HAL_RCC_OscConfig+0x520>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	061b      	lsls	r3, r3, #24
 8001f02:	4958      	ldr	r1, [pc, #352]	; (8002064 <HAL_RCC_OscConfig+0x520>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	60cb      	str	r3, [r1, #12]
 8001f08:	e018      	b.n	8001f3c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001f0a:	4b56      	ldr	r3, [pc, #344]	; (8002064 <HAL_RCC_OscConfig+0x520>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a55      	ldr	r2, [pc, #340]	; (8002064 <HAL_RCC_OscConfig+0x520>)
 8001f10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f16:	f7ff f84d 	bl	8000fb4 <HAL_GetTick>
 8001f1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001f1e:	f7ff f849 	bl	8000fb4 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e212      	b.n	8002356 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001f30:	4b4c      	ldr	r3, [pc, #304]	; (8002064 <HAL_RCC_OscConfig+0x520>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1f0      	bne.n	8001f1e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0308 	and.w	r3, r3, #8
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d036      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	695b      	ldr	r3, [r3, #20]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d019      	beq.n	8001f84 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f50:	4b44      	ldr	r3, [pc, #272]	; (8002064 <HAL_RCC_OscConfig+0x520>)
 8001f52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f54:	4a43      	ldr	r2, [pc, #268]	; (8002064 <HAL_RCC_OscConfig+0x520>)
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f5c:	f7ff f82a 	bl	8000fb4 <HAL_GetTick>
 8001f60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f64:	f7ff f826 	bl	8000fb4 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e1ef      	b.n	8002356 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f76:	4b3b      	ldr	r3, [pc, #236]	; (8002064 <HAL_RCC_OscConfig+0x520>)
 8001f78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d0f0      	beq.n	8001f64 <HAL_RCC_OscConfig+0x420>
 8001f82:	e018      	b.n	8001fb6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f84:	4b37      	ldr	r3, [pc, #220]	; (8002064 <HAL_RCC_OscConfig+0x520>)
 8001f86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f88:	4a36      	ldr	r2, [pc, #216]	; (8002064 <HAL_RCC_OscConfig+0x520>)
 8001f8a:	f023 0301 	bic.w	r3, r3, #1
 8001f8e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f90:	f7ff f810 	bl	8000fb4 <HAL_GetTick>
 8001f94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f98:	f7ff f80c 	bl	8000fb4 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e1d5      	b.n	8002356 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001faa:	4b2e      	ldr	r3, [pc, #184]	; (8002064 <HAL_RCC_OscConfig+0x520>)
 8001fac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1f0      	bne.n	8001f98 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0320 	and.w	r3, r3, #32
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d036      	beq.n	8002030 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d019      	beq.n	8001ffe <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001fca:	4b26      	ldr	r3, [pc, #152]	; (8002064 <HAL_RCC_OscConfig+0x520>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a25      	ldr	r2, [pc, #148]	; (8002064 <HAL_RCC_OscConfig+0x520>)
 8001fd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fd4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001fd6:	f7fe ffed 	bl	8000fb4 <HAL_GetTick>
 8001fda:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001fde:	f7fe ffe9 	bl	8000fb4 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e1b2      	b.n	8002356 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ff0:	4b1c      	ldr	r3, [pc, #112]	; (8002064 <HAL_RCC_OscConfig+0x520>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d0f0      	beq.n	8001fde <HAL_RCC_OscConfig+0x49a>
 8001ffc:	e018      	b.n	8002030 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ffe:	4b19      	ldr	r3, [pc, #100]	; (8002064 <HAL_RCC_OscConfig+0x520>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a18      	ldr	r2, [pc, #96]	; (8002064 <HAL_RCC_OscConfig+0x520>)
 8002004:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002008:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800200a:	f7fe ffd3 	bl	8000fb4 <HAL_GetTick>
 800200e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002012:	f7fe ffcf 	bl	8000fb4 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e198      	b.n	8002356 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002024:	4b0f      	ldr	r3, [pc, #60]	; (8002064 <HAL_RCC_OscConfig+0x520>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1f0      	bne.n	8002012 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0304 	and.w	r3, r3, #4
 8002038:	2b00      	cmp	r3, #0
 800203a:	f000 8085 	beq.w	8002148 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800203e:	4b0a      	ldr	r3, [pc, #40]	; (8002068 <HAL_RCC_OscConfig+0x524>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a09      	ldr	r2, [pc, #36]	; (8002068 <HAL_RCC_OscConfig+0x524>)
 8002044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002048:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800204a:	f7fe ffb3 	bl	8000fb4 <HAL_GetTick>
 800204e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002050:	e00c      	b.n	800206c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002052:	f7fe ffaf 	bl	8000fb4 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b64      	cmp	r3, #100	; 0x64
 800205e:	d905      	bls.n	800206c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e178      	b.n	8002356 <HAL_RCC_OscConfig+0x812>
 8002064:	58024400 	.word	0x58024400
 8002068:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800206c:	4b96      	ldr	r3, [pc, #600]	; (80022c8 <HAL_RCC_OscConfig+0x784>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0ec      	beq.n	8002052 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d106      	bne.n	800208e <HAL_RCC_OscConfig+0x54a>
 8002080:	4b92      	ldr	r3, [pc, #584]	; (80022cc <HAL_RCC_OscConfig+0x788>)
 8002082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002084:	4a91      	ldr	r2, [pc, #580]	; (80022cc <HAL_RCC_OscConfig+0x788>)
 8002086:	f043 0301 	orr.w	r3, r3, #1
 800208a:	6713      	str	r3, [r2, #112]	; 0x70
 800208c:	e02d      	b.n	80020ea <HAL_RCC_OscConfig+0x5a6>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10c      	bne.n	80020b0 <HAL_RCC_OscConfig+0x56c>
 8002096:	4b8d      	ldr	r3, [pc, #564]	; (80022cc <HAL_RCC_OscConfig+0x788>)
 8002098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800209a:	4a8c      	ldr	r2, [pc, #560]	; (80022cc <HAL_RCC_OscConfig+0x788>)
 800209c:	f023 0301 	bic.w	r3, r3, #1
 80020a0:	6713      	str	r3, [r2, #112]	; 0x70
 80020a2:	4b8a      	ldr	r3, [pc, #552]	; (80022cc <HAL_RCC_OscConfig+0x788>)
 80020a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a6:	4a89      	ldr	r2, [pc, #548]	; (80022cc <HAL_RCC_OscConfig+0x788>)
 80020a8:	f023 0304 	bic.w	r3, r3, #4
 80020ac:	6713      	str	r3, [r2, #112]	; 0x70
 80020ae:	e01c      	b.n	80020ea <HAL_RCC_OscConfig+0x5a6>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	2b05      	cmp	r3, #5
 80020b6:	d10c      	bne.n	80020d2 <HAL_RCC_OscConfig+0x58e>
 80020b8:	4b84      	ldr	r3, [pc, #528]	; (80022cc <HAL_RCC_OscConfig+0x788>)
 80020ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020bc:	4a83      	ldr	r2, [pc, #524]	; (80022cc <HAL_RCC_OscConfig+0x788>)
 80020be:	f043 0304 	orr.w	r3, r3, #4
 80020c2:	6713      	str	r3, [r2, #112]	; 0x70
 80020c4:	4b81      	ldr	r3, [pc, #516]	; (80022cc <HAL_RCC_OscConfig+0x788>)
 80020c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c8:	4a80      	ldr	r2, [pc, #512]	; (80022cc <HAL_RCC_OscConfig+0x788>)
 80020ca:	f043 0301 	orr.w	r3, r3, #1
 80020ce:	6713      	str	r3, [r2, #112]	; 0x70
 80020d0:	e00b      	b.n	80020ea <HAL_RCC_OscConfig+0x5a6>
 80020d2:	4b7e      	ldr	r3, [pc, #504]	; (80022cc <HAL_RCC_OscConfig+0x788>)
 80020d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d6:	4a7d      	ldr	r2, [pc, #500]	; (80022cc <HAL_RCC_OscConfig+0x788>)
 80020d8:	f023 0301 	bic.w	r3, r3, #1
 80020dc:	6713      	str	r3, [r2, #112]	; 0x70
 80020de:	4b7b      	ldr	r3, [pc, #492]	; (80022cc <HAL_RCC_OscConfig+0x788>)
 80020e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e2:	4a7a      	ldr	r2, [pc, #488]	; (80022cc <HAL_RCC_OscConfig+0x788>)
 80020e4:	f023 0304 	bic.w	r3, r3, #4
 80020e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d015      	beq.n	800211e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f2:	f7fe ff5f 	bl	8000fb4 <HAL_GetTick>
 80020f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020f8:	e00a      	b.n	8002110 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020fa:	f7fe ff5b 	bl	8000fb4 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	f241 3288 	movw	r2, #5000	; 0x1388
 8002108:	4293      	cmp	r3, r2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e122      	b.n	8002356 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002110:	4b6e      	ldr	r3, [pc, #440]	; (80022cc <HAL_RCC_OscConfig+0x788>)
 8002112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0ee      	beq.n	80020fa <HAL_RCC_OscConfig+0x5b6>
 800211c:	e014      	b.n	8002148 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800211e:	f7fe ff49 	bl	8000fb4 <HAL_GetTick>
 8002122:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002124:	e00a      	b.n	800213c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002126:	f7fe ff45 	bl	8000fb4 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	f241 3288 	movw	r2, #5000	; 0x1388
 8002134:	4293      	cmp	r3, r2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e10c      	b.n	8002356 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800213c:	4b63      	ldr	r3, [pc, #396]	; (80022cc <HAL_RCC_OscConfig+0x788>)
 800213e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1ee      	bne.n	8002126 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 8101 	beq.w	8002354 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002152:	4b5e      	ldr	r3, [pc, #376]	; (80022cc <HAL_RCC_OscConfig+0x788>)
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800215a:	2b18      	cmp	r3, #24
 800215c:	f000 80bc 	beq.w	80022d8 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002164:	2b02      	cmp	r3, #2
 8002166:	f040 8095 	bne.w	8002294 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800216a:	4b58      	ldr	r3, [pc, #352]	; (80022cc <HAL_RCC_OscConfig+0x788>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a57      	ldr	r2, [pc, #348]	; (80022cc <HAL_RCC_OscConfig+0x788>)
 8002170:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002174:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002176:	f7fe ff1d 	bl	8000fb4 <HAL_GetTick>
 800217a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800217c:	e008      	b.n	8002190 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800217e:	f7fe ff19 	bl	8000fb4 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e0e2      	b.n	8002356 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002190:	4b4e      	ldr	r3, [pc, #312]	; (80022cc <HAL_RCC_OscConfig+0x788>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1f0      	bne.n	800217e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800219c:	4b4b      	ldr	r3, [pc, #300]	; (80022cc <HAL_RCC_OscConfig+0x788>)
 800219e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021a0:	4b4b      	ldr	r3, [pc, #300]	; (80022d0 <HAL_RCC_OscConfig+0x78c>)
 80021a2:	4013      	ands	r3, r2
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80021ac:	0112      	lsls	r2, r2, #4
 80021ae:	430a      	orrs	r2, r1
 80021b0:	4946      	ldr	r1, [pc, #280]	; (80022cc <HAL_RCC_OscConfig+0x788>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	628b      	str	r3, [r1, #40]	; 0x28
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	3b01      	subs	r3, #1
 80021bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021c4:	3b01      	subs	r3, #1
 80021c6:	025b      	lsls	r3, r3, #9
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	431a      	orrs	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d0:	3b01      	subs	r3, #1
 80021d2:	041b      	lsls	r3, r3, #16
 80021d4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80021d8:	431a      	orrs	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021de:	3b01      	subs	r3, #1
 80021e0:	061b      	lsls	r3, r3, #24
 80021e2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80021e6:	4939      	ldr	r1, [pc, #228]	; (80022cc <HAL_RCC_OscConfig+0x788>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80021ec:	4b37      	ldr	r3, [pc, #220]	; (80022cc <HAL_RCC_OscConfig+0x788>)
 80021ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f0:	4a36      	ldr	r2, [pc, #216]	; (80022cc <HAL_RCC_OscConfig+0x788>)
 80021f2:	f023 0301 	bic.w	r3, r3, #1
 80021f6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80021f8:	4b34      	ldr	r3, [pc, #208]	; (80022cc <HAL_RCC_OscConfig+0x788>)
 80021fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021fc:	4b35      	ldr	r3, [pc, #212]	; (80022d4 <HAL_RCC_OscConfig+0x790>)
 80021fe:	4013      	ands	r3, r2
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002204:	00d2      	lsls	r2, r2, #3
 8002206:	4931      	ldr	r1, [pc, #196]	; (80022cc <HAL_RCC_OscConfig+0x788>)
 8002208:	4313      	orrs	r3, r2
 800220a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800220c:	4b2f      	ldr	r3, [pc, #188]	; (80022cc <HAL_RCC_OscConfig+0x788>)
 800220e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002210:	f023 020c 	bic.w	r2, r3, #12
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002218:	492c      	ldr	r1, [pc, #176]	; (80022cc <HAL_RCC_OscConfig+0x788>)
 800221a:	4313      	orrs	r3, r2
 800221c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800221e:	4b2b      	ldr	r3, [pc, #172]	; (80022cc <HAL_RCC_OscConfig+0x788>)
 8002220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002222:	f023 0202 	bic.w	r2, r3, #2
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222a:	4928      	ldr	r1, [pc, #160]	; (80022cc <HAL_RCC_OscConfig+0x788>)
 800222c:	4313      	orrs	r3, r2
 800222e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002230:	4b26      	ldr	r3, [pc, #152]	; (80022cc <HAL_RCC_OscConfig+0x788>)
 8002232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002234:	4a25      	ldr	r2, [pc, #148]	; (80022cc <HAL_RCC_OscConfig+0x788>)
 8002236:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800223a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800223c:	4b23      	ldr	r3, [pc, #140]	; (80022cc <HAL_RCC_OscConfig+0x788>)
 800223e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002240:	4a22      	ldr	r2, [pc, #136]	; (80022cc <HAL_RCC_OscConfig+0x788>)
 8002242:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002246:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002248:	4b20      	ldr	r3, [pc, #128]	; (80022cc <HAL_RCC_OscConfig+0x788>)
 800224a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224c:	4a1f      	ldr	r2, [pc, #124]	; (80022cc <HAL_RCC_OscConfig+0x788>)
 800224e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002252:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002254:	4b1d      	ldr	r3, [pc, #116]	; (80022cc <HAL_RCC_OscConfig+0x788>)
 8002256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002258:	4a1c      	ldr	r2, [pc, #112]	; (80022cc <HAL_RCC_OscConfig+0x788>)
 800225a:	f043 0301 	orr.w	r3, r3, #1
 800225e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002260:	4b1a      	ldr	r3, [pc, #104]	; (80022cc <HAL_RCC_OscConfig+0x788>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a19      	ldr	r2, [pc, #100]	; (80022cc <HAL_RCC_OscConfig+0x788>)
 8002266:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800226a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800226c:	f7fe fea2 	bl	8000fb4 <HAL_GetTick>
 8002270:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002274:	f7fe fe9e 	bl	8000fb4 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e067      	b.n	8002356 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002286:	4b11      	ldr	r3, [pc, #68]	; (80022cc <HAL_RCC_OscConfig+0x788>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d0f0      	beq.n	8002274 <HAL_RCC_OscConfig+0x730>
 8002292:	e05f      	b.n	8002354 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002294:	4b0d      	ldr	r3, [pc, #52]	; (80022cc <HAL_RCC_OscConfig+0x788>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a0c      	ldr	r2, [pc, #48]	; (80022cc <HAL_RCC_OscConfig+0x788>)
 800229a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800229e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a0:	f7fe fe88 	bl	8000fb4 <HAL_GetTick>
 80022a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022a8:	f7fe fe84 	bl	8000fb4 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e04d      	b.n	8002356 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80022ba:	4b04      	ldr	r3, [pc, #16]	; (80022cc <HAL_RCC_OscConfig+0x788>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1f0      	bne.n	80022a8 <HAL_RCC_OscConfig+0x764>
 80022c6:	e045      	b.n	8002354 <HAL_RCC_OscConfig+0x810>
 80022c8:	58024800 	.word	0x58024800
 80022cc:	58024400 	.word	0x58024400
 80022d0:	fffffc0c 	.word	0xfffffc0c
 80022d4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80022d8:	4b21      	ldr	r3, [pc, #132]	; (8002360 <HAL_RCC_OscConfig+0x81c>)
 80022da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022dc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80022de:	4b20      	ldr	r3, [pc, #128]	; (8002360 <HAL_RCC_OscConfig+0x81c>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d031      	beq.n	8002350 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	f003 0203 	and.w	r2, r3, #3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d12a      	bne.n	8002350 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	091b      	lsrs	r3, r3, #4
 80022fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002306:	429a      	cmp	r2, r3
 8002308:	d122      	bne.n	8002350 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002314:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002316:	429a      	cmp	r2, r3
 8002318:	d11a      	bne.n	8002350 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	0a5b      	lsrs	r3, r3, #9
 800231e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002326:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002328:	429a      	cmp	r2, r3
 800232a:	d111      	bne.n	8002350 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	0c1b      	lsrs	r3, r3, #16
 8002330:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002338:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800233a:	429a      	cmp	r2, r3
 800233c:	d108      	bne.n	8002350 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	0e1b      	lsrs	r3, r3, #24
 8002342:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800234a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800234c:	429a      	cmp	r2, r3
 800234e:	d001      	beq.n	8002354 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e000      	b.n	8002356 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3730      	adds	r7, #48	; 0x30
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	58024400 	.word	0x58024400

08002364 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e19c      	b.n	80026b2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002378:	4b8a      	ldr	r3, [pc, #552]	; (80025a4 <HAL_RCC_ClockConfig+0x240>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 030f 	and.w	r3, r3, #15
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	429a      	cmp	r2, r3
 8002384:	d910      	bls.n	80023a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002386:	4b87      	ldr	r3, [pc, #540]	; (80025a4 <HAL_RCC_ClockConfig+0x240>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f023 020f 	bic.w	r2, r3, #15
 800238e:	4985      	ldr	r1, [pc, #532]	; (80025a4 <HAL_RCC_ClockConfig+0x240>)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	4313      	orrs	r3, r2
 8002394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002396:	4b83      	ldr	r3, [pc, #524]	; (80025a4 <HAL_RCC_ClockConfig+0x240>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 030f 	and.w	r3, r3, #15
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d001      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e184      	b.n	80026b2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d010      	beq.n	80023d6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	691a      	ldr	r2, [r3, #16]
 80023b8:	4b7b      	ldr	r3, [pc, #492]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d908      	bls.n	80023d6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80023c4:	4b78      	ldr	r3, [pc, #480]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	4975      	ldr	r1, [pc, #468]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0308 	and.w	r3, r3, #8
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d010      	beq.n	8002404 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	695a      	ldr	r2, [r3, #20]
 80023e6:	4b70      	ldr	r3, [pc, #448]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d908      	bls.n	8002404 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80023f2:	4b6d      	ldr	r3, [pc, #436]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	496a      	ldr	r1, [pc, #424]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 8002400:	4313      	orrs	r3, r2
 8002402:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0310 	and.w	r3, r3, #16
 800240c:	2b00      	cmp	r3, #0
 800240e:	d010      	beq.n	8002432 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	699a      	ldr	r2, [r3, #24]
 8002414:	4b64      	ldr	r3, [pc, #400]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 8002416:	69db      	ldr	r3, [r3, #28]
 8002418:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800241c:	429a      	cmp	r2, r3
 800241e:	d908      	bls.n	8002432 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002420:	4b61      	ldr	r3, [pc, #388]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 8002422:	69db      	ldr	r3, [r3, #28]
 8002424:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	495e      	ldr	r1, [pc, #376]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 800242e:	4313      	orrs	r3, r2
 8002430:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0320 	and.w	r3, r3, #32
 800243a:	2b00      	cmp	r3, #0
 800243c:	d010      	beq.n	8002460 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69da      	ldr	r2, [r3, #28]
 8002442:	4b59      	ldr	r3, [pc, #356]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800244a:	429a      	cmp	r2, r3
 800244c:	d908      	bls.n	8002460 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800244e:	4b56      	ldr	r3, [pc, #344]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	69db      	ldr	r3, [r3, #28]
 800245a:	4953      	ldr	r1, [pc, #332]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 800245c:	4313      	orrs	r3, r2
 800245e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d010      	beq.n	800248e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68da      	ldr	r2, [r3, #12]
 8002470:	4b4d      	ldr	r3, [pc, #308]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	f003 030f 	and.w	r3, r3, #15
 8002478:	429a      	cmp	r2, r3
 800247a:	d908      	bls.n	800248e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800247c:	4b4a      	ldr	r3, [pc, #296]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	f023 020f 	bic.w	r2, r3, #15
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	4947      	ldr	r1, [pc, #284]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 800248a:	4313      	orrs	r3, r2
 800248c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d055      	beq.n	8002546 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800249a:	4b43      	ldr	r3, [pc, #268]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	4940      	ldr	r1, [pc, #256]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d107      	bne.n	80024c4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024b4:	4b3c      	ldr	r3, [pc, #240]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d121      	bne.n	8002504 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e0f6      	b.n	80026b2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	2b03      	cmp	r3, #3
 80024ca:	d107      	bne.n	80024dc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80024cc:	4b36      	ldr	r3, [pc, #216]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d115      	bne.n	8002504 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e0ea      	b.n	80026b2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d107      	bne.n	80024f4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80024e4:	4b30      	ldr	r3, [pc, #192]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d109      	bne.n	8002504 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e0de      	b.n	80026b2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024f4:	4b2c      	ldr	r3, [pc, #176]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e0d6      	b.n	80026b2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002504:	4b28      	ldr	r3, [pc, #160]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	f023 0207 	bic.w	r2, r3, #7
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	4925      	ldr	r1, [pc, #148]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 8002512:	4313      	orrs	r3, r2
 8002514:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002516:	f7fe fd4d 	bl	8000fb4 <HAL_GetTick>
 800251a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800251c:	e00a      	b.n	8002534 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800251e:	f7fe fd49 	bl	8000fb4 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	f241 3288 	movw	r2, #5000	; 0x1388
 800252c:	4293      	cmp	r3, r2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e0be      	b.n	80026b2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002534:	4b1c      	ldr	r3, [pc, #112]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	429a      	cmp	r2, r3
 8002544:	d1eb      	bne.n	800251e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d010      	beq.n	8002574 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	68da      	ldr	r2, [r3, #12]
 8002556:	4b14      	ldr	r3, [pc, #80]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	429a      	cmp	r2, r3
 8002560:	d208      	bcs.n	8002574 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002562:	4b11      	ldr	r3, [pc, #68]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	f023 020f 	bic.w	r2, r3, #15
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	490e      	ldr	r1, [pc, #56]	; (80025a8 <HAL_RCC_ClockConfig+0x244>)
 8002570:	4313      	orrs	r3, r2
 8002572:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002574:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <HAL_RCC_ClockConfig+0x240>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 030f 	and.w	r3, r3, #15
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	429a      	cmp	r2, r3
 8002580:	d214      	bcs.n	80025ac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002582:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <HAL_RCC_ClockConfig+0x240>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f023 020f 	bic.w	r2, r3, #15
 800258a:	4906      	ldr	r1, [pc, #24]	; (80025a4 <HAL_RCC_ClockConfig+0x240>)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	4313      	orrs	r3, r2
 8002590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002592:	4b04      	ldr	r3, [pc, #16]	; (80025a4 <HAL_RCC_ClockConfig+0x240>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 030f 	and.w	r3, r3, #15
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	429a      	cmp	r2, r3
 800259e:	d005      	beq.n	80025ac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e086      	b.n	80026b2 <HAL_RCC_ClockConfig+0x34e>
 80025a4:	52002000 	.word	0x52002000
 80025a8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d010      	beq.n	80025da <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	691a      	ldr	r2, [r3, #16]
 80025bc:	4b3f      	ldr	r3, [pc, #252]	; (80026bc <HAL_RCC_ClockConfig+0x358>)
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d208      	bcs.n	80025da <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80025c8:	4b3c      	ldr	r3, [pc, #240]	; (80026bc <HAL_RCC_ClockConfig+0x358>)
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	4939      	ldr	r1, [pc, #228]	; (80026bc <HAL_RCC_ClockConfig+0x358>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d010      	beq.n	8002608 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	695a      	ldr	r2, [r3, #20]
 80025ea:	4b34      	ldr	r3, [pc, #208]	; (80026bc <HAL_RCC_ClockConfig+0x358>)
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d208      	bcs.n	8002608 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80025f6:	4b31      	ldr	r3, [pc, #196]	; (80026bc <HAL_RCC_ClockConfig+0x358>)
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	492e      	ldr	r1, [pc, #184]	; (80026bc <HAL_RCC_ClockConfig+0x358>)
 8002604:	4313      	orrs	r3, r2
 8002606:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0310 	and.w	r3, r3, #16
 8002610:	2b00      	cmp	r3, #0
 8002612:	d010      	beq.n	8002636 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	699a      	ldr	r2, [r3, #24]
 8002618:	4b28      	ldr	r3, [pc, #160]	; (80026bc <HAL_RCC_ClockConfig+0x358>)
 800261a:	69db      	ldr	r3, [r3, #28]
 800261c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002620:	429a      	cmp	r2, r3
 8002622:	d208      	bcs.n	8002636 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002624:	4b25      	ldr	r3, [pc, #148]	; (80026bc <HAL_RCC_ClockConfig+0x358>)
 8002626:	69db      	ldr	r3, [r3, #28]
 8002628:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	4922      	ldr	r1, [pc, #136]	; (80026bc <HAL_RCC_ClockConfig+0x358>)
 8002632:	4313      	orrs	r3, r2
 8002634:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0320 	and.w	r3, r3, #32
 800263e:	2b00      	cmp	r3, #0
 8002640:	d010      	beq.n	8002664 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69da      	ldr	r2, [r3, #28]
 8002646:	4b1d      	ldr	r3, [pc, #116]	; (80026bc <HAL_RCC_ClockConfig+0x358>)
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800264e:	429a      	cmp	r2, r3
 8002650:	d208      	bcs.n	8002664 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002652:	4b1a      	ldr	r3, [pc, #104]	; (80026bc <HAL_RCC_ClockConfig+0x358>)
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	4917      	ldr	r1, [pc, #92]	; (80026bc <HAL_RCC_ClockConfig+0x358>)
 8002660:	4313      	orrs	r3, r2
 8002662:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002664:	f000 f834 	bl	80026d0 <HAL_RCC_GetSysClockFreq>
 8002668:	4602      	mov	r2, r0
 800266a:	4b14      	ldr	r3, [pc, #80]	; (80026bc <HAL_RCC_ClockConfig+0x358>)
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	0a1b      	lsrs	r3, r3, #8
 8002670:	f003 030f 	and.w	r3, r3, #15
 8002674:	4912      	ldr	r1, [pc, #72]	; (80026c0 <HAL_RCC_ClockConfig+0x35c>)
 8002676:	5ccb      	ldrb	r3, [r1, r3]
 8002678:	f003 031f 	and.w	r3, r3, #31
 800267c:	fa22 f303 	lsr.w	r3, r2, r3
 8002680:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002682:	4b0e      	ldr	r3, [pc, #56]	; (80026bc <HAL_RCC_ClockConfig+0x358>)
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	4a0d      	ldr	r2, [pc, #52]	; (80026c0 <HAL_RCC_ClockConfig+0x35c>)
 800268c:	5cd3      	ldrb	r3, [r2, r3]
 800268e:	f003 031f 	and.w	r3, r3, #31
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	fa22 f303 	lsr.w	r3, r2, r3
 8002698:	4a0a      	ldr	r2, [pc, #40]	; (80026c4 <HAL_RCC_ClockConfig+0x360>)
 800269a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800269c:	4a0a      	ldr	r2, [pc, #40]	; (80026c8 <HAL_RCC_ClockConfig+0x364>)
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80026a2:	4b0a      	ldr	r3, [pc, #40]	; (80026cc <HAL_RCC_ClockConfig+0x368>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7fe fc3a 	bl	8000f20 <HAL_InitTick>
 80026ac:	4603      	mov	r3, r0
 80026ae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	58024400 	.word	0x58024400
 80026c0:	0800a78c 	.word	0x0800a78c
 80026c4:	20000004 	.word	0x20000004
 80026c8:	20000000 	.word	0x20000000
 80026cc:	20000024 	.word	0x20000024

080026d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b089      	sub	sp, #36	; 0x24
 80026d4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026d6:	4bb3      	ldr	r3, [pc, #716]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026de:	2b18      	cmp	r3, #24
 80026e0:	f200 8155 	bhi.w	800298e <HAL_RCC_GetSysClockFreq+0x2be>
 80026e4:	a201      	add	r2, pc, #4	; (adr r2, 80026ec <HAL_RCC_GetSysClockFreq+0x1c>)
 80026e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ea:	bf00      	nop
 80026ec:	08002751 	.word	0x08002751
 80026f0:	0800298f 	.word	0x0800298f
 80026f4:	0800298f 	.word	0x0800298f
 80026f8:	0800298f 	.word	0x0800298f
 80026fc:	0800298f 	.word	0x0800298f
 8002700:	0800298f 	.word	0x0800298f
 8002704:	0800298f 	.word	0x0800298f
 8002708:	0800298f 	.word	0x0800298f
 800270c:	08002777 	.word	0x08002777
 8002710:	0800298f 	.word	0x0800298f
 8002714:	0800298f 	.word	0x0800298f
 8002718:	0800298f 	.word	0x0800298f
 800271c:	0800298f 	.word	0x0800298f
 8002720:	0800298f 	.word	0x0800298f
 8002724:	0800298f 	.word	0x0800298f
 8002728:	0800298f 	.word	0x0800298f
 800272c:	0800277d 	.word	0x0800277d
 8002730:	0800298f 	.word	0x0800298f
 8002734:	0800298f 	.word	0x0800298f
 8002738:	0800298f 	.word	0x0800298f
 800273c:	0800298f 	.word	0x0800298f
 8002740:	0800298f 	.word	0x0800298f
 8002744:	0800298f 	.word	0x0800298f
 8002748:	0800298f 	.word	0x0800298f
 800274c:	08002783 	.word	0x08002783
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002750:	4b94      	ldr	r3, [pc, #592]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0320 	and.w	r3, r3, #32
 8002758:	2b00      	cmp	r3, #0
 800275a:	d009      	beq.n	8002770 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800275c:	4b91      	ldr	r3, [pc, #580]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	08db      	lsrs	r3, r3, #3
 8002762:	f003 0303 	and.w	r3, r3, #3
 8002766:	4a90      	ldr	r2, [pc, #576]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002768:	fa22 f303 	lsr.w	r3, r2, r3
 800276c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800276e:	e111      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002770:	4b8d      	ldr	r3, [pc, #564]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002772:	61bb      	str	r3, [r7, #24]
    break;
 8002774:	e10e      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002776:	4b8d      	ldr	r3, [pc, #564]	; (80029ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002778:	61bb      	str	r3, [r7, #24]
    break;
 800277a:	e10b      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800277c:	4b8c      	ldr	r3, [pc, #560]	; (80029b0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800277e:	61bb      	str	r3, [r7, #24]
    break;
 8002780:	e108      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002782:	4b88      	ldr	r3, [pc, #544]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002786:	f003 0303 	and.w	r3, r3, #3
 800278a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800278c:	4b85      	ldr	r3, [pc, #532]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800278e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002790:	091b      	lsrs	r3, r3, #4
 8002792:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002796:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002798:	4b82      	ldr	r3, [pc, #520]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800279a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80027a2:	4b80      	ldr	r3, [pc, #512]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027a6:	08db      	lsrs	r3, r3, #3
 80027a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	fb02 f303 	mul.w	r3, r2, r3
 80027b2:	ee07 3a90 	vmov	s15, r3
 80027b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ba:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f000 80e1 	beq.w	8002988 <HAL_RCC_GetSysClockFreq+0x2b8>
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	f000 8083 	beq.w	80028d4 <HAL_RCC_GetSysClockFreq+0x204>
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	f200 80a1 	bhi.w	8002918 <HAL_RCC_GetSysClockFreq+0x248>
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d003      	beq.n	80027e4 <HAL_RCC_GetSysClockFreq+0x114>
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d056      	beq.n	8002890 <HAL_RCC_GetSysClockFreq+0x1c0>
 80027e2:	e099      	b.n	8002918 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80027e4:	4b6f      	ldr	r3, [pc, #444]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0320 	and.w	r3, r3, #32
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d02d      	beq.n	800284c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80027f0:	4b6c      	ldr	r3, [pc, #432]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	08db      	lsrs	r3, r3, #3
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	4a6b      	ldr	r2, [pc, #428]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80027fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002800:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	ee07 3a90 	vmov	s15, r3
 8002808:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	ee07 3a90 	vmov	s15, r3
 8002812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800281a:	4b62      	ldr	r3, [pc, #392]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002822:	ee07 3a90 	vmov	s15, r3
 8002826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800282a:	ed97 6a02 	vldr	s12, [r7, #8]
 800282e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80029b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800283a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800283e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002846:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800284a:	e087      	b.n	800295c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	ee07 3a90 	vmov	s15, r3
 8002852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002856:	eddf 6a58 	vldr	s13, [pc, #352]	; 80029b8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800285a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800285e:	4b51      	ldr	r3, [pc, #324]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002866:	ee07 3a90 	vmov	s15, r3
 800286a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800286e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002872:	eddf 5a50 	vldr	s11, [pc, #320]	; 80029b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800287a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800287e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800288a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800288e:	e065      	b.n	800295c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	ee07 3a90 	vmov	s15, r3
 8002896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800289a:	eddf 6a48 	vldr	s13, [pc, #288]	; 80029bc <HAL_RCC_GetSysClockFreq+0x2ec>
 800289e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028a2:	4b40      	ldr	r3, [pc, #256]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028aa:	ee07 3a90 	vmov	s15, r3
 80028ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80028b6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80029b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80028ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80028c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80028d2:	e043      	b.n	800295c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	ee07 3a90 	vmov	s15, r3
 80028da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028de:	eddf 6a38 	vldr	s13, [pc, #224]	; 80029c0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80028e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028e6:	4b2f      	ldr	r3, [pc, #188]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028ee:	ee07 3a90 	vmov	s15, r3
 80028f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80028fa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80029b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80028fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002906:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800290a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800290e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002912:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002916:	e021      	b.n	800295c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	ee07 3a90 	vmov	s15, r3
 800291e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002922:	eddf 6a26 	vldr	s13, [pc, #152]	; 80029bc <HAL_RCC_GetSysClockFreq+0x2ec>
 8002926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800292a:	4b1e      	ldr	r3, [pc, #120]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002932:	ee07 3a90 	vmov	s15, r3
 8002936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800293a:	ed97 6a02 	vldr	s12, [r7, #8]
 800293e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80029b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800294a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800294e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002956:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800295a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800295c:	4b11      	ldr	r3, [pc, #68]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800295e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002960:	0a5b      	lsrs	r3, r3, #9
 8002962:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002966:	3301      	adds	r3, #1
 8002968:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	ee07 3a90 	vmov	s15, r3
 8002970:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002974:	edd7 6a07 	vldr	s13, [r7, #28]
 8002978:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800297c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002980:	ee17 3a90 	vmov	r3, s15
 8002984:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002986:	e005      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002988:	2300      	movs	r3, #0
 800298a:	61bb      	str	r3, [r7, #24]
    break;
 800298c:	e002      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800298e:	4b07      	ldr	r3, [pc, #28]	; (80029ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002990:	61bb      	str	r3, [r7, #24]
    break;
 8002992:	bf00      	nop
  }

  return sysclockfreq;
 8002994:	69bb      	ldr	r3, [r7, #24]
}
 8002996:	4618      	mov	r0, r3
 8002998:	3724      	adds	r7, #36	; 0x24
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	58024400 	.word	0x58024400
 80029a8:	03d09000 	.word	0x03d09000
 80029ac:	003d0900 	.word	0x003d0900
 80029b0:	017d7840 	.word	0x017d7840
 80029b4:	46000000 	.word	0x46000000
 80029b8:	4c742400 	.word	0x4c742400
 80029bc:	4a742400 	.word	0x4a742400
 80029c0:	4bbebc20 	.word	0x4bbebc20

080029c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80029ca:	f7ff fe81 	bl	80026d0 <HAL_RCC_GetSysClockFreq>
 80029ce:	4602      	mov	r2, r0
 80029d0:	4b10      	ldr	r3, [pc, #64]	; (8002a14 <HAL_RCC_GetHCLKFreq+0x50>)
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	0a1b      	lsrs	r3, r3, #8
 80029d6:	f003 030f 	and.w	r3, r3, #15
 80029da:	490f      	ldr	r1, [pc, #60]	; (8002a18 <HAL_RCC_GetHCLKFreq+0x54>)
 80029dc:	5ccb      	ldrb	r3, [r1, r3]
 80029de:	f003 031f 	and.w	r3, r3, #31
 80029e2:	fa22 f303 	lsr.w	r3, r2, r3
 80029e6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80029e8:	4b0a      	ldr	r3, [pc, #40]	; (8002a14 <HAL_RCC_GetHCLKFreq+0x50>)
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	f003 030f 	and.w	r3, r3, #15
 80029f0:	4a09      	ldr	r2, [pc, #36]	; (8002a18 <HAL_RCC_GetHCLKFreq+0x54>)
 80029f2:	5cd3      	ldrb	r3, [r2, r3]
 80029f4:	f003 031f 	and.w	r3, r3, #31
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	fa22 f303 	lsr.w	r3, r2, r3
 80029fe:	4a07      	ldr	r2, [pc, #28]	; (8002a1c <HAL_RCC_GetHCLKFreq+0x58>)
 8002a00:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a02:	4a07      	ldr	r2, [pc, #28]	; (8002a20 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002a08:	4b04      	ldr	r3, [pc, #16]	; (8002a1c <HAL_RCC_GetHCLKFreq+0x58>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3708      	adds	r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	58024400 	.word	0x58024400
 8002a18:	0800a78c 	.word	0x0800a78c
 8002a1c:	20000004 	.word	0x20000004
 8002a20:	20000000 	.word	0x20000000

08002a24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002a28:	f7ff ffcc 	bl	80029c4 <HAL_RCC_GetHCLKFreq>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	091b      	lsrs	r3, r3, #4
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	4904      	ldr	r1, [pc, #16]	; (8002a4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a3a:	5ccb      	ldrb	r3, [r1, r3]
 8002a3c:	f003 031f 	and.w	r3, r3, #31
 8002a40:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	58024400 	.word	0x58024400
 8002a4c:	0800a78c 	.word	0x0800a78c

08002a50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002a54:	f7ff ffb6 	bl	80029c4 <HAL_RCC_GetHCLKFreq>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	0a1b      	lsrs	r3, r3, #8
 8002a60:	f003 0307 	and.w	r3, r3, #7
 8002a64:	4904      	ldr	r1, [pc, #16]	; (8002a78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a66:	5ccb      	ldrb	r3, [r1, r3]
 8002a68:	f003 031f 	and.w	r3, r3, #31
 8002a6c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	58024400 	.word	0x58024400
 8002a78:	0800a78c 	.word	0x0800a78c

08002a7c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b090      	sub	sp, #64	; 0x40
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a8a:	d14f      	bne.n	8002b2c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8002a8c:	4ba0      	ldr	r3, [pc, #640]	; (8002d10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8002a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a90:	f003 0307 	and.w	r3, r3, #7
 8002a94:	633b      	str	r3, [r7, #48]	; 0x30
 8002a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a98:	2b04      	cmp	r3, #4
 8002a9a:	d844      	bhi.n	8002b26 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8002a9c:	a201      	add	r2, pc, #4	; (adr r2, 8002aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8002a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa2:	bf00      	nop
 8002aa4:	08002ab9 	.word	0x08002ab9
 8002aa8:	08002ac9 	.word	0x08002ac9
 8002aac:	08002ad9 	.word	0x08002ad9
 8002ab0:	08002b21 	.word	0x08002b21
 8002ab4:	08002ae9 	.word	0x08002ae9

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8002ab8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002abc:	4618      	mov	r0, r3
 8002abe:	f000 fd53 	bl	8003568 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8002ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002ac6:	e28b      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002ac8:	f107 0318 	add.w	r3, r7, #24
 8002acc:	4618      	mov	r0, r3
 8002ace:	f000 faa3 	bl	8003018 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002ad6:	e283      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002ad8:	f107 030c 	add.w	r3, r7, #12
 8002adc:	4618      	mov	r0, r3
 8002ade:	f000 fbef 	bl	80032c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002ae6:	e27b      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8002ae8:	4b89      	ldr	r3, [pc, #548]	; (8002d10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8002aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002af0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8002af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d102      	bne.n	8002afe <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8002af8:	4b86      	ldr	r3, [pc, #536]	; (8002d14 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8002afa:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8002afc:	e270      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8002afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b04:	d102      	bne.n	8002b0c <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8002b06:	4b84      	ldr	r3, [pc, #528]	; (8002d18 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8002b08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002b0a:	e269      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8002b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b12:	d102      	bne.n	8002b1a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8002b14:	4b81      	ldr	r3, [pc, #516]	; (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8002b16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002b18:	e262      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
            frequency = 0;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002b1e:	e25f      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8002b20:	4b7f      	ldr	r3, [pc, #508]	; (8002d20 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8002b22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002b24:	e25c      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      default :
        {
          frequency = 0;
 8002b26:	2300      	movs	r3, #0
 8002b28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002b2a:	e259      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b32:	d159      	bne.n	8002be8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8002b34:	4b76      	ldr	r3, [pc, #472]	; (8002d10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8002b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b38:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8002b3c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8002b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b44:	d02e      	beq.n	8002ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8002b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b4c:	d849      	bhi.n	8002be2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8002b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b50:	2bc0      	cmp	r3, #192	; 0xc0
 8002b52:	d043      	beq.n	8002bdc <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8002b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b56:	2bc0      	cmp	r3, #192	; 0xc0
 8002b58:	d843      	bhi.n	8002be2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8002b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5c:	2b80      	cmp	r3, #128	; 0x80
 8002b5e:	d019      	beq.n	8002b94 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 8002b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b62:	2b80      	cmp	r3, #128	; 0x80
 8002b64:	d83d      	bhi.n	8002be2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8002b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
 8002b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6e:	2b40      	cmp	r3, #64	; 0x40
 8002b70:	d008      	beq.n	8002b84 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8002b72:	e036      	b.n	8002be2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8002b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f000 fcf5 	bl	8003568 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8002b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002b82:	e22d      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002b84:	f107 0318 	add.w	r3, r7, #24
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f000 fa45 	bl	8003018 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002b92:	e225      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002b94:	f107 030c 	add.w	r3, r7, #12
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f000 fb91 	bl	80032c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002ba2:	e21d      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8002ba4:	4b5a      	ldr	r3, [pc, #360]	; (8002d10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8002ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bac:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8002bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d102      	bne.n	8002bba <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8002bb4:	4b57      	ldr	r3, [pc, #348]	; (8002d14 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8002bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8002bb8:	e212      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8002bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bc0:	d102      	bne.n	8002bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
            frequency = CSI_VALUE;
 8002bc2:	4b55      	ldr	r3, [pc, #340]	; (8002d18 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8002bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002bc6:	e20b      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8002bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bce:	d102      	bne.n	8002bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
            frequency = HSE_VALUE;
 8002bd0:	4b52      	ldr	r3, [pc, #328]	; (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8002bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002bd4:	e204      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
            frequency = 0;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002bda:	e201      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8002bdc:	4b50      	ldr	r3, [pc, #320]	; (8002d20 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8002bde:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002be0:	e1fe      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      default :
        {
          frequency = 0;
 8002be2:	2300      	movs	r3, #0
 8002be4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002be6:	e1fb      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bee:	d15e      	bne.n	8002cae <HAL_RCCEx_GetPeriphCLKFreq+0x232>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8002bf0:	4b47      	ldr	r3, [pc, #284]	; (8002d10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8002bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf4:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8002bf8:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8002bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c00:	d033      	beq.n	8002c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
 8002c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c08:	d84e      	bhi.n	8002ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8002c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002c10:	d047      	beq.n	8002ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x226>
 8002c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c14:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002c18:	d846      	bhi.n	8002ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8002c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c20:	d01b      	beq.n	8002c5a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
 8002c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c28:	d83e      	bhi.n	8002ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8002c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d004      	beq.n	8002c3a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8002c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c36:	d008      	beq.n	8002c4a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8002c38:	e036      	b.n	8002ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8002c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 fc92 	bl	8003568 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8002c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002c48:	e1ca      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002c4a:	f107 0318 	add.w	r3, r7, #24
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f000 f9e2 	bl	8003018 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002c58:	e1c2      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002c5a:	f107 030c 	add.w	r3, r7, #12
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f000 fb2e 	bl	80032c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002c68:	e1ba      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8002c6a:	4b29      	ldr	r3, [pc, #164]	; (8002d10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8002c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c6e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c72:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8002c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d102      	bne.n	8002c80 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8002c7a:	4b26      	ldr	r3, [pc, #152]	; (8002d14 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8002c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8002c7e:	e1af      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8002c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c86:	d102      	bne.n	8002c8e <HAL_RCCEx_GetPeriphCLKFreq+0x212>
            frequency = CSI_VALUE;
 8002c88:	4b23      	ldr	r3, [pc, #140]	; (8002d18 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8002c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002c8c:	e1a8      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8002c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c94:	d102      	bne.n	8002c9c <HAL_RCCEx_GetPeriphCLKFreq+0x220>
            frequency = HSE_VALUE;
 8002c96:	4b21      	ldr	r3, [pc, #132]	; (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8002c98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002c9a:	e1a1      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
            frequency = 0;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002ca0:	e19e      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8002ca2:	4b1f      	ldr	r3, [pc, #124]	; (8002d20 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8002ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002ca6:	e19b      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      default :
        {
          frequency = 0;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002cac:	e198      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cb4:	d168      	bne.n	8002d88 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8002cb6:	4b16      	ldr	r3, [pc, #88]	; (8002d10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8002cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cba:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002cbe:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8002cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cc6:	d03d      	beq.n	8002d44 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
 8002cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cce:	d858      	bhi.n	8002d82 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8002cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002cd6:	d051      	beq.n	8002d7c <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 8002cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cda:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002cde:	d850      	bhi.n	8002d82 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8002ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ce6:	d025      	beq.n	8002d34 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8002ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002cee:	d848      	bhi.n	8002d82 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8002cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d004      	beq.n	8002d00 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
 8002cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cfc:	d012      	beq.n	8002d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
 8002cfe:	e040      	b.n	8002d82 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8002d00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d04:	4618      	mov	r0, r3
 8002d06:	f000 fc2f 	bl	8003568 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8002d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002d0e:	e167      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8002d10:	58024400 	.word	0x58024400
 8002d14:	03d09000 	.word	0x03d09000
 8002d18:	003d0900 	.word	0x003d0900
 8002d1c:	017d7840 	.word	0x017d7840
 8002d20:	00bb8000 	.word	0x00bb8000
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002d24:	f107 0318 	add.w	r3, r7, #24
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f000 f975 	bl	8003018 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002d32:	e155      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002d34:	f107 030c 	add.w	r3, r7, #12
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f000 fac1 	bl	80032c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002d42:	e14d      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8002d44:	4ba0      	ldr	r3, [pc, #640]	; (8002fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8002d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d4c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8002d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d102      	bne.n	8002d5a <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8002d54:	4b9d      	ldr	r3, [pc, #628]	; (8002fcc <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 8002d56:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8002d58:	e142      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8002d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d60:	d102      	bne.n	8002d68 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
            frequency = CSI_VALUE;
 8002d62:	4b9b      	ldr	r3, [pc, #620]	; (8002fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8002d64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002d66:	e13b      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8002d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d6e:	d102      	bne.n	8002d76 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
            frequency = HSE_VALUE;
 8002d70:	4b98      	ldr	r3, [pc, #608]	; (8002fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8002d72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002d74:	e134      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
            frequency = 0;
 8002d76:	2300      	movs	r3, #0
 8002d78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002d7a:	e131      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8002d7c:	4b96      	ldr	r3, [pc, #600]	; (8002fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 8002d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002d80:	e12e      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      default :
        {
          frequency = 0;
 8002d82:	2300      	movs	r3, #0
 8002d84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002d86:	e12b      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d8e:	d15e      	bne.n	8002e4e <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8002d90:	4b8d      	ldr	r3, [pc, #564]	; (8002fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8002d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d94:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8002d98:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8002d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002da0:	d033      	beq.n	8002e0a <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8002da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002da8:	d84e      	bhi.n	8002e48 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8002daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002db0:	d047      	beq.n	8002e42 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8002db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002db8:	d846      	bhi.n	8002e48 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8002dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dc0:	d01b      	beq.n	8002dfa <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8002dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dc8:	d83e      	bhi.n	8002e48 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8002dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d004      	beq.n	8002dda <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
 8002dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dd6:	d008      	beq.n	8002dea <HAL_RCCEx_GetPeriphCLKFreq+0x36e>
 8002dd8:	e036      	b.n	8002e48 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8002dda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dde:	4618      	mov	r0, r3
 8002de0:	f000 fbc2 	bl	8003568 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8002de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002de8:	e0fa      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002dea:	f107 0318 	add.w	r3, r7, #24
 8002dee:	4618      	mov	r0, r3
 8002df0:	f000 f912 	bl	8003018 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002df8:	e0f2      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002dfa:	f107 030c 	add.w	r3, r7, #12
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 fa5e 	bl	80032c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002e08:	e0ea      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8002e0a:	4b6f      	ldr	r3, [pc, #444]	; (8002fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8002e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e0e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e12:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8002e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d102      	bne.n	8002e20 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8002e1a:	4b6c      	ldr	r3, [pc, #432]	; (8002fcc <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 8002e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8002e1e:	e0df      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8002e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e26:	d102      	bne.n	8002e2e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
            frequency = CSI_VALUE;
 8002e28:	4b69      	ldr	r3, [pc, #420]	; (8002fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8002e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002e2c:	e0d8      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8002e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e34:	d102      	bne.n	8002e3c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
            frequency = HSE_VALUE;
 8002e36:	4b67      	ldr	r3, [pc, #412]	; (8002fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8002e38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002e3a:	e0d1      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
            frequency = 0;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002e40:	e0ce      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8002e42:	4b65      	ldr	r3, [pc, #404]	; (8002fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 8002e44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002e46:	e0cb      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      default :
        {
          frequency = 0;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002e4c:	e0c8      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e54:	d143      	bne.n	8002ede <HAL_RCCEx_GetPeriphCLKFreq+0x462>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8002e56:	4b5c      	ldr	r3, [pc, #368]	; (8002fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8002e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e5e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8002e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e66:	d01b      	beq.n	8002ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 8002e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e6e:	d833      	bhi.n	8002ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
 8002e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d004      	beq.n	8002e80 <HAL_RCCEx_GetPeriphCLKFreq+0x404>
 8002e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e7c:	d008      	beq.n	8002e90 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8002e7e:	e02b      	b.n	8002ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002e80:	f107 0318 	add.w	r3, r7, #24
 8002e84:	4618      	mov	r0, r3
 8002e86:	f000 f8c7 	bl	8003018 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002e8e:	e0a7      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002e90:	f107 030c 	add.w	r3, r7, #12
 8002e94:	4618      	mov	r0, r3
 8002e96:	f000 fa13 	bl	80032c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002e9e:	e09f      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8002ea0:	4b49      	ldr	r3, [pc, #292]	; (8002fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8002ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ea8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8002eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d102      	bne.n	8002eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x43a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8002eb0:	4b46      	ldr	r3, [pc, #280]	; (8002fcc <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 8002eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8002eb4:	e094      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8002eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ebc:	d102      	bne.n	8002ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x448>
            frequency = CSI_VALUE;
 8002ebe:	4b44      	ldr	r3, [pc, #272]	; (8002fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8002ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002ec2:	e08d      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8002ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002eca:	d102      	bne.n	8002ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
            frequency = HSE_VALUE;
 8002ecc:	4b41      	ldr	r3, [pc, #260]	; (8002fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8002ece:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002ed0:	e086      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
            frequency = 0;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002ed6:	e083      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      default :
        {
          frequency = 0;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002edc:	e080      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ee4:	d11f      	bne.n	8002f26 <HAL_RCCEx_GetPeriphCLKFreq+0x4aa>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8002ee6:	4b38      	ldr	r3, [pc, #224]	; (8002fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8002ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eee:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8002ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d004      	beq.n	8002f00 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8002ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002efc:	d008      	beq.n	8002f10 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
 8002efe:	e00f      	b.n	8002f20 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8002f00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f04:	4618      	mov	r0, r3
 8002f06:	f000 fb2f 	bl	8003568 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8002f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002f0e:	e067      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002f10:	f107 0318 	add.w	r3, r7, #24
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 f87f 	bl	8003018 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8002f1a:	6a3b      	ldr	r3, [r7, #32]
 8002f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002f1e:	e05f      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      default :
        {
          frequency = 0;
 8002f20:	2300      	movs	r3, #0
 8002f22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002f24:	e05c      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f2c:	d156      	bne.n	8002fdc <HAL_RCCEx_GetPeriphCLKFreq+0x560>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8002f2e:	4b26      	ldr	r3, [pc, #152]	; (8002fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8002f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f32:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8002f36:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8002f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f3e:	d03d      	beq.n	8002fbc <HAL_RCCEx_GetPeriphCLKFreq+0x540>
 8002f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f46:	d83c      	bhi.n	8002fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8002f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f4e:	d032      	beq.n	8002fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x53a>
 8002f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f56:	d834      	bhi.n	8002fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8002f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f5e:	d027      	beq.n	8002fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>
 8002f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f62:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f66:	d82c      	bhi.n	8002fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8002f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f6e:	d017      	beq.n	8002fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
 8002f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f76:	d824      	bhi.n	8002fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8002f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d004      	beq.n	8002f88 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
 8002f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f84:	d004      	beq.n	8002f90 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
 8002f86:	e01c      	b.n	8002fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8002f88:	f000 f830 	bl	8002fec <HAL_RCCEx_GetD3PCLK1Freq>
 8002f8c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8002f8e:	e027      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002f90:	f107 0318 	add.w	r3, r7, #24
 8002f94:	4618      	mov	r0, r3
 8002f96:	f000 f83f 	bl	8003018 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002f9e:	e01f      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002fa0:	f107 030c 	add.w	r3, r7, #12
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f000 f98b 	bl	80032c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002fae:	e017      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8002fb0:	4b06      	ldr	r3, [pc, #24]	; (8002fcc <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 8002fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002fb4:	e014      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8002fb6:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8002fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002fba:	e011      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8002fbc:	4b05      	ldr	r3, [pc, #20]	; (8002fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8002fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002fc0:	e00e      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002fc6:	e00b      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8002fc8:	58024400 	.word	0x58024400
 8002fcc:	03d09000 	.word	0x03d09000
 8002fd0:	003d0900 	.word	0x003d0900
 8002fd4:	017d7840 	.word	0x017d7840
 8002fd8:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else
    {
      frequency = 0;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8002fe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3740      	adds	r7, #64	; 0x40
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop

08002fec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8002ff0:	f7ff fce8 	bl	80029c4 <HAL_RCC_GetHCLKFreq>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	4b06      	ldr	r3, [pc, #24]	; (8003010 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	091b      	lsrs	r3, r3, #4
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	4904      	ldr	r1, [pc, #16]	; (8003014 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003002:	5ccb      	ldrb	r3, [r1, r3]
 8003004:	f003 031f 	and.w	r3, r3, #31
 8003008:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800300c:	4618      	mov	r0, r3
 800300e:	bd80      	pop	{r7, pc}
 8003010:	58024400 	.word	0x58024400
 8003014:	0800a78c 	.word	0x0800a78c

08003018 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003018:	b480      	push	{r7}
 800301a:	b089      	sub	sp, #36	; 0x24
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003020:	4ba1      	ldr	r3, [pc, #644]	; (80032a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003024:	f003 0303 	and.w	r3, r3, #3
 8003028:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800302a:	4b9f      	ldr	r3, [pc, #636]	; (80032a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800302c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302e:	0b1b      	lsrs	r3, r3, #12
 8003030:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003034:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003036:	4b9c      	ldr	r3, [pc, #624]	; (80032a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303a:	091b      	lsrs	r3, r3, #4
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003042:	4b99      	ldr	r3, [pc, #612]	; (80032a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003046:	08db      	lsrs	r3, r3, #3
 8003048:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	fb02 f303 	mul.w	r3, r2, r3
 8003052:	ee07 3a90 	vmov	s15, r3
 8003056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800305a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	2b00      	cmp	r3, #0
 8003062:	f000 8111 	beq.w	8003288 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	2b02      	cmp	r3, #2
 800306a:	f000 8083 	beq.w	8003174 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	2b02      	cmp	r3, #2
 8003072:	f200 80a1 	bhi.w	80031b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d003      	beq.n	8003084 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d056      	beq.n	8003130 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003082:	e099      	b.n	80031b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003084:	4b88      	ldr	r3, [pc, #544]	; (80032a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0320 	and.w	r3, r3, #32
 800308c:	2b00      	cmp	r3, #0
 800308e:	d02d      	beq.n	80030ec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003090:	4b85      	ldr	r3, [pc, #532]	; (80032a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	08db      	lsrs	r3, r3, #3
 8003096:	f003 0303 	and.w	r3, r3, #3
 800309a:	4a84      	ldr	r2, [pc, #528]	; (80032ac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800309c:	fa22 f303 	lsr.w	r3, r2, r3
 80030a0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	ee07 3a90 	vmov	s15, r3
 80030a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	ee07 3a90 	vmov	s15, r3
 80030b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030ba:	4b7b      	ldr	r3, [pc, #492]	; (80032a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80030bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030c2:	ee07 3a90 	vmov	s15, r3
 80030c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80030ce:	eddf 5a78 	vldr	s11, [pc, #480]	; 80032b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80030d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030e6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80030ea:	e087      	b.n	80031fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	ee07 3a90 	vmov	s15, r3
 80030f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030f6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80032b4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80030fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030fe:	4b6a      	ldr	r3, [pc, #424]	; (80032a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003106:	ee07 3a90 	vmov	s15, r3
 800310a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800310e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003112:	eddf 5a67 	vldr	s11, [pc, #412]	; 80032b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800311a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800311e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800312a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800312e:	e065      	b.n	80031fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	ee07 3a90 	vmov	s15, r3
 8003136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800313a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80032b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800313e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003142:	4b59      	ldr	r3, [pc, #356]	; (80032a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800314a:	ee07 3a90 	vmov	s15, r3
 800314e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003152:	ed97 6a03 	vldr	s12, [r7, #12]
 8003156:	eddf 5a56 	vldr	s11, [pc, #344]	; 80032b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800315a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800315e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003162:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800316a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800316e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003172:	e043      	b.n	80031fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	ee07 3a90 	vmov	s15, r3
 800317a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800317e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80032bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003186:	4b48      	ldr	r3, [pc, #288]	; (80032a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800318e:	ee07 3a90 	vmov	s15, r3
 8003192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003196:	ed97 6a03 	vldr	s12, [r7, #12]
 800319a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80032b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800319e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80031b6:	e021      	b.n	80031fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	ee07 3a90 	vmov	s15, r3
 80031be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031c2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80032b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80031c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031ca:	4b37      	ldr	r3, [pc, #220]	; (80032a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80031cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031d2:	ee07 3a90 	vmov	s15, r3
 80031d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031da:	ed97 6a03 	vldr	s12, [r7, #12]
 80031de:	eddf 5a34 	vldr	s11, [pc, #208]	; 80032b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80031e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80031fa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80031fc:	4b2a      	ldr	r3, [pc, #168]	; (80032a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80031fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003200:	0a5b      	lsrs	r3, r3, #9
 8003202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003206:	ee07 3a90 	vmov	s15, r3
 800320a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800320e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003212:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003216:	edd7 6a07 	vldr	s13, [r7, #28]
 800321a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800321e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003222:	ee17 2a90 	vmov	r2, s15
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800322a:	4b1f      	ldr	r3, [pc, #124]	; (80032a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800322c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322e:	0c1b      	lsrs	r3, r3, #16
 8003230:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003234:	ee07 3a90 	vmov	s15, r3
 8003238:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800323c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003240:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003244:	edd7 6a07 	vldr	s13, [r7, #28]
 8003248:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800324c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003250:	ee17 2a90 	vmov	r2, s15
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003258:	4b13      	ldr	r3, [pc, #76]	; (80032a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800325a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325c:	0e1b      	lsrs	r3, r3, #24
 800325e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003262:	ee07 3a90 	vmov	s15, r3
 8003266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800326a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800326e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003272:	edd7 6a07 	vldr	s13, [r7, #28]
 8003276:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800327a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800327e:	ee17 2a90 	vmov	r2, s15
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003286:	e008      	b.n	800329a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	609a      	str	r2, [r3, #8]
}
 800329a:	bf00      	nop
 800329c:	3724      	adds	r7, #36	; 0x24
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	58024400 	.word	0x58024400
 80032ac:	03d09000 	.word	0x03d09000
 80032b0:	46000000 	.word	0x46000000
 80032b4:	4c742400 	.word	0x4c742400
 80032b8:	4a742400 	.word	0x4a742400
 80032bc:	4bbebc20 	.word	0x4bbebc20

080032c0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b089      	sub	sp, #36	; 0x24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80032c8:	4ba1      	ldr	r3, [pc, #644]	; (8003550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80032ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032cc:	f003 0303 	and.w	r3, r3, #3
 80032d0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80032d2:	4b9f      	ldr	r3, [pc, #636]	; (8003550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80032d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d6:	0d1b      	lsrs	r3, r3, #20
 80032d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032dc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80032de:	4b9c      	ldr	r3, [pc, #624]	; (8003550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80032e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e2:	0a1b      	lsrs	r3, r3, #8
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80032ea:	4b99      	ldr	r3, [pc, #612]	; (8003550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80032ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ee:	08db      	lsrs	r3, r3, #3
 80032f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	fb02 f303 	mul.w	r3, r2, r3
 80032fa:	ee07 3a90 	vmov	s15, r3
 80032fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003302:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	2b00      	cmp	r3, #0
 800330a:	f000 8111 	beq.w	8003530 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	2b02      	cmp	r3, #2
 8003312:	f000 8083 	beq.w	800341c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	2b02      	cmp	r3, #2
 800331a:	f200 80a1 	bhi.w	8003460 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d003      	beq.n	800332c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d056      	beq.n	80033d8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800332a:	e099      	b.n	8003460 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800332c:	4b88      	ldr	r3, [pc, #544]	; (8003550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0320 	and.w	r3, r3, #32
 8003334:	2b00      	cmp	r3, #0
 8003336:	d02d      	beq.n	8003394 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003338:	4b85      	ldr	r3, [pc, #532]	; (8003550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	08db      	lsrs	r3, r3, #3
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	4a84      	ldr	r2, [pc, #528]	; (8003554 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003344:	fa22 f303 	lsr.w	r3, r2, r3
 8003348:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	ee07 3a90 	vmov	s15, r3
 8003350:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	ee07 3a90 	vmov	s15, r3
 800335a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800335e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003362:	4b7b      	ldr	r3, [pc, #492]	; (8003550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800336a:	ee07 3a90 	vmov	s15, r3
 800336e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003372:	ed97 6a03 	vldr	s12, [r7, #12]
 8003376:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003558 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800337a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800337e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003382:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800338a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800338e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003392:	e087      	b.n	80034a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	ee07 3a90 	vmov	s15, r3
 800339a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800339e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800355c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80033a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033a6:	4b6a      	ldr	r3, [pc, #424]	; (8003550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ae:	ee07 3a90 	vmov	s15, r3
 80033b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80033ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003558 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80033be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80033d6:	e065      	b.n	80034a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	ee07 3a90 	vmov	s15, r3
 80033de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003560 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80033e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033ea:	4b59      	ldr	r3, [pc, #356]	; (8003550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033f2:	ee07 3a90 	vmov	s15, r3
 80033f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80033fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003558 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800340a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800340e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003416:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800341a:	e043      	b.n	80034a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	ee07 3a90 	vmov	s15, r3
 8003422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003426:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003564 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800342a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800342e:	4b48      	ldr	r3, [pc, #288]	; (8003550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003436:	ee07 3a90 	vmov	s15, r3
 800343a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800343e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003442:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003558 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800344a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800344e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800345a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800345e:	e021      	b.n	80034a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	ee07 3a90 	vmov	s15, r3
 8003466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800346a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003560 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800346e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003472:	4b37      	ldr	r3, [pc, #220]	; (8003550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800347a:	ee07 3a90 	vmov	s15, r3
 800347e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003482:	ed97 6a03 	vldr	s12, [r7, #12]
 8003486:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003558 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800348a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800348e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003492:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800349a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800349e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80034a2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80034a4:	4b2a      	ldr	r3, [pc, #168]	; (8003550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80034a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a8:	0a5b      	lsrs	r3, r3, #9
 80034aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034ae:	ee07 3a90 	vmov	s15, r3
 80034b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80034be:	edd7 6a07 	vldr	s13, [r7, #28]
 80034c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034ca:	ee17 2a90 	vmov	r2, s15
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80034d2:	4b1f      	ldr	r3, [pc, #124]	; (8003550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	0c1b      	lsrs	r3, r3, #16
 80034d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034dc:	ee07 3a90 	vmov	s15, r3
 80034e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80034ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80034f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034f8:	ee17 2a90 	vmov	r2, s15
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003500:	4b13      	ldr	r3, [pc, #76]	; (8003550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003504:	0e1b      	lsrs	r3, r3, #24
 8003506:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800350a:	ee07 3a90 	vmov	s15, r3
 800350e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003512:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003516:	ee37 7a87 	vadd.f32	s14, s15, s14
 800351a:	edd7 6a07 	vldr	s13, [r7, #28]
 800351e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003522:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003526:	ee17 2a90 	vmov	r2, s15
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800352e:	e008      	b.n	8003542 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	609a      	str	r2, [r3, #8]
}
 8003542:	bf00      	nop
 8003544:	3724      	adds	r7, #36	; 0x24
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	58024400 	.word	0x58024400
 8003554:	03d09000 	.word	0x03d09000
 8003558:	46000000 	.word	0x46000000
 800355c:	4c742400 	.word	0x4c742400
 8003560:	4a742400 	.word	0x4a742400
 8003564:	4bbebc20 	.word	0x4bbebc20

08003568 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8003568:	b480      	push	{r7}
 800356a:	b089      	sub	sp, #36	; 0x24
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003570:	4ba0      	ldr	r3, [pc, #640]	; (80037f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8003572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003574:	f003 0303 	and.w	r3, r3, #3
 8003578:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800357a:	4b9e      	ldr	r3, [pc, #632]	; (80037f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800357c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357e:	091b      	lsrs	r3, r3, #4
 8003580:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003584:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8003586:	4b9b      	ldr	r3, [pc, #620]	; (80037f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8003588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003590:	4b98      	ldr	r3, [pc, #608]	; (80037f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8003592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003594:	08db      	lsrs	r3, r3, #3
 8003596:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	fb02 f303 	mul.w	r3, r2, r3
 80035a0:	ee07 3a90 	vmov	s15, r3
 80035a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035a8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 8111 	beq.w	80037d6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	f000 8083 	beq.w	80036c2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	2b02      	cmp	r3, #2
 80035c0:	f200 80a1 	bhi.w	8003706 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d056      	beq.n	800367e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80035d0:	e099      	b.n	8003706 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035d2:	4b88      	ldr	r3, [pc, #544]	; (80037f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0320 	and.w	r3, r3, #32
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d02d      	beq.n	800363a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80035de:	4b85      	ldr	r3, [pc, #532]	; (80037f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	08db      	lsrs	r3, r3, #3
 80035e4:	f003 0303 	and.w	r3, r3, #3
 80035e8:	4a83      	ldr	r2, [pc, #524]	; (80037f8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80035ea:	fa22 f303 	lsr.w	r3, r2, r3
 80035ee:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	ee07 3a90 	vmov	s15, r3
 80035f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	ee07 3a90 	vmov	s15, r3
 8003600:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003604:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003608:	4b7a      	ldr	r3, [pc, #488]	; (80037f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800360a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003610:	ee07 3a90 	vmov	s15, r3
 8003614:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003618:	ed97 6a03 	vldr	s12, [r7, #12]
 800361c:	eddf 5a77 	vldr	s11, [pc, #476]	; 80037fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8003620:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003624:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003628:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800362c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003630:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003634:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003638:	e087      	b.n	800374a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	ee07 3a90 	vmov	s15, r3
 8003640:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003644:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8003800 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8003648:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800364c:	4b69      	ldr	r3, [pc, #420]	; (80037f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800364e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003654:	ee07 3a90 	vmov	s15, r3
 8003658:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800365c:	ed97 6a03 	vldr	s12, [r7, #12]
 8003660:	eddf 5a66 	vldr	s11, [pc, #408]	; 80037fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8003664:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003668:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800366c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003670:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003674:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003678:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800367c:	e065      	b.n	800374a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	ee07 3a90 	vmov	s15, r3
 8003684:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003688:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8003804 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800368c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003690:	4b58      	ldr	r3, [pc, #352]	; (80037f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8003692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003698:	ee07 3a90 	vmov	s15, r3
 800369c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80036a4:	eddf 5a55 	vldr	s11, [pc, #340]	; 80037fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80036a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036bc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80036c0:	e043      	b.n	800374a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	ee07 3a90 	vmov	s15, r3
 80036c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036cc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8003808 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80036d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036d4:	4b47      	ldr	r3, [pc, #284]	; (80037f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80036d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036dc:	ee07 3a90 	vmov	s15, r3
 80036e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80036e8:	eddf 5a44 	vldr	s11, [pc, #272]	; 80037fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80036ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003700:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003704:	e021      	b.n	800374a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	ee07 3a90 	vmov	s15, r3
 800370c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003710:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8003804 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8003714:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003718:	4b36      	ldr	r3, [pc, #216]	; (80037f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800371a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003720:	ee07 3a90 	vmov	s15, r3
 8003724:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003728:	ed97 6a03 	vldr	s12, [r7, #12]
 800372c:	eddf 5a33 	vldr	s11, [pc, #204]	; 80037fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8003730:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003734:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003738:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800373c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003740:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003744:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003748:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800374a:	4b2a      	ldr	r3, [pc, #168]	; (80037f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800374c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374e:	0a5b      	lsrs	r3, r3, #9
 8003750:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003754:	ee07 3a90 	vmov	s15, r3
 8003758:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800375c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003760:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003764:	edd7 6a07 	vldr	s13, [r7, #28]
 8003768:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800376c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003770:	ee17 2a90 	vmov	r2, s15
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8003778:	4b1e      	ldr	r3, [pc, #120]	; (80037f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800377a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377c:	0c1b      	lsrs	r3, r3, #16
 800377e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003782:	ee07 3a90 	vmov	s15, r3
 8003786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800378a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800378e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003792:	edd7 6a07 	vldr	s13, [r7, #28]
 8003796:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800379a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800379e:	ee17 2a90 	vmov	r2, s15
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80037a6:	4b13      	ldr	r3, [pc, #76]	; (80037f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80037a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037aa:	0e1b      	lsrs	r3, r3, #24
 80037ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037b0:	ee07 3a90 	vmov	s15, r3
 80037b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80037bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80037c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80037c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037cc:	ee17 2a90 	vmov	r2, s15
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80037d4:	e008      	b.n	80037e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	609a      	str	r2, [r3, #8]
}
 80037e8:	bf00      	nop
 80037ea:	3724      	adds	r7, #36	; 0x24
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr
 80037f4:	58024400 	.word	0x58024400
 80037f8:	03d09000 	.word	0x03d09000
 80037fc:	46000000 	.word	0x46000000
 8003800:	4c742400 	.word	0x4c742400
 8003804:	4a742400 	.word	0x4a742400
 8003808:	4bbebc20 	.word	0x4bbebc20

0800380c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b08a      	sub	sp, #40	; 0x28
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e07c      	b.n	8003918 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10c      	bne.n	8003844 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d102      	bne.n	800383e <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2202      	movs	r2, #2
 800383c:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7fd f972 	bl	8000b28 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2203      	movs	r2, #3
 8003848:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 f867 	bl	8003920 <HAL_SD_InitCard>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d001      	beq.n	800385c <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e05d      	b.n	8003918 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800385c:	f107 0308 	add.w	r3, r7, #8
 8003860:	4619      	mov	r1, r3
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 fdbe 	bl	80043e4 <HAL_SD_GetCardStatus>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e052      	b.n	8003918 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8003872:	7e3b      	ldrb	r3, [r7, #24]
 8003874:	b2db      	uxtb	r3, r3
 8003876:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8003878:	7e7b      	ldrb	r3, [r7, #25]
 800387a:	b2db      	uxtb	r3, r3
 800387c:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003882:	2b01      	cmp	r3, #1
 8003884:	d10a      	bne.n	800389c <HAL_SD_Init+0x90>
 8003886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003888:	2b00      	cmp	r3, #0
 800388a:	d102      	bne.n	8003892 <HAL_SD_Init+0x86>
 800388c:	6a3b      	ldr	r3, [r7, #32]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d004      	beq.n	800389c <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003898:	65da      	str	r2, [r3, #92]	; 0x5c
 800389a:	e00b      	b.n	80038b4 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d104      	bne.n	80038ae <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038aa:	65da      	str	r2, [r3, #92]	; 0x5c
 80038ac:	e002      	b.n	80038b4 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	4619      	mov	r1, r3
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 fe74 	bl	80045a8 <HAL_SD_ConfigWideBusOperation>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e026      	b.n	8003918 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80038ca:	f7fd fb73 	bl	8000fb4 <HAL_GetTick>
 80038ce:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80038d0:	e011      	b.n	80038f6 <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 80038d2:	f7fd fb6f 	bl	8000fb4 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e0:	d109      	bne.n	80038f6 <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80038e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e010      	b.n	8003918 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 ff00 	bl	80046fc <HAL_SD_GetCardState>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b04      	cmp	r3, #4
 8003900:	d1e7      	bne.n	80038d2 <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	3728      	adds	r7, #40	; 0x28
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003920:	b5b0      	push	{r4, r5, r7, lr}
 8003922:	b08e      	sub	sp, #56	; 0x38
 8003924:	af04      	add	r7, sp, #16
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003928:	2300      	movs	r3, #0
 800392a:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800392c:	2300      	movs	r3, #0
 800392e:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8003930:	2300      	movs	r3, #0
 8003932:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003934:	2300      	movs	r3, #0
 8003936:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8003938:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800393c:	f7ff f89e 	bl	8002a7c <HAL_RCCEx_GetPeriphCLKFreq>
 8003940:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 8003942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003944:	0a1b      	lsrs	r3, r3, #8
 8003946:	4a40      	ldr	r2, [pc, #256]	; (8003a48 <HAL_SD_InitCard+0x128>)
 8003948:	fba2 2303 	umull	r2, r3, r2, r3
 800394c:	091b      	lsrs	r3, r3, #4
 800394e:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	2b02      	cmp	r3, #2
 8003956:	d107      	bne.n	8003968 <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f042 0210 	orr.w	r2, r2, #16
 8003966:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681d      	ldr	r5, [r3, #0]
 800396c:	466c      	mov	r4, sp
 800396e:	f107 0314 	add.w	r3, r7, #20
 8003972:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003976:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800397a:	f107 0308 	add.w	r3, r7, #8
 800397e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003980:	4628      	mov	r0, r5
 8003982:	f002 fdd7 	bl	8006534 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4618      	mov	r0, r3
 800398c:	f002 fe1a 	bl	80065c4 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003996:	fbb2 f3f3 	udiv	r3, r2, r3
 800399a:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d008      	beq.n	80039b4 <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80039a2:	4a2a      	ldr	r2, [pc, #168]	; (8003a4c <HAL_SD_InitCard+0x12c>)
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039aa:	3301      	adds	r3, #1
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7fd fb0d 	bl	8000fcc <HAL_Delay>
 80039b2:	e002      	b.n	80039ba <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 80039b4:	2002      	movs	r0, #2
 80039b6:	f7fd fb09 	bl	8000fcc <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 ff7c 	bl	80048b8 <SD_PowerON>
 80039c0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00b      	beq.n	80039e0 <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039d4:	6a3b      	ldr	r3, [r7, #32]
 80039d6:	431a      	orrs	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e02e      	b.n	8003a3e <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 feab 	bl	800473c <SD_InitCard>
 80039e6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80039e8:	6a3b      	ldr	r3, [r7, #32]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00b      	beq.n	8003a06 <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039fa:	6a3b      	ldr	r3, [r7, #32]
 80039fc:	431a      	orrs	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e01b      	b.n	8003a3e <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f002 fe6e 	bl	80066f0 <SDMMC_CmdBlockLength>
 8003a14:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a16:	6a3b      	ldr	r3, [r7, #32]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00f      	beq.n	8003a3c <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a0b      	ldr	r2, [pc, #44]	; (8003a50 <HAL_SD_InitCard+0x130>)
 8003a22:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a28:	6a3b      	ldr	r3, [r7, #32]
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e000      	b.n	8003a3e <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3728      	adds	r7, #40	; 0x28
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bdb0      	pop	{r4, r5, r7, pc}
 8003a46:	bf00      	nop
 8003a48:	014f8b59 	.word	0x014f8b59
 8003a4c:	00012110 	.word	0x00012110
 8003a50:	1fe00fff 	.word	0x1fe00fff

08003a54 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b092      	sub	sp, #72	; 0x48
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
 8003a60:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003a62:	f7fd faa7 	bl	8000fb4 <HAL_GetTick>
 8003a66:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d107      	bne.n	8003a86 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e167      	b.n	8003d56 <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	f040 815a 	bne.w	8003d48 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003a9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	441a      	add	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d907      	bls.n	8003ab8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aac:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e14e      	b.n	8003d56 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2203      	movs	r2, #3
 8003abc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d002      	beq.n	8003ad6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8003ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad2:	025b      	lsls	r3, r3, #9
 8003ad4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8003ada:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	025b      	lsls	r3, r3, #9
 8003ae0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003ae2:	2390      	movs	r3, #144	; 0x90
 8003ae4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003aea:	2300      	movs	r3, #0
 8003aec:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8003aee:	2300      	movs	r3, #0
 8003af0:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f107 0214 	add.w	r2, r7, #20
 8003afa:	4611      	mov	r1, r2
 8003afc:	4618      	mov	r0, r3
 8003afe:	f002 fdcb 	bl	8006698 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68da      	ldr	r2, [r3, #12]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b10:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d90a      	bls.n	8003b2e <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2202      	movs	r2, #2
 8003b1c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b24:	4618      	mov	r0, r3
 8003b26:	f002 fe29 	bl	800677c <SDMMC_CmdReadMultiBlock>
 8003b2a:	6478      	str	r0, [r7, #68]	; 0x44
 8003b2c:	e009      	b.n	8003b42 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2201      	movs	r2, #1
 8003b32:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f002 fdfb 	bl	8006736 <SDMMC_CmdReadSingleBlock>
 8003b40:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d012      	beq.n	8003b6e <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a84      	ldr	r2, [pc, #528]	; (8003d60 <HAL_SD_ReadBlocks+0x30c>)
 8003b4e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b56:	431a      	orrs	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e0f3      	b.n	8003d56 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003b72:	e058      	b.n	8003c26 <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d033      	beq.n	8003bea <HAL_SD_ReadBlocks+0x196>
 8003b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b84:	2b1f      	cmp	r3, #31
 8003b86:	d930      	bls.n	8003bea <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8003b88:	2300      	movs	r3, #0
 8003b8a:	643b      	str	r3, [r7, #64]	; 0x40
 8003b8c:	e027      	b.n	8003bde <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f002 fcf8 	bl	8006588 <SDMMC_ReadFIFO>
 8003b98:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8003b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b9c:	b2da      	uxtb	r2, r3
 8003b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ba0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003baa:	0a1b      	lsrs	r3, r3, #8
 8003bac:	b2da      	uxtb	r2, r3
 8003bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bb0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bba:	0c1b      	lsrs	r3, r3, #16
 8003bbc:	b2da      	uxtb	r2, r3
 8003bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bc0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bca:	0e1b      	lsrs	r3, r3, #24
 8003bcc:	b2da      	uxtb	r2, r3
 8003bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bd0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 8003bd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bda:	3301      	adds	r3, #1
 8003bdc:	643b      	str	r3, [r7, #64]	; 0x40
 8003bde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003be0:	2b07      	cmp	r3, #7
 8003be2:	d9d4      	bls.n	8003b8e <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8003be4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003be6:	3b20      	subs	r3, #32
 8003be8:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003bea:	f7fd f9e3 	bl	8000fb4 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d902      	bls.n	8003c00 <HAL_SD_ReadBlocks+0x1ac>
 8003bfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d112      	bne.n	8003c26 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a56      	ldr	r2, [pc, #344]	; (8003d60 <HAL_SD_ReadBlocks+0x30c>)
 8003c06:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e097      	b.n	8003d56 <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c2c:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d09f      	beq.n	8003b74 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68da      	ldr	r2, [r3, #12]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c42:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d022      	beq.n	8003c98 <HAL_SD_ReadBlocks+0x244>
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d91f      	bls.n	8003c98 <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5c:	2b03      	cmp	r3, #3
 8003c5e:	d01b      	beq.n	8003c98 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f002 fdf3 	bl	8006850 <SDMMC_CmdStopTransfer>
 8003c6a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003c6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d012      	beq.n	8003c98 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a3a      	ldr	r2, [pc, #232]	; (8003d60 <HAL_SD_ReadBlocks+0x30c>)
 8003c78:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c80:	431a      	orrs	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e05e      	b.n	8003d56 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c9e:	f003 0308 	and.w	r3, r3, #8
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d012      	beq.n	8003ccc <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a2d      	ldr	r2, [pc, #180]	; (8003d60 <HAL_SD_ReadBlocks+0x30c>)
 8003cac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb2:	f043 0208 	orr.w	r2, r3, #8
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e044      	b.n	8003d56 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d012      	beq.n	8003d00 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a20      	ldr	r2, [pc, #128]	; (8003d60 <HAL_SD_ReadBlocks+0x30c>)
 8003ce0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce6:	f043 0202 	orr.w	r2, r3, #2
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e02a      	b.n	8003d56 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d06:	f003 0320 	and.w	r3, r3, #32
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d012      	beq.n	8003d34 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a13      	ldr	r2, [pc, #76]	; (8003d60 <HAL_SD_ReadBlocks+0x30c>)
 8003d14:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1a:	f043 0220 	orr.w	r2, r3, #32
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e010      	b.n	8003d56 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a0a      	ldr	r2, [pc, #40]	; (8003d64 <HAL_SD_ReadBlocks+0x310>)
 8003d3a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003d44:	2300      	movs	r3, #0
 8003d46:	e006      	b.n	8003d56 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
  }
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3748      	adds	r7, #72	; 0x48
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	1fe00fff 	.word	0x1fe00fff
 8003d64:	18000f3a 	.word	0x18000f3a

08003d68 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b092      	sub	sp, #72	; 0x48
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
 8003d74:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003d76:	f7fd f91d 	bl	8000fb4 <HAL_GetTick>
 8003d7a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d107      	bne.n	8003d9a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e16b      	b.n	8004072 <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	f040 815e 	bne.w	8004064 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003dae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	441a      	add	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d907      	bls.n	8003dcc <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e152      	b.n	8004072 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2203      	movs	r2, #3
 8003dd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d002      	beq.n	8003dea <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8003de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de6:	025b      	lsls	r3, r3, #9
 8003de8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003dea:	f04f 33ff 	mov.w	r3, #4294967295
 8003dee:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	025b      	lsls	r3, r3, #9
 8003df4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003df6:	2390      	movs	r3, #144	; 0x90
 8003df8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8003e02:	2300      	movs	r3, #0
 8003e04:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f107 0218 	add.w	r2, r7, #24
 8003e0e:	4611      	mov	r1, r2
 8003e10:	4618      	mov	r0, r3
 8003e12:	f002 fc41 	bl	8006698 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68da      	ldr	r2, [r3, #12]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e24:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d90a      	bls.n	8003e42 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f002 fce5 	bl	8006808 <SDMMC_CmdWriteMultiBlock>
 8003e3e:	6478      	str	r0, [r7, #68]	; 0x44
 8003e40:	e009      	b.n	8003e56 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2210      	movs	r2, #16
 8003e46:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f002 fcb7 	bl	80067c2 <SDMMC_CmdWriteSingleBlock>
 8003e54:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d012      	beq.n	8003e82 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a86      	ldr	r2, [pc, #536]	; (800407c <HAL_SD_WriteBlocks+0x314>)
 8003e62:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e0f7      	b.n	8004072 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003e86:	e05c      	b.n	8003f42 <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d037      	beq.n	8003f06 <HAL_SD_WriteBlocks+0x19e>
 8003e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e98:	2b1f      	cmp	r3, #31
 8003e9a:	d934      	bls.n	8003f06 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	643b      	str	r3, [r7, #64]	; 0x40
 8003ea0:	e02b      	b.n	8003efa <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8003ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eaa:	3301      	adds	r3, #1
 8003eac:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	021a      	lsls	r2, r3, #8
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8003ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	041a      	lsls	r2, r3, #16
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ece:	3301      	adds	r3, #1
 8003ed0:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	061a      	lsls	r2, r3, #24
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f107 0214 	add.w	r2, r7, #20
 8003eec:	4611      	mov	r1, r2
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f002 fb57 	bl	80065a2 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8003ef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	643b      	str	r3, [r7, #64]	; 0x40
 8003efa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003efc:	2b07      	cmp	r3, #7
 8003efe:	d9d0      	bls.n	8003ea2 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8003f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f02:	3b20      	subs	r3, #32
 8003f04:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003f06:	f7fd f855 	bl	8000fb4 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d902      	bls.n	8003f1c <HAL_SD_WriteBlocks+0x1b4>
 8003f16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d112      	bne.n	8003f42 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a56      	ldr	r2, [pc, #344]	; (800407c <HAL_SD_WriteBlocks+0x314>)
 8003f22:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e097      	b.n	8004072 <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f48:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d09b      	beq.n	8003e88 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68da      	ldr	r2, [r3, #12]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f5e:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d022      	beq.n	8003fb4 <HAL_SD_WriteBlocks+0x24c>
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d91f      	bls.n	8003fb4 <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f78:	2b03      	cmp	r3, #3
 8003f7a:	d01b      	beq.n	8003fb4 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f002 fc65 	bl	8006850 <SDMMC_CmdStopTransfer>
 8003f86:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003f88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d012      	beq.n	8003fb4 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a3a      	ldr	r2, [pc, #232]	; (800407c <HAL_SD_WriteBlocks+0x314>)
 8003f94:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e05e      	b.n	8004072 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fba:	f003 0308 	and.w	r3, r3, #8
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d012      	beq.n	8003fe8 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a2d      	ldr	r2, [pc, #180]	; (800407c <HAL_SD_WriteBlocks+0x314>)
 8003fc8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fce:	f043 0208 	orr.w	r2, r3, #8
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e044      	b.n	8004072 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d012      	beq.n	800401c <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a20      	ldr	r2, [pc, #128]	; (800407c <HAL_SD_WriteBlocks+0x314>)
 8003ffc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004002:	f043 0202 	orr.w	r2, r3, #2
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e02a      	b.n	8004072 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004022:	f003 0310 	and.w	r3, r3, #16
 8004026:	2b00      	cmp	r3, #0
 8004028:	d012      	beq.n	8004050 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a13      	ldr	r2, [pc, #76]	; (800407c <HAL_SD_WriteBlocks+0x314>)
 8004030:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004036:	f043 0210 	orr.w	r2, r3, #16
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e010      	b.n	8004072 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a0a      	ldr	r2, [pc, #40]	; (8004080 <HAL_SD_WriteBlocks+0x318>)
 8004056:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004060:	2300      	movs	r3, #0
 8004062:	e006      	b.n	8004072 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004068:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
  }
}
 8004072:	4618      	mov	r0, r3
 8004074:	3748      	adds	r7, #72	; 0x48
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	1fe00fff 	.word	0x1fe00fff
 8004080:	18000f3a 	.word	0x18000f3a

08004084 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	4603      	mov	r3, r0
 800408c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 800408e:	bf00      	nop
 8004090:	370c      	adds	r7, #12
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
	...

0800409c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040aa:	0f9b      	lsrs	r3, r3, #30
 80040ac:	b2da      	uxtb	r2, r3
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040b6:	0e9b      	lsrs	r3, r3, #26
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	f003 030f 	and.w	r3, r3, #15
 80040be:	b2da      	uxtb	r2, r3
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040c8:	0e1b      	lsrs	r3, r3, #24
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	f003 0303 	and.w	r3, r3, #3
 80040d0:	b2da      	uxtb	r2, r3
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040da:	0c1b      	lsrs	r3, r3, #16
 80040dc:	b2da      	uxtb	r2, r3
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040e6:	0a1b      	lsrs	r3, r3, #8
 80040e8:	b2da      	uxtb	r2, r3
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040f2:	b2da      	uxtb	r2, r3
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040fc:	0d1b      	lsrs	r3, r3, #20
 80040fe:	b29a      	uxth	r2, r3
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004108:	0c1b      	lsrs	r3, r3, #16
 800410a:	b2db      	uxtb	r3, r3
 800410c:	f003 030f 	and.w	r3, r3, #15
 8004110:	b2da      	uxtb	r2, r3
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800411a:	0bdb      	lsrs	r3, r3, #15
 800411c:	b2db      	uxtb	r3, r3
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	b2da      	uxtb	r2, r3
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800412c:	0b9b      	lsrs	r3, r3, #14
 800412e:	b2db      	uxtb	r3, r3
 8004130:	f003 0301 	and.w	r3, r3, #1
 8004134:	b2da      	uxtb	r2, r3
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800413e:	0b5b      	lsrs	r3, r3, #13
 8004140:	b2db      	uxtb	r3, r3
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	b2da      	uxtb	r2, r3
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004150:	0b1b      	lsrs	r3, r3, #12
 8004152:	b2db      	uxtb	r3, r3
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	b2da      	uxtb	r2, r3
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	2200      	movs	r2, #0
 8004162:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004168:	2b00      	cmp	r3, #0
 800416a:	d163      	bne.n	8004234 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004170:	009a      	lsls	r2, r3, #2
 8004172:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004176:	4013      	ands	r3, r2
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800417c:	0f92      	lsrs	r2, r2, #30
 800417e:	431a      	orrs	r2, r3
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004188:	0edb      	lsrs	r3, r3, #27
 800418a:	b2db      	uxtb	r3, r3
 800418c:	f003 0307 	and.w	r3, r3, #7
 8004190:	b2da      	uxtb	r2, r3
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800419a:	0e1b      	lsrs	r3, r3, #24
 800419c:	b2db      	uxtb	r3, r3
 800419e:	f003 0307 	and.w	r3, r3, #7
 80041a2:	b2da      	uxtb	r2, r3
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041ac:	0d5b      	lsrs	r3, r3, #21
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	f003 0307 	and.w	r3, r3, #7
 80041b4:	b2da      	uxtb	r2, r3
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041be:	0c9b      	lsrs	r3, r3, #18
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	f003 0307 	and.w	r3, r3, #7
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041d0:	0bdb      	lsrs	r3, r3, #15
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	f003 0307 	and.w	r3, r3, #7
 80041d8:	b2da      	uxtb	r2, r3
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	1c5a      	adds	r2, r3, #1
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	7e1b      	ldrb	r3, [r3, #24]
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	f003 0307 	and.w	r3, r3, #7
 80041f2:	3302      	adds	r3, #2
 80041f4:	2201      	movs	r2, #1
 80041f6:	fa02 f303 	lsl.w	r3, r2, r3
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80041fe:	fb02 f203 	mul.w	r2, r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	7a1b      	ldrb	r3, [r3, #8]
 800420a:	b2db      	uxtb	r3, r3
 800420c:	f003 030f 	and.w	r3, r3, #15
 8004210:	2201      	movs	r2, #1
 8004212:	409a      	lsls	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004220:	0a52      	lsrs	r2, r2, #9
 8004222:	fb02 f203 	mul.w	r2, r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004230:	659a      	str	r2, [r3, #88]	; 0x58
 8004232:	e031      	b.n	8004298 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004238:	2b01      	cmp	r3, #1
 800423a:	d11d      	bne.n	8004278 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004240:	041b      	lsls	r3, r3, #16
 8004242:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800424a:	0c1b      	lsrs	r3, r3, #16
 800424c:	431a      	orrs	r2, r3
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	3301      	adds	r3, #1
 8004258:	029a      	lsls	r2, r3, #10
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f44f 7200 	mov.w	r2, #512	; 0x200
 800426c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	659a      	str	r2, [r3, #88]	; 0x58
 8004276:	e00f      	b.n	8004298 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a58      	ldr	r2, [pc, #352]	; (80043e0 <HAL_SD_GetCardCSD+0x344>)
 800427e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004284:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e09d      	b.n	80043d4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800429c:	0b9b      	lsrs	r3, r3, #14
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	b2da      	uxtb	r2, r3
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042ae:	09db      	lsrs	r3, r3, #7
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042b6:	b2da      	uxtb	r2, r3
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042c6:	b2da      	uxtb	r2, r3
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042d0:	0fdb      	lsrs	r3, r3, #31
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042dc:	0f5b      	lsrs	r3, r3, #29
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	f003 0303 	and.w	r3, r3, #3
 80042e4:	b2da      	uxtb	r2, r3
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042ee:	0e9b      	lsrs	r3, r3, #26
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	f003 0307 	and.w	r3, r3, #7
 80042f6:	b2da      	uxtb	r2, r3
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004300:	0d9b      	lsrs	r3, r3, #22
 8004302:	b2db      	uxtb	r3, r3
 8004304:	f003 030f 	and.w	r3, r3, #15
 8004308:	b2da      	uxtb	r2, r3
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004312:	0d5b      	lsrs	r3, r3, #21
 8004314:	b2db      	uxtb	r3, r3
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	b2da      	uxtb	r2, r3
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800432e:	0c1b      	lsrs	r3, r3, #16
 8004330:	b2db      	uxtb	r3, r3
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	b2da      	uxtb	r2, r3
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004342:	0bdb      	lsrs	r3, r3, #15
 8004344:	b2db      	uxtb	r3, r3
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	b2da      	uxtb	r2, r3
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004356:	0b9b      	lsrs	r3, r3, #14
 8004358:	b2db      	uxtb	r3, r3
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	b2da      	uxtb	r2, r3
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800436a:	0b5b      	lsrs	r3, r3, #13
 800436c:	b2db      	uxtb	r3, r3
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	b2da      	uxtb	r2, r3
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800437e:	0b1b      	lsrs	r3, r3, #12
 8004380:	b2db      	uxtb	r3, r3
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	b2da      	uxtb	r2, r3
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004392:	0a9b      	lsrs	r3, r3, #10
 8004394:	b2db      	uxtb	r3, r3
 8004396:	f003 0303 	and.w	r3, r3, #3
 800439a:	b2da      	uxtb	r2, r3
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043a6:	0a1b      	lsrs	r3, r3, #8
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	f003 0303 	and.w	r3, r3, #3
 80043ae:	b2da      	uxtb	r2, r3
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043ba:	085b      	lsrs	r3, r3, #1
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr
 80043e0:	1fe00fff 	.word	0x1fe00fff

080043e4 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b094      	sub	sp, #80	; 0x50
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80043ee:	2300      	movs	r3, #0
 80043f0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80043f4:	f107 0308 	add.w	r3, r7, #8
 80043f8:	4619      	mov	r1, r3
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 fb64 	bl	8004ac8 <SD_SendSDStatus>
 8004400:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8004402:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004404:	2b00      	cmp	r3, #0
 8004406:	d011      	beq.n	800442c <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a4f      	ldr	r2, [pc, #316]	; (800454c <HAL_SD_GetCardStatus+0x168>)
 800440e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004414:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004416:	431a      	orrs	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800442a:	e070      	b.n	800450e <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	099b      	lsrs	r3, r3, #6
 8004430:	b2db      	uxtb	r3, r3
 8004432:	f003 0303 	and.w	r3, r3, #3
 8004436:	b2da      	uxtb	r2, r3
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	095b      	lsrs	r3, r3, #5
 8004440:	b2db      	uxtb	r3, r3
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	b2da      	uxtb	r2, r3
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	0a1b      	lsrs	r3, r3, #8
 8004450:	b29b      	uxth	r3, r3
 8004452:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004456:	b29a      	uxth	r2, r3
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	0e1b      	lsrs	r3, r3, #24
 800445c:	b29b      	uxth	r3, r3
 800445e:	4313      	orrs	r3, r2
 8004460:	b29a      	uxth	r2, r3
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	061a      	lsls	r2, r3, #24
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	021b      	lsls	r3, r3, #8
 800446e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004472:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	0a1b      	lsrs	r3, r3, #8
 8004478:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800447c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	0e1b      	lsrs	r3, r3, #24
 8004482:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	b2da      	uxtb	r2, r3
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	0a1b      	lsrs	r3, r3, #8
 8004494:	b2da      	uxtb	r2, r3
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	0d1b      	lsrs	r3, r3, #20
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	f003 030f 	and.w	r3, r3, #15
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	0c1b      	lsrs	r3, r3, #16
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	b29b      	uxth	r3, r3
 80044be:	4313      	orrs	r3, r2
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	0a9b      	lsrs	r3, r3, #10
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044d0:	b2da      	uxtb	r2, r3
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	0a1b      	lsrs	r3, r3, #8
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	f003 0303 	and.w	r3, r3, #3
 80044e0:	b2da      	uxtb	r2, r3
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	091b      	lsrs	r3, r3, #4
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	f003 030f 	and.w	r3, r3, #15
 80044f0:	b2da      	uxtb	r2, r3
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	f003 030f 	and.w	r3, r3, #15
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	0e1b      	lsrs	r3, r3, #24
 8004508:	b2da      	uxtb	r2, r3
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004516:	4618      	mov	r0, r3
 8004518:	f002 f8ea 	bl	80066f0 <SDMMC_CmdBlockLength>
 800451c:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800451e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004520:	2b00      	cmp	r3, #0
 8004522:	d00d      	beq.n	8004540 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a08      	ldr	r2, [pc, #32]	; (800454c <HAL_SD_GetCardStatus+0x168>)
 800452a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004530:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8004540:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8004544:	4618      	mov	r0, r3
 8004546:	3750      	adds	r7, #80	; 0x50
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	1fe00fff 	.word	0x1fe00fff

08004550 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80045a8:	b5b0      	push	{r4, r5, r7, lr}
 80045aa:	b08e      	sub	sp, #56	; 0x38
 80045ac:	af04      	add	r7, sp, #16
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80045b2:	2300      	movs	r3, #0
 80045b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2203      	movs	r2, #3
 80045bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c4:	2b03      	cmp	r3, #3
 80045c6:	d02e      	beq.n	8004626 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045ce:	d106      	bne.n	80045de <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	639a      	str	r2, [r3, #56]	; 0x38
 80045dc:	e029      	b.n	8004632 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045e4:	d10a      	bne.n	80045fc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 fb66 	bl	8004cb8 <SD_WideBus_Enable>
 80045ec:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045f2:	6a3b      	ldr	r3, [r7, #32]
 80045f4:	431a      	orrs	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	639a      	str	r2, [r3, #56]	; 0x38
 80045fa:	e01a      	b.n	8004632 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10a      	bne.n	8004618 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 fba3 	bl	8004d4e <SD_WideBus_Disable>
 8004608:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800460e:	6a3b      	ldr	r3, [r7, #32]
 8004610:	431a      	orrs	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	639a      	str	r2, [r3, #56]	; 0x38
 8004616:	e00c      	b.n	8004632 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	639a      	str	r2, [r3, #56]	; 0x38
 8004624:	e005      	b.n	8004632 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004636:	2b00      	cmp	r3, #0
 8004638:	d007      	beq.n	800464a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a2e      	ldr	r2, [pc, #184]	; (80046f8 <HAL_SD_ConfigWideBusOperation+0x150>)
 8004640:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004648:	e034      	b.n	80046b4 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	2b03      	cmp	r3, #3
 8004666:	d903      	bls.n	8004670 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	61bb      	str	r3, [r7, #24]
 800466e:	e012      	b.n	8004696 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004678:	d103      	bne.n	8004682 <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	61bb      	str	r3, [r7, #24]
 8004680:	e009      	b.n	8004696 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004686:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800468a:	d102      	bne.n	8004692 <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800468c:	2302      	movs	r3, #2
 800468e:	61bb      	str	r3, [r7, #24]
 8004690:	e001      	b.n	8004696 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 8004692:	2304      	movs	r3, #4
 8004694:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681d      	ldr	r5, [r3, #0]
 800469a:	466c      	mov	r4, sp
 800469c:	f107 0314 	add.w	r3, r7, #20
 80046a0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80046a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80046a8:	f107 0308 	add.w	r3, r7, #8
 80046ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046ae:	4628      	mov	r0, r5
 80046b0:	f001 ff40 	bl	8006534 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80046bc:	4618      	mov	r0, r3
 80046be:	f002 f817 	bl	80066f0 <SDMMC_CmdBlockLength>
 80046c2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80046c4:	6a3b      	ldr	r3, [r7, #32]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00c      	beq.n	80046e4 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a0a      	ldr	r2, [pc, #40]	; (80046f8 <HAL_SD_ConfigWideBusOperation+0x150>)
 80046d0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046d6:	6a3b      	ldr	r3, [r7, #32]
 80046d8:	431a      	orrs	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80046ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3728      	adds	r7, #40	; 0x28
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bdb0      	pop	{r4, r5, r7, pc}
 80046f8:	1fe00fff 	.word	0x1fe00fff

080046fc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004704:	2300      	movs	r3, #0
 8004706:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004708:	f107 030c 	add.w	r3, r7, #12
 800470c:	4619      	mov	r1, r3
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 faaa 	bl	8004c68 <SD_SendStatus>
 8004714:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d005      	beq.n	8004728 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	431a      	orrs	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	0a5b      	lsrs	r3, r3, #9
 800472c:	f003 030f 	and.w	r3, r3, #15
 8004730:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004732:	693b      	ldr	r3, [r7, #16]
}
 8004734:	4618      	mov	r0, r3
 8004736:	3718      	adds	r7, #24
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b090      	sub	sp, #64	; 0x40
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004744:	2301      	movs	r3, #1
 8004746:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4618      	mov	r0, r3
 800474e:	f001 ff4a 	bl	80065e6 <SDMMC_GetPowerState>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d102      	bne.n	800475e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004758:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800475c:	e0a7      	b.n	80048ae <SD_InitCard+0x172>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004762:	2b03      	cmp	r3, #3
 8004764:	d02e      	beq.n	80047c4 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4618      	mov	r0, r3
 800476c:	f002 f996 	bl	8006a9c <SDMMC_CmdSendCID>
 8004770:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004774:	2b00      	cmp	r3, #0
 8004776:	d001      	beq.n	800477c <SD_InitCard+0x40>
    {
      return errorstate;
 8004778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800477a:	e098      	b.n	80048ae <SD_InitCard+0x172>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2100      	movs	r1, #0
 8004782:	4618      	mov	r0, r3
 8004784:	f001 ff75 	bl	8006672 <SDMMC_GetResponse>
 8004788:	4602      	mov	r2, r0
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2104      	movs	r1, #4
 8004794:	4618      	mov	r0, r3
 8004796:	f001 ff6c 	bl	8006672 <SDMMC_GetResponse>
 800479a:	4602      	mov	r2, r0
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2108      	movs	r1, #8
 80047a6:	4618      	mov	r0, r3
 80047a8:	f001 ff63 	bl	8006672 <SDMMC_GetResponse>
 80047ac:	4602      	mov	r2, r0
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	210c      	movs	r1, #12
 80047b8:	4618      	mov	r0, r3
 80047ba:	f001 ff5a 	bl	8006672 <SDMMC_GetResponse>
 80047be:	4602      	mov	r2, r0
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c8:	2b03      	cmp	r3, #3
 80047ca:	d00d      	beq.n	80047e8 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f107 020e 	add.w	r2, r7, #14
 80047d4:	4611      	mov	r1, r2
 80047d6:	4618      	mov	r0, r3
 80047d8:	f002 f99f 	bl	8006b1a <SDMMC_CmdSetRelAdd>
 80047dc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80047de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d001      	beq.n	80047e8 <SD_InitCard+0xac>
    {
      return errorstate;
 80047e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047e6:	e062      	b.n	80048ae <SD_InitCard+0x172>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ec:	2b03      	cmp	r3, #3
 80047ee:	d036      	beq.n	800485e <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80047f0:	89fb      	ldrh	r3, [r7, #14]
 80047f2:	461a      	mov	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004800:	041b      	lsls	r3, r3, #16
 8004802:	4619      	mov	r1, r3
 8004804:	4610      	mov	r0, r2
 8004806:	f002 f968 	bl	8006ada <SDMMC_CmdSendCSD>
 800480a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800480c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800480e:	2b00      	cmp	r3, #0
 8004810:	d001      	beq.n	8004816 <SD_InitCard+0xda>
    {
      return errorstate;
 8004812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004814:	e04b      	b.n	80048ae <SD_InitCard+0x172>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2100      	movs	r1, #0
 800481c:	4618      	mov	r0, r3
 800481e:	f001 ff28 	bl	8006672 <SDMMC_GetResponse>
 8004822:	4602      	mov	r2, r0
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2104      	movs	r1, #4
 800482e:	4618      	mov	r0, r3
 8004830:	f001 ff1f 	bl	8006672 <SDMMC_GetResponse>
 8004834:	4602      	mov	r2, r0
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2108      	movs	r1, #8
 8004840:	4618      	mov	r0, r3
 8004842:	f001 ff16 	bl	8006672 <SDMMC_GetResponse>
 8004846:	4602      	mov	r2, r0
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	210c      	movs	r1, #12
 8004852:	4618      	mov	r0, r3
 8004854:	f001 ff0d 	bl	8006672 <SDMMC_GetResponse>
 8004858:	4602      	mov	r2, r0
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2104      	movs	r1, #4
 8004864:	4618      	mov	r0, r3
 8004866:	f001 ff04 	bl	8006672 <SDMMC_GetResponse>
 800486a:	4603      	mov	r3, r0
 800486c:	0d1a      	lsrs	r2, r3, #20
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004872:	f107 0310 	add.w	r3, r7, #16
 8004876:	4619      	mov	r1, r3
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f7ff fc0f 	bl	800409c <HAL_SD_GetCardCSD>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d002      	beq.n	800488a <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004884:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004888:	e011      	b.n	80048ae <SD_InitCard+0x172>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6819      	ldr	r1, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004892:	041b      	lsls	r3, r3, #16
 8004894:	461a      	mov	r2, r3
 8004896:	f04f 0300 	mov.w	r3, #0
 800489a:	4608      	mov	r0, r1
 800489c:	f002 f814 	bl	80068c8 <SDMMC_CmdSelDesel>
 80048a0:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80048a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d001      	beq.n	80048ac <SD_InitCard+0x170>
  {
    return errorstate;
 80048a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048aa:	e000      	b.n	80048ae <SD_InitCard+0x172>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3740      	adds	r7, #64	; 0x40
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
	...

080048b8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b088      	sub	sp, #32
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048c0:	2300      	movs	r3, #0
 80048c2:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 80048c4:	2300      	movs	r3, #0
 80048c6:	61fb      	str	r3, [r7, #28]
 80048c8:	2300      	movs	r3, #0
 80048ca:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 80048cc:	f7fc fb72 	bl	8000fb4 <HAL_GetTick>
 80048d0:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4618      	mov	r0, r3
 80048d8:	f002 f81a 	bl	8006910 <SDMMC_CmdGoIdleState>
 80048dc:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d001      	beq.n	80048e8 <SD_PowerON+0x30>
  {
    return errorstate;
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	e0e9      	b.n	8004abc <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4618      	mov	r0, r3
 80048ee:	f002 f82d 	bl	800694c <SDMMC_CmdOperCond>
 80048f2:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00d      	beq.n	8004916 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4618      	mov	r0, r3
 8004906:	f002 f803 	bl	8006910 <SDMMC_CmdGoIdleState>
 800490a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d004      	beq.n	800491c <SD_PowerON+0x64>
    {
      return errorstate;
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	e0d2      	b.n	8004abc <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004920:	2b01      	cmp	r3, #1
 8004922:	d137      	bne.n	8004994 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2100      	movs	r1, #0
 800492a:	4618      	mov	r0, r3
 800492c:	f002 f82e 	bl	800698c <SDMMC_CmdAppCommand>
 8004930:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d02d      	beq.n	8004994 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004938:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800493c:	e0be      	b.n	8004abc <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2100      	movs	r1, #0
 8004944:	4618      	mov	r0, r3
 8004946:	f002 f821 	bl	800698c <SDMMC_CmdAppCommand>
 800494a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <SD_PowerON+0x9e>
    {
      return errorstate;
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	e0b2      	b.n	8004abc <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	495a      	ldr	r1, [pc, #360]	; (8004ac4 <SD_PowerON+0x20c>)
 800495c:	4618      	mov	r0, r3
 800495e:	f002 f838 	bl	80069d2 <SDMMC_CmdAppOperCommand>
 8004962:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d002      	beq.n	8004970 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800496a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800496e:	e0a5      	b.n	8004abc <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2100      	movs	r1, #0
 8004976:	4618      	mov	r0, r3
 8004978:	f001 fe7b 	bl	8006672 <SDMMC_GetResponse>
 800497c:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	0fdb      	lsrs	r3, r3, #31
 8004982:	2b01      	cmp	r3, #1
 8004984:	d101      	bne.n	800498a <SD_PowerON+0xd2>
 8004986:	2301      	movs	r3, #1
 8004988:	e000      	b.n	800498c <SD_PowerON+0xd4>
 800498a:	2300      	movs	r3, #0
 800498c:	61bb      	str	r3, [r7, #24]

    count++;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	3301      	adds	r3, #1
 8004992:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800499a:	4293      	cmp	r3, r2
 800499c:	d802      	bhi.n	80049a4 <SD_PowerON+0xec>
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d0cc      	beq.n	800493e <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d902      	bls.n	80049b4 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80049ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049b2:	e083      	b.n	8004abc <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d07d      	beq.n	8004aba <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d176      	bne.n	8004aba <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d071      	beq.n	8004aba <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049dc:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f042 0208 	orr.w	r2, r2, #8
 80049ec:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f002 f8f8 	bl	8006be8 <SDMMC_CmdVoltageSwitch>
 80049f8:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00c      	beq.n	8004a1a <SD_PowerON+0x162>
        {
          return errorstate;
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	e05b      	b.n	8004abc <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004a04:	f7fc fad6 	bl	8000fb4 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a12:	d102      	bne.n	8004a1a <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8004a14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004a18:	e050      	b.n	8004abc <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a28:	d1ec      	bne.n	8004a04 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004a32:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a42:	d002      	beq.n	8004a4a <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8004a44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004a48:	e038      	b.n	8004abc <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8004a4a:	2001      	movs	r0, #1
 8004a4c:	f7ff fb1a 	bl	8004084 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f042 0204 	orr.w	r2, r2, #4
 8004a5e:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8004a60:	e00a      	b.n	8004a78 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004a62:	f7fc faa7 	bl	8000fb4 <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a70:	d102      	bne.n	8004a78 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8004a72:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004a76:	e021      	b.n	8004abc <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a86:	d1ec      	bne.n	8004a62 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a90:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004aa0:	d102      	bne.n	8004aa8 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004aa2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004aa6:	e009      	b.n	8004abc <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2213      	movs	r2, #19
 8004aae:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ab8:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3720      	adds	r7, #32
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	c1100000 	.word	0xc1100000

08004ac8 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b08c      	sub	sp, #48	; 0x30
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004ad2:	f7fc fa6f 	bl	8000fb4 <HAL_GetTick>
 8004ad6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f001 fdc5 	bl	8006672 <SDMMC_GetResponse>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004af2:	d102      	bne.n	8004afa <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004af4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004af8:	e0b0      	b.n	8004c5c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2140      	movs	r1, #64	; 0x40
 8004b00:	4618      	mov	r0, r3
 8004b02:	f001 fdf5 	bl	80066f0 <SDMMC_CmdBlockLength>
 8004b06:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b08:	6a3b      	ldr	r3, [r7, #32]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d005      	beq.n	8004b1a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8004b16:	6a3b      	ldr	r3, [r7, #32]
 8004b18:	e0a0      	b.n	8004c5c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b22:	041b      	lsls	r3, r3, #16
 8004b24:	4619      	mov	r1, r3
 8004b26:	4610      	mov	r0, r2
 8004b28:	f001 ff30 	bl	800698c <SDMMC_CmdAppCommand>
 8004b2c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b2e:	6a3b      	ldr	r3, [r7, #32]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d005      	beq.n	8004b40 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8004b3c:	6a3b      	ldr	r3, [r7, #32]
 8004b3e:	e08d      	b.n	8004c5c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004b40:	f04f 33ff 	mov.w	r3, #4294967295
 8004b44:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8004b46:	2340      	movs	r3, #64	; 0x40
 8004b48:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8004b4a:	2360      	movs	r3, #96	; 0x60
 8004b4c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004b4e:	2302      	movs	r3, #2
 8004b50:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004b52:	2300      	movs	r3, #0
 8004b54:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004b56:	2301      	movs	r3, #1
 8004b58:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f107 0208 	add.w	r2, r7, #8
 8004b62:	4611      	mov	r1, r2
 8004b64:	4618      	mov	r0, r3
 8004b66:	f001 fd97 	bl	8006698 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f002 f818 	bl	8006ba4 <SDMMC_CmdStatusRegister>
 8004b74:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b76:	6a3b      	ldr	r3, [r7, #32]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d02b      	beq.n	8004bd4 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8004b84:	6a3b      	ldr	r3, [r7, #32]
 8004b86:	e069      	b.n	8004c5c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d013      	beq.n	8004bbe <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8004b96:	2300      	movs	r3, #0
 8004b98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b9a:	e00d      	b.n	8004bb8 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f001 fcf1 	bl	8006588 <SDMMC_ReadFIFO>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004baa:	601a      	str	r2, [r3, #0]
        pData++;
 8004bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bae:	3304      	adds	r3, #4
 8004bb0:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8004bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bba:	2b07      	cmp	r3, #7
 8004bbc:	d9ee      	bls.n	8004b9c <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004bbe:	f7fc f9f9 	bl	8000fb4 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bcc:	d102      	bne.n	8004bd4 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004bce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004bd2:	e043      	b.n	8004c5c <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bda:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d0d2      	beq.n	8004b88 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004be8:	f003 0308 	and.w	r3, r3, #8
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004bf0:	2308      	movs	r3, #8
 8004bf2:	e033      	b.n	8004c5c <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d001      	beq.n	8004c06 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004c02:	2302      	movs	r3, #2
 8004c04:	e02a      	b.n	8004c5c <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c0c:	f003 0320 	and.w	r3, r3, #32
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d017      	beq.n	8004c44 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8004c14:	2320      	movs	r3, #32
 8004c16:	e021      	b.n	8004c5c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f001 fcb3 	bl	8006588 <SDMMC_ReadFIFO>
 8004c22:	4602      	mov	r2, r0
 8004c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c26:	601a      	str	r2, [r3, #0]
    pData++;
 8004c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2a:	3304      	adds	r3, #4
 8004c2c:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004c2e:	f7fc f9c1 	bl	8000fb4 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c3c:	d102      	bne.n	8004c44 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004c3e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004c42:	e00b      	b.n	8004c5c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1e2      	bne.n	8004c18 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a03      	ldr	r2, [pc, #12]	; (8004c64 <SD_SendSDStatus+0x19c>)
 8004c58:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3730      	adds	r7, #48	; 0x30
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	18000f3a 	.word	0x18000f3a

08004c68 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d102      	bne.n	8004c7e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004c78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c7c:	e018      	b.n	8004cb0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c86:	041b      	lsls	r3, r3, #16
 8004c88:	4619      	mov	r1, r3
 8004c8a:	4610      	mov	r0, r2
 8004c8c:	f001 ff67 	bl	8006b5e <SDMMC_CmdSendStatus>
 8004c90:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d001      	beq.n	8004c9c <SD_SendStatus+0x34>
  {
    return errorstate;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	e009      	b.n	8004cb0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f001 fce5 	bl	8006672 <SDMMC_GetResponse>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3710      	adds	r7, #16
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b086      	sub	sp, #24
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	60fb      	str	r3, [r7, #12]
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2100      	movs	r1, #0
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f001 fccf 	bl	8006672 <SDMMC_GetResponse>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004cde:	d102      	bne.n	8004ce6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004ce0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ce4:	e02f      	b.n	8004d46 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004ce6:	f107 030c 	add.w	r3, r7, #12
 8004cea:	4619      	mov	r1, r3
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 f879 	bl	8004de4 <SD_FindSCR>
 8004cf2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d001      	beq.n	8004cfe <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	e023      	b.n	8004d46 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d01c      	beq.n	8004d42 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d10:	041b      	lsls	r3, r3, #16
 8004d12:	4619      	mov	r1, r3
 8004d14:	4610      	mov	r0, r2
 8004d16:	f001 fe39 	bl	800698c <SDMMC_CmdAppCommand>
 8004d1a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	e00f      	b.n	8004d46 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2102      	movs	r1, #2
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f001 fe70 	bl	8006a12 <SDMMC_CmdBusWidth>
 8004d32:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d001      	beq.n	8004d3e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	e003      	b.n	8004d46 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	e001      	b.n	8004d46 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004d42:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3718      	adds	r7, #24
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b086      	sub	sp, #24
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8004d56:	2300      	movs	r3, #0
 8004d58:	60fb      	str	r3, [r7, #12]
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2100      	movs	r1, #0
 8004d64:	4618      	mov	r0, r3
 8004d66:	f001 fc84 	bl	8006672 <SDMMC_GetResponse>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d74:	d102      	bne.n	8004d7c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004d76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004d7a:	e02f      	b.n	8004ddc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004d7c:	f107 030c 	add.w	r3, r7, #12
 8004d80:	4619      	mov	r1, r3
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f82e 	bl	8004de4 <SD_FindSCR>
 8004d88:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d001      	beq.n	8004d94 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	e023      	b.n	8004ddc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d01c      	beq.n	8004dd8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004da6:	041b      	lsls	r3, r3, #16
 8004da8:	4619      	mov	r1, r3
 8004daa:	4610      	mov	r0, r2
 8004dac:	f001 fdee 	bl	800698c <SDMMC_CmdAppCommand>
 8004db0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d001      	beq.n	8004dbc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	e00f      	b.n	8004ddc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2100      	movs	r1, #0
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f001 fe25 	bl	8006a12 <SDMMC_CmdBusWidth>
 8004dc8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d001      	beq.n	8004dd4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	e003      	b.n	8004ddc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	e001      	b.n	8004ddc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004dd8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3718      	adds	r7, #24
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b08e      	sub	sp, #56	; 0x38
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004dee:	f7fc f8e1 	bl	8000fb4 <HAL_GetTick>
 8004df2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004df4:	2300      	movs	r3, #0
 8004df6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8004df8:	2300      	movs	r3, #0
 8004dfa:	60bb      	str	r3, [r7, #8]
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2108      	movs	r1, #8
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f001 fc70 	bl	80066f0 <SDMMC_CmdBlockLength>
 8004e10:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d001      	beq.n	8004e1c <SD_FindSCR+0x38>
  {
    return errorstate;
 8004e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1a:	e0ad      	b.n	8004f78 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e24:	041b      	lsls	r3, r3, #16
 8004e26:	4619      	mov	r1, r3
 8004e28:	4610      	mov	r0, r2
 8004e2a:	f001 fdaf 	bl	800698c <SDMMC_CmdAppCommand>
 8004e2e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d001      	beq.n	8004e3a <SD_FindSCR+0x56>
  {
    return errorstate;
 8004e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e38:	e09e      	b.n	8004f78 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e3e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004e40:	2308      	movs	r3, #8
 8004e42:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8004e44:	2330      	movs	r3, #48	; 0x30
 8004e46:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004e48:	2302      	movs	r3, #2
 8004e4a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004e50:	2301      	movs	r3, #1
 8004e52:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f107 0210 	add.w	r2, r7, #16
 8004e5c:	4611      	mov	r1, r2
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f001 fc1a 	bl	8006698 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f001 fdf5 	bl	8006a58 <SDMMC_CmdSendSCR>
 8004e6e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d027      	beq.n	8004ec6 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8004e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e78:	e07e      	b.n	8004f78 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d113      	bne.n	8004eb0 <SD_FindSCR+0xcc>
 8004e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d110      	bne.n	8004eb0 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4618      	mov	r0, r3
 8004e94:	f001 fb78 	bl	8006588 <SDMMC_ReadFIFO>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f001 fb71 	bl	8006588 <SDMMC_ReadFIFO>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	60fb      	str	r3, [r7, #12]
      index++;
 8004eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eac:	3301      	adds	r3, #1
 8004eae:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004eb0:	f7fc f880 	bl	8000fb4 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ebe:	d102      	bne.n	8004ec6 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004ec0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004ec4:	e058      	b.n	8004f78 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ecc:	f240 532a 	movw	r3, #1322	; 0x52a
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d0d1      	beq.n	8004e7a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004edc:	f003 0308 	and.w	r3, r3, #8
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d005      	beq.n	8004ef0 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2208      	movs	r2, #8
 8004eea:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004eec:	2308      	movs	r3, #8
 8004eee:	e043      	b.n	8004f78 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ef6:	f003 0302 	and.w	r3, r3, #2
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d005      	beq.n	8004f0a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2202      	movs	r2, #2
 8004f04:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004f06:	2302      	movs	r3, #2
 8004f08:	e036      	b.n	8004f78 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f10:	f003 0320 	and.w	r3, r3, #32
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d005      	beq.n	8004f24 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2220      	movs	r2, #32
 8004f1e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004f20:	2320      	movs	r3, #32
 8004f22:	e029      	b.n	8004f78 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a15      	ldr	r2, [pc, #84]	; (8004f80 <SD_FindSCR+0x19c>)
 8004f2a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	061a      	lsls	r2, r3, #24
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	021b      	lsls	r3, r3, #8
 8004f34:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004f38:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	0a1b      	lsrs	r3, r3, #8
 8004f3e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004f42:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	0e1b      	lsrs	r3, r3, #24
 8004f48:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f4c:	601a      	str	r2, [r3, #0]
    scr++;
 8004f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f50:	3304      	adds	r3, #4
 8004f52:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	061a      	lsls	r2, r3, #24
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	021b      	lsls	r3, r3, #8
 8004f5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004f60:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	0a1b      	lsrs	r3, r3, #8
 8004f66:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004f6a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	0e1b      	lsrs	r3, r3, #24
 8004f70:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f74:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3738      	adds	r7, #56	; 0x38
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	18000f3a 	.word	0x18000f3a

08004f84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d101      	bne.n	8004f96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e042      	b.n	800501c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d106      	bne.n	8004fae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f7fb fe29 	bl	8000c00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2224      	movs	r2, #36	; 0x24
 8004fb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f022 0201 	bic.w	r2, r2, #1
 8004fc4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 fa54 	bl	8005474 <UART_SetConfig>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d101      	bne.n	8004fd6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e022      	b.n	800501c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d002      	beq.n	8004fe4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 ffae 	bl	8005f40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	685a      	ldr	r2, [r3, #4]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ff2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689a      	ldr	r2, [r3, #8]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005002:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f042 0201 	orr.w	r2, r2, #1
 8005012:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f001 f835 	bl	8006084 <UART_CheckIdleState>
 800501a:	4603      	mov	r3, r0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3708      	adds	r7, #8
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b08a      	sub	sp, #40	; 0x28
 8005028:	af02      	add	r7, sp, #8
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	603b      	str	r3, [r7, #0]
 8005030:	4613      	mov	r3, r2
 8005032:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800503a:	2b20      	cmp	r3, #32
 800503c:	f040 8083 	bne.w	8005146 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d002      	beq.n	800504c <HAL_UART_Transmit+0x28>
 8005046:	88fb      	ldrh	r3, [r7, #6]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d101      	bne.n	8005050 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e07b      	b.n	8005148 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005056:	2b01      	cmp	r3, #1
 8005058:	d101      	bne.n	800505e <HAL_UART_Transmit+0x3a>
 800505a:	2302      	movs	r3, #2
 800505c:	e074      	b.n	8005148 <HAL_UART_Transmit+0x124>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2221      	movs	r2, #33	; 0x21
 8005072:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005076:	f7fb ff9d 	bl	8000fb4 <HAL_GetTick>
 800507a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	88fa      	ldrh	r2, [r7, #6]
 8005080:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	88fa      	ldrh	r2, [r7, #6]
 8005088:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005094:	d108      	bne.n	80050a8 <HAL_UART_Transmit+0x84>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d104      	bne.n	80050a8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800509e:	2300      	movs	r3, #0
 80050a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	61bb      	str	r3, [r7, #24]
 80050a6:	e003      	b.n	80050b0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050ac:	2300      	movs	r3, #0
 80050ae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 80050b8:	e02c      	b.n	8005114 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	9300      	str	r3, [sp, #0]
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	2200      	movs	r2, #0
 80050c2:	2180      	movs	r1, #128	; 0x80
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f001 f825 	bl	8006114 <UART_WaitOnFlagUntilTimeout>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d001      	beq.n	80050d4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e039      	b.n	8005148 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d10b      	bne.n	80050f2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	881b      	ldrh	r3, [r3, #0]
 80050de:	461a      	mov	r2, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050e8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	3302      	adds	r3, #2
 80050ee:	61bb      	str	r3, [r7, #24]
 80050f0:	e007      	b.n	8005102 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	781a      	ldrb	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	3301      	adds	r3, #1
 8005100:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005108:	b29b      	uxth	r3, r3
 800510a:	3b01      	subs	r3, #1
 800510c:	b29a      	uxth	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800511a:	b29b      	uxth	r3, r3
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1cc      	bne.n	80050ba <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	9300      	str	r3, [sp, #0]
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	2200      	movs	r2, #0
 8005128:	2140      	movs	r1, #64	; 0x40
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f000 fff2 	bl	8006114 <UART_WaitOnFlagUntilTimeout>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d001      	beq.n	800513a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e006      	b.n	8005148 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2220      	movs	r2, #32
 800513e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005142:	2300      	movs	r3, #0
 8005144:	e000      	b.n	8005148 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005146:	2302      	movs	r3, #2
  }
}
 8005148:	4618      	mov	r0, r3
 800514a:	3720      	adds	r7, #32
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b088      	sub	sp, #32
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005170:	69fa      	ldr	r2, [r7, #28]
 8005172:	f640 030f 	movw	r3, #2063	; 0x80f
 8005176:	4013      	ands	r3, r2
 8005178:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d118      	bne.n	80051b2 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	f003 0320 	and.w	r3, r3, #32
 8005186:	2b00      	cmp	r3, #0
 8005188:	d013      	beq.n	80051b2 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	f003 0320 	and.w	r3, r3, #32
 8005190:	2b00      	cmp	r3, #0
 8005192:	d104      	bne.n	800519e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d009      	beq.n	80051b2 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	f000 8144 	beq.w	8005430 <HAL_UART_IRQHandler+0x2e0>
      {
        huart->RxISR(huart);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	4798      	blx	r3
      }
      return;
 80051b0:	e13e      	b.n	8005430 <HAL_UART_IRQHandler+0x2e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f000 80e8 	beq.w	800538a <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	4ba0      	ldr	r3, [pc, #640]	; (8005440 <HAL_UART_IRQHandler+0x2f0>)
 80051be:	4013      	ands	r3, r2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d105      	bne.n	80051d0 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80051c4:	69ba      	ldr	r2, [r7, #24]
 80051c6:	4b9f      	ldr	r3, [pc, #636]	; (8005444 <HAL_UART_IRQHandler+0x2f4>)
 80051c8:	4013      	ands	r3, r2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f000 80dd 	beq.w	800538a <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d010      	beq.n	80051fc <HAL_UART_IRQHandler+0xac>
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00b      	beq.n	80051fc <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2201      	movs	r2, #1
 80051ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f2:	f043 0201 	orr.w	r2, r3, #1
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b00      	cmp	r3, #0
 8005204:	d010      	beq.n	8005228 <HAL_UART_IRQHandler+0xd8>
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00b      	beq.n	8005228 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2202      	movs	r2, #2
 8005216:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800521e:	f043 0204 	orr.w	r2, r3, #4
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	f003 0304 	and.w	r3, r3, #4
 800522e:	2b00      	cmp	r3, #0
 8005230:	d010      	beq.n	8005254 <HAL_UART_IRQHandler+0x104>
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f003 0301 	and.w	r3, r3, #1
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00b      	beq.n	8005254 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2204      	movs	r2, #4
 8005242:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800524a:	f043 0202 	orr.w	r2, r3, #2
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	f003 0308 	and.w	r3, r3, #8
 800525a:	2b00      	cmp	r3, #0
 800525c:	d015      	beq.n	800528a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	f003 0320 	and.w	r3, r3, #32
 8005264:	2b00      	cmp	r3, #0
 8005266:	d104      	bne.n	8005272 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005268:	697a      	ldr	r2, [r7, #20]
 800526a:	4b75      	ldr	r3, [pc, #468]	; (8005440 <HAL_UART_IRQHandler+0x2f0>)
 800526c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00b      	beq.n	800528a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2208      	movs	r2, #8
 8005278:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005280:	f043 0208 	orr.w	r2, r3, #8
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005290:	2b00      	cmp	r3, #0
 8005292:	d011      	beq.n	80052b8 <HAL_UART_IRQHandler+0x168>
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00c      	beq.n	80052b8 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ae:	f043 0220 	orr.w	r2, r3, #32
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052be:	2b00      	cmp	r3, #0
 80052c0:	f000 80b8 	beq.w	8005434 <HAL_UART_IRQHandler+0x2e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	f003 0320 	and.w	r3, r3, #32
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d011      	beq.n	80052f2 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	f003 0320 	and.w	r3, r3, #32
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d104      	bne.n	80052e2 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d007      	beq.n	80052f2 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005304:	2b40      	cmp	r3, #64	; 0x40
 8005306:	d004      	beq.n	8005312 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800530e:	2b00      	cmp	r3, #0
 8005310:	d031      	beq.n	8005376 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 ff7e 	bl	8006214 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005322:	2b40      	cmp	r3, #64	; 0x40
 8005324:	d123      	bne.n	800536e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	689a      	ldr	r2, [r3, #8]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005334:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800533a:	2b00      	cmp	r3, #0
 800533c:	d013      	beq.n	8005366 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005342:	4a41      	ldr	r2, [pc, #260]	; (8005448 <HAL_UART_IRQHandler+0x2f8>)
 8005344:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800534a:	4618      	mov	r0, r3
 800534c:	f7fb ff7e 	bl	800124c <HAL_DMA_Abort_IT>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d017      	beq.n	8005386 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800535a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8005360:	4610      	mov	r0, r2
 8005362:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005364:	e00f      	b.n	8005386 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f87a 	bl	8005460 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800536c:	e00b      	b.n	8005386 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f876 	bl	8005460 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005374:	e007      	b.n	8005386 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 f872 	bl	8005460 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8005384:	e056      	b.n	8005434 <HAL_UART_IRQHandler+0x2e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005386:	bf00      	nop
    return;
 8005388:	e054      	b.n	8005434 <HAL_UART_IRQHandler+0x2e4>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00d      	beq.n	80053b0 <HAL_UART_IRQHandler+0x260>
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d008      	beq.n	80053b0 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80053a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 ff87 	bl	80062bc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80053ae:	e044      	b.n	800543a <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d012      	beq.n	80053e0 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d104      	bne.n	80053ce <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d008      	beq.n	80053e0 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d030      	beq.n	8005438 <HAL_UART_IRQHandler+0x2e8>
    {
      huart->TxISR(huart);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	4798      	blx	r3
    }
    return;
 80053de:	e02b      	b.n	8005438 <HAL_UART_IRQHandler+0x2e8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d008      	beq.n	80053fc <HAL_UART_IRQHandler+0x2ac>
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d003      	beq.n	80053fc <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 ff47 	bl	8006288 <UART_EndTransmit_IT>
    return;
 80053fa:	e01e      	b.n	800543a <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d008      	beq.n	8005418 <HAL_UART_IRQHandler+0x2c8>
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800540c:	2b00      	cmp	r3, #0
 800540e:	d003      	beq.n	8005418 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 ff67 	bl	80062e4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005416:	e010      	b.n	800543a <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00b      	beq.n	800543a <HAL_UART_IRQHandler+0x2ea>
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	2b00      	cmp	r3, #0
 8005426:	da08      	bge.n	800543a <HAL_UART_IRQHandler+0x2ea>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 ff51 	bl	80062d0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800542e:	e004      	b.n	800543a <HAL_UART_IRQHandler+0x2ea>
      return;
 8005430:	bf00      	nop
 8005432:	e002      	b.n	800543a <HAL_UART_IRQHandler+0x2ea>
    return;
 8005434:	bf00      	nop
 8005436:	e000      	b.n	800543a <HAL_UART_IRQHandler+0x2ea>
    return;
 8005438:	bf00      	nop
  }
}
 800543a:	3720      	adds	r7, #32
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	10000001 	.word	0x10000001
 8005444:	04000120 	.word	0x04000120
 8005448:	0800625d 	.word	0x0800625d

0800544c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005474:	b5b0      	push	{r4, r5, r7, lr}
 8005476:	b08e      	sub	sp, #56	; 0x38
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800547c:	2300      	movs	r3, #0
 800547e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	689a      	ldr	r2, [r3, #8]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	431a      	orrs	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	695b      	ldr	r3, [r3, #20]
 8005490:	431a      	orrs	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	69db      	ldr	r3, [r3, #28]
 8005496:	4313      	orrs	r3, r2
 8005498:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800549e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054a0:	4313      	orrs	r3, r2
 80054a2:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	4bc0      	ldr	r3, [pc, #768]	; (80057ac <UART_SetConfig+0x338>)
 80054ac:	4013      	ands	r3, r2
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	6812      	ldr	r2, [r2, #0]
 80054b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80054b4:	430b      	orrs	r3, r1
 80054b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	68da      	ldr	r2, [r3, #12]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	430a      	orrs	r2, r1
 80054cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4ab5      	ldr	r2, [pc, #724]	; (80057b0 <UART_SetConfig+0x33c>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d004      	beq.n	80054e8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a1b      	ldr	r3, [r3, #32]
 80054e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054e4:	4313      	orrs	r3, r2
 80054e6:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	689a      	ldr	r2, [r3, #8]
 80054ee:	4bb1      	ldr	r3, [pc, #708]	; (80057b4 <UART_SetConfig+0x340>)
 80054f0:	4013      	ands	r3, r2
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	6812      	ldr	r2, [r2, #0]
 80054f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80054f8:	430b      	orrs	r3, r1
 80054fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005502:	f023 010f 	bic.w	r1, r3, #15
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	430a      	orrs	r2, r1
 8005510:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4aa8      	ldr	r2, [pc, #672]	; (80057b8 <UART_SetConfig+0x344>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d177      	bne.n	800560c <UART_SetConfig+0x198>
 800551c:	4ba7      	ldr	r3, [pc, #668]	; (80057bc <UART_SetConfig+0x348>)
 800551e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005520:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005524:	2b28      	cmp	r3, #40	; 0x28
 8005526:	d86d      	bhi.n	8005604 <UART_SetConfig+0x190>
 8005528:	a201      	add	r2, pc, #4	; (adr r2, 8005530 <UART_SetConfig+0xbc>)
 800552a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800552e:	bf00      	nop
 8005530:	080055d5 	.word	0x080055d5
 8005534:	08005605 	.word	0x08005605
 8005538:	08005605 	.word	0x08005605
 800553c:	08005605 	.word	0x08005605
 8005540:	08005605 	.word	0x08005605
 8005544:	08005605 	.word	0x08005605
 8005548:	08005605 	.word	0x08005605
 800554c:	08005605 	.word	0x08005605
 8005550:	080055dd 	.word	0x080055dd
 8005554:	08005605 	.word	0x08005605
 8005558:	08005605 	.word	0x08005605
 800555c:	08005605 	.word	0x08005605
 8005560:	08005605 	.word	0x08005605
 8005564:	08005605 	.word	0x08005605
 8005568:	08005605 	.word	0x08005605
 800556c:	08005605 	.word	0x08005605
 8005570:	080055e5 	.word	0x080055e5
 8005574:	08005605 	.word	0x08005605
 8005578:	08005605 	.word	0x08005605
 800557c:	08005605 	.word	0x08005605
 8005580:	08005605 	.word	0x08005605
 8005584:	08005605 	.word	0x08005605
 8005588:	08005605 	.word	0x08005605
 800558c:	08005605 	.word	0x08005605
 8005590:	080055ed 	.word	0x080055ed
 8005594:	08005605 	.word	0x08005605
 8005598:	08005605 	.word	0x08005605
 800559c:	08005605 	.word	0x08005605
 80055a0:	08005605 	.word	0x08005605
 80055a4:	08005605 	.word	0x08005605
 80055a8:	08005605 	.word	0x08005605
 80055ac:	08005605 	.word	0x08005605
 80055b0:	080055f5 	.word	0x080055f5
 80055b4:	08005605 	.word	0x08005605
 80055b8:	08005605 	.word	0x08005605
 80055bc:	08005605 	.word	0x08005605
 80055c0:	08005605 	.word	0x08005605
 80055c4:	08005605 	.word	0x08005605
 80055c8:	08005605 	.word	0x08005605
 80055cc:	08005605 	.word	0x08005605
 80055d0:	080055fd 	.word	0x080055fd
 80055d4:	2301      	movs	r3, #1
 80055d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055da:	e222      	b.n	8005a22 <UART_SetConfig+0x5ae>
 80055dc:	2304      	movs	r3, #4
 80055de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055e2:	e21e      	b.n	8005a22 <UART_SetConfig+0x5ae>
 80055e4:	2308      	movs	r3, #8
 80055e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055ea:	e21a      	b.n	8005a22 <UART_SetConfig+0x5ae>
 80055ec:	2310      	movs	r3, #16
 80055ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055f2:	e216      	b.n	8005a22 <UART_SetConfig+0x5ae>
 80055f4:	2320      	movs	r3, #32
 80055f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055fa:	e212      	b.n	8005a22 <UART_SetConfig+0x5ae>
 80055fc:	2340      	movs	r3, #64	; 0x40
 80055fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005602:	e20e      	b.n	8005a22 <UART_SetConfig+0x5ae>
 8005604:	2380      	movs	r3, #128	; 0x80
 8005606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800560a:	e20a      	b.n	8005a22 <UART_SetConfig+0x5ae>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a6b      	ldr	r2, [pc, #428]	; (80057c0 <UART_SetConfig+0x34c>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d130      	bne.n	8005678 <UART_SetConfig+0x204>
 8005616:	4b69      	ldr	r3, [pc, #420]	; (80057bc <UART_SetConfig+0x348>)
 8005618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800561a:	f003 0307 	and.w	r3, r3, #7
 800561e:	2b05      	cmp	r3, #5
 8005620:	d826      	bhi.n	8005670 <UART_SetConfig+0x1fc>
 8005622:	a201      	add	r2, pc, #4	; (adr r2, 8005628 <UART_SetConfig+0x1b4>)
 8005624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005628:	08005641 	.word	0x08005641
 800562c:	08005649 	.word	0x08005649
 8005630:	08005651 	.word	0x08005651
 8005634:	08005659 	.word	0x08005659
 8005638:	08005661 	.word	0x08005661
 800563c:	08005669 	.word	0x08005669
 8005640:	2300      	movs	r3, #0
 8005642:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005646:	e1ec      	b.n	8005a22 <UART_SetConfig+0x5ae>
 8005648:	2304      	movs	r3, #4
 800564a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800564e:	e1e8      	b.n	8005a22 <UART_SetConfig+0x5ae>
 8005650:	2308      	movs	r3, #8
 8005652:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005656:	e1e4      	b.n	8005a22 <UART_SetConfig+0x5ae>
 8005658:	2310      	movs	r3, #16
 800565a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800565e:	e1e0      	b.n	8005a22 <UART_SetConfig+0x5ae>
 8005660:	2320      	movs	r3, #32
 8005662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005666:	e1dc      	b.n	8005a22 <UART_SetConfig+0x5ae>
 8005668:	2340      	movs	r3, #64	; 0x40
 800566a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800566e:	e1d8      	b.n	8005a22 <UART_SetConfig+0x5ae>
 8005670:	2380      	movs	r3, #128	; 0x80
 8005672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005676:	e1d4      	b.n	8005a22 <UART_SetConfig+0x5ae>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a51      	ldr	r2, [pc, #324]	; (80057c4 <UART_SetConfig+0x350>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d130      	bne.n	80056e4 <UART_SetConfig+0x270>
 8005682:	4b4e      	ldr	r3, [pc, #312]	; (80057bc <UART_SetConfig+0x348>)
 8005684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005686:	f003 0307 	and.w	r3, r3, #7
 800568a:	2b05      	cmp	r3, #5
 800568c:	d826      	bhi.n	80056dc <UART_SetConfig+0x268>
 800568e:	a201      	add	r2, pc, #4	; (adr r2, 8005694 <UART_SetConfig+0x220>)
 8005690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005694:	080056ad 	.word	0x080056ad
 8005698:	080056b5 	.word	0x080056b5
 800569c:	080056bd 	.word	0x080056bd
 80056a0:	080056c5 	.word	0x080056c5
 80056a4:	080056cd 	.word	0x080056cd
 80056a8:	080056d5 	.word	0x080056d5
 80056ac:	2300      	movs	r3, #0
 80056ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056b2:	e1b6      	b.n	8005a22 <UART_SetConfig+0x5ae>
 80056b4:	2304      	movs	r3, #4
 80056b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056ba:	e1b2      	b.n	8005a22 <UART_SetConfig+0x5ae>
 80056bc:	2308      	movs	r3, #8
 80056be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056c2:	e1ae      	b.n	8005a22 <UART_SetConfig+0x5ae>
 80056c4:	2310      	movs	r3, #16
 80056c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056ca:	e1aa      	b.n	8005a22 <UART_SetConfig+0x5ae>
 80056cc:	2320      	movs	r3, #32
 80056ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056d2:	e1a6      	b.n	8005a22 <UART_SetConfig+0x5ae>
 80056d4:	2340      	movs	r3, #64	; 0x40
 80056d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056da:	e1a2      	b.n	8005a22 <UART_SetConfig+0x5ae>
 80056dc:	2380      	movs	r3, #128	; 0x80
 80056de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056e2:	e19e      	b.n	8005a22 <UART_SetConfig+0x5ae>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a37      	ldr	r2, [pc, #220]	; (80057c8 <UART_SetConfig+0x354>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d130      	bne.n	8005750 <UART_SetConfig+0x2dc>
 80056ee:	4b33      	ldr	r3, [pc, #204]	; (80057bc <UART_SetConfig+0x348>)
 80056f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f2:	f003 0307 	and.w	r3, r3, #7
 80056f6:	2b05      	cmp	r3, #5
 80056f8:	d826      	bhi.n	8005748 <UART_SetConfig+0x2d4>
 80056fa:	a201      	add	r2, pc, #4	; (adr r2, 8005700 <UART_SetConfig+0x28c>)
 80056fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005700:	08005719 	.word	0x08005719
 8005704:	08005721 	.word	0x08005721
 8005708:	08005729 	.word	0x08005729
 800570c:	08005731 	.word	0x08005731
 8005710:	08005739 	.word	0x08005739
 8005714:	08005741 	.word	0x08005741
 8005718:	2300      	movs	r3, #0
 800571a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800571e:	e180      	b.n	8005a22 <UART_SetConfig+0x5ae>
 8005720:	2304      	movs	r3, #4
 8005722:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005726:	e17c      	b.n	8005a22 <UART_SetConfig+0x5ae>
 8005728:	2308      	movs	r3, #8
 800572a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800572e:	e178      	b.n	8005a22 <UART_SetConfig+0x5ae>
 8005730:	2310      	movs	r3, #16
 8005732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005736:	e174      	b.n	8005a22 <UART_SetConfig+0x5ae>
 8005738:	2320      	movs	r3, #32
 800573a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800573e:	e170      	b.n	8005a22 <UART_SetConfig+0x5ae>
 8005740:	2340      	movs	r3, #64	; 0x40
 8005742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005746:	e16c      	b.n	8005a22 <UART_SetConfig+0x5ae>
 8005748:	2380      	movs	r3, #128	; 0x80
 800574a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800574e:	e168      	b.n	8005a22 <UART_SetConfig+0x5ae>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a1d      	ldr	r2, [pc, #116]	; (80057cc <UART_SetConfig+0x358>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d142      	bne.n	80057e0 <UART_SetConfig+0x36c>
 800575a:	4b18      	ldr	r3, [pc, #96]	; (80057bc <UART_SetConfig+0x348>)
 800575c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800575e:	f003 0307 	and.w	r3, r3, #7
 8005762:	2b05      	cmp	r3, #5
 8005764:	d838      	bhi.n	80057d8 <UART_SetConfig+0x364>
 8005766:	a201      	add	r2, pc, #4	; (adr r2, 800576c <UART_SetConfig+0x2f8>)
 8005768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800576c:	08005785 	.word	0x08005785
 8005770:	0800578d 	.word	0x0800578d
 8005774:	08005795 	.word	0x08005795
 8005778:	0800579d 	.word	0x0800579d
 800577c:	080057a5 	.word	0x080057a5
 8005780:	080057d1 	.word	0x080057d1
 8005784:	2300      	movs	r3, #0
 8005786:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800578a:	e14a      	b.n	8005a22 <UART_SetConfig+0x5ae>
 800578c:	2304      	movs	r3, #4
 800578e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005792:	e146      	b.n	8005a22 <UART_SetConfig+0x5ae>
 8005794:	2308      	movs	r3, #8
 8005796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800579a:	e142      	b.n	8005a22 <UART_SetConfig+0x5ae>
 800579c:	2310      	movs	r3, #16
 800579e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057a2:	e13e      	b.n	8005a22 <UART_SetConfig+0x5ae>
 80057a4:	2320      	movs	r3, #32
 80057a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057aa:	e13a      	b.n	8005a22 <UART_SetConfig+0x5ae>
 80057ac:	cfff69f3 	.word	0xcfff69f3
 80057b0:	58000c00 	.word	0x58000c00
 80057b4:	11fff4ff 	.word	0x11fff4ff
 80057b8:	40011000 	.word	0x40011000
 80057bc:	58024400 	.word	0x58024400
 80057c0:	40004400 	.word	0x40004400
 80057c4:	40004800 	.word	0x40004800
 80057c8:	40004c00 	.word	0x40004c00
 80057cc:	40005000 	.word	0x40005000
 80057d0:	2340      	movs	r3, #64	; 0x40
 80057d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057d6:	e124      	b.n	8005a22 <UART_SetConfig+0x5ae>
 80057d8:	2380      	movs	r3, #128	; 0x80
 80057da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057de:	e120      	b.n	8005a22 <UART_SetConfig+0x5ae>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4acc      	ldr	r2, [pc, #816]	; (8005b18 <UART_SetConfig+0x6a4>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d176      	bne.n	80058d8 <UART_SetConfig+0x464>
 80057ea:	4bcc      	ldr	r3, [pc, #816]	; (8005b1c <UART_SetConfig+0x6a8>)
 80057ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057f2:	2b28      	cmp	r3, #40	; 0x28
 80057f4:	d86c      	bhi.n	80058d0 <UART_SetConfig+0x45c>
 80057f6:	a201      	add	r2, pc, #4	; (adr r2, 80057fc <UART_SetConfig+0x388>)
 80057f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057fc:	080058a1 	.word	0x080058a1
 8005800:	080058d1 	.word	0x080058d1
 8005804:	080058d1 	.word	0x080058d1
 8005808:	080058d1 	.word	0x080058d1
 800580c:	080058d1 	.word	0x080058d1
 8005810:	080058d1 	.word	0x080058d1
 8005814:	080058d1 	.word	0x080058d1
 8005818:	080058d1 	.word	0x080058d1
 800581c:	080058a9 	.word	0x080058a9
 8005820:	080058d1 	.word	0x080058d1
 8005824:	080058d1 	.word	0x080058d1
 8005828:	080058d1 	.word	0x080058d1
 800582c:	080058d1 	.word	0x080058d1
 8005830:	080058d1 	.word	0x080058d1
 8005834:	080058d1 	.word	0x080058d1
 8005838:	080058d1 	.word	0x080058d1
 800583c:	080058b1 	.word	0x080058b1
 8005840:	080058d1 	.word	0x080058d1
 8005844:	080058d1 	.word	0x080058d1
 8005848:	080058d1 	.word	0x080058d1
 800584c:	080058d1 	.word	0x080058d1
 8005850:	080058d1 	.word	0x080058d1
 8005854:	080058d1 	.word	0x080058d1
 8005858:	080058d1 	.word	0x080058d1
 800585c:	080058b9 	.word	0x080058b9
 8005860:	080058d1 	.word	0x080058d1
 8005864:	080058d1 	.word	0x080058d1
 8005868:	080058d1 	.word	0x080058d1
 800586c:	080058d1 	.word	0x080058d1
 8005870:	080058d1 	.word	0x080058d1
 8005874:	080058d1 	.word	0x080058d1
 8005878:	080058d1 	.word	0x080058d1
 800587c:	080058c1 	.word	0x080058c1
 8005880:	080058d1 	.word	0x080058d1
 8005884:	080058d1 	.word	0x080058d1
 8005888:	080058d1 	.word	0x080058d1
 800588c:	080058d1 	.word	0x080058d1
 8005890:	080058d1 	.word	0x080058d1
 8005894:	080058d1 	.word	0x080058d1
 8005898:	080058d1 	.word	0x080058d1
 800589c:	080058c9 	.word	0x080058c9
 80058a0:	2301      	movs	r3, #1
 80058a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058a6:	e0bc      	b.n	8005a22 <UART_SetConfig+0x5ae>
 80058a8:	2304      	movs	r3, #4
 80058aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058ae:	e0b8      	b.n	8005a22 <UART_SetConfig+0x5ae>
 80058b0:	2308      	movs	r3, #8
 80058b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058b6:	e0b4      	b.n	8005a22 <UART_SetConfig+0x5ae>
 80058b8:	2310      	movs	r3, #16
 80058ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058be:	e0b0      	b.n	8005a22 <UART_SetConfig+0x5ae>
 80058c0:	2320      	movs	r3, #32
 80058c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058c6:	e0ac      	b.n	8005a22 <UART_SetConfig+0x5ae>
 80058c8:	2340      	movs	r3, #64	; 0x40
 80058ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058ce:	e0a8      	b.n	8005a22 <UART_SetConfig+0x5ae>
 80058d0:	2380      	movs	r3, #128	; 0x80
 80058d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058d6:	e0a4      	b.n	8005a22 <UART_SetConfig+0x5ae>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a90      	ldr	r2, [pc, #576]	; (8005b20 <UART_SetConfig+0x6ac>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d130      	bne.n	8005944 <UART_SetConfig+0x4d0>
 80058e2:	4b8e      	ldr	r3, [pc, #568]	; (8005b1c <UART_SetConfig+0x6a8>)
 80058e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058e6:	f003 0307 	and.w	r3, r3, #7
 80058ea:	2b05      	cmp	r3, #5
 80058ec:	d826      	bhi.n	800593c <UART_SetConfig+0x4c8>
 80058ee:	a201      	add	r2, pc, #4	; (adr r2, 80058f4 <UART_SetConfig+0x480>)
 80058f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f4:	0800590d 	.word	0x0800590d
 80058f8:	08005915 	.word	0x08005915
 80058fc:	0800591d 	.word	0x0800591d
 8005900:	08005925 	.word	0x08005925
 8005904:	0800592d 	.word	0x0800592d
 8005908:	08005935 	.word	0x08005935
 800590c:	2300      	movs	r3, #0
 800590e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005912:	e086      	b.n	8005a22 <UART_SetConfig+0x5ae>
 8005914:	2304      	movs	r3, #4
 8005916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800591a:	e082      	b.n	8005a22 <UART_SetConfig+0x5ae>
 800591c:	2308      	movs	r3, #8
 800591e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005922:	e07e      	b.n	8005a22 <UART_SetConfig+0x5ae>
 8005924:	2310      	movs	r3, #16
 8005926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800592a:	e07a      	b.n	8005a22 <UART_SetConfig+0x5ae>
 800592c:	2320      	movs	r3, #32
 800592e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005932:	e076      	b.n	8005a22 <UART_SetConfig+0x5ae>
 8005934:	2340      	movs	r3, #64	; 0x40
 8005936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800593a:	e072      	b.n	8005a22 <UART_SetConfig+0x5ae>
 800593c:	2380      	movs	r3, #128	; 0x80
 800593e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005942:	e06e      	b.n	8005a22 <UART_SetConfig+0x5ae>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a76      	ldr	r2, [pc, #472]	; (8005b24 <UART_SetConfig+0x6b0>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d130      	bne.n	80059b0 <UART_SetConfig+0x53c>
 800594e:	4b73      	ldr	r3, [pc, #460]	; (8005b1c <UART_SetConfig+0x6a8>)
 8005950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005952:	f003 0307 	and.w	r3, r3, #7
 8005956:	2b05      	cmp	r3, #5
 8005958:	d826      	bhi.n	80059a8 <UART_SetConfig+0x534>
 800595a:	a201      	add	r2, pc, #4	; (adr r2, 8005960 <UART_SetConfig+0x4ec>)
 800595c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005960:	08005979 	.word	0x08005979
 8005964:	08005981 	.word	0x08005981
 8005968:	08005989 	.word	0x08005989
 800596c:	08005991 	.word	0x08005991
 8005970:	08005999 	.word	0x08005999
 8005974:	080059a1 	.word	0x080059a1
 8005978:	2300      	movs	r3, #0
 800597a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800597e:	e050      	b.n	8005a22 <UART_SetConfig+0x5ae>
 8005980:	2304      	movs	r3, #4
 8005982:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005986:	e04c      	b.n	8005a22 <UART_SetConfig+0x5ae>
 8005988:	2308      	movs	r3, #8
 800598a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800598e:	e048      	b.n	8005a22 <UART_SetConfig+0x5ae>
 8005990:	2310      	movs	r3, #16
 8005992:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005996:	e044      	b.n	8005a22 <UART_SetConfig+0x5ae>
 8005998:	2320      	movs	r3, #32
 800599a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800599e:	e040      	b.n	8005a22 <UART_SetConfig+0x5ae>
 80059a0:	2340      	movs	r3, #64	; 0x40
 80059a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059a6:	e03c      	b.n	8005a22 <UART_SetConfig+0x5ae>
 80059a8:	2380      	movs	r3, #128	; 0x80
 80059aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059ae:	e038      	b.n	8005a22 <UART_SetConfig+0x5ae>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a5c      	ldr	r2, [pc, #368]	; (8005b28 <UART_SetConfig+0x6b4>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d130      	bne.n	8005a1c <UART_SetConfig+0x5a8>
 80059ba:	4b58      	ldr	r3, [pc, #352]	; (8005b1c <UART_SetConfig+0x6a8>)
 80059bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059be:	f003 0307 	and.w	r3, r3, #7
 80059c2:	2b05      	cmp	r3, #5
 80059c4:	d826      	bhi.n	8005a14 <UART_SetConfig+0x5a0>
 80059c6:	a201      	add	r2, pc, #4	; (adr r2, 80059cc <UART_SetConfig+0x558>)
 80059c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059cc:	080059e5 	.word	0x080059e5
 80059d0:	080059ed 	.word	0x080059ed
 80059d4:	080059f5 	.word	0x080059f5
 80059d8:	080059fd 	.word	0x080059fd
 80059dc:	08005a05 	.word	0x08005a05
 80059e0:	08005a0d 	.word	0x08005a0d
 80059e4:	2302      	movs	r3, #2
 80059e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059ea:	e01a      	b.n	8005a22 <UART_SetConfig+0x5ae>
 80059ec:	2304      	movs	r3, #4
 80059ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059f2:	e016      	b.n	8005a22 <UART_SetConfig+0x5ae>
 80059f4:	2308      	movs	r3, #8
 80059f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059fa:	e012      	b.n	8005a22 <UART_SetConfig+0x5ae>
 80059fc:	2310      	movs	r3, #16
 80059fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a02:	e00e      	b.n	8005a22 <UART_SetConfig+0x5ae>
 8005a04:	2320      	movs	r3, #32
 8005a06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a0a:	e00a      	b.n	8005a22 <UART_SetConfig+0x5ae>
 8005a0c:	2340      	movs	r3, #64	; 0x40
 8005a0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a12:	e006      	b.n	8005a22 <UART_SetConfig+0x5ae>
 8005a14:	2380      	movs	r3, #128	; 0x80
 8005a16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a1a:	e002      	b.n	8005a22 <UART_SetConfig+0x5ae>
 8005a1c:	2380      	movs	r3, #128	; 0x80
 8005a1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a40      	ldr	r2, [pc, #256]	; (8005b28 <UART_SetConfig+0x6b4>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	f040 80ef 	bne.w	8005c0c <UART_SetConfig+0x798>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a2e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005a32:	2b20      	cmp	r3, #32
 8005a34:	dc46      	bgt.n	8005ac4 <UART_SetConfig+0x650>
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	f2c0 8081 	blt.w	8005b3e <UART_SetConfig+0x6ca>
 8005a3c:	3b02      	subs	r3, #2
 8005a3e:	2b1e      	cmp	r3, #30
 8005a40:	d87d      	bhi.n	8005b3e <UART_SetConfig+0x6ca>
 8005a42:	a201      	add	r2, pc, #4	; (adr r2, 8005a48 <UART_SetConfig+0x5d4>)
 8005a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a48:	08005acb 	.word	0x08005acb
 8005a4c:	08005b3f 	.word	0x08005b3f
 8005a50:	08005ad3 	.word	0x08005ad3
 8005a54:	08005b3f 	.word	0x08005b3f
 8005a58:	08005b3f 	.word	0x08005b3f
 8005a5c:	08005b3f 	.word	0x08005b3f
 8005a60:	08005ae3 	.word	0x08005ae3
 8005a64:	08005b3f 	.word	0x08005b3f
 8005a68:	08005b3f 	.word	0x08005b3f
 8005a6c:	08005b3f 	.word	0x08005b3f
 8005a70:	08005b3f 	.word	0x08005b3f
 8005a74:	08005b3f 	.word	0x08005b3f
 8005a78:	08005b3f 	.word	0x08005b3f
 8005a7c:	08005b3f 	.word	0x08005b3f
 8005a80:	08005af3 	.word	0x08005af3
 8005a84:	08005b3f 	.word	0x08005b3f
 8005a88:	08005b3f 	.word	0x08005b3f
 8005a8c:	08005b3f 	.word	0x08005b3f
 8005a90:	08005b3f 	.word	0x08005b3f
 8005a94:	08005b3f 	.word	0x08005b3f
 8005a98:	08005b3f 	.word	0x08005b3f
 8005a9c:	08005b3f 	.word	0x08005b3f
 8005aa0:	08005b3f 	.word	0x08005b3f
 8005aa4:	08005b3f 	.word	0x08005b3f
 8005aa8:	08005b3f 	.word	0x08005b3f
 8005aac:	08005b3f 	.word	0x08005b3f
 8005ab0:	08005b3f 	.word	0x08005b3f
 8005ab4:	08005b3f 	.word	0x08005b3f
 8005ab8:	08005b3f 	.word	0x08005b3f
 8005abc:	08005b3f 	.word	0x08005b3f
 8005ac0:	08005b31 	.word	0x08005b31
 8005ac4:	2b40      	cmp	r3, #64	; 0x40
 8005ac6:	d036      	beq.n	8005b36 <UART_SetConfig+0x6c2>
 8005ac8:	e039      	b.n	8005b3e <UART_SetConfig+0x6ca>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005aca:	f7fd fa8f 	bl	8002fec <HAL_RCCEx_GetD3PCLK1Freq>
 8005ace:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005ad0:	e03b      	b.n	8005b4a <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ad2:	f107 0314 	add.w	r3, r7, #20
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7fd fa9e 	bl	8003018 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ae0:	e033      	b.n	8005b4a <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ae2:	f107 0308 	add.w	r3, r7, #8
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f7fd fbea 	bl	80032c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005af0:	e02b      	b.n	8005b4a <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005af2:	4b0a      	ldr	r3, [pc, #40]	; (8005b1c <UART_SetConfig+0x6a8>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0320 	and.w	r3, r3, #32
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d009      	beq.n	8005b12 <UART_SetConfig+0x69e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005afe:	4b07      	ldr	r3, [pc, #28]	; (8005b1c <UART_SetConfig+0x6a8>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	08db      	lsrs	r3, r3, #3
 8005b04:	f003 0303 	and.w	r3, r3, #3
 8005b08:	4a08      	ldr	r2, [pc, #32]	; (8005b2c <UART_SetConfig+0x6b8>)
 8005b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b10:	e01b      	b.n	8005b4a <UART_SetConfig+0x6d6>
          pclk = (uint32_t) HSI_VALUE;
 8005b12:	4b06      	ldr	r3, [pc, #24]	; (8005b2c <UART_SetConfig+0x6b8>)
 8005b14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b16:	e018      	b.n	8005b4a <UART_SetConfig+0x6d6>
 8005b18:	40011400 	.word	0x40011400
 8005b1c:	58024400 	.word	0x58024400
 8005b20:	40007800 	.word	0x40007800
 8005b24:	40007c00 	.word	0x40007c00
 8005b28:	58000c00 	.word	0x58000c00
 8005b2c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005b30:	4bc4      	ldr	r3, [pc, #784]	; (8005e44 <UART_SetConfig+0x9d0>)
 8005b32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b34:	e009      	b.n	8005b4a <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b3c:	e005      	b.n	8005b4a <UART_SetConfig+0x6d6>
      default:
        pclk = 0U;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005b48:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f000 81da 	beq.w	8005f06 <UART_SetConfig+0xa92>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b56:	4abc      	ldr	r2, [pc, #752]	; (8005e48 <UART_SetConfig+0x9d4>)
 8005b58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b60:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b64:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685a      	ldr	r2, [r3, #4]
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	005b      	lsls	r3, r3, #1
 8005b6e:	4413      	add	r3, r2
 8005b70:	6a3a      	ldr	r2, [r7, #32]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d305      	bcc.n	8005b82 <UART_SetConfig+0x70e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b7c:	6a3a      	ldr	r2, [r7, #32]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d903      	bls.n	8005b8a <UART_SetConfig+0x716>
      {
        ret = HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005b88:	e1bd      	b.n	8005f06 <UART_SetConfig+0xa92>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f04f 0100 	mov.w	r1, #0
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b96:	4aac      	ldr	r2, [pc, #688]	; (8005e48 <UART_SetConfig+0x9d4>)
 8005b98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b9c:	b29a      	uxth	r2, r3
 8005b9e:	f04f 0300 	mov.w	r3, #0
 8005ba2:	f7fa fb99 	bl	80002d8 <__aeabi_uldivmod>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	460b      	mov	r3, r1
 8005baa:	4610      	mov	r0, r2
 8005bac:	4619      	mov	r1, r3
 8005bae:	f04f 0200 	mov.w	r2, #0
 8005bb2:	f04f 0300 	mov.w	r3, #0
 8005bb6:	020b      	lsls	r3, r1, #8
 8005bb8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005bbc:	0202      	lsls	r2, r0, #8
 8005bbe:	6879      	ldr	r1, [r7, #4]
 8005bc0:	6849      	ldr	r1, [r1, #4]
 8005bc2:	0849      	lsrs	r1, r1, #1
 8005bc4:	4608      	mov	r0, r1
 8005bc6:	f04f 0100 	mov.w	r1, #0
 8005bca:	1814      	adds	r4, r2, r0
 8005bcc:	eb43 0501 	adc.w	r5, r3, r1
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	f04f 0300 	mov.w	r3, #0
 8005bda:	4620      	mov	r0, r4
 8005bdc:	4629      	mov	r1, r5
 8005bde:	f7fa fb7b 	bl	80002d8 <__aeabi_uldivmod>
 8005be2:	4602      	mov	r2, r0
 8005be4:	460b      	mov	r3, r1
 8005be6:	4613      	mov	r3, r2
 8005be8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bf0:	d308      	bcc.n	8005c04 <UART_SetConfig+0x790>
 8005bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bf8:	d204      	bcs.n	8005c04 <UART_SetConfig+0x790>
        {
          huart->Instance->BRR = usartdiv;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c00:	60da      	str	r2, [r3, #12]
 8005c02:	e180      	b.n	8005f06 <UART_SetConfig+0xa92>
        }
        else
        {
          ret = HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005c0a:	e17c      	b.n	8005f06 <UART_SetConfig+0xa92>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	69db      	ldr	r3, [r3, #28]
 8005c10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c14:	f040 80bf 	bne.w	8005d96 <UART_SetConfig+0x922>
  {
    switch (clocksource)
 8005c18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005c1c:	2b20      	cmp	r3, #32
 8005c1e:	dc49      	bgt.n	8005cb4 <UART_SetConfig+0x840>
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	db7c      	blt.n	8005d1e <UART_SetConfig+0x8aa>
 8005c24:	2b20      	cmp	r3, #32
 8005c26:	d87a      	bhi.n	8005d1e <UART_SetConfig+0x8aa>
 8005c28:	a201      	add	r2, pc, #4	; (adr r2, 8005c30 <UART_SetConfig+0x7bc>)
 8005c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c2e:	bf00      	nop
 8005c30:	08005cbb 	.word	0x08005cbb
 8005c34:	08005cc3 	.word	0x08005cc3
 8005c38:	08005d1f 	.word	0x08005d1f
 8005c3c:	08005d1f 	.word	0x08005d1f
 8005c40:	08005ccb 	.word	0x08005ccb
 8005c44:	08005d1f 	.word	0x08005d1f
 8005c48:	08005d1f 	.word	0x08005d1f
 8005c4c:	08005d1f 	.word	0x08005d1f
 8005c50:	08005cdb 	.word	0x08005cdb
 8005c54:	08005d1f 	.word	0x08005d1f
 8005c58:	08005d1f 	.word	0x08005d1f
 8005c5c:	08005d1f 	.word	0x08005d1f
 8005c60:	08005d1f 	.word	0x08005d1f
 8005c64:	08005d1f 	.word	0x08005d1f
 8005c68:	08005d1f 	.word	0x08005d1f
 8005c6c:	08005d1f 	.word	0x08005d1f
 8005c70:	08005ceb 	.word	0x08005ceb
 8005c74:	08005d1f 	.word	0x08005d1f
 8005c78:	08005d1f 	.word	0x08005d1f
 8005c7c:	08005d1f 	.word	0x08005d1f
 8005c80:	08005d1f 	.word	0x08005d1f
 8005c84:	08005d1f 	.word	0x08005d1f
 8005c88:	08005d1f 	.word	0x08005d1f
 8005c8c:	08005d1f 	.word	0x08005d1f
 8005c90:	08005d1f 	.word	0x08005d1f
 8005c94:	08005d1f 	.word	0x08005d1f
 8005c98:	08005d1f 	.word	0x08005d1f
 8005c9c:	08005d1f 	.word	0x08005d1f
 8005ca0:	08005d1f 	.word	0x08005d1f
 8005ca4:	08005d1f 	.word	0x08005d1f
 8005ca8:	08005d1f 	.word	0x08005d1f
 8005cac:	08005d1f 	.word	0x08005d1f
 8005cb0:	08005d11 	.word	0x08005d11
 8005cb4:	2b40      	cmp	r3, #64	; 0x40
 8005cb6:	d02e      	beq.n	8005d16 <UART_SetConfig+0x8a2>
 8005cb8:	e031      	b.n	8005d1e <UART_SetConfig+0x8aa>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cba:	f7fc feb3 	bl	8002a24 <HAL_RCC_GetPCLK1Freq>
 8005cbe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005cc0:	e033      	b.n	8005d2a <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cc2:	f7fc fec5 	bl	8002a50 <HAL_RCC_GetPCLK2Freq>
 8005cc6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005cc8:	e02f      	b.n	8005d2a <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005cca:	f107 0314 	add.w	r3, r7, #20
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7fd f9a2 	bl	8003018 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005cd8:	e027      	b.n	8005d2a <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cda:	f107 0308 	add.w	r3, r7, #8
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7fd faee 	bl	80032c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ce8:	e01f      	b.n	8005d2a <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cea:	4b58      	ldr	r3, [pc, #352]	; (8005e4c <UART_SetConfig+0x9d8>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 0320 	and.w	r3, r3, #32
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d009      	beq.n	8005d0a <UART_SetConfig+0x896>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005cf6:	4b55      	ldr	r3, [pc, #340]	; (8005e4c <UART_SetConfig+0x9d8>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	08db      	lsrs	r3, r3, #3
 8005cfc:	f003 0303 	and.w	r3, r3, #3
 8005d00:	4a53      	ldr	r2, [pc, #332]	; (8005e50 <UART_SetConfig+0x9dc>)
 8005d02:	fa22 f303 	lsr.w	r3, r2, r3
 8005d06:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005d08:	e00f      	b.n	8005d2a <UART_SetConfig+0x8b6>
          pclk = (uint32_t) HSI_VALUE;
 8005d0a:	4b51      	ldr	r3, [pc, #324]	; (8005e50 <UART_SetConfig+0x9dc>)
 8005d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d0e:	e00c      	b.n	8005d2a <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005d10:	4b4c      	ldr	r3, [pc, #304]	; (8005e44 <UART_SetConfig+0x9d0>)
 8005d12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d14:	e009      	b.n	8005d2a <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d1c:	e005      	b.n	8005d2a <UART_SetConfig+0x8b6>
      default:
        pclk = 0U;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005d28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f000 80ea 	beq.w	8005f06 <UART_SetConfig+0xa92>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d36:	4a44      	ldr	r2, [pc, #272]	; (8005e48 <UART_SetConfig+0x9d4>)
 8005d38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d40:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d44:	005a      	lsls	r2, r3, #1
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	085b      	lsrs	r3, r3, #1
 8005d4c:	441a      	add	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5c:	2b0f      	cmp	r3, #15
 8005d5e:	d916      	bls.n	8005d8e <UART_SetConfig+0x91a>
 8005d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d66:	d212      	bcs.n	8005d8e <UART_SetConfig+0x91a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	f023 030f 	bic.w	r3, r3, #15
 8005d70:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d74:	085b      	lsrs	r3, r3, #1
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	f003 0307 	and.w	r3, r3, #7
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005d80:	4313      	orrs	r3, r2
 8005d82:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005d8a:	60da      	str	r2, [r3, #12]
 8005d8c:	e0bb      	b.n	8005f06 <UART_SetConfig+0xa92>
      }
      else
      {
        ret = HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005d94:	e0b7      	b.n	8005f06 <UART_SetConfig+0xa92>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d96:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005d9a:	2b20      	cmp	r3, #32
 8005d9c:	dc4a      	bgt.n	8005e34 <UART_SetConfig+0x9c0>
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f2c0 8086 	blt.w	8005eb0 <UART_SetConfig+0xa3c>
 8005da4:	2b20      	cmp	r3, #32
 8005da6:	f200 8083 	bhi.w	8005eb0 <UART_SetConfig+0xa3c>
 8005daa:	a201      	add	r2, pc, #4	; (adr r2, 8005db0 <UART_SetConfig+0x93c>)
 8005dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db0:	08005e3b 	.word	0x08005e3b
 8005db4:	08005e55 	.word	0x08005e55
 8005db8:	08005eb1 	.word	0x08005eb1
 8005dbc:	08005eb1 	.word	0x08005eb1
 8005dc0:	08005e5d 	.word	0x08005e5d
 8005dc4:	08005eb1 	.word	0x08005eb1
 8005dc8:	08005eb1 	.word	0x08005eb1
 8005dcc:	08005eb1 	.word	0x08005eb1
 8005dd0:	08005e6d 	.word	0x08005e6d
 8005dd4:	08005eb1 	.word	0x08005eb1
 8005dd8:	08005eb1 	.word	0x08005eb1
 8005ddc:	08005eb1 	.word	0x08005eb1
 8005de0:	08005eb1 	.word	0x08005eb1
 8005de4:	08005eb1 	.word	0x08005eb1
 8005de8:	08005eb1 	.word	0x08005eb1
 8005dec:	08005eb1 	.word	0x08005eb1
 8005df0:	08005e7d 	.word	0x08005e7d
 8005df4:	08005eb1 	.word	0x08005eb1
 8005df8:	08005eb1 	.word	0x08005eb1
 8005dfc:	08005eb1 	.word	0x08005eb1
 8005e00:	08005eb1 	.word	0x08005eb1
 8005e04:	08005eb1 	.word	0x08005eb1
 8005e08:	08005eb1 	.word	0x08005eb1
 8005e0c:	08005eb1 	.word	0x08005eb1
 8005e10:	08005eb1 	.word	0x08005eb1
 8005e14:	08005eb1 	.word	0x08005eb1
 8005e18:	08005eb1 	.word	0x08005eb1
 8005e1c:	08005eb1 	.word	0x08005eb1
 8005e20:	08005eb1 	.word	0x08005eb1
 8005e24:	08005eb1 	.word	0x08005eb1
 8005e28:	08005eb1 	.word	0x08005eb1
 8005e2c:	08005eb1 	.word	0x08005eb1
 8005e30:	08005ea3 	.word	0x08005ea3
 8005e34:	2b40      	cmp	r3, #64	; 0x40
 8005e36:	d037      	beq.n	8005ea8 <UART_SetConfig+0xa34>
 8005e38:	e03a      	b.n	8005eb0 <UART_SetConfig+0xa3c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e3a:	f7fc fdf3 	bl	8002a24 <HAL_RCC_GetPCLK1Freq>
 8005e3e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005e40:	e03c      	b.n	8005ebc <UART_SetConfig+0xa48>
 8005e42:	bf00      	nop
 8005e44:	003d0900 	.word	0x003d0900
 8005e48:	0800a79c 	.word	0x0800a79c
 8005e4c:	58024400 	.word	0x58024400
 8005e50:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e54:	f7fc fdfc 	bl	8002a50 <HAL_RCC_GetPCLK2Freq>
 8005e58:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005e5a:	e02f      	b.n	8005ebc <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e5c:	f107 0314 	add.w	r3, r7, #20
 8005e60:	4618      	mov	r0, r3
 8005e62:	f7fd f8d9 	bl	8003018 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e6a:	e027      	b.n	8005ebc <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e6c:	f107 0308 	add.w	r3, r7, #8
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7fd fa25 	bl	80032c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e7a:	e01f      	b.n	8005ebc <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e7c:	4b2c      	ldr	r3, [pc, #176]	; (8005f30 <UART_SetConfig+0xabc>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 0320 	and.w	r3, r3, #32
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d009      	beq.n	8005e9c <UART_SetConfig+0xa28>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005e88:	4b29      	ldr	r3, [pc, #164]	; (8005f30 <UART_SetConfig+0xabc>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	08db      	lsrs	r3, r3, #3
 8005e8e:	f003 0303 	and.w	r3, r3, #3
 8005e92:	4a28      	ldr	r2, [pc, #160]	; (8005f34 <UART_SetConfig+0xac0>)
 8005e94:	fa22 f303 	lsr.w	r3, r2, r3
 8005e98:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005e9a:	e00f      	b.n	8005ebc <UART_SetConfig+0xa48>
          pclk = (uint32_t) HSI_VALUE;
 8005e9c:	4b25      	ldr	r3, [pc, #148]	; (8005f34 <UART_SetConfig+0xac0>)
 8005e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ea0:	e00c      	b.n	8005ebc <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005ea2:	4b25      	ldr	r3, [pc, #148]	; (8005f38 <UART_SetConfig+0xac4>)
 8005ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ea6:	e009      	b.n	8005ebc <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ea8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005eae:	e005      	b.n	8005ebc <UART_SetConfig+0xa48>
      default:
        pclk = 0U;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005eba:	bf00      	nop
    }

    if (pclk != 0U)
 8005ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d021      	beq.n	8005f06 <UART_SetConfig+0xa92>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec6:	4a1d      	ldr	r2, [pc, #116]	; (8005f3c <UART_SetConfig+0xac8>)
 8005ec8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ecc:	461a      	mov	r2, r3
 8005ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed0:	fbb3 f2f2 	udiv	r2, r3, r2
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	085b      	lsrs	r3, r3, #1
 8005eda:	441a      	add	r2, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eea:	2b0f      	cmp	r3, #15
 8005eec:	d908      	bls.n	8005f00 <UART_SetConfig+0xa8c>
 8005eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ef4:	d204      	bcs.n	8005f00 <UART_SetConfig+0xa8c>
      {
        huart->Instance->BRR = usartdiv;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005efc:	60da      	str	r2, [r3, #12]
 8005efe:	e002      	b.n	8005f06 <UART_SetConfig+0xa92>
      }
      else
      {
        ret = HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2201      	movs	r2, #1
 8005f12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005f22:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3738      	adds	r7, #56	; 0x38
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bdb0      	pop	{r4, r5, r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	58024400 	.word	0x58024400
 8005f34:	03d09000 	.word	0x03d09000
 8005f38:	003d0900 	.word	0x003d0900
 8005f3c:	0800a79c 	.word	0x0800a79c

08005f40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f4c:	f003 0301 	and.w	r3, r3, #1
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00a      	beq.n	8005f6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	430a      	orrs	r2, r1
 8005f68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f6e:	f003 0302 	and.w	r3, r3, #2
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00a      	beq.n	8005f8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	430a      	orrs	r2, r1
 8005f8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f90:	f003 0304 	and.w	r3, r3, #4
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d00a      	beq.n	8005fae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	430a      	orrs	r2, r1
 8005fac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb2:	f003 0308 	and.w	r3, r3, #8
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00a      	beq.n	8005fd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	430a      	orrs	r2, r1
 8005fce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd4:	f003 0310 	and.w	r3, r3, #16
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00a      	beq.n	8005ff2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	430a      	orrs	r2, r1
 8005ff0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff6:	f003 0320 	and.w	r3, r3, #32
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00a      	beq.n	8006014 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	430a      	orrs	r2, r1
 8006012:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800601c:	2b00      	cmp	r3, #0
 800601e:	d01a      	beq.n	8006056 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	430a      	orrs	r2, r1
 8006034:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800603a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800603e:	d10a      	bne.n	8006056 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	430a      	orrs	r2, r1
 8006054:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00a      	beq.n	8006078 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	430a      	orrs	r2, r1
 8006076:	605a      	str	r2, [r3, #4]
  }
}
 8006078:	bf00      	nop
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af02      	add	r7, sp, #8
 800608a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006094:	f7fa ff8e 	bl	8000fb4 <HAL_GetTick>
 8006098:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 0308 	and.w	r3, r3, #8
 80060a4:	2b08      	cmp	r3, #8
 80060a6:	d10e      	bne.n	80060c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060ac:	9300      	str	r3, [sp, #0]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 f82c 	bl	8006114 <UART_WaitOnFlagUntilTimeout>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d001      	beq.n	80060c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e022      	b.n	800610c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 0304 	and.w	r3, r3, #4
 80060d0:	2b04      	cmp	r3, #4
 80060d2:	d10e      	bne.n	80060f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060d8:	9300      	str	r3, [sp, #0]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 f816 	bl	8006114 <UART_WaitOnFlagUntilTimeout>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d001      	beq.n	80060f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e00c      	b.n	800610c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2220      	movs	r2, #32
 80060f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2220      	movs	r2, #32
 80060fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800610a:	2300      	movs	r3, #0
}
 800610c:	4618      	mov	r0, r3
 800610e:	3710      	adds	r7, #16
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	603b      	str	r3, [r7, #0]
 8006120:	4613      	mov	r3, r2
 8006122:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006124:	e062      	b.n	80061ec <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800612c:	d05e      	beq.n	80061ec <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800612e:	f7fa ff41 	bl	8000fb4 <HAL_GetTick>
 8006132:	4602      	mov	r2, r0
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	69ba      	ldr	r2, [r7, #24]
 800613a:	429a      	cmp	r2, r3
 800613c:	d302      	bcc.n	8006144 <UART_WaitOnFlagUntilTimeout+0x30>
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d11d      	bne.n	8006180 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006152:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	689a      	ldr	r2, [r3, #8]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f022 0201 	bic.w	r2, r2, #1
 8006162:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2220      	movs	r2, #32
 8006168:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2220      	movs	r2, #32
 8006170:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800617c:	2303      	movs	r3, #3
 800617e:	e045      	b.n	800620c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f003 0304 	and.w	r3, r3, #4
 800618a:	2b00      	cmp	r3, #0
 800618c:	d02e      	beq.n	80061ec <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	69db      	ldr	r3, [r3, #28]
 8006194:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006198:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800619c:	d126      	bne.n	80061ec <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061a6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80061b6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	689a      	ldr	r2, [r3, #8]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f022 0201 	bic.w	r2, r2, #1
 80061c6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2220      	movs	r2, #32
 80061cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2220      	movs	r2, #32
 80061d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2220      	movs	r2, #32
 80061dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80061e8:	2303      	movs	r3, #3
 80061ea:	e00f      	b.n	800620c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	69da      	ldr	r2, [r3, #28]
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	4013      	ands	r3, r2
 80061f6:	68ba      	ldr	r2, [r7, #8]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	bf0c      	ite	eq
 80061fc:	2301      	moveq	r3, #1
 80061fe:	2300      	movne	r3, #0
 8006200:	b2db      	uxtb	r3, r3
 8006202:	461a      	mov	r2, r3
 8006204:	79fb      	ldrb	r3, [r7, #7]
 8006206:	429a      	cmp	r2, r3
 8006208:	d08d      	beq.n	8006126 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3710      	adds	r7, #16
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800622a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	6899      	ldr	r1, [r3, #8]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	4b08      	ldr	r3, [pc, #32]	; (8006258 <UART_EndRxTransfer+0x44>)
 8006238:	400b      	ands	r3, r1
 800623a:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2220      	movs	r2, #32
 8006240:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800624a:	bf00      	nop
 800624c:	370c      	adds	r7, #12
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop
 8006258:	effffffe 	.word	0xeffffffe

0800625c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006268:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2200      	movs	r2, #0
 8006276:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800627a:	68f8      	ldr	r0, [r7, #12]
 800627c:	f7ff f8f0 	bl	8005460 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006280:	bf00      	nop
 8006282:	3710      	adds	r7, #16
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800629e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2220      	movs	r2, #32
 80062a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f7ff f8cc 	bl	800544c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062b4:	bf00      	nop
 80062b6:	3708      	adds	r7, #8
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80062c4:	bf00      	nop
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80062d8:	bf00      	nop
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80062ec:	bf00      	nop
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006306:	2b01      	cmp	r3, #1
 8006308:	d101      	bne.n	800630e <HAL_UARTEx_DisableFifoMode+0x16>
 800630a:	2302      	movs	r3, #2
 800630c:	e027      	b.n	800635e <HAL_UARTEx_DisableFifoMode+0x66>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2201      	movs	r2, #1
 8006312:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2224      	movs	r2, #36	; 0x24
 800631a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f022 0201 	bic.w	r2, r2, #1
 8006334:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800633c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2220      	movs	r2, #32
 8006350:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	3714      	adds	r7, #20
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr

0800636a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800636a:	b580      	push	{r7, lr}
 800636c:	b084      	sub	sp, #16
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
 8006372:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800637a:	2b01      	cmp	r3, #1
 800637c:	d101      	bne.n	8006382 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800637e:	2302      	movs	r3, #2
 8006380:	e02d      	b.n	80063de <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2201      	movs	r2, #1
 8006386:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2224      	movs	r2, #36	; 0x24
 800638e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f022 0201 	bic.w	r2, r2, #1
 80063a8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	683a      	ldr	r2, [r7, #0]
 80063ba:	430a      	orrs	r2, r1
 80063bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 f850 	bl	8006464 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2220      	movs	r2, #32
 80063d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3710      	adds	r7, #16
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}

080063e6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80063e6:	b580      	push	{r7, lr}
 80063e8:	b084      	sub	sp, #16
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
 80063ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d101      	bne.n	80063fe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80063fa:	2302      	movs	r3, #2
 80063fc:	e02d      	b.n	800645a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2201      	movs	r2, #1
 8006402:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2224      	movs	r2, #36	; 0x24
 800640a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f022 0201 	bic.w	r2, r2, #1
 8006424:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	683a      	ldr	r2, [r7, #0]
 8006436:	430a      	orrs	r2, r1
 8006438:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 f812 	bl	8006464 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2220      	movs	r2, #32
 800644c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3710      	adds	r7, #16
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
	...

08006464 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006464:	b480      	push	{r7}
 8006466:	b089      	sub	sp, #36	; 0x24
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800646c:	4a2f      	ldr	r2, [pc, #188]	; (800652c <UARTEx_SetNbDataToProcess+0xc8>)
 800646e:	f107 0314 	add.w	r3, r7, #20
 8006472:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006476:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800647a:	4a2d      	ldr	r2, [pc, #180]	; (8006530 <UARTEx_SetNbDataToProcess+0xcc>)
 800647c:	f107 030c 	add.w	r3, r7, #12
 8006480:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006484:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800648c:	2b00      	cmp	r3, #0
 800648e:	d108      	bne.n	80064a2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80064a0:	e03d      	b.n	800651e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80064a2:	2310      	movs	r3, #16
 80064a4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80064a6:	2310      	movs	r3, #16
 80064a8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	0e5b      	lsrs	r3, r3, #25
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	f003 0307 	and.w	r3, r3, #7
 80064b8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	0f5b      	lsrs	r3, r3, #29
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	f003 0307 	and.w	r3, r3, #7
 80064c8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80064ca:	7fbb      	ldrb	r3, [r7, #30]
 80064cc:	7f3a      	ldrb	r2, [r7, #28]
 80064ce:	f107 0120 	add.w	r1, r7, #32
 80064d2:	440a      	add	r2, r1
 80064d4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80064d8:	fb02 f303 	mul.w	r3, r2, r3
 80064dc:	7f3a      	ldrb	r2, [r7, #28]
 80064de:	f107 0120 	add.w	r1, r7, #32
 80064e2:	440a      	add	r2, r1
 80064e4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80064e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80064f4:	7ffb      	ldrb	r3, [r7, #31]
 80064f6:	7f7a      	ldrb	r2, [r7, #29]
 80064f8:	f107 0120 	add.w	r1, r7, #32
 80064fc:	440a      	add	r2, r1
 80064fe:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006502:	fb02 f303 	mul.w	r3, r2, r3
 8006506:	7f7a      	ldrb	r2, [r7, #29]
 8006508:	f107 0120 	add.w	r1, r7, #32
 800650c:	440a      	add	r2, r1
 800650e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006512:	fb93 f3f2 	sdiv	r3, r3, r2
 8006516:	b29a      	uxth	r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800651e:	bf00      	nop
 8006520:	3724      	adds	r7, #36	; 0x24
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	0800a738 	.word	0x0800a738
 8006530:	0800a740 	.word	0x0800a740

08006534 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8006534:	b084      	sub	sp, #16
 8006536:	b480      	push	{r7}
 8006538:	b085      	sub	sp, #20
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
 800653e:	f107 001c 	add.w	r0, r7, #28
 8006542:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006546:	2300      	movs	r3, #0
 8006548:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800654a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800654c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800654e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 8006552:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006554:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 8006556:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800655a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	4313      	orrs	r3, r2
 8006560:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	685a      	ldr	r2, [r3, #4]
 8006566:	4b07      	ldr	r3, [pc, #28]	; (8006584 <SDMMC_Init+0x50>)
 8006568:	4013      	ands	r3, r2
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	431a      	orrs	r2, r3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006572:	2300      	movs	r3, #0
}
 8006574:	4618      	mov	r0, r3
 8006576:	3714      	adds	r7, #20
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	b004      	add	sp, #16
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	ffc02c00 	.word	0xffc02c00

08006588 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006596:	4618      	mov	r0, r3
 8006598:	370c      	adds	r7, #12
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr

080065a2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80065a2:	b480      	push	{r7}
 80065a4:	b083      	sub	sp, #12
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
 80065aa:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f043 0203 	orr.w	r2, r3, #3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	370c      	adds	r7, #12
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr

080065e6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80065e6:	b480      	push	{r7}
 80065e8:	b083      	sub	sp, #12
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 0303 	and.w	r3, r3, #3
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	370c      	adds	r7, #12
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
	...

08006604 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8006604:	b480      	push	{r7}
 8006606:	b085      	sub	sp, #20
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800660e:	2300      	movs	r3, #0
 8006610:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006622:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006628:	431a      	orrs	r2, r3
                       Command->CPSM);
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800662e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	4313      	orrs	r3, r2
 8006634:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	68da      	ldr	r2, [r3, #12]
 800663a:	4b06      	ldr	r3, [pc, #24]	; (8006654 <SDMMC_SendCommand+0x50>)
 800663c:	4013      	ands	r3, r2
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	431a      	orrs	r2, r3
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	3714      	adds	r7, #20
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr
 8006654:	fffee0c0 	.word	0xfffee0c0

08006658 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	b2db      	uxtb	r3, r3
}
 8006666:	4618      	mov	r0, r3
 8006668:	370c      	adds	r7, #12
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr

08006672 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8006672:	b480      	push	{r7}
 8006674:	b085      	sub	sp, #20
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
 800667a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	3314      	adds	r3, #20
 8006680:	461a      	mov	r2, r3
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	4413      	add	r3, r2
 8006686:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
}
 800668c:	4618      	mov	r0, r3
 800668e:	3714      	adds	r7, #20
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8006698:	b480      	push	{r7}
 800669a:	b085      	sub	sp, #20
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80066a2:	2300      	movs	r3, #0
 80066a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	685a      	ldr	r2, [r3, #4]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80066be:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80066c4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80066ca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	431a      	orrs	r2, r3
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80066e2:	2300      	movs	r3, #0

}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3714      	adds	r7, #20
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b088      	sub	sp, #32
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80066fe:	2310      	movs	r3, #16
 8006700:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006702:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006706:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006708:	2300      	movs	r3, #0
 800670a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800670c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006710:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006712:	f107 0308 	add.w	r3, r7, #8
 8006716:	4619      	mov	r1, r3
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f7ff ff73 	bl	8006604 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800671e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006722:	2110      	movs	r1, #16
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 faaf 	bl	8006c88 <SDMMC_GetCmdResp1>
 800672a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800672c:	69fb      	ldr	r3, [r7, #28]
}
 800672e:	4618      	mov	r0, r3
 8006730:	3720      	adds	r7, #32
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}

08006736 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8006736:	b580      	push	{r7, lr}
 8006738:	b088      	sub	sp, #32
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
 800673e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006744:	2311      	movs	r3, #17
 8006746:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006748:	f44f 7380 	mov.w	r3, #256	; 0x100
 800674c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800674e:	2300      	movs	r3, #0
 8006750:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006752:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006756:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006758:	f107 0308 	add.w	r3, r7, #8
 800675c:	4619      	mov	r1, r3
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f7ff ff50 	bl	8006604 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8006764:	f241 3288 	movw	r2, #5000	; 0x1388
 8006768:	2111      	movs	r1, #17
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 fa8c 	bl	8006c88 <SDMMC_GetCmdResp1>
 8006770:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006772:	69fb      	ldr	r3, [r7, #28]
}
 8006774:	4618      	mov	r0, r3
 8006776:	3720      	adds	r7, #32
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b088      	sub	sp, #32
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800678a:	2312      	movs	r3, #18
 800678c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800678e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006792:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006794:	2300      	movs	r3, #0
 8006796:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006798:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800679c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800679e:	f107 0308 	add.w	r3, r7, #8
 80067a2:	4619      	mov	r1, r3
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f7ff ff2d 	bl	8006604 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80067aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80067ae:	2112      	movs	r1, #18
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 fa69 	bl	8006c88 <SDMMC_GetCmdResp1>
 80067b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80067b8:	69fb      	ldr	r3, [r7, #28]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3720      	adds	r7, #32
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b088      	sub	sp, #32
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
 80067ca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80067d0:	2318      	movs	r3, #24
 80067d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80067d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80067da:	2300      	movs	r3, #0
 80067dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80067de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80067e4:	f107 0308 	add.w	r3, r7, #8
 80067e8:	4619      	mov	r1, r3
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f7ff ff0a 	bl	8006604 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80067f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80067f4:	2118      	movs	r1, #24
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 fa46 	bl	8006c88 <SDMMC_GetCmdResp1>
 80067fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80067fe:	69fb      	ldr	r3, [r7, #28]
}
 8006800:	4618      	mov	r0, r3
 8006802:	3720      	adds	r7, #32
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b088      	sub	sp, #32
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006816:	2319      	movs	r3, #25
 8006818:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800681a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800681e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006820:	2300      	movs	r3, #0
 8006822:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006824:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006828:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800682a:	f107 0308 	add.w	r3, r7, #8
 800682e:	4619      	mov	r1, r3
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f7ff fee7 	bl	8006604 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8006836:	f241 3288 	movw	r2, #5000	; 0x1388
 800683a:	2119      	movs	r1, #25
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 fa23 	bl	8006c88 <SDMMC_GetCmdResp1>
 8006842:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006844:	69fb      	ldr	r3, [r7, #28]
}
 8006846:	4618      	mov	r0, r3
 8006848:	3720      	adds	r7, #32
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
	...

08006850 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b088      	sub	sp, #32
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006858:	2300      	movs	r3, #0
 800685a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800685c:	230c      	movs	r3, #12
 800685e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006860:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006864:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006866:	2300      	movs	r3, #0
 8006868:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800686a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800686e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006888:	f107 0308 	add.w	r3, r7, #8
 800688c:	4619      	mov	r1, r3
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f7ff feb8 	bl	8006604 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8006894:	4a0b      	ldr	r2, [pc, #44]	; (80068c4 <SDMMC_CmdStopTransfer+0x74>)
 8006896:	210c      	movs	r1, #12
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f000 f9f5 	bl	8006c88 <SDMMC_GetCmdResp1>
 800689e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068b2:	d101      	bne.n	80068b8 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80068b4:	2300      	movs	r3, #0
 80068b6:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80068b8:	69fb      	ldr	r3, [r7, #28]
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3720      	adds	r7, #32
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	05f5e100 	.word	0x05f5e100

080068c8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b08a      	sub	sp, #40	; 0x28
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80068d8:	2307      	movs	r3, #7
 80068da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80068dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068e0:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80068e2:	2300      	movs	r3, #0
 80068e4:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80068e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068ea:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80068ec:	f107 0310 	add.w	r3, r7, #16
 80068f0:	4619      	mov	r1, r3
 80068f2:	68f8      	ldr	r0, [r7, #12]
 80068f4:	f7ff fe86 	bl	8006604 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80068f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80068fc:	2107      	movs	r1, #7
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f000 f9c2 	bl	8006c88 <SDMMC_GetCmdResp1>
 8006904:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006908:	4618      	mov	r0, r3
 800690a:	3728      	adds	r7, #40	; 0x28
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b088      	sub	sp, #32
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8006918:	2300      	movs	r3, #0
 800691a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800691c:	2300      	movs	r3, #0
 800691e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8006920:	2300      	movs	r3, #0
 8006922:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006924:	2300      	movs	r3, #0
 8006926:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800692c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800692e:	f107 0308 	add.w	r3, r7, #8
 8006932:	4619      	mov	r1, r3
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f7ff fe65 	bl	8006604 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f976 	bl	8006c2c <SDMMC_GetCmdError>
 8006940:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006942:	69fb      	ldr	r3, [r7, #28]
}
 8006944:	4618      	mov	r0, r3
 8006946:	3720      	adds	r7, #32
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b088      	sub	sp, #32
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006954:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006958:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800695a:	2308      	movs	r3, #8
 800695c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800695e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006962:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006964:	2300      	movs	r3, #0
 8006966:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006968:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800696c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800696e:	f107 0308 	add.w	r3, r7, #8
 8006972:	4619      	mov	r1, r3
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f7ff fe45 	bl	8006604 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 fb78 	bl	8007070 <SDMMC_GetCmdResp7>
 8006980:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006982:	69fb      	ldr	r3, [r7, #28]
}
 8006984:	4618      	mov	r0, r3
 8006986:	3720      	adds	r7, #32
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b088      	sub	sp, #32
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800699a:	2337      	movs	r3, #55	; 0x37
 800699c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800699e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80069a4:	2300      	movs	r3, #0
 80069a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80069a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80069ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80069ae:	f107 0308 	add.w	r3, r7, #8
 80069b2:	4619      	mov	r1, r3
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f7ff fe25 	bl	8006604 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80069ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80069be:	2137      	movs	r1, #55	; 0x37
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 f961 	bl	8006c88 <SDMMC_GetCmdResp1>
 80069c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80069c8:	69fb      	ldr	r3, [r7, #28]
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3720      	adds	r7, #32
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}

080069d2 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b088      	sub	sp, #32
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
 80069da:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80069e0:	2329      	movs	r3, #41	; 0x29
 80069e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80069e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80069ea:	2300      	movs	r3, #0
 80069ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80069ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80069f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80069f4:	f107 0308 	add.w	r3, r7, #8
 80069f8:	4619      	mov	r1, r3
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f7ff fe02 	bl	8006604 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 fa7d 	bl	8006f00 <SDMMC_GetCmdResp3>
 8006a06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a08:	69fb      	ldr	r3, [r7, #28]
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3720      	adds	r7, #32
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}

08006a12 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8006a12:	b580      	push	{r7, lr}
 8006a14:	b088      	sub	sp, #32
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
 8006a1a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006a20:	2306      	movs	r3, #6
 8006a22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006a24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006a2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a32:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006a34:	f107 0308 	add.w	r3, r7, #8
 8006a38:	4619      	mov	r1, r3
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f7ff fde2 	bl	8006604 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8006a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a44:	2106      	movs	r1, #6
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 f91e 	bl	8006c88 <SDMMC_GetCmdResp1>
 8006a4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a4e:	69fb      	ldr	r3, [r7, #28]
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3720      	adds	r7, #32
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b088      	sub	sp, #32
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006a60:	2300      	movs	r3, #0
 8006a62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006a64:	2333      	movs	r3, #51	; 0x33
 8006a66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006a68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006a72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a76:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006a78:	f107 0308 	add.w	r3, r7, #8
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f7ff fdc0 	bl	8006604 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8006a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a88:	2133      	movs	r1, #51	; 0x33
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 f8fc 	bl	8006c88 <SDMMC_GetCmdResp1>
 8006a90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a92:	69fb      	ldr	r3, [r7, #28]
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3720      	adds	r7, #32
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b088      	sub	sp, #32
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8006aac:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006ab0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006ab6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006aba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006abc:	f107 0308 	add.w	r3, r7, #8
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f7ff fd9e 	bl	8006604 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 f9cf 	bl	8006e6c <SDMMC_GetCmdResp2>
 8006ace:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ad0:	69fb      	ldr	r3, [r7, #28]
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3720      	adds	r7, #32
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b088      	sub	sp, #32
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
 8006ae2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006ae8:	2309      	movs	r3, #9
 8006aea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8006aec:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006af0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006af2:	2300      	movs	r3, #0
 8006af4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006af6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006afa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006afc:	f107 0308 	add.w	r3, r7, #8
 8006b00:	4619      	mov	r1, r3
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f7ff fd7e 	bl	8006604 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 f9af 	bl	8006e6c <SDMMC_GetCmdResp2>
 8006b0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b10:	69fb      	ldr	r3, [r7, #28]
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3720      	adds	r7, #32
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b088      	sub	sp, #32
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
 8006b22:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006b24:	2300      	movs	r3, #0
 8006b26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006b28:	2303      	movs	r3, #3
 8006b2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006b2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006b32:	2300      	movs	r3, #0
 8006b34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006b36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b3a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006b3c:	f107 0308 	add.w	r3, r7, #8
 8006b40:	4619      	mov	r1, r3
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f7ff fd5e 	bl	8006604 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006b48:	683a      	ldr	r2, [r7, #0]
 8006b4a:	2103      	movs	r1, #3
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 fa17 	bl	8006f80 <SDMMC_GetCmdResp6>
 8006b52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b54:	69fb      	ldr	r3, [r7, #28]
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3720      	adds	r7, #32
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b088      	sub	sp, #32
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
 8006b66:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006b6c:	230d      	movs	r3, #13
 8006b6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006b70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006b76:	2300      	movs	r3, #0
 8006b78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006b7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b7e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006b80:	f107 0308 	add.w	r3, r7, #8
 8006b84:	4619      	mov	r1, r3
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f7ff fd3c 	bl	8006604 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8006b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b90:	210d      	movs	r1, #13
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 f878 	bl	8006c88 <SDMMC_GetCmdResp1>
 8006b98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b9a:	69fb      	ldr	r3, [r7, #28]
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3720      	adds	r7, #32
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b088      	sub	sp, #32
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8006bac:	2300      	movs	r3, #0
 8006bae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8006bb0:	230d      	movs	r3, #13
 8006bb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006bb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006bb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006bbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006bc2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006bc4:	f107 0308 	add.w	r3, r7, #8
 8006bc8:	4619      	mov	r1, r3
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f7ff fd1a 	bl	8006604 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8006bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bd4:	210d      	movs	r1, #13
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 f856 	bl	8006c88 <SDMMC_GetCmdResp1>
 8006bdc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006bde:	69fb      	ldr	r3, [r7, #28]
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3720      	adds	r7, #32
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b088      	sub	sp, #32
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8006bf4:	230b      	movs	r3, #11
 8006bf6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006bf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006bfc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006c02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c06:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006c08:	f107 0308 	add.w	r3, r7, #8
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f7ff fcf8 	bl	8006604 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8006c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c18:	210b      	movs	r1, #11
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 f834 	bl	8006c88 <SDMMC_GetCmdResp1>
 8006c20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c22:	69fb      	ldr	r3, [r7, #28]
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3720      	adds	r7, #32
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b085      	sub	sp, #20
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006c34:	4b11      	ldr	r3, [pc, #68]	; (8006c7c <SDMMC_GetCmdError+0x50>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a11      	ldr	r2, [pc, #68]	; (8006c80 <SDMMC_GetCmdError+0x54>)
 8006c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c3e:	0a5b      	lsrs	r3, r3, #9
 8006c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c44:	fb02 f303 	mul.w	r3, r2, r3
 8006c48:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	1e5a      	subs	r2, r3, #1
 8006c4e:	60fa      	str	r2, [r7, #12]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d102      	bne.n	8006c5a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006c54:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006c58:	e009      	b.n	8006c6e <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d0f1      	beq.n	8006c4a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4a06      	ldr	r2, [pc, #24]	; (8006c84 <SDMMC_GetCmdError+0x58>)
 8006c6a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3714      	adds	r7, #20
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr
 8006c7a:	bf00      	nop
 8006c7c:	20000000 	.word	0x20000000
 8006c80:	10624dd3 	.word	0x10624dd3
 8006c84:	002000c5 	.word	0x002000c5

08006c88 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b088      	sub	sp, #32
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	460b      	mov	r3, r1
 8006c92:	607a      	str	r2, [r7, #4]
 8006c94:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006c96:	4b70      	ldr	r3, [pc, #448]	; (8006e58 <SDMMC_GetCmdResp1+0x1d0>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a70      	ldr	r2, [pc, #448]	; (8006e5c <SDMMC_GetCmdResp1+0x1d4>)
 8006c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006ca0:	0a5a      	lsrs	r2, r3, #9
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	fb02 f303 	mul.w	r3, r2, r3
 8006ca8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	1e5a      	subs	r2, r3, #1
 8006cae:	61fa      	str	r2, [r7, #28]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d102      	bne.n	8006cba <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006cb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006cb8:	e0c9      	b.n	8006e4e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cbe:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8006cc0:	69ba      	ldr	r2, [r7, #24]
 8006cc2:	4b67      	ldr	r3, [pc, #412]	; (8006e60 <SDMMC_GetCmdResp1+0x1d8>)
 8006cc4:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d0ef      	beq.n	8006caa <SDMMC_GetCmdResp1+0x22>
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d1ea      	bne.n	8006caa <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cd8:	f003 0304 	and.w	r3, r3, #4
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d004      	beq.n	8006cea <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2204      	movs	r2, #4
 8006ce4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006ce6:	2304      	movs	r3, #4
 8006ce8:	e0b1      	b.n	8006e4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cee:	f003 0301 	and.w	r3, r3, #1
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d004      	beq.n	8006d00 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e0a6      	b.n	8006e4e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	4a58      	ldr	r2, [pc, #352]	; (8006e64 <SDMMC_GetCmdResp1+0x1dc>)
 8006d04:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006d06:	68f8      	ldr	r0, [r7, #12]
 8006d08:	f7ff fca6 	bl	8006658 <SDMMC_GetCommandResponse>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	461a      	mov	r2, r3
 8006d10:	7afb      	ldrb	r3, [r7, #11]
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d001      	beq.n	8006d1a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e099      	b.n	8006e4e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006d1a:	2100      	movs	r1, #0
 8006d1c:	68f8      	ldr	r0, [r7, #12]
 8006d1e:	f7ff fca8 	bl	8006672 <SDMMC_GetResponse>
 8006d22:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006d24:	697a      	ldr	r2, [r7, #20]
 8006d26:	4b50      	ldr	r3, [pc, #320]	; (8006e68 <SDMMC_GetCmdResp1+0x1e0>)
 8006d28:	4013      	ands	r3, r2
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d101      	bne.n	8006d32 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	e08d      	b.n	8006e4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	da02      	bge.n	8006d3e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006d38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006d3c:	e087      	b.n	8006e4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d001      	beq.n	8006d4c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006d48:	2340      	movs	r3, #64	; 0x40
 8006d4a:	e080      	b.n	8006e4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d001      	beq.n	8006d5a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006d56:	2380      	movs	r3, #128	; 0x80
 8006d58:	e079      	b.n	8006e4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d002      	beq.n	8006d6a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006d64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d68:	e071      	b.n	8006e4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d002      	beq.n	8006d7a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006d74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d78:	e069      	b.n	8006e4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d002      	beq.n	8006d8a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006d84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d88:	e061      	b.n	8006e4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d002      	beq.n	8006d9a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006d94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006d98:	e059      	b.n	8006e4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d002      	beq.n	8006daa <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006da8:	e051      	b.n	8006e4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d002      	beq.n	8006dba <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006db4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006db8:	e049      	b.n	8006e4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d002      	beq.n	8006dca <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006dc4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006dc8:	e041      	b.n	8006e4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d002      	beq.n	8006dda <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006dd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dd8:	e039      	b.n	8006e4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d002      	beq.n	8006dea <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006de4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006de8:	e031      	b.n	8006e4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d002      	beq.n	8006dfa <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006df4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006df8:	e029      	b.n	8006e4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d002      	beq.n	8006e0a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006e04:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006e08:	e021      	b.n	8006e4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d002      	beq.n	8006e1a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006e14:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006e18:	e019      	b.n	8006e4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d002      	beq.n	8006e2a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006e24:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006e28:	e011      	b.n	8006e4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d002      	beq.n	8006e3a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006e34:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006e38:	e009      	b.n	8006e4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	f003 0308 	and.w	r3, r3, #8
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d002      	beq.n	8006e4a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006e44:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006e48:	e001      	b.n	8006e4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006e4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3720      	adds	r7, #32
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	20000000 	.word	0x20000000
 8006e5c:	10624dd3 	.word	0x10624dd3
 8006e60:	00200045 	.word	0x00200045
 8006e64:	002000c5 	.word	0x002000c5
 8006e68:	fdffe008 	.word	0xfdffe008

08006e6c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b085      	sub	sp, #20
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006e74:	4b1f      	ldr	r3, [pc, #124]	; (8006ef4 <SDMMC_GetCmdResp2+0x88>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a1f      	ldr	r2, [pc, #124]	; (8006ef8 <SDMMC_GetCmdResp2+0x8c>)
 8006e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e7e:	0a5b      	lsrs	r3, r3, #9
 8006e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e84:	fb02 f303 	mul.w	r3, r2, r3
 8006e88:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	1e5a      	subs	r2, r3, #1
 8006e8e:	60fa      	str	r2, [r7, #12]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d102      	bne.n	8006e9a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006e94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006e98:	e026      	b.n	8006ee8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e9e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d0ef      	beq.n	8006e8a <SDMMC_GetCmdResp2+0x1e>
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d1ea      	bne.n	8006e8a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eb8:	f003 0304 	and.w	r3, r3, #4
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d004      	beq.n	8006eca <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2204      	movs	r2, #4
 8006ec4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006ec6:	2304      	movs	r3, #4
 8006ec8:	e00e      	b.n	8006ee8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ece:	f003 0301 	and.w	r3, r3, #1
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d004      	beq.n	8006ee0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006edc:	2301      	movs	r3, #1
 8006ede:	e003      	b.n	8006ee8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	4a06      	ldr	r2, [pc, #24]	; (8006efc <SDMMC_GetCmdResp2+0x90>)
 8006ee4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006ee6:	2300      	movs	r3, #0
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3714      	adds	r7, #20
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr
 8006ef4:	20000000 	.word	0x20000000
 8006ef8:	10624dd3 	.word	0x10624dd3
 8006efc:	002000c5 	.word	0x002000c5

08006f00 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b085      	sub	sp, #20
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006f08:	4b1a      	ldr	r3, [pc, #104]	; (8006f74 <SDMMC_GetCmdResp3+0x74>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a1a      	ldr	r2, [pc, #104]	; (8006f78 <SDMMC_GetCmdResp3+0x78>)
 8006f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f12:	0a5b      	lsrs	r3, r3, #9
 8006f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f18:	fb02 f303 	mul.w	r3, r2, r3
 8006f1c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	1e5a      	subs	r2, r3, #1
 8006f22:	60fa      	str	r2, [r7, #12]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d102      	bne.n	8006f2e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006f28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006f2c:	e01b      	b.n	8006f66 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f32:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d0ef      	beq.n	8006f1e <SDMMC_GetCmdResp3+0x1e>
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1ea      	bne.n	8006f1e <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f4c:	f003 0304 	and.w	r3, r3, #4
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d004      	beq.n	8006f5e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2204      	movs	r2, #4
 8006f58:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006f5a:	2304      	movs	r3, #4
 8006f5c:	e003      	b.n	8006f66 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a06      	ldr	r2, [pc, #24]	; (8006f7c <SDMMC_GetCmdResp3+0x7c>)
 8006f62:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3714      	adds	r7, #20
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr
 8006f72:	bf00      	nop
 8006f74:	20000000 	.word	0x20000000
 8006f78:	10624dd3 	.word	0x10624dd3
 8006f7c:	002000c5 	.word	0x002000c5

08006f80 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b088      	sub	sp, #32
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	460b      	mov	r3, r1
 8006f8a:	607a      	str	r2, [r7, #4]
 8006f8c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006f8e:	4b35      	ldr	r3, [pc, #212]	; (8007064 <SDMMC_GetCmdResp6+0xe4>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a35      	ldr	r2, [pc, #212]	; (8007068 <SDMMC_GetCmdResp6+0xe8>)
 8006f94:	fba2 2303 	umull	r2, r3, r2, r3
 8006f98:	0a5b      	lsrs	r3, r3, #9
 8006f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f9e:	fb02 f303 	mul.w	r3, r2, r3
 8006fa2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	1e5a      	subs	r2, r3, #1
 8006fa8:	61fa      	str	r2, [r7, #28]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d102      	bne.n	8006fb4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006fae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006fb2:	e052      	b.n	800705a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fb8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d0ef      	beq.n	8006fa4 <SDMMC_GetCmdResp6+0x24>
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d1ea      	bne.n	8006fa4 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fd2:	f003 0304 	and.w	r3, r3, #4
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d004      	beq.n	8006fe4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2204      	movs	r2, #4
 8006fde:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006fe0:	2304      	movs	r3, #4
 8006fe2:	e03a      	b.n	800705a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fe8:	f003 0301 	and.w	r3, r3, #1
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d004      	beq.n	8006ffa <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e02f      	b.n	800705a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006ffa:	68f8      	ldr	r0, [r7, #12]
 8006ffc:	f7ff fb2c 	bl	8006658 <SDMMC_GetCommandResponse>
 8007000:	4603      	mov	r3, r0
 8007002:	461a      	mov	r2, r3
 8007004:	7afb      	ldrb	r3, [r7, #11]
 8007006:	4293      	cmp	r3, r2
 8007008:	d001      	beq.n	800700e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800700a:	2301      	movs	r3, #1
 800700c:	e025      	b.n	800705a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	4a16      	ldr	r2, [pc, #88]	; (800706c <SDMMC_GetCmdResp6+0xec>)
 8007012:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007014:	2100      	movs	r1, #0
 8007016:	68f8      	ldr	r0, [r7, #12]
 8007018:	f7ff fb2b 	bl	8006672 <SDMMC_GetResponse>
 800701c:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007024:	2b00      	cmp	r3, #0
 8007026:	d106      	bne.n	8007036 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	0c1b      	lsrs	r3, r3, #16
 800702c:	b29a      	uxth	r2, r3
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8007032:	2300      	movs	r3, #0
 8007034:	e011      	b.n	800705a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800703c:	2b00      	cmp	r3, #0
 800703e:	d002      	beq.n	8007046 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007040:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007044:	e009      	b.n	800705a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800704c:	2b00      	cmp	r3, #0
 800704e:	d002      	beq.n	8007056 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007050:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007054:	e001      	b.n	800705a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007056:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800705a:	4618      	mov	r0, r3
 800705c:	3720      	adds	r7, #32
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	20000000 	.word	0x20000000
 8007068:	10624dd3 	.word	0x10624dd3
 800706c:	002000c5 	.word	0x002000c5

08007070 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8007070:	b480      	push	{r7}
 8007072:	b085      	sub	sp, #20
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007078:	4b22      	ldr	r3, [pc, #136]	; (8007104 <SDMMC_GetCmdResp7+0x94>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a22      	ldr	r2, [pc, #136]	; (8007108 <SDMMC_GetCmdResp7+0x98>)
 800707e:	fba2 2303 	umull	r2, r3, r2, r3
 8007082:	0a5b      	lsrs	r3, r3, #9
 8007084:	f241 3288 	movw	r2, #5000	; 0x1388
 8007088:	fb02 f303 	mul.w	r3, r2, r3
 800708c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	1e5a      	subs	r2, r3, #1
 8007092:	60fa      	str	r2, [r7, #12]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d102      	bne.n	800709e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007098:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800709c:	e02c      	b.n	80070f8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070a2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d0ef      	beq.n	800708e <SDMMC_GetCmdResp7+0x1e>
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d1ea      	bne.n	800708e <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070bc:	f003 0304 	and.w	r3, r3, #4
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d004      	beq.n	80070ce <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2204      	movs	r2, #4
 80070c8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80070ca:	2304      	movs	r3, #4
 80070cc:	e014      	b.n	80070f8 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070d2:	f003 0301 	and.w	r3, r3, #1
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d004      	beq.n	80070e4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2201      	movs	r2, #1
 80070de:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80070e0:	2301      	movs	r3, #1
 80070e2:	e009      	b.n	80070f8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d002      	beq.n	80070f6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2240      	movs	r2, #64	; 0x40
 80070f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80070f6:	2300      	movs	r3, #0

}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3714      	adds	r7, #20
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr
 8007104:	20000000 	.word	0x20000000
 8007108:	10624dd3 	.word	0x10624dd3

0800710c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007110:	4904      	ldr	r1, [pc, #16]	; (8007124 <MX_FATFS_Init+0x18>)
 8007112:	4805      	ldr	r0, [pc, #20]	; (8007128 <MX_FATFS_Init+0x1c>)
 8007114:	f002 fdb4 	bl	8009c80 <FATFS_LinkDriver>
 8007118:	4603      	mov	r3, r0
 800711a:	461a      	mov	r2, r3
 800711c:	4b03      	ldr	r3, [pc, #12]	; (800712c <MX_FATFS_Init+0x20>)
 800711e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007120:	bf00      	nop
 8007122:	bd80      	pop	{r7, pc}
 8007124:	20000668 	.word	0x20000668
 8007128:	0800a7b4 	.word	0x0800a7b4
 800712c:	20000664 	.word	0x20000664

08007130 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007130:	b480      	push	{r7}
 8007132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007134:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007136:	4618      	mov	r0, r3
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b082      	sub	sp, #8
 8007144:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007146:	2300      	movs	r3, #0
 8007148:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800714a:	f000 f86b 	bl	8007224 <BSP_SD_IsDetected>
 800714e:	4603      	mov	r3, r0
 8007150:	2b01      	cmp	r3, #1
 8007152:	d001      	beq.n	8007158 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8007154:	2302      	movs	r3, #2
 8007156:	e005      	b.n	8007164 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8007158:	4804      	ldr	r0, [pc, #16]	; (800716c <BSP_SD_Init+0x2c>)
 800715a:	f7fc fb57 	bl	800380c <HAL_SD_Init>
 800715e:	4603      	mov	r3, r0
 8007160:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8007162:	79fb      	ldrb	r3, [r7, #7]
}
 8007164:	4618      	mov	r0, r3
 8007166:	3708      	adds	r7, #8
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}
 800716c:	200000f0 	.word	0x200000f0

08007170 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b088      	sub	sp, #32
 8007174:	af02      	add	r7, sp, #8
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	607a      	str	r2, [r7, #4]
 800717c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800717e:	2300      	movs	r3, #0
 8007180:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	9300      	str	r3, [sp, #0]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	68ba      	ldr	r2, [r7, #8]
 800718a:	68f9      	ldr	r1, [r7, #12]
 800718c:	4806      	ldr	r0, [pc, #24]	; (80071a8 <BSP_SD_ReadBlocks+0x38>)
 800718e:	f7fc fc61 	bl	8003a54 <HAL_SD_ReadBlocks>
 8007192:	4603      	mov	r3, r0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d001      	beq.n	800719c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800719c:	7dfb      	ldrb	r3, [r7, #23]
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3718      	adds	r7, #24
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	200000f0 	.word	0x200000f0

080071ac <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b088      	sub	sp, #32
 80071b0:	af02      	add	r7, sp, #8
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	607a      	str	r2, [r7, #4]
 80071b8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80071ba:	2300      	movs	r3, #0
 80071bc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	9300      	str	r3, [sp, #0]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	68ba      	ldr	r2, [r7, #8]
 80071c6:	68f9      	ldr	r1, [r7, #12]
 80071c8:	4806      	ldr	r0, [pc, #24]	; (80071e4 <BSP_SD_WriteBlocks+0x38>)
 80071ca:	f7fc fdcd 	bl	8003d68 <HAL_SD_WriteBlocks>
 80071ce:	4603      	mov	r3, r0
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d001      	beq.n	80071d8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80071d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3718      	adds	r7, #24
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	200000f0 	.word	0x200000f0

080071e8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80071ec:	4805      	ldr	r0, [pc, #20]	; (8007204 <BSP_SD_GetCardState+0x1c>)
 80071ee:	f7fd fa85 	bl	80046fc <HAL_SD_GetCardState>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b04      	cmp	r3, #4
 80071f6:	bf14      	ite	ne
 80071f8:	2301      	movne	r3, #1
 80071fa:	2300      	moveq	r3, #0
 80071fc:	b2db      	uxtb	r3, r3
}
 80071fe:	4618      	mov	r0, r3
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	200000f0 	.word	0x200000f0

08007208 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8007210:	6879      	ldr	r1, [r7, #4]
 8007212:	4803      	ldr	r0, [pc, #12]	; (8007220 <BSP_SD_GetCardInfo+0x18>)
 8007214:	f7fd f99c 	bl	8004550 <HAL_SD_GetCardInfo>
}
 8007218:	bf00      	nop
 800721a:	3708      	adds	r7, #8
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}
 8007220:	200000f0 	.word	0x200000f0

08007224 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800722a:	2301      	movs	r3, #1
 800722c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 800722e:	79fb      	ldrb	r3, [r7, #7]
 8007230:	b2db      	uxtb	r3, r3
}
 8007232:	4618      	mov	r0, r3
 8007234:	370c      	adds	r7, #12
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
	...

08007240 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	4603      	mov	r3, r0
 8007248:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800724a:	4b0b      	ldr	r3, [pc, #44]	; (8007278 <SD_CheckStatus+0x38>)
 800724c:	2201      	movs	r2, #1
 800724e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8007250:	f7ff ffca 	bl	80071e8 <BSP_SD_GetCardState>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d107      	bne.n	800726a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800725a:	4b07      	ldr	r3, [pc, #28]	; (8007278 <SD_CheckStatus+0x38>)
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	b2db      	uxtb	r3, r3
 8007260:	f023 0301 	bic.w	r3, r3, #1
 8007264:	b2da      	uxtb	r2, r3
 8007266:	4b04      	ldr	r3, [pc, #16]	; (8007278 <SD_CheckStatus+0x38>)
 8007268:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800726a:	4b03      	ldr	r3, [pc, #12]	; (8007278 <SD_CheckStatus+0x38>)
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	b2db      	uxtb	r3, r3
}
 8007270:	4618      	mov	r0, r3
 8007272:	3708      	adds	r7, #8
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	20000029 	.word	0x20000029

0800727c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	4603      	mov	r3, r0
 8007284:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8007286:	4b0b      	ldr	r3, [pc, #44]	; (80072b4 <SD_initialize+0x38>)
 8007288:	2201      	movs	r2, #1
 800728a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800728c:	f7ff ff58 	bl	8007140 <BSP_SD_Init>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d107      	bne.n	80072a6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8007296:	79fb      	ldrb	r3, [r7, #7]
 8007298:	4618      	mov	r0, r3
 800729a:	f7ff ffd1 	bl	8007240 <SD_CheckStatus>
 800729e:	4603      	mov	r3, r0
 80072a0:	461a      	mov	r2, r3
 80072a2:	4b04      	ldr	r3, [pc, #16]	; (80072b4 <SD_initialize+0x38>)
 80072a4:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80072a6:	4b03      	ldr	r3, [pc, #12]	; (80072b4 <SD_initialize+0x38>)
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	b2db      	uxtb	r3, r3
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3708      	adds	r7, #8
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	20000029 	.word	0x20000029

080072b8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	4603      	mov	r3, r0
 80072c0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80072c2:	79fb      	ldrb	r3, [r7, #7]
 80072c4:	4618      	mov	r0, r3
 80072c6:	f7ff ffbb 	bl	8007240 <SD_CheckStatus>
 80072ca:	4603      	mov	r3, r0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3708      	adds	r7, #8
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b086      	sub	sp, #24
 80072d8:	af00      	add	r7, sp, #0
 80072da:	60b9      	str	r1, [r7, #8]
 80072dc:	607a      	str	r2, [r7, #4]
 80072de:	603b      	str	r3, [r7, #0]
 80072e0:	4603      	mov	r3, r0
 80072e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80072e8:	f04f 33ff 	mov.w	r3, #4294967295
 80072ec:	683a      	ldr	r2, [r7, #0]
 80072ee:	6879      	ldr	r1, [r7, #4]
 80072f0:	68b8      	ldr	r0, [r7, #8]
 80072f2:	f7ff ff3d 	bl	8007170 <BSP_SD_ReadBlocks>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d107      	bne.n	800730c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80072fc:	bf00      	nop
 80072fe:	f7ff ff73 	bl	80071e8 <BSP_SD_GetCardState>
 8007302:	4603      	mov	r3, r0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d1fa      	bne.n	80072fe <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8007308:	2300      	movs	r3, #0
 800730a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800730c:	7dfb      	ldrb	r3, [r7, #23]
}
 800730e:	4618      	mov	r0, r3
 8007310:	3718      	adds	r7, #24
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b086      	sub	sp, #24
 800731a:	af00      	add	r7, sp, #0
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	607a      	str	r2, [r7, #4]
 8007320:	603b      	str	r3, [r7, #0]
 8007322:	4603      	mov	r3, r0
 8007324:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800732a:	f04f 33ff 	mov.w	r3, #4294967295
 800732e:	683a      	ldr	r2, [r7, #0]
 8007330:	6879      	ldr	r1, [r7, #4]
 8007332:	68b8      	ldr	r0, [r7, #8]
 8007334:	f7ff ff3a 	bl	80071ac <BSP_SD_WriteBlocks>
 8007338:	4603      	mov	r3, r0
 800733a:	2b00      	cmp	r3, #0
 800733c:	d107      	bne.n	800734e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800733e:	bf00      	nop
 8007340:	f7ff ff52 	bl	80071e8 <BSP_SD_GetCardState>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d1fa      	bne.n	8007340 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800734a:	2300      	movs	r3, #0
 800734c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800734e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007350:	4618      	mov	r0, r3
 8007352:	3718      	adds	r7, #24
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b08c      	sub	sp, #48	; 0x30
 800735c:	af00      	add	r7, sp, #0
 800735e:	4603      	mov	r3, r0
 8007360:	603a      	str	r2, [r7, #0]
 8007362:	71fb      	strb	r3, [r7, #7]
 8007364:	460b      	mov	r3, r1
 8007366:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800736e:	4b25      	ldr	r3, [pc, #148]	; (8007404 <SD_ioctl+0xac>)
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	b2db      	uxtb	r3, r3
 8007374:	f003 0301 	and.w	r3, r3, #1
 8007378:	2b00      	cmp	r3, #0
 800737a:	d001      	beq.n	8007380 <SD_ioctl+0x28>
 800737c:	2303      	movs	r3, #3
 800737e:	e03c      	b.n	80073fa <SD_ioctl+0xa2>

  switch (cmd)
 8007380:	79bb      	ldrb	r3, [r7, #6]
 8007382:	2b03      	cmp	r3, #3
 8007384:	d834      	bhi.n	80073f0 <SD_ioctl+0x98>
 8007386:	a201      	add	r2, pc, #4	; (adr r2, 800738c <SD_ioctl+0x34>)
 8007388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800738c:	0800739d 	.word	0x0800739d
 8007390:	080073a5 	.word	0x080073a5
 8007394:	080073bd 	.word	0x080073bd
 8007398:	080073d7 	.word	0x080073d7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800739c:	2300      	movs	r3, #0
 800739e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80073a2:	e028      	b.n	80073f6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80073a4:	f107 0308 	add.w	r3, r7, #8
 80073a8:	4618      	mov	r0, r3
 80073aa:	f7ff ff2d 	bl	8007208 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80073ae:	6a3a      	ldr	r2, [r7, #32]
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80073b4:	2300      	movs	r3, #0
 80073b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80073ba:	e01c      	b.n	80073f6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80073bc:	f107 0308 	add.w	r3, r7, #8
 80073c0:	4618      	mov	r0, r3
 80073c2:	f7ff ff21 	bl	8007208 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80073c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c8:	b29a      	uxth	r2, r3
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80073ce:	2300      	movs	r3, #0
 80073d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80073d4:	e00f      	b.n	80073f6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80073d6:	f107 0308 	add.w	r3, r7, #8
 80073da:	4618      	mov	r0, r3
 80073dc:	f7ff ff14 	bl	8007208 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80073e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e2:	0a5a      	lsrs	r2, r3, #9
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80073e8:	2300      	movs	r3, #0
 80073ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80073ee:	e002      	b.n	80073f6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80073f0:	2304      	movs	r3, #4
 80073f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80073f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3730      	adds	r7, #48	; 0x30
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	20000029 	.word	0x20000029

08007408 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	4603      	mov	r3, r0
 8007410:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007412:	79fb      	ldrb	r3, [r7, #7]
 8007414:	4a08      	ldr	r2, [pc, #32]	; (8007438 <disk_status+0x30>)
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	4413      	add	r3, r2
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	79fa      	ldrb	r2, [r7, #7]
 8007420:	4905      	ldr	r1, [pc, #20]	; (8007438 <disk_status+0x30>)
 8007422:	440a      	add	r2, r1
 8007424:	7a12      	ldrb	r2, [r2, #8]
 8007426:	4610      	mov	r0, r2
 8007428:	4798      	blx	r3
 800742a:	4603      	mov	r3, r0
 800742c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800742e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007430:	4618      	mov	r0, r3
 8007432:	3710      	adds	r7, #16
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}
 8007438:	200000dc 	.word	0x200000dc

0800743c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	4603      	mov	r3, r0
 8007444:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007446:	2300      	movs	r3, #0
 8007448:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800744a:	79fb      	ldrb	r3, [r7, #7]
 800744c:	4a0d      	ldr	r2, [pc, #52]	; (8007484 <disk_initialize+0x48>)
 800744e:	5cd3      	ldrb	r3, [r2, r3]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d111      	bne.n	8007478 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007454:	79fb      	ldrb	r3, [r7, #7]
 8007456:	4a0b      	ldr	r2, [pc, #44]	; (8007484 <disk_initialize+0x48>)
 8007458:	2101      	movs	r1, #1
 800745a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800745c:	79fb      	ldrb	r3, [r7, #7]
 800745e:	4a09      	ldr	r2, [pc, #36]	; (8007484 <disk_initialize+0x48>)
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	4413      	add	r3, r2
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	79fa      	ldrb	r2, [r7, #7]
 800746a:	4906      	ldr	r1, [pc, #24]	; (8007484 <disk_initialize+0x48>)
 800746c:	440a      	add	r2, r1
 800746e:	7a12      	ldrb	r2, [r2, #8]
 8007470:	4610      	mov	r0, r2
 8007472:	4798      	blx	r3
 8007474:	4603      	mov	r3, r0
 8007476:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007478:	7bfb      	ldrb	r3, [r7, #15]
}
 800747a:	4618      	mov	r0, r3
 800747c:	3710      	adds	r7, #16
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
 8007482:	bf00      	nop
 8007484:	200000dc 	.word	0x200000dc

08007488 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007488:	b590      	push	{r4, r7, lr}
 800748a:	b087      	sub	sp, #28
 800748c:	af00      	add	r7, sp, #0
 800748e:	60b9      	str	r1, [r7, #8]
 8007490:	607a      	str	r2, [r7, #4]
 8007492:	603b      	str	r3, [r7, #0]
 8007494:	4603      	mov	r3, r0
 8007496:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007498:	7bfb      	ldrb	r3, [r7, #15]
 800749a:	4a0a      	ldr	r2, [pc, #40]	; (80074c4 <disk_read+0x3c>)
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	4413      	add	r3, r2
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	689c      	ldr	r4, [r3, #8]
 80074a4:	7bfb      	ldrb	r3, [r7, #15]
 80074a6:	4a07      	ldr	r2, [pc, #28]	; (80074c4 <disk_read+0x3c>)
 80074a8:	4413      	add	r3, r2
 80074aa:	7a18      	ldrb	r0, [r3, #8]
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	68b9      	ldr	r1, [r7, #8]
 80074b2:	47a0      	blx	r4
 80074b4:	4603      	mov	r3, r0
 80074b6:	75fb      	strb	r3, [r7, #23]
  return res;
 80074b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	371c      	adds	r7, #28
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd90      	pop	{r4, r7, pc}
 80074c2:	bf00      	nop
 80074c4:	200000dc 	.word	0x200000dc

080074c8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80074c8:	b590      	push	{r4, r7, lr}
 80074ca:	b087      	sub	sp, #28
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60b9      	str	r1, [r7, #8]
 80074d0:	607a      	str	r2, [r7, #4]
 80074d2:	603b      	str	r3, [r7, #0]
 80074d4:	4603      	mov	r3, r0
 80074d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80074d8:	7bfb      	ldrb	r3, [r7, #15]
 80074da:	4a0a      	ldr	r2, [pc, #40]	; (8007504 <disk_write+0x3c>)
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	4413      	add	r3, r2
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	68dc      	ldr	r4, [r3, #12]
 80074e4:	7bfb      	ldrb	r3, [r7, #15]
 80074e6:	4a07      	ldr	r2, [pc, #28]	; (8007504 <disk_write+0x3c>)
 80074e8:	4413      	add	r3, r2
 80074ea:	7a18      	ldrb	r0, [r3, #8]
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	68b9      	ldr	r1, [r7, #8]
 80074f2:	47a0      	blx	r4
 80074f4:	4603      	mov	r3, r0
 80074f6:	75fb      	strb	r3, [r7, #23]
  return res;
 80074f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	371c      	adds	r7, #28
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd90      	pop	{r4, r7, pc}
 8007502:	bf00      	nop
 8007504:	200000dc 	.word	0x200000dc

08007508 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af00      	add	r7, sp, #0
 800750e:	4603      	mov	r3, r0
 8007510:	603a      	str	r2, [r7, #0]
 8007512:	71fb      	strb	r3, [r7, #7]
 8007514:	460b      	mov	r3, r1
 8007516:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007518:	79fb      	ldrb	r3, [r7, #7]
 800751a:	4a09      	ldr	r2, [pc, #36]	; (8007540 <disk_ioctl+0x38>)
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	4413      	add	r3, r2
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	691b      	ldr	r3, [r3, #16]
 8007524:	79fa      	ldrb	r2, [r7, #7]
 8007526:	4906      	ldr	r1, [pc, #24]	; (8007540 <disk_ioctl+0x38>)
 8007528:	440a      	add	r2, r1
 800752a:	7a10      	ldrb	r0, [r2, #8]
 800752c:	79b9      	ldrb	r1, [r7, #6]
 800752e:	683a      	ldr	r2, [r7, #0]
 8007530:	4798      	blx	r3
 8007532:	4603      	mov	r3, r0
 8007534:	73fb      	strb	r3, [r7, #15]
  return res;
 8007536:	7bfb      	ldrb	r3, [r7, #15]
}
 8007538:	4618      	mov	r0, r3
 800753a:	3710      	adds	r7, #16
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}
 8007540:	200000dc 	.word	0x200000dc

08007544 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007544:	b480      	push	{r7}
 8007546:	b085      	sub	sp, #20
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	3301      	adds	r3, #1
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007554:	89fb      	ldrh	r3, [r7, #14]
 8007556:	021b      	lsls	r3, r3, #8
 8007558:	b21a      	sxth	r2, r3
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	b21b      	sxth	r3, r3
 8007560:	4313      	orrs	r3, r2
 8007562:	b21b      	sxth	r3, r3
 8007564:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007566:	89fb      	ldrh	r3, [r7, #14]
}
 8007568:	4618      	mov	r0, r3
 800756a:	3714      	adds	r7, #20
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007574:	b480      	push	{r7}
 8007576:	b085      	sub	sp, #20
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	3303      	adds	r3, #3
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	021b      	lsls	r3, r3, #8
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	3202      	adds	r2, #2
 800758c:	7812      	ldrb	r2, [r2, #0]
 800758e:	4313      	orrs	r3, r2
 8007590:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	021b      	lsls	r3, r3, #8
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	3201      	adds	r2, #1
 800759a:	7812      	ldrb	r2, [r2, #0]
 800759c:	4313      	orrs	r3, r2
 800759e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	021b      	lsls	r3, r3, #8
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	7812      	ldrb	r2, [r2, #0]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	60fb      	str	r3, [r7, #12]
	return rv;
 80075ac:	68fb      	ldr	r3, [r7, #12]
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3714      	adds	r7, #20
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr

080075ba <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80075ba:	b480      	push	{r7}
 80075bc:	b083      	sub	sp, #12
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
 80075c2:	460b      	mov	r3, r1
 80075c4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	1c5a      	adds	r2, r3, #1
 80075ca:	607a      	str	r2, [r7, #4]
 80075cc:	887a      	ldrh	r2, [r7, #2]
 80075ce:	b2d2      	uxtb	r2, r2
 80075d0:	701a      	strb	r2, [r3, #0]
 80075d2:	887b      	ldrh	r3, [r7, #2]
 80075d4:	0a1b      	lsrs	r3, r3, #8
 80075d6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	1c5a      	adds	r2, r3, #1
 80075dc:	607a      	str	r2, [r7, #4]
 80075de:	887a      	ldrh	r2, [r7, #2]
 80075e0:	b2d2      	uxtb	r2, r2
 80075e2:	701a      	strb	r2, [r3, #0]
}
 80075e4:	bf00      	nop
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	1c5a      	adds	r2, r3, #1
 80075fe:	607a      	str	r2, [r7, #4]
 8007600:	683a      	ldr	r2, [r7, #0]
 8007602:	b2d2      	uxtb	r2, r2
 8007604:	701a      	strb	r2, [r3, #0]
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	0a1b      	lsrs	r3, r3, #8
 800760a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	1c5a      	adds	r2, r3, #1
 8007610:	607a      	str	r2, [r7, #4]
 8007612:	683a      	ldr	r2, [r7, #0]
 8007614:	b2d2      	uxtb	r2, r2
 8007616:	701a      	strb	r2, [r3, #0]
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	0a1b      	lsrs	r3, r3, #8
 800761c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	1c5a      	adds	r2, r3, #1
 8007622:	607a      	str	r2, [r7, #4]
 8007624:	683a      	ldr	r2, [r7, #0]
 8007626:	b2d2      	uxtb	r2, r2
 8007628:	701a      	strb	r2, [r3, #0]
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	0a1b      	lsrs	r3, r3, #8
 800762e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	1c5a      	adds	r2, r3, #1
 8007634:	607a      	str	r2, [r7, #4]
 8007636:	683a      	ldr	r2, [r7, #0]
 8007638:	b2d2      	uxtb	r2, r2
 800763a:	701a      	strb	r2, [r3, #0]
}
 800763c:	bf00      	nop
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007648:	b480      	push	{r7}
 800764a:	b087      	sub	sp, #28
 800764c:	af00      	add	r7, sp, #0
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00d      	beq.n	800767e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007662:	693a      	ldr	r2, [r7, #16]
 8007664:	1c53      	adds	r3, r2, #1
 8007666:	613b      	str	r3, [r7, #16]
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	1c59      	adds	r1, r3, #1
 800766c:	6179      	str	r1, [r7, #20]
 800766e:	7812      	ldrb	r2, [r2, #0]
 8007670:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	3b01      	subs	r3, #1
 8007676:	607b      	str	r3, [r7, #4]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d1f1      	bne.n	8007662 <mem_cpy+0x1a>
	}
}
 800767e:	bf00      	nop
 8007680:	371c      	adds	r7, #28
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr

0800768a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800768a:	b480      	push	{r7}
 800768c:	b087      	sub	sp, #28
 800768e:	af00      	add	r7, sp, #0
 8007690:	60f8      	str	r0, [r7, #12]
 8007692:	60b9      	str	r1, [r7, #8]
 8007694:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	1c5a      	adds	r2, r3, #1
 800769e:	617a      	str	r2, [r7, #20]
 80076a0:	68ba      	ldr	r2, [r7, #8]
 80076a2:	b2d2      	uxtb	r2, r2
 80076a4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	3b01      	subs	r3, #1
 80076aa:	607b      	str	r3, [r7, #4]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d1f3      	bne.n	800769a <mem_set+0x10>
}
 80076b2:	bf00      	nop
 80076b4:	bf00      	nop
 80076b6:	371c      	adds	r7, #28
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80076c0:	b480      	push	{r7}
 80076c2:	b089      	sub	sp, #36	; 0x24
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	61fb      	str	r3, [r7, #28]
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80076d4:	2300      	movs	r3, #0
 80076d6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	1c5a      	adds	r2, r3, #1
 80076dc:	61fa      	str	r2, [r7, #28]
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	4619      	mov	r1, r3
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	1c5a      	adds	r2, r3, #1
 80076e6:	61ba      	str	r2, [r7, #24]
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	1acb      	subs	r3, r1, r3
 80076ec:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	3b01      	subs	r3, #1
 80076f2:	607b      	str	r3, [r7, #4]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d002      	beq.n	8007700 <mem_cmp+0x40>
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d0eb      	beq.n	80076d8 <mem_cmp+0x18>

	return r;
 8007700:	697b      	ldr	r3, [r7, #20]
}
 8007702:	4618      	mov	r0, r3
 8007704:	3724      	adds	r7, #36	; 0x24
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr

0800770e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800770e:	b480      	push	{r7}
 8007710:	b083      	sub	sp, #12
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
 8007716:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007718:	e002      	b.n	8007720 <chk_chr+0x12>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	3301      	adds	r3, #1
 800771e:	607b      	str	r3, [r7, #4]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d005      	beq.n	8007734 <chk_chr+0x26>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	461a      	mov	r2, r3
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	4293      	cmp	r3, r2
 8007732:	d1f2      	bne.n	800771a <chk_chr+0xc>
	return *str;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	781b      	ldrb	r3, [r3, #0]
}
 8007738:	4618      	mov	r0, r3
 800773a:	370c      	adds	r7, #12
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007744:	b480      	push	{r7}
 8007746:	b085      	sub	sp, #20
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800774e:	2300      	movs	r3, #0
 8007750:	60bb      	str	r3, [r7, #8]
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	60fb      	str	r3, [r7, #12]
 8007756:	e029      	b.n	80077ac <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007758:	4a27      	ldr	r2, [pc, #156]	; (80077f8 <chk_lock+0xb4>)
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	011b      	lsls	r3, r3, #4
 800775e:	4413      	add	r3, r2
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d01d      	beq.n	80077a2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007766:	4a24      	ldr	r2, [pc, #144]	; (80077f8 <chk_lock+0xb4>)
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	011b      	lsls	r3, r3, #4
 800776c:	4413      	add	r3, r2
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	429a      	cmp	r2, r3
 8007776:	d116      	bne.n	80077a6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007778:	4a1f      	ldr	r2, [pc, #124]	; (80077f8 <chk_lock+0xb4>)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	011b      	lsls	r3, r3, #4
 800777e:	4413      	add	r3, r2
 8007780:	3304      	adds	r3, #4
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007788:	429a      	cmp	r2, r3
 800778a:	d10c      	bne.n	80077a6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800778c:	4a1a      	ldr	r2, [pc, #104]	; (80077f8 <chk_lock+0xb4>)
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	011b      	lsls	r3, r3, #4
 8007792:	4413      	add	r3, r2
 8007794:	3308      	adds	r3, #8
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800779c:	429a      	cmp	r2, r3
 800779e:	d102      	bne.n	80077a6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80077a0:	e007      	b.n	80077b2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80077a2:	2301      	movs	r3, #1
 80077a4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	3301      	adds	r3, #1
 80077aa:	60fb      	str	r3, [r7, #12]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d9d2      	bls.n	8007758 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	d109      	bne.n	80077cc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d102      	bne.n	80077c4 <chk_lock+0x80>
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	d101      	bne.n	80077c8 <chk_lock+0x84>
 80077c4:	2300      	movs	r3, #0
 80077c6:	e010      	b.n	80077ea <chk_lock+0xa6>
 80077c8:	2312      	movs	r3, #18
 80077ca:	e00e      	b.n	80077ea <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d108      	bne.n	80077e4 <chk_lock+0xa0>
 80077d2:	4a09      	ldr	r2, [pc, #36]	; (80077f8 <chk_lock+0xb4>)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	011b      	lsls	r3, r3, #4
 80077d8:	4413      	add	r3, r2
 80077da:	330c      	adds	r3, #12
 80077dc:	881b      	ldrh	r3, [r3, #0]
 80077de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077e2:	d101      	bne.n	80077e8 <chk_lock+0xa4>
 80077e4:	2310      	movs	r3, #16
 80077e6:	e000      	b.n	80077ea <chk_lock+0xa6>
 80077e8:	2300      	movs	r3, #0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3714      	adds	r7, #20
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr
 80077f6:	bf00      	nop
 80077f8:	200000bc 	.word	0x200000bc

080077fc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80077fc:	b480      	push	{r7}
 80077fe:	b083      	sub	sp, #12
 8007800:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007802:	2300      	movs	r3, #0
 8007804:	607b      	str	r3, [r7, #4]
 8007806:	e002      	b.n	800780e <enq_lock+0x12>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	3301      	adds	r3, #1
 800780c:	607b      	str	r3, [r7, #4]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2b01      	cmp	r3, #1
 8007812:	d806      	bhi.n	8007822 <enq_lock+0x26>
 8007814:	4a09      	ldr	r2, [pc, #36]	; (800783c <enq_lock+0x40>)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	011b      	lsls	r3, r3, #4
 800781a:	4413      	add	r3, r2
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d1f2      	bne.n	8007808 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2b02      	cmp	r3, #2
 8007826:	bf14      	ite	ne
 8007828:	2301      	movne	r3, #1
 800782a:	2300      	moveq	r3, #0
 800782c:	b2db      	uxtb	r3, r3
}
 800782e:	4618      	mov	r0, r3
 8007830:	370c      	adds	r7, #12
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr
 800783a:	bf00      	nop
 800783c:	200000bc 	.word	0x200000bc

08007840 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007840:	b480      	push	{r7}
 8007842:	b085      	sub	sp, #20
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800784a:	2300      	movs	r3, #0
 800784c:	60fb      	str	r3, [r7, #12]
 800784e:	e01f      	b.n	8007890 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007850:	4a41      	ldr	r2, [pc, #260]	; (8007958 <inc_lock+0x118>)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	011b      	lsls	r3, r3, #4
 8007856:	4413      	add	r3, r2
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	429a      	cmp	r2, r3
 8007860:	d113      	bne.n	800788a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007862:	4a3d      	ldr	r2, [pc, #244]	; (8007958 <inc_lock+0x118>)
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	011b      	lsls	r3, r3, #4
 8007868:	4413      	add	r3, r2
 800786a:	3304      	adds	r3, #4
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007872:	429a      	cmp	r2, r3
 8007874:	d109      	bne.n	800788a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007876:	4a38      	ldr	r2, [pc, #224]	; (8007958 <inc_lock+0x118>)
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	011b      	lsls	r3, r3, #4
 800787c:	4413      	add	r3, r2
 800787e:	3308      	adds	r3, #8
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007886:	429a      	cmp	r2, r3
 8007888:	d006      	beq.n	8007898 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	3301      	adds	r3, #1
 800788e:	60fb      	str	r3, [r7, #12]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2b01      	cmp	r3, #1
 8007894:	d9dc      	bls.n	8007850 <inc_lock+0x10>
 8007896:	e000      	b.n	800789a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007898:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2b02      	cmp	r3, #2
 800789e:	d132      	bne.n	8007906 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80078a0:	2300      	movs	r3, #0
 80078a2:	60fb      	str	r3, [r7, #12]
 80078a4:	e002      	b.n	80078ac <inc_lock+0x6c>
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	3301      	adds	r3, #1
 80078aa:	60fb      	str	r3, [r7, #12]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d806      	bhi.n	80078c0 <inc_lock+0x80>
 80078b2:	4a29      	ldr	r2, [pc, #164]	; (8007958 <inc_lock+0x118>)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	011b      	lsls	r3, r3, #4
 80078b8:	4413      	add	r3, r2
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d1f2      	bne.n	80078a6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2b02      	cmp	r3, #2
 80078c4:	d101      	bne.n	80078ca <inc_lock+0x8a>
 80078c6:	2300      	movs	r3, #0
 80078c8:	e040      	b.n	800794c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	4922      	ldr	r1, [pc, #136]	; (8007958 <inc_lock+0x118>)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	011b      	lsls	r3, r3, #4
 80078d4:	440b      	add	r3, r1
 80078d6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	689a      	ldr	r2, [r3, #8]
 80078dc:	491e      	ldr	r1, [pc, #120]	; (8007958 <inc_lock+0x118>)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	011b      	lsls	r3, r3, #4
 80078e2:	440b      	add	r3, r1
 80078e4:	3304      	adds	r3, #4
 80078e6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	695a      	ldr	r2, [r3, #20]
 80078ec:	491a      	ldr	r1, [pc, #104]	; (8007958 <inc_lock+0x118>)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	011b      	lsls	r3, r3, #4
 80078f2:	440b      	add	r3, r1
 80078f4:	3308      	adds	r3, #8
 80078f6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80078f8:	4a17      	ldr	r2, [pc, #92]	; (8007958 <inc_lock+0x118>)
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	011b      	lsls	r3, r3, #4
 80078fe:	4413      	add	r3, r2
 8007900:	330c      	adds	r3, #12
 8007902:	2200      	movs	r2, #0
 8007904:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d009      	beq.n	8007920 <inc_lock+0xe0>
 800790c:	4a12      	ldr	r2, [pc, #72]	; (8007958 <inc_lock+0x118>)
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	011b      	lsls	r3, r3, #4
 8007912:	4413      	add	r3, r2
 8007914:	330c      	adds	r3, #12
 8007916:	881b      	ldrh	r3, [r3, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d001      	beq.n	8007920 <inc_lock+0xe0>
 800791c:	2300      	movs	r3, #0
 800791e:	e015      	b.n	800794c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d108      	bne.n	8007938 <inc_lock+0xf8>
 8007926:	4a0c      	ldr	r2, [pc, #48]	; (8007958 <inc_lock+0x118>)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	011b      	lsls	r3, r3, #4
 800792c:	4413      	add	r3, r2
 800792e:	330c      	adds	r3, #12
 8007930:	881b      	ldrh	r3, [r3, #0]
 8007932:	3301      	adds	r3, #1
 8007934:	b29a      	uxth	r2, r3
 8007936:	e001      	b.n	800793c <inc_lock+0xfc>
 8007938:	f44f 7280 	mov.w	r2, #256	; 0x100
 800793c:	4906      	ldr	r1, [pc, #24]	; (8007958 <inc_lock+0x118>)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	011b      	lsls	r3, r3, #4
 8007942:	440b      	add	r3, r1
 8007944:	330c      	adds	r3, #12
 8007946:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	3301      	adds	r3, #1
}
 800794c:	4618      	mov	r0, r3
 800794e:	3714      	adds	r7, #20
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr
 8007958:	200000bc 	.word	0x200000bc

0800795c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800795c:	b480      	push	{r7}
 800795e:	b085      	sub	sp, #20
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	3b01      	subs	r3, #1
 8007968:	607b      	str	r3, [r7, #4]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2b01      	cmp	r3, #1
 800796e:	d825      	bhi.n	80079bc <dec_lock+0x60>
		n = Files[i].ctr;
 8007970:	4a17      	ldr	r2, [pc, #92]	; (80079d0 <dec_lock+0x74>)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	011b      	lsls	r3, r3, #4
 8007976:	4413      	add	r3, r2
 8007978:	330c      	adds	r3, #12
 800797a:	881b      	ldrh	r3, [r3, #0]
 800797c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800797e:	89fb      	ldrh	r3, [r7, #14]
 8007980:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007984:	d101      	bne.n	800798a <dec_lock+0x2e>
 8007986:	2300      	movs	r3, #0
 8007988:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800798a:	89fb      	ldrh	r3, [r7, #14]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d002      	beq.n	8007996 <dec_lock+0x3a>
 8007990:	89fb      	ldrh	r3, [r7, #14]
 8007992:	3b01      	subs	r3, #1
 8007994:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007996:	4a0e      	ldr	r2, [pc, #56]	; (80079d0 <dec_lock+0x74>)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	011b      	lsls	r3, r3, #4
 800799c:	4413      	add	r3, r2
 800799e:	330c      	adds	r3, #12
 80079a0:	89fa      	ldrh	r2, [r7, #14]
 80079a2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80079a4:	89fb      	ldrh	r3, [r7, #14]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d105      	bne.n	80079b6 <dec_lock+0x5a>
 80079aa:	4a09      	ldr	r2, [pc, #36]	; (80079d0 <dec_lock+0x74>)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	011b      	lsls	r3, r3, #4
 80079b0:	4413      	add	r3, r2
 80079b2:	2200      	movs	r2, #0
 80079b4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80079b6:	2300      	movs	r3, #0
 80079b8:	737b      	strb	r3, [r7, #13]
 80079ba:	e001      	b.n	80079c0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80079bc:	2302      	movs	r3, #2
 80079be:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80079c0:	7b7b      	ldrb	r3, [r7, #13]
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3714      	adds	r7, #20
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr
 80079ce:	bf00      	nop
 80079d0:	200000bc 	.word	0x200000bc

080079d4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80079dc:	2300      	movs	r3, #0
 80079de:	60fb      	str	r3, [r7, #12]
 80079e0:	e010      	b.n	8007a04 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80079e2:	4a0d      	ldr	r2, [pc, #52]	; (8007a18 <clear_lock+0x44>)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	011b      	lsls	r3, r3, #4
 80079e8:	4413      	add	r3, r2
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d105      	bne.n	80079fe <clear_lock+0x2a>
 80079f2:	4a09      	ldr	r2, [pc, #36]	; (8007a18 <clear_lock+0x44>)
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	011b      	lsls	r3, r3, #4
 80079f8:	4413      	add	r3, r2
 80079fa:	2200      	movs	r2, #0
 80079fc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	3301      	adds	r3, #1
 8007a02:	60fb      	str	r3, [r7, #12]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d9eb      	bls.n	80079e2 <clear_lock+0xe>
	}
}
 8007a0a:	bf00      	nop
 8007a0c:	bf00      	nop
 8007a0e:	3714      	adds	r7, #20
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr
 8007a18:	200000bc 	.word	0x200000bc

08007a1c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b086      	sub	sp, #24
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007a24:	2300      	movs	r3, #0
 8007a26:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	78db      	ldrb	r3, [r3, #3]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d034      	beq.n	8007a9a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a34:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	7858      	ldrb	r0, [r3, #1]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007a40:	2301      	movs	r3, #1
 8007a42:	697a      	ldr	r2, [r7, #20]
 8007a44:	f7ff fd40 	bl	80074c8 <disk_write>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d002      	beq.n	8007a54 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	73fb      	strb	r3, [r7, #15]
 8007a52:	e022      	b.n	8007a9a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6a1b      	ldr	r3, [r3, #32]
 8007a5e:	697a      	ldr	r2, [r7, #20]
 8007a60:	1ad2      	subs	r2, r2, r3
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	699b      	ldr	r3, [r3, #24]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d217      	bcs.n	8007a9a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	789b      	ldrb	r3, [r3, #2]
 8007a6e:	613b      	str	r3, [r7, #16]
 8007a70:	e010      	b.n	8007a94 <sync_window+0x78>
					wsect += fs->fsize;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	699b      	ldr	r3, [r3, #24]
 8007a76:	697a      	ldr	r2, [r7, #20]
 8007a78:	4413      	add	r3, r2
 8007a7a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	7858      	ldrb	r0, [r3, #1]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007a86:	2301      	movs	r3, #1
 8007a88:	697a      	ldr	r2, [r7, #20]
 8007a8a:	f7ff fd1d 	bl	80074c8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	3b01      	subs	r3, #1
 8007a92:	613b      	str	r3, [r7, #16]
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d8eb      	bhi.n	8007a72 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3718      	adds	r7, #24
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab6:	683a      	ldr	r2, [r7, #0]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d01b      	beq.n	8007af4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f7ff ffad 	bl	8007a1c <sync_window>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007ac6:	7bfb      	ldrb	r3, [r7, #15]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d113      	bne.n	8007af4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	7858      	ldrb	r0, [r3, #1]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	683a      	ldr	r2, [r7, #0]
 8007ada:	f7ff fcd5 	bl	8007488 <disk_read>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d004      	beq.n	8007aee <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8007ae8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	683a      	ldr	r2, [r7, #0]
 8007af2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8007af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3710      	adds	r7, #16
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
	...

08007b00 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f7ff ff87 	bl	8007a1c <sync_window>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007b12:	7bfb      	ldrb	r3, [r7, #15]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d158      	bne.n	8007bca <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	2b03      	cmp	r3, #3
 8007b1e:	d148      	bne.n	8007bb2 <sync_fs+0xb2>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	791b      	ldrb	r3, [r3, #4]
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d144      	bne.n	8007bb2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	3330      	adds	r3, #48	; 0x30
 8007b2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b30:	2100      	movs	r1, #0
 8007b32:	4618      	mov	r0, r3
 8007b34:	f7ff fda9 	bl	800768a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	3330      	adds	r3, #48	; 0x30
 8007b3c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007b40:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007b44:	4618      	mov	r0, r3
 8007b46:	f7ff fd38 	bl	80075ba <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	3330      	adds	r3, #48	; 0x30
 8007b4e:	4921      	ldr	r1, [pc, #132]	; (8007bd4 <sync_fs+0xd4>)
 8007b50:	4618      	mov	r0, r3
 8007b52:	f7ff fd4d 	bl	80075f0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	3330      	adds	r3, #48	; 0x30
 8007b5a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007b5e:	491e      	ldr	r1, [pc, #120]	; (8007bd8 <sync_fs+0xd8>)
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7ff fd45 	bl	80075f0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	3330      	adds	r3, #48	; 0x30
 8007b6a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	4619      	mov	r1, r3
 8007b74:	4610      	mov	r0, r2
 8007b76:	f7ff fd3b 	bl	80075f0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	3330      	adds	r3, #48	; 0x30
 8007b7e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	68db      	ldr	r3, [r3, #12]
 8007b86:	4619      	mov	r1, r3
 8007b88:	4610      	mov	r0, r2
 8007b8a:	f7ff fd31 	bl	80075f0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	69db      	ldr	r3, [r3, #28]
 8007b92:	1c5a      	adds	r2, r3, #1
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	7858      	ldrb	r0, [r3, #1]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	f7ff fc8e 	bl	80074c8 <disk_write>
			fs->fsi_flag = 0;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	785b      	ldrb	r3, [r3, #1]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	2100      	movs	r1, #0
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7ff fca4 	bl	8007508 <disk_ioctl>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d001      	beq.n	8007bca <sync_fs+0xca>
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3710      	adds	r7, #16
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	41615252 	.word	0x41615252
 8007bd8:	61417272 	.word	0x61417272

08007bdc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	3b02      	subs	r3, #2
 8007bea:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	695b      	ldr	r3, [r3, #20]
 8007bf0:	3b02      	subs	r3, #2
 8007bf2:	683a      	ldr	r2, [r7, #0]
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d301      	bcc.n	8007bfc <clust2sect+0x20>
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	e008      	b.n	8007c0e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	895b      	ldrh	r3, [r3, #10]
 8007c00:	461a      	mov	r2, r3
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	fb03 f202 	mul.w	r2, r3, r2
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c0c:	4413      	add	r3, r2
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	370c      	adds	r7, #12
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr

08007c1a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b086      	sub	sp, #24
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
 8007c22:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d904      	bls.n	8007c3a <get_fat+0x20>
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	695b      	ldr	r3, [r3, #20]
 8007c34:	683a      	ldr	r2, [r7, #0]
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d302      	bcc.n	8007c40 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	617b      	str	r3, [r7, #20]
 8007c3e:	e08f      	b.n	8007d60 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007c40:	f04f 33ff 	mov.w	r3, #4294967295
 8007c44:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	2b03      	cmp	r3, #3
 8007c4c:	d062      	beq.n	8007d14 <get_fat+0xfa>
 8007c4e:	2b03      	cmp	r3, #3
 8007c50:	dc7c      	bgt.n	8007d4c <get_fat+0x132>
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d002      	beq.n	8007c5c <get_fat+0x42>
 8007c56:	2b02      	cmp	r3, #2
 8007c58:	d042      	beq.n	8007ce0 <get_fat+0xc6>
 8007c5a:	e077      	b.n	8007d4c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	60fb      	str	r3, [r7, #12]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	085b      	lsrs	r3, r3, #1
 8007c64:	68fa      	ldr	r2, [r7, #12]
 8007c66:	4413      	add	r3, r2
 8007c68:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	6a1a      	ldr	r2, [r3, #32]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	0a5b      	lsrs	r3, r3, #9
 8007c72:	4413      	add	r3, r2
 8007c74:	4619      	mov	r1, r3
 8007c76:	6938      	ldr	r0, [r7, #16]
 8007c78:	f7ff ff14 	bl	8007aa4 <move_window>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d167      	bne.n	8007d52 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	1c5a      	adds	r2, r3, #1
 8007c86:	60fa      	str	r2, [r7, #12]
 8007c88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c8c:	693a      	ldr	r2, [r7, #16]
 8007c8e:	4413      	add	r3, r2
 8007c90:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007c94:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	6a1a      	ldr	r2, [r3, #32]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	0a5b      	lsrs	r3, r3, #9
 8007c9e:	4413      	add	r3, r2
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	6938      	ldr	r0, [r7, #16]
 8007ca4:	f7ff fefe 	bl	8007aa4 <move_window>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d153      	bne.n	8007d56 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cb4:	693a      	ldr	r2, [r7, #16]
 8007cb6:	4413      	add	r3, r2
 8007cb8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007cbc:	021b      	lsls	r3, r3, #8
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	f003 0301 	and.w	r3, r3, #1
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d002      	beq.n	8007cd6 <get_fat+0xbc>
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	091b      	lsrs	r3, r3, #4
 8007cd4:	e002      	b.n	8007cdc <get_fat+0xc2>
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cdc:	617b      	str	r3, [r7, #20]
			break;
 8007cde:	e03f      	b.n	8007d60 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	6a1a      	ldr	r2, [r3, #32]
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	0a1b      	lsrs	r3, r3, #8
 8007ce8:	4413      	add	r3, r2
 8007cea:	4619      	mov	r1, r3
 8007cec:	6938      	ldr	r0, [r7, #16]
 8007cee:	f7ff fed9 	bl	8007aa4 <move_window>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d130      	bne.n	8007d5a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	005b      	lsls	r3, r3, #1
 8007d02:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007d06:	4413      	add	r3, r2
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f7ff fc1b 	bl	8007544 <ld_word>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	617b      	str	r3, [r7, #20]
			break;
 8007d12:	e025      	b.n	8007d60 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	6a1a      	ldr	r2, [r3, #32]
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	09db      	lsrs	r3, r3, #7
 8007d1c:	4413      	add	r3, r2
 8007d1e:	4619      	mov	r1, r3
 8007d20:	6938      	ldr	r0, [r7, #16]
 8007d22:	f7ff febf 	bl	8007aa4 <move_window>
 8007d26:	4603      	mov	r3, r0
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d118      	bne.n	8007d5e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007d3a:	4413      	add	r3, r2
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f7ff fc19 	bl	8007574 <ld_dword>
 8007d42:	4603      	mov	r3, r0
 8007d44:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007d48:	617b      	str	r3, [r7, #20]
			break;
 8007d4a:	e009      	b.n	8007d60 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	617b      	str	r3, [r7, #20]
 8007d50:	e006      	b.n	8007d60 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007d52:	bf00      	nop
 8007d54:	e004      	b.n	8007d60 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007d56:	bf00      	nop
 8007d58:	e002      	b.n	8007d60 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007d5a:	bf00      	nop
 8007d5c:	e000      	b.n	8007d60 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007d5e:	bf00      	nop
		}
	}

	return val;
 8007d60:	697b      	ldr	r3, [r7, #20]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3718      	adds	r7, #24
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007d6a:	b590      	push	{r4, r7, lr}
 8007d6c:	b089      	sub	sp, #36	; 0x24
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	60f8      	str	r0, [r7, #12]
 8007d72:	60b9      	str	r1, [r7, #8]
 8007d74:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007d76:	2302      	movs	r3, #2
 8007d78:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	f240 80d2 	bls.w	8007f26 <put_fat+0x1bc>
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	695b      	ldr	r3, [r3, #20]
 8007d86:	68ba      	ldr	r2, [r7, #8]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	f080 80cc 	bcs.w	8007f26 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	2b03      	cmp	r3, #3
 8007d94:	f000 8096 	beq.w	8007ec4 <put_fat+0x15a>
 8007d98:	2b03      	cmp	r3, #3
 8007d9a:	f300 80cd 	bgt.w	8007f38 <put_fat+0x1ce>
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d002      	beq.n	8007da8 <put_fat+0x3e>
 8007da2:	2b02      	cmp	r3, #2
 8007da4:	d06e      	beq.n	8007e84 <put_fat+0x11a>
 8007da6:	e0c7      	b.n	8007f38 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	61bb      	str	r3, [r7, #24]
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	085b      	lsrs	r3, r3, #1
 8007db0:	69ba      	ldr	r2, [r7, #24]
 8007db2:	4413      	add	r3, r2
 8007db4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	6a1a      	ldr	r2, [r3, #32]
 8007dba:	69bb      	ldr	r3, [r7, #24]
 8007dbc:	0a5b      	lsrs	r3, r3, #9
 8007dbe:	4413      	add	r3, r2
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	68f8      	ldr	r0, [r7, #12]
 8007dc4:	f7ff fe6e 	bl	8007aa4 <move_window>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007dcc:	7ffb      	ldrb	r3, [r7, #31]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	f040 80ab 	bne.w	8007f2a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	1c59      	adds	r1, r3, #1
 8007dde:	61b9      	str	r1, [r7, #24]
 8007de0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007de4:	4413      	add	r3, r2
 8007de6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	f003 0301 	and.w	r3, r3, #1
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d00d      	beq.n	8007e0e <put_fat+0xa4>
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	b25b      	sxtb	r3, r3
 8007df8:	f003 030f 	and.w	r3, r3, #15
 8007dfc:	b25a      	sxtb	r2, r3
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	011b      	lsls	r3, r3, #4
 8007e04:	b25b      	sxtb	r3, r3
 8007e06:	4313      	orrs	r3, r2
 8007e08:	b25b      	sxtb	r3, r3
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	e001      	b.n	8007e12 <put_fat+0xa8>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	b2db      	uxtb	r3, r3
 8007e12:	697a      	ldr	r2, [r7, #20]
 8007e14:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2201      	movs	r2, #1
 8007e1a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6a1a      	ldr	r2, [r3, #32]
 8007e20:	69bb      	ldr	r3, [r7, #24]
 8007e22:	0a5b      	lsrs	r3, r3, #9
 8007e24:	4413      	add	r3, r2
 8007e26:	4619      	mov	r1, r3
 8007e28:	68f8      	ldr	r0, [r7, #12]
 8007e2a:	f7ff fe3b 	bl	8007aa4 <move_window>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007e32:	7ffb      	ldrb	r3, [r7, #31]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d17a      	bne.n	8007f2e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007e3e:	69bb      	ldr	r3, [r7, #24]
 8007e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e44:	4413      	add	r3, r2
 8007e46:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	f003 0301 	and.w	r3, r3, #1
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d003      	beq.n	8007e5a <put_fat+0xf0>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	091b      	lsrs	r3, r3, #4
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	e00e      	b.n	8007e78 <put_fat+0x10e>
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	b25b      	sxtb	r3, r3
 8007e60:	f023 030f 	bic.w	r3, r3, #15
 8007e64:	b25a      	sxtb	r2, r3
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	0a1b      	lsrs	r3, r3, #8
 8007e6a:	b25b      	sxtb	r3, r3
 8007e6c:	f003 030f 	and.w	r3, r3, #15
 8007e70:	b25b      	sxtb	r3, r3
 8007e72:	4313      	orrs	r3, r2
 8007e74:	b25b      	sxtb	r3, r3
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	697a      	ldr	r2, [r7, #20]
 8007e7a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	70da      	strb	r2, [r3, #3]
			break;
 8007e82:	e059      	b.n	8007f38 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	6a1a      	ldr	r2, [r3, #32]
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	0a1b      	lsrs	r3, r3, #8
 8007e8c:	4413      	add	r3, r2
 8007e8e:	4619      	mov	r1, r3
 8007e90:	68f8      	ldr	r0, [r7, #12]
 8007e92:	f7ff fe07 	bl	8007aa4 <move_window>
 8007e96:	4603      	mov	r3, r0
 8007e98:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007e9a:	7ffb      	ldrb	r3, [r7, #31]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d148      	bne.n	8007f32 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	005b      	lsls	r3, r3, #1
 8007eaa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007eae:	4413      	add	r3, r2
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	b292      	uxth	r2, r2
 8007eb4:	4611      	mov	r1, r2
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7ff fb7f 	bl	80075ba <st_word>
			fs->wflag = 1;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	70da      	strb	r2, [r3, #3]
			break;
 8007ec2:	e039      	b.n	8007f38 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	6a1a      	ldr	r2, [r3, #32]
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	09db      	lsrs	r3, r3, #7
 8007ecc:	4413      	add	r3, r2
 8007ece:	4619      	mov	r1, r3
 8007ed0:	68f8      	ldr	r0, [r7, #12]
 8007ed2:	f7ff fde7 	bl	8007aa4 <move_window>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007eda:	7ffb      	ldrb	r3, [r7, #31]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d12a      	bne.n	8007f36 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007ef4:	4413      	add	r3, r2
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f7ff fb3c 	bl	8007574 <ld_dword>
 8007efc:	4603      	mov	r3, r0
 8007efe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007f02:	4323      	orrs	r3, r4
 8007f04:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007f14:	4413      	add	r3, r2
 8007f16:	6879      	ldr	r1, [r7, #4]
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f7ff fb69 	bl	80075f0 <st_dword>
			fs->wflag = 1;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2201      	movs	r2, #1
 8007f22:	70da      	strb	r2, [r3, #3]
			break;
 8007f24:	e008      	b.n	8007f38 <put_fat+0x1ce>
		}
	}
 8007f26:	bf00      	nop
 8007f28:	e006      	b.n	8007f38 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007f2a:	bf00      	nop
 8007f2c:	e004      	b.n	8007f38 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007f2e:	bf00      	nop
 8007f30:	e002      	b.n	8007f38 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007f32:	bf00      	nop
 8007f34:	e000      	b.n	8007f38 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007f36:	bf00      	nop
	return res;
 8007f38:	7ffb      	ldrb	r3, [r7, #31]
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3724      	adds	r7, #36	; 0x24
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd90      	pop	{r4, r7, pc}

08007f42 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007f42:	b580      	push	{r7, lr}
 8007f44:	b088      	sub	sp, #32
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	60f8      	str	r0, [r7, #12]
 8007f4a:	60b9      	str	r1, [r7, #8]
 8007f4c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d904      	bls.n	8007f68 <remove_chain+0x26>
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	695b      	ldr	r3, [r3, #20]
 8007f62:	68ba      	ldr	r2, [r7, #8]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d301      	bcc.n	8007f6c <remove_chain+0x2a>
 8007f68:	2302      	movs	r3, #2
 8007f6a:	e04b      	b.n	8008004 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d00c      	beq.n	8007f8c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007f72:	f04f 32ff 	mov.w	r2, #4294967295
 8007f76:	6879      	ldr	r1, [r7, #4]
 8007f78:	69b8      	ldr	r0, [r7, #24]
 8007f7a:	f7ff fef6 	bl	8007d6a <put_fat>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007f82:	7ffb      	ldrb	r3, [r7, #31]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d001      	beq.n	8007f8c <remove_chain+0x4a>
 8007f88:	7ffb      	ldrb	r3, [r7, #31]
 8007f8a:	e03b      	b.n	8008004 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007f8c:	68b9      	ldr	r1, [r7, #8]
 8007f8e:	68f8      	ldr	r0, [r7, #12]
 8007f90:	f7ff fe43 	bl	8007c1a <get_fat>
 8007f94:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d031      	beq.n	8008000 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	d101      	bne.n	8007fa6 <remove_chain+0x64>
 8007fa2:	2302      	movs	r3, #2
 8007fa4:	e02e      	b.n	8008004 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fac:	d101      	bne.n	8007fb2 <remove_chain+0x70>
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e028      	b.n	8008004 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	68b9      	ldr	r1, [r7, #8]
 8007fb6:	69b8      	ldr	r0, [r7, #24]
 8007fb8:	f7ff fed7 	bl	8007d6a <put_fat>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007fc0:	7ffb      	ldrb	r3, [r7, #31]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d001      	beq.n	8007fca <remove_chain+0x88>
 8007fc6:	7ffb      	ldrb	r3, [r7, #31]
 8007fc8:	e01c      	b.n	8008004 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007fca:	69bb      	ldr	r3, [r7, #24]
 8007fcc:	691a      	ldr	r2, [r3, #16]
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	695b      	ldr	r3, [r3, #20]
 8007fd2:	3b02      	subs	r3, #2
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d20b      	bcs.n	8007ff0 <remove_chain+0xae>
			fs->free_clst++;
 8007fd8:	69bb      	ldr	r3, [r7, #24]
 8007fda:	691b      	ldr	r3, [r3, #16]
 8007fdc:	1c5a      	adds	r2, r3, #1
 8007fde:	69bb      	ldr	r3, [r7, #24]
 8007fe0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	791b      	ldrb	r3, [r3, #4]
 8007fe6:	f043 0301 	orr.w	r3, r3, #1
 8007fea:	b2da      	uxtb	r2, r3
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	695b      	ldr	r3, [r3, #20]
 8007ff8:	68ba      	ldr	r2, [r7, #8]
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d3c6      	bcc.n	8007f8c <remove_chain+0x4a>
 8007ffe:	e000      	b.n	8008002 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008000:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008002:	2300      	movs	r3, #0
}
 8008004:	4618      	mov	r0, r3
 8008006:	3720      	adds	r7, #32
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b088      	sub	sp, #32
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d10d      	bne.n	800803e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	68db      	ldr	r3, [r3, #12]
 8008026:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008028:	69bb      	ldr	r3, [r7, #24]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d004      	beq.n	8008038 <create_chain+0x2c>
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	695b      	ldr	r3, [r3, #20]
 8008032:	69ba      	ldr	r2, [r7, #24]
 8008034:	429a      	cmp	r2, r3
 8008036:	d31b      	bcc.n	8008070 <create_chain+0x64>
 8008038:	2301      	movs	r3, #1
 800803a:	61bb      	str	r3, [r7, #24]
 800803c:	e018      	b.n	8008070 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800803e:	6839      	ldr	r1, [r7, #0]
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f7ff fdea 	bl	8007c1a <get_fat>
 8008046:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2b01      	cmp	r3, #1
 800804c:	d801      	bhi.n	8008052 <create_chain+0x46>
 800804e:	2301      	movs	r3, #1
 8008050:	e070      	b.n	8008134 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008058:	d101      	bne.n	800805e <create_chain+0x52>
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	e06a      	b.n	8008134 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	695b      	ldr	r3, [r3, #20]
 8008062:	68fa      	ldr	r2, [r7, #12]
 8008064:	429a      	cmp	r2, r3
 8008066:	d201      	bcs.n	800806c <create_chain+0x60>
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	e063      	b.n	8008134 <create_chain+0x128>
		scl = clst;
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008070:	69bb      	ldr	r3, [r7, #24]
 8008072:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008074:	69fb      	ldr	r3, [r7, #28]
 8008076:	3301      	adds	r3, #1
 8008078:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	695b      	ldr	r3, [r3, #20]
 800807e:	69fa      	ldr	r2, [r7, #28]
 8008080:	429a      	cmp	r2, r3
 8008082:	d307      	bcc.n	8008094 <create_chain+0x88>
				ncl = 2;
 8008084:	2302      	movs	r3, #2
 8008086:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008088:	69fa      	ldr	r2, [r7, #28]
 800808a:	69bb      	ldr	r3, [r7, #24]
 800808c:	429a      	cmp	r2, r3
 800808e:	d901      	bls.n	8008094 <create_chain+0x88>
 8008090:	2300      	movs	r3, #0
 8008092:	e04f      	b.n	8008134 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008094:	69f9      	ldr	r1, [r7, #28]
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f7ff fdbf 	bl	8007c1a <get_fat>
 800809c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d00e      	beq.n	80080c2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d003      	beq.n	80080b2 <create_chain+0xa6>
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080b0:	d101      	bne.n	80080b6 <create_chain+0xaa>
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	e03e      	b.n	8008134 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80080b6:	69fa      	ldr	r2, [r7, #28]
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d1da      	bne.n	8008074 <create_chain+0x68>
 80080be:	2300      	movs	r3, #0
 80080c0:	e038      	b.n	8008134 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80080c2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80080c4:	f04f 32ff 	mov.w	r2, #4294967295
 80080c8:	69f9      	ldr	r1, [r7, #28]
 80080ca:	6938      	ldr	r0, [r7, #16]
 80080cc:	f7ff fe4d 	bl	8007d6a <put_fat>
 80080d0:	4603      	mov	r3, r0
 80080d2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80080d4:	7dfb      	ldrb	r3, [r7, #23]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d109      	bne.n	80080ee <create_chain+0xe2>
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d006      	beq.n	80080ee <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80080e0:	69fa      	ldr	r2, [r7, #28]
 80080e2:	6839      	ldr	r1, [r7, #0]
 80080e4:	6938      	ldr	r0, [r7, #16]
 80080e6:	f7ff fe40 	bl	8007d6a <put_fat>
 80080ea:	4603      	mov	r3, r0
 80080ec:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80080ee:	7dfb      	ldrb	r3, [r7, #23]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d116      	bne.n	8008122 <create_chain+0x116>
		fs->last_clst = ncl;
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	69fa      	ldr	r2, [r7, #28]
 80080f8:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	691a      	ldr	r2, [r3, #16]
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	695b      	ldr	r3, [r3, #20]
 8008102:	3b02      	subs	r3, #2
 8008104:	429a      	cmp	r2, r3
 8008106:	d804      	bhi.n	8008112 <create_chain+0x106>
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	691b      	ldr	r3, [r3, #16]
 800810c:	1e5a      	subs	r2, r3, #1
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	791b      	ldrb	r3, [r3, #4]
 8008116:	f043 0301 	orr.w	r3, r3, #1
 800811a:	b2da      	uxtb	r2, r3
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	711a      	strb	r2, [r3, #4]
 8008120:	e007      	b.n	8008132 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008122:	7dfb      	ldrb	r3, [r7, #23]
 8008124:	2b01      	cmp	r3, #1
 8008126:	d102      	bne.n	800812e <create_chain+0x122>
 8008128:	f04f 33ff 	mov.w	r3, #4294967295
 800812c:	e000      	b.n	8008130 <create_chain+0x124>
 800812e:	2301      	movs	r3, #1
 8008130:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008132:	69fb      	ldr	r3, [r7, #28]
}
 8008134:	4618      	mov	r0, r3
 8008136:	3720      	adds	r7, #32
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800813c:	b480      	push	{r7}
 800813e:	b087      	sub	sp, #28
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008150:	3304      	adds	r3, #4
 8008152:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	0a5b      	lsrs	r3, r3, #9
 8008158:	68fa      	ldr	r2, [r7, #12]
 800815a:	8952      	ldrh	r2, [r2, #10]
 800815c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008160:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	1d1a      	adds	r2, r3, #4
 8008166:	613a      	str	r2, [r7, #16]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d101      	bne.n	8008176 <clmt_clust+0x3a>
 8008172:	2300      	movs	r3, #0
 8008174:	e010      	b.n	8008198 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8008176:	697a      	ldr	r2, [r7, #20]
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	429a      	cmp	r2, r3
 800817c:	d307      	bcc.n	800818e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800817e:	697a      	ldr	r2, [r7, #20]
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	1ad3      	subs	r3, r2, r3
 8008184:	617b      	str	r3, [r7, #20]
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	3304      	adds	r3, #4
 800818a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800818c:	e7e9      	b.n	8008162 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800818e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	4413      	add	r3, r2
}
 8008198:	4618      	mov	r0, r3
 800819a:	371c      	adds	r7, #28
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b086      	sub	sp, #24
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80081ba:	d204      	bcs.n	80081c6 <dir_sdi+0x22>
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	f003 031f 	and.w	r3, r3, #31
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d001      	beq.n	80081ca <dir_sdi+0x26>
		return FR_INT_ERR;
 80081c6:	2302      	movs	r3, #2
 80081c8:	e063      	b.n	8008292 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	683a      	ldr	r2, [r7, #0]
 80081ce:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d106      	bne.n	80081ea <dir_sdi+0x46>
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	781b      	ldrb	r3, [r3, #0]
 80081e0:	2b02      	cmp	r3, #2
 80081e2:	d902      	bls.n	80081ea <dir_sdi+0x46>
		clst = fs->dirbase;
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d10c      	bne.n	800820a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	095b      	lsrs	r3, r3, #5
 80081f4:	693a      	ldr	r2, [r7, #16]
 80081f6:	8912      	ldrh	r2, [r2, #8]
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d301      	bcc.n	8008200 <dir_sdi+0x5c>
 80081fc:	2302      	movs	r3, #2
 80081fe:	e048      	b.n	8008292 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	61da      	str	r2, [r3, #28]
 8008208:	e029      	b.n	800825e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	895b      	ldrh	r3, [r3, #10]
 800820e:	025b      	lsls	r3, r3, #9
 8008210:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008212:	e019      	b.n	8008248 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6979      	ldr	r1, [r7, #20]
 8008218:	4618      	mov	r0, r3
 800821a:	f7ff fcfe 	bl	8007c1a <get_fat>
 800821e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008226:	d101      	bne.n	800822c <dir_sdi+0x88>
 8008228:	2301      	movs	r3, #1
 800822a:	e032      	b.n	8008292 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	2b01      	cmp	r3, #1
 8008230:	d904      	bls.n	800823c <dir_sdi+0x98>
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	695b      	ldr	r3, [r3, #20]
 8008236:	697a      	ldr	r2, [r7, #20]
 8008238:	429a      	cmp	r2, r3
 800823a:	d301      	bcc.n	8008240 <dir_sdi+0x9c>
 800823c:	2302      	movs	r3, #2
 800823e:	e028      	b.n	8008292 <dir_sdi+0xee>
			ofs -= csz;
 8008240:	683a      	ldr	r2, [r7, #0]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	1ad3      	subs	r3, r2, r3
 8008246:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008248:	683a      	ldr	r2, [r7, #0]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	429a      	cmp	r2, r3
 800824e:	d2e1      	bcs.n	8008214 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008250:	6979      	ldr	r1, [r7, #20]
 8008252:	6938      	ldr	r0, [r7, #16]
 8008254:	f7ff fcc2 	bl	8007bdc <clust2sect>
 8008258:	4602      	mov	r2, r0
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	697a      	ldr	r2, [r7, #20]
 8008262:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	69db      	ldr	r3, [r3, #28]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d101      	bne.n	8008270 <dir_sdi+0xcc>
 800826c:	2302      	movs	r3, #2
 800826e:	e010      	b.n	8008292 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	69da      	ldr	r2, [r3, #28]
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	0a5b      	lsrs	r3, r3, #9
 8008278:	441a      	add	r2, r3
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800828a:	441a      	add	r2, r3
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008290:	2300      	movs	r3, #0
}
 8008292:	4618      	mov	r0, r3
 8008294:	3718      	adds	r7, #24
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}

0800829a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800829a:	b580      	push	{r7, lr}
 800829c:	b086      	sub	sp, #24
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
 80082a2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	695b      	ldr	r3, [r3, #20]
 80082ae:	3320      	adds	r3, #32
 80082b0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	69db      	ldr	r3, [r3, #28]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d003      	beq.n	80082c2 <dir_next+0x28>
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80082c0:	d301      	bcc.n	80082c6 <dir_next+0x2c>
 80082c2:	2304      	movs	r3, #4
 80082c4:	e0aa      	b.n	800841c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	f040 8098 	bne.w	8008402 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	69db      	ldr	r3, [r3, #28]
 80082d6:	1c5a      	adds	r2, r3, #1
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	699b      	ldr	r3, [r3, #24]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d10b      	bne.n	80082fc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	095b      	lsrs	r3, r3, #5
 80082e8:	68fa      	ldr	r2, [r7, #12]
 80082ea:	8912      	ldrh	r2, [r2, #8]
 80082ec:	4293      	cmp	r3, r2
 80082ee:	f0c0 8088 	bcc.w	8008402 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	61da      	str	r2, [r3, #28]
 80082f8:	2304      	movs	r3, #4
 80082fa:	e08f      	b.n	800841c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	0a5b      	lsrs	r3, r3, #9
 8008300:	68fa      	ldr	r2, [r7, #12]
 8008302:	8952      	ldrh	r2, [r2, #10]
 8008304:	3a01      	subs	r2, #1
 8008306:	4013      	ands	r3, r2
 8008308:	2b00      	cmp	r3, #0
 800830a:	d17a      	bne.n	8008402 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	699b      	ldr	r3, [r3, #24]
 8008312:	4619      	mov	r1, r3
 8008314:	4610      	mov	r0, r2
 8008316:	f7ff fc80 	bl	8007c1a <get_fat>
 800831a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	2b01      	cmp	r3, #1
 8008320:	d801      	bhi.n	8008326 <dir_next+0x8c>
 8008322:	2302      	movs	r3, #2
 8008324:	e07a      	b.n	800841c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800832c:	d101      	bne.n	8008332 <dir_next+0x98>
 800832e:	2301      	movs	r3, #1
 8008330:	e074      	b.n	800841c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	695b      	ldr	r3, [r3, #20]
 8008336:	697a      	ldr	r2, [r7, #20]
 8008338:	429a      	cmp	r2, r3
 800833a:	d358      	bcc.n	80083ee <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d104      	bne.n	800834c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	61da      	str	r2, [r3, #28]
 8008348:	2304      	movs	r3, #4
 800834a:	e067      	b.n	800841c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	699b      	ldr	r3, [r3, #24]
 8008352:	4619      	mov	r1, r3
 8008354:	4610      	mov	r0, r2
 8008356:	f7ff fe59 	bl	800800c <create_chain>
 800835a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d101      	bne.n	8008366 <dir_next+0xcc>
 8008362:	2307      	movs	r3, #7
 8008364:	e05a      	b.n	800841c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	2b01      	cmp	r3, #1
 800836a:	d101      	bne.n	8008370 <dir_next+0xd6>
 800836c:	2302      	movs	r3, #2
 800836e:	e055      	b.n	800841c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008376:	d101      	bne.n	800837c <dir_next+0xe2>
 8008378:	2301      	movs	r3, #1
 800837a:	e04f      	b.n	800841c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800837c:	68f8      	ldr	r0, [r7, #12]
 800837e:	f7ff fb4d 	bl	8007a1c <sync_window>
 8008382:	4603      	mov	r3, r0
 8008384:	2b00      	cmp	r3, #0
 8008386:	d001      	beq.n	800838c <dir_next+0xf2>
 8008388:	2301      	movs	r3, #1
 800838a:	e047      	b.n	800841c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	3330      	adds	r3, #48	; 0x30
 8008390:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008394:	2100      	movs	r1, #0
 8008396:	4618      	mov	r0, r3
 8008398:	f7ff f977 	bl	800768a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800839c:	2300      	movs	r3, #0
 800839e:	613b      	str	r3, [r7, #16]
 80083a0:	6979      	ldr	r1, [r7, #20]
 80083a2:	68f8      	ldr	r0, [r7, #12]
 80083a4:	f7ff fc1a 	bl	8007bdc <clust2sect>
 80083a8:	4602      	mov	r2, r0
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80083ae:	e012      	b.n	80083d6 <dir_next+0x13c>
						fs->wflag = 1;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2201      	movs	r2, #1
 80083b4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80083b6:	68f8      	ldr	r0, [r7, #12]
 80083b8:	f7ff fb30 	bl	8007a1c <sync_window>
 80083bc:	4603      	mov	r3, r0
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d001      	beq.n	80083c6 <dir_next+0x12c>
 80083c2:	2301      	movs	r3, #1
 80083c4:	e02a      	b.n	800841c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	3301      	adds	r3, #1
 80083ca:	613b      	str	r3, [r7, #16]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d0:	1c5a      	adds	r2, r3, #1
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	895b      	ldrh	r3, [r3, #10]
 80083da:	461a      	mov	r2, r3
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	4293      	cmp	r3, r2
 80083e0:	d3e6      	bcc.n	80083b0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	1ad2      	subs	r2, r2, r3
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	697a      	ldr	r2, [r7, #20]
 80083f2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80083f4:	6979      	ldr	r1, [r7, #20]
 80083f6:	68f8      	ldr	r0, [r7, #12]
 80083f8:	f7ff fbf0 	bl	8007bdc <clust2sect>
 80083fc:	4602      	mov	r2, r0
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	68ba      	ldr	r2, [r7, #8]
 8008406:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008414:	441a      	add	r2, r3
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800841a:	2300      	movs	r3, #0
}
 800841c:	4618      	mov	r0, r3
 800841e:	3718      	adds	r7, #24
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b086      	sub	sp, #24
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008434:	2100      	movs	r1, #0
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f7ff feb4 	bl	80081a4 <dir_sdi>
 800843c:	4603      	mov	r3, r0
 800843e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008440:	7dfb      	ldrb	r3, [r7, #23]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d12b      	bne.n	800849e <dir_alloc+0x7a>
		n = 0;
 8008446:	2300      	movs	r3, #0
 8008448:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	69db      	ldr	r3, [r3, #28]
 800844e:	4619      	mov	r1, r3
 8008450:	68f8      	ldr	r0, [r7, #12]
 8008452:	f7ff fb27 	bl	8007aa4 <move_window>
 8008456:	4603      	mov	r3, r0
 8008458:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800845a:	7dfb      	ldrb	r3, [r7, #23]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d11d      	bne.n	800849c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6a1b      	ldr	r3, [r3, #32]
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	2be5      	cmp	r3, #229	; 0xe5
 8008468:	d004      	beq.n	8008474 <dir_alloc+0x50>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6a1b      	ldr	r3, [r3, #32]
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d107      	bne.n	8008484 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	3301      	adds	r3, #1
 8008478:	613b      	str	r3, [r7, #16]
 800847a:	693a      	ldr	r2, [r7, #16]
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	429a      	cmp	r2, r3
 8008480:	d102      	bne.n	8008488 <dir_alloc+0x64>
 8008482:	e00c      	b.n	800849e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008484:	2300      	movs	r3, #0
 8008486:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008488:	2101      	movs	r1, #1
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f7ff ff05 	bl	800829a <dir_next>
 8008490:	4603      	mov	r3, r0
 8008492:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008494:	7dfb      	ldrb	r3, [r7, #23]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d0d7      	beq.n	800844a <dir_alloc+0x26>
 800849a:	e000      	b.n	800849e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800849c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800849e:	7dfb      	ldrb	r3, [r7, #23]
 80084a0:	2b04      	cmp	r3, #4
 80084a2:	d101      	bne.n	80084a8 <dir_alloc+0x84>
 80084a4:	2307      	movs	r3, #7
 80084a6:	75fb      	strb	r3, [r7, #23]
	return res;
 80084a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3718      	adds	r7, #24
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b084      	sub	sp, #16
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
 80084ba:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	331a      	adds	r3, #26
 80084c0:	4618      	mov	r0, r3
 80084c2:	f7ff f83f 	bl	8007544 <ld_word>
 80084c6:	4603      	mov	r3, r0
 80084c8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	2b03      	cmp	r3, #3
 80084d0:	d109      	bne.n	80084e6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	3314      	adds	r3, #20
 80084d6:	4618      	mov	r0, r3
 80084d8:	f7ff f834 	bl	8007544 <ld_word>
 80084dc:	4603      	mov	r3, r0
 80084de:	041b      	lsls	r3, r3, #16
 80084e0:	68fa      	ldr	r2, [r7, #12]
 80084e2:	4313      	orrs	r3, r2
 80084e4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80084e6:	68fb      	ldr	r3, [r7, #12]
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3710      	adds	r7, #16
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b084      	sub	sp, #16
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	331a      	adds	r3, #26
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	b292      	uxth	r2, r2
 8008504:	4611      	mov	r1, r2
 8008506:	4618      	mov	r0, r3
 8008508:	f7ff f857 	bl	80075ba <st_word>
	if (fs->fs_type == FS_FAT32) {
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	2b03      	cmp	r3, #3
 8008512:	d109      	bne.n	8008528 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	f103 0214 	add.w	r2, r3, #20
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	0c1b      	lsrs	r3, r3, #16
 800851e:	b29b      	uxth	r3, r3
 8008520:	4619      	mov	r1, r3
 8008522:	4610      	mov	r0, r2
 8008524:	f7ff f849 	bl	80075ba <st_word>
	}
}
 8008528:	bf00      	nop
 800852a:	3710      	adds	r7, #16
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b086      	sub	sp, #24
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800853e:	2100      	movs	r1, #0
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f7ff fe2f 	bl	80081a4 <dir_sdi>
 8008546:	4603      	mov	r3, r0
 8008548:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800854a:	7dfb      	ldrb	r3, [r7, #23]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d001      	beq.n	8008554 <dir_find+0x24>
 8008550:	7dfb      	ldrb	r3, [r7, #23]
 8008552:	e03e      	b.n	80085d2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	69db      	ldr	r3, [r3, #28]
 8008558:	4619      	mov	r1, r3
 800855a:	6938      	ldr	r0, [r7, #16]
 800855c:	f7ff faa2 	bl	8007aa4 <move_window>
 8008560:	4603      	mov	r3, r0
 8008562:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008564:	7dfb      	ldrb	r3, [r7, #23]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d12f      	bne.n	80085ca <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6a1b      	ldr	r3, [r3, #32]
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008572:	7bfb      	ldrb	r3, [r7, #15]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d102      	bne.n	800857e <dir_find+0x4e>
 8008578:	2304      	movs	r3, #4
 800857a:	75fb      	strb	r3, [r7, #23]
 800857c:	e028      	b.n	80085d0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6a1b      	ldr	r3, [r3, #32]
 8008582:	330b      	adds	r3, #11
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800858a:	b2da      	uxtb	r2, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6a1b      	ldr	r3, [r3, #32]
 8008594:	330b      	adds	r3, #11
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	f003 0308 	and.w	r3, r3, #8
 800859c:	2b00      	cmp	r3, #0
 800859e:	d10a      	bne.n	80085b6 <dir_find+0x86>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6a18      	ldr	r0, [r3, #32]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	3324      	adds	r3, #36	; 0x24
 80085a8:	220b      	movs	r2, #11
 80085aa:	4619      	mov	r1, r3
 80085ac:	f7ff f888 	bl	80076c0 <mem_cmp>
 80085b0:	4603      	mov	r3, r0
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d00b      	beq.n	80085ce <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80085b6:	2100      	movs	r1, #0
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f7ff fe6e 	bl	800829a <dir_next>
 80085be:	4603      	mov	r3, r0
 80085c0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80085c2:	7dfb      	ldrb	r3, [r7, #23]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d0c5      	beq.n	8008554 <dir_find+0x24>
 80085c8:	e002      	b.n	80085d0 <dir_find+0xa0>
		if (res != FR_OK) break;
 80085ca:	bf00      	nop
 80085cc:	e000      	b.n	80085d0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80085ce:	bf00      	nop

	return res;
 80085d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3718      	adds	r7, #24
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}

080085da <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80085da:	b580      	push	{r7, lr}
 80085dc:	b084      	sub	sp, #16
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80085e8:	2101      	movs	r1, #1
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f7ff ff1a 	bl	8008424 <dir_alloc>
 80085f0:	4603      	mov	r3, r0
 80085f2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80085f4:	7bfb      	ldrb	r3, [r7, #15]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d11c      	bne.n	8008634 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	69db      	ldr	r3, [r3, #28]
 80085fe:	4619      	mov	r1, r3
 8008600:	68b8      	ldr	r0, [r7, #8]
 8008602:	f7ff fa4f 	bl	8007aa4 <move_window>
 8008606:	4603      	mov	r3, r0
 8008608:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800860a:	7bfb      	ldrb	r3, [r7, #15]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d111      	bne.n	8008634 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6a1b      	ldr	r3, [r3, #32]
 8008614:	2220      	movs	r2, #32
 8008616:	2100      	movs	r1, #0
 8008618:	4618      	mov	r0, r3
 800861a:	f7ff f836 	bl	800768a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6a18      	ldr	r0, [r3, #32]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	3324      	adds	r3, #36	; 0x24
 8008626:	220b      	movs	r2, #11
 8008628:	4619      	mov	r1, r3
 800862a:	f7ff f80d 	bl	8007648 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	2201      	movs	r2, #1
 8008632:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008634:	7bfb      	ldrb	r3, [r7, #15]
}
 8008636:	4618      	mov	r0, r3
 8008638:	3710      	adds	r7, #16
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
	...

08008640 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b088      	sub	sp, #32
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	60fb      	str	r3, [r7, #12]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	3324      	adds	r3, #36	; 0x24
 8008654:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8008656:	220b      	movs	r2, #11
 8008658:	2120      	movs	r1, #32
 800865a:	68b8      	ldr	r0, [r7, #8]
 800865c:	f7ff f815 	bl	800768a <mem_set>
	si = i = 0; ni = 8;
 8008660:	2300      	movs	r3, #0
 8008662:	613b      	str	r3, [r7, #16]
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	61fb      	str	r3, [r7, #28]
 8008668:	2308      	movs	r3, #8
 800866a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800866c:	69fb      	ldr	r3, [r7, #28]
 800866e:	1c5a      	adds	r2, r3, #1
 8008670:	61fa      	str	r2, [r7, #28]
 8008672:	68fa      	ldr	r2, [r7, #12]
 8008674:	4413      	add	r3, r2
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800867a:	7efb      	ldrb	r3, [r7, #27]
 800867c:	2b20      	cmp	r3, #32
 800867e:	d94e      	bls.n	800871e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008680:	7efb      	ldrb	r3, [r7, #27]
 8008682:	2b2f      	cmp	r3, #47	; 0x2f
 8008684:	d006      	beq.n	8008694 <create_name+0x54>
 8008686:	7efb      	ldrb	r3, [r7, #27]
 8008688:	2b5c      	cmp	r3, #92	; 0x5c
 800868a:	d110      	bne.n	80086ae <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800868c:	e002      	b.n	8008694 <create_name+0x54>
 800868e:	69fb      	ldr	r3, [r7, #28]
 8008690:	3301      	adds	r3, #1
 8008692:	61fb      	str	r3, [r7, #28]
 8008694:	68fa      	ldr	r2, [r7, #12]
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	4413      	add	r3, r2
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	2b2f      	cmp	r3, #47	; 0x2f
 800869e:	d0f6      	beq.n	800868e <create_name+0x4e>
 80086a0:	68fa      	ldr	r2, [r7, #12]
 80086a2:	69fb      	ldr	r3, [r7, #28]
 80086a4:	4413      	add	r3, r2
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	2b5c      	cmp	r3, #92	; 0x5c
 80086aa:	d0f0      	beq.n	800868e <create_name+0x4e>
			break;
 80086ac:	e038      	b.n	8008720 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80086ae:	7efb      	ldrb	r3, [r7, #27]
 80086b0:	2b2e      	cmp	r3, #46	; 0x2e
 80086b2:	d003      	beq.n	80086bc <create_name+0x7c>
 80086b4:	693a      	ldr	r2, [r7, #16]
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d30c      	bcc.n	80086d6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	2b0b      	cmp	r3, #11
 80086c0:	d002      	beq.n	80086c8 <create_name+0x88>
 80086c2:	7efb      	ldrb	r3, [r7, #27]
 80086c4:	2b2e      	cmp	r3, #46	; 0x2e
 80086c6:	d001      	beq.n	80086cc <create_name+0x8c>
 80086c8:	2306      	movs	r3, #6
 80086ca:	e044      	b.n	8008756 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80086cc:	2308      	movs	r3, #8
 80086ce:	613b      	str	r3, [r7, #16]
 80086d0:	230b      	movs	r3, #11
 80086d2:	617b      	str	r3, [r7, #20]
			continue;
 80086d4:	e022      	b.n	800871c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80086d6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	da04      	bge.n	80086e8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80086de:	7efb      	ldrb	r3, [r7, #27]
 80086e0:	3b80      	subs	r3, #128	; 0x80
 80086e2:	4a1f      	ldr	r2, [pc, #124]	; (8008760 <create_name+0x120>)
 80086e4:	5cd3      	ldrb	r3, [r2, r3]
 80086e6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80086e8:	7efb      	ldrb	r3, [r7, #27]
 80086ea:	4619      	mov	r1, r3
 80086ec:	481d      	ldr	r0, [pc, #116]	; (8008764 <create_name+0x124>)
 80086ee:	f7ff f80e 	bl	800770e <chk_chr>
 80086f2:	4603      	mov	r3, r0
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d001      	beq.n	80086fc <create_name+0xbc>
 80086f8:	2306      	movs	r3, #6
 80086fa:	e02c      	b.n	8008756 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80086fc:	7efb      	ldrb	r3, [r7, #27]
 80086fe:	2b60      	cmp	r3, #96	; 0x60
 8008700:	d905      	bls.n	800870e <create_name+0xce>
 8008702:	7efb      	ldrb	r3, [r7, #27]
 8008704:	2b7a      	cmp	r3, #122	; 0x7a
 8008706:	d802      	bhi.n	800870e <create_name+0xce>
 8008708:	7efb      	ldrb	r3, [r7, #27]
 800870a:	3b20      	subs	r3, #32
 800870c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	1c5a      	adds	r2, r3, #1
 8008712:	613a      	str	r2, [r7, #16]
 8008714:	68ba      	ldr	r2, [r7, #8]
 8008716:	4413      	add	r3, r2
 8008718:	7efa      	ldrb	r2, [r7, #27]
 800871a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800871c:	e7a6      	b.n	800866c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800871e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008720:	68fa      	ldr	r2, [r7, #12]
 8008722:	69fb      	ldr	r3, [r7, #28]
 8008724:	441a      	add	r2, r3
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d101      	bne.n	8008734 <create_name+0xf4>
 8008730:	2306      	movs	r3, #6
 8008732:	e010      	b.n	8008756 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	781b      	ldrb	r3, [r3, #0]
 8008738:	2be5      	cmp	r3, #229	; 0xe5
 800873a:	d102      	bne.n	8008742 <create_name+0x102>
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	2205      	movs	r2, #5
 8008740:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008742:	7efb      	ldrb	r3, [r7, #27]
 8008744:	2b20      	cmp	r3, #32
 8008746:	d801      	bhi.n	800874c <create_name+0x10c>
 8008748:	2204      	movs	r2, #4
 800874a:	e000      	b.n	800874e <create_name+0x10e>
 800874c:	2200      	movs	r2, #0
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	330b      	adds	r3, #11
 8008752:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008754:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8008756:	4618      	mov	r0, r3
 8008758:	3720      	adds	r7, #32
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop
 8008760:	0800a7c8 	.word	0x0800a7c8
 8008764:	0800a748 	.word	0x0800a748

08008768 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b086      	sub	sp, #24
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800877c:	e002      	b.n	8008784 <follow_path+0x1c>
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	3301      	adds	r3, #1
 8008782:	603b      	str	r3, [r7, #0]
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	2b2f      	cmp	r3, #47	; 0x2f
 800878a:	d0f8      	beq.n	800877e <follow_path+0x16>
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	2b5c      	cmp	r3, #92	; 0x5c
 8008792:	d0f4      	beq.n	800877e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	2200      	movs	r2, #0
 8008798:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	2b1f      	cmp	r3, #31
 80087a0:	d80a      	bhi.n	80087b8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2280      	movs	r2, #128	; 0x80
 80087a6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80087aa:	2100      	movs	r1, #0
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f7ff fcf9 	bl	80081a4 <dir_sdi>
 80087b2:	4603      	mov	r3, r0
 80087b4:	75fb      	strb	r3, [r7, #23]
 80087b6:	e043      	b.n	8008840 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80087b8:	463b      	mov	r3, r7
 80087ba:	4619      	mov	r1, r3
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f7ff ff3f 	bl	8008640 <create_name>
 80087c2:	4603      	mov	r3, r0
 80087c4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80087c6:	7dfb      	ldrb	r3, [r7, #23]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d134      	bne.n	8008836 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f7ff feaf 	bl	8008530 <dir_find>
 80087d2:	4603      	mov	r3, r0
 80087d4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80087dc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80087de:	7dfb      	ldrb	r3, [r7, #23]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d00a      	beq.n	80087fa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80087e4:	7dfb      	ldrb	r3, [r7, #23]
 80087e6:	2b04      	cmp	r3, #4
 80087e8:	d127      	bne.n	800883a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80087ea:	7afb      	ldrb	r3, [r7, #11]
 80087ec:	f003 0304 	and.w	r3, r3, #4
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d122      	bne.n	800883a <follow_path+0xd2>
 80087f4:	2305      	movs	r3, #5
 80087f6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80087f8:	e01f      	b.n	800883a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80087fa:	7afb      	ldrb	r3, [r7, #11]
 80087fc:	f003 0304 	and.w	r3, r3, #4
 8008800:	2b00      	cmp	r3, #0
 8008802:	d11c      	bne.n	800883e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	799b      	ldrb	r3, [r3, #6]
 8008808:	f003 0310 	and.w	r3, r3, #16
 800880c:	2b00      	cmp	r3, #0
 800880e:	d102      	bne.n	8008816 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008810:	2305      	movs	r3, #5
 8008812:	75fb      	strb	r3, [r7, #23]
 8008814:	e014      	b.n	8008840 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	695b      	ldr	r3, [r3, #20]
 8008820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008824:	4413      	add	r3, r2
 8008826:	4619      	mov	r1, r3
 8008828:	68f8      	ldr	r0, [r7, #12]
 800882a:	f7ff fe42 	bl	80084b2 <ld_clust>
 800882e:	4602      	mov	r2, r0
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008834:	e7c0      	b.n	80087b8 <follow_path+0x50>
			if (res != FR_OK) break;
 8008836:	bf00      	nop
 8008838:	e002      	b.n	8008840 <follow_path+0xd8>
				break;
 800883a:	bf00      	nop
 800883c:	e000      	b.n	8008840 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800883e:	bf00      	nop
			}
		}
	}

	return res;
 8008840:	7dfb      	ldrb	r3, [r7, #23]
}
 8008842:	4618      	mov	r0, r3
 8008844:	3718      	adds	r7, #24
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}

0800884a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800884a:	b480      	push	{r7}
 800884c:	b087      	sub	sp, #28
 800884e:	af00      	add	r7, sp, #0
 8008850:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008852:	f04f 33ff 	mov.w	r3, #4294967295
 8008856:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d031      	beq.n	80088c4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	617b      	str	r3, [r7, #20]
 8008866:	e002      	b.n	800886e <get_ldnumber+0x24>
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	3301      	adds	r3, #1
 800886c:	617b      	str	r3, [r7, #20]
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	2b20      	cmp	r3, #32
 8008874:	d903      	bls.n	800887e <get_ldnumber+0x34>
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	2b3a      	cmp	r3, #58	; 0x3a
 800887c:	d1f4      	bne.n	8008868 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	2b3a      	cmp	r3, #58	; 0x3a
 8008884:	d11c      	bne.n	80088c0 <get_ldnumber+0x76>
			tp = *path;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	1c5a      	adds	r2, r3, #1
 8008890:	60fa      	str	r2, [r7, #12]
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	3b30      	subs	r3, #48	; 0x30
 8008896:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	2b09      	cmp	r3, #9
 800889c:	d80e      	bhi.n	80088bc <get_ldnumber+0x72>
 800889e:	68fa      	ldr	r2, [r7, #12]
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d10a      	bne.n	80088bc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d107      	bne.n	80088bc <get_ldnumber+0x72>
					vol = (int)i;
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	3301      	adds	r3, #1
 80088b4:	617b      	str	r3, [r7, #20]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	697a      	ldr	r2, [r7, #20]
 80088ba:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	e002      	b.n	80088c6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80088c0:	2300      	movs	r3, #0
 80088c2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80088c4:	693b      	ldr	r3, [r7, #16]
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	371c      	adds	r7, #28
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr
	...

080088d4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b082      	sub	sp, #8
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2200      	movs	r2, #0
 80088e2:	70da      	strb	r2, [r3, #3]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f04f 32ff 	mov.w	r2, #4294967295
 80088ea:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80088ec:	6839      	ldr	r1, [r7, #0]
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f7ff f8d8 	bl	8007aa4 <move_window>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d001      	beq.n	80088fe <check_fs+0x2a>
 80088fa:	2304      	movs	r3, #4
 80088fc:	e038      	b.n	8008970 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	3330      	adds	r3, #48	; 0x30
 8008902:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008906:	4618      	mov	r0, r3
 8008908:	f7fe fe1c 	bl	8007544 <ld_word>
 800890c:	4603      	mov	r3, r0
 800890e:	461a      	mov	r2, r3
 8008910:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008914:	429a      	cmp	r2, r3
 8008916:	d001      	beq.n	800891c <check_fs+0x48>
 8008918:	2303      	movs	r3, #3
 800891a:	e029      	b.n	8008970 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008922:	2be9      	cmp	r3, #233	; 0xe9
 8008924:	d009      	beq.n	800893a <check_fs+0x66>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800892c:	2beb      	cmp	r3, #235	; 0xeb
 800892e:	d11e      	bne.n	800896e <check_fs+0x9a>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008936:	2b90      	cmp	r3, #144	; 0x90
 8008938:	d119      	bne.n	800896e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	3330      	adds	r3, #48	; 0x30
 800893e:	3336      	adds	r3, #54	; 0x36
 8008940:	4618      	mov	r0, r3
 8008942:	f7fe fe17 	bl	8007574 <ld_dword>
 8008946:	4603      	mov	r3, r0
 8008948:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800894c:	4a0a      	ldr	r2, [pc, #40]	; (8008978 <check_fs+0xa4>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d101      	bne.n	8008956 <check_fs+0x82>
 8008952:	2300      	movs	r3, #0
 8008954:	e00c      	b.n	8008970 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	3330      	adds	r3, #48	; 0x30
 800895a:	3352      	adds	r3, #82	; 0x52
 800895c:	4618      	mov	r0, r3
 800895e:	f7fe fe09 	bl	8007574 <ld_dword>
 8008962:	4603      	mov	r3, r0
 8008964:	4a05      	ldr	r2, [pc, #20]	; (800897c <check_fs+0xa8>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d101      	bne.n	800896e <check_fs+0x9a>
 800896a:	2300      	movs	r3, #0
 800896c:	e000      	b.n	8008970 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800896e:	2302      	movs	r3, #2
}
 8008970:	4618      	mov	r0, r3
 8008972:	3708      	adds	r7, #8
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}
 8008978:	00544146 	.word	0x00544146
 800897c:	33544146 	.word	0x33544146

08008980 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b096      	sub	sp, #88	; 0x58
 8008984:	af00      	add	r7, sp, #0
 8008986:	60f8      	str	r0, [r7, #12]
 8008988:	60b9      	str	r1, [r7, #8]
 800898a:	4613      	mov	r3, r2
 800898c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	2200      	movs	r2, #0
 8008992:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008994:	68f8      	ldr	r0, [r7, #12]
 8008996:	f7ff ff58 	bl	800884a <get_ldnumber>
 800899a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800899c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800899e:	2b00      	cmp	r3, #0
 80089a0:	da01      	bge.n	80089a6 <find_volume+0x26>
 80089a2:	230b      	movs	r3, #11
 80089a4:	e22e      	b.n	8008e04 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80089a6:	4aa8      	ldr	r2, [pc, #672]	; (8008c48 <find_volume+0x2c8>)
 80089a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089ae:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80089b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d101      	bne.n	80089ba <find_volume+0x3a>
 80089b6:	230c      	movs	r3, #12
 80089b8:	e224      	b.n	8008e04 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089be:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80089c0:	79fb      	ldrb	r3, [r7, #7]
 80089c2:	f023 0301 	bic.w	r3, r3, #1
 80089c6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80089c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d01a      	beq.n	8008a06 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80089d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d2:	785b      	ldrb	r3, [r3, #1]
 80089d4:	4618      	mov	r0, r3
 80089d6:	f7fe fd17 	bl	8007408 <disk_status>
 80089da:	4603      	mov	r3, r0
 80089dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80089e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80089e4:	f003 0301 	and.w	r3, r3, #1
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d10c      	bne.n	8008a06 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80089ec:	79fb      	ldrb	r3, [r7, #7]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d007      	beq.n	8008a02 <find_volume+0x82>
 80089f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80089f6:	f003 0304 	and.w	r3, r3, #4
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d001      	beq.n	8008a02 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80089fe:	230a      	movs	r3, #10
 8008a00:	e200      	b.n	8008e04 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8008a02:	2300      	movs	r3, #0
 8008a04:	e1fe      	b.n	8008e04 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a08:	2200      	movs	r2, #0
 8008a0a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a0e:	b2da      	uxtb	r2, r3
 8008a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a12:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a16:	785b      	ldrb	r3, [r3, #1]
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f7fe fd0f 	bl	800743c <disk_initialize>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008a24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a28:	f003 0301 	and.w	r3, r3, #1
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d001      	beq.n	8008a34 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008a30:	2303      	movs	r3, #3
 8008a32:	e1e7      	b.n	8008e04 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008a34:	79fb      	ldrb	r3, [r7, #7]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d007      	beq.n	8008a4a <find_volume+0xca>
 8008a3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a3e:	f003 0304 	and.w	r3, r3, #4
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d001      	beq.n	8008a4a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008a46:	230a      	movs	r3, #10
 8008a48:	e1dc      	b.n	8008e04 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008a4e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008a50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008a52:	f7ff ff3f 	bl	80088d4 <check_fs>
 8008a56:	4603      	mov	r3, r0
 8008a58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008a5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008a60:	2b02      	cmp	r3, #2
 8008a62:	d14b      	bne.n	8008afc <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008a64:	2300      	movs	r3, #0
 8008a66:	643b      	str	r3, [r7, #64]	; 0x40
 8008a68:	e01f      	b.n	8008aaa <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a6c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008a70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a72:	011b      	lsls	r3, r3, #4
 8008a74:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008a78:	4413      	add	r3, r2
 8008a7a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a7e:	3304      	adds	r3, #4
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d006      	beq.n	8008a94 <find_volume+0x114>
 8008a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a88:	3308      	adds	r3, #8
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f7fe fd72 	bl	8007574 <ld_dword>
 8008a90:	4602      	mov	r2, r0
 8008a92:	e000      	b.n	8008a96 <find_volume+0x116>
 8008a94:	2200      	movs	r2, #0
 8008a96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a98:	009b      	lsls	r3, r3, #2
 8008a9a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8008a9e:	440b      	add	r3, r1
 8008aa0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	643b      	str	r3, [r7, #64]	; 0x40
 8008aaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008aac:	2b03      	cmp	r3, #3
 8008aae:	d9dc      	bls.n	8008a6a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008ab4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d002      	beq.n	8008ac0 <find_volume+0x140>
 8008aba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008abc:	3b01      	subs	r3, #1
 8008abe:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008ac0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008ac8:	4413      	add	r3, r2
 8008aca:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008ace:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008ad0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d005      	beq.n	8008ae2 <find_volume+0x162>
 8008ad6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008ad8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008ada:	f7ff fefb 	bl	80088d4 <check_fs>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	e000      	b.n	8008ae4 <find_volume+0x164>
 8008ae2:	2303      	movs	r3, #3
 8008ae4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008ae8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d905      	bls.n	8008afc <find_volume+0x17c>
 8008af0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008af2:	3301      	adds	r3, #1
 8008af4:	643b      	str	r3, [r7, #64]	; 0x40
 8008af6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008af8:	2b03      	cmp	r3, #3
 8008afa:	d9e1      	bls.n	8008ac0 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008afc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008b00:	2b04      	cmp	r3, #4
 8008b02:	d101      	bne.n	8008b08 <find_volume+0x188>
 8008b04:	2301      	movs	r3, #1
 8008b06:	e17d      	b.n	8008e04 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008b08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d901      	bls.n	8008b14 <find_volume+0x194>
 8008b10:	230d      	movs	r3, #13
 8008b12:	e177      	b.n	8008e04 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b16:	3330      	adds	r3, #48	; 0x30
 8008b18:	330b      	adds	r3, #11
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f7fe fd12 	bl	8007544 <ld_word>
 8008b20:	4603      	mov	r3, r0
 8008b22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b26:	d001      	beq.n	8008b2c <find_volume+0x1ac>
 8008b28:	230d      	movs	r3, #13
 8008b2a:	e16b      	b.n	8008e04 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b2e:	3330      	adds	r3, #48	; 0x30
 8008b30:	3316      	adds	r3, #22
 8008b32:	4618      	mov	r0, r3
 8008b34:	f7fe fd06 	bl	8007544 <ld_word>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008b3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d106      	bne.n	8008b50 <find_volume+0x1d0>
 8008b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b44:	3330      	adds	r3, #48	; 0x30
 8008b46:	3324      	adds	r3, #36	; 0x24
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f7fe fd13 	bl	8007574 <ld_dword>
 8008b4e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008b54:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b58:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8008b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b5e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b62:	789b      	ldrb	r3, [r3, #2]
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d005      	beq.n	8008b74 <find_volume+0x1f4>
 8008b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b6a:	789b      	ldrb	r3, [r3, #2]
 8008b6c:	2b02      	cmp	r3, #2
 8008b6e:	d001      	beq.n	8008b74 <find_volume+0x1f4>
 8008b70:	230d      	movs	r3, #13
 8008b72:	e147      	b.n	8008e04 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b76:	789b      	ldrb	r3, [r3, #2]
 8008b78:	461a      	mov	r2, r3
 8008b7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b7c:	fb02 f303 	mul.w	r3, r2, r3
 8008b80:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b88:	b29a      	uxth	r2, r3
 8008b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b8c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b90:	895b      	ldrh	r3, [r3, #10]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d008      	beq.n	8008ba8 <find_volume+0x228>
 8008b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b98:	895b      	ldrh	r3, [r3, #10]
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b9e:	895b      	ldrh	r3, [r3, #10]
 8008ba0:	3b01      	subs	r3, #1
 8008ba2:	4013      	ands	r3, r2
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d001      	beq.n	8008bac <find_volume+0x22c>
 8008ba8:	230d      	movs	r3, #13
 8008baa:	e12b      	b.n	8008e04 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bae:	3330      	adds	r3, #48	; 0x30
 8008bb0:	3311      	adds	r3, #17
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f7fe fcc6 	bl	8007544 <ld_word>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	461a      	mov	r2, r3
 8008bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bbe:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc2:	891b      	ldrh	r3, [r3, #8]
 8008bc4:	f003 030f 	and.w	r3, r3, #15
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d001      	beq.n	8008bd2 <find_volume+0x252>
 8008bce:	230d      	movs	r3, #13
 8008bd0:	e118      	b.n	8008e04 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd4:	3330      	adds	r3, #48	; 0x30
 8008bd6:	3313      	adds	r3, #19
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f7fe fcb3 	bl	8007544 <ld_word>
 8008bde:	4603      	mov	r3, r0
 8008be0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008be2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d106      	bne.n	8008bf6 <find_volume+0x276>
 8008be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bea:	3330      	adds	r3, #48	; 0x30
 8008bec:	3320      	adds	r3, #32
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f7fe fcc0 	bl	8007574 <ld_dword>
 8008bf4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf8:	3330      	adds	r3, #48	; 0x30
 8008bfa:	330e      	adds	r3, #14
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f7fe fca1 	bl	8007544 <ld_word>
 8008c02:	4603      	mov	r3, r0
 8008c04:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008c06:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d101      	bne.n	8008c10 <find_volume+0x290>
 8008c0c:	230d      	movs	r3, #13
 8008c0e:	e0f9      	b.n	8008e04 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008c10:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c14:	4413      	add	r3, r2
 8008c16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c18:	8912      	ldrh	r2, [r2, #8]
 8008c1a:	0912      	lsrs	r2, r2, #4
 8008c1c:	b292      	uxth	r2, r2
 8008c1e:	4413      	add	r3, r2
 8008c20:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008c22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d201      	bcs.n	8008c2e <find_volume+0x2ae>
 8008c2a:	230d      	movs	r3, #13
 8008c2c:	e0ea      	b.n	8008e04 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008c2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c32:	1ad3      	subs	r3, r2, r3
 8008c34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c36:	8952      	ldrh	r2, [r2, #10]
 8008c38:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c3c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d103      	bne.n	8008c4c <find_volume+0x2cc>
 8008c44:	230d      	movs	r3, #13
 8008c46:	e0dd      	b.n	8008e04 <find_volume+0x484>
 8008c48:	200000b4 	.word	0x200000b4
		fmt = FS_FAT32;
 8008c4c:	2303      	movs	r3, #3
 8008c4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c54:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d802      	bhi.n	8008c62 <find_volume+0x2e2>
 8008c5c:	2302      	movs	r3, #2
 8008c5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c64:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d802      	bhi.n	8008c72 <find_volume+0x2f2>
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c74:	1c9a      	adds	r2, r3, #2
 8008c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c78:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8008c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c7c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008c7e:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008c80:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008c82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c84:	441a      	add	r2, r3
 8008c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c88:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8008c8a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c8e:	441a      	add	r2, r3
 8008c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c92:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8008c94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008c98:	2b03      	cmp	r3, #3
 8008c9a:	d11e      	bne.n	8008cda <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c9e:	3330      	adds	r3, #48	; 0x30
 8008ca0:	332a      	adds	r3, #42	; 0x2a
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f7fe fc4e 	bl	8007544 <ld_word>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d001      	beq.n	8008cb2 <find_volume+0x332>
 8008cae:	230d      	movs	r3, #13
 8008cb0:	e0a8      	b.n	8008e04 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cb4:	891b      	ldrh	r3, [r3, #8]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d001      	beq.n	8008cbe <find_volume+0x33e>
 8008cba:	230d      	movs	r3, #13
 8008cbc:	e0a2      	b.n	8008e04 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc0:	3330      	adds	r3, #48	; 0x30
 8008cc2:	332c      	adds	r3, #44	; 0x2c
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f7fe fc55 	bl	8007574 <ld_dword>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cce:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd2:	695b      	ldr	r3, [r3, #20]
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	647b      	str	r3, [r7, #68]	; 0x44
 8008cd8:	e01f      	b.n	8008d1a <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cdc:	891b      	ldrh	r3, [r3, #8]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d101      	bne.n	8008ce6 <find_volume+0x366>
 8008ce2:	230d      	movs	r3, #13
 8008ce4:	e08e      	b.n	8008e04 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce8:	6a1a      	ldr	r2, [r3, #32]
 8008cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cec:	441a      	add	r2, r3
 8008cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cf0:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008cf2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008cf6:	2b02      	cmp	r3, #2
 8008cf8:	d103      	bne.n	8008d02 <find_volume+0x382>
 8008cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cfc:	695b      	ldr	r3, [r3, #20]
 8008cfe:	005b      	lsls	r3, r3, #1
 8008d00:	e00a      	b.n	8008d18 <find_volume+0x398>
 8008d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d04:	695a      	ldr	r2, [r3, #20]
 8008d06:	4613      	mov	r3, r2
 8008d08:	005b      	lsls	r3, r3, #1
 8008d0a:	4413      	add	r3, r2
 8008d0c:	085a      	lsrs	r2, r3, #1
 8008d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d10:	695b      	ldr	r3, [r3, #20]
 8008d12:	f003 0301 	and.w	r3, r3, #1
 8008d16:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008d18:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d1c:	699a      	ldr	r2, [r3, #24]
 8008d1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d20:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008d24:	0a5b      	lsrs	r3, r3, #9
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d201      	bcs.n	8008d2e <find_volume+0x3ae>
 8008d2a:	230d      	movs	r3, #13
 8008d2c:	e06a      	b.n	8008e04 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d30:	f04f 32ff 	mov.w	r2, #4294967295
 8008d34:	611a      	str	r2, [r3, #16]
 8008d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d38:	691a      	ldr	r2, [r3, #16]
 8008d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d3c:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8008d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d40:	2280      	movs	r2, #128	; 0x80
 8008d42:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008d44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008d48:	2b03      	cmp	r3, #3
 8008d4a:	d149      	bne.n	8008de0 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d4e:	3330      	adds	r3, #48	; 0x30
 8008d50:	3330      	adds	r3, #48	; 0x30
 8008d52:	4618      	mov	r0, r3
 8008d54:	f7fe fbf6 	bl	8007544 <ld_word>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d140      	bne.n	8008de0 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008d5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d60:	3301      	adds	r3, #1
 8008d62:	4619      	mov	r1, r3
 8008d64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008d66:	f7fe fe9d 	bl	8007aa4 <move_window>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d137      	bne.n	8008de0 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8008d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d72:	2200      	movs	r2, #0
 8008d74:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d78:	3330      	adds	r3, #48	; 0x30
 8008d7a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f7fe fbe0 	bl	8007544 <ld_word>
 8008d84:	4603      	mov	r3, r0
 8008d86:	461a      	mov	r2, r3
 8008d88:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d127      	bne.n	8008de0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d92:	3330      	adds	r3, #48	; 0x30
 8008d94:	4618      	mov	r0, r3
 8008d96:	f7fe fbed 	bl	8007574 <ld_dword>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	4a1b      	ldr	r2, [pc, #108]	; (8008e0c <find_volume+0x48c>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d11e      	bne.n	8008de0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da4:	3330      	adds	r3, #48	; 0x30
 8008da6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7fe fbe2 	bl	8007574 <ld_dword>
 8008db0:	4603      	mov	r3, r0
 8008db2:	4a17      	ldr	r2, [pc, #92]	; (8008e10 <find_volume+0x490>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d113      	bne.n	8008de0 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dba:	3330      	adds	r3, #48	; 0x30
 8008dbc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f7fe fbd7 	bl	8007574 <ld_dword>
 8008dc6:	4602      	mov	r2, r0
 8008dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dca:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dce:	3330      	adds	r3, #48	; 0x30
 8008dd0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f7fe fbcd 	bl	8007574 <ld_dword>
 8008dda:	4602      	mov	r2, r0
 8008ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dde:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008de6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008de8:	4b0a      	ldr	r3, [pc, #40]	; (8008e14 <find_volume+0x494>)
 8008dea:	881b      	ldrh	r3, [r3, #0]
 8008dec:	3301      	adds	r3, #1
 8008dee:	b29a      	uxth	r2, r3
 8008df0:	4b08      	ldr	r3, [pc, #32]	; (8008e14 <find_volume+0x494>)
 8008df2:	801a      	strh	r2, [r3, #0]
 8008df4:	4b07      	ldr	r3, [pc, #28]	; (8008e14 <find_volume+0x494>)
 8008df6:	881a      	ldrh	r2, [r3, #0]
 8008df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dfa:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008dfc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008dfe:	f7fe fde9 	bl	80079d4 <clear_lock>
#endif
	return FR_OK;
 8008e02:	2300      	movs	r3, #0
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3758      	adds	r7, #88	; 0x58
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}
 8008e0c:	41615252 	.word	0x41615252
 8008e10:	61417272 	.word	0x61417272
 8008e14:	200000b8 	.word	0x200000b8

08008e18 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008e22:	2309      	movs	r3, #9
 8008e24:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d01c      	beq.n	8008e66 <validate+0x4e>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d018      	beq.n	8008e66 <validate+0x4e>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d013      	beq.n	8008e66 <validate+0x4e>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	889a      	ldrh	r2, [r3, #4]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	88db      	ldrh	r3, [r3, #6]
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d10c      	bne.n	8008e66 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	785b      	ldrb	r3, [r3, #1]
 8008e52:	4618      	mov	r0, r3
 8008e54:	f7fe fad8 	bl	8007408 <disk_status>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	f003 0301 	and.w	r3, r3, #1
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d101      	bne.n	8008e66 <validate+0x4e>
			res = FR_OK;
 8008e62:	2300      	movs	r3, #0
 8008e64:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008e66:	7bfb      	ldrb	r3, [r7, #15]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d102      	bne.n	8008e72 <validate+0x5a>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	e000      	b.n	8008e74 <validate+0x5c>
 8008e72:	2300      	movs	r3, #0
 8008e74:	683a      	ldr	r2, [r7, #0]
 8008e76:	6013      	str	r3, [r2, #0]
	return res;
 8008e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3710      	adds	r7, #16
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
	...

08008e84 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b088      	sub	sp, #32
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	60b9      	str	r1, [r7, #8]
 8008e8e:	4613      	mov	r3, r2
 8008e90:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008e96:	f107 0310 	add.w	r3, r7, #16
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f7ff fcd5 	bl	800884a <get_ldnumber>
 8008ea0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008ea2:	69fb      	ldr	r3, [r7, #28]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	da01      	bge.n	8008eac <f_mount+0x28>
 8008ea8:	230b      	movs	r3, #11
 8008eaa:	e02b      	b.n	8008f04 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008eac:	4a17      	ldr	r2, [pc, #92]	; (8008f0c <f_mount+0x88>)
 8008eae:	69fb      	ldr	r3, [r7, #28]
 8008eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008eb4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008eb6:	69bb      	ldr	r3, [r7, #24]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d005      	beq.n	8008ec8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008ebc:	69b8      	ldr	r0, [r7, #24]
 8008ebe:	f7fe fd89 	bl	80079d4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008ec2:	69bb      	ldr	r3, [r7, #24]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d002      	beq.n	8008ed4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008ed4:	68fa      	ldr	r2, [r7, #12]
 8008ed6:	490d      	ldr	r1, [pc, #52]	; (8008f0c <f_mount+0x88>)
 8008ed8:	69fb      	ldr	r3, [r7, #28]
 8008eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d002      	beq.n	8008eea <f_mount+0x66>
 8008ee4:	79fb      	ldrb	r3, [r7, #7]
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d001      	beq.n	8008eee <f_mount+0x6a>
 8008eea:	2300      	movs	r3, #0
 8008eec:	e00a      	b.n	8008f04 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008eee:	f107 010c 	add.w	r1, r7, #12
 8008ef2:	f107 0308 	add.w	r3, r7, #8
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f7ff fd41 	bl	8008980 <find_volume>
 8008efe:	4603      	mov	r3, r0
 8008f00:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008f02:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3720      	adds	r7, #32
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	200000b4 	.word	0x200000b4

08008f10 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b098      	sub	sp, #96	; 0x60
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	60f8      	str	r0, [r7, #12]
 8008f18:	60b9      	str	r1, [r7, #8]
 8008f1a:	4613      	mov	r3, r2
 8008f1c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d101      	bne.n	8008f28 <f_open+0x18>
 8008f24:	2309      	movs	r3, #9
 8008f26:	e1ad      	b.n	8009284 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008f28:	79fb      	ldrb	r3, [r7, #7]
 8008f2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f2e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008f30:	79fa      	ldrb	r2, [r7, #7]
 8008f32:	f107 0110 	add.w	r1, r7, #16
 8008f36:	f107 0308 	add.w	r3, r7, #8
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f7ff fd20 	bl	8008980 <find_volume>
 8008f40:	4603      	mov	r3, r0
 8008f42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8008f46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	f040 8191 	bne.w	8009272 <f_open+0x362>
		dj.obj.fs = fs;
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008f54:	68ba      	ldr	r2, [r7, #8]
 8008f56:	f107 0314 	add.w	r3, r7, #20
 8008f5a:	4611      	mov	r1, r2
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f7ff fc03 	bl	8008768 <follow_path>
 8008f62:	4603      	mov	r3, r0
 8008f64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008f68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d11a      	bne.n	8008fa6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008f70:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008f74:	b25b      	sxtb	r3, r3
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	da03      	bge.n	8008f82 <f_open+0x72>
				res = FR_INVALID_NAME;
 8008f7a:	2306      	movs	r3, #6
 8008f7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008f80:	e011      	b.n	8008fa6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008f82:	79fb      	ldrb	r3, [r7, #7]
 8008f84:	f023 0301 	bic.w	r3, r3, #1
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	bf14      	ite	ne
 8008f8c:	2301      	movne	r3, #1
 8008f8e:	2300      	moveq	r3, #0
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	461a      	mov	r2, r3
 8008f94:	f107 0314 	add.w	r3, r7, #20
 8008f98:	4611      	mov	r1, r2
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f7fe fbd2 	bl	8007744 <chk_lock>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008fa6:	79fb      	ldrb	r3, [r7, #7]
 8008fa8:	f003 031c 	and.w	r3, r3, #28
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d07f      	beq.n	80090b0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008fb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d017      	beq.n	8008fe8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008fb8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008fbc:	2b04      	cmp	r3, #4
 8008fbe:	d10e      	bne.n	8008fde <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008fc0:	f7fe fc1c 	bl	80077fc <enq_lock>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d006      	beq.n	8008fd8 <f_open+0xc8>
 8008fca:	f107 0314 	add.w	r3, r7, #20
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7ff fb03 	bl	80085da <dir_register>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	e000      	b.n	8008fda <f_open+0xca>
 8008fd8:	2312      	movs	r3, #18
 8008fda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008fde:	79fb      	ldrb	r3, [r7, #7]
 8008fe0:	f043 0308 	orr.w	r3, r3, #8
 8008fe4:	71fb      	strb	r3, [r7, #7]
 8008fe6:	e010      	b.n	800900a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008fe8:	7ebb      	ldrb	r3, [r7, #26]
 8008fea:	f003 0311 	and.w	r3, r3, #17
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d003      	beq.n	8008ffa <f_open+0xea>
					res = FR_DENIED;
 8008ff2:	2307      	movs	r3, #7
 8008ff4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008ff8:	e007      	b.n	800900a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008ffa:	79fb      	ldrb	r3, [r7, #7]
 8008ffc:	f003 0304 	and.w	r3, r3, #4
 8009000:	2b00      	cmp	r3, #0
 8009002:	d002      	beq.n	800900a <f_open+0xfa>
 8009004:	2308      	movs	r3, #8
 8009006:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800900a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800900e:	2b00      	cmp	r3, #0
 8009010:	d168      	bne.n	80090e4 <f_open+0x1d4>
 8009012:	79fb      	ldrb	r3, [r7, #7]
 8009014:	f003 0308 	and.w	r3, r3, #8
 8009018:	2b00      	cmp	r3, #0
 800901a:	d063      	beq.n	80090e4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800901c:	f7fe f888 	bl	8007130 <get_fattime>
 8009020:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009024:	330e      	adds	r3, #14
 8009026:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009028:	4618      	mov	r0, r3
 800902a:	f7fe fae1 	bl	80075f0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800902e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009030:	3316      	adds	r3, #22
 8009032:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009034:	4618      	mov	r0, r3
 8009036:	f7fe fadb 	bl	80075f0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800903a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800903c:	330b      	adds	r3, #11
 800903e:	2220      	movs	r2, #32
 8009040:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009046:	4611      	mov	r1, r2
 8009048:	4618      	mov	r0, r3
 800904a:	f7ff fa32 	bl	80084b2 <ld_clust>
 800904e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009054:	2200      	movs	r2, #0
 8009056:	4618      	mov	r0, r3
 8009058:	f7ff fa4a 	bl	80084f0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800905c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800905e:	331c      	adds	r3, #28
 8009060:	2100      	movs	r1, #0
 8009062:	4618      	mov	r0, r3
 8009064:	f7fe fac4 	bl	80075f0 <st_dword>
					fs->wflag = 1;
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	2201      	movs	r2, #1
 800906c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800906e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009070:	2b00      	cmp	r3, #0
 8009072:	d037      	beq.n	80090e4 <f_open+0x1d4>
						dw = fs->winsect;
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009078:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800907a:	f107 0314 	add.w	r3, r7, #20
 800907e:	2200      	movs	r2, #0
 8009080:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009082:	4618      	mov	r0, r3
 8009084:	f7fe ff5d 	bl	8007f42 <remove_chain>
 8009088:	4603      	mov	r3, r0
 800908a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800908e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009092:	2b00      	cmp	r3, #0
 8009094:	d126      	bne.n	80090e4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800909a:	4618      	mov	r0, r3
 800909c:	f7fe fd02 	bl	8007aa4 <move_window>
 80090a0:	4603      	mov	r3, r0
 80090a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80090aa:	3a01      	subs	r2, #1
 80090ac:	60da      	str	r2, [r3, #12]
 80090ae:	e019      	b.n	80090e4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80090b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d115      	bne.n	80090e4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80090b8:	7ebb      	ldrb	r3, [r7, #26]
 80090ba:	f003 0310 	and.w	r3, r3, #16
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d003      	beq.n	80090ca <f_open+0x1ba>
					res = FR_NO_FILE;
 80090c2:	2304      	movs	r3, #4
 80090c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80090c8:	e00c      	b.n	80090e4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80090ca:	79fb      	ldrb	r3, [r7, #7]
 80090cc:	f003 0302 	and.w	r3, r3, #2
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d007      	beq.n	80090e4 <f_open+0x1d4>
 80090d4:	7ebb      	ldrb	r3, [r7, #26]
 80090d6:	f003 0301 	and.w	r3, r3, #1
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d002      	beq.n	80090e4 <f_open+0x1d4>
						res = FR_DENIED;
 80090de:	2307      	movs	r3, #7
 80090e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80090e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d128      	bne.n	800913e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80090ec:	79fb      	ldrb	r3, [r7, #7]
 80090ee:	f003 0308 	and.w	r3, r3, #8
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d003      	beq.n	80090fe <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80090f6:	79fb      	ldrb	r3, [r7, #7]
 80090f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090fc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009106:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800910c:	79fb      	ldrb	r3, [r7, #7]
 800910e:	f023 0301 	bic.w	r3, r3, #1
 8009112:	2b00      	cmp	r3, #0
 8009114:	bf14      	ite	ne
 8009116:	2301      	movne	r3, #1
 8009118:	2300      	moveq	r3, #0
 800911a:	b2db      	uxtb	r3, r3
 800911c:	461a      	mov	r2, r3
 800911e:	f107 0314 	add.w	r3, r7, #20
 8009122:	4611      	mov	r1, r2
 8009124:	4618      	mov	r0, r3
 8009126:	f7fe fb8b 	bl	8007840 <inc_lock>
 800912a:	4602      	mov	r2, r0
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	691b      	ldr	r3, [r3, #16]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d102      	bne.n	800913e <f_open+0x22e>
 8009138:	2302      	movs	r3, #2
 800913a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800913e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009142:	2b00      	cmp	r3, #0
 8009144:	f040 8095 	bne.w	8009272 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800914c:	4611      	mov	r1, r2
 800914e:	4618      	mov	r0, r3
 8009150:	f7ff f9af 	bl	80084b2 <ld_clust>
 8009154:	4602      	mov	r2, r0
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800915a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800915c:	331c      	adds	r3, #28
 800915e:	4618      	mov	r0, r3
 8009160:	f7fe fa08 	bl	8007574 <ld_dword>
 8009164:	4602      	mov	r2, r0
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2200      	movs	r2, #0
 800916e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009170:	693a      	ldr	r2, [r7, #16]
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	88da      	ldrh	r2, [r3, #6]
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	79fa      	ldrb	r2, [r7, #7]
 8009182:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2200      	movs	r2, #0
 8009188:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2200      	movs	r2, #0
 800918e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2200      	movs	r2, #0
 8009194:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	3330      	adds	r3, #48	; 0x30
 800919a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800919e:	2100      	movs	r1, #0
 80091a0:	4618      	mov	r0, r3
 80091a2:	f7fe fa72 	bl	800768a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80091a6:	79fb      	ldrb	r3, [r7, #7]
 80091a8:	f003 0320 	and.w	r3, r3, #32
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d060      	beq.n	8009272 <f_open+0x362>
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	68db      	ldr	r3, [r3, #12]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d05c      	beq.n	8009272 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	68da      	ldr	r2, [r3, #12]
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	895b      	ldrh	r3, [r3, #10]
 80091c4:	025b      	lsls	r3, r3, #9
 80091c6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	689b      	ldr	r3, [r3, #8]
 80091cc:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	68db      	ldr	r3, [r3, #12]
 80091d2:	657b      	str	r3, [r7, #84]	; 0x54
 80091d4:	e016      	b.n	8009204 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80091da:	4618      	mov	r0, r3
 80091dc:	f7fe fd1d 	bl	8007c1a <get_fat>
 80091e0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80091e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d802      	bhi.n	80091ee <f_open+0x2de>
 80091e8:	2302      	movs	r3, #2
 80091ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80091ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80091f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091f4:	d102      	bne.n	80091fc <f_open+0x2ec>
 80091f6:	2301      	movs	r3, #1
 80091f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80091fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80091fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009200:	1ad3      	subs	r3, r2, r3
 8009202:	657b      	str	r3, [r7, #84]	; 0x54
 8009204:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009208:	2b00      	cmp	r3, #0
 800920a:	d103      	bne.n	8009214 <f_open+0x304>
 800920c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800920e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009210:	429a      	cmp	r2, r3
 8009212:	d8e0      	bhi.n	80091d6 <f_open+0x2c6>
				}
				fp->clust = clst;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009218:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800921a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800921e:	2b00      	cmp	r3, #0
 8009220:	d127      	bne.n	8009272 <f_open+0x362>
 8009222:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009228:	2b00      	cmp	r3, #0
 800922a:	d022      	beq.n	8009272 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009230:	4618      	mov	r0, r3
 8009232:	f7fe fcd3 	bl	8007bdc <clust2sect>
 8009236:	6478      	str	r0, [r7, #68]	; 0x44
 8009238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800923a:	2b00      	cmp	r3, #0
 800923c:	d103      	bne.n	8009246 <f_open+0x336>
						res = FR_INT_ERR;
 800923e:	2302      	movs	r3, #2
 8009240:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009244:	e015      	b.n	8009272 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009246:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009248:	0a5a      	lsrs	r2, r3, #9
 800924a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800924c:	441a      	add	r2, r3
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	7858      	ldrb	r0, [r3, #1]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	6a1a      	ldr	r2, [r3, #32]
 8009260:	2301      	movs	r3, #1
 8009262:	f7fe f911 	bl	8007488 <disk_read>
 8009266:	4603      	mov	r3, r0
 8009268:	2b00      	cmp	r3, #0
 800926a:	d002      	beq.n	8009272 <f_open+0x362>
 800926c:	2301      	movs	r3, #1
 800926e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009272:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009276:	2b00      	cmp	r3, #0
 8009278:	d002      	beq.n	8009280 <f_open+0x370>
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2200      	movs	r2, #0
 800927e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009280:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009284:	4618      	mov	r0, r3
 8009286:	3760      	adds	r7, #96	; 0x60
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b08c      	sub	sp, #48	; 0x30
 8009290:	af00      	add	r7, sp, #0
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	607a      	str	r2, [r7, #4]
 8009298:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	2200      	movs	r2, #0
 80092a2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f107 0210 	add.w	r2, r7, #16
 80092aa:	4611      	mov	r1, r2
 80092ac:	4618      	mov	r0, r3
 80092ae:	f7ff fdb3 	bl	8008e18 <validate>
 80092b2:	4603      	mov	r3, r0
 80092b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80092b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d107      	bne.n	80092d0 <f_write+0x44>
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	7d5b      	ldrb	r3, [r3, #21]
 80092c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80092c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d002      	beq.n	80092d6 <f_write+0x4a>
 80092d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80092d4:	e14b      	b.n	800956e <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	7d1b      	ldrb	r3, [r3, #20]
 80092da:	f003 0302 	and.w	r3, r3, #2
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d101      	bne.n	80092e6 <f_write+0x5a>
 80092e2:	2307      	movs	r3, #7
 80092e4:	e143      	b.n	800956e <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	699a      	ldr	r2, [r3, #24]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	441a      	add	r2, r3
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	699b      	ldr	r3, [r3, #24]
 80092f2:	429a      	cmp	r2, r3
 80092f4:	f080 812d 	bcs.w	8009552 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	699b      	ldr	r3, [r3, #24]
 80092fc:	43db      	mvns	r3, r3
 80092fe:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009300:	e127      	b.n	8009552 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	699b      	ldr	r3, [r3, #24]
 8009306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800930a:	2b00      	cmp	r3, #0
 800930c:	f040 80e3 	bne.w	80094d6 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	699b      	ldr	r3, [r3, #24]
 8009314:	0a5b      	lsrs	r3, r3, #9
 8009316:	693a      	ldr	r2, [r7, #16]
 8009318:	8952      	ldrh	r2, [r2, #10]
 800931a:	3a01      	subs	r2, #1
 800931c:	4013      	ands	r3, r2
 800931e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009320:	69bb      	ldr	r3, [r7, #24]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d143      	bne.n	80093ae <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	699b      	ldr	r3, [r3, #24]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d10c      	bne.n	8009348 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009336:	2b00      	cmp	r3, #0
 8009338:	d11a      	bne.n	8009370 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2100      	movs	r1, #0
 800933e:	4618      	mov	r0, r3
 8009340:	f7fe fe64 	bl	800800c <create_chain>
 8009344:	62b8      	str	r0, [r7, #40]	; 0x28
 8009346:	e013      	b.n	8009370 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800934c:	2b00      	cmp	r3, #0
 800934e:	d007      	beq.n	8009360 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	699b      	ldr	r3, [r3, #24]
 8009354:	4619      	mov	r1, r3
 8009356:	68f8      	ldr	r0, [r7, #12]
 8009358:	f7fe fef0 	bl	800813c <clmt_clust>
 800935c:	62b8      	str	r0, [r7, #40]	; 0x28
 800935e:	e007      	b.n	8009370 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009360:	68fa      	ldr	r2, [r7, #12]
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	69db      	ldr	r3, [r3, #28]
 8009366:	4619      	mov	r1, r3
 8009368:	4610      	mov	r0, r2
 800936a:	f7fe fe4f 	bl	800800c <create_chain>
 800936e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009372:	2b00      	cmp	r3, #0
 8009374:	f000 80f2 	beq.w	800955c <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800937a:	2b01      	cmp	r3, #1
 800937c:	d104      	bne.n	8009388 <f_write+0xfc>
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2202      	movs	r2, #2
 8009382:	755a      	strb	r2, [r3, #21]
 8009384:	2302      	movs	r3, #2
 8009386:	e0f2      	b.n	800956e <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800938a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800938e:	d104      	bne.n	800939a <f_write+0x10e>
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2201      	movs	r2, #1
 8009394:	755a      	strb	r2, [r3, #21]
 8009396:	2301      	movs	r3, #1
 8009398:	e0e9      	b.n	800956e <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800939e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	689b      	ldr	r3, [r3, #8]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d102      	bne.n	80093ae <f_write+0x122>
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093ac:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	7d1b      	ldrb	r3, [r3, #20]
 80093b2:	b25b      	sxtb	r3, r3
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	da18      	bge.n	80093ea <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	7858      	ldrb	r0, [r3, #1]
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	6a1a      	ldr	r2, [r3, #32]
 80093c6:	2301      	movs	r3, #1
 80093c8:	f7fe f87e 	bl	80074c8 <disk_write>
 80093cc:	4603      	mov	r3, r0
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d004      	beq.n	80093dc <f_write+0x150>
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2201      	movs	r2, #1
 80093d6:	755a      	strb	r2, [r3, #21]
 80093d8:	2301      	movs	r3, #1
 80093da:	e0c8      	b.n	800956e <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	7d1b      	ldrb	r3, [r3, #20]
 80093e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093e4:	b2da      	uxtb	r2, r3
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80093ea:	693a      	ldr	r2, [r7, #16]
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	69db      	ldr	r3, [r3, #28]
 80093f0:	4619      	mov	r1, r3
 80093f2:	4610      	mov	r0, r2
 80093f4:	f7fe fbf2 	bl	8007bdc <clust2sect>
 80093f8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d104      	bne.n	800940a <f_write+0x17e>
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2202      	movs	r2, #2
 8009404:	755a      	strb	r2, [r3, #21]
 8009406:	2302      	movs	r3, #2
 8009408:	e0b1      	b.n	800956e <f_write+0x2e2>
			sect += csect;
 800940a:	697a      	ldr	r2, [r7, #20]
 800940c:	69bb      	ldr	r3, [r7, #24]
 800940e:	4413      	add	r3, r2
 8009410:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	0a5b      	lsrs	r3, r3, #9
 8009416:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009418:	6a3b      	ldr	r3, [r7, #32]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d03c      	beq.n	8009498 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800941e:	69ba      	ldr	r2, [r7, #24]
 8009420:	6a3b      	ldr	r3, [r7, #32]
 8009422:	4413      	add	r3, r2
 8009424:	693a      	ldr	r2, [r7, #16]
 8009426:	8952      	ldrh	r2, [r2, #10]
 8009428:	4293      	cmp	r3, r2
 800942a:	d905      	bls.n	8009438 <f_write+0x1ac>
					cc = fs->csize - csect;
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	895b      	ldrh	r3, [r3, #10]
 8009430:	461a      	mov	r2, r3
 8009432:	69bb      	ldr	r3, [r7, #24]
 8009434:	1ad3      	subs	r3, r2, r3
 8009436:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	7858      	ldrb	r0, [r3, #1]
 800943c:	6a3b      	ldr	r3, [r7, #32]
 800943e:	697a      	ldr	r2, [r7, #20]
 8009440:	69f9      	ldr	r1, [r7, #28]
 8009442:	f7fe f841 	bl	80074c8 <disk_write>
 8009446:	4603      	mov	r3, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d004      	beq.n	8009456 <f_write+0x1ca>
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2201      	movs	r2, #1
 8009450:	755a      	strb	r2, [r3, #21]
 8009452:	2301      	movs	r3, #1
 8009454:	e08b      	b.n	800956e <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	6a1a      	ldr	r2, [r3, #32]
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	1ad3      	subs	r3, r2, r3
 800945e:	6a3a      	ldr	r2, [r7, #32]
 8009460:	429a      	cmp	r2, r3
 8009462:	d915      	bls.n	8009490 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	6a1a      	ldr	r2, [r3, #32]
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	1ad3      	subs	r3, r2, r3
 8009472:	025b      	lsls	r3, r3, #9
 8009474:	69fa      	ldr	r2, [r7, #28]
 8009476:	4413      	add	r3, r2
 8009478:	f44f 7200 	mov.w	r2, #512	; 0x200
 800947c:	4619      	mov	r1, r3
 800947e:	f7fe f8e3 	bl	8007648 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	7d1b      	ldrb	r3, [r3, #20]
 8009486:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800948a:	b2da      	uxtb	r2, r3
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009490:	6a3b      	ldr	r3, [r7, #32]
 8009492:	025b      	lsls	r3, r3, #9
 8009494:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8009496:	e03f      	b.n	8009518 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	6a1b      	ldr	r3, [r3, #32]
 800949c:	697a      	ldr	r2, [r7, #20]
 800949e:	429a      	cmp	r2, r3
 80094a0:	d016      	beq.n	80094d0 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	699a      	ldr	r2, [r3, #24]
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d210      	bcs.n	80094d0 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	7858      	ldrb	r0, [r3, #1]
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80094b8:	2301      	movs	r3, #1
 80094ba:	697a      	ldr	r2, [r7, #20]
 80094bc:	f7fd ffe4 	bl	8007488 <disk_read>
 80094c0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d004      	beq.n	80094d0 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2201      	movs	r2, #1
 80094ca:	755a      	strb	r2, [r3, #21]
 80094cc:	2301      	movs	r3, #1
 80094ce:	e04e      	b.n	800956e <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	697a      	ldr	r2, [r7, #20]
 80094d4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	699b      	ldr	r3, [r3, #24]
 80094da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094de:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80094e2:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80094e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d901      	bls.n	80094f0 <f_write+0x264>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	699b      	ldr	r3, [r3, #24]
 80094fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094fe:	4413      	add	r3, r2
 8009500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009502:	69f9      	ldr	r1, [r7, #28]
 8009504:	4618      	mov	r0, r3
 8009506:	f7fe f89f 	bl	8007648 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	7d1b      	ldrb	r3, [r3, #20]
 800950e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009512:	b2da      	uxtb	r2, r3
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009518:	69fa      	ldr	r2, [r7, #28]
 800951a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800951c:	4413      	add	r3, r2
 800951e:	61fb      	str	r3, [r7, #28]
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	699a      	ldr	r2, [r3, #24]
 8009524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009526:	441a      	add	r2, r3
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	619a      	str	r2, [r3, #24]
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	68da      	ldr	r2, [r3, #12]
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	699b      	ldr	r3, [r3, #24]
 8009534:	429a      	cmp	r2, r3
 8009536:	bf38      	it	cc
 8009538:	461a      	movcc	r2, r3
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	60da      	str	r2, [r3, #12]
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	681a      	ldr	r2, [r3, #0]
 8009542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009544:	441a      	add	r2, r3
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	601a      	str	r2, [r3, #0]
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800954e:	1ad3      	subs	r3, r2, r3
 8009550:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2b00      	cmp	r3, #0
 8009556:	f47f aed4 	bne.w	8009302 <f_write+0x76>
 800955a:	e000      	b.n	800955e <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800955c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	7d1b      	ldrb	r3, [r3, #20]
 8009562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009566:	b2da      	uxtb	r2, r3
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800956c:	2300      	movs	r3, #0
}
 800956e:	4618      	mov	r0, r3
 8009570:	3730      	adds	r7, #48	; 0x30
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}

08009576 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009576:	b580      	push	{r7, lr}
 8009578:	b086      	sub	sp, #24
 800957a:	af00      	add	r7, sp, #0
 800957c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f107 0208 	add.w	r2, r7, #8
 8009584:	4611      	mov	r1, r2
 8009586:	4618      	mov	r0, r3
 8009588:	f7ff fc46 	bl	8008e18 <validate>
 800958c:	4603      	mov	r3, r0
 800958e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009590:	7dfb      	ldrb	r3, [r7, #23]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d168      	bne.n	8009668 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	7d1b      	ldrb	r3, [r3, #20]
 800959a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d062      	beq.n	8009668 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	7d1b      	ldrb	r3, [r3, #20]
 80095a6:	b25b      	sxtb	r3, r3
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	da15      	bge.n	80095d8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	7858      	ldrb	r0, [r3, #1]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6a1a      	ldr	r2, [r3, #32]
 80095ba:	2301      	movs	r3, #1
 80095bc:	f7fd ff84 	bl	80074c8 <disk_write>
 80095c0:	4603      	mov	r3, r0
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d001      	beq.n	80095ca <f_sync+0x54>
 80095c6:	2301      	movs	r3, #1
 80095c8:	e04f      	b.n	800966a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	7d1b      	ldrb	r3, [r3, #20]
 80095ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095d2:	b2da      	uxtb	r2, r3
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80095d8:	f7fd fdaa 	bl	8007130 <get_fattime>
 80095dc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80095de:	68ba      	ldr	r2, [r7, #8]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e4:	4619      	mov	r1, r3
 80095e6:	4610      	mov	r0, r2
 80095e8:	f7fe fa5c 	bl	8007aa4 <move_window>
 80095ec:	4603      	mov	r3, r0
 80095ee:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80095f0:	7dfb      	ldrb	r3, [r7, #23]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d138      	bne.n	8009668 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095fa:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	330b      	adds	r3, #11
 8009600:	781a      	ldrb	r2, [r3, #0]
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	330b      	adds	r3, #11
 8009606:	f042 0220 	orr.w	r2, r2, #32
 800960a:	b2d2      	uxtb	r2, r2
 800960c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6818      	ldr	r0, [r3, #0]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	689b      	ldr	r3, [r3, #8]
 8009616:	461a      	mov	r2, r3
 8009618:	68f9      	ldr	r1, [r7, #12]
 800961a:	f7fe ff69 	bl	80084f0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	f103 021c 	add.w	r2, r3, #28
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	68db      	ldr	r3, [r3, #12]
 8009628:	4619      	mov	r1, r3
 800962a:	4610      	mov	r0, r2
 800962c:	f7fd ffe0 	bl	80075f0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	3316      	adds	r3, #22
 8009634:	6939      	ldr	r1, [r7, #16]
 8009636:	4618      	mov	r0, r3
 8009638:	f7fd ffda 	bl	80075f0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	3312      	adds	r3, #18
 8009640:	2100      	movs	r1, #0
 8009642:	4618      	mov	r0, r3
 8009644:	f7fd ffb9 	bl	80075ba <st_word>
					fs->wflag = 1;
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	2201      	movs	r2, #1
 800964c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	4618      	mov	r0, r3
 8009652:	f7fe fa55 	bl	8007b00 <sync_fs>
 8009656:	4603      	mov	r3, r0
 8009658:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	7d1b      	ldrb	r3, [r3, #20]
 800965e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009662:	b2da      	uxtb	r2, r3
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009668:	7dfb      	ldrb	r3, [r7, #23]
}
 800966a:	4618      	mov	r0, r3
 800966c:	3718      	adds	r7, #24
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}

08009672 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009672:	b580      	push	{r7, lr}
 8009674:	b084      	sub	sp, #16
 8009676:	af00      	add	r7, sp, #0
 8009678:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f7ff ff7b 	bl	8009576 <f_sync>
 8009680:	4603      	mov	r3, r0
 8009682:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009684:	7bfb      	ldrb	r3, [r7, #15]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d118      	bne.n	80096bc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f107 0208 	add.w	r2, r7, #8
 8009690:	4611      	mov	r1, r2
 8009692:	4618      	mov	r0, r3
 8009694:	f7ff fbc0 	bl	8008e18 <validate>
 8009698:	4603      	mov	r3, r0
 800969a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800969c:	7bfb      	ldrb	r3, [r7, #15]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d10c      	bne.n	80096bc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	691b      	ldr	r3, [r3, #16]
 80096a6:	4618      	mov	r0, r3
 80096a8:	f7fe f958 	bl	800795c <dec_lock>
 80096ac:	4603      	mov	r3, r0
 80096ae:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80096b0:	7bfb      	ldrb	r3, [r7, #15]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d102      	bne.n	80096bc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2200      	movs	r2, #0
 80096ba:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80096bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3710      	adds	r7, #16
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}

080096c6 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 80096c6:	b580      	push	{r7, lr}
 80096c8:	b084      	sub	sp, #16
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	6078      	str	r0, [r7, #4]
 80096ce:	460b      	mov	r3, r1
 80096d0:	70fb      	strb	r3, [r7, #3]

	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
		putc_bfd(pb, '\r');
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	db25      	blt.n	800972a <putc_bfd+0x64>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	1c5a      	adds	r2, r3, #1
 80096e2:	60fa      	str	r2, [r7, #12]
 80096e4:	687a      	ldr	r2, [r7, #4]
 80096e6:	4413      	add	r3, r2
 80096e8:	78fa      	ldrb	r2, [r7, #3]
 80096ea:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2b3c      	cmp	r3, #60	; 0x3c
 80096f0:	dd12      	ble.n	8009718 <putc_bfd+0x52>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6818      	ldr	r0, [r3, #0]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f103 010c 	add.w	r1, r3, #12
 80096fc:	68fa      	ldr	r2, [r7, #12]
 80096fe:	f107 0308 	add.w	r3, r7, #8
 8009702:	f7ff fdc3 	bl	800928c <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8009706:	68ba      	ldr	r2, [r7, #8]
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	429a      	cmp	r2, r3
 800970c:	d101      	bne.n	8009712 <putc_bfd+0x4c>
 800970e:	2300      	movs	r3, #0
 8009710:	e001      	b.n	8009716 <putc_bfd+0x50>
 8009712:	f04f 33ff 	mov.w	r3, #4294967295
 8009716:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	68fa      	ldr	r2, [r7, #12]
 800971c:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	689b      	ldr	r3, [r3, #8]
 8009722:	1c5a      	adds	r2, r3, #1
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	609a      	str	r2, [r3, #8]
 8009728:	e000      	b.n	800972c <putc_bfd+0x66>
	if (i < 0) return;
 800972a:	bf00      	nop
}
 800972c:	3710      	adds	r7, #16
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8009732:	b580      	push	{r7, lr}
 8009734:	b084      	sub	sp, #16
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	2b00      	cmp	r3, #0
 8009740:	db16      	blt.n	8009770 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6818      	ldr	r0, [r3, #0]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f103 010c 	add.w	r1, r3, #12
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	461a      	mov	r2, r3
 8009752:	f107 030c 	add.w	r3, r7, #12
 8009756:	f7ff fd99 	bl	800928c <f_write>
 800975a:	4603      	mov	r3, r0
 800975c:	2b00      	cmp	r3, #0
 800975e:	d107      	bne.n	8009770 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	68fa      	ldr	r2, [r7, #12]
 8009766:	4293      	cmp	r3, r2
 8009768:	d102      	bne.n	8009770 <putc_flush+0x3e>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	689b      	ldr	r3, [r3, #8]
 800976e:	e001      	b.n	8009774 <putc_flush+0x42>
	return EOF;
 8009770:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009774:	4618      	mov	r0, r3
 8009776:	3710      	adds	r7, #16
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800977c:	b480      	push	{r7}
 800977e:	b083      	sub	sp, #12
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	683a      	ldr	r2, [r7, #0]
 800978a:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2200      	movs	r2, #0
 8009790:	605a      	str	r2, [r3, #4]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	685a      	ldr	r2, [r3, #4]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	609a      	str	r2, [r3, #8]
}
 800979a:	bf00      	nop
 800979c:	370c      	adds	r7, #12
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr
	...

080097a8 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 80097a8:	b40e      	push	{r1, r2, r3}
 80097aa:	b580      	push	{r7, lr}
 80097ac:	b0a7      	sub	sp, #156	; 0x9c
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 80097b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80097b6:	6879      	ldr	r1, [r7, #4]
 80097b8:	4618      	mov	r0, r3
 80097ba:	f7ff ffdf 	bl	800977c <putc_init>

	va_start(arp, fmt);
 80097be:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80097c2:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 80097c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80097c8:	1c5a      	adds	r2, r3, #1
 80097ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 80097d4:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80097d8:	2b00      	cmp	r3, #0
 80097da:	f000 81f4 	beq.w	8009bc6 <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 80097de:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80097e2:	2b25      	cmp	r3, #37	; 0x25
 80097e4:	d008      	beq.n	80097f8 <f_printf+0x50>
			putc_bfd(&pb, c);
 80097e6:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 80097ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80097ee:	4611      	mov	r1, r2
 80097f0:	4618      	mov	r0, r3
 80097f2:	f7ff ff68 	bl	80096c6 <putc_bfd>
			continue;
 80097f6:	e1e5      	b.n	8009bc4 <f_printf+0x41c>
		}
		w = f = 0;
 80097f8:	2300      	movs	r3, #0
 80097fa:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80097fe:	2300      	movs	r3, #0
 8009800:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 8009804:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009808:	1c5a      	adds	r2, r3, #1
 800980a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800980e:	781b      	ldrb	r3, [r3, #0]
 8009810:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8009814:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009818:	2b30      	cmp	r3, #48	; 0x30
 800981a:	d10b      	bne.n	8009834 <f_printf+0x8c>
			f = 1; c = *fmt++;
 800981c:	2301      	movs	r3, #1
 800981e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8009822:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009826:	1c5a      	adds	r2, r3, #1
 8009828:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800982c:	781b      	ldrb	r3, [r3, #0]
 800982e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8009832:	e024      	b.n	800987e <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8009834:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009838:	2b2d      	cmp	r3, #45	; 0x2d
 800983a:	d120      	bne.n	800987e <f_printf+0xd6>
				f = 2; c = *fmt++;
 800983c:	2302      	movs	r3, #2
 800983e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8009842:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009846:	1c5a      	adds	r2, r3, #1
 8009848:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800984c:	781b      	ldrb	r3, [r3, #0]
 800984e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8009852:	e014      	b.n	800987e <f_printf+0xd6>
			w = w * 10 + c - '0';
 8009854:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009858:	4613      	mov	r3, r2
 800985a:	009b      	lsls	r3, r3, #2
 800985c:	4413      	add	r3, r2
 800985e:	005b      	lsls	r3, r3, #1
 8009860:	461a      	mov	r2, r3
 8009862:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009866:	4413      	add	r3, r2
 8009868:	3b30      	subs	r3, #48	; 0x30
 800986a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800986e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009872:	1c5a      	adds	r2, r3, #1
 8009874:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009878:	781b      	ldrb	r3, [r3, #0]
 800987a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800987e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009882:	2b2f      	cmp	r3, #47	; 0x2f
 8009884:	d903      	bls.n	800988e <f_printf+0xe6>
 8009886:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800988a:	2b39      	cmp	r3, #57	; 0x39
 800988c:	d9e2      	bls.n	8009854 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800988e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009892:	2b6c      	cmp	r3, #108	; 0x6c
 8009894:	d003      	beq.n	800989e <f_printf+0xf6>
 8009896:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800989a:	2b4c      	cmp	r3, #76	; 0x4c
 800989c:	d10d      	bne.n	80098ba <f_printf+0x112>
			f |= 4; c = *fmt++;
 800989e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80098a2:	f043 0304 	orr.w	r3, r3, #4
 80098a6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80098aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80098ae:	1c5a      	adds	r2, r3, #1
 80098b0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80098b4:	781b      	ldrb	r3, [r3, #0]
 80098b6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 80098ba:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80098be:	2b00      	cmp	r3, #0
 80098c0:	f000 8183 	beq.w	8009bca <f_printf+0x422>
		d = c;
 80098c4:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80098c8:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 80098cc:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80098d0:	2b60      	cmp	r3, #96	; 0x60
 80098d2:	d908      	bls.n	80098e6 <f_printf+0x13e>
 80098d4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80098d8:	2b7a      	cmp	r3, #122	; 0x7a
 80098da:	d804      	bhi.n	80098e6 <f_printf+0x13e>
 80098dc:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80098e0:	3b20      	subs	r3, #32
 80098e2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 80098e6:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80098ea:	3b42      	subs	r3, #66	; 0x42
 80098ec:	2b16      	cmp	r3, #22
 80098ee:	f200 8098 	bhi.w	8009a22 <f_printf+0x27a>
 80098f2:	a201      	add	r2, pc, #4	; (adr r2, 80098f8 <f_printf+0x150>)
 80098f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098f8:	08009a03 	.word	0x08009a03
 80098fc:	080099eb 	.word	0x080099eb
 8009900:	08009a13 	.word	0x08009a13
 8009904:	08009a23 	.word	0x08009a23
 8009908:	08009a23 	.word	0x08009a23
 800990c:	08009a23 	.word	0x08009a23
 8009910:	08009a23 	.word	0x08009a23
 8009914:	08009a23 	.word	0x08009a23
 8009918:	08009a23 	.word	0x08009a23
 800991c:	08009a23 	.word	0x08009a23
 8009920:	08009a23 	.word	0x08009a23
 8009924:	08009a23 	.word	0x08009a23
 8009928:	08009a23 	.word	0x08009a23
 800992c:	08009a0b 	.word	0x08009a0b
 8009930:	08009a23 	.word	0x08009a23
 8009934:	08009a23 	.word	0x08009a23
 8009938:	08009a23 	.word	0x08009a23
 800993c:	08009955 	.word	0x08009955
 8009940:	08009a23 	.word	0x08009a23
 8009944:	08009a13 	.word	0x08009a13
 8009948:	08009a23 	.word	0x08009a23
 800994c:	08009a23 	.word	0x08009a23
 8009950:	08009a1b 	.word	0x08009a1b
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8009954:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009956:	1d1a      	adds	r2, r3, #4
 8009958:	67ba      	str	r2, [r7, #120]	; 0x78
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800995e:	2300      	movs	r3, #0
 8009960:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009964:	e004      	b.n	8009970 <f_printf+0x1c8>
 8009966:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800996a:	3301      	adds	r3, #1
 800996c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009970:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009972:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009976:	4413      	add	r3, r2
 8009978:	781b      	ldrb	r3, [r3, #0]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d1f3      	bne.n	8009966 <f_printf+0x1be>
			if (!(f & 2)) {
 800997e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009982:	f003 0302 	and.w	r3, r3, #2
 8009986:	2b00      	cmp	r3, #0
 8009988:	d11a      	bne.n	80099c0 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800998a:	e005      	b.n	8009998 <f_printf+0x1f0>
 800998c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009990:	2120      	movs	r1, #32
 8009992:	4618      	mov	r0, r3
 8009994:	f7ff fe97 	bl	80096c6 <putc_bfd>
 8009998:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800999c:	1c5a      	adds	r2, r3, #1
 800999e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80099a2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d8f0      	bhi.n	800998c <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 80099aa:	e009      	b.n	80099c0 <f_printf+0x218>
 80099ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80099ae:	1c5a      	adds	r2, r3, #1
 80099b0:	67fa      	str	r2, [r7, #124]	; 0x7c
 80099b2:	781a      	ldrb	r2, [r3, #0]
 80099b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80099b8:	4611      	mov	r1, r2
 80099ba:	4618      	mov	r0, r3
 80099bc:	f7ff fe83 	bl	80096c6 <putc_bfd>
 80099c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80099c2:	781b      	ldrb	r3, [r3, #0]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d1f1      	bne.n	80099ac <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 80099c8:	e005      	b.n	80099d6 <f_printf+0x22e>
 80099ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80099ce:	2120      	movs	r1, #32
 80099d0:	4618      	mov	r0, r3
 80099d2:	f7ff fe78 	bl	80096c6 <putc_bfd>
 80099d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80099da:	1c5a      	adds	r2, r3, #1
 80099dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80099e0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80099e4:	429a      	cmp	r2, r3
 80099e6:	d8f0      	bhi.n	80099ca <f_printf+0x222>
			continue;
 80099e8:	e0ec      	b.n	8009bc4 <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 80099ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80099ec:	1d1a      	adds	r2, r3, #4
 80099ee:	67ba      	str	r2, [r7, #120]	; 0x78
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	b2da      	uxtb	r2, r3
 80099f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80099f8:	4611      	mov	r1, r2
 80099fa:	4618      	mov	r0, r3
 80099fc:	f7ff fe63 	bl	80096c6 <putc_bfd>
 8009a00:	e0e0      	b.n	8009bc4 <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 8009a02:	2302      	movs	r3, #2
 8009a04:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8009a08:	e014      	b.n	8009a34 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 8009a0a:	2308      	movs	r3, #8
 8009a0c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8009a10:	e010      	b.n	8009a34 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8009a12:	230a      	movs	r3, #10
 8009a14:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8009a18:	e00c      	b.n	8009a34 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8009a1a:	2310      	movs	r3, #16
 8009a1c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8009a20:	e008      	b.n	8009a34 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8009a22:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8009a26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009a2a:	4611      	mov	r1, r2
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f7ff fe4a 	bl	80096c6 <putc_bfd>
 8009a32:	e0c7      	b.n	8009bc4 <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8009a34:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009a38:	f003 0304 	and.w	r3, r3, #4
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d004      	beq.n	8009a4a <f_printf+0x2a2>
 8009a40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a42:	1d1a      	adds	r2, r3, #4
 8009a44:	67ba      	str	r2, [r7, #120]	; 0x78
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	e00c      	b.n	8009a64 <f_printf+0x2bc>
 8009a4a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009a4e:	2b44      	cmp	r3, #68	; 0x44
 8009a50:	d104      	bne.n	8009a5c <f_printf+0x2b4>
 8009a52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a54:	1d1a      	adds	r2, r3, #4
 8009a56:	67ba      	str	r2, [r7, #120]	; 0x78
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	e003      	b.n	8009a64 <f_printf+0x2bc>
 8009a5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a5e:	1d1a      	adds	r2, r3, #4
 8009a60:	67ba      	str	r2, [r7, #120]	; 0x78
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8009a68:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009a6c:	2b44      	cmp	r3, #68	; 0x44
 8009a6e:	d10e      	bne.n	8009a8e <f_printf+0x2e6>
 8009a70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	da0a      	bge.n	8009a8e <f_printf+0x2e6>
			v = 0 - v;
 8009a78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009a7c:	425b      	negs	r3, r3
 8009a7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 8009a82:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009a86:	f043 0308 	orr.w	r3, r3, #8
 8009a8a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 8009a94:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 8009a98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009a9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009aa0:	fb02 f201 	mul.w	r2, r2, r1
 8009aa4:	1a9b      	subs	r3, r3, r2
 8009aa6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 8009aaa:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8009aae:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ab6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8009aba:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009abe:	2b09      	cmp	r3, #9
 8009ac0:	d90b      	bls.n	8009ada <f_printf+0x332>
 8009ac2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009ac6:	2b78      	cmp	r3, #120	; 0x78
 8009ac8:	d101      	bne.n	8009ace <f_printf+0x326>
 8009aca:	2227      	movs	r2, #39	; 0x27
 8009acc:	e000      	b.n	8009ad0 <f_printf+0x328>
 8009ace:	2207      	movs	r2, #7
 8009ad0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009ad4:	4413      	add	r3, r2
 8009ad6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 8009ada:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009ade:	1c5a      	adds	r2, r3, #1
 8009ae0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8009ae4:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8009ae8:	3230      	adds	r2, #48	; 0x30
 8009aea:	b2d2      	uxtb	r2, r2
 8009aec:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8009af0:	440b      	add	r3, r1
 8009af2:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8009af6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d003      	beq.n	8009b06 <f_printf+0x35e>
 8009afe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b02:	2b1f      	cmp	r3, #31
 8009b04:	d9c6      	bls.n	8009a94 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8009b06:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009b0a:	f003 0308 	and.w	r3, r3, #8
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d00a      	beq.n	8009b28 <f_printf+0x380>
 8009b12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b16:	1c5a      	adds	r2, r3, #1
 8009b18:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8009b1c:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8009b20:	4413      	add	r3, r2
 8009b22:	222d      	movs	r2, #45	; 0x2d
 8009b24:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8009b28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009b30:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009b34:	f003 0301 	and.w	r3, r3, #1
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d001      	beq.n	8009b40 <f_printf+0x398>
 8009b3c:	2330      	movs	r3, #48	; 0x30
 8009b3e:	e000      	b.n	8009b42 <f_printf+0x39a>
 8009b40:	2320      	movs	r3, #32
 8009b42:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8009b46:	e007      	b.n	8009b58 <f_printf+0x3b0>
 8009b48:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8009b4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009b50:	4611      	mov	r1, r2
 8009b52:	4618      	mov	r0, r3
 8009b54:	f7ff fdb7 	bl	80096c6 <putc_bfd>
 8009b58:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009b5c:	f003 0302 	and.w	r3, r3, #2
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d108      	bne.n	8009b76 <f_printf+0x3ce>
 8009b64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009b68:	1c5a      	adds	r2, r3, #1
 8009b6a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009b6e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009b72:	429a      	cmp	r2, r3
 8009b74:	d8e8      	bhi.n	8009b48 <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 8009b76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b7a:	3b01      	subs	r3, #1
 8009b7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009b80:	f107 020c 	add.w	r2, r7, #12
 8009b84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b88:	4413      	add	r3, r2
 8009b8a:	781a      	ldrb	r2, [r3, #0]
 8009b8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009b90:	4611      	mov	r1, r2
 8009b92:	4618      	mov	r0, r3
 8009b94:	f7ff fd97 	bl	80096c6 <putc_bfd>
		} while (i);
 8009b98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d1ea      	bne.n	8009b76 <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 8009ba0:	e007      	b.n	8009bb2 <f_printf+0x40a>
 8009ba2:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8009ba6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009baa:	4611      	mov	r1, r2
 8009bac:	4618      	mov	r0, r3
 8009bae:	f7ff fd8a 	bl	80096c6 <putc_bfd>
 8009bb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009bb6:	1c5a      	adds	r2, r3, #1
 8009bb8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009bbc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d8ee      	bhi.n	8009ba2 <f_printf+0x3fa>
		c = *fmt++;
 8009bc4:	e5fe      	b.n	80097c4 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 8009bc6:	bf00      	nop
 8009bc8:	e000      	b.n	8009bcc <f_printf+0x424>
		if (!c) break;
 8009bca:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8009bcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f7ff fdae 	bl	8009732 <putc_flush>
 8009bd6:	4603      	mov	r3, r0
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	379c      	adds	r7, #156	; 0x9c
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009be2:	b003      	add	sp, #12
 8009be4:	4770      	bx	lr
 8009be6:	bf00      	nop

08009be8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b087      	sub	sp, #28
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	60f8      	str	r0, [r7, #12]
 8009bf0:	60b9      	str	r1, [r7, #8]
 8009bf2:	4613      	mov	r3, r2
 8009bf4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009bfe:	4b1f      	ldr	r3, [pc, #124]	; (8009c7c <FATFS_LinkDriverEx+0x94>)
 8009c00:	7a5b      	ldrb	r3, [r3, #9]
 8009c02:	b2db      	uxtb	r3, r3
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d131      	bne.n	8009c6c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009c08:	4b1c      	ldr	r3, [pc, #112]	; (8009c7c <FATFS_LinkDriverEx+0x94>)
 8009c0a:	7a5b      	ldrb	r3, [r3, #9]
 8009c0c:	b2db      	uxtb	r3, r3
 8009c0e:	461a      	mov	r2, r3
 8009c10:	4b1a      	ldr	r3, [pc, #104]	; (8009c7c <FATFS_LinkDriverEx+0x94>)
 8009c12:	2100      	movs	r1, #0
 8009c14:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009c16:	4b19      	ldr	r3, [pc, #100]	; (8009c7c <FATFS_LinkDriverEx+0x94>)
 8009c18:	7a5b      	ldrb	r3, [r3, #9]
 8009c1a:	b2db      	uxtb	r3, r3
 8009c1c:	4a17      	ldr	r2, [pc, #92]	; (8009c7c <FATFS_LinkDriverEx+0x94>)
 8009c1e:	009b      	lsls	r3, r3, #2
 8009c20:	4413      	add	r3, r2
 8009c22:	68fa      	ldr	r2, [r7, #12]
 8009c24:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009c26:	4b15      	ldr	r3, [pc, #84]	; (8009c7c <FATFS_LinkDriverEx+0x94>)
 8009c28:	7a5b      	ldrb	r3, [r3, #9]
 8009c2a:	b2db      	uxtb	r3, r3
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	4b13      	ldr	r3, [pc, #76]	; (8009c7c <FATFS_LinkDriverEx+0x94>)
 8009c30:	4413      	add	r3, r2
 8009c32:	79fa      	ldrb	r2, [r7, #7]
 8009c34:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009c36:	4b11      	ldr	r3, [pc, #68]	; (8009c7c <FATFS_LinkDriverEx+0x94>)
 8009c38:	7a5b      	ldrb	r3, [r3, #9]
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	1c5a      	adds	r2, r3, #1
 8009c3e:	b2d1      	uxtb	r1, r2
 8009c40:	4a0e      	ldr	r2, [pc, #56]	; (8009c7c <FATFS_LinkDriverEx+0x94>)
 8009c42:	7251      	strb	r1, [r2, #9]
 8009c44:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009c46:	7dbb      	ldrb	r3, [r7, #22]
 8009c48:	3330      	adds	r3, #48	; 0x30
 8009c4a:	b2da      	uxtb	r2, r3
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	3301      	adds	r3, #1
 8009c54:	223a      	movs	r2, #58	; 0x3a
 8009c56:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	3302      	adds	r3, #2
 8009c5c:	222f      	movs	r2, #47	; 0x2f
 8009c5e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	3303      	adds	r3, #3
 8009c64:	2200      	movs	r2, #0
 8009c66:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009c6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	371c      	adds	r7, #28
 8009c72:	46bd      	mov	sp, r7
 8009c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c78:	4770      	bx	lr
 8009c7a:	bf00      	nop
 8009c7c:	200000dc 	.word	0x200000dc

08009c80 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b082      	sub	sp, #8
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	6839      	ldr	r1, [r7, #0]
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f7ff ffaa 	bl	8009be8 <FATFS_LinkDriverEx>
 8009c94:	4603      	mov	r3, r0
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3708      	adds	r7, #8
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}
	...

08009ca0 <__errno>:
 8009ca0:	4b01      	ldr	r3, [pc, #4]	; (8009ca8 <__errno+0x8>)
 8009ca2:	6818      	ldr	r0, [r3, #0]
 8009ca4:	4770      	bx	lr
 8009ca6:	bf00      	nop
 8009ca8:	2000002c 	.word	0x2000002c

08009cac <__libc_init_array>:
 8009cac:	b570      	push	{r4, r5, r6, lr}
 8009cae:	4d0d      	ldr	r5, [pc, #52]	; (8009ce4 <__libc_init_array+0x38>)
 8009cb0:	4c0d      	ldr	r4, [pc, #52]	; (8009ce8 <__libc_init_array+0x3c>)
 8009cb2:	1b64      	subs	r4, r4, r5
 8009cb4:	10a4      	asrs	r4, r4, #2
 8009cb6:	2600      	movs	r6, #0
 8009cb8:	42a6      	cmp	r6, r4
 8009cba:	d109      	bne.n	8009cd0 <__libc_init_array+0x24>
 8009cbc:	4d0b      	ldr	r5, [pc, #44]	; (8009cec <__libc_init_array+0x40>)
 8009cbe:	4c0c      	ldr	r4, [pc, #48]	; (8009cf0 <__libc_init_array+0x44>)
 8009cc0:	f000 fce6 	bl	800a690 <_init>
 8009cc4:	1b64      	subs	r4, r4, r5
 8009cc6:	10a4      	asrs	r4, r4, #2
 8009cc8:	2600      	movs	r6, #0
 8009cca:	42a6      	cmp	r6, r4
 8009ccc:	d105      	bne.n	8009cda <__libc_init_array+0x2e>
 8009cce:	bd70      	pop	{r4, r5, r6, pc}
 8009cd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cd4:	4798      	blx	r3
 8009cd6:	3601      	adds	r6, #1
 8009cd8:	e7ee      	b.n	8009cb8 <__libc_init_array+0xc>
 8009cda:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cde:	4798      	blx	r3
 8009ce0:	3601      	adds	r6, #1
 8009ce2:	e7f2      	b.n	8009cca <__libc_init_array+0x1e>
 8009ce4:	0800a8b4 	.word	0x0800a8b4
 8009ce8:	0800a8b4 	.word	0x0800a8b4
 8009cec:	0800a8b4 	.word	0x0800a8b4
 8009cf0:	0800a8b8 	.word	0x0800a8b8

08009cf4 <memset>:
 8009cf4:	4402      	add	r2, r0
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d100      	bne.n	8009cfe <memset+0xa>
 8009cfc:	4770      	bx	lr
 8009cfe:	f803 1b01 	strb.w	r1, [r3], #1
 8009d02:	e7f9      	b.n	8009cf8 <memset+0x4>

08009d04 <_puts_r>:
 8009d04:	b570      	push	{r4, r5, r6, lr}
 8009d06:	460e      	mov	r6, r1
 8009d08:	4605      	mov	r5, r0
 8009d0a:	b118      	cbz	r0, 8009d14 <_puts_r+0x10>
 8009d0c:	6983      	ldr	r3, [r0, #24]
 8009d0e:	b90b      	cbnz	r3, 8009d14 <_puts_r+0x10>
 8009d10:	f000 fa48 	bl	800a1a4 <__sinit>
 8009d14:	69ab      	ldr	r3, [r5, #24]
 8009d16:	68ac      	ldr	r4, [r5, #8]
 8009d18:	b913      	cbnz	r3, 8009d20 <_puts_r+0x1c>
 8009d1a:	4628      	mov	r0, r5
 8009d1c:	f000 fa42 	bl	800a1a4 <__sinit>
 8009d20:	4b2c      	ldr	r3, [pc, #176]	; (8009dd4 <_puts_r+0xd0>)
 8009d22:	429c      	cmp	r4, r3
 8009d24:	d120      	bne.n	8009d68 <_puts_r+0x64>
 8009d26:	686c      	ldr	r4, [r5, #4]
 8009d28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d2a:	07db      	lsls	r3, r3, #31
 8009d2c:	d405      	bmi.n	8009d3a <_puts_r+0x36>
 8009d2e:	89a3      	ldrh	r3, [r4, #12]
 8009d30:	0598      	lsls	r0, r3, #22
 8009d32:	d402      	bmi.n	8009d3a <_puts_r+0x36>
 8009d34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d36:	f000 fad3 	bl	800a2e0 <__retarget_lock_acquire_recursive>
 8009d3a:	89a3      	ldrh	r3, [r4, #12]
 8009d3c:	0719      	lsls	r1, r3, #28
 8009d3e:	d51d      	bpl.n	8009d7c <_puts_r+0x78>
 8009d40:	6923      	ldr	r3, [r4, #16]
 8009d42:	b1db      	cbz	r3, 8009d7c <_puts_r+0x78>
 8009d44:	3e01      	subs	r6, #1
 8009d46:	68a3      	ldr	r3, [r4, #8]
 8009d48:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009d4c:	3b01      	subs	r3, #1
 8009d4e:	60a3      	str	r3, [r4, #8]
 8009d50:	bb39      	cbnz	r1, 8009da2 <_puts_r+0x9e>
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	da38      	bge.n	8009dc8 <_puts_r+0xc4>
 8009d56:	4622      	mov	r2, r4
 8009d58:	210a      	movs	r1, #10
 8009d5a:	4628      	mov	r0, r5
 8009d5c:	f000 f848 	bl	8009df0 <__swbuf_r>
 8009d60:	3001      	adds	r0, #1
 8009d62:	d011      	beq.n	8009d88 <_puts_r+0x84>
 8009d64:	250a      	movs	r5, #10
 8009d66:	e011      	b.n	8009d8c <_puts_r+0x88>
 8009d68:	4b1b      	ldr	r3, [pc, #108]	; (8009dd8 <_puts_r+0xd4>)
 8009d6a:	429c      	cmp	r4, r3
 8009d6c:	d101      	bne.n	8009d72 <_puts_r+0x6e>
 8009d6e:	68ac      	ldr	r4, [r5, #8]
 8009d70:	e7da      	b.n	8009d28 <_puts_r+0x24>
 8009d72:	4b1a      	ldr	r3, [pc, #104]	; (8009ddc <_puts_r+0xd8>)
 8009d74:	429c      	cmp	r4, r3
 8009d76:	bf08      	it	eq
 8009d78:	68ec      	ldreq	r4, [r5, #12]
 8009d7a:	e7d5      	b.n	8009d28 <_puts_r+0x24>
 8009d7c:	4621      	mov	r1, r4
 8009d7e:	4628      	mov	r0, r5
 8009d80:	f000 f888 	bl	8009e94 <__swsetup_r>
 8009d84:	2800      	cmp	r0, #0
 8009d86:	d0dd      	beq.n	8009d44 <_puts_r+0x40>
 8009d88:	f04f 35ff 	mov.w	r5, #4294967295
 8009d8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d8e:	07da      	lsls	r2, r3, #31
 8009d90:	d405      	bmi.n	8009d9e <_puts_r+0x9a>
 8009d92:	89a3      	ldrh	r3, [r4, #12]
 8009d94:	059b      	lsls	r3, r3, #22
 8009d96:	d402      	bmi.n	8009d9e <_puts_r+0x9a>
 8009d98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d9a:	f000 faa2 	bl	800a2e2 <__retarget_lock_release_recursive>
 8009d9e:	4628      	mov	r0, r5
 8009da0:	bd70      	pop	{r4, r5, r6, pc}
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	da04      	bge.n	8009db0 <_puts_r+0xac>
 8009da6:	69a2      	ldr	r2, [r4, #24]
 8009da8:	429a      	cmp	r2, r3
 8009daa:	dc06      	bgt.n	8009dba <_puts_r+0xb6>
 8009dac:	290a      	cmp	r1, #10
 8009dae:	d004      	beq.n	8009dba <_puts_r+0xb6>
 8009db0:	6823      	ldr	r3, [r4, #0]
 8009db2:	1c5a      	adds	r2, r3, #1
 8009db4:	6022      	str	r2, [r4, #0]
 8009db6:	7019      	strb	r1, [r3, #0]
 8009db8:	e7c5      	b.n	8009d46 <_puts_r+0x42>
 8009dba:	4622      	mov	r2, r4
 8009dbc:	4628      	mov	r0, r5
 8009dbe:	f000 f817 	bl	8009df0 <__swbuf_r>
 8009dc2:	3001      	adds	r0, #1
 8009dc4:	d1bf      	bne.n	8009d46 <_puts_r+0x42>
 8009dc6:	e7df      	b.n	8009d88 <_puts_r+0x84>
 8009dc8:	6823      	ldr	r3, [r4, #0]
 8009dca:	250a      	movs	r5, #10
 8009dcc:	1c5a      	adds	r2, r3, #1
 8009dce:	6022      	str	r2, [r4, #0]
 8009dd0:	701d      	strb	r5, [r3, #0]
 8009dd2:	e7db      	b.n	8009d8c <_puts_r+0x88>
 8009dd4:	0800a86c 	.word	0x0800a86c
 8009dd8:	0800a88c 	.word	0x0800a88c
 8009ddc:	0800a84c 	.word	0x0800a84c

08009de0 <puts>:
 8009de0:	4b02      	ldr	r3, [pc, #8]	; (8009dec <puts+0xc>)
 8009de2:	4601      	mov	r1, r0
 8009de4:	6818      	ldr	r0, [r3, #0]
 8009de6:	f7ff bf8d 	b.w	8009d04 <_puts_r>
 8009dea:	bf00      	nop
 8009dec:	2000002c 	.word	0x2000002c

08009df0 <__swbuf_r>:
 8009df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009df2:	460e      	mov	r6, r1
 8009df4:	4614      	mov	r4, r2
 8009df6:	4605      	mov	r5, r0
 8009df8:	b118      	cbz	r0, 8009e02 <__swbuf_r+0x12>
 8009dfa:	6983      	ldr	r3, [r0, #24]
 8009dfc:	b90b      	cbnz	r3, 8009e02 <__swbuf_r+0x12>
 8009dfe:	f000 f9d1 	bl	800a1a4 <__sinit>
 8009e02:	4b21      	ldr	r3, [pc, #132]	; (8009e88 <__swbuf_r+0x98>)
 8009e04:	429c      	cmp	r4, r3
 8009e06:	d12b      	bne.n	8009e60 <__swbuf_r+0x70>
 8009e08:	686c      	ldr	r4, [r5, #4]
 8009e0a:	69a3      	ldr	r3, [r4, #24]
 8009e0c:	60a3      	str	r3, [r4, #8]
 8009e0e:	89a3      	ldrh	r3, [r4, #12]
 8009e10:	071a      	lsls	r2, r3, #28
 8009e12:	d52f      	bpl.n	8009e74 <__swbuf_r+0x84>
 8009e14:	6923      	ldr	r3, [r4, #16]
 8009e16:	b36b      	cbz	r3, 8009e74 <__swbuf_r+0x84>
 8009e18:	6923      	ldr	r3, [r4, #16]
 8009e1a:	6820      	ldr	r0, [r4, #0]
 8009e1c:	1ac0      	subs	r0, r0, r3
 8009e1e:	6963      	ldr	r3, [r4, #20]
 8009e20:	b2f6      	uxtb	r6, r6
 8009e22:	4283      	cmp	r3, r0
 8009e24:	4637      	mov	r7, r6
 8009e26:	dc04      	bgt.n	8009e32 <__swbuf_r+0x42>
 8009e28:	4621      	mov	r1, r4
 8009e2a:	4628      	mov	r0, r5
 8009e2c:	f000 f926 	bl	800a07c <_fflush_r>
 8009e30:	bb30      	cbnz	r0, 8009e80 <__swbuf_r+0x90>
 8009e32:	68a3      	ldr	r3, [r4, #8]
 8009e34:	3b01      	subs	r3, #1
 8009e36:	60a3      	str	r3, [r4, #8]
 8009e38:	6823      	ldr	r3, [r4, #0]
 8009e3a:	1c5a      	adds	r2, r3, #1
 8009e3c:	6022      	str	r2, [r4, #0]
 8009e3e:	701e      	strb	r6, [r3, #0]
 8009e40:	6963      	ldr	r3, [r4, #20]
 8009e42:	3001      	adds	r0, #1
 8009e44:	4283      	cmp	r3, r0
 8009e46:	d004      	beq.n	8009e52 <__swbuf_r+0x62>
 8009e48:	89a3      	ldrh	r3, [r4, #12]
 8009e4a:	07db      	lsls	r3, r3, #31
 8009e4c:	d506      	bpl.n	8009e5c <__swbuf_r+0x6c>
 8009e4e:	2e0a      	cmp	r6, #10
 8009e50:	d104      	bne.n	8009e5c <__swbuf_r+0x6c>
 8009e52:	4621      	mov	r1, r4
 8009e54:	4628      	mov	r0, r5
 8009e56:	f000 f911 	bl	800a07c <_fflush_r>
 8009e5a:	b988      	cbnz	r0, 8009e80 <__swbuf_r+0x90>
 8009e5c:	4638      	mov	r0, r7
 8009e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e60:	4b0a      	ldr	r3, [pc, #40]	; (8009e8c <__swbuf_r+0x9c>)
 8009e62:	429c      	cmp	r4, r3
 8009e64:	d101      	bne.n	8009e6a <__swbuf_r+0x7a>
 8009e66:	68ac      	ldr	r4, [r5, #8]
 8009e68:	e7cf      	b.n	8009e0a <__swbuf_r+0x1a>
 8009e6a:	4b09      	ldr	r3, [pc, #36]	; (8009e90 <__swbuf_r+0xa0>)
 8009e6c:	429c      	cmp	r4, r3
 8009e6e:	bf08      	it	eq
 8009e70:	68ec      	ldreq	r4, [r5, #12]
 8009e72:	e7ca      	b.n	8009e0a <__swbuf_r+0x1a>
 8009e74:	4621      	mov	r1, r4
 8009e76:	4628      	mov	r0, r5
 8009e78:	f000 f80c 	bl	8009e94 <__swsetup_r>
 8009e7c:	2800      	cmp	r0, #0
 8009e7e:	d0cb      	beq.n	8009e18 <__swbuf_r+0x28>
 8009e80:	f04f 37ff 	mov.w	r7, #4294967295
 8009e84:	e7ea      	b.n	8009e5c <__swbuf_r+0x6c>
 8009e86:	bf00      	nop
 8009e88:	0800a86c 	.word	0x0800a86c
 8009e8c:	0800a88c 	.word	0x0800a88c
 8009e90:	0800a84c 	.word	0x0800a84c

08009e94 <__swsetup_r>:
 8009e94:	4b32      	ldr	r3, [pc, #200]	; (8009f60 <__swsetup_r+0xcc>)
 8009e96:	b570      	push	{r4, r5, r6, lr}
 8009e98:	681d      	ldr	r5, [r3, #0]
 8009e9a:	4606      	mov	r6, r0
 8009e9c:	460c      	mov	r4, r1
 8009e9e:	b125      	cbz	r5, 8009eaa <__swsetup_r+0x16>
 8009ea0:	69ab      	ldr	r3, [r5, #24]
 8009ea2:	b913      	cbnz	r3, 8009eaa <__swsetup_r+0x16>
 8009ea4:	4628      	mov	r0, r5
 8009ea6:	f000 f97d 	bl	800a1a4 <__sinit>
 8009eaa:	4b2e      	ldr	r3, [pc, #184]	; (8009f64 <__swsetup_r+0xd0>)
 8009eac:	429c      	cmp	r4, r3
 8009eae:	d10f      	bne.n	8009ed0 <__swsetup_r+0x3c>
 8009eb0:	686c      	ldr	r4, [r5, #4]
 8009eb2:	89a3      	ldrh	r3, [r4, #12]
 8009eb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009eb8:	0719      	lsls	r1, r3, #28
 8009eba:	d42c      	bmi.n	8009f16 <__swsetup_r+0x82>
 8009ebc:	06dd      	lsls	r5, r3, #27
 8009ebe:	d411      	bmi.n	8009ee4 <__swsetup_r+0x50>
 8009ec0:	2309      	movs	r3, #9
 8009ec2:	6033      	str	r3, [r6, #0]
 8009ec4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009ec8:	81a3      	strh	r3, [r4, #12]
 8009eca:	f04f 30ff 	mov.w	r0, #4294967295
 8009ece:	e03e      	b.n	8009f4e <__swsetup_r+0xba>
 8009ed0:	4b25      	ldr	r3, [pc, #148]	; (8009f68 <__swsetup_r+0xd4>)
 8009ed2:	429c      	cmp	r4, r3
 8009ed4:	d101      	bne.n	8009eda <__swsetup_r+0x46>
 8009ed6:	68ac      	ldr	r4, [r5, #8]
 8009ed8:	e7eb      	b.n	8009eb2 <__swsetup_r+0x1e>
 8009eda:	4b24      	ldr	r3, [pc, #144]	; (8009f6c <__swsetup_r+0xd8>)
 8009edc:	429c      	cmp	r4, r3
 8009ede:	bf08      	it	eq
 8009ee0:	68ec      	ldreq	r4, [r5, #12]
 8009ee2:	e7e6      	b.n	8009eb2 <__swsetup_r+0x1e>
 8009ee4:	0758      	lsls	r0, r3, #29
 8009ee6:	d512      	bpl.n	8009f0e <__swsetup_r+0x7a>
 8009ee8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009eea:	b141      	cbz	r1, 8009efe <__swsetup_r+0x6a>
 8009eec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ef0:	4299      	cmp	r1, r3
 8009ef2:	d002      	beq.n	8009efa <__swsetup_r+0x66>
 8009ef4:	4630      	mov	r0, r6
 8009ef6:	f000 fa59 	bl	800a3ac <_free_r>
 8009efa:	2300      	movs	r3, #0
 8009efc:	6363      	str	r3, [r4, #52]	; 0x34
 8009efe:	89a3      	ldrh	r3, [r4, #12]
 8009f00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009f04:	81a3      	strh	r3, [r4, #12]
 8009f06:	2300      	movs	r3, #0
 8009f08:	6063      	str	r3, [r4, #4]
 8009f0a:	6923      	ldr	r3, [r4, #16]
 8009f0c:	6023      	str	r3, [r4, #0]
 8009f0e:	89a3      	ldrh	r3, [r4, #12]
 8009f10:	f043 0308 	orr.w	r3, r3, #8
 8009f14:	81a3      	strh	r3, [r4, #12]
 8009f16:	6923      	ldr	r3, [r4, #16]
 8009f18:	b94b      	cbnz	r3, 8009f2e <__swsetup_r+0x9a>
 8009f1a:	89a3      	ldrh	r3, [r4, #12]
 8009f1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009f20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f24:	d003      	beq.n	8009f2e <__swsetup_r+0x9a>
 8009f26:	4621      	mov	r1, r4
 8009f28:	4630      	mov	r0, r6
 8009f2a:	f000 f9ff 	bl	800a32c <__smakebuf_r>
 8009f2e:	89a0      	ldrh	r0, [r4, #12]
 8009f30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f34:	f010 0301 	ands.w	r3, r0, #1
 8009f38:	d00a      	beq.n	8009f50 <__swsetup_r+0xbc>
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	60a3      	str	r3, [r4, #8]
 8009f3e:	6963      	ldr	r3, [r4, #20]
 8009f40:	425b      	negs	r3, r3
 8009f42:	61a3      	str	r3, [r4, #24]
 8009f44:	6923      	ldr	r3, [r4, #16]
 8009f46:	b943      	cbnz	r3, 8009f5a <__swsetup_r+0xc6>
 8009f48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009f4c:	d1ba      	bne.n	8009ec4 <__swsetup_r+0x30>
 8009f4e:	bd70      	pop	{r4, r5, r6, pc}
 8009f50:	0781      	lsls	r1, r0, #30
 8009f52:	bf58      	it	pl
 8009f54:	6963      	ldrpl	r3, [r4, #20]
 8009f56:	60a3      	str	r3, [r4, #8]
 8009f58:	e7f4      	b.n	8009f44 <__swsetup_r+0xb0>
 8009f5a:	2000      	movs	r0, #0
 8009f5c:	e7f7      	b.n	8009f4e <__swsetup_r+0xba>
 8009f5e:	bf00      	nop
 8009f60:	2000002c 	.word	0x2000002c
 8009f64:	0800a86c 	.word	0x0800a86c
 8009f68:	0800a88c 	.word	0x0800a88c
 8009f6c:	0800a84c 	.word	0x0800a84c

08009f70 <__sflush_r>:
 8009f70:	898a      	ldrh	r2, [r1, #12]
 8009f72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f76:	4605      	mov	r5, r0
 8009f78:	0710      	lsls	r0, r2, #28
 8009f7a:	460c      	mov	r4, r1
 8009f7c:	d458      	bmi.n	800a030 <__sflush_r+0xc0>
 8009f7e:	684b      	ldr	r3, [r1, #4]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	dc05      	bgt.n	8009f90 <__sflush_r+0x20>
 8009f84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	dc02      	bgt.n	8009f90 <__sflush_r+0x20>
 8009f8a:	2000      	movs	r0, #0
 8009f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f92:	2e00      	cmp	r6, #0
 8009f94:	d0f9      	beq.n	8009f8a <__sflush_r+0x1a>
 8009f96:	2300      	movs	r3, #0
 8009f98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009f9c:	682f      	ldr	r7, [r5, #0]
 8009f9e:	602b      	str	r3, [r5, #0]
 8009fa0:	d032      	beq.n	800a008 <__sflush_r+0x98>
 8009fa2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009fa4:	89a3      	ldrh	r3, [r4, #12]
 8009fa6:	075a      	lsls	r2, r3, #29
 8009fa8:	d505      	bpl.n	8009fb6 <__sflush_r+0x46>
 8009faa:	6863      	ldr	r3, [r4, #4]
 8009fac:	1ac0      	subs	r0, r0, r3
 8009fae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009fb0:	b10b      	cbz	r3, 8009fb6 <__sflush_r+0x46>
 8009fb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009fb4:	1ac0      	subs	r0, r0, r3
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	4602      	mov	r2, r0
 8009fba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009fbc:	6a21      	ldr	r1, [r4, #32]
 8009fbe:	4628      	mov	r0, r5
 8009fc0:	47b0      	blx	r6
 8009fc2:	1c43      	adds	r3, r0, #1
 8009fc4:	89a3      	ldrh	r3, [r4, #12]
 8009fc6:	d106      	bne.n	8009fd6 <__sflush_r+0x66>
 8009fc8:	6829      	ldr	r1, [r5, #0]
 8009fca:	291d      	cmp	r1, #29
 8009fcc:	d82c      	bhi.n	800a028 <__sflush_r+0xb8>
 8009fce:	4a2a      	ldr	r2, [pc, #168]	; (800a078 <__sflush_r+0x108>)
 8009fd0:	40ca      	lsrs	r2, r1
 8009fd2:	07d6      	lsls	r6, r2, #31
 8009fd4:	d528      	bpl.n	800a028 <__sflush_r+0xb8>
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	6062      	str	r2, [r4, #4]
 8009fda:	04d9      	lsls	r1, r3, #19
 8009fdc:	6922      	ldr	r2, [r4, #16]
 8009fde:	6022      	str	r2, [r4, #0]
 8009fe0:	d504      	bpl.n	8009fec <__sflush_r+0x7c>
 8009fe2:	1c42      	adds	r2, r0, #1
 8009fe4:	d101      	bne.n	8009fea <__sflush_r+0x7a>
 8009fe6:	682b      	ldr	r3, [r5, #0]
 8009fe8:	b903      	cbnz	r3, 8009fec <__sflush_r+0x7c>
 8009fea:	6560      	str	r0, [r4, #84]	; 0x54
 8009fec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009fee:	602f      	str	r7, [r5, #0]
 8009ff0:	2900      	cmp	r1, #0
 8009ff2:	d0ca      	beq.n	8009f8a <__sflush_r+0x1a>
 8009ff4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ff8:	4299      	cmp	r1, r3
 8009ffa:	d002      	beq.n	800a002 <__sflush_r+0x92>
 8009ffc:	4628      	mov	r0, r5
 8009ffe:	f000 f9d5 	bl	800a3ac <_free_r>
 800a002:	2000      	movs	r0, #0
 800a004:	6360      	str	r0, [r4, #52]	; 0x34
 800a006:	e7c1      	b.n	8009f8c <__sflush_r+0x1c>
 800a008:	6a21      	ldr	r1, [r4, #32]
 800a00a:	2301      	movs	r3, #1
 800a00c:	4628      	mov	r0, r5
 800a00e:	47b0      	blx	r6
 800a010:	1c41      	adds	r1, r0, #1
 800a012:	d1c7      	bne.n	8009fa4 <__sflush_r+0x34>
 800a014:	682b      	ldr	r3, [r5, #0]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d0c4      	beq.n	8009fa4 <__sflush_r+0x34>
 800a01a:	2b1d      	cmp	r3, #29
 800a01c:	d001      	beq.n	800a022 <__sflush_r+0xb2>
 800a01e:	2b16      	cmp	r3, #22
 800a020:	d101      	bne.n	800a026 <__sflush_r+0xb6>
 800a022:	602f      	str	r7, [r5, #0]
 800a024:	e7b1      	b.n	8009f8a <__sflush_r+0x1a>
 800a026:	89a3      	ldrh	r3, [r4, #12]
 800a028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a02c:	81a3      	strh	r3, [r4, #12]
 800a02e:	e7ad      	b.n	8009f8c <__sflush_r+0x1c>
 800a030:	690f      	ldr	r7, [r1, #16]
 800a032:	2f00      	cmp	r7, #0
 800a034:	d0a9      	beq.n	8009f8a <__sflush_r+0x1a>
 800a036:	0793      	lsls	r3, r2, #30
 800a038:	680e      	ldr	r6, [r1, #0]
 800a03a:	bf08      	it	eq
 800a03c:	694b      	ldreq	r3, [r1, #20]
 800a03e:	600f      	str	r7, [r1, #0]
 800a040:	bf18      	it	ne
 800a042:	2300      	movne	r3, #0
 800a044:	eba6 0807 	sub.w	r8, r6, r7
 800a048:	608b      	str	r3, [r1, #8]
 800a04a:	f1b8 0f00 	cmp.w	r8, #0
 800a04e:	dd9c      	ble.n	8009f8a <__sflush_r+0x1a>
 800a050:	6a21      	ldr	r1, [r4, #32]
 800a052:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a054:	4643      	mov	r3, r8
 800a056:	463a      	mov	r2, r7
 800a058:	4628      	mov	r0, r5
 800a05a:	47b0      	blx	r6
 800a05c:	2800      	cmp	r0, #0
 800a05e:	dc06      	bgt.n	800a06e <__sflush_r+0xfe>
 800a060:	89a3      	ldrh	r3, [r4, #12]
 800a062:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a066:	81a3      	strh	r3, [r4, #12]
 800a068:	f04f 30ff 	mov.w	r0, #4294967295
 800a06c:	e78e      	b.n	8009f8c <__sflush_r+0x1c>
 800a06e:	4407      	add	r7, r0
 800a070:	eba8 0800 	sub.w	r8, r8, r0
 800a074:	e7e9      	b.n	800a04a <__sflush_r+0xda>
 800a076:	bf00      	nop
 800a078:	20400001 	.word	0x20400001

0800a07c <_fflush_r>:
 800a07c:	b538      	push	{r3, r4, r5, lr}
 800a07e:	690b      	ldr	r3, [r1, #16]
 800a080:	4605      	mov	r5, r0
 800a082:	460c      	mov	r4, r1
 800a084:	b913      	cbnz	r3, 800a08c <_fflush_r+0x10>
 800a086:	2500      	movs	r5, #0
 800a088:	4628      	mov	r0, r5
 800a08a:	bd38      	pop	{r3, r4, r5, pc}
 800a08c:	b118      	cbz	r0, 800a096 <_fflush_r+0x1a>
 800a08e:	6983      	ldr	r3, [r0, #24]
 800a090:	b90b      	cbnz	r3, 800a096 <_fflush_r+0x1a>
 800a092:	f000 f887 	bl	800a1a4 <__sinit>
 800a096:	4b14      	ldr	r3, [pc, #80]	; (800a0e8 <_fflush_r+0x6c>)
 800a098:	429c      	cmp	r4, r3
 800a09a:	d11b      	bne.n	800a0d4 <_fflush_r+0x58>
 800a09c:	686c      	ldr	r4, [r5, #4]
 800a09e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d0ef      	beq.n	800a086 <_fflush_r+0xa>
 800a0a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a0a8:	07d0      	lsls	r0, r2, #31
 800a0aa:	d404      	bmi.n	800a0b6 <_fflush_r+0x3a>
 800a0ac:	0599      	lsls	r1, r3, #22
 800a0ae:	d402      	bmi.n	800a0b6 <_fflush_r+0x3a>
 800a0b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0b2:	f000 f915 	bl	800a2e0 <__retarget_lock_acquire_recursive>
 800a0b6:	4628      	mov	r0, r5
 800a0b8:	4621      	mov	r1, r4
 800a0ba:	f7ff ff59 	bl	8009f70 <__sflush_r>
 800a0be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a0c0:	07da      	lsls	r2, r3, #31
 800a0c2:	4605      	mov	r5, r0
 800a0c4:	d4e0      	bmi.n	800a088 <_fflush_r+0xc>
 800a0c6:	89a3      	ldrh	r3, [r4, #12]
 800a0c8:	059b      	lsls	r3, r3, #22
 800a0ca:	d4dd      	bmi.n	800a088 <_fflush_r+0xc>
 800a0cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0ce:	f000 f908 	bl	800a2e2 <__retarget_lock_release_recursive>
 800a0d2:	e7d9      	b.n	800a088 <_fflush_r+0xc>
 800a0d4:	4b05      	ldr	r3, [pc, #20]	; (800a0ec <_fflush_r+0x70>)
 800a0d6:	429c      	cmp	r4, r3
 800a0d8:	d101      	bne.n	800a0de <_fflush_r+0x62>
 800a0da:	68ac      	ldr	r4, [r5, #8]
 800a0dc:	e7df      	b.n	800a09e <_fflush_r+0x22>
 800a0de:	4b04      	ldr	r3, [pc, #16]	; (800a0f0 <_fflush_r+0x74>)
 800a0e0:	429c      	cmp	r4, r3
 800a0e2:	bf08      	it	eq
 800a0e4:	68ec      	ldreq	r4, [r5, #12]
 800a0e6:	e7da      	b.n	800a09e <_fflush_r+0x22>
 800a0e8:	0800a86c 	.word	0x0800a86c
 800a0ec:	0800a88c 	.word	0x0800a88c
 800a0f0:	0800a84c 	.word	0x0800a84c

0800a0f4 <std>:
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	b510      	push	{r4, lr}
 800a0f8:	4604      	mov	r4, r0
 800a0fa:	e9c0 3300 	strd	r3, r3, [r0]
 800a0fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a102:	6083      	str	r3, [r0, #8]
 800a104:	8181      	strh	r1, [r0, #12]
 800a106:	6643      	str	r3, [r0, #100]	; 0x64
 800a108:	81c2      	strh	r2, [r0, #14]
 800a10a:	6183      	str	r3, [r0, #24]
 800a10c:	4619      	mov	r1, r3
 800a10e:	2208      	movs	r2, #8
 800a110:	305c      	adds	r0, #92	; 0x5c
 800a112:	f7ff fdef 	bl	8009cf4 <memset>
 800a116:	4b05      	ldr	r3, [pc, #20]	; (800a12c <std+0x38>)
 800a118:	6263      	str	r3, [r4, #36]	; 0x24
 800a11a:	4b05      	ldr	r3, [pc, #20]	; (800a130 <std+0x3c>)
 800a11c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a11e:	4b05      	ldr	r3, [pc, #20]	; (800a134 <std+0x40>)
 800a120:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a122:	4b05      	ldr	r3, [pc, #20]	; (800a138 <std+0x44>)
 800a124:	6224      	str	r4, [r4, #32]
 800a126:	6323      	str	r3, [r4, #48]	; 0x30
 800a128:	bd10      	pop	{r4, pc}
 800a12a:	bf00      	nop
 800a12c:	0800a521 	.word	0x0800a521
 800a130:	0800a543 	.word	0x0800a543
 800a134:	0800a57b 	.word	0x0800a57b
 800a138:	0800a59f 	.word	0x0800a59f

0800a13c <_cleanup_r>:
 800a13c:	4901      	ldr	r1, [pc, #4]	; (800a144 <_cleanup_r+0x8>)
 800a13e:	f000 b8af 	b.w	800a2a0 <_fwalk_reent>
 800a142:	bf00      	nop
 800a144:	0800a07d 	.word	0x0800a07d

0800a148 <__sfmoreglue>:
 800a148:	b570      	push	{r4, r5, r6, lr}
 800a14a:	1e4a      	subs	r2, r1, #1
 800a14c:	2568      	movs	r5, #104	; 0x68
 800a14e:	4355      	muls	r5, r2
 800a150:	460e      	mov	r6, r1
 800a152:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a156:	f000 f979 	bl	800a44c <_malloc_r>
 800a15a:	4604      	mov	r4, r0
 800a15c:	b140      	cbz	r0, 800a170 <__sfmoreglue+0x28>
 800a15e:	2100      	movs	r1, #0
 800a160:	e9c0 1600 	strd	r1, r6, [r0]
 800a164:	300c      	adds	r0, #12
 800a166:	60a0      	str	r0, [r4, #8]
 800a168:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a16c:	f7ff fdc2 	bl	8009cf4 <memset>
 800a170:	4620      	mov	r0, r4
 800a172:	bd70      	pop	{r4, r5, r6, pc}

0800a174 <__sfp_lock_acquire>:
 800a174:	4801      	ldr	r0, [pc, #4]	; (800a17c <__sfp_lock_acquire+0x8>)
 800a176:	f000 b8b3 	b.w	800a2e0 <__retarget_lock_acquire_recursive>
 800a17a:	bf00      	nop
 800a17c:	20000ad4 	.word	0x20000ad4

0800a180 <__sfp_lock_release>:
 800a180:	4801      	ldr	r0, [pc, #4]	; (800a188 <__sfp_lock_release+0x8>)
 800a182:	f000 b8ae 	b.w	800a2e2 <__retarget_lock_release_recursive>
 800a186:	bf00      	nop
 800a188:	20000ad4 	.word	0x20000ad4

0800a18c <__sinit_lock_acquire>:
 800a18c:	4801      	ldr	r0, [pc, #4]	; (800a194 <__sinit_lock_acquire+0x8>)
 800a18e:	f000 b8a7 	b.w	800a2e0 <__retarget_lock_acquire_recursive>
 800a192:	bf00      	nop
 800a194:	20000acf 	.word	0x20000acf

0800a198 <__sinit_lock_release>:
 800a198:	4801      	ldr	r0, [pc, #4]	; (800a1a0 <__sinit_lock_release+0x8>)
 800a19a:	f000 b8a2 	b.w	800a2e2 <__retarget_lock_release_recursive>
 800a19e:	bf00      	nop
 800a1a0:	20000acf 	.word	0x20000acf

0800a1a4 <__sinit>:
 800a1a4:	b510      	push	{r4, lr}
 800a1a6:	4604      	mov	r4, r0
 800a1a8:	f7ff fff0 	bl	800a18c <__sinit_lock_acquire>
 800a1ac:	69a3      	ldr	r3, [r4, #24]
 800a1ae:	b11b      	cbz	r3, 800a1b8 <__sinit+0x14>
 800a1b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1b4:	f7ff bff0 	b.w	800a198 <__sinit_lock_release>
 800a1b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a1bc:	6523      	str	r3, [r4, #80]	; 0x50
 800a1be:	4b13      	ldr	r3, [pc, #76]	; (800a20c <__sinit+0x68>)
 800a1c0:	4a13      	ldr	r2, [pc, #76]	; (800a210 <__sinit+0x6c>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	62a2      	str	r2, [r4, #40]	; 0x28
 800a1c6:	42a3      	cmp	r3, r4
 800a1c8:	bf04      	itt	eq
 800a1ca:	2301      	moveq	r3, #1
 800a1cc:	61a3      	streq	r3, [r4, #24]
 800a1ce:	4620      	mov	r0, r4
 800a1d0:	f000 f820 	bl	800a214 <__sfp>
 800a1d4:	6060      	str	r0, [r4, #4]
 800a1d6:	4620      	mov	r0, r4
 800a1d8:	f000 f81c 	bl	800a214 <__sfp>
 800a1dc:	60a0      	str	r0, [r4, #8]
 800a1de:	4620      	mov	r0, r4
 800a1e0:	f000 f818 	bl	800a214 <__sfp>
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	60e0      	str	r0, [r4, #12]
 800a1e8:	2104      	movs	r1, #4
 800a1ea:	6860      	ldr	r0, [r4, #4]
 800a1ec:	f7ff ff82 	bl	800a0f4 <std>
 800a1f0:	68a0      	ldr	r0, [r4, #8]
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	2109      	movs	r1, #9
 800a1f6:	f7ff ff7d 	bl	800a0f4 <std>
 800a1fa:	68e0      	ldr	r0, [r4, #12]
 800a1fc:	2202      	movs	r2, #2
 800a1fe:	2112      	movs	r1, #18
 800a200:	f7ff ff78 	bl	800a0f4 <std>
 800a204:	2301      	movs	r3, #1
 800a206:	61a3      	str	r3, [r4, #24]
 800a208:	e7d2      	b.n	800a1b0 <__sinit+0xc>
 800a20a:	bf00      	nop
 800a20c:	0800a848 	.word	0x0800a848
 800a210:	0800a13d 	.word	0x0800a13d

0800a214 <__sfp>:
 800a214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a216:	4607      	mov	r7, r0
 800a218:	f7ff ffac 	bl	800a174 <__sfp_lock_acquire>
 800a21c:	4b1e      	ldr	r3, [pc, #120]	; (800a298 <__sfp+0x84>)
 800a21e:	681e      	ldr	r6, [r3, #0]
 800a220:	69b3      	ldr	r3, [r6, #24]
 800a222:	b913      	cbnz	r3, 800a22a <__sfp+0x16>
 800a224:	4630      	mov	r0, r6
 800a226:	f7ff ffbd 	bl	800a1a4 <__sinit>
 800a22a:	3648      	adds	r6, #72	; 0x48
 800a22c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a230:	3b01      	subs	r3, #1
 800a232:	d503      	bpl.n	800a23c <__sfp+0x28>
 800a234:	6833      	ldr	r3, [r6, #0]
 800a236:	b30b      	cbz	r3, 800a27c <__sfp+0x68>
 800a238:	6836      	ldr	r6, [r6, #0]
 800a23a:	e7f7      	b.n	800a22c <__sfp+0x18>
 800a23c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a240:	b9d5      	cbnz	r5, 800a278 <__sfp+0x64>
 800a242:	4b16      	ldr	r3, [pc, #88]	; (800a29c <__sfp+0x88>)
 800a244:	60e3      	str	r3, [r4, #12]
 800a246:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a24a:	6665      	str	r5, [r4, #100]	; 0x64
 800a24c:	f000 f847 	bl	800a2de <__retarget_lock_init_recursive>
 800a250:	f7ff ff96 	bl	800a180 <__sfp_lock_release>
 800a254:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a258:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a25c:	6025      	str	r5, [r4, #0]
 800a25e:	61a5      	str	r5, [r4, #24]
 800a260:	2208      	movs	r2, #8
 800a262:	4629      	mov	r1, r5
 800a264:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a268:	f7ff fd44 	bl	8009cf4 <memset>
 800a26c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a270:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a274:	4620      	mov	r0, r4
 800a276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a278:	3468      	adds	r4, #104	; 0x68
 800a27a:	e7d9      	b.n	800a230 <__sfp+0x1c>
 800a27c:	2104      	movs	r1, #4
 800a27e:	4638      	mov	r0, r7
 800a280:	f7ff ff62 	bl	800a148 <__sfmoreglue>
 800a284:	4604      	mov	r4, r0
 800a286:	6030      	str	r0, [r6, #0]
 800a288:	2800      	cmp	r0, #0
 800a28a:	d1d5      	bne.n	800a238 <__sfp+0x24>
 800a28c:	f7ff ff78 	bl	800a180 <__sfp_lock_release>
 800a290:	230c      	movs	r3, #12
 800a292:	603b      	str	r3, [r7, #0]
 800a294:	e7ee      	b.n	800a274 <__sfp+0x60>
 800a296:	bf00      	nop
 800a298:	0800a848 	.word	0x0800a848
 800a29c:	ffff0001 	.word	0xffff0001

0800a2a0 <_fwalk_reent>:
 800a2a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2a4:	4606      	mov	r6, r0
 800a2a6:	4688      	mov	r8, r1
 800a2a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a2ac:	2700      	movs	r7, #0
 800a2ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a2b2:	f1b9 0901 	subs.w	r9, r9, #1
 800a2b6:	d505      	bpl.n	800a2c4 <_fwalk_reent+0x24>
 800a2b8:	6824      	ldr	r4, [r4, #0]
 800a2ba:	2c00      	cmp	r4, #0
 800a2bc:	d1f7      	bne.n	800a2ae <_fwalk_reent+0xe>
 800a2be:	4638      	mov	r0, r7
 800a2c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2c4:	89ab      	ldrh	r3, [r5, #12]
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	d907      	bls.n	800a2da <_fwalk_reent+0x3a>
 800a2ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	d003      	beq.n	800a2da <_fwalk_reent+0x3a>
 800a2d2:	4629      	mov	r1, r5
 800a2d4:	4630      	mov	r0, r6
 800a2d6:	47c0      	blx	r8
 800a2d8:	4307      	orrs	r7, r0
 800a2da:	3568      	adds	r5, #104	; 0x68
 800a2dc:	e7e9      	b.n	800a2b2 <_fwalk_reent+0x12>

0800a2de <__retarget_lock_init_recursive>:
 800a2de:	4770      	bx	lr

0800a2e0 <__retarget_lock_acquire_recursive>:
 800a2e0:	4770      	bx	lr

0800a2e2 <__retarget_lock_release_recursive>:
 800a2e2:	4770      	bx	lr

0800a2e4 <__swhatbuf_r>:
 800a2e4:	b570      	push	{r4, r5, r6, lr}
 800a2e6:	460e      	mov	r6, r1
 800a2e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2ec:	2900      	cmp	r1, #0
 800a2ee:	b096      	sub	sp, #88	; 0x58
 800a2f0:	4614      	mov	r4, r2
 800a2f2:	461d      	mov	r5, r3
 800a2f4:	da07      	bge.n	800a306 <__swhatbuf_r+0x22>
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	602b      	str	r3, [r5, #0]
 800a2fa:	89b3      	ldrh	r3, [r6, #12]
 800a2fc:	061a      	lsls	r2, r3, #24
 800a2fe:	d410      	bmi.n	800a322 <__swhatbuf_r+0x3e>
 800a300:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a304:	e00e      	b.n	800a324 <__swhatbuf_r+0x40>
 800a306:	466a      	mov	r2, sp
 800a308:	f000 f970 	bl	800a5ec <_fstat_r>
 800a30c:	2800      	cmp	r0, #0
 800a30e:	dbf2      	blt.n	800a2f6 <__swhatbuf_r+0x12>
 800a310:	9a01      	ldr	r2, [sp, #4]
 800a312:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a316:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a31a:	425a      	negs	r2, r3
 800a31c:	415a      	adcs	r2, r3
 800a31e:	602a      	str	r2, [r5, #0]
 800a320:	e7ee      	b.n	800a300 <__swhatbuf_r+0x1c>
 800a322:	2340      	movs	r3, #64	; 0x40
 800a324:	2000      	movs	r0, #0
 800a326:	6023      	str	r3, [r4, #0]
 800a328:	b016      	add	sp, #88	; 0x58
 800a32a:	bd70      	pop	{r4, r5, r6, pc}

0800a32c <__smakebuf_r>:
 800a32c:	898b      	ldrh	r3, [r1, #12]
 800a32e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a330:	079d      	lsls	r5, r3, #30
 800a332:	4606      	mov	r6, r0
 800a334:	460c      	mov	r4, r1
 800a336:	d507      	bpl.n	800a348 <__smakebuf_r+0x1c>
 800a338:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a33c:	6023      	str	r3, [r4, #0]
 800a33e:	6123      	str	r3, [r4, #16]
 800a340:	2301      	movs	r3, #1
 800a342:	6163      	str	r3, [r4, #20]
 800a344:	b002      	add	sp, #8
 800a346:	bd70      	pop	{r4, r5, r6, pc}
 800a348:	ab01      	add	r3, sp, #4
 800a34a:	466a      	mov	r2, sp
 800a34c:	f7ff ffca 	bl	800a2e4 <__swhatbuf_r>
 800a350:	9900      	ldr	r1, [sp, #0]
 800a352:	4605      	mov	r5, r0
 800a354:	4630      	mov	r0, r6
 800a356:	f000 f879 	bl	800a44c <_malloc_r>
 800a35a:	b948      	cbnz	r0, 800a370 <__smakebuf_r+0x44>
 800a35c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a360:	059a      	lsls	r2, r3, #22
 800a362:	d4ef      	bmi.n	800a344 <__smakebuf_r+0x18>
 800a364:	f023 0303 	bic.w	r3, r3, #3
 800a368:	f043 0302 	orr.w	r3, r3, #2
 800a36c:	81a3      	strh	r3, [r4, #12]
 800a36e:	e7e3      	b.n	800a338 <__smakebuf_r+0xc>
 800a370:	4b0d      	ldr	r3, [pc, #52]	; (800a3a8 <__smakebuf_r+0x7c>)
 800a372:	62b3      	str	r3, [r6, #40]	; 0x28
 800a374:	89a3      	ldrh	r3, [r4, #12]
 800a376:	6020      	str	r0, [r4, #0]
 800a378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a37c:	81a3      	strh	r3, [r4, #12]
 800a37e:	9b00      	ldr	r3, [sp, #0]
 800a380:	6163      	str	r3, [r4, #20]
 800a382:	9b01      	ldr	r3, [sp, #4]
 800a384:	6120      	str	r0, [r4, #16]
 800a386:	b15b      	cbz	r3, 800a3a0 <__smakebuf_r+0x74>
 800a388:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a38c:	4630      	mov	r0, r6
 800a38e:	f000 f93f 	bl	800a610 <_isatty_r>
 800a392:	b128      	cbz	r0, 800a3a0 <__smakebuf_r+0x74>
 800a394:	89a3      	ldrh	r3, [r4, #12]
 800a396:	f023 0303 	bic.w	r3, r3, #3
 800a39a:	f043 0301 	orr.w	r3, r3, #1
 800a39e:	81a3      	strh	r3, [r4, #12]
 800a3a0:	89a0      	ldrh	r0, [r4, #12]
 800a3a2:	4305      	orrs	r5, r0
 800a3a4:	81a5      	strh	r5, [r4, #12]
 800a3a6:	e7cd      	b.n	800a344 <__smakebuf_r+0x18>
 800a3a8:	0800a13d 	.word	0x0800a13d

0800a3ac <_free_r>:
 800a3ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a3ae:	2900      	cmp	r1, #0
 800a3b0:	d048      	beq.n	800a444 <_free_r+0x98>
 800a3b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3b6:	9001      	str	r0, [sp, #4]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	f1a1 0404 	sub.w	r4, r1, #4
 800a3be:	bfb8      	it	lt
 800a3c0:	18e4      	addlt	r4, r4, r3
 800a3c2:	f000 f947 	bl	800a654 <__malloc_lock>
 800a3c6:	4a20      	ldr	r2, [pc, #128]	; (800a448 <_free_r+0x9c>)
 800a3c8:	9801      	ldr	r0, [sp, #4]
 800a3ca:	6813      	ldr	r3, [r2, #0]
 800a3cc:	4615      	mov	r5, r2
 800a3ce:	b933      	cbnz	r3, 800a3de <_free_r+0x32>
 800a3d0:	6063      	str	r3, [r4, #4]
 800a3d2:	6014      	str	r4, [r2, #0]
 800a3d4:	b003      	add	sp, #12
 800a3d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a3da:	f000 b941 	b.w	800a660 <__malloc_unlock>
 800a3de:	42a3      	cmp	r3, r4
 800a3e0:	d90b      	bls.n	800a3fa <_free_r+0x4e>
 800a3e2:	6821      	ldr	r1, [r4, #0]
 800a3e4:	1862      	adds	r2, r4, r1
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	bf04      	itt	eq
 800a3ea:	681a      	ldreq	r2, [r3, #0]
 800a3ec:	685b      	ldreq	r3, [r3, #4]
 800a3ee:	6063      	str	r3, [r4, #4]
 800a3f0:	bf04      	itt	eq
 800a3f2:	1852      	addeq	r2, r2, r1
 800a3f4:	6022      	streq	r2, [r4, #0]
 800a3f6:	602c      	str	r4, [r5, #0]
 800a3f8:	e7ec      	b.n	800a3d4 <_free_r+0x28>
 800a3fa:	461a      	mov	r2, r3
 800a3fc:	685b      	ldr	r3, [r3, #4]
 800a3fe:	b10b      	cbz	r3, 800a404 <_free_r+0x58>
 800a400:	42a3      	cmp	r3, r4
 800a402:	d9fa      	bls.n	800a3fa <_free_r+0x4e>
 800a404:	6811      	ldr	r1, [r2, #0]
 800a406:	1855      	adds	r5, r2, r1
 800a408:	42a5      	cmp	r5, r4
 800a40a:	d10b      	bne.n	800a424 <_free_r+0x78>
 800a40c:	6824      	ldr	r4, [r4, #0]
 800a40e:	4421      	add	r1, r4
 800a410:	1854      	adds	r4, r2, r1
 800a412:	42a3      	cmp	r3, r4
 800a414:	6011      	str	r1, [r2, #0]
 800a416:	d1dd      	bne.n	800a3d4 <_free_r+0x28>
 800a418:	681c      	ldr	r4, [r3, #0]
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	6053      	str	r3, [r2, #4]
 800a41e:	4421      	add	r1, r4
 800a420:	6011      	str	r1, [r2, #0]
 800a422:	e7d7      	b.n	800a3d4 <_free_r+0x28>
 800a424:	d902      	bls.n	800a42c <_free_r+0x80>
 800a426:	230c      	movs	r3, #12
 800a428:	6003      	str	r3, [r0, #0]
 800a42a:	e7d3      	b.n	800a3d4 <_free_r+0x28>
 800a42c:	6825      	ldr	r5, [r4, #0]
 800a42e:	1961      	adds	r1, r4, r5
 800a430:	428b      	cmp	r3, r1
 800a432:	bf04      	itt	eq
 800a434:	6819      	ldreq	r1, [r3, #0]
 800a436:	685b      	ldreq	r3, [r3, #4]
 800a438:	6063      	str	r3, [r4, #4]
 800a43a:	bf04      	itt	eq
 800a43c:	1949      	addeq	r1, r1, r5
 800a43e:	6021      	streq	r1, [r4, #0]
 800a440:	6054      	str	r4, [r2, #4]
 800a442:	e7c7      	b.n	800a3d4 <_free_r+0x28>
 800a444:	b003      	add	sp, #12
 800a446:	bd30      	pop	{r4, r5, pc}
 800a448:	200000e8 	.word	0x200000e8

0800a44c <_malloc_r>:
 800a44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a44e:	1ccd      	adds	r5, r1, #3
 800a450:	f025 0503 	bic.w	r5, r5, #3
 800a454:	3508      	adds	r5, #8
 800a456:	2d0c      	cmp	r5, #12
 800a458:	bf38      	it	cc
 800a45a:	250c      	movcc	r5, #12
 800a45c:	2d00      	cmp	r5, #0
 800a45e:	4606      	mov	r6, r0
 800a460:	db01      	blt.n	800a466 <_malloc_r+0x1a>
 800a462:	42a9      	cmp	r1, r5
 800a464:	d903      	bls.n	800a46e <_malloc_r+0x22>
 800a466:	230c      	movs	r3, #12
 800a468:	6033      	str	r3, [r6, #0]
 800a46a:	2000      	movs	r0, #0
 800a46c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a46e:	f000 f8f1 	bl	800a654 <__malloc_lock>
 800a472:	4921      	ldr	r1, [pc, #132]	; (800a4f8 <_malloc_r+0xac>)
 800a474:	680a      	ldr	r2, [r1, #0]
 800a476:	4614      	mov	r4, r2
 800a478:	b99c      	cbnz	r4, 800a4a2 <_malloc_r+0x56>
 800a47a:	4f20      	ldr	r7, [pc, #128]	; (800a4fc <_malloc_r+0xb0>)
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	b923      	cbnz	r3, 800a48a <_malloc_r+0x3e>
 800a480:	4621      	mov	r1, r4
 800a482:	4630      	mov	r0, r6
 800a484:	f000 f83c 	bl	800a500 <_sbrk_r>
 800a488:	6038      	str	r0, [r7, #0]
 800a48a:	4629      	mov	r1, r5
 800a48c:	4630      	mov	r0, r6
 800a48e:	f000 f837 	bl	800a500 <_sbrk_r>
 800a492:	1c43      	adds	r3, r0, #1
 800a494:	d123      	bne.n	800a4de <_malloc_r+0x92>
 800a496:	230c      	movs	r3, #12
 800a498:	6033      	str	r3, [r6, #0]
 800a49a:	4630      	mov	r0, r6
 800a49c:	f000 f8e0 	bl	800a660 <__malloc_unlock>
 800a4a0:	e7e3      	b.n	800a46a <_malloc_r+0x1e>
 800a4a2:	6823      	ldr	r3, [r4, #0]
 800a4a4:	1b5b      	subs	r3, r3, r5
 800a4a6:	d417      	bmi.n	800a4d8 <_malloc_r+0x8c>
 800a4a8:	2b0b      	cmp	r3, #11
 800a4aa:	d903      	bls.n	800a4b4 <_malloc_r+0x68>
 800a4ac:	6023      	str	r3, [r4, #0]
 800a4ae:	441c      	add	r4, r3
 800a4b0:	6025      	str	r5, [r4, #0]
 800a4b2:	e004      	b.n	800a4be <_malloc_r+0x72>
 800a4b4:	6863      	ldr	r3, [r4, #4]
 800a4b6:	42a2      	cmp	r2, r4
 800a4b8:	bf0c      	ite	eq
 800a4ba:	600b      	streq	r3, [r1, #0]
 800a4bc:	6053      	strne	r3, [r2, #4]
 800a4be:	4630      	mov	r0, r6
 800a4c0:	f000 f8ce 	bl	800a660 <__malloc_unlock>
 800a4c4:	f104 000b 	add.w	r0, r4, #11
 800a4c8:	1d23      	adds	r3, r4, #4
 800a4ca:	f020 0007 	bic.w	r0, r0, #7
 800a4ce:	1ac2      	subs	r2, r0, r3
 800a4d0:	d0cc      	beq.n	800a46c <_malloc_r+0x20>
 800a4d2:	1a1b      	subs	r3, r3, r0
 800a4d4:	50a3      	str	r3, [r4, r2]
 800a4d6:	e7c9      	b.n	800a46c <_malloc_r+0x20>
 800a4d8:	4622      	mov	r2, r4
 800a4da:	6864      	ldr	r4, [r4, #4]
 800a4dc:	e7cc      	b.n	800a478 <_malloc_r+0x2c>
 800a4de:	1cc4      	adds	r4, r0, #3
 800a4e0:	f024 0403 	bic.w	r4, r4, #3
 800a4e4:	42a0      	cmp	r0, r4
 800a4e6:	d0e3      	beq.n	800a4b0 <_malloc_r+0x64>
 800a4e8:	1a21      	subs	r1, r4, r0
 800a4ea:	4630      	mov	r0, r6
 800a4ec:	f000 f808 	bl	800a500 <_sbrk_r>
 800a4f0:	3001      	adds	r0, #1
 800a4f2:	d1dd      	bne.n	800a4b0 <_malloc_r+0x64>
 800a4f4:	e7cf      	b.n	800a496 <_malloc_r+0x4a>
 800a4f6:	bf00      	nop
 800a4f8:	200000e8 	.word	0x200000e8
 800a4fc:	200000ec 	.word	0x200000ec

0800a500 <_sbrk_r>:
 800a500:	b538      	push	{r3, r4, r5, lr}
 800a502:	4d06      	ldr	r5, [pc, #24]	; (800a51c <_sbrk_r+0x1c>)
 800a504:	2300      	movs	r3, #0
 800a506:	4604      	mov	r4, r0
 800a508:	4608      	mov	r0, r1
 800a50a:	602b      	str	r3, [r5, #0]
 800a50c:	f7f6 fc6c 	bl	8000de8 <_sbrk>
 800a510:	1c43      	adds	r3, r0, #1
 800a512:	d102      	bne.n	800a51a <_sbrk_r+0x1a>
 800a514:	682b      	ldr	r3, [r5, #0]
 800a516:	b103      	cbz	r3, 800a51a <_sbrk_r+0x1a>
 800a518:	6023      	str	r3, [r4, #0]
 800a51a:	bd38      	pop	{r3, r4, r5, pc}
 800a51c:	20000ad8 	.word	0x20000ad8

0800a520 <__sread>:
 800a520:	b510      	push	{r4, lr}
 800a522:	460c      	mov	r4, r1
 800a524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a528:	f000 f8a0 	bl	800a66c <_read_r>
 800a52c:	2800      	cmp	r0, #0
 800a52e:	bfab      	itete	ge
 800a530:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a532:	89a3      	ldrhlt	r3, [r4, #12]
 800a534:	181b      	addge	r3, r3, r0
 800a536:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a53a:	bfac      	ite	ge
 800a53c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a53e:	81a3      	strhlt	r3, [r4, #12]
 800a540:	bd10      	pop	{r4, pc}

0800a542 <__swrite>:
 800a542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a546:	461f      	mov	r7, r3
 800a548:	898b      	ldrh	r3, [r1, #12]
 800a54a:	05db      	lsls	r3, r3, #23
 800a54c:	4605      	mov	r5, r0
 800a54e:	460c      	mov	r4, r1
 800a550:	4616      	mov	r6, r2
 800a552:	d505      	bpl.n	800a560 <__swrite+0x1e>
 800a554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a558:	2302      	movs	r3, #2
 800a55a:	2200      	movs	r2, #0
 800a55c:	f000 f868 	bl	800a630 <_lseek_r>
 800a560:	89a3      	ldrh	r3, [r4, #12]
 800a562:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a566:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a56a:	81a3      	strh	r3, [r4, #12]
 800a56c:	4632      	mov	r2, r6
 800a56e:	463b      	mov	r3, r7
 800a570:	4628      	mov	r0, r5
 800a572:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a576:	f000 b817 	b.w	800a5a8 <_write_r>

0800a57a <__sseek>:
 800a57a:	b510      	push	{r4, lr}
 800a57c:	460c      	mov	r4, r1
 800a57e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a582:	f000 f855 	bl	800a630 <_lseek_r>
 800a586:	1c43      	adds	r3, r0, #1
 800a588:	89a3      	ldrh	r3, [r4, #12]
 800a58a:	bf15      	itete	ne
 800a58c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a58e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a592:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a596:	81a3      	strheq	r3, [r4, #12]
 800a598:	bf18      	it	ne
 800a59a:	81a3      	strhne	r3, [r4, #12]
 800a59c:	bd10      	pop	{r4, pc}

0800a59e <__sclose>:
 800a59e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5a2:	f000 b813 	b.w	800a5cc <_close_r>
	...

0800a5a8 <_write_r>:
 800a5a8:	b538      	push	{r3, r4, r5, lr}
 800a5aa:	4d07      	ldr	r5, [pc, #28]	; (800a5c8 <_write_r+0x20>)
 800a5ac:	4604      	mov	r4, r0
 800a5ae:	4608      	mov	r0, r1
 800a5b0:	4611      	mov	r1, r2
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	602a      	str	r2, [r5, #0]
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	f7f6 fbc5 	bl	8000d46 <_write>
 800a5bc:	1c43      	adds	r3, r0, #1
 800a5be:	d102      	bne.n	800a5c6 <_write_r+0x1e>
 800a5c0:	682b      	ldr	r3, [r5, #0]
 800a5c2:	b103      	cbz	r3, 800a5c6 <_write_r+0x1e>
 800a5c4:	6023      	str	r3, [r4, #0]
 800a5c6:	bd38      	pop	{r3, r4, r5, pc}
 800a5c8:	20000ad8 	.word	0x20000ad8

0800a5cc <_close_r>:
 800a5cc:	b538      	push	{r3, r4, r5, lr}
 800a5ce:	4d06      	ldr	r5, [pc, #24]	; (800a5e8 <_close_r+0x1c>)
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	4604      	mov	r4, r0
 800a5d4:	4608      	mov	r0, r1
 800a5d6:	602b      	str	r3, [r5, #0]
 800a5d8:	f7f6 fbd1 	bl	8000d7e <_close>
 800a5dc:	1c43      	adds	r3, r0, #1
 800a5de:	d102      	bne.n	800a5e6 <_close_r+0x1a>
 800a5e0:	682b      	ldr	r3, [r5, #0]
 800a5e2:	b103      	cbz	r3, 800a5e6 <_close_r+0x1a>
 800a5e4:	6023      	str	r3, [r4, #0]
 800a5e6:	bd38      	pop	{r3, r4, r5, pc}
 800a5e8:	20000ad8 	.word	0x20000ad8

0800a5ec <_fstat_r>:
 800a5ec:	b538      	push	{r3, r4, r5, lr}
 800a5ee:	4d07      	ldr	r5, [pc, #28]	; (800a60c <_fstat_r+0x20>)
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	4604      	mov	r4, r0
 800a5f4:	4608      	mov	r0, r1
 800a5f6:	4611      	mov	r1, r2
 800a5f8:	602b      	str	r3, [r5, #0]
 800a5fa:	f7f6 fbcc 	bl	8000d96 <_fstat>
 800a5fe:	1c43      	adds	r3, r0, #1
 800a600:	d102      	bne.n	800a608 <_fstat_r+0x1c>
 800a602:	682b      	ldr	r3, [r5, #0]
 800a604:	b103      	cbz	r3, 800a608 <_fstat_r+0x1c>
 800a606:	6023      	str	r3, [r4, #0]
 800a608:	bd38      	pop	{r3, r4, r5, pc}
 800a60a:	bf00      	nop
 800a60c:	20000ad8 	.word	0x20000ad8

0800a610 <_isatty_r>:
 800a610:	b538      	push	{r3, r4, r5, lr}
 800a612:	4d06      	ldr	r5, [pc, #24]	; (800a62c <_isatty_r+0x1c>)
 800a614:	2300      	movs	r3, #0
 800a616:	4604      	mov	r4, r0
 800a618:	4608      	mov	r0, r1
 800a61a:	602b      	str	r3, [r5, #0]
 800a61c:	f7f6 fbcb 	bl	8000db6 <_isatty>
 800a620:	1c43      	adds	r3, r0, #1
 800a622:	d102      	bne.n	800a62a <_isatty_r+0x1a>
 800a624:	682b      	ldr	r3, [r5, #0]
 800a626:	b103      	cbz	r3, 800a62a <_isatty_r+0x1a>
 800a628:	6023      	str	r3, [r4, #0]
 800a62a:	bd38      	pop	{r3, r4, r5, pc}
 800a62c:	20000ad8 	.word	0x20000ad8

0800a630 <_lseek_r>:
 800a630:	b538      	push	{r3, r4, r5, lr}
 800a632:	4d07      	ldr	r5, [pc, #28]	; (800a650 <_lseek_r+0x20>)
 800a634:	4604      	mov	r4, r0
 800a636:	4608      	mov	r0, r1
 800a638:	4611      	mov	r1, r2
 800a63a:	2200      	movs	r2, #0
 800a63c:	602a      	str	r2, [r5, #0]
 800a63e:	461a      	mov	r2, r3
 800a640:	f7f6 fbc4 	bl	8000dcc <_lseek>
 800a644:	1c43      	adds	r3, r0, #1
 800a646:	d102      	bne.n	800a64e <_lseek_r+0x1e>
 800a648:	682b      	ldr	r3, [r5, #0]
 800a64a:	b103      	cbz	r3, 800a64e <_lseek_r+0x1e>
 800a64c:	6023      	str	r3, [r4, #0]
 800a64e:	bd38      	pop	{r3, r4, r5, pc}
 800a650:	20000ad8 	.word	0x20000ad8

0800a654 <__malloc_lock>:
 800a654:	4801      	ldr	r0, [pc, #4]	; (800a65c <__malloc_lock+0x8>)
 800a656:	f7ff be43 	b.w	800a2e0 <__retarget_lock_acquire_recursive>
 800a65a:	bf00      	nop
 800a65c:	20000ad0 	.word	0x20000ad0

0800a660 <__malloc_unlock>:
 800a660:	4801      	ldr	r0, [pc, #4]	; (800a668 <__malloc_unlock+0x8>)
 800a662:	f7ff be3e 	b.w	800a2e2 <__retarget_lock_release_recursive>
 800a666:	bf00      	nop
 800a668:	20000ad0 	.word	0x20000ad0

0800a66c <_read_r>:
 800a66c:	b538      	push	{r3, r4, r5, lr}
 800a66e:	4d07      	ldr	r5, [pc, #28]	; (800a68c <_read_r+0x20>)
 800a670:	4604      	mov	r4, r0
 800a672:	4608      	mov	r0, r1
 800a674:	4611      	mov	r1, r2
 800a676:	2200      	movs	r2, #0
 800a678:	602a      	str	r2, [r5, #0]
 800a67a:	461a      	mov	r2, r3
 800a67c:	f7f6 fb46 	bl	8000d0c <_read>
 800a680:	1c43      	adds	r3, r0, #1
 800a682:	d102      	bne.n	800a68a <_read_r+0x1e>
 800a684:	682b      	ldr	r3, [r5, #0]
 800a686:	b103      	cbz	r3, 800a68a <_read_r+0x1e>
 800a688:	6023      	str	r3, [r4, #0]
 800a68a:	bd38      	pop	{r3, r4, r5, pc}
 800a68c:	20000ad8 	.word	0x20000ad8

0800a690 <_init>:
 800a690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a692:	bf00      	nop
 800a694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a696:	bc08      	pop	{r3}
 800a698:	469e      	mov	lr, r3
 800a69a:	4770      	bx	lr

0800a69c <_fini>:
 800a69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a69e:	bf00      	nop
 800a6a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6a2:	bc08      	pop	{r3}
 800a6a4:	469e      	mov	lr, r3
 800a6a6:	4770      	bx	lr
