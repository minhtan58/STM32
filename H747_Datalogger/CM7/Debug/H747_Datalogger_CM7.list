
H747_Datalogger_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dbfc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000034c  0800de9c  0800de9c  0001de9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e1e8  0800e1e8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800e1e8  0800e1e8  0001e1e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e1f0  0800e1f0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e1f0  0800e1f0  0001e1f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e1f4  0800e1f4  0001e1f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  0800e1f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d4c  24000078  0800e270  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24004dc4  0800e270  00024dc4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003f8d0  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006c2b  00000000  00000000  0005f976  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022d0  00000000  00000000  000665a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002138  00000000  00000000  00068878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00049804  00000000  00000000  0006a9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002bbf0  00000000  00000000  000b41b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001c8e44  00000000  00000000  000dfda4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002a8be8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009dd8  00000000  00000000  002a8c3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stabstr      0000004e  00000000  00000000  002b2a14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800de84 	.word	0x0800de84

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	0800de84 	.word	0x0800de84

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96e 	b.w	8000674 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468c      	mov	ip, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8083 	bne.w	80004c6 <__udivmoddi4+0x116>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d947      	bls.n	8000456 <__udivmoddi4+0xa6>
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	b142      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003cc:	f1c2 0020 	rsb	r0, r2, #32
 80003d0:	fa24 f000 	lsr.w	r0, r4, r0
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4097      	lsls	r7, r2
 80003d8:	ea40 0c01 	orr.w	ip, r0, r1
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbbc f6f8 	udiv	r6, ip, r8
 80003e8:	fa1f fe87 	uxth.w	lr, r7
 80003ec:	fb08 c116 	mls	r1, r8, r6, ip
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f10e 	mul.w	r1, r6, lr
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000402:	f080 8119 	bcs.w	8000638 <__udivmoddi4+0x288>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8116 	bls.w	8000638 <__udivmoddi4+0x288>
 800040c:	3e02      	subs	r6, #2
 800040e:	443b      	add	r3, r7
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fe0e 	mul.w	lr, r0, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8105 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000432:	45a6      	cmp	lr, r4
 8000434:	f240 8102 	bls.w	800063c <__udivmoddi4+0x28c>
 8000438:	3802      	subs	r0, #2
 800043a:	443c      	add	r4, r7
 800043c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	2600      	movs	r6, #0
 8000446:	b11d      	cbz	r5, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c5 4300 	strd	r4, r3, [r5]
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	b902      	cbnz	r2, 800045a <__udivmoddi4+0xaa>
 8000458:	deff      	udf	#255	; 0xff
 800045a:	fab2 f282 	clz	r2, r2
 800045e:	2a00      	cmp	r2, #0
 8000460:	d150      	bne.n	8000504 <__udivmoddi4+0x154>
 8000462:	1bcb      	subs	r3, r1, r7
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	fa1f f887 	uxth.w	r8, r7
 800046c:	2601      	movs	r6, #1
 800046e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000472:	0c21      	lsrs	r1, r4, #16
 8000474:	fb0e 331c 	mls	r3, lr, ip, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb08 f30c 	mul.w	r3, r8, ip
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0xe4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f10c 30ff 	add.w	r0, ip, #4294967295
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0xe2>
 800048c:	428b      	cmp	r3, r1
 800048e:	f200 80e9 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 8000492:	4684      	mov	ip, r0
 8000494:	1ac9      	subs	r1, r1, r3
 8000496:	b2a3      	uxth	r3, r4
 8000498:	fbb1 f0fe 	udiv	r0, r1, lr
 800049c:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004a4:	fb08 f800 	mul.w	r8, r8, r0
 80004a8:	45a0      	cmp	r8, r4
 80004aa:	d907      	bls.n	80004bc <__udivmoddi4+0x10c>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x10a>
 80004b4:	45a0      	cmp	r8, r4
 80004b6:	f200 80d9 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004ba:	4618      	mov	r0, r3
 80004bc:	eba4 0408 	sub.w	r4, r4, r8
 80004c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004c4:	e7bf      	b.n	8000446 <__udivmoddi4+0x96>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d909      	bls.n	80004de <__udivmoddi4+0x12e>
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	f000 80b1 	beq.w	8000632 <__udivmoddi4+0x282>
 80004d0:	2600      	movs	r6, #0
 80004d2:	e9c5 0100 	strd	r0, r1, [r5]
 80004d6:	4630      	mov	r0, r6
 80004d8:	4631      	mov	r1, r6
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	fab3 f683 	clz	r6, r3
 80004e2:	2e00      	cmp	r6, #0
 80004e4:	d14a      	bne.n	800057c <__udivmoddi4+0x1cc>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d302      	bcc.n	80004f0 <__udivmoddi4+0x140>
 80004ea:	4282      	cmp	r2, r0
 80004ec:	f200 80b8 	bhi.w	8000660 <__udivmoddi4+0x2b0>
 80004f0:	1a84      	subs	r4, r0, r2
 80004f2:	eb61 0103 	sbc.w	r1, r1, r3
 80004f6:	2001      	movs	r0, #1
 80004f8:	468c      	mov	ip, r1
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d0a8      	beq.n	8000450 <__udivmoddi4+0xa0>
 80004fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000502:	e7a5      	b.n	8000450 <__udivmoddi4+0xa0>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f603 	lsr.w	r6, r0, r3
 800050c:	4097      	lsls	r7, r2
 800050e:	fa01 f002 	lsl.w	r0, r1, r2
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	40d9      	lsrs	r1, r3
 8000518:	4330      	orrs	r0, r6
 800051a:	0c03      	lsrs	r3, r0, #16
 800051c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000520:	fa1f f887 	uxth.w	r8, r7
 8000524:	fb0e 1116 	mls	r1, lr, r6, r1
 8000528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800052c:	fb06 f108 	mul.w	r1, r6, r8
 8000530:	4299      	cmp	r1, r3
 8000532:	fa04 f402 	lsl.w	r4, r4, r2
 8000536:	d909      	bls.n	800054c <__udivmoddi4+0x19c>
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	f106 3cff 	add.w	ip, r6, #4294967295
 800053e:	f080 808d 	bcs.w	800065c <__udivmoddi4+0x2ac>
 8000542:	4299      	cmp	r1, r3
 8000544:	f240 808a 	bls.w	800065c <__udivmoddi4+0x2ac>
 8000548:	3e02      	subs	r6, #2
 800054a:	443b      	add	r3, r7
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b281      	uxth	r1, r0
 8000550:	fbb3 f0fe 	udiv	r0, r3, lr
 8000554:	fb0e 3310 	mls	r3, lr, r0, r3
 8000558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055c:	fb00 f308 	mul.w	r3, r0, r8
 8000560:	428b      	cmp	r3, r1
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x1c4>
 8000564:	1879      	adds	r1, r7, r1
 8000566:	f100 3cff 	add.w	ip, r0, #4294967295
 800056a:	d273      	bcs.n	8000654 <__udivmoddi4+0x2a4>
 800056c:	428b      	cmp	r3, r1
 800056e:	d971      	bls.n	8000654 <__udivmoddi4+0x2a4>
 8000570:	3802      	subs	r0, #2
 8000572:	4439      	add	r1, r7
 8000574:	1acb      	subs	r3, r1, r3
 8000576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800057a:	e778      	b.n	800046e <__udivmoddi4+0xbe>
 800057c:	f1c6 0c20 	rsb	ip, r6, #32
 8000580:	fa03 f406 	lsl.w	r4, r3, r6
 8000584:	fa22 f30c 	lsr.w	r3, r2, ip
 8000588:	431c      	orrs	r4, r3
 800058a:	fa20 f70c 	lsr.w	r7, r0, ip
 800058e:	fa01 f306 	lsl.w	r3, r1, r6
 8000592:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000596:	fa21 f10c 	lsr.w	r1, r1, ip
 800059a:	431f      	orrs	r7, r3
 800059c:	0c3b      	lsrs	r3, r7, #16
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fa1f f884 	uxth.w	r8, r4
 80005a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ae:	fb09 fa08 	mul.w	sl, r9, r8
 80005b2:	458a      	cmp	sl, r1
 80005b4:	fa02 f206 	lsl.w	r2, r2, r6
 80005b8:	fa00 f306 	lsl.w	r3, r0, r6
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x220>
 80005be:	1861      	adds	r1, r4, r1
 80005c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005c4:	d248      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 80005c6:	458a      	cmp	sl, r1
 80005c8:	d946      	bls.n	8000658 <__udivmoddi4+0x2a8>
 80005ca:	f1a9 0902 	sub.w	r9, r9, #2
 80005ce:	4421      	add	r1, r4
 80005d0:	eba1 010a 	sub.w	r1, r1, sl
 80005d4:	b2bf      	uxth	r7, r7
 80005d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005da:	fb0e 1110 	mls	r1, lr, r0, r1
 80005de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005e2:	fb00 f808 	mul.w	r8, r0, r8
 80005e6:	45b8      	cmp	r8, r7
 80005e8:	d907      	bls.n	80005fa <__udivmoddi4+0x24a>
 80005ea:	19e7      	adds	r7, r4, r7
 80005ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80005f0:	d22e      	bcs.n	8000650 <__udivmoddi4+0x2a0>
 80005f2:	45b8      	cmp	r8, r7
 80005f4:	d92c      	bls.n	8000650 <__udivmoddi4+0x2a0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	4427      	add	r7, r4
 80005fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005fe:	eba7 0708 	sub.w	r7, r7, r8
 8000602:	fba0 8902 	umull	r8, r9, r0, r2
 8000606:	454f      	cmp	r7, r9
 8000608:	46c6      	mov	lr, r8
 800060a:	4649      	mov	r1, r9
 800060c:	d31a      	bcc.n	8000644 <__udivmoddi4+0x294>
 800060e:	d017      	beq.n	8000640 <__udivmoddi4+0x290>
 8000610:	b15d      	cbz	r5, 800062a <__udivmoddi4+0x27a>
 8000612:	ebb3 020e 	subs.w	r2, r3, lr
 8000616:	eb67 0701 	sbc.w	r7, r7, r1
 800061a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800061e:	40f2      	lsrs	r2, r6
 8000620:	ea4c 0202 	orr.w	r2, ip, r2
 8000624:	40f7      	lsrs	r7, r6
 8000626:	e9c5 2700 	strd	r2, r7, [r5]
 800062a:	2600      	movs	r6, #0
 800062c:	4631      	mov	r1, r6
 800062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000632:	462e      	mov	r6, r5
 8000634:	4628      	mov	r0, r5
 8000636:	e70b      	b.n	8000450 <__udivmoddi4+0xa0>
 8000638:	4606      	mov	r6, r0
 800063a:	e6e9      	b.n	8000410 <__udivmoddi4+0x60>
 800063c:	4618      	mov	r0, r3
 800063e:	e6fd      	b.n	800043c <__udivmoddi4+0x8c>
 8000640:	4543      	cmp	r3, r8
 8000642:	d2e5      	bcs.n	8000610 <__udivmoddi4+0x260>
 8000644:	ebb8 0e02 	subs.w	lr, r8, r2
 8000648:	eb69 0104 	sbc.w	r1, r9, r4
 800064c:	3801      	subs	r0, #1
 800064e:	e7df      	b.n	8000610 <__udivmoddi4+0x260>
 8000650:	4608      	mov	r0, r1
 8000652:	e7d2      	b.n	80005fa <__udivmoddi4+0x24a>
 8000654:	4660      	mov	r0, ip
 8000656:	e78d      	b.n	8000574 <__udivmoddi4+0x1c4>
 8000658:	4681      	mov	r9, r0
 800065a:	e7b9      	b.n	80005d0 <__udivmoddi4+0x220>
 800065c:	4666      	mov	r6, ip
 800065e:	e775      	b.n	800054c <__udivmoddi4+0x19c>
 8000660:	4630      	mov	r0, r6
 8000662:	e74a      	b.n	80004fa <__udivmoddi4+0x14a>
 8000664:	f1ac 0c02 	sub.w	ip, ip, #2
 8000668:	4439      	add	r1, r7
 800066a:	e713      	b.n	8000494 <__udivmoddi4+0xe4>
 800066c:	3802      	subs	r0, #2
 800066e:	443c      	add	r4, r7
 8000670:	e724      	b.n	80004bc <__udivmoddi4+0x10c>
 8000672:	bf00      	nop

08000674 <__aeabi_idiv0>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800067c:	4b3f      	ldr	r3, [pc, #252]	; (800077c <SystemInit+0x104>)
 800067e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000682:	4a3e      	ldr	r2, [pc, #248]	; (800077c <SystemInit+0x104>)
 8000684:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000688:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800068c:	4b3b      	ldr	r3, [pc, #236]	; (800077c <SystemInit+0x104>)
 800068e:	691b      	ldr	r3, [r3, #16]
 8000690:	4a3a      	ldr	r2, [pc, #232]	; (800077c <SystemInit+0x104>)
 8000692:	f043 0310 	orr.w	r3, r3, #16
 8000696:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <SystemInit+0x108>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f003 030f 	and.w	r3, r3, #15
 80006a0:	2b06      	cmp	r3, #6
 80006a2:	d807      	bhi.n	80006b4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006a4:	4b36      	ldr	r3, [pc, #216]	; (8000780 <SystemInit+0x108>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f023 030f 	bic.w	r3, r3, #15
 80006ac:	4a34      	ldr	r2, [pc, #208]	; (8000780 <SystemInit+0x108>)
 80006ae:	f043 0307 	orr.w	r3, r3, #7
 80006b2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006b4:	4b33      	ldr	r3, [pc, #204]	; (8000784 <SystemInit+0x10c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a32      	ldr	r2, [pc, #200]	; (8000784 <SystemInit+0x10c>)
 80006ba:	f043 0301 	orr.w	r3, r3, #1
 80006be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c0:	4b30      	ldr	r3, [pc, #192]	; (8000784 <SystemInit+0x10c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006c6:	4b2f      	ldr	r3, [pc, #188]	; (8000784 <SystemInit+0x10c>)
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	492e      	ldr	r1, [pc, #184]	; (8000784 <SystemInit+0x10c>)
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <SystemInit+0x110>)
 80006ce:	4013      	ands	r3, r2
 80006d0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006d2:	4b2b      	ldr	r3, [pc, #172]	; (8000780 <SystemInit+0x108>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f003 0308 	and.w	r3, r3, #8
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d007      	beq.n	80006ee <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006de:	4b28      	ldr	r3, [pc, #160]	; (8000780 <SystemInit+0x108>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f023 030f 	bic.w	r3, r3, #15
 80006e6:	4a26      	ldr	r2, [pc, #152]	; (8000780 <SystemInit+0x108>)
 80006e8:	f043 0307 	orr.w	r3, r3, #7
 80006ec:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006ee:	4b25      	ldr	r3, [pc, #148]	; (8000784 <SystemInit+0x10c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006f4:	4b23      	ldr	r3, [pc, #140]	; (8000784 <SystemInit+0x10c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006fa:	4b22      	ldr	r3, [pc, #136]	; (8000784 <SystemInit+0x10c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000700:	4b20      	ldr	r3, [pc, #128]	; (8000784 <SystemInit+0x10c>)
 8000702:	4a22      	ldr	r2, [pc, #136]	; (800078c <SystemInit+0x114>)
 8000704:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000706:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <SystemInit+0x10c>)
 8000708:	4a21      	ldr	r2, [pc, #132]	; (8000790 <SystemInit+0x118>)
 800070a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800070c:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <SystemInit+0x10c>)
 800070e:	4a21      	ldr	r2, [pc, #132]	; (8000794 <SystemInit+0x11c>)
 8000710:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000712:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <SystemInit+0x10c>)
 8000714:	2200      	movs	r2, #0
 8000716:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000718:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <SystemInit+0x10c>)
 800071a:	4a1e      	ldr	r2, [pc, #120]	; (8000794 <SystemInit+0x11c>)
 800071c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800071e:	4b19      	ldr	r3, [pc, #100]	; (8000784 <SystemInit+0x10c>)
 8000720:	2200      	movs	r2, #0
 8000722:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000724:	4b17      	ldr	r3, [pc, #92]	; (8000784 <SystemInit+0x10c>)
 8000726:	4a1b      	ldr	r2, [pc, #108]	; (8000794 <SystemInit+0x11c>)
 8000728:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800072a:	4b16      	ldr	r3, [pc, #88]	; (8000784 <SystemInit+0x10c>)
 800072c:	2200      	movs	r2, #0
 800072e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <SystemInit+0x10c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a13      	ldr	r2, [pc, #76]	; (8000784 <SystemInit+0x10c>)
 8000736:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800073a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <SystemInit+0x10c>)
 800073e:	2200      	movs	r2, #0
 8000740:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x120>)
 8000744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000746:	4a14      	ldr	r2, [pc, #80]	; (8000798 <SystemInit+0x120>)
 8000748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <SystemInit+0x124>)
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <SystemInit+0x128>)
 8000754:	4013      	ands	r3, r2
 8000756:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800075a:	d202      	bcs.n	8000762 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800075c:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <SystemInit+0x12c>)
 800075e:	2201      	movs	r2, #1
 8000760:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <SystemInit+0x130>)
 8000764:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000768:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800076a:	4b04      	ldr	r3, [pc, #16]	; (800077c <SystemInit+0x104>)
 800076c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000770:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00
 8000780:	52002000 	.word	0x52002000
 8000784:	58024400 	.word	0x58024400
 8000788:	eaf6ed7f 	.word	0xeaf6ed7f
 800078c:	02020200 	.word	0x02020200
 8000790:	01ff0000 	.word	0x01ff0000
 8000794:	01010280 	.word	0x01010280
 8000798:	580000c0 	.word	0x580000c0
 800079c:	5c001000 	.word	0x5c001000
 80007a0:	ffff0000 	.word	0xffff0000
 80007a4:	51008108 	.word	0x51008108
 80007a8:	52004000 	.word	0x52004000

080007ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80007ac:	b480      	push	{r7}
 80007ae:	b085      	sub	sp, #20
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	4a07      	ldr	r2, [pc, #28]	; (80007d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80007bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	4a06      	ldr	r2, [pc, #24]	; (80007dc <vApplicationGetIdleTaskMemory+0x30>)
 80007c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2280      	movs	r2, #128	; 0x80
 80007c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80007ca:	bf00      	nop
 80007cc:	3714      	adds	r7, #20
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	24000094 	.word	0x24000094
 80007dc:	240000e8 	.word	0x240000e8

080007e0 <__io_putchar>:
static void MX_SDMMC1_SD_Init(void);
void StartDefaultTask(void const * argument);
void APP_taskSerial(void const *argument);
void vProcessRxChar(uint8_t u8Char);

int __io_putchar (int ch) {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	uint8_t c = ch;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart8, &c, 1, HAL_MAX_DELAY);
 80007ee:	f107 010f 	add.w	r1, r7, #15
 80007f2:	f04f 33ff 	mov.w	r3, #4294967295
 80007f6:	2201      	movs	r2, #1
 80007f8:	4803      	ldr	r0, [pc, #12]	; (8000808 <__io_putchar+0x28>)
 80007fa:	f006 ffad 	bl	8007758 <HAL_UART_Transmit>
	return ch;
 80007fe:	687b      	ldr	r3, [r7, #4]
}
 8000800:	4618      	mov	r0, r3
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	24004188 	.word	0x24004188

0800080c <main>:

int main(void)
{
 800080c:	b5b0      	push	{r4, r5, r7, lr}
 800080e:	b08c      	sub	sp, #48	; 0x30
 8000810:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000812:	4b53      	ldr	r3, [pc, #332]	; (8000960 <main+0x154>)
 8000814:	695b      	ldr	r3, [r3, #20]
 8000816:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800081a:	2b00      	cmp	r3, #0
 800081c:	d138      	bne.n	8000890 <main+0x84>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800081e:	4b50      	ldr	r3, [pc, #320]	; (8000960 <main+0x154>)
 8000820:	2200      	movs	r2, #0
 8000822:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000826:	f3bf 8f4f 	dsb	sy
}
 800082a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800082c:	4b4c      	ldr	r3, [pc, #304]	; (8000960 <main+0x154>)
 800082e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000832:	62bb      	str	r3, [r7, #40]	; 0x28

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000836:	0b5b      	lsrs	r3, r3, #13
 8000838:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800083e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000840:	08db      	lsrs	r3, r3, #3
 8000842:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000846:	623b      	str	r3, [r7, #32]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800084a:	015a      	lsls	r2, r3, #5
 800084c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000850:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000852:	6a3a      	ldr	r2, [r7, #32]
 8000854:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000856:	4942      	ldr	r1, [pc, #264]	; (8000960 <main+0x154>)
 8000858:	4313      	orrs	r3, r2
 800085a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800085e:	6a3b      	ldr	r3, [r7, #32]
 8000860:	1e5a      	subs	r2, r3, #1
 8000862:	623a      	str	r2, [r7, #32]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d1ef      	bne.n	8000848 <main+0x3c>
    } while(sets-- != 0U);
 8000868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800086a:	1e5a      	subs	r2, r3, #1
 800086c:	627a      	str	r2, [r7, #36]	; 0x24
 800086e:	2b00      	cmp	r3, #0
 8000870:	d1e5      	bne.n	800083e <main+0x32>
  __ASM volatile ("dsb 0xF":::"memory");
 8000872:	f3bf 8f4f 	dsb	sy
}
 8000876:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000878:	4b39      	ldr	r3, [pc, #228]	; (8000960 <main+0x154>)
 800087a:	695b      	ldr	r3, [r3, #20]
 800087c:	4a38      	ldr	r2, [pc, #224]	; (8000960 <main+0x154>)
 800087e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000882:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000884:	f3bf 8f4f 	dsb	sy
}
 8000888:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800088a:	f3bf 8f6f 	isb	sy
}
 800088e:	e000      	b.n	8000892 <main+0x86>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000890:	bf00      	nop
	int32_t timeout;

	SCB_EnableDCache();

	timeout = 0xFFFF;
 8000892:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000896:	62fb      	str	r3, [r7, #44]	; 0x2c
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000898:	bf00      	nop
 800089a:	4b32      	ldr	r3, [pc, #200]	; (8000964 <main+0x158>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d004      	beq.n	80008b0 <main+0xa4>
 80008a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008a8:	1e5a      	subs	r2, r3, #1
 80008aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	dcf4      	bgt.n	800089a <main+0x8e>
	if ( timeout < 0 )
 80008b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	da01      	bge.n	80008ba <main+0xae>
	{
		Error_Handler();
 80008b6:	f000 fb1f 	bl	8000ef8 <Error_Handler>
	}

	HAL_Init();
 80008ba:	f000 fea9 	bl	8001610 <HAL_Init>
	SystemClock_Config();
 80008be:	f000 f93f 	bl	8000b40 <SystemClock_Config>
	__HAL_RCC_HSEM_CLK_ENABLE();
 80008c2:	4b28      	ldr	r3, [pc, #160]	; (8000964 <main+0x158>)
 80008c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c8:	4a26      	ldr	r2, [pc, #152]	; (8000964 <main+0x158>)
 80008ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008d2:	4b24      	ldr	r3, [pc, #144]	; (8000964 <main+0x158>)
 80008d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008dc:	603b      	str	r3, [r7, #0]
 80008de:	683b      	ldr	r3, [r7, #0]

	HAL_HSEM_FastTake(HSEM_ID_0);
 80008e0:	2000      	movs	r0, #0
 80008e2:	f001 ff79 	bl	80027d8 <HAL_HSEM_FastTake>
	HAL_HSEM_Release(HSEM_ID_0,0);
 80008e6:	2100      	movs	r1, #0
 80008e8:	2000      	movs	r0, #0
 80008ea:	f001 ff8f 	bl	800280c <HAL_HSEM_Release>
	timeout = 0xFFFF;
 80008ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80008f4:	bf00      	nop
 80008f6:	4b1b      	ldr	r3, [pc, #108]	; (8000964 <main+0x158>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d104      	bne.n	800090c <main+0x100>
 8000902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000904:	1e5a      	subs	r2, r3, #1
 8000906:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000908:	2b00      	cmp	r3, #0
 800090a:	dcf4      	bgt.n	80008f6 <main+0xea>
	if ( timeout < 0 )
 800090c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800090e:	2b00      	cmp	r3, #0
 8000910:	da01      	bge.n	8000916 <main+0x10a>
	{
		Error_Handler();
 8000912:	f000 faf1 	bl	8000ef8 <Error_Handler>
	}

	MX_GPIO_Init();
 8000916:	f000 fa7b 	bl	8000e10 <MX_GPIO_Init>
	MX_QUADSPI_Init();
 800091a:	f000 f98f 	bl	8000c3c <MX_QUADSPI_Init>
	MX_UART8_Init();
 800091e:	f000 f9df 	bl	8000ce0 <MX_UART8_Init>
	MX_USART1_UART_Init();
 8000922:	f000 fa29 	bl	8000d78 <MX_USART1_UART_Init>
	MX_SDMMC1_SD_Init();
 8000926:	f000 f9b5 	bl	8000c94 <MX_SDMMC1_SD_Init>
	MX_FATFS_Init();
 800092a:	f009 fca3 	bl	800a274 <MX_FATFS_Init>
	MX_MBEDTLS_Init();
 800092e:	f009 fedf 	bl	800a6f0 <MX_MBEDTLS_Init>

	HAL_UART_Receive_IT(&huart1, (uint8_t*)&UART1_RxBuffer, 1);
 8000932:	2201      	movs	r2, #1
 8000934:	490c      	ldr	r1, [pc, #48]	; (8000968 <main+0x15c>)
 8000936:	480d      	ldr	r0, [pc, #52]	; (800096c <main+0x160>)
 8000938:	f006 ffa4 	bl	8007884 <HAL_UART_Receive_IT>

	osThreadDef(SerialTask, APP_taskSerial, osPriorityNormal, 0, 128);
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <main+0x164>)
 800093e:	1d3c      	adds	r4, r7, #4
 8000940:	461d      	mov	r5, r3
 8000942:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000944:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000946:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800094a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadCreate(osThread(SerialTask), NULL);
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f009 ff92 	bl	800a87c <osThreadCreate>

	//osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
	//osThreadCreate(osThread(defaultTask), NULL);

	osKernelStart();
 8000958:	f009 ff6d 	bl	800a836 <osKernelStart>

	while (1)
 800095c:	e7fe      	b.n	800095c <main+0x150>
 800095e:	bf00      	nop
 8000960:	e000ed00 	.word	0xe000ed00
 8000964:	58024400 	.word	0x58024400
 8000968:	24004058 	.word	0x24004058
 800096c:	240040e0 	.word	0x240040e0
 8000970:	0800dea8 	.word	0x0800dea8

08000974 <APP_taskSerial>:

	}
}

void APP_taskSerial(void const *argument)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
	uint8_t u8RxByte;
	while (1)
	{
//		printf("Receive PacketType\n\r");
//		osDelay(1000)
		if (xQueueReceive(SimpleQueue, &u8RxByte, portMAX_DELAY) == pdTRUE)
 800097c:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <APP_taskSerial+0x2c>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f107 010f 	add.w	r1, r7, #15
 8000984:	f04f 32ff 	mov.w	r2, #4294967295
 8000988:	4618      	mov	r0, r3
 800098a:	f00b f861 	bl	800ba50 <xQueueReceive>
 800098e:	4603      	mov	r3, r0
 8000990:	2b01      	cmp	r3, #1
 8000992:	d1f3      	bne.n	800097c <APP_taskSerial+0x8>
		{
			vProcessRxChar(u8RxByte);
 8000994:	7bfb      	ldrb	r3, [r7, #15]
 8000996:	4618      	mov	r0, r3
 8000998:	f000 f8a4 	bl	8000ae4 <vProcessRxChar>
		if (xQueueReceive(SimpleQueue, &u8RxByte, portMAX_DELAY) == pdTRUE)
 800099c:	e7ee      	b.n	800097c <APP_taskSerial+0x8>
 800099e:	bf00      	nop
 80009a0:	240040dc 	.word	0x240040dc

080009a4 <HAL_UART_RxCpltCallback>:
		}
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart1.Instance){
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <HAL_UART_RxCpltCallback+0x50>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d119      	bne.n	80009ec <HAL_UART_RxCpltCallback+0x48>
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80009b8:	2300      	movs	r3, #0
 80009ba:	60fb      	str	r3, [r7, #12]
		xQueueSendToFrontFromISR(SimpleQueue, &UART1_RxBuffer, &xHigherPriorityTaskWoken);
 80009bc:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <HAL_UART_RxCpltCallback+0x54>)
 80009be:	6818      	ldr	r0, [r3, #0]
 80009c0:	f107 020c 	add.w	r2, r7, #12
 80009c4:	2301      	movs	r3, #1
 80009c6:	490d      	ldr	r1, [pc, #52]	; (80009fc <HAL_UART_RxCpltCallback+0x58>)
 80009c8:	f00a ffa6 	bl	800b918 <xQueueGenericSendFromISR>
		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d007      	beq.n	80009e2 <HAL_UART_RxCpltCallback+0x3e>
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <HAL_UART_RxCpltCallback+0x5c>)
 80009d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	f3bf 8f4f 	dsb	sy
 80009de:	f3bf 8f6f 	isb	sy

		HAL_UART_Receive_IT(&huart1, (uint8_t*)&UART1_RxBuffer, 1);
 80009e2:	2201      	movs	r2, #1
 80009e4:	4905      	ldr	r1, [pc, #20]	; (80009fc <HAL_UART_RxCpltCallback+0x58>)
 80009e6:	4803      	ldr	r0, [pc, #12]	; (80009f4 <HAL_UART_RxCpltCallback+0x50>)
 80009e8:	f006 ff4c 	bl	8007884 <HAL_UART_Receive_IT>
	}
}
 80009ec:	bf00      	nop
 80009ee:	3710      	adds	r7, #16
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	240040e0 	.word	0x240040e0
 80009f8:	240040dc 	.word	0x240040dc
 80009fc:	24004058 	.word	0x24004058
 8000a00:	e000ed04 	.word	0xe000ed04

08000a04 <vProcessCommand>:

void vProcessCommand(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b098      	sub	sp, #96	; 0x60
 8000a08:	af00      	add	r7, sp, #0
	char Delimiters[] = " ";
 8000a0a:	2320      	movs	r3, #32
 8000a0c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	char i = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	char *control[20];
	char *token = strtok((char *)sCommand.au8Buffer, Delimiters);
 8000a16:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4829      	ldr	r0, [pc, #164]	; (8000ac4 <vProcessCommand+0xc0>)
 8000a1e:	f00c fad5 	bl	800cfcc <strtok>
 8000a22:	65b8      	str	r0, [r7, #88]	; 0x58

	while(token != NULL)
 8000a24:	e018      	b.n	8000a58 <vProcessCommand+0x54>
	{
		printf("%s\n\r", token);
 8000a26:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000a28:	4827      	ldr	r0, [pc, #156]	; (8000ac8 <vProcessCommand+0xc4>)
 8000a2a:	f00c fa8b 	bl	800cf44 <iprintf>
		control[i] = token;
 8000a2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000a38:	4413      	add	r3, r2
 8000a3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000a3c:	f843 2c5c 	str.w	r2, [r3, #-92]
		i++;
 8000a40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000a44:	3301      	adds	r3, #1
 8000a46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		token = strtok(NULL, Delimiters);
 8000a4a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a4e:	4619      	mov	r1, r3
 8000a50:	2000      	movs	r0, #0
 8000a52:	f00c fabb 	bl	800cfcc <strtok>
 8000a56:	65b8      	str	r0, [r7, #88]	; 0x58
	while(token != NULL)
 8000a58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d1e3      	bne.n	8000a26 <vProcessCommand+0x22>
	}
	printf("%s\n\r", control[0]);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4619      	mov	r1, r3
 8000a62:	4819      	ldr	r0, [pc, #100]	; (8000ac8 <vProcessCommand+0xc4>)
 8000a64:	f00c fa6e 	bl	800cf44 <iprintf>

    if (0 == stricmp(control[0], "1111"))
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	4918      	ldr	r1, [pc, #96]	; (8000acc <vProcessCommand+0xc8>)
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f00c fa91 	bl	800cf94 <strcasecmp>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d102      	bne.n	8000a7e <vProcessCommand+0x7a>
    {
    	printf("u16PacketType =  toggle\n\r");
 8000a78:	4815      	ldr	r0, [pc, #84]	; (8000ad0 <vProcessCommand+0xcc>)
 8000a7a:	f00c fa63 	bl	800cf44 <iprintf>
    }

    if (0 == stricmp(control[0], "hello"))
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4914      	ldr	r1, [pc, #80]	; (8000ad4 <vProcessCommand+0xd0>)
 8000a82:	4618      	mov	r0, r3
 8000a84:	f00c fa86 	bl	800cf94 <strcasecmp>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d103      	bne.n	8000a96 <vProcessCommand+0x92>
    {
    	printf("u16PacketType = hello\n\r");
 8000a8e:	4812      	ldr	r0, [pc, #72]	; (8000ad8 <vProcessCommand+0xd4>)
 8000a90:	f00c fa58 	bl	800cf44 <iprintf>
 8000a94:	e00a      	b.n	8000aac <vProcessCommand+0xa8>
    }

    else if (0 == stricmp(control[0], "steer"))
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4910      	ldr	r1, [pc, #64]	; (8000adc <vProcessCommand+0xd8>)
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f00c fa7a 	bl	800cf94 <strcasecmp>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d102      	bne.n	8000aac <vProcessCommand+0xa8>
    {
    	printf("u16PacketType = steer \n\r");
 8000aa6:	480e      	ldr	r0, [pc, #56]	; (8000ae0 <vProcessCommand+0xdc>)
 8000aa8:	f00c fa4c 	bl	800cf44 <iprintf>
    }
    memset(sCommand.au8Buffer, 0, COMMAND_BUF_SIZE);
 8000aac:	2232      	movs	r2, #50	; 0x32
 8000aae:	2100      	movs	r1, #0
 8000ab0:	4804      	ldr	r0, [pc, #16]	; (8000ac4 <vProcessCommand+0xc0>)
 8000ab2:	f00c f995 	bl	800cde0 <memset>
    sCommand.u8Pos = 0;
 8000ab6:	4b03      	ldr	r3, [pc, #12]	; (8000ac4 <vProcessCommand+0xc0>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	751a      	strb	r2, [r3, #20]
}
 8000abc:	bf00      	nop
 8000abe:	3760      	adds	r7, #96	; 0x60
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	24004170 	.word	0x24004170
 8000ac8:	0800dec4 	.word	0x0800dec4
 8000acc:	0800decc 	.word	0x0800decc
 8000ad0:	0800ded4 	.word	0x0800ded4
 8000ad4:	0800def0 	.word	0x0800def0
 8000ad8:	0800def8 	.word	0x0800def8
 8000adc:	0800df10 	.word	0x0800df10
 8000ae0:	0800df18 	.word	0x0800df18

08000ae4 <vProcessRxChar>:

void vProcessRxChar(uint8_t u8Char)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	71fb      	strb	r3, [r7, #7]
    if ((sCommand.u8Pos < COMMAND_BUF_SIZE)  && (u8Char != 0x0d))
 8000aee:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <vProcessRxChar+0x58>)
 8000af0:	7d1b      	ldrb	r3, [r3, #20]
 8000af2:	2b31      	cmp	r3, #49	; 0x31
 8000af4:	d80d      	bhi.n	8000b12 <vProcessRxChar+0x2e>
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	2b0d      	cmp	r3, #13
 8000afa:	d00a      	beq.n	8000b12 <vProcessRxChar+0x2e>
    {
        sCommand.au8Buffer[sCommand.u8Pos++] = u8Char;
 8000afc:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <vProcessRxChar+0x58>)
 8000afe:	7d1b      	ldrb	r3, [r3, #20]
 8000b00:	1c5a      	adds	r2, r3, #1
 8000b02:	b2d1      	uxtb	r1, r2
 8000b04:	4a0d      	ldr	r2, [pc, #52]	; (8000b3c <vProcessRxChar+0x58>)
 8000b06:	7511      	strb	r1, [r2, #20]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4a0c      	ldr	r2, [pc, #48]	; (8000b3c <vProcessRxChar+0x58>)
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	5453      	strb	r3, [r2, r1]
 8000b10:	e00b      	b.n	8000b2a <vProcessRxChar+0x46>
    }
    else if (sCommand.u8Pos >= COMMAND_BUF_SIZE)
 8000b12:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <vProcessRxChar+0x58>)
 8000b14:	7d1b      	ldrb	r3, [r3, #20]
 8000b16:	2b31      	cmp	r3, #49	; 0x31
 8000b18:	d907      	bls.n	8000b2a <vProcessRxChar+0x46>
    {
        memset(sCommand.au8Buffer, 0, COMMAND_BUF_SIZE);
 8000b1a:	2232      	movs	r2, #50	; 0x32
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4807      	ldr	r0, [pc, #28]	; (8000b3c <vProcessRxChar+0x58>)
 8000b20:	f00c f95e 	bl	800cde0 <memset>
        sCommand.u8Pos = 0;
 8000b24:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <vProcessRxChar+0x58>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	751a      	strb	r2, [r3, #20]
    }

    if (u8Char == 0x0d)
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	2b0d      	cmp	r3, #13
 8000b2e:	d101      	bne.n	8000b34 <vProcessRxChar+0x50>
    {
    	//printf("Receive PacketType\n\r");
    	vProcessCommand();
 8000b30:	f7ff ff68 	bl	8000a04 <vProcessCommand>
    }
}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	24004170 	.word	0x24004170

08000b40 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b09e      	sub	sp, #120	; 0x78
 8000b44:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 8000b46:	2300      	movs	r3, #0
 8000b48:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000b4c:	2004      	movs	r0, #4
 8000b4e:	f001 fe71 	bl	8002834 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b52:	2300      	movs	r3, #0
 8000b54:	607b      	str	r3, [r7, #4]
 8000b56:	4b37      	ldr	r3, [pc, #220]	; (8000c34 <SystemClock_Config+0xf4>)
 8000b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b5a:	4a36      	ldr	r2, [pc, #216]	; (8000c34 <SystemClock_Config+0xf4>)
 8000b5c:	f023 0301 	bic.w	r3, r3, #1
 8000b60:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b62:	4b34      	ldr	r3, [pc, #208]	; (8000c34 <SystemClock_Config+0xf4>)
 8000b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	4b32      	ldr	r3, [pc, #200]	; (8000c38 <SystemClock_Config+0xf8>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	4a31      	ldr	r2, [pc, #196]	; (8000c38 <SystemClock_Config+0xf8>)
 8000b72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b76:	6193      	str	r3, [r2, #24]
 8000b78:	4b2f      	ldr	r3, [pc, #188]	; (8000c38 <SystemClock_Config+0xf8>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b84:	bf00      	nop
 8000b86:	4b2c      	ldr	r3, [pc, #176]	; (8000c38 <SystemClock_Config+0xf8>)
 8000b88:	699b      	ldr	r3, [r3, #24]
 8000b8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b92:	d1f8      	bne.n	8000b86 <SystemClock_Config+0x46>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_HSI |RCC_OSCILLATORTYPE_HSE;
 8000b94:	2303      	movs	r3, #3
 8000b96:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b9c:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000baa:	2302      	movs	r3, #2
 8000bac:	633b      	str	r3, [r7, #48]	; 0x30

  RCC_OscInitStruct.PLL.PLLM = 15;
 8000bae:	230f      	movs	r3, #15
 8000bb0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000bb2:	23a0      	movs	r3, #160	; 0xa0
 8000bb4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bc2:	2304      	movs	r3, #4
 8000bc4:	643b      	str	r3, [r7, #64]	; 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000bca:	2308      	movs	r3, #8
 8000bcc:	64bb      	str	r3, [r7, #72]	; 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000bce:	f107 0308 	add.w	r3, r7, #8
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f001 ff42 	bl	8002a5c <HAL_RCC_OscConfig>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 8000bde:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000be6:	f000 f987 	bl	8000ef8 <Error_Handler>
  }

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8000bea:	233f      	movs	r3, #63	; 0x3f
 8000bec:	657b      	str	r3, [r7, #84]	; 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bee:	2303      	movs	r3, #3
 8000bf0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000bf6:	2308      	movs	r3, #8
 8000bf8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000bfa:	2340      	movs	r3, #64	; 0x40
 8000bfc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000bfe:	2340      	movs	r3, #64	; 0x40
 8000c00:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c06:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c08:	2340      	movs	r3, #64	; 0x40
 8000c0a:	673b      	str	r3, [r7, #112]	; 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8000c0c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c10:	2104      	movs	r1, #4
 8000c12:	4618      	mov	r0, r3
 8000c14:	f002 fb32 	bl	800327c <HAL_RCC_ClockConfig>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 8000c1e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000c26:	f000 f967 	bl	8000ef8 <Error_Handler>

  __HAL_RCC_SYSCFG_CLK_ENABLE() ;

  HAL_EnableCompensationCell();
  */
}
 8000c2a:	bf00      	nop
 8000c2c:	3778      	adds	r7, #120	; 0x78
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	58000400 	.word	0x58000400
 8000c38:	58024800 	.word	0x58024800

08000c3c <MX_QUADSPI_Init>:

static void MX_QUADSPI_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
	hqspi.Instance = QUADSPI;
 8000c40:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <MX_QUADSPI_Init+0x50>)
 8000c42:	4a13      	ldr	r2, [pc, #76]	; (8000c90 <MX_QUADSPI_Init+0x54>)
 8000c44:	601a      	str	r2, [r3, #0]
	hqspi.Init.ClockPrescaler = 255;
 8000c46:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <MX_QUADSPI_Init+0x50>)
 8000c48:	22ff      	movs	r2, #255	; 0xff
 8000c4a:	605a      	str	r2, [r3, #4]
	hqspi.Init.FifoThreshold = 1;
 8000c4c:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <MX_QUADSPI_Init+0x50>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	609a      	str	r2, [r3, #8]
	hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000c52:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <MX_QUADSPI_Init+0x50>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	60da      	str	r2, [r3, #12]
	hqspi.Init.FlashSize = 1;
 8000c58:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <MX_QUADSPI_Init+0x50>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	611a      	str	r2, [r3, #16]
	hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000c5e:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <MX_QUADSPI_Init+0x50>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	615a      	str	r2, [r3, #20]
	hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000c64:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <MX_QUADSPI_Init+0x50>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	619a      	str	r2, [r3, #24]
	hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000c6a:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <MX_QUADSPI_Init+0x50>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	61da      	str	r2, [r3, #28]
	hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <MX_QUADSPI_Init+0x50>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	621a      	str	r2, [r3, #32]
	if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000c76:	4805      	ldr	r0, [pc, #20]	; (8000c8c <MX_QUADSPI_Init+0x50>)
 8000c78:	f001 fe36 	bl	80028e8 <HAL_QSPI_Init>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_QUADSPI_Init+0x4a>
	{
	Error_Handler();
 8000c82:	f000 f939 	bl	8000ef8 <Error_Handler>
	}
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	24004218 	.word	0x24004218
 8000c90:	52005000 	.word	0x52005000

08000c94 <MX_SDMMC1_SD_Init>:

static void MX_SDMMC1_SD_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
	hsd1.Instance = SDMMC1;
 8000c98:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <MX_SDMMC1_SD_Init+0x44>)
 8000c9a:	4a10      	ldr	r2, [pc, #64]	; (8000cdc <MX_SDMMC1_SD_Init+0x48>)
 8000c9c:	601a      	str	r2, [r3, #0]
	hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <MX_SDMMC1_SD_Init+0x44>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	605a      	str	r2, [r3, #4]
	hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <MX_SDMMC1_SD_Init+0x44>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
	hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000caa:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <MX_SDMMC1_SD_Init+0x44>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	60da      	str	r2, [r3, #12]
	hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000cb0:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <MX_SDMMC1_SD_Init+0x44>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	611a      	str	r2, [r3, #16]
	hsd1.Init.ClockDiv = 0;
 8000cb6:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <MX_SDMMC1_SD_Init+0x44>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	615a      	str	r2, [r3, #20]
	hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <MX_SDMMC1_SD_Init+0x44>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	619a      	str	r2, [r3, #24]
	if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000cc2:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <MX_SDMMC1_SD_Init+0x44>)
 8000cc4:	f005 f81c 	bl	8005d00 <HAL_SD_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_SDMMC1_SD_Init+0x3e>
	{
		Error_Handler();
 8000cce:	f000 f913 	bl	8000ef8 <Error_Handler>
	}
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	2400405c 	.word	0x2400405c
 8000cdc:	52007000 	.word	0x52007000

08000ce0 <MX_UART8_Init>:

static void MX_UART8_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
	huart8.Instance = UART8;
 8000ce4:	4b22      	ldr	r3, [pc, #136]	; (8000d70 <MX_UART8_Init+0x90>)
 8000ce6:	4a23      	ldr	r2, [pc, #140]	; (8000d74 <MX_UART8_Init+0x94>)
 8000ce8:	601a      	str	r2, [r3, #0]
	huart8.Init.BaudRate = 115200;
 8000cea:	4b21      	ldr	r3, [pc, #132]	; (8000d70 <MX_UART8_Init+0x90>)
 8000cec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cf0:	605a      	str	r2, [r3, #4]
	huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000cf2:	4b1f      	ldr	r3, [pc, #124]	; (8000d70 <MX_UART8_Init+0x90>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	609a      	str	r2, [r3, #8]
	huart8.Init.StopBits = UART_STOPBITS_1;
 8000cf8:	4b1d      	ldr	r3, [pc, #116]	; (8000d70 <MX_UART8_Init+0x90>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	60da      	str	r2, [r3, #12]
	huart8.Init.Parity = UART_PARITY_NONE;
 8000cfe:	4b1c      	ldr	r3, [pc, #112]	; (8000d70 <MX_UART8_Init+0x90>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	611a      	str	r2, [r3, #16]
	huart8.Init.Mode = UART_MODE_TX_RX;
 8000d04:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <MX_UART8_Init+0x90>)
 8000d06:	220c      	movs	r2, #12
 8000d08:	615a      	str	r2, [r3, #20]
	huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d0a:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <MX_UART8_Init+0x90>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	619a      	str	r2, [r3, #24]
	huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d10:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <MX_UART8_Init+0x90>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	61da      	str	r2, [r3, #28]
	huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d16:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <MX_UART8_Init+0x90>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	621a      	str	r2, [r3, #32]
	huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d1c:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <MX_UART8_Init+0x90>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	625a      	str	r2, [r3, #36]	; 0x24
	huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d22:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <MX_UART8_Init+0x90>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart8) != HAL_OK)
 8000d28:	4811      	ldr	r0, [pc, #68]	; (8000d70 <MX_UART8_Init+0x90>)
 8000d2a:	f006 fcc5 	bl	80076b8 <HAL_UART_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_UART8_Init+0x58>
	{
		Error_Handler();
 8000d34:	f000 f8e0 	bl	8000ef8 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d38:	2100      	movs	r1, #0
 8000d3a:	480d      	ldr	r0, [pc, #52]	; (8000d70 <MX_UART8_Init+0x90>)
 8000d3c:	f008 fbe3 	bl	8009506 <HAL_UARTEx_SetTxFifoThreshold>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_UART8_Init+0x6a>
	{
		Error_Handler();
 8000d46:	f000 f8d7 	bl	8000ef8 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4808      	ldr	r0, [pc, #32]	; (8000d70 <MX_UART8_Init+0x90>)
 8000d4e:	f008 fc18 	bl	8009582 <HAL_UARTEx_SetRxFifoThreshold>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_UART8_Init+0x7c>
	{
		Error_Handler();
 8000d58:	f000 f8ce 	bl	8000ef8 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000d5c:	4804      	ldr	r0, [pc, #16]	; (8000d70 <MX_UART8_Init+0x90>)
 8000d5e:	f008 fb99 	bl	8009494 <HAL_UARTEx_DisableFifoMode>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_UART8_Init+0x8c>
	{
		Error_Handler();
 8000d68:	f000 f8c6 	bl	8000ef8 <Error_Handler>
	}
}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	24004188 	.word	0x24004188
 8000d74:	40007c00 	.word	0x40007c00

08000d78 <MX_USART1_UART_Init>:

static void MX_USART1_UART_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 8000d7c:	4b22      	ldr	r3, [pc, #136]	; (8000e08 <MX_USART1_UART_Init+0x90>)
 8000d7e:	4a23      	ldr	r2, [pc, #140]	; (8000e0c <MX_USART1_UART_Init+0x94>)
 8000d80:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000d82:	4b21      	ldr	r3, [pc, #132]	; (8000e08 <MX_USART1_UART_Init+0x90>)
 8000d84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d88:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d8a:	4b1f      	ldr	r3, [pc, #124]	; (8000e08 <MX_USART1_UART_Init+0x90>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000d90:	4b1d      	ldr	r3, [pc, #116]	; (8000e08 <MX_USART1_UART_Init+0x90>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000d96:	4b1c      	ldr	r3, [pc, #112]	; (8000e08 <MX_USART1_UART_Init+0x90>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000d9c:	4b1a      	ldr	r3, [pc, #104]	; (8000e08 <MX_USART1_UART_Init+0x90>)
 8000d9e:	220c      	movs	r2, #12
 8000da0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000da2:	4b19      	ldr	r3, [pc, #100]	; (8000e08 <MX_USART1_UART_Init+0x90>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da8:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <MX_USART1_UART_Init+0x90>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dae:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <MX_USART1_UART_Init+0x90>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000db4:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <MX_USART1_UART_Init+0x90>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dba:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <MX_USART1_UART_Init+0x90>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dc0:	4811      	ldr	r0, [pc, #68]	; (8000e08 <MX_USART1_UART_Init+0x90>)
 8000dc2:	f006 fc79 	bl	80076b8 <HAL_UART_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_USART1_UART_Init+0x58>
	{
		Error_Handler();
 8000dcc:	f000 f894 	bl	8000ef8 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	480d      	ldr	r0, [pc, #52]	; (8000e08 <MX_USART1_UART_Init+0x90>)
 8000dd4:	f008 fb97 	bl	8009506 <HAL_UARTEx_SetTxFifoThreshold>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_USART1_UART_Init+0x6a>
	{
		Error_Handler();
 8000dde:	f000 f88b 	bl	8000ef8 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000de2:	2100      	movs	r1, #0
 8000de4:	4808      	ldr	r0, [pc, #32]	; (8000e08 <MX_USART1_UART_Init+0x90>)
 8000de6:	f008 fbcc 	bl	8009582 <HAL_UARTEx_SetRxFifoThreshold>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_USART1_UART_Init+0x7c>
	{
		Error_Handler();
 8000df0:	f000 f882 	bl	8000ef8 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000df4:	4804      	ldr	r0, [pc, #16]	; (8000e08 <MX_USART1_UART_Init+0x90>)
 8000df6:	f008 fb4d 	bl	8009494 <HAL_UARTEx_DisableFifoMode>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_USART1_UART_Init+0x8c>
	{
		Error_Handler();
 8000e00:	f000 f87a 	bl	8000ef8 <Error_Handler>
	}
}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	240040e0 	.word	0x240040e0
 8000e0c:	40011000 	.word	0x40011000

08000e10 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b089      	sub	sp, #36	; 0x24
 8000e14:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000e16:	4b37      	ldr	r3, [pc, #220]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1c:	4a35      	ldr	r2, [pc, #212]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000e1e:	f043 0304 	orr.w	r3, r3, #4
 8000e22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e26:	4b33      	ldr	r3, [pc, #204]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000e28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e2c:	f003 0304 	and.w	r3, r3, #4
 8000e30:	61fb      	str	r3, [r7, #28]
 8000e32:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000e34:	4b2f      	ldr	r3, [pc, #188]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3a:	4a2e      	ldr	r2, [pc, #184]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000e3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e44:	4b2b      	ldr	r3, [pc, #172]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000e46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e4e:	61bb      	str	r3, [r7, #24]
 8000e50:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000e52:	4b28      	ldr	r3, [pc, #160]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e58:	4a26      	ldr	r2, [pc, #152]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000e5a:	f043 0310 	orr.w	r3, r3, #16
 8000e5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e62:	4b24      	ldr	r3, [pc, #144]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e68:	f003 0310 	and.w	r3, r3, #16
 8000e6c:	617b      	str	r3, [r7, #20]
 8000e6e:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000e70:	4b20      	ldr	r3, [pc, #128]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e76:	4a1f      	ldr	r2, [pc, #124]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000e78:	f043 0308 	orr.w	r3, r3, #8
 8000e7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e80:	4b1c      	ldr	r3, [pc, #112]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e86:	f003 0308 	and.w	r3, r3, #8
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8e:	4b19      	ldr	r3, [pc, #100]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e94:	4a17      	ldr	r2, [pc, #92]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000e96:	f043 0301 	orr.w	r3, r3, #1
 8000e9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e9e:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea4:	f003 0301 	and.w	r3, r3, #1
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb2:	4a10      	ldr	r2, [pc, #64]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000eb4:	f043 0320 	orr.w	r3, r3, #32
 8000eb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ebc:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec2:	f003 0320 	and.w	r3, r3, #32
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 8000eca:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed0:	4a08      	ldr	r2, [pc, #32]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000ed2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ed6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eda:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	687b      	ldr	r3, [r7, #4]
}
 8000ee8:	bf00      	nop
 8000eea:	3724      	adds	r7, #36	; 0x24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	58024400 	.word	0x58024400

08000ef8 <Error_Handler>:
  }
  /* USER CODE END 5 */
}

void Error_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0

}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
	...

08000f08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <HAL_MspInit+0x38>)
 8000f10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f14:	4a0a      	ldr	r2, [pc, #40]	; (8000f40 <HAL_MspInit+0x38>)
 8000f16:	f043 0302 	orr.w	r3, r3, #2
 8000f1a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f1e:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <HAL_MspInit+0x38>)
 8000f20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f24:	f003 0302 	and.w	r3, r3, #2
 8000f28:	607b      	str	r3, [r7, #4]
 8000f2a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	210f      	movs	r1, #15
 8000f30:	f06f 0001 	mvn.w	r0, #1
 8000f34:	f000 fd09 	bl	800194a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	58024400 	.word	0x58024400

08000f44 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b0bc      	sub	sp, #240	; 0xf0
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f5c:	f107 031c 	add.w	r3, r7, #28
 8000f60:	22c0      	movs	r2, #192	; 0xc0
 8000f62:	2100      	movs	r1, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f00b ff3b 	bl	800cde0 <memset>
  if(hqspi->Instance==QUADSPI)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a5c      	ldr	r2, [pc, #368]	; (80010e0 <HAL_QSPI_MspInit+0x19c>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	f040 80b0 	bne.w	80010d6 <HAL_QSPI_MspInit+0x192>
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8000f76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f7a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f80:	f107 031c 	add.w	r3, r7, #28
 8000f84:	4618      	mov	r0, r3
 8000f86:	f002 fd05 	bl	8003994 <HAL_RCCEx_PeriphCLKConfig>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 8000f90:	f7ff ffb2 	bl	8000ef8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000f94:	4b53      	ldr	r3, [pc, #332]	; (80010e4 <HAL_QSPI_MspInit+0x1a0>)
 8000f96:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f9a:	4a52      	ldr	r2, [pc, #328]	; (80010e4 <HAL_QSPI_MspInit+0x1a0>)
 8000f9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa0:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000fa4:	4b4f      	ldr	r3, [pc, #316]	; (80010e4 <HAL_QSPI_MspInit+0x1a0>)
 8000fa6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000faa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fae:	61bb      	str	r3, [r7, #24]
 8000fb0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb2:	4b4c      	ldr	r3, [pc, #304]	; (80010e4 <HAL_QSPI_MspInit+0x1a0>)
 8000fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb8:	4a4a      	ldr	r2, [pc, #296]	; (80010e4 <HAL_QSPI_MspInit+0x1a0>)
 8000fba:	f043 0304 	orr.w	r3, r3, #4
 8000fbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fc2:	4b48      	ldr	r3, [pc, #288]	; (80010e4 <HAL_QSPI_MspInit+0x1a0>)
 8000fc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc8:	f003 0304 	and.w	r3, r3, #4
 8000fcc:	617b      	str	r3, [r7, #20]
 8000fce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fd0:	4b44      	ldr	r3, [pc, #272]	; (80010e4 <HAL_QSPI_MspInit+0x1a0>)
 8000fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd6:	4a43      	ldr	r2, [pc, #268]	; (80010e4 <HAL_QSPI_MspInit+0x1a0>)
 8000fd8:	f043 0310 	orr.w	r3, r3, #16
 8000fdc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fe0:	4b40      	ldr	r3, [pc, #256]	; (80010e4 <HAL_QSPI_MspInit+0x1a0>)
 8000fe2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe6:	f003 0310 	and.w	r3, r3, #16
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fee:	4b3d      	ldr	r3, [pc, #244]	; (80010e4 <HAL_QSPI_MspInit+0x1a0>)
 8000ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff4:	4a3b      	ldr	r2, [pc, #236]	; (80010e4 <HAL_QSPI_MspInit+0x1a0>)
 8000ff6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ffa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ffe:	4b39      	ldr	r3, [pc, #228]	; (80010e4 <HAL_QSPI_MspInit+0x1a0>)
 8001000:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800100c:	4b35      	ldr	r3, [pc, #212]	; (80010e4 <HAL_QSPI_MspInit+0x1a0>)
 800100e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001012:	4a34      	ldr	r2, [pc, #208]	; (80010e4 <HAL_QSPI_MspInit+0x1a0>)
 8001014:	f043 0320 	orr.w	r3, r3, #32
 8001018:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800101c:	4b31      	ldr	r3, [pc, #196]	; (80010e4 <HAL_QSPI_MspInit+0x1a0>)
 800101e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001022:	f003 0320 	and.w	r3, r3, #32
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]
    PC9     ------> QUADSPI_BK1_IO0
    PG6     ------> QUADSPI_BK1_NCS
    PF6     ------> QUADSPI_BK1_IO3
    PF10     ------> QUADSPI_CLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 800102a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800102e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001032:	2302      	movs	r3, #2
 8001034:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103e:	2300      	movs	r3, #0
 8001040:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001044:	2309      	movs	r3, #9
 8001046:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800104a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800104e:	4619      	mov	r1, r3
 8001050:	4825      	ldr	r0, [pc, #148]	; (80010e8 <HAL_QSPI_MspInit+0x1a4>)
 8001052:	f001 fa11 	bl	8002478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001056:	2304      	movs	r3, #4
 8001058:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105c:	2302      	movs	r3, #2
 800105e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	2300      	movs	r3, #0
 800106a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800106e:	2309      	movs	r3, #9
 8001070:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001074:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001078:	4619      	mov	r1, r3
 800107a:	481c      	ldr	r0, [pc, #112]	; (80010ec <HAL_QSPI_MspInit+0x1a8>)
 800107c:	f001 f9fc 	bl	8002478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001080:	2340      	movs	r3, #64	; 0x40
 8001082:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001086:	2302      	movs	r3, #2
 8001088:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2300      	movs	r3, #0
 8001094:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001098:	230a      	movs	r3, #10
 800109a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800109e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80010a2:	4619      	mov	r1, r3
 80010a4:	4812      	ldr	r0, [pc, #72]	; (80010f0 <HAL_QSPI_MspInit+0x1ac>)
 80010a6:	f001 f9e7 	bl	8002478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 80010aa:	f44f 6388 	mov.w	r3, #1088	; 0x440
 80010ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010be:	2300      	movs	r3, #0
 80010c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80010c4:	2309      	movs	r3, #9
 80010c6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010ca:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80010ce:	4619      	mov	r1, r3
 80010d0:	4808      	ldr	r0, [pc, #32]	; (80010f4 <HAL_QSPI_MspInit+0x1b0>)
 80010d2:	f001 f9d1 	bl	8002478 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80010d6:	bf00      	nop
 80010d8:	37f0      	adds	r7, #240	; 0xf0
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	52005000 	.word	0x52005000
 80010e4:	58024400 	.word	0x58024400
 80010e8:	58020800 	.word	0x58020800
 80010ec:	58021000 	.word	0x58021000
 80010f0:	58021800 	.word	0x58021800
 80010f4:	58021400 	.word	0x58021400

080010f8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b0ba      	sub	sp, #232	; 0xe8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	22c0      	movs	r2, #192	; 0xc0
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f00b fe61 	bl	800cde0 <memset>
  if(hsd->Instance==SDMMC1)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a3b      	ldr	r2, [pc, #236]	; (8001210 <HAL_SD_MspInit+0x118>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d16e      	bne.n	8001206 <HAL_SD_MspInit+0x10e>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001128:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800112c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800112e:	2300      	movs	r3, #0
 8001130:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001132:	f107 0314 	add.w	r3, r7, #20
 8001136:	4618      	mov	r0, r3
 8001138:	f002 fc2c 	bl	8003994 <HAL_RCCEx_PeriphCLKConfig>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <HAL_SD_MspInit+0x4e>
    {
      Error_Handler();
 8001142:	f7ff fed9 	bl	8000ef8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001146:	4b33      	ldr	r3, [pc, #204]	; (8001214 <HAL_SD_MspInit+0x11c>)
 8001148:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800114c:	4a31      	ldr	r2, [pc, #196]	; (8001214 <HAL_SD_MspInit+0x11c>)
 800114e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001152:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001156:	4b2f      	ldr	r3, [pc, #188]	; (8001214 <HAL_SD_MspInit+0x11c>)
 8001158:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800115c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001160:	613b      	str	r3, [r7, #16]
 8001162:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001164:	4b2b      	ldr	r3, [pc, #172]	; (8001214 <HAL_SD_MspInit+0x11c>)
 8001166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800116a:	4a2a      	ldr	r2, [pc, #168]	; (8001214 <HAL_SD_MspInit+0x11c>)
 800116c:	f043 0304 	orr.w	r3, r3, #4
 8001170:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001174:	4b27      	ldr	r3, [pc, #156]	; (8001214 <HAL_SD_MspInit+0x11c>)
 8001176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800117a:	f003 0304 	and.w	r3, r3, #4
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001182:	4b24      	ldr	r3, [pc, #144]	; (8001214 <HAL_SD_MspInit+0x11c>)
 8001184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001188:	4a22      	ldr	r2, [pc, #136]	; (8001214 <HAL_SD_MspInit+0x11c>)
 800118a:	f043 0308 	orr.w	r3, r3, #8
 800118e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001192:	4b20      	ldr	r3, [pc, #128]	; (8001214 <HAL_SD_MspInit+0x11c>)
 8001194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001198:	f003 0308 	and.w	r3, r3, #8
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 80011a0:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80011a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a8:	2302      	movs	r3, #2
 80011aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b4:	2303      	movs	r3, #3
 80011b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80011ba:	230c      	movs	r3, #12
 80011bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011c4:	4619      	mov	r1, r3
 80011c6:	4814      	ldr	r0, [pc, #80]	; (8001218 <HAL_SD_MspInit+0x120>)
 80011c8:	f001 f956 	bl	8002478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011cc:	2304      	movs	r3, #4
 80011ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d2:	2302      	movs	r3, #2
 80011d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011de:	2303      	movs	r3, #3
 80011e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80011e4:	230c      	movs	r3, #12
 80011e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ea:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011ee:	4619      	mov	r1, r3
 80011f0:	480a      	ldr	r0, [pc, #40]	; (800121c <HAL_SD_MspInit+0x124>)
 80011f2:	f001 f941 	bl	8002478 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2105      	movs	r1, #5
 80011fa:	2031      	movs	r0, #49	; 0x31
 80011fc:	f000 fba5 	bl	800194a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001200:	2031      	movs	r0, #49	; 0x31
 8001202:	f000 fbbc 	bl	800197e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001206:	bf00      	nop
 8001208:	37e8      	adds	r7, #232	; 0xe8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	52007000 	.word	0x52007000
 8001214:	58024400 	.word	0x58024400
 8001218:	58020800 	.word	0x58020800
 800121c:	58020c00 	.word	0x58020c00

08001220 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b0bc      	sub	sp, #240	; 0xf0
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001238:	f107 031c 	add.w	r3, r7, #28
 800123c:	22c0      	movs	r2, #192	; 0xc0
 800123e:	2100      	movs	r1, #0
 8001240:	4618      	mov	r0, r3
 8001242:	f00b fdcd 	bl	800cde0 <memset>
  if(huart->Instance==UART8)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a51      	ldr	r2, [pc, #324]	; (8001390 <HAL_UART_MspInit+0x170>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d14b      	bne.n	80012e8 <HAL_UART_MspInit+0xc8>
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8001250:	2302      	movs	r3, #2
 8001252:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001254:	2300      	movs	r3, #0
 8001256:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800125a:	f107 031c 	add.w	r3, r7, #28
 800125e:	4618      	mov	r0, r3
 8001260:	f002 fb98 	bl	8003994 <HAL_RCCEx_PeriphCLKConfig>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800126a:	f7ff fe45 	bl	8000ef8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 800126e:	4b49      	ldr	r3, [pc, #292]	; (8001394 <HAL_UART_MspInit+0x174>)
 8001270:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001274:	4a47      	ldr	r2, [pc, #284]	; (8001394 <HAL_UART_MspInit+0x174>)
 8001276:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800127a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800127e:	4b45      	ldr	r3, [pc, #276]	; (8001394 <HAL_UART_MspInit+0x174>)
 8001280:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001284:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001288:	61bb      	str	r3, [r7, #24]
 800128a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800128c:	4b41      	ldr	r3, [pc, #260]	; (8001394 <HAL_UART_MspInit+0x174>)
 800128e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001292:	4a40      	ldr	r2, [pc, #256]	; (8001394 <HAL_UART_MspInit+0x174>)
 8001294:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001298:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800129c:	4b3d      	ldr	r3, [pc, #244]	; (8001394 <HAL_UART_MspInit+0x174>)
 800129e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012a6:	617b      	str	r3, [r7, #20]
 80012a8:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PJ9     ------> UART8_RX
    PJ8     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 80012aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b2:	2302      	movs	r3, #2
 80012b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	2300      	movs	r3, #0
 80012c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80012c4:	2308      	movs	r3, #8
 80012c6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80012ca:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012ce:	4619      	mov	r1, r3
 80012d0:	4831      	ldr	r0, [pc, #196]	; (8001398 <HAL_UART_MspInit+0x178>)
 80012d2:	f001 f8d1 	bl	8002478 <HAL_GPIO_Init>

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2105      	movs	r1, #5
 80012da:	2053      	movs	r0, #83	; 0x53
 80012dc:	f000 fb35 	bl	800194a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 80012e0:	2053      	movs	r0, #83	; 0x53
 80012e2:	f000 fb4c 	bl	800197e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80012e6:	e04f      	b.n	8001388 <HAL_UART_MspInit+0x168>
  else if(huart->Instance==USART1)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a2b      	ldr	r2, [pc, #172]	; (800139c <HAL_UART_MspInit+0x17c>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d14a      	bne.n	8001388 <HAL_UART_MspInit+0x168>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80012f2:	2301      	movs	r3, #1
 80012f4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80012f6:	2300      	movs	r3, #0
 80012f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012fc:	f107 031c 	add.w	r3, r7, #28
 8001300:	4618      	mov	r0, r3
 8001302:	f002 fb47 	bl	8003994 <HAL_RCCEx_PeriphCLKConfig>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 800130c:	f7ff fdf4 	bl	8000ef8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001310:	4b20      	ldr	r3, [pc, #128]	; (8001394 <HAL_UART_MspInit+0x174>)
 8001312:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001316:	4a1f      	ldr	r2, [pc, #124]	; (8001394 <HAL_UART_MspInit+0x174>)
 8001318:	f043 0310 	orr.w	r3, r3, #16
 800131c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001320:	4b1c      	ldr	r3, [pc, #112]	; (8001394 <HAL_UART_MspInit+0x174>)
 8001322:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001326:	f003 0310 	and.w	r3, r3, #16
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132e:	4b19      	ldr	r3, [pc, #100]	; (8001394 <HAL_UART_MspInit+0x174>)
 8001330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001334:	4a17      	ldr	r2, [pc, #92]	; (8001394 <HAL_UART_MspInit+0x174>)
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800133e:	4b15      	ldr	r3, [pc, #84]	; (8001394 <HAL_UART_MspInit+0x174>)
 8001340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 800134c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001350:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001354:	2302      	movs	r3, #2
 8001356:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001360:	2300      	movs	r3, #0
 8001362:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001366:	2307      	movs	r3, #7
 8001368:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001370:	4619      	mov	r1, r3
 8001372:	480b      	ldr	r0, [pc, #44]	; (80013a0 <HAL_UART_MspInit+0x180>)
 8001374:	f001 f880 	bl	8002478 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001378:	2200      	movs	r2, #0
 800137a:	2105      	movs	r1, #5
 800137c:	2025      	movs	r0, #37	; 0x25
 800137e:	f000 fae4 	bl	800194a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001382:	2025      	movs	r0, #37	; 0x25
 8001384:	f000 fafb 	bl	800197e <HAL_NVIC_EnableIRQ>
}
 8001388:	bf00      	nop
 800138a:	37f0      	adds	r7, #240	; 0xf0
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40007c00 	.word	0x40007c00
 8001394:	58024400 	.word	0x58024400
 8001398:	58022400 	.word	0x58022400
 800139c:	40011000 	.word	0x40011000
 80013a0:	58020000 	.word	0x58020000

080013a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <NMI_Handler+0x4>

080013aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ae:	e7fe      	b.n	80013ae <HardFault_Handler+0x4>

080013b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <MemManage_Handler+0x4>

080013b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ba:	e7fe      	b.n	80013ba <BusFault_Handler+0x4>

080013bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <UsageFault_Handler+0x4>

080013c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013d4:	f000 f98e 	bl	80016f4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80013d8:	f00b fb5e 	bl	800ca98 <xTaskGetSchedulerState>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d001      	beq.n	80013e6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80013e2:	f009 ffd1 	bl	800b388 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
	...

080013ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013f0:	4802      	ldr	r0, [pc, #8]	; (80013fc <USART1_IRQHandler+0x10>)
 80013f2:	f006 fa8d 	bl	8007910 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	240040e0 	.word	0x240040e0

08001400 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001404:	4802      	ldr	r0, [pc, #8]	; (8001410 <SDMMC1_IRQHandler+0x10>)
 8001406:	f004 fef7 	bl	80061f8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	2400405c 	.word	0x2400405c

08001414 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8001418:	4802      	ldr	r0, [pc, #8]	; (8001424 <UART8_IRQHandler+0x10>)
 800141a:	f006 fa79 	bl	8007910 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	24004188 	.word	0x24004188

08001428 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
	return 1;
 800142c:	2301      	movs	r3, #1
}
 800142e:	4618      	mov	r0, r3
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <_kill>:

int _kill(int pid, int sig)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001442:	4b05      	ldr	r3, [pc, #20]	; (8001458 <_kill+0x20>)
 8001444:	2216      	movs	r2, #22
 8001446:	601a      	str	r2, [r3, #0]
	return -1;
 8001448:	f04f 33ff 	mov.w	r3, #4294967295
}
 800144c:	4618      	mov	r0, r3
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	24004db0 	.word	0x24004db0

0800145c <_exit>:

void _exit (int status)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001464:	f04f 31ff 	mov.w	r1, #4294967295
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff ffe5 	bl	8001438 <_kill>
	while (1) {}		/* Make sure we hang here */
 800146e:	e7fe      	b.n	800146e <_exit+0x12>

08001470 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
 8001480:	e00a      	b.n	8001498 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001482:	f3af 8000 	nop.w
 8001486:	4601      	mov	r1, r0
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	1c5a      	adds	r2, r3, #1
 800148c:	60ba      	str	r2, [r7, #8]
 800148e:	b2ca      	uxtb	r2, r1
 8001490:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	3301      	adds	r3, #1
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	697a      	ldr	r2, [r7, #20]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	429a      	cmp	r2, r3
 800149e:	dbf0      	blt.n	8001482 <_read+0x12>
	}

return len;
 80014a0:	687b      	ldr	r3, [r7, #4]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b086      	sub	sp, #24
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	60f8      	str	r0, [r7, #12]
 80014b2:	60b9      	str	r1, [r7, #8]
 80014b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
 80014ba:	e009      	b.n	80014d0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	1c5a      	adds	r2, r3, #1
 80014c0:	60ba      	str	r2, [r7, #8]
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff f98b 	bl	80007e0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	3301      	adds	r3, #1
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	697a      	ldr	r2, [r7, #20]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	dbf1      	blt.n	80014bc <_write+0x12>
	}
	return len;
 80014d8:	687b      	ldr	r3, [r7, #4]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <_close>:

int _close(int file)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
	return -1;
 80014ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014fa:	b480      	push	{r7}
 80014fc:	b083      	sub	sp, #12
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
 8001502:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800150a:	605a      	str	r2, [r3, #4]
	return 0;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <_isatty>:

int _isatty(int file)
{
 800151a:	b480      	push	{r7}
 800151c:	b083      	sub	sp, #12
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
	return 1;
 8001522:	2301      	movs	r3, #1
}
 8001524:	4618      	mov	r0, r3
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
	return 0;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
	...

0800154c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800154c:	b480      	push	{r7}
 800154e:	b087      	sub	sp, #28
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001554:	4a14      	ldr	r2, [pc, #80]	; (80015a8 <_sbrk+0x5c>)
 8001556:	4b15      	ldr	r3, [pc, #84]	; (80015ac <_sbrk+0x60>)
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001560:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <_sbrk+0x64>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d102      	bne.n	800156e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001568:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <_sbrk+0x64>)
 800156a:	4a12      	ldr	r2, [pc, #72]	; (80015b4 <_sbrk+0x68>)
 800156c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800156e:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <_sbrk+0x64>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4413      	add	r3, r2
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	429a      	cmp	r2, r3
 800157a:	d205      	bcs.n	8001588 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800157c:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <_sbrk+0x6c>)
 800157e:	220c      	movs	r2, #12
 8001580:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001582:	f04f 33ff 	mov.w	r3, #4294967295
 8001586:	e009      	b.n	800159c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001588:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <_sbrk+0x64>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800158e:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <_sbrk+0x64>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4413      	add	r3, r2
 8001596:	4a06      	ldr	r2, [pc, #24]	; (80015b0 <_sbrk+0x64>)
 8001598:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800159a:	68fb      	ldr	r3, [r7, #12]
}
 800159c:	4618      	mov	r0, r3
 800159e:	371c      	adds	r7, #28
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	24040000 	.word	0x24040000
 80015ac:	00000400 	.word	0x00000400
 80015b0:	240002e8 	.word	0x240002e8
 80015b4:	24004dc8 	.word	0x24004dc8
 80015b8:	24004db0 	.word	0x24004db0

080015bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80015bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80015c0:	f7ff f85a 	bl	8000678 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015c4:	480c      	ldr	r0, [pc, #48]	; (80015f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015c6:	490d      	ldr	r1, [pc, #52]	; (80015fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015c8:	4a0d      	ldr	r2, [pc, #52]	; (8001600 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015cc:	e002      	b.n	80015d4 <LoopCopyDataInit>

080015ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015d2:	3304      	adds	r3, #4

080015d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d8:	d3f9      	bcc.n	80015ce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015da:	4a0a      	ldr	r2, [pc, #40]	; (8001604 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015dc:	4c0a      	ldr	r4, [pc, #40]	; (8001608 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e0:	e001      	b.n	80015e6 <LoopFillZerobss>

080015e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e4:	3204      	adds	r2, #4

080015e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e8:	d3fb      	bcc.n	80015e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015ea:	f00b fbbf 	bl	800cd6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ee:	f7ff f90d 	bl	800080c <main>
  bx  lr
 80015f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015f4:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 80015f8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015fc:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8001600:	0800e1f8 	.word	0x0800e1f8
  ldr r2, =_sbss
 8001604:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8001608:	24004dc4 	.word	0x24004dc4

0800160c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800160c:	e7fe      	b.n	800160c <ADC3_IRQHandler>
	...

08001610 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001616:	2003      	movs	r0, #3
 8001618:	f000 f98c 	bl	8001934 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800161c:	f001 ffe4 	bl	80035e8 <HAL_RCC_GetSysClockFreq>
 8001620:	4602      	mov	r2, r0
 8001622:	4b15      	ldr	r3, [pc, #84]	; (8001678 <HAL_Init+0x68>)
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	0a1b      	lsrs	r3, r3, #8
 8001628:	f003 030f 	and.w	r3, r3, #15
 800162c:	4913      	ldr	r1, [pc, #76]	; (800167c <HAL_Init+0x6c>)
 800162e:	5ccb      	ldrb	r3, [r1, r3]
 8001630:	f003 031f 	and.w	r3, r3, #31
 8001634:	fa22 f303 	lsr.w	r3, r2, r3
 8001638:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800163a:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <HAL_Init+0x68>)
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	f003 030f 	and.w	r3, r3, #15
 8001642:	4a0e      	ldr	r2, [pc, #56]	; (800167c <HAL_Init+0x6c>)
 8001644:	5cd3      	ldrb	r3, [r2, r3]
 8001646:	f003 031f 	and.w	r3, r3, #31
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	fa22 f303 	lsr.w	r3, r2, r3
 8001650:	4a0b      	ldr	r2, [pc, #44]	; (8001680 <HAL_Init+0x70>)
 8001652:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001654:	4a0b      	ldr	r2, [pc, #44]	; (8001684 <HAL_Init+0x74>)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800165a:	200f      	movs	r0, #15
 800165c:	f000 f814 	bl	8001688 <HAL_InitTick>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e002      	b.n	8001670 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800166a:	f7ff fc4d 	bl	8000f08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800166e:	2300      	movs	r3, #0
}
 8001670:	4618      	mov	r0, r3
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	58024400 	.word	0x58024400
 800167c:	0800df4c 	.word	0x0800df4c
 8001680:	24000004 	.word	0x24000004
 8001684:	24000000 	.word	0x24000000

08001688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001690:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <HAL_InitTick+0x60>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d101      	bne.n	800169c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e021      	b.n	80016e0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800169c:	4b13      	ldr	r3, [pc, #76]	; (80016ec <HAL_InitTick+0x64>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <HAL_InitTick+0x60>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	4619      	mov	r1, r3
 80016a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b2:	4618      	mov	r0, r3
 80016b4:	f000 f971 	bl	800199a <HAL_SYSTICK_Config>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e00e      	b.n	80016e0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2b0f      	cmp	r3, #15
 80016c6:	d80a      	bhi.n	80016de <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016c8:	2200      	movs	r2, #0
 80016ca:	6879      	ldr	r1, [r7, #4]
 80016cc:	f04f 30ff 	mov.w	r0, #4294967295
 80016d0:	f000 f93b 	bl	800194a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016d4:	4a06      	ldr	r2, [pc, #24]	; (80016f0 <HAL_InitTick+0x68>)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016da:	2300      	movs	r3, #0
 80016dc:	e000      	b.n	80016e0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	2400000c 	.word	0x2400000c
 80016ec:	24000000 	.word	0x24000000
 80016f0:	24000008 	.word	0x24000008

080016f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <HAL_IncTick+0x20>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	461a      	mov	r2, r3
 80016fe:	4b06      	ldr	r3, [pc, #24]	; (8001718 <HAL_IncTick+0x24>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4413      	add	r3, r2
 8001704:	4a04      	ldr	r2, [pc, #16]	; (8001718 <HAL_IncTick+0x24>)
 8001706:	6013      	str	r3, [r2, #0]
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	2400000c 	.word	0x2400000c
 8001718:	24004264 	.word	0x24004264

0800171c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  return uwTick;
 8001720:	4b03      	ldr	r3, [pc, #12]	; (8001730 <HAL_GetTick+0x14>)
 8001722:	681b      	ldr	r3, [r3, #0]
}
 8001724:	4618      	mov	r0, r3
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	24004264 	.word	0x24004264

08001734 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800173c:	f7ff ffee 	bl	800171c <HAL_GetTick>
 8001740:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800174c:	d005      	beq.n	800175a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800174e:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <HAL_Delay+0x44>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	461a      	mov	r2, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	4413      	add	r3, r2
 8001758:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800175a:	bf00      	nop
 800175c:	f7ff ffde 	bl	800171c <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	429a      	cmp	r2, r3
 800176a:	d8f7      	bhi.n	800175c <HAL_Delay+0x28>
  {
  }
}
 800176c:	bf00      	nop
 800176e:	bf00      	nop
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	2400000c 	.word	0x2400000c

0800177c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001780:	4b03      	ldr	r3, [pc, #12]	; (8001790 <HAL_GetREVID+0x14>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	0c1b      	lsrs	r3, r3, #16
}
 8001786:	4618      	mov	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	5c001000 	.word	0x5c001000

08001794 <__NVIC_SetPriorityGrouping>:
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a4:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <__NVIC_SetPriorityGrouping+0x40>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017b0:	4013      	ands	r3, r2
 80017b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <__NVIC_SetPriorityGrouping+0x44>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017c2:	4a04      	ldr	r2, [pc, #16]	; (80017d4 <__NVIC_SetPriorityGrouping+0x40>)
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	60d3      	str	r3, [r2, #12]
}
 80017c8:	bf00      	nop
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	e000ed00 	.word	0xe000ed00
 80017d8:	05fa0000 	.word	0x05fa0000

080017dc <__NVIC_GetPriorityGrouping>:
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e0:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <__NVIC_GetPriorityGrouping+0x18>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	0a1b      	lsrs	r3, r3, #8
 80017e6:	f003 0307 	and.w	r3, r3, #7
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <__NVIC_EnableIRQ>:
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001802:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001806:	2b00      	cmp	r3, #0
 8001808:	db0b      	blt.n	8001822 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800180a:	88fb      	ldrh	r3, [r7, #6]
 800180c:	f003 021f 	and.w	r2, r3, #31
 8001810:	4907      	ldr	r1, [pc, #28]	; (8001830 <__NVIC_EnableIRQ+0x38>)
 8001812:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001816:	095b      	lsrs	r3, r3, #5
 8001818:	2001      	movs	r0, #1
 800181a:	fa00 f202 	lsl.w	r2, r0, r2
 800181e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	e000e100 	.word	0xe000e100

08001834 <__NVIC_SetPriority>:
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	6039      	str	r1, [r7, #0]
 800183e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001840:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001844:	2b00      	cmp	r3, #0
 8001846:	db0a      	blt.n	800185e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	b2da      	uxtb	r2, r3
 800184c:	490c      	ldr	r1, [pc, #48]	; (8001880 <__NVIC_SetPriority+0x4c>)
 800184e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001852:	0112      	lsls	r2, r2, #4
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	440b      	add	r3, r1
 8001858:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800185c:	e00a      	b.n	8001874 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	b2da      	uxtb	r2, r3
 8001862:	4908      	ldr	r1, [pc, #32]	; (8001884 <__NVIC_SetPriority+0x50>)
 8001864:	88fb      	ldrh	r3, [r7, #6]
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	3b04      	subs	r3, #4
 800186c:	0112      	lsls	r2, r2, #4
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	440b      	add	r3, r1
 8001872:	761a      	strb	r2, [r3, #24]
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	e000e100 	.word	0xe000e100
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <NVIC_EncodePriority>:
{
 8001888:	b480      	push	{r7}
 800188a:	b089      	sub	sp, #36	; 0x24
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f1c3 0307 	rsb	r3, r3, #7
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	bf28      	it	cs
 80018a6:	2304      	movcs	r3, #4
 80018a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3304      	adds	r3, #4
 80018ae:	2b06      	cmp	r3, #6
 80018b0:	d902      	bls.n	80018b8 <NVIC_EncodePriority+0x30>
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	3b03      	subs	r3, #3
 80018b6:	e000      	b.n	80018ba <NVIC_EncodePriority+0x32>
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018bc:	f04f 32ff 	mov.w	r2, #4294967295
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43da      	mvns	r2, r3
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	401a      	ands	r2, r3
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d0:	f04f 31ff 	mov.w	r1, #4294967295
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	fa01 f303 	lsl.w	r3, r1, r3
 80018da:	43d9      	mvns	r1, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	4313      	orrs	r3, r2
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3724      	adds	r7, #36	; 0x24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
	...

080018f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001900:	d301      	bcc.n	8001906 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001902:	2301      	movs	r3, #1
 8001904:	e00f      	b.n	8001926 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001906:	4a0a      	ldr	r2, [pc, #40]	; (8001930 <SysTick_Config+0x40>)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3b01      	subs	r3, #1
 800190c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800190e:	210f      	movs	r1, #15
 8001910:	f04f 30ff 	mov.w	r0, #4294967295
 8001914:	f7ff ff8e 	bl	8001834 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001918:	4b05      	ldr	r3, [pc, #20]	; (8001930 <SysTick_Config+0x40>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800191e:	4b04      	ldr	r3, [pc, #16]	; (8001930 <SysTick_Config+0x40>)
 8001920:	2207      	movs	r2, #7
 8001922:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	e000e010 	.word	0xe000e010

08001934 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f7ff ff29 	bl	8001794 <__NVIC_SetPriorityGrouping>
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b086      	sub	sp, #24
 800194e:	af00      	add	r7, sp, #0
 8001950:	4603      	mov	r3, r0
 8001952:	60b9      	str	r1, [r7, #8]
 8001954:	607a      	str	r2, [r7, #4]
 8001956:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001958:	f7ff ff40 	bl	80017dc <__NVIC_GetPriorityGrouping>
 800195c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	6978      	ldr	r0, [r7, #20]
 8001964:	f7ff ff90 	bl	8001888 <NVIC_EncodePriority>
 8001968:	4602      	mov	r2, r0
 800196a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800196e:	4611      	mov	r1, r2
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ff5f 	bl	8001834 <__NVIC_SetPriority>
}
 8001976:	bf00      	nop
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	4603      	mov	r3, r0
 8001986:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001988:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff ff33 	bl	80017f8 <__NVIC_EnableIRQ>
}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff ffa4 	bl	80018f0 <SysTick_Config>
 80019a8:	4603      	mov	r3, r0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
	...

080019b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80019bc:	f7ff feae 	bl	800171c <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d101      	bne.n	80019cc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e2dc      	b.n	8001f86 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d008      	beq.n	80019ea <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2280      	movs	r2, #128	; 0x80
 80019dc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e2cd      	b.n	8001f86 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a76      	ldr	r2, [pc, #472]	; (8001bc8 <HAL_DMA_Abort+0x214>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d04a      	beq.n	8001a8a <HAL_DMA_Abort+0xd6>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a74      	ldr	r2, [pc, #464]	; (8001bcc <HAL_DMA_Abort+0x218>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d045      	beq.n	8001a8a <HAL_DMA_Abort+0xd6>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a73      	ldr	r2, [pc, #460]	; (8001bd0 <HAL_DMA_Abort+0x21c>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d040      	beq.n	8001a8a <HAL_DMA_Abort+0xd6>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a71      	ldr	r2, [pc, #452]	; (8001bd4 <HAL_DMA_Abort+0x220>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d03b      	beq.n	8001a8a <HAL_DMA_Abort+0xd6>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a70      	ldr	r2, [pc, #448]	; (8001bd8 <HAL_DMA_Abort+0x224>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d036      	beq.n	8001a8a <HAL_DMA_Abort+0xd6>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a6e      	ldr	r2, [pc, #440]	; (8001bdc <HAL_DMA_Abort+0x228>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d031      	beq.n	8001a8a <HAL_DMA_Abort+0xd6>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a6d      	ldr	r2, [pc, #436]	; (8001be0 <HAL_DMA_Abort+0x22c>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d02c      	beq.n	8001a8a <HAL_DMA_Abort+0xd6>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a6b      	ldr	r2, [pc, #428]	; (8001be4 <HAL_DMA_Abort+0x230>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d027      	beq.n	8001a8a <HAL_DMA_Abort+0xd6>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a6a      	ldr	r2, [pc, #424]	; (8001be8 <HAL_DMA_Abort+0x234>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d022      	beq.n	8001a8a <HAL_DMA_Abort+0xd6>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a68      	ldr	r2, [pc, #416]	; (8001bec <HAL_DMA_Abort+0x238>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d01d      	beq.n	8001a8a <HAL_DMA_Abort+0xd6>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a67      	ldr	r2, [pc, #412]	; (8001bf0 <HAL_DMA_Abort+0x23c>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d018      	beq.n	8001a8a <HAL_DMA_Abort+0xd6>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a65      	ldr	r2, [pc, #404]	; (8001bf4 <HAL_DMA_Abort+0x240>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d013      	beq.n	8001a8a <HAL_DMA_Abort+0xd6>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a64      	ldr	r2, [pc, #400]	; (8001bf8 <HAL_DMA_Abort+0x244>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d00e      	beq.n	8001a8a <HAL_DMA_Abort+0xd6>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a62      	ldr	r2, [pc, #392]	; (8001bfc <HAL_DMA_Abort+0x248>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d009      	beq.n	8001a8a <HAL_DMA_Abort+0xd6>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a61      	ldr	r2, [pc, #388]	; (8001c00 <HAL_DMA_Abort+0x24c>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d004      	beq.n	8001a8a <HAL_DMA_Abort+0xd6>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a5f      	ldr	r2, [pc, #380]	; (8001c04 <HAL_DMA_Abort+0x250>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d101      	bne.n	8001a8e <HAL_DMA_Abort+0xda>
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e000      	b.n	8001a90 <HAL_DMA_Abort+0xdc>
 8001a8e:	2300      	movs	r3, #0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d013      	beq.n	8001abc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f022 021e 	bic.w	r2, r2, #30
 8001aa2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	695a      	ldr	r2, [r3, #20]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ab2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	617b      	str	r3, [r7, #20]
 8001aba:	e00a      	b.n	8001ad2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f022 020e 	bic.w	r2, r2, #14
 8001aca:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a3c      	ldr	r2, [pc, #240]	; (8001bc8 <HAL_DMA_Abort+0x214>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d072      	beq.n	8001bc2 <HAL_DMA_Abort+0x20e>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a3a      	ldr	r2, [pc, #232]	; (8001bcc <HAL_DMA_Abort+0x218>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d06d      	beq.n	8001bc2 <HAL_DMA_Abort+0x20e>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a39      	ldr	r2, [pc, #228]	; (8001bd0 <HAL_DMA_Abort+0x21c>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d068      	beq.n	8001bc2 <HAL_DMA_Abort+0x20e>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a37      	ldr	r2, [pc, #220]	; (8001bd4 <HAL_DMA_Abort+0x220>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d063      	beq.n	8001bc2 <HAL_DMA_Abort+0x20e>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a36      	ldr	r2, [pc, #216]	; (8001bd8 <HAL_DMA_Abort+0x224>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d05e      	beq.n	8001bc2 <HAL_DMA_Abort+0x20e>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a34      	ldr	r2, [pc, #208]	; (8001bdc <HAL_DMA_Abort+0x228>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d059      	beq.n	8001bc2 <HAL_DMA_Abort+0x20e>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a33      	ldr	r2, [pc, #204]	; (8001be0 <HAL_DMA_Abort+0x22c>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d054      	beq.n	8001bc2 <HAL_DMA_Abort+0x20e>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a31      	ldr	r2, [pc, #196]	; (8001be4 <HAL_DMA_Abort+0x230>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d04f      	beq.n	8001bc2 <HAL_DMA_Abort+0x20e>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a30      	ldr	r2, [pc, #192]	; (8001be8 <HAL_DMA_Abort+0x234>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d04a      	beq.n	8001bc2 <HAL_DMA_Abort+0x20e>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a2e      	ldr	r2, [pc, #184]	; (8001bec <HAL_DMA_Abort+0x238>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d045      	beq.n	8001bc2 <HAL_DMA_Abort+0x20e>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a2d      	ldr	r2, [pc, #180]	; (8001bf0 <HAL_DMA_Abort+0x23c>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d040      	beq.n	8001bc2 <HAL_DMA_Abort+0x20e>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a2b      	ldr	r2, [pc, #172]	; (8001bf4 <HAL_DMA_Abort+0x240>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d03b      	beq.n	8001bc2 <HAL_DMA_Abort+0x20e>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a2a      	ldr	r2, [pc, #168]	; (8001bf8 <HAL_DMA_Abort+0x244>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d036      	beq.n	8001bc2 <HAL_DMA_Abort+0x20e>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a28      	ldr	r2, [pc, #160]	; (8001bfc <HAL_DMA_Abort+0x248>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d031      	beq.n	8001bc2 <HAL_DMA_Abort+0x20e>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a27      	ldr	r2, [pc, #156]	; (8001c00 <HAL_DMA_Abort+0x24c>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d02c      	beq.n	8001bc2 <HAL_DMA_Abort+0x20e>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a25      	ldr	r2, [pc, #148]	; (8001c04 <HAL_DMA_Abort+0x250>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d027      	beq.n	8001bc2 <HAL_DMA_Abort+0x20e>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a24      	ldr	r2, [pc, #144]	; (8001c08 <HAL_DMA_Abort+0x254>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d022      	beq.n	8001bc2 <HAL_DMA_Abort+0x20e>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a22      	ldr	r2, [pc, #136]	; (8001c0c <HAL_DMA_Abort+0x258>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d01d      	beq.n	8001bc2 <HAL_DMA_Abort+0x20e>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a21      	ldr	r2, [pc, #132]	; (8001c10 <HAL_DMA_Abort+0x25c>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d018      	beq.n	8001bc2 <HAL_DMA_Abort+0x20e>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a1f      	ldr	r2, [pc, #124]	; (8001c14 <HAL_DMA_Abort+0x260>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d013      	beq.n	8001bc2 <HAL_DMA_Abort+0x20e>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a1e      	ldr	r2, [pc, #120]	; (8001c18 <HAL_DMA_Abort+0x264>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d00e      	beq.n	8001bc2 <HAL_DMA_Abort+0x20e>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a1c      	ldr	r2, [pc, #112]	; (8001c1c <HAL_DMA_Abort+0x268>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d009      	beq.n	8001bc2 <HAL_DMA_Abort+0x20e>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a1b      	ldr	r2, [pc, #108]	; (8001c20 <HAL_DMA_Abort+0x26c>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d004      	beq.n	8001bc2 <HAL_DMA_Abort+0x20e>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a19      	ldr	r2, [pc, #100]	; (8001c24 <HAL_DMA_Abort+0x270>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d132      	bne.n	8001c28 <HAL_DMA_Abort+0x274>
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e031      	b.n	8001c2a <HAL_DMA_Abort+0x276>
 8001bc6:	bf00      	nop
 8001bc8:	40020010 	.word	0x40020010
 8001bcc:	40020028 	.word	0x40020028
 8001bd0:	40020040 	.word	0x40020040
 8001bd4:	40020058 	.word	0x40020058
 8001bd8:	40020070 	.word	0x40020070
 8001bdc:	40020088 	.word	0x40020088
 8001be0:	400200a0 	.word	0x400200a0
 8001be4:	400200b8 	.word	0x400200b8
 8001be8:	40020410 	.word	0x40020410
 8001bec:	40020428 	.word	0x40020428
 8001bf0:	40020440 	.word	0x40020440
 8001bf4:	40020458 	.word	0x40020458
 8001bf8:	40020470 	.word	0x40020470
 8001bfc:	40020488 	.word	0x40020488
 8001c00:	400204a0 	.word	0x400204a0
 8001c04:	400204b8 	.word	0x400204b8
 8001c08:	58025408 	.word	0x58025408
 8001c0c:	5802541c 	.word	0x5802541c
 8001c10:	58025430 	.word	0x58025430
 8001c14:	58025444 	.word	0x58025444
 8001c18:	58025458 	.word	0x58025458
 8001c1c:	5802546c 	.word	0x5802546c
 8001c20:	58025480 	.word	0x58025480
 8001c24:	58025494 	.word	0x58025494
 8001c28:	2300      	movs	r3, #0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d007      	beq.n	8001c3e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a6d      	ldr	r2, [pc, #436]	; (8001df8 <HAL_DMA_Abort+0x444>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d04a      	beq.n	8001cde <HAL_DMA_Abort+0x32a>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a6b      	ldr	r2, [pc, #428]	; (8001dfc <HAL_DMA_Abort+0x448>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d045      	beq.n	8001cde <HAL_DMA_Abort+0x32a>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a6a      	ldr	r2, [pc, #424]	; (8001e00 <HAL_DMA_Abort+0x44c>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d040      	beq.n	8001cde <HAL_DMA_Abort+0x32a>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a68      	ldr	r2, [pc, #416]	; (8001e04 <HAL_DMA_Abort+0x450>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d03b      	beq.n	8001cde <HAL_DMA_Abort+0x32a>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a67      	ldr	r2, [pc, #412]	; (8001e08 <HAL_DMA_Abort+0x454>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d036      	beq.n	8001cde <HAL_DMA_Abort+0x32a>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a65      	ldr	r2, [pc, #404]	; (8001e0c <HAL_DMA_Abort+0x458>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d031      	beq.n	8001cde <HAL_DMA_Abort+0x32a>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a64      	ldr	r2, [pc, #400]	; (8001e10 <HAL_DMA_Abort+0x45c>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d02c      	beq.n	8001cde <HAL_DMA_Abort+0x32a>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a62      	ldr	r2, [pc, #392]	; (8001e14 <HAL_DMA_Abort+0x460>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d027      	beq.n	8001cde <HAL_DMA_Abort+0x32a>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a61      	ldr	r2, [pc, #388]	; (8001e18 <HAL_DMA_Abort+0x464>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d022      	beq.n	8001cde <HAL_DMA_Abort+0x32a>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a5f      	ldr	r2, [pc, #380]	; (8001e1c <HAL_DMA_Abort+0x468>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d01d      	beq.n	8001cde <HAL_DMA_Abort+0x32a>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a5e      	ldr	r2, [pc, #376]	; (8001e20 <HAL_DMA_Abort+0x46c>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d018      	beq.n	8001cde <HAL_DMA_Abort+0x32a>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a5c      	ldr	r2, [pc, #368]	; (8001e24 <HAL_DMA_Abort+0x470>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d013      	beq.n	8001cde <HAL_DMA_Abort+0x32a>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a5b      	ldr	r2, [pc, #364]	; (8001e28 <HAL_DMA_Abort+0x474>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d00e      	beq.n	8001cde <HAL_DMA_Abort+0x32a>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a59      	ldr	r2, [pc, #356]	; (8001e2c <HAL_DMA_Abort+0x478>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d009      	beq.n	8001cde <HAL_DMA_Abort+0x32a>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a58      	ldr	r2, [pc, #352]	; (8001e30 <HAL_DMA_Abort+0x47c>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d004      	beq.n	8001cde <HAL_DMA_Abort+0x32a>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a56      	ldr	r2, [pc, #344]	; (8001e34 <HAL_DMA_Abort+0x480>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d108      	bne.n	8001cf0 <HAL_DMA_Abort+0x33c>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f022 0201 	bic.w	r2, r2, #1
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	e007      	b.n	8001d00 <HAL_DMA_Abort+0x34c>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f022 0201 	bic.w	r2, r2, #1
 8001cfe:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001d00:	e013      	b.n	8001d2a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d02:	f7ff fd0b 	bl	800171c <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b05      	cmp	r3, #5
 8001d0e:	d90c      	bls.n	8001d2a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2220      	movs	r2, #32
 8001d14:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2203      	movs	r2, #3
 8001d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e12d      	b.n	8001f86 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1e5      	bne.n	8001d02 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a2f      	ldr	r2, [pc, #188]	; (8001df8 <HAL_DMA_Abort+0x444>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d04a      	beq.n	8001dd6 <HAL_DMA_Abort+0x422>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a2d      	ldr	r2, [pc, #180]	; (8001dfc <HAL_DMA_Abort+0x448>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d045      	beq.n	8001dd6 <HAL_DMA_Abort+0x422>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a2c      	ldr	r2, [pc, #176]	; (8001e00 <HAL_DMA_Abort+0x44c>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d040      	beq.n	8001dd6 <HAL_DMA_Abort+0x422>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a2a      	ldr	r2, [pc, #168]	; (8001e04 <HAL_DMA_Abort+0x450>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d03b      	beq.n	8001dd6 <HAL_DMA_Abort+0x422>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a29      	ldr	r2, [pc, #164]	; (8001e08 <HAL_DMA_Abort+0x454>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d036      	beq.n	8001dd6 <HAL_DMA_Abort+0x422>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a27      	ldr	r2, [pc, #156]	; (8001e0c <HAL_DMA_Abort+0x458>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d031      	beq.n	8001dd6 <HAL_DMA_Abort+0x422>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a26      	ldr	r2, [pc, #152]	; (8001e10 <HAL_DMA_Abort+0x45c>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d02c      	beq.n	8001dd6 <HAL_DMA_Abort+0x422>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a24      	ldr	r2, [pc, #144]	; (8001e14 <HAL_DMA_Abort+0x460>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d027      	beq.n	8001dd6 <HAL_DMA_Abort+0x422>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a23      	ldr	r2, [pc, #140]	; (8001e18 <HAL_DMA_Abort+0x464>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d022      	beq.n	8001dd6 <HAL_DMA_Abort+0x422>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a21      	ldr	r2, [pc, #132]	; (8001e1c <HAL_DMA_Abort+0x468>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d01d      	beq.n	8001dd6 <HAL_DMA_Abort+0x422>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a20      	ldr	r2, [pc, #128]	; (8001e20 <HAL_DMA_Abort+0x46c>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d018      	beq.n	8001dd6 <HAL_DMA_Abort+0x422>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a1e      	ldr	r2, [pc, #120]	; (8001e24 <HAL_DMA_Abort+0x470>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d013      	beq.n	8001dd6 <HAL_DMA_Abort+0x422>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a1d      	ldr	r2, [pc, #116]	; (8001e28 <HAL_DMA_Abort+0x474>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d00e      	beq.n	8001dd6 <HAL_DMA_Abort+0x422>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a1b      	ldr	r2, [pc, #108]	; (8001e2c <HAL_DMA_Abort+0x478>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d009      	beq.n	8001dd6 <HAL_DMA_Abort+0x422>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a1a      	ldr	r2, [pc, #104]	; (8001e30 <HAL_DMA_Abort+0x47c>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d004      	beq.n	8001dd6 <HAL_DMA_Abort+0x422>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a18      	ldr	r2, [pc, #96]	; (8001e34 <HAL_DMA_Abort+0x480>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d101      	bne.n	8001dda <HAL_DMA_Abort+0x426>
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e000      	b.n	8001ddc <HAL_DMA_Abort+0x428>
 8001dda:	2300      	movs	r3, #0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d02b      	beq.n	8001e38 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dea:	f003 031f 	and.w	r3, r3, #31
 8001dee:	223f      	movs	r2, #63	; 0x3f
 8001df0:	409a      	lsls	r2, r3
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	609a      	str	r2, [r3, #8]
 8001df6:	e02a      	b.n	8001e4e <HAL_DMA_Abort+0x49a>
 8001df8:	40020010 	.word	0x40020010
 8001dfc:	40020028 	.word	0x40020028
 8001e00:	40020040 	.word	0x40020040
 8001e04:	40020058 	.word	0x40020058
 8001e08:	40020070 	.word	0x40020070
 8001e0c:	40020088 	.word	0x40020088
 8001e10:	400200a0 	.word	0x400200a0
 8001e14:	400200b8 	.word	0x400200b8
 8001e18:	40020410 	.word	0x40020410
 8001e1c:	40020428 	.word	0x40020428
 8001e20:	40020440 	.word	0x40020440
 8001e24:	40020458 	.word	0x40020458
 8001e28:	40020470 	.word	0x40020470
 8001e2c:	40020488 	.word	0x40020488
 8001e30:	400204a0 	.word	0x400204a0
 8001e34:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e42:	f003 031f 	and.w	r3, r3, #31
 8001e46:	2201      	movs	r2, #1
 8001e48:	409a      	lsls	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a4f      	ldr	r2, [pc, #316]	; (8001f90 <HAL_DMA_Abort+0x5dc>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d072      	beq.n	8001f3e <HAL_DMA_Abort+0x58a>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a4d      	ldr	r2, [pc, #308]	; (8001f94 <HAL_DMA_Abort+0x5e0>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d06d      	beq.n	8001f3e <HAL_DMA_Abort+0x58a>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a4c      	ldr	r2, [pc, #304]	; (8001f98 <HAL_DMA_Abort+0x5e4>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d068      	beq.n	8001f3e <HAL_DMA_Abort+0x58a>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a4a      	ldr	r2, [pc, #296]	; (8001f9c <HAL_DMA_Abort+0x5e8>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d063      	beq.n	8001f3e <HAL_DMA_Abort+0x58a>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a49      	ldr	r2, [pc, #292]	; (8001fa0 <HAL_DMA_Abort+0x5ec>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d05e      	beq.n	8001f3e <HAL_DMA_Abort+0x58a>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a47      	ldr	r2, [pc, #284]	; (8001fa4 <HAL_DMA_Abort+0x5f0>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d059      	beq.n	8001f3e <HAL_DMA_Abort+0x58a>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a46      	ldr	r2, [pc, #280]	; (8001fa8 <HAL_DMA_Abort+0x5f4>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d054      	beq.n	8001f3e <HAL_DMA_Abort+0x58a>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a44      	ldr	r2, [pc, #272]	; (8001fac <HAL_DMA_Abort+0x5f8>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d04f      	beq.n	8001f3e <HAL_DMA_Abort+0x58a>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a43      	ldr	r2, [pc, #268]	; (8001fb0 <HAL_DMA_Abort+0x5fc>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d04a      	beq.n	8001f3e <HAL_DMA_Abort+0x58a>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a41      	ldr	r2, [pc, #260]	; (8001fb4 <HAL_DMA_Abort+0x600>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d045      	beq.n	8001f3e <HAL_DMA_Abort+0x58a>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a40      	ldr	r2, [pc, #256]	; (8001fb8 <HAL_DMA_Abort+0x604>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d040      	beq.n	8001f3e <HAL_DMA_Abort+0x58a>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a3e      	ldr	r2, [pc, #248]	; (8001fbc <HAL_DMA_Abort+0x608>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d03b      	beq.n	8001f3e <HAL_DMA_Abort+0x58a>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a3d      	ldr	r2, [pc, #244]	; (8001fc0 <HAL_DMA_Abort+0x60c>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d036      	beq.n	8001f3e <HAL_DMA_Abort+0x58a>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a3b      	ldr	r2, [pc, #236]	; (8001fc4 <HAL_DMA_Abort+0x610>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d031      	beq.n	8001f3e <HAL_DMA_Abort+0x58a>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a3a      	ldr	r2, [pc, #232]	; (8001fc8 <HAL_DMA_Abort+0x614>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d02c      	beq.n	8001f3e <HAL_DMA_Abort+0x58a>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a38      	ldr	r2, [pc, #224]	; (8001fcc <HAL_DMA_Abort+0x618>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d027      	beq.n	8001f3e <HAL_DMA_Abort+0x58a>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a37      	ldr	r2, [pc, #220]	; (8001fd0 <HAL_DMA_Abort+0x61c>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d022      	beq.n	8001f3e <HAL_DMA_Abort+0x58a>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a35      	ldr	r2, [pc, #212]	; (8001fd4 <HAL_DMA_Abort+0x620>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d01d      	beq.n	8001f3e <HAL_DMA_Abort+0x58a>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a34      	ldr	r2, [pc, #208]	; (8001fd8 <HAL_DMA_Abort+0x624>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d018      	beq.n	8001f3e <HAL_DMA_Abort+0x58a>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a32      	ldr	r2, [pc, #200]	; (8001fdc <HAL_DMA_Abort+0x628>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d013      	beq.n	8001f3e <HAL_DMA_Abort+0x58a>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a31      	ldr	r2, [pc, #196]	; (8001fe0 <HAL_DMA_Abort+0x62c>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d00e      	beq.n	8001f3e <HAL_DMA_Abort+0x58a>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a2f      	ldr	r2, [pc, #188]	; (8001fe4 <HAL_DMA_Abort+0x630>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d009      	beq.n	8001f3e <HAL_DMA_Abort+0x58a>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a2e      	ldr	r2, [pc, #184]	; (8001fe8 <HAL_DMA_Abort+0x634>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d004      	beq.n	8001f3e <HAL_DMA_Abort+0x58a>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a2c      	ldr	r2, [pc, #176]	; (8001fec <HAL_DMA_Abort+0x638>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d101      	bne.n	8001f42 <HAL_DMA_Abort+0x58e>
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e000      	b.n	8001f44 <HAL_DMA_Abort+0x590>
 8001f42:	2300      	movs	r3, #0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d015      	beq.n	8001f74 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001f50:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00c      	beq.n	8001f74 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f68:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001f72:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3718      	adds	r7, #24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40020010 	.word	0x40020010
 8001f94:	40020028 	.word	0x40020028
 8001f98:	40020040 	.word	0x40020040
 8001f9c:	40020058 	.word	0x40020058
 8001fa0:	40020070 	.word	0x40020070
 8001fa4:	40020088 	.word	0x40020088
 8001fa8:	400200a0 	.word	0x400200a0
 8001fac:	400200b8 	.word	0x400200b8
 8001fb0:	40020410 	.word	0x40020410
 8001fb4:	40020428 	.word	0x40020428
 8001fb8:	40020440 	.word	0x40020440
 8001fbc:	40020458 	.word	0x40020458
 8001fc0:	40020470 	.word	0x40020470
 8001fc4:	40020488 	.word	0x40020488
 8001fc8:	400204a0 	.word	0x400204a0
 8001fcc:	400204b8 	.word	0x400204b8
 8001fd0:	58025408 	.word	0x58025408
 8001fd4:	5802541c 	.word	0x5802541c
 8001fd8:	58025430 	.word	0x58025430
 8001fdc:	58025444 	.word	0x58025444
 8001fe0:	58025458 	.word	0x58025458
 8001fe4:	5802546c 	.word	0x5802546c
 8001fe8:	58025480 	.word	0x58025480
 8001fec:	58025494 	.word	0x58025494

08001ff0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e205      	b.n	800240e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d004      	beq.n	8002018 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2280      	movs	r2, #128	; 0x80
 8002012:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e1fa      	b.n	800240e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a8c      	ldr	r2, [pc, #560]	; (8002250 <HAL_DMA_Abort_IT+0x260>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d04a      	beq.n	80020b8 <HAL_DMA_Abort_IT+0xc8>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a8b      	ldr	r2, [pc, #556]	; (8002254 <HAL_DMA_Abort_IT+0x264>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d045      	beq.n	80020b8 <HAL_DMA_Abort_IT+0xc8>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a89      	ldr	r2, [pc, #548]	; (8002258 <HAL_DMA_Abort_IT+0x268>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d040      	beq.n	80020b8 <HAL_DMA_Abort_IT+0xc8>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a88      	ldr	r2, [pc, #544]	; (800225c <HAL_DMA_Abort_IT+0x26c>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d03b      	beq.n	80020b8 <HAL_DMA_Abort_IT+0xc8>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a86      	ldr	r2, [pc, #536]	; (8002260 <HAL_DMA_Abort_IT+0x270>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d036      	beq.n	80020b8 <HAL_DMA_Abort_IT+0xc8>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a85      	ldr	r2, [pc, #532]	; (8002264 <HAL_DMA_Abort_IT+0x274>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d031      	beq.n	80020b8 <HAL_DMA_Abort_IT+0xc8>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a83      	ldr	r2, [pc, #524]	; (8002268 <HAL_DMA_Abort_IT+0x278>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d02c      	beq.n	80020b8 <HAL_DMA_Abort_IT+0xc8>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a82      	ldr	r2, [pc, #520]	; (800226c <HAL_DMA_Abort_IT+0x27c>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d027      	beq.n	80020b8 <HAL_DMA_Abort_IT+0xc8>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a80      	ldr	r2, [pc, #512]	; (8002270 <HAL_DMA_Abort_IT+0x280>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d022      	beq.n	80020b8 <HAL_DMA_Abort_IT+0xc8>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a7f      	ldr	r2, [pc, #508]	; (8002274 <HAL_DMA_Abort_IT+0x284>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d01d      	beq.n	80020b8 <HAL_DMA_Abort_IT+0xc8>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a7d      	ldr	r2, [pc, #500]	; (8002278 <HAL_DMA_Abort_IT+0x288>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d018      	beq.n	80020b8 <HAL_DMA_Abort_IT+0xc8>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a7c      	ldr	r2, [pc, #496]	; (800227c <HAL_DMA_Abort_IT+0x28c>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d013      	beq.n	80020b8 <HAL_DMA_Abort_IT+0xc8>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a7a      	ldr	r2, [pc, #488]	; (8002280 <HAL_DMA_Abort_IT+0x290>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d00e      	beq.n	80020b8 <HAL_DMA_Abort_IT+0xc8>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a79      	ldr	r2, [pc, #484]	; (8002284 <HAL_DMA_Abort_IT+0x294>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d009      	beq.n	80020b8 <HAL_DMA_Abort_IT+0xc8>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a77      	ldr	r2, [pc, #476]	; (8002288 <HAL_DMA_Abort_IT+0x298>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d004      	beq.n	80020b8 <HAL_DMA_Abort_IT+0xc8>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a76      	ldr	r2, [pc, #472]	; (800228c <HAL_DMA_Abort_IT+0x29c>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d101      	bne.n	80020bc <HAL_DMA_Abort_IT+0xcc>
 80020b8:	2301      	movs	r3, #1
 80020ba:	e000      	b.n	80020be <HAL_DMA_Abort_IT+0xce>
 80020bc:	2300      	movs	r3, #0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d065      	beq.n	800218e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2204      	movs	r2, #4
 80020c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a60      	ldr	r2, [pc, #384]	; (8002250 <HAL_DMA_Abort_IT+0x260>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d04a      	beq.n	800216a <HAL_DMA_Abort_IT+0x17a>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a5e      	ldr	r2, [pc, #376]	; (8002254 <HAL_DMA_Abort_IT+0x264>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d045      	beq.n	800216a <HAL_DMA_Abort_IT+0x17a>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a5d      	ldr	r2, [pc, #372]	; (8002258 <HAL_DMA_Abort_IT+0x268>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d040      	beq.n	800216a <HAL_DMA_Abort_IT+0x17a>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a5b      	ldr	r2, [pc, #364]	; (800225c <HAL_DMA_Abort_IT+0x26c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d03b      	beq.n	800216a <HAL_DMA_Abort_IT+0x17a>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a5a      	ldr	r2, [pc, #360]	; (8002260 <HAL_DMA_Abort_IT+0x270>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d036      	beq.n	800216a <HAL_DMA_Abort_IT+0x17a>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a58      	ldr	r2, [pc, #352]	; (8002264 <HAL_DMA_Abort_IT+0x274>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d031      	beq.n	800216a <HAL_DMA_Abort_IT+0x17a>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a57      	ldr	r2, [pc, #348]	; (8002268 <HAL_DMA_Abort_IT+0x278>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d02c      	beq.n	800216a <HAL_DMA_Abort_IT+0x17a>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a55      	ldr	r2, [pc, #340]	; (800226c <HAL_DMA_Abort_IT+0x27c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d027      	beq.n	800216a <HAL_DMA_Abort_IT+0x17a>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a54      	ldr	r2, [pc, #336]	; (8002270 <HAL_DMA_Abort_IT+0x280>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d022      	beq.n	800216a <HAL_DMA_Abort_IT+0x17a>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a52      	ldr	r2, [pc, #328]	; (8002274 <HAL_DMA_Abort_IT+0x284>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d01d      	beq.n	800216a <HAL_DMA_Abort_IT+0x17a>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a51      	ldr	r2, [pc, #324]	; (8002278 <HAL_DMA_Abort_IT+0x288>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d018      	beq.n	800216a <HAL_DMA_Abort_IT+0x17a>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a4f      	ldr	r2, [pc, #316]	; (800227c <HAL_DMA_Abort_IT+0x28c>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d013      	beq.n	800216a <HAL_DMA_Abort_IT+0x17a>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a4e      	ldr	r2, [pc, #312]	; (8002280 <HAL_DMA_Abort_IT+0x290>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d00e      	beq.n	800216a <HAL_DMA_Abort_IT+0x17a>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a4c      	ldr	r2, [pc, #304]	; (8002284 <HAL_DMA_Abort_IT+0x294>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d009      	beq.n	800216a <HAL_DMA_Abort_IT+0x17a>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a4b      	ldr	r2, [pc, #300]	; (8002288 <HAL_DMA_Abort_IT+0x298>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d004      	beq.n	800216a <HAL_DMA_Abort_IT+0x17a>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a49      	ldr	r2, [pc, #292]	; (800228c <HAL_DMA_Abort_IT+0x29c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d108      	bne.n	800217c <HAL_DMA_Abort_IT+0x18c>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 0201 	bic.w	r2, r2, #1
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	e147      	b.n	800240c <HAL_DMA_Abort_IT+0x41c>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f022 0201 	bic.w	r2, r2, #1
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	e13e      	b.n	800240c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 020e 	bic.w	r2, r2, #14
 800219c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a2b      	ldr	r2, [pc, #172]	; (8002250 <HAL_DMA_Abort_IT+0x260>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d04a      	beq.n	800223e <HAL_DMA_Abort_IT+0x24e>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a29      	ldr	r2, [pc, #164]	; (8002254 <HAL_DMA_Abort_IT+0x264>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d045      	beq.n	800223e <HAL_DMA_Abort_IT+0x24e>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a28      	ldr	r2, [pc, #160]	; (8002258 <HAL_DMA_Abort_IT+0x268>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d040      	beq.n	800223e <HAL_DMA_Abort_IT+0x24e>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a26      	ldr	r2, [pc, #152]	; (800225c <HAL_DMA_Abort_IT+0x26c>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d03b      	beq.n	800223e <HAL_DMA_Abort_IT+0x24e>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a25      	ldr	r2, [pc, #148]	; (8002260 <HAL_DMA_Abort_IT+0x270>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d036      	beq.n	800223e <HAL_DMA_Abort_IT+0x24e>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a23      	ldr	r2, [pc, #140]	; (8002264 <HAL_DMA_Abort_IT+0x274>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d031      	beq.n	800223e <HAL_DMA_Abort_IT+0x24e>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a22      	ldr	r2, [pc, #136]	; (8002268 <HAL_DMA_Abort_IT+0x278>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d02c      	beq.n	800223e <HAL_DMA_Abort_IT+0x24e>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a20      	ldr	r2, [pc, #128]	; (800226c <HAL_DMA_Abort_IT+0x27c>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d027      	beq.n	800223e <HAL_DMA_Abort_IT+0x24e>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a1f      	ldr	r2, [pc, #124]	; (8002270 <HAL_DMA_Abort_IT+0x280>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d022      	beq.n	800223e <HAL_DMA_Abort_IT+0x24e>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a1d      	ldr	r2, [pc, #116]	; (8002274 <HAL_DMA_Abort_IT+0x284>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d01d      	beq.n	800223e <HAL_DMA_Abort_IT+0x24e>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a1c      	ldr	r2, [pc, #112]	; (8002278 <HAL_DMA_Abort_IT+0x288>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d018      	beq.n	800223e <HAL_DMA_Abort_IT+0x24e>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a1a      	ldr	r2, [pc, #104]	; (800227c <HAL_DMA_Abort_IT+0x28c>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d013      	beq.n	800223e <HAL_DMA_Abort_IT+0x24e>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a19      	ldr	r2, [pc, #100]	; (8002280 <HAL_DMA_Abort_IT+0x290>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d00e      	beq.n	800223e <HAL_DMA_Abort_IT+0x24e>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a17      	ldr	r2, [pc, #92]	; (8002284 <HAL_DMA_Abort_IT+0x294>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d009      	beq.n	800223e <HAL_DMA_Abort_IT+0x24e>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a16      	ldr	r2, [pc, #88]	; (8002288 <HAL_DMA_Abort_IT+0x298>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d004      	beq.n	800223e <HAL_DMA_Abort_IT+0x24e>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a14      	ldr	r2, [pc, #80]	; (800228c <HAL_DMA_Abort_IT+0x29c>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d128      	bne.n	8002290 <HAL_DMA_Abort_IT+0x2a0>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 0201 	bic.w	r2, r2, #1
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	e027      	b.n	80022a0 <HAL_DMA_Abort_IT+0x2b0>
 8002250:	40020010 	.word	0x40020010
 8002254:	40020028 	.word	0x40020028
 8002258:	40020040 	.word	0x40020040
 800225c:	40020058 	.word	0x40020058
 8002260:	40020070 	.word	0x40020070
 8002264:	40020088 	.word	0x40020088
 8002268:	400200a0 	.word	0x400200a0
 800226c:	400200b8 	.word	0x400200b8
 8002270:	40020410 	.word	0x40020410
 8002274:	40020428 	.word	0x40020428
 8002278:	40020440 	.word	0x40020440
 800227c:	40020458 	.word	0x40020458
 8002280:	40020470 	.word	0x40020470
 8002284:	40020488 	.word	0x40020488
 8002288:	400204a0 	.word	0x400204a0
 800228c:	400204b8 	.word	0x400204b8
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0201 	bic.w	r2, r2, #1
 800229e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a5c      	ldr	r2, [pc, #368]	; (8002418 <HAL_DMA_Abort_IT+0x428>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d072      	beq.n	8002390 <HAL_DMA_Abort_IT+0x3a0>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a5b      	ldr	r2, [pc, #364]	; (800241c <HAL_DMA_Abort_IT+0x42c>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d06d      	beq.n	8002390 <HAL_DMA_Abort_IT+0x3a0>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a59      	ldr	r2, [pc, #356]	; (8002420 <HAL_DMA_Abort_IT+0x430>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d068      	beq.n	8002390 <HAL_DMA_Abort_IT+0x3a0>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a58      	ldr	r2, [pc, #352]	; (8002424 <HAL_DMA_Abort_IT+0x434>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d063      	beq.n	8002390 <HAL_DMA_Abort_IT+0x3a0>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a56      	ldr	r2, [pc, #344]	; (8002428 <HAL_DMA_Abort_IT+0x438>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d05e      	beq.n	8002390 <HAL_DMA_Abort_IT+0x3a0>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a55      	ldr	r2, [pc, #340]	; (800242c <HAL_DMA_Abort_IT+0x43c>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d059      	beq.n	8002390 <HAL_DMA_Abort_IT+0x3a0>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a53      	ldr	r2, [pc, #332]	; (8002430 <HAL_DMA_Abort_IT+0x440>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d054      	beq.n	8002390 <HAL_DMA_Abort_IT+0x3a0>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a52      	ldr	r2, [pc, #328]	; (8002434 <HAL_DMA_Abort_IT+0x444>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d04f      	beq.n	8002390 <HAL_DMA_Abort_IT+0x3a0>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a50      	ldr	r2, [pc, #320]	; (8002438 <HAL_DMA_Abort_IT+0x448>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d04a      	beq.n	8002390 <HAL_DMA_Abort_IT+0x3a0>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a4f      	ldr	r2, [pc, #316]	; (800243c <HAL_DMA_Abort_IT+0x44c>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d045      	beq.n	8002390 <HAL_DMA_Abort_IT+0x3a0>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a4d      	ldr	r2, [pc, #308]	; (8002440 <HAL_DMA_Abort_IT+0x450>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d040      	beq.n	8002390 <HAL_DMA_Abort_IT+0x3a0>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a4c      	ldr	r2, [pc, #304]	; (8002444 <HAL_DMA_Abort_IT+0x454>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d03b      	beq.n	8002390 <HAL_DMA_Abort_IT+0x3a0>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a4a      	ldr	r2, [pc, #296]	; (8002448 <HAL_DMA_Abort_IT+0x458>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d036      	beq.n	8002390 <HAL_DMA_Abort_IT+0x3a0>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a49      	ldr	r2, [pc, #292]	; (800244c <HAL_DMA_Abort_IT+0x45c>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d031      	beq.n	8002390 <HAL_DMA_Abort_IT+0x3a0>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a47      	ldr	r2, [pc, #284]	; (8002450 <HAL_DMA_Abort_IT+0x460>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d02c      	beq.n	8002390 <HAL_DMA_Abort_IT+0x3a0>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a46      	ldr	r2, [pc, #280]	; (8002454 <HAL_DMA_Abort_IT+0x464>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d027      	beq.n	8002390 <HAL_DMA_Abort_IT+0x3a0>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a44      	ldr	r2, [pc, #272]	; (8002458 <HAL_DMA_Abort_IT+0x468>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d022      	beq.n	8002390 <HAL_DMA_Abort_IT+0x3a0>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a43      	ldr	r2, [pc, #268]	; (800245c <HAL_DMA_Abort_IT+0x46c>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d01d      	beq.n	8002390 <HAL_DMA_Abort_IT+0x3a0>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a41      	ldr	r2, [pc, #260]	; (8002460 <HAL_DMA_Abort_IT+0x470>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d018      	beq.n	8002390 <HAL_DMA_Abort_IT+0x3a0>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a40      	ldr	r2, [pc, #256]	; (8002464 <HAL_DMA_Abort_IT+0x474>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d013      	beq.n	8002390 <HAL_DMA_Abort_IT+0x3a0>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a3e      	ldr	r2, [pc, #248]	; (8002468 <HAL_DMA_Abort_IT+0x478>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d00e      	beq.n	8002390 <HAL_DMA_Abort_IT+0x3a0>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a3d      	ldr	r2, [pc, #244]	; (800246c <HAL_DMA_Abort_IT+0x47c>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d009      	beq.n	8002390 <HAL_DMA_Abort_IT+0x3a0>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a3b      	ldr	r2, [pc, #236]	; (8002470 <HAL_DMA_Abort_IT+0x480>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d004      	beq.n	8002390 <HAL_DMA_Abort_IT+0x3a0>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a3a      	ldr	r2, [pc, #232]	; (8002474 <HAL_DMA_Abort_IT+0x484>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d101      	bne.n	8002394 <HAL_DMA_Abort_IT+0x3a4>
 8002390:	2301      	movs	r3, #1
 8002392:	e000      	b.n	8002396 <HAL_DMA_Abort_IT+0x3a6>
 8002394:	2300      	movs	r3, #0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d028      	beq.n	80023ec <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023a8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ae:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b4:	f003 031f 	and.w	r3, r3, #31
 80023b8:	2201      	movs	r2, #1
 80023ba:	409a      	lsls	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80023c8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00c      	beq.n	80023ec <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023e0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80023ea:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002400:	2b00      	cmp	r3, #0
 8002402:	d003      	beq.n	800240c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40020010 	.word	0x40020010
 800241c:	40020028 	.word	0x40020028
 8002420:	40020040 	.word	0x40020040
 8002424:	40020058 	.word	0x40020058
 8002428:	40020070 	.word	0x40020070
 800242c:	40020088 	.word	0x40020088
 8002430:	400200a0 	.word	0x400200a0
 8002434:	400200b8 	.word	0x400200b8
 8002438:	40020410 	.word	0x40020410
 800243c:	40020428 	.word	0x40020428
 8002440:	40020440 	.word	0x40020440
 8002444:	40020458 	.word	0x40020458
 8002448:	40020470 	.word	0x40020470
 800244c:	40020488 	.word	0x40020488
 8002450:	400204a0 	.word	0x400204a0
 8002454:	400204b8 	.word	0x400204b8
 8002458:	58025408 	.word	0x58025408
 800245c:	5802541c 	.word	0x5802541c
 8002460:	58025430 	.word	0x58025430
 8002464:	58025444 	.word	0x58025444
 8002468:	58025458 	.word	0x58025458
 800246c:	5802546c 	.word	0x5802546c
 8002470:	58025480 	.word	0x58025480
 8002474:	58025494 	.word	0x58025494

08002478 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002478:	b480      	push	{r7}
 800247a:	b089      	sub	sp, #36	; 0x24
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002482:	2300      	movs	r3, #0
 8002484:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002486:	4b89      	ldr	r3, [pc, #548]	; (80026ac <HAL_GPIO_Init+0x234>)
 8002488:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800248a:	e194      	b.n	80027b6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	2101      	movs	r1, #1
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	fa01 f303 	lsl.w	r3, r1, r3
 8002498:	4013      	ands	r3, r2
 800249a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f000 8186 	beq.w	80027b0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d00b      	beq.n	80024c4 <HAL_GPIO_Init+0x4c>
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d007      	beq.n	80024c4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024b8:	2b11      	cmp	r3, #17
 80024ba:	d003      	beq.n	80024c4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2b12      	cmp	r3, #18
 80024c2:	d130      	bne.n	8002526 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	2203      	movs	r2, #3
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	68da      	ldr	r2, [r3, #12]
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024fa:	2201      	movs	r2, #1
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	43db      	mvns	r3, r3
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	4013      	ands	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	091b      	lsrs	r3, r3, #4
 8002510:	f003 0201 	and.w	r2, r3, #1
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4313      	orrs	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	2203      	movs	r2, #3
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43db      	mvns	r3, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4013      	ands	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	689a      	ldr	r2, [r3, #8]
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4313      	orrs	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b02      	cmp	r3, #2
 800255c:	d003      	beq.n	8002566 <HAL_GPIO_Init+0xee>
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2b12      	cmp	r3, #18
 8002564:	d123      	bne.n	80025ae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	08da      	lsrs	r2, r3, #3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	3208      	adds	r2, #8
 800256e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002572:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	220f      	movs	r2, #15
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43db      	mvns	r3, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4013      	ands	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	691a      	ldr	r2, [r3, #16]
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4313      	orrs	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	08da      	lsrs	r2, r3, #3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3208      	adds	r2, #8
 80025a8:	69b9      	ldr	r1, [r7, #24]
 80025aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	2203      	movs	r2, #3
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	43db      	mvns	r3, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4013      	ands	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f003 0203 	and.w	r2, r3, #3
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	4313      	orrs	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f000 80e0 	beq.w	80027b0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025f0:	4b2f      	ldr	r3, [pc, #188]	; (80026b0 <HAL_GPIO_Init+0x238>)
 80025f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80025f6:	4a2e      	ldr	r2, [pc, #184]	; (80026b0 <HAL_GPIO_Init+0x238>)
 80025f8:	f043 0302 	orr.w	r3, r3, #2
 80025fc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002600:	4b2b      	ldr	r3, [pc, #172]	; (80026b0 <HAL_GPIO_Init+0x238>)
 8002602:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800260e:	4a29      	ldr	r2, [pc, #164]	; (80026b4 <HAL_GPIO_Init+0x23c>)
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	089b      	lsrs	r3, r3, #2
 8002614:	3302      	adds	r3, #2
 8002616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800261a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	220f      	movs	r2, #15
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	43db      	mvns	r3, r3
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	4013      	ands	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a20      	ldr	r2, [pc, #128]	; (80026b8 <HAL_GPIO_Init+0x240>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d052      	beq.n	80026e0 <HAL_GPIO_Init+0x268>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a1f      	ldr	r2, [pc, #124]	; (80026bc <HAL_GPIO_Init+0x244>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d031      	beq.n	80026a6 <HAL_GPIO_Init+0x22e>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a1e      	ldr	r2, [pc, #120]	; (80026c0 <HAL_GPIO_Init+0x248>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d02b      	beq.n	80026a2 <HAL_GPIO_Init+0x22a>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a1d      	ldr	r2, [pc, #116]	; (80026c4 <HAL_GPIO_Init+0x24c>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d025      	beq.n	800269e <HAL_GPIO_Init+0x226>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a1c      	ldr	r2, [pc, #112]	; (80026c8 <HAL_GPIO_Init+0x250>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d01f      	beq.n	800269a <HAL_GPIO_Init+0x222>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a1b      	ldr	r2, [pc, #108]	; (80026cc <HAL_GPIO_Init+0x254>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d019      	beq.n	8002696 <HAL_GPIO_Init+0x21e>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a1a      	ldr	r2, [pc, #104]	; (80026d0 <HAL_GPIO_Init+0x258>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d013      	beq.n	8002692 <HAL_GPIO_Init+0x21a>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a19      	ldr	r2, [pc, #100]	; (80026d4 <HAL_GPIO_Init+0x25c>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d00d      	beq.n	800268e <HAL_GPIO_Init+0x216>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a18      	ldr	r2, [pc, #96]	; (80026d8 <HAL_GPIO_Init+0x260>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d007      	beq.n	800268a <HAL_GPIO_Init+0x212>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a17      	ldr	r2, [pc, #92]	; (80026dc <HAL_GPIO_Init+0x264>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d101      	bne.n	8002686 <HAL_GPIO_Init+0x20e>
 8002682:	2309      	movs	r3, #9
 8002684:	e02d      	b.n	80026e2 <HAL_GPIO_Init+0x26a>
 8002686:	230a      	movs	r3, #10
 8002688:	e02b      	b.n	80026e2 <HAL_GPIO_Init+0x26a>
 800268a:	2308      	movs	r3, #8
 800268c:	e029      	b.n	80026e2 <HAL_GPIO_Init+0x26a>
 800268e:	2307      	movs	r3, #7
 8002690:	e027      	b.n	80026e2 <HAL_GPIO_Init+0x26a>
 8002692:	2306      	movs	r3, #6
 8002694:	e025      	b.n	80026e2 <HAL_GPIO_Init+0x26a>
 8002696:	2305      	movs	r3, #5
 8002698:	e023      	b.n	80026e2 <HAL_GPIO_Init+0x26a>
 800269a:	2304      	movs	r3, #4
 800269c:	e021      	b.n	80026e2 <HAL_GPIO_Init+0x26a>
 800269e:	2303      	movs	r3, #3
 80026a0:	e01f      	b.n	80026e2 <HAL_GPIO_Init+0x26a>
 80026a2:	2302      	movs	r3, #2
 80026a4:	e01d      	b.n	80026e2 <HAL_GPIO_Init+0x26a>
 80026a6:	2301      	movs	r3, #1
 80026a8:	e01b      	b.n	80026e2 <HAL_GPIO_Init+0x26a>
 80026aa:	bf00      	nop
 80026ac:	58000080 	.word	0x58000080
 80026b0:	58024400 	.word	0x58024400
 80026b4:	58000400 	.word	0x58000400
 80026b8:	58020000 	.word	0x58020000
 80026bc:	58020400 	.word	0x58020400
 80026c0:	58020800 	.word	0x58020800
 80026c4:	58020c00 	.word	0x58020c00
 80026c8:	58021000 	.word	0x58021000
 80026cc:	58021400 	.word	0x58021400
 80026d0:	58021800 	.word	0x58021800
 80026d4:	58021c00 	.word	0x58021c00
 80026d8:	58022000 	.word	0x58022000
 80026dc:	58022400 	.word	0x58022400
 80026e0:	2300      	movs	r3, #0
 80026e2:	69fa      	ldr	r2, [r7, #28]
 80026e4:	f002 0203 	and.w	r2, r2, #3
 80026e8:	0092      	lsls	r2, r2, #2
 80026ea:	4093      	lsls	r3, r2
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026f2:	4938      	ldr	r1, [pc, #224]	; (80027d4 <HAL_GPIO_Init+0x35c>)
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	089b      	lsrs	r3, r3, #2
 80026f8:	3302      	adds	r3, #2
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	43db      	mvns	r3, r3
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4013      	ands	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	4313      	orrs	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	43db      	mvns	r3, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4013      	ands	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	4313      	orrs	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002754:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	43db      	mvns	r3, r3
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	4013      	ands	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800277a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	43db      	mvns	r3, r3
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	4013      	ands	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d003      	beq.n	80027a8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80027a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	3301      	adds	r3, #1
 80027b4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	fa22 f303 	lsr.w	r3, r2, r3
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f47f ae63 	bne.w	800248c <HAL_GPIO_Init+0x14>
  }
}
 80027c6:	bf00      	nop
 80027c8:	bf00      	nop
 80027ca:	3724      	adds	r7, #36	; 0x24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	58000400 	.word	0x58000400

080027d8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80027e0:	4a08      	ldr	r2, [pc, #32]	; (8002804 <HAL_HSEM_FastTake+0x2c>)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	3320      	adds	r3, #32
 80027e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ea:	4a07      	ldr	r2, [pc, #28]	; (8002808 <HAL_HSEM_FastTake+0x30>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d101      	bne.n	80027f4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80027f0:	2300      	movs	r3, #0
 80027f2:	e000      	b.n	80027f6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	58026400 	.word	0x58026400
 8002808:	80000300 	.word	0x80000300

0800280c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002816:	4906      	ldr	r1, [pc, #24]	; (8002830 <HAL_HSEM_Release+0x24>)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	58026400 	.word	0x58026400

08002834 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800283c:	4b29      	ldr	r3, [pc, #164]	; (80028e4 <HAL_PWREx_ConfigSupply+0xb0>)
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	2b06      	cmp	r3, #6
 8002846:	d00a      	beq.n	800285e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002848:	4b26      	ldr	r3, [pc, #152]	; (80028e4 <HAL_PWREx_ConfigSupply+0xb0>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	429a      	cmp	r2, r3
 8002854:	d001      	beq.n	800285a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e040      	b.n	80028dc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800285a:	2300      	movs	r3, #0
 800285c:	e03e      	b.n	80028dc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800285e:	4b21      	ldr	r3, [pc, #132]	; (80028e4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002866:	491f      	ldr	r1, [pc, #124]	; (80028e4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4313      	orrs	r3, r2
 800286c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800286e:	f7fe ff55 	bl	800171c <HAL_GetTick>
 8002872:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002874:	e009      	b.n	800288a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002876:	f7fe ff51 	bl	800171c <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002884:	d901      	bls.n	800288a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e028      	b.n	80028dc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800288a:	4b16      	ldr	r3, [pc, #88]	; (80028e4 <HAL_PWREx_ConfigSupply+0xb0>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002892:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002896:	d1ee      	bne.n	8002876 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b1e      	cmp	r3, #30
 800289c:	d008      	beq.n	80028b0 <HAL_PWREx_ConfigSupply+0x7c>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2b2e      	cmp	r3, #46	; 0x2e
 80028a2:	d005      	beq.n	80028b0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b1d      	cmp	r3, #29
 80028a8:	d002      	beq.n	80028b0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b2d      	cmp	r3, #45	; 0x2d
 80028ae:	d114      	bne.n	80028da <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80028b0:	f7fe ff34 	bl	800171c <HAL_GetTick>
 80028b4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80028b6:	e009      	b.n	80028cc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80028b8:	f7fe ff30 	bl	800171c <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028c6:	d901      	bls.n	80028cc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e007      	b.n	80028dc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80028cc:	4b05      	ldr	r3, [pc, #20]	; (80028e4 <HAL_PWREx_ConfigSupply+0xb0>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028d8:	d1ee      	bne.n	80028b8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	58024800 	.word	0x58024800

080028e8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af02      	add	r7, sp, #8
 80028ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80028f0:	f7fe ff14 	bl	800171c <HAL_GetTick>
 80028f4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d101      	bne.n	8002900 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e05f      	b.n	80029c0 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b00      	cmp	r3, #0
 800290a:	d107      	bne.n	800291c <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f7fe fb19 	bl	8000f44 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002912:	f241 3188 	movw	r1, #5000	; 0x1388
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 f85a 	bl	80029d0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	3b01      	subs	r3, #1
 800292c:	021a      	lsls	r2, r3, #8
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	2120      	movs	r1, #32
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 f852 	bl	80029ec <QSPI_WaitFlagStateUntilTimeout>
 8002948:	4603      	mov	r3, r0
 800294a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800294c:	7afb      	ldrb	r3, [r7, #11]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d135      	bne.n	80029be <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	4b1b      	ldr	r3, [pc, #108]	; (80029c8 <HAL_QSPI_Init+0xe0>)
 800295a:	4013      	ands	r3, r2
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6852      	ldr	r2, [r2, #4]
 8002960:	0611      	lsls	r1, r2, #24
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	68d2      	ldr	r2, [r2, #12]
 8002966:	4311      	orrs	r1, r2
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	69d2      	ldr	r2, [r2, #28]
 800296c:	4311      	orrs	r1, r2
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	6a12      	ldr	r2, [r2, #32]
 8002972:	4311      	orrs	r1, r2
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	6812      	ldr	r2, [r2, #0]
 8002978:	430b      	orrs	r3, r1
 800297a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	4b12      	ldr	r3, [pc, #72]	; (80029cc <HAL_QSPI_Init+0xe4>)
 8002984:	4013      	ands	r3, r2
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6912      	ldr	r2, [r2, #16]
 800298a:	0411      	lsls	r1, r2, #16
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	6952      	ldr	r2, [r2, #20]
 8002990:	4311      	orrs	r1, r2
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6992      	ldr	r2, [r2, #24]
 8002996:	4311      	orrs	r1, r2
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6812      	ldr	r2, [r2, #0]
 800299c:	430b      	orrs	r3, r1
 800299e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0201 	orr.w	r2, r2, #1
 80029ae:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80029be:	7afb      	ldrb	r3, [r7, #11]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	00ffff2f 	.word	0x00ffff2f
 80029cc:	ffe0f8fe 	.word	0xffe0f8fe

080029d0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	649a      	str	r2, [r3, #72]	; 0x48
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	603b      	str	r3, [r7, #0]
 80029f8:	4613      	mov	r3, r2
 80029fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80029fc:	e01a      	b.n	8002a34 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a04:	d016      	beq.n	8002a34 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a06:	f7fe fe89 	bl	800171c <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d302      	bcc.n	8002a1c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10b      	bne.n	8002a34 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2204      	movs	r2, #4
 8002a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a28:	f043 0201 	orr.w	r2, r3, #1
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e00e      	b.n	8002a52 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	689a      	ldr	r2, [r3, #8]
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	bf14      	ite	ne
 8002a42:	2301      	movne	r3, #1
 8002a44:	2300      	moveq	r3, #0
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	461a      	mov	r2, r3
 8002a4a:	79fb      	ldrb	r3, [r7, #7]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d1d6      	bne.n	80029fe <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
	...

08002a5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b08c      	sub	sp, #48	; 0x30
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e3ff      	b.n	800326e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f000 8087 	beq.w	8002b8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a7c:	4b99      	ldr	r3, [pc, #612]	; (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a84:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a86:	4b97      	ldr	r3, [pc, #604]	; (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a8e:	2b10      	cmp	r3, #16
 8002a90:	d007      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x46>
 8002a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a94:	2b18      	cmp	r3, #24
 8002a96:	d110      	bne.n	8002aba <HAL_RCC_OscConfig+0x5e>
 8002a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9a:	f003 0303 	and.w	r3, r3, #3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d10b      	bne.n	8002aba <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa2:	4b90      	ldr	r3, [pc, #576]	; (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d06c      	beq.n	8002b88 <HAL_RCC_OscConfig+0x12c>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d168      	bne.n	8002b88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e3d9      	b.n	800326e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ac2:	d106      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x76>
 8002ac4:	4b87      	ldr	r3, [pc, #540]	; (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a86      	ldr	r2, [pc, #536]	; (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002aca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ace:	6013      	str	r3, [r2, #0]
 8002ad0:	e02e      	b.n	8002b30 <HAL_RCC_OscConfig+0xd4>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10c      	bne.n	8002af4 <HAL_RCC_OscConfig+0x98>
 8002ada:	4b82      	ldr	r3, [pc, #520]	; (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a81      	ldr	r2, [pc, #516]	; (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002ae0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	4b7f      	ldr	r3, [pc, #508]	; (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a7e      	ldr	r2, [pc, #504]	; (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002aec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002af0:	6013      	str	r3, [r2, #0]
 8002af2:	e01d      	b.n	8002b30 <HAL_RCC_OscConfig+0xd4>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002afc:	d10c      	bne.n	8002b18 <HAL_RCC_OscConfig+0xbc>
 8002afe:	4b79      	ldr	r3, [pc, #484]	; (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a78      	ldr	r2, [pc, #480]	; (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002b04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b08:	6013      	str	r3, [r2, #0]
 8002b0a:	4b76      	ldr	r3, [pc, #472]	; (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a75      	ldr	r2, [pc, #468]	; (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b14:	6013      	str	r3, [r2, #0]
 8002b16:	e00b      	b.n	8002b30 <HAL_RCC_OscConfig+0xd4>
 8002b18:	4b72      	ldr	r3, [pc, #456]	; (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a71      	ldr	r2, [pc, #452]	; (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002b1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b22:	6013      	str	r3, [r2, #0]
 8002b24:	4b6f      	ldr	r3, [pc, #444]	; (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a6e      	ldr	r2, [pc, #440]	; (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d013      	beq.n	8002b60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b38:	f7fe fdf0 	bl	800171c <HAL_GetTick>
 8002b3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b40:	f7fe fdec 	bl	800171c <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b64      	cmp	r3, #100	; 0x64
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e38d      	b.n	800326e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b52:	4b64      	ldr	r3, [pc, #400]	; (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0f0      	beq.n	8002b40 <HAL_RCC_OscConfig+0xe4>
 8002b5e:	e014      	b.n	8002b8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b60:	f7fe fddc 	bl	800171c <HAL_GetTick>
 8002b64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b68:	f7fe fdd8 	bl	800171c <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b64      	cmp	r3, #100	; 0x64
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e379      	b.n	800326e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b7a:	4b5a      	ldr	r3, [pc, #360]	; (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1f0      	bne.n	8002b68 <HAL_RCC_OscConfig+0x10c>
 8002b86:	e000      	b.n	8002b8a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 80ae 	beq.w	8002cf4 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b98:	4b52      	ldr	r3, [pc, #328]	; (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ba0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ba2:	4b50      	ldr	r3, [pc, #320]	; (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002ba8:	6a3b      	ldr	r3, [r7, #32]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d007      	beq.n	8002bbe <HAL_RCC_OscConfig+0x162>
 8002bae:	6a3b      	ldr	r3, [r7, #32]
 8002bb0:	2b18      	cmp	r3, #24
 8002bb2:	d13a      	bne.n	8002c2a <HAL_RCC_OscConfig+0x1ce>
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	f003 0303 	and.w	r3, r3, #3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d135      	bne.n	8002c2a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bbe:	4b49      	ldr	r3, [pc, #292]	; (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0304 	and.w	r3, r3, #4
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d005      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x17a>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e34b      	b.n	800326e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd6:	f7fe fdd1 	bl	800177c <HAL_GetREVID>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	f241 0203 	movw	r2, #4099	; 0x1003
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d817      	bhi.n	8002c14 <HAL_RCC_OscConfig+0x1b8>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	2b40      	cmp	r3, #64	; 0x40
 8002bea:	d108      	bne.n	8002bfe <HAL_RCC_OscConfig+0x1a2>
 8002bec:	4b3d      	ldr	r3, [pc, #244]	; (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002bf4:	4a3b      	ldr	r2, [pc, #236]	; (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002bf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bfa:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bfc:	e07a      	b.n	8002cf4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bfe:	4b39      	ldr	r3, [pc, #228]	; (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	031b      	lsls	r3, r3, #12
 8002c0c:	4935      	ldr	r1, [pc, #212]	; (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c12:	e06f      	b.n	8002cf4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c14:	4b33      	ldr	r3, [pc, #204]	; (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	061b      	lsls	r3, r3, #24
 8002c22:	4930      	ldr	r1, [pc, #192]	; (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c28:	e064      	b.n	8002cf4 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d045      	beq.n	8002cbe <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c32:	4b2c      	ldr	r3, [pc, #176]	; (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f023 0219 	bic.w	r2, r3, #25
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	4929      	ldr	r1, [pc, #164]	; (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c44:	f7fe fd6a 	bl	800171c <HAL_GetTick>
 8002c48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c4c:	f7fe fd66 	bl	800171c <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e307      	b.n	800326e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c5e:	4b21      	ldr	r3, [pc, #132]	; (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0304 	and.w	r3, r3, #4
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0f0      	beq.n	8002c4c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c6a:	f7fe fd87 	bl	800177c <HAL_GetREVID>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	f241 0203 	movw	r2, #4099	; 0x1003
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d817      	bhi.n	8002ca8 <HAL_RCC_OscConfig+0x24c>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	2b40      	cmp	r3, #64	; 0x40
 8002c7e:	d108      	bne.n	8002c92 <HAL_RCC_OscConfig+0x236>
 8002c80:	4b18      	ldr	r3, [pc, #96]	; (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002c88:	4a16      	ldr	r2, [pc, #88]	; (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002c8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c8e:	6053      	str	r3, [r2, #4]
 8002c90:	e030      	b.n	8002cf4 <HAL_RCC_OscConfig+0x298>
 8002c92:	4b14      	ldr	r3, [pc, #80]	; (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	031b      	lsls	r3, r3, #12
 8002ca0:	4910      	ldr	r1, [pc, #64]	; (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	604b      	str	r3, [r1, #4]
 8002ca6:	e025      	b.n	8002cf4 <HAL_RCC_OscConfig+0x298>
 8002ca8:	4b0e      	ldr	r3, [pc, #56]	; (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	061b      	lsls	r3, r3, #24
 8002cb6:	490b      	ldr	r1, [pc, #44]	; (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	604b      	str	r3, [r1, #4]
 8002cbc:	e01a      	b.n	8002cf4 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cbe:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a08      	ldr	r2, [pc, #32]	; (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002cc4:	f023 0301 	bic.w	r3, r3, #1
 8002cc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cca:	f7fe fd27 	bl	800171c <HAL_GetTick>
 8002cce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002cd0:	e00a      	b.n	8002ce8 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cd2:	f7fe fd23 	bl	800171c <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d903      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e2c4      	b.n	800326e <HAL_RCC_OscConfig+0x812>
 8002ce4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ce8:	4ba4      	ldr	r3, [pc, #656]	; (8002f7c <HAL_RCC_OscConfig+0x520>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0304 	and.w	r3, r3, #4
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1ee      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0310 	and.w	r3, r3, #16
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f000 80a9 	beq.w	8002e54 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d02:	4b9e      	ldr	r3, [pc, #632]	; (8002f7c <HAL_RCC_OscConfig+0x520>)
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d0a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d0c:	4b9b      	ldr	r3, [pc, #620]	; (8002f7c <HAL_RCC_OscConfig+0x520>)
 8002d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d10:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	2b08      	cmp	r3, #8
 8002d16:	d007      	beq.n	8002d28 <HAL_RCC_OscConfig+0x2cc>
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	2b18      	cmp	r3, #24
 8002d1c:	d13a      	bne.n	8002d94 <HAL_RCC_OscConfig+0x338>
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	f003 0303 	and.w	r3, r3, #3
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d135      	bne.n	8002d94 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d28:	4b94      	ldr	r3, [pc, #592]	; (8002f7c <HAL_RCC_OscConfig+0x520>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d005      	beq.n	8002d40 <HAL_RCC_OscConfig+0x2e4>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	69db      	ldr	r3, [r3, #28]
 8002d38:	2b80      	cmp	r3, #128	; 0x80
 8002d3a:	d001      	beq.n	8002d40 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e296      	b.n	800326e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d40:	f7fe fd1c 	bl	800177c <HAL_GetREVID>
 8002d44:	4603      	mov	r3, r0
 8002d46:	f241 0203 	movw	r2, #4099	; 0x1003
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d817      	bhi.n	8002d7e <HAL_RCC_OscConfig+0x322>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	2b20      	cmp	r3, #32
 8002d54:	d108      	bne.n	8002d68 <HAL_RCC_OscConfig+0x30c>
 8002d56:	4b89      	ldr	r3, [pc, #548]	; (8002f7c <HAL_RCC_OscConfig+0x520>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002d5e:	4a87      	ldr	r2, [pc, #540]	; (8002f7c <HAL_RCC_OscConfig+0x520>)
 8002d60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002d64:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d66:	e075      	b.n	8002e54 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d68:	4b84      	ldr	r3, [pc, #528]	; (8002f7c <HAL_RCC_OscConfig+0x520>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	069b      	lsls	r3, r3, #26
 8002d76:	4981      	ldr	r1, [pc, #516]	; (8002f7c <HAL_RCC_OscConfig+0x520>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d7c:	e06a      	b.n	8002e54 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d7e:	4b7f      	ldr	r3, [pc, #508]	; (8002f7c <HAL_RCC_OscConfig+0x520>)
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	061b      	lsls	r3, r3, #24
 8002d8c:	497b      	ldr	r1, [pc, #492]	; (8002f7c <HAL_RCC_OscConfig+0x520>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d92:	e05f      	b.n	8002e54 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	69db      	ldr	r3, [r3, #28]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d042      	beq.n	8002e22 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002d9c:	4b77      	ldr	r3, [pc, #476]	; (8002f7c <HAL_RCC_OscConfig+0x520>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a76      	ldr	r2, [pc, #472]	; (8002f7c <HAL_RCC_OscConfig+0x520>)
 8002da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002da6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da8:	f7fe fcb8 	bl	800171c <HAL_GetTick>
 8002dac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002db0:	f7fe fcb4 	bl	800171c <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e255      	b.n	800326e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002dc2:	4b6e      	ldr	r3, [pc, #440]	; (8002f7c <HAL_RCC_OscConfig+0x520>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0f0      	beq.n	8002db0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002dce:	f7fe fcd5 	bl	800177c <HAL_GetREVID>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	f241 0203 	movw	r2, #4099	; 0x1003
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d817      	bhi.n	8002e0c <HAL_RCC_OscConfig+0x3b0>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	2b20      	cmp	r3, #32
 8002de2:	d108      	bne.n	8002df6 <HAL_RCC_OscConfig+0x39a>
 8002de4:	4b65      	ldr	r3, [pc, #404]	; (8002f7c <HAL_RCC_OscConfig+0x520>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002dec:	4a63      	ldr	r2, [pc, #396]	; (8002f7c <HAL_RCC_OscConfig+0x520>)
 8002dee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002df2:	6053      	str	r3, [r2, #4]
 8002df4:	e02e      	b.n	8002e54 <HAL_RCC_OscConfig+0x3f8>
 8002df6:	4b61      	ldr	r3, [pc, #388]	; (8002f7c <HAL_RCC_OscConfig+0x520>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	069b      	lsls	r3, r3, #26
 8002e04:	495d      	ldr	r1, [pc, #372]	; (8002f7c <HAL_RCC_OscConfig+0x520>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	604b      	str	r3, [r1, #4]
 8002e0a:	e023      	b.n	8002e54 <HAL_RCC_OscConfig+0x3f8>
 8002e0c:	4b5b      	ldr	r3, [pc, #364]	; (8002f7c <HAL_RCC_OscConfig+0x520>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	061b      	lsls	r3, r3, #24
 8002e1a:	4958      	ldr	r1, [pc, #352]	; (8002f7c <HAL_RCC_OscConfig+0x520>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	60cb      	str	r3, [r1, #12]
 8002e20:	e018      	b.n	8002e54 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002e22:	4b56      	ldr	r3, [pc, #344]	; (8002f7c <HAL_RCC_OscConfig+0x520>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a55      	ldr	r2, [pc, #340]	; (8002f7c <HAL_RCC_OscConfig+0x520>)
 8002e28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2e:	f7fe fc75 	bl	800171c <HAL_GetTick>
 8002e32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e34:	e008      	b.n	8002e48 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002e36:	f7fe fc71 	bl	800171c <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e212      	b.n	800326e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e48:	4b4c      	ldr	r3, [pc, #304]	; (8002f7c <HAL_RCC_OscConfig+0x520>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1f0      	bne.n	8002e36 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0308 	and.w	r3, r3, #8
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d036      	beq.n	8002ece <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d019      	beq.n	8002e9c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e68:	4b44      	ldr	r3, [pc, #272]	; (8002f7c <HAL_RCC_OscConfig+0x520>)
 8002e6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e6c:	4a43      	ldr	r2, [pc, #268]	; (8002f7c <HAL_RCC_OscConfig+0x520>)
 8002e6e:	f043 0301 	orr.w	r3, r3, #1
 8002e72:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e74:	f7fe fc52 	bl	800171c <HAL_GetTick>
 8002e78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e7c:	f7fe fc4e 	bl	800171c <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e1ef      	b.n	800326e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e8e:	4b3b      	ldr	r3, [pc, #236]	; (8002f7c <HAL_RCC_OscConfig+0x520>)
 8002e90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d0f0      	beq.n	8002e7c <HAL_RCC_OscConfig+0x420>
 8002e9a:	e018      	b.n	8002ece <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e9c:	4b37      	ldr	r3, [pc, #220]	; (8002f7c <HAL_RCC_OscConfig+0x520>)
 8002e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ea0:	4a36      	ldr	r2, [pc, #216]	; (8002f7c <HAL_RCC_OscConfig+0x520>)
 8002ea2:	f023 0301 	bic.w	r3, r3, #1
 8002ea6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea8:	f7fe fc38 	bl	800171c <HAL_GetTick>
 8002eac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eb0:	f7fe fc34 	bl	800171c <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e1d5      	b.n	800326e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ec2:	4b2e      	ldr	r3, [pc, #184]	; (8002f7c <HAL_RCC_OscConfig+0x520>)
 8002ec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1f0      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0320 	and.w	r3, r3, #32
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d036      	beq.n	8002f48 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d019      	beq.n	8002f16 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ee2:	4b26      	ldr	r3, [pc, #152]	; (8002f7c <HAL_RCC_OscConfig+0x520>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a25      	ldr	r2, [pc, #148]	; (8002f7c <HAL_RCC_OscConfig+0x520>)
 8002ee8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002eec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002eee:	f7fe fc15 	bl	800171c <HAL_GetTick>
 8002ef2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ef4:	e008      	b.n	8002f08 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002ef6:	f7fe fc11 	bl	800171c <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e1b2      	b.n	800326e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f08:	4b1c      	ldr	r3, [pc, #112]	; (8002f7c <HAL_RCC_OscConfig+0x520>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d0f0      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x49a>
 8002f14:	e018      	b.n	8002f48 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f16:	4b19      	ldr	r3, [pc, #100]	; (8002f7c <HAL_RCC_OscConfig+0x520>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a18      	ldr	r2, [pc, #96]	; (8002f7c <HAL_RCC_OscConfig+0x520>)
 8002f1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f20:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002f22:	f7fe fbfb 	bl	800171c <HAL_GetTick>
 8002f26:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f28:	e008      	b.n	8002f3c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002f2a:	f7fe fbf7 	bl	800171c <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e198      	b.n	800326e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f3c:	4b0f      	ldr	r3, [pc, #60]	; (8002f7c <HAL_RCC_OscConfig+0x520>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1f0      	bne.n	8002f2a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 8085 	beq.w	8003060 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f56:	4b0a      	ldr	r3, [pc, #40]	; (8002f80 <HAL_RCC_OscConfig+0x524>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a09      	ldr	r2, [pc, #36]	; (8002f80 <HAL_RCC_OscConfig+0x524>)
 8002f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f60:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f62:	f7fe fbdb 	bl	800171c <HAL_GetTick>
 8002f66:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f68:	e00c      	b.n	8002f84 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002f6a:	f7fe fbd7 	bl	800171c <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b64      	cmp	r3, #100	; 0x64
 8002f76:	d905      	bls.n	8002f84 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e178      	b.n	800326e <HAL_RCC_OscConfig+0x812>
 8002f7c:	58024400 	.word	0x58024400
 8002f80:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f84:	4b96      	ldr	r3, [pc, #600]	; (80031e0 <HAL_RCC_OscConfig+0x784>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d0ec      	beq.n	8002f6a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d106      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x54a>
 8002f98:	4b92      	ldr	r3, [pc, #584]	; (80031e4 <HAL_RCC_OscConfig+0x788>)
 8002f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9c:	4a91      	ldr	r2, [pc, #580]	; (80031e4 <HAL_RCC_OscConfig+0x788>)
 8002f9e:	f043 0301 	orr.w	r3, r3, #1
 8002fa2:	6713      	str	r3, [r2, #112]	; 0x70
 8002fa4:	e02d      	b.n	8003002 <HAL_RCC_OscConfig+0x5a6>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10c      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x56c>
 8002fae:	4b8d      	ldr	r3, [pc, #564]	; (80031e4 <HAL_RCC_OscConfig+0x788>)
 8002fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb2:	4a8c      	ldr	r2, [pc, #560]	; (80031e4 <HAL_RCC_OscConfig+0x788>)
 8002fb4:	f023 0301 	bic.w	r3, r3, #1
 8002fb8:	6713      	str	r3, [r2, #112]	; 0x70
 8002fba:	4b8a      	ldr	r3, [pc, #552]	; (80031e4 <HAL_RCC_OscConfig+0x788>)
 8002fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fbe:	4a89      	ldr	r2, [pc, #548]	; (80031e4 <HAL_RCC_OscConfig+0x788>)
 8002fc0:	f023 0304 	bic.w	r3, r3, #4
 8002fc4:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc6:	e01c      	b.n	8003002 <HAL_RCC_OscConfig+0x5a6>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	2b05      	cmp	r3, #5
 8002fce:	d10c      	bne.n	8002fea <HAL_RCC_OscConfig+0x58e>
 8002fd0:	4b84      	ldr	r3, [pc, #528]	; (80031e4 <HAL_RCC_OscConfig+0x788>)
 8002fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd4:	4a83      	ldr	r2, [pc, #524]	; (80031e4 <HAL_RCC_OscConfig+0x788>)
 8002fd6:	f043 0304 	orr.w	r3, r3, #4
 8002fda:	6713      	str	r3, [r2, #112]	; 0x70
 8002fdc:	4b81      	ldr	r3, [pc, #516]	; (80031e4 <HAL_RCC_OscConfig+0x788>)
 8002fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe0:	4a80      	ldr	r2, [pc, #512]	; (80031e4 <HAL_RCC_OscConfig+0x788>)
 8002fe2:	f043 0301 	orr.w	r3, r3, #1
 8002fe6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fe8:	e00b      	b.n	8003002 <HAL_RCC_OscConfig+0x5a6>
 8002fea:	4b7e      	ldr	r3, [pc, #504]	; (80031e4 <HAL_RCC_OscConfig+0x788>)
 8002fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fee:	4a7d      	ldr	r2, [pc, #500]	; (80031e4 <HAL_RCC_OscConfig+0x788>)
 8002ff0:	f023 0301 	bic.w	r3, r3, #1
 8002ff4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ff6:	4b7b      	ldr	r3, [pc, #492]	; (80031e4 <HAL_RCC_OscConfig+0x788>)
 8002ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffa:	4a7a      	ldr	r2, [pc, #488]	; (80031e4 <HAL_RCC_OscConfig+0x788>)
 8002ffc:	f023 0304 	bic.w	r3, r3, #4
 8003000:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d015      	beq.n	8003036 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800300a:	f7fe fb87 	bl	800171c <HAL_GetTick>
 800300e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003010:	e00a      	b.n	8003028 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003012:	f7fe fb83 	bl	800171c <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003020:	4293      	cmp	r3, r2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e122      	b.n	800326e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003028:	4b6e      	ldr	r3, [pc, #440]	; (80031e4 <HAL_RCC_OscConfig+0x788>)
 800302a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302c:	f003 0302 	and.w	r3, r3, #2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0ee      	beq.n	8003012 <HAL_RCC_OscConfig+0x5b6>
 8003034:	e014      	b.n	8003060 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003036:	f7fe fb71 	bl	800171c <HAL_GetTick>
 800303a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800303c:	e00a      	b.n	8003054 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800303e:	f7fe fb6d 	bl	800171c <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	f241 3288 	movw	r2, #5000	; 0x1388
 800304c:	4293      	cmp	r3, r2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e10c      	b.n	800326e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003054:	4b63      	ldr	r3, [pc, #396]	; (80031e4 <HAL_RCC_OscConfig+0x788>)
 8003056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1ee      	bne.n	800303e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003064:	2b00      	cmp	r3, #0
 8003066:	f000 8101 	beq.w	800326c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800306a:	4b5e      	ldr	r3, [pc, #376]	; (80031e4 <HAL_RCC_OscConfig+0x788>)
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003072:	2b18      	cmp	r3, #24
 8003074:	f000 80bc 	beq.w	80031f0 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307c:	2b02      	cmp	r3, #2
 800307e:	f040 8095 	bne.w	80031ac <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003082:	4b58      	ldr	r3, [pc, #352]	; (80031e4 <HAL_RCC_OscConfig+0x788>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a57      	ldr	r2, [pc, #348]	; (80031e4 <HAL_RCC_OscConfig+0x788>)
 8003088:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800308c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308e:	f7fe fb45 	bl	800171c <HAL_GetTick>
 8003092:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003094:	e008      	b.n	80030a8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003096:	f7fe fb41 	bl	800171c <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e0e2      	b.n	800326e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030a8:	4b4e      	ldr	r3, [pc, #312]	; (80031e4 <HAL_RCC_OscConfig+0x788>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1f0      	bne.n	8003096 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030b4:	4b4b      	ldr	r3, [pc, #300]	; (80031e4 <HAL_RCC_OscConfig+0x788>)
 80030b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030b8:	4b4b      	ldr	r3, [pc, #300]	; (80031e8 <HAL_RCC_OscConfig+0x78c>)
 80030ba:	4013      	ands	r3, r2
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80030c4:	0112      	lsls	r2, r2, #4
 80030c6:	430a      	orrs	r2, r1
 80030c8:	4946      	ldr	r1, [pc, #280]	; (80031e4 <HAL_RCC_OscConfig+0x788>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	628b      	str	r3, [r1, #40]	; 0x28
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	3b01      	subs	r3, #1
 80030d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030dc:	3b01      	subs	r3, #1
 80030de:	025b      	lsls	r3, r3, #9
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e8:	3b01      	subs	r3, #1
 80030ea:	041b      	lsls	r3, r3, #16
 80030ec:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80030f0:	431a      	orrs	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030f6:	3b01      	subs	r3, #1
 80030f8:	061b      	lsls	r3, r3, #24
 80030fa:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80030fe:	4939      	ldr	r1, [pc, #228]	; (80031e4 <HAL_RCC_OscConfig+0x788>)
 8003100:	4313      	orrs	r3, r2
 8003102:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003104:	4b37      	ldr	r3, [pc, #220]	; (80031e4 <HAL_RCC_OscConfig+0x788>)
 8003106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003108:	4a36      	ldr	r2, [pc, #216]	; (80031e4 <HAL_RCC_OscConfig+0x788>)
 800310a:	f023 0301 	bic.w	r3, r3, #1
 800310e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003110:	4b34      	ldr	r3, [pc, #208]	; (80031e4 <HAL_RCC_OscConfig+0x788>)
 8003112:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003114:	4b35      	ldr	r3, [pc, #212]	; (80031ec <HAL_RCC_OscConfig+0x790>)
 8003116:	4013      	ands	r3, r2
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800311c:	00d2      	lsls	r2, r2, #3
 800311e:	4931      	ldr	r1, [pc, #196]	; (80031e4 <HAL_RCC_OscConfig+0x788>)
 8003120:	4313      	orrs	r3, r2
 8003122:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003124:	4b2f      	ldr	r3, [pc, #188]	; (80031e4 <HAL_RCC_OscConfig+0x788>)
 8003126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003128:	f023 020c 	bic.w	r2, r3, #12
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003130:	492c      	ldr	r1, [pc, #176]	; (80031e4 <HAL_RCC_OscConfig+0x788>)
 8003132:	4313      	orrs	r3, r2
 8003134:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003136:	4b2b      	ldr	r3, [pc, #172]	; (80031e4 <HAL_RCC_OscConfig+0x788>)
 8003138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313a:	f023 0202 	bic.w	r2, r3, #2
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003142:	4928      	ldr	r1, [pc, #160]	; (80031e4 <HAL_RCC_OscConfig+0x788>)
 8003144:	4313      	orrs	r3, r2
 8003146:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003148:	4b26      	ldr	r3, [pc, #152]	; (80031e4 <HAL_RCC_OscConfig+0x788>)
 800314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314c:	4a25      	ldr	r2, [pc, #148]	; (80031e4 <HAL_RCC_OscConfig+0x788>)
 800314e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003152:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003154:	4b23      	ldr	r3, [pc, #140]	; (80031e4 <HAL_RCC_OscConfig+0x788>)
 8003156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003158:	4a22      	ldr	r2, [pc, #136]	; (80031e4 <HAL_RCC_OscConfig+0x788>)
 800315a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800315e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003160:	4b20      	ldr	r3, [pc, #128]	; (80031e4 <HAL_RCC_OscConfig+0x788>)
 8003162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003164:	4a1f      	ldr	r2, [pc, #124]	; (80031e4 <HAL_RCC_OscConfig+0x788>)
 8003166:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800316a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800316c:	4b1d      	ldr	r3, [pc, #116]	; (80031e4 <HAL_RCC_OscConfig+0x788>)
 800316e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003170:	4a1c      	ldr	r2, [pc, #112]	; (80031e4 <HAL_RCC_OscConfig+0x788>)
 8003172:	f043 0301 	orr.w	r3, r3, #1
 8003176:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003178:	4b1a      	ldr	r3, [pc, #104]	; (80031e4 <HAL_RCC_OscConfig+0x788>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a19      	ldr	r2, [pc, #100]	; (80031e4 <HAL_RCC_OscConfig+0x788>)
 800317e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003182:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003184:	f7fe faca 	bl	800171c <HAL_GetTick>
 8003188:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800318c:	f7fe fac6 	bl	800171c <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e067      	b.n	800326e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800319e:	4b11      	ldr	r3, [pc, #68]	; (80031e4 <HAL_RCC_OscConfig+0x788>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0f0      	beq.n	800318c <HAL_RCC_OscConfig+0x730>
 80031aa:	e05f      	b.n	800326c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ac:	4b0d      	ldr	r3, [pc, #52]	; (80031e4 <HAL_RCC_OscConfig+0x788>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a0c      	ldr	r2, [pc, #48]	; (80031e4 <HAL_RCC_OscConfig+0x788>)
 80031b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b8:	f7fe fab0 	bl	800171c <HAL_GetTick>
 80031bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031c0:	f7fe faac 	bl	800171c <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e04d      	b.n	800326e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031d2:	4b04      	ldr	r3, [pc, #16]	; (80031e4 <HAL_RCC_OscConfig+0x788>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1f0      	bne.n	80031c0 <HAL_RCC_OscConfig+0x764>
 80031de:	e045      	b.n	800326c <HAL_RCC_OscConfig+0x810>
 80031e0:	58024800 	.word	0x58024800
 80031e4:	58024400 	.word	0x58024400
 80031e8:	fffffc0c 	.word	0xfffffc0c
 80031ec:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80031f0:	4b21      	ldr	r3, [pc, #132]	; (8003278 <HAL_RCC_OscConfig+0x81c>)
 80031f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80031f6:	4b20      	ldr	r3, [pc, #128]	; (8003278 <HAL_RCC_OscConfig+0x81c>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	2b01      	cmp	r3, #1
 8003202:	d031      	beq.n	8003268 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	f003 0203 	and.w	r2, r3, #3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800320e:	429a      	cmp	r2, r3
 8003210:	d12a      	bne.n	8003268 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	091b      	lsrs	r3, r3, #4
 8003216:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800321e:	429a      	cmp	r2, r3
 8003220:	d122      	bne.n	8003268 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800322e:	429a      	cmp	r2, r3
 8003230:	d11a      	bne.n	8003268 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	0a5b      	lsrs	r3, r3, #9
 8003236:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800323e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003240:	429a      	cmp	r2, r3
 8003242:	d111      	bne.n	8003268 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	0c1b      	lsrs	r3, r3, #16
 8003248:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003250:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003252:	429a      	cmp	r2, r3
 8003254:	d108      	bne.n	8003268 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	0e1b      	lsrs	r3, r3, #24
 800325a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003262:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003264:	429a      	cmp	r2, r3
 8003266:	d001      	beq.n	800326c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e000      	b.n	800326e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3730      	adds	r7, #48	; 0x30
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	58024400 	.word	0x58024400

0800327c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d101      	bne.n	8003290 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e19c      	b.n	80035ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003290:	4b8a      	ldr	r3, [pc, #552]	; (80034bc <HAL_RCC_ClockConfig+0x240>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 030f 	and.w	r3, r3, #15
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	429a      	cmp	r2, r3
 800329c:	d910      	bls.n	80032c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800329e:	4b87      	ldr	r3, [pc, #540]	; (80034bc <HAL_RCC_ClockConfig+0x240>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f023 020f 	bic.w	r2, r3, #15
 80032a6:	4985      	ldr	r1, [pc, #532]	; (80034bc <HAL_RCC_ClockConfig+0x240>)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ae:	4b83      	ldr	r3, [pc, #524]	; (80034bc <HAL_RCC_ClockConfig+0x240>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 030f 	and.w	r3, r3, #15
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d001      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e184      	b.n	80035ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d010      	beq.n	80032ee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	691a      	ldr	r2, [r3, #16]
 80032d0:	4b7b      	ldr	r3, [pc, #492]	; (80034c0 <HAL_RCC_ClockConfig+0x244>)
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032d8:	429a      	cmp	r2, r3
 80032da:	d908      	bls.n	80032ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80032dc:	4b78      	ldr	r3, [pc, #480]	; (80034c0 <HAL_RCC_ClockConfig+0x244>)
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	4975      	ldr	r1, [pc, #468]	; (80034c0 <HAL_RCC_ClockConfig+0x244>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0308 	and.w	r3, r3, #8
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d010      	beq.n	800331c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	695a      	ldr	r2, [r3, #20]
 80032fe:	4b70      	ldr	r3, [pc, #448]	; (80034c0 <HAL_RCC_ClockConfig+0x244>)
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003306:	429a      	cmp	r2, r3
 8003308:	d908      	bls.n	800331c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800330a:	4b6d      	ldr	r3, [pc, #436]	; (80034c0 <HAL_RCC_ClockConfig+0x244>)
 800330c:	69db      	ldr	r3, [r3, #28]
 800330e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	496a      	ldr	r1, [pc, #424]	; (80034c0 <HAL_RCC_ClockConfig+0x244>)
 8003318:	4313      	orrs	r3, r2
 800331a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0310 	and.w	r3, r3, #16
 8003324:	2b00      	cmp	r3, #0
 8003326:	d010      	beq.n	800334a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	699a      	ldr	r2, [r3, #24]
 800332c:	4b64      	ldr	r3, [pc, #400]	; (80034c0 <HAL_RCC_ClockConfig+0x244>)
 800332e:	69db      	ldr	r3, [r3, #28]
 8003330:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003334:	429a      	cmp	r2, r3
 8003336:	d908      	bls.n	800334a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003338:	4b61      	ldr	r3, [pc, #388]	; (80034c0 <HAL_RCC_ClockConfig+0x244>)
 800333a:	69db      	ldr	r3, [r3, #28]
 800333c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	495e      	ldr	r1, [pc, #376]	; (80034c0 <HAL_RCC_ClockConfig+0x244>)
 8003346:	4313      	orrs	r3, r2
 8003348:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0320 	and.w	r3, r3, #32
 8003352:	2b00      	cmp	r3, #0
 8003354:	d010      	beq.n	8003378 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	69da      	ldr	r2, [r3, #28]
 800335a:	4b59      	ldr	r3, [pc, #356]	; (80034c0 <HAL_RCC_ClockConfig+0x244>)
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003362:	429a      	cmp	r2, r3
 8003364:	d908      	bls.n	8003378 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003366:	4b56      	ldr	r3, [pc, #344]	; (80034c0 <HAL_RCC_ClockConfig+0x244>)
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	4953      	ldr	r1, [pc, #332]	; (80034c0 <HAL_RCC_ClockConfig+0x244>)
 8003374:	4313      	orrs	r3, r2
 8003376:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d010      	beq.n	80033a6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68da      	ldr	r2, [r3, #12]
 8003388:	4b4d      	ldr	r3, [pc, #308]	; (80034c0 <HAL_RCC_ClockConfig+0x244>)
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	f003 030f 	and.w	r3, r3, #15
 8003390:	429a      	cmp	r2, r3
 8003392:	d908      	bls.n	80033a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003394:	4b4a      	ldr	r3, [pc, #296]	; (80034c0 <HAL_RCC_ClockConfig+0x244>)
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	f023 020f 	bic.w	r2, r3, #15
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	4947      	ldr	r1, [pc, #284]	; (80034c0 <HAL_RCC_ClockConfig+0x244>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d055      	beq.n	800345e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80033b2:	4b43      	ldr	r3, [pc, #268]	; (80034c0 <HAL_RCC_ClockConfig+0x244>)
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	4940      	ldr	r1, [pc, #256]	; (80034c0 <HAL_RCC_ClockConfig+0x244>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d107      	bne.n	80033dc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033cc:	4b3c      	ldr	r3, [pc, #240]	; (80034c0 <HAL_RCC_ClockConfig+0x244>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d121      	bne.n	800341c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e0f6      	b.n	80035ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	2b03      	cmp	r3, #3
 80033e2:	d107      	bne.n	80033f4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033e4:	4b36      	ldr	r3, [pc, #216]	; (80034c0 <HAL_RCC_ClockConfig+0x244>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d115      	bne.n	800341c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e0ea      	b.n	80035ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d107      	bne.n	800340c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80033fc:	4b30      	ldr	r3, [pc, #192]	; (80034c0 <HAL_RCC_ClockConfig+0x244>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003404:	2b00      	cmp	r3, #0
 8003406:	d109      	bne.n	800341c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e0de      	b.n	80035ca <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800340c:	4b2c      	ldr	r3, [pc, #176]	; (80034c0 <HAL_RCC_ClockConfig+0x244>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0304 	and.w	r3, r3, #4
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e0d6      	b.n	80035ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800341c:	4b28      	ldr	r3, [pc, #160]	; (80034c0 <HAL_RCC_ClockConfig+0x244>)
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	f023 0207 	bic.w	r2, r3, #7
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	4925      	ldr	r1, [pc, #148]	; (80034c0 <HAL_RCC_ClockConfig+0x244>)
 800342a:	4313      	orrs	r3, r2
 800342c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800342e:	f7fe f975 	bl	800171c <HAL_GetTick>
 8003432:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003434:	e00a      	b.n	800344c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003436:	f7fe f971 	bl	800171c <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	f241 3288 	movw	r2, #5000	; 0x1388
 8003444:	4293      	cmp	r3, r2
 8003446:	d901      	bls.n	800344c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e0be      	b.n	80035ca <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800344c:	4b1c      	ldr	r3, [pc, #112]	; (80034c0 <HAL_RCC_ClockConfig+0x244>)
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	429a      	cmp	r2, r3
 800345c:	d1eb      	bne.n	8003436 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d010      	beq.n	800348c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68da      	ldr	r2, [r3, #12]
 800346e:	4b14      	ldr	r3, [pc, #80]	; (80034c0 <HAL_RCC_ClockConfig+0x244>)
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	f003 030f 	and.w	r3, r3, #15
 8003476:	429a      	cmp	r2, r3
 8003478:	d208      	bcs.n	800348c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800347a:	4b11      	ldr	r3, [pc, #68]	; (80034c0 <HAL_RCC_ClockConfig+0x244>)
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	f023 020f 	bic.w	r2, r3, #15
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	490e      	ldr	r1, [pc, #56]	; (80034c0 <HAL_RCC_ClockConfig+0x244>)
 8003488:	4313      	orrs	r3, r2
 800348a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800348c:	4b0b      	ldr	r3, [pc, #44]	; (80034bc <HAL_RCC_ClockConfig+0x240>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 030f 	and.w	r3, r3, #15
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	429a      	cmp	r2, r3
 8003498:	d214      	bcs.n	80034c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800349a:	4b08      	ldr	r3, [pc, #32]	; (80034bc <HAL_RCC_ClockConfig+0x240>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f023 020f 	bic.w	r2, r3, #15
 80034a2:	4906      	ldr	r1, [pc, #24]	; (80034bc <HAL_RCC_ClockConfig+0x240>)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034aa:	4b04      	ldr	r3, [pc, #16]	; (80034bc <HAL_RCC_ClockConfig+0x240>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 030f 	and.w	r3, r3, #15
 80034b2:	683a      	ldr	r2, [r7, #0]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d005      	beq.n	80034c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e086      	b.n	80035ca <HAL_RCC_ClockConfig+0x34e>
 80034bc:	52002000 	.word	0x52002000
 80034c0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d010      	beq.n	80034f2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	691a      	ldr	r2, [r3, #16]
 80034d4:	4b3f      	ldr	r3, [pc, #252]	; (80035d4 <HAL_RCC_ClockConfig+0x358>)
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034dc:	429a      	cmp	r2, r3
 80034de:	d208      	bcs.n	80034f2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80034e0:	4b3c      	ldr	r3, [pc, #240]	; (80035d4 <HAL_RCC_ClockConfig+0x358>)
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	4939      	ldr	r1, [pc, #228]	; (80035d4 <HAL_RCC_ClockConfig+0x358>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0308 	and.w	r3, r3, #8
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d010      	beq.n	8003520 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	695a      	ldr	r2, [r3, #20]
 8003502:	4b34      	ldr	r3, [pc, #208]	; (80035d4 <HAL_RCC_ClockConfig+0x358>)
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800350a:	429a      	cmp	r2, r3
 800350c:	d208      	bcs.n	8003520 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800350e:	4b31      	ldr	r3, [pc, #196]	; (80035d4 <HAL_RCC_ClockConfig+0x358>)
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	492e      	ldr	r1, [pc, #184]	; (80035d4 <HAL_RCC_ClockConfig+0x358>)
 800351c:	4313      	orrs	r3, r2
 800351e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0310 	and.w	r3, r3, #16
 8003528:	2b00      	cmp	r3, #0
 800352a:	d010      	beq.n	800354e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	699a      	ldr	r2, [r3, #24]
 8003530:	4b28      	ldr	r3, [pc, #160]	; (80035d4 <HAL_RCC_ClockConfig+0x358>)
 8003532:	69db      	ldr	r3, [r3, #28]
 8003534:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003538:	429a      	cmp	r2, r3
 800353a:	d208      	bcs.n	800354e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800353c:	4b25      	ldr	r3, [pc, #148]	; (80035d4 <HAL_RCC_ClockConfig+0x358>)
 800353e:	69db      	ldr	r3, [r3, #28]
 8003540:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	4922      	ldr	r1, [pc, #136]	; (80035d4 <HAL_RCC_ClockConfig+0x358>)
 800354a:	4313      	orrs	r3, r2
 800354c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0320 	and.w	r3, r3, #32
 8003556:	2b00      	cmp	r3, #0
 8003558:	d010      	beq.n	800357c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	69da      	ldr	r2, [r3, #28]
 800355e:	4b1d      	ldr	r3, [pc, #116]	; (80035d4 <HAL_RCC_ClockConfig+0x358>)
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003566:	429a      	cmp	r2, r3
 8003568:	d208      	bcs.n	800357c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800356a:	4b1a      	ldr	r3, [pc, #104]	; (80035d4 <HAL_RCC_ClockConfig+0x358>)
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	4917      	ldr	r1, [pc, #92]	; (80035d4 <HAL_RCC_ClockConfig+0x358>)
 8003578:	4313      	orrs	r3, r2
 800357a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800357c:	f000 f834 	bl	80035e8 <HAL_RCC_GetSysClockFreq>
 8003580:	4602      	mov	r2, r0
 8003582:	4b14      	ldr	r3, [pc, #80]	; (80035d4 <HAL_RCC_ClockConfig+0x358>)
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	0a1b      	lsrs	r3, r3, #8
 8003588:	f003 030f 	and.w	r3, r3, #15
 800358c:	4912      	ldr	r1, [pc, #72]	; (80035d8 <HAL_RCC_ClockConfig+0x35c>)
 800358e:	5ccb      	ldrb	r3, [r1, r3]
 8003590:	f003 031f 	and.w	r3, r3, #31
 8003594:	fa22 f303 	lsr.w	r3, r2, r3
 8003598:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800359a:	4b0e      	ldr	r3, [pc, #56]	; (80035d4 <HAL_RCC_ClockConfig+0x358>)
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	f003 030f 	and.w	r3, r3, #15
 80035a2:	4a0d      	ldr	r2, [pc, #52]	; (80035d8 <HAL_RCC_ClockConfig+0x35c>)
 80035a4:	5cd3      	ldrb	r3, [r2, r3]
 80035a6:	f003 031f 	and.w	r3, r3, #31
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	fa22 f303 	lsr.w	r3, r2, r3
 80035b0:	4a0a      	ldr	r2, [pc, #40]	; (80035dc <HAL_RCC_ClockConfig+0x360>)
 80035b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80035b4:	4a0a      	ldr	r2, [pc, #40]	; (80035e0 <HAL_RCC_ClockConfig+0x364>)
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80035ba:	4b0a      	ldr	r3, [pc, #40]	; (80035e4 <HAL_RCC_ClockConfig+0x368>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4618      	mov	r0, r3
 80035c0:	f7fe f862 	bl	8001688 <HAL_InitTick>
 80035c4:	4603      	mov	r3, r0
 80035c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80035c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3718      	adds	r7, #24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	58024400 	.word	0x58024400
 80035d8:	0800df4c 	.word	0x0800df4c
 80035dc:	24000004 	.word	0x24000004
 80035e0:	24000000 	.word	0x24000000
 80035e4:	24000008 	.word	0x24000008

080035e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b089      	sub	sp, #36	; 0x24
 80035ec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035ee:	4bb3      	ldr	r3, [pc, #716]	; (80038bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035f6:	2b18      	cmp	r3, #24
 80035f8:	f200 8155 	bhi.w	80038a6 <HAL_RCC_GetSysClockFreq+0x2be>
 80035fc:	a201      	add	r2, pc, #4	; (adr r2, 8003604 <HAL_RCC_GetSysClockFreq+0x1c>)
 80035fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003602:	bf00      	nop
 8003604:	08003669 	.word	0x08003669
 8003608:	080038a7 	.word	0x080038a7
 800360c:	080038a7 	.word	0x080038a7
 8003610:	080038a7 	.word	0x080038a7
 8003614:	080038a7 	.word	0x080038a7
 8003618:	080038a7 	.word	0x080038a7
 800361c:	080038a7 	.word	0x080038a7
 8003620:	080038a7 	.word	0x080038a7
 8003624:	0800368f 	.word	0x0800368f
 8003628:	080038a7 	.word	0x080038a7
 800362c:	080038a7 	.word	0x080038a7
 8003630:	080038a7 	.word	0x080038a7
 8003634:	080038a7 	.word	0x080038a7
 8003638:	080038a7 	.word	0x080038a7
 800363c:	080038a7 	.word	0x080038a7
 8003640:	080038a7 	.word	0x080038a7
 8003644:	08003695 	.word	0x08003695
 8003648:	080038a7 	.word	0x080038a7
 800364c:	080038a7 	.word	0x080038a7
 8003650:	080038a7 	.word	0x080038a7
 8003654:	080038a7 	.word	0x080038a7
 8003658:	080038a7 	.word	0x080038a7
 800365c:	080038a7 	.word	0x080038a7
 8003660:	080038a7 	.word	0x080038a7
 8003664:	0800369b 	.word	0x0800369b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003668:	4b94      	ldr	r3, [pc, #592]	; (80038bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0320 	and.w	r3, r3, #32
 8003670:	2b00      	cmp	r3, #0
 8003672:	d009      	beq.n	8003688 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003674:	4b91      	ldr	r3, [pc, #580]	; (80038bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	08db      	lsrs	r3, r3, #3
 800367a:	f003 0303 	and.w	r3, r3, #3
 800367e:	4a90      	ldr	r2, [pc, #576]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003680:	fa22 f303 	lsr.w	r3, r2, r3
 8003684:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003686:	e111      	b.n	80038ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003688:	4b8d      	ldr	r3, [pc, #564]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800368a:	61bb      	str	r3, [r7, #24]
    break;
 800368c:	e10e      	b.n	80038ac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800368e:	4b8d      	ldr	r3, [pc, #564]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003690:	61bb      	str	r3, [r7, #24]
    break;
 8003692:	e10b      	b.n	80038ac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003694:	4b8c      	ldr	r3, [pc, #560]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003696:	61bb      	str	r3, [r7, #24]
    break;
 8003698:	e108      	b.n	80038ac <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800369a:	4b88      	ldr	r3, [pc, #544]	; (80038bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800369c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369e:	f003 0303 	and.w	r3, r3, #3
 80036a2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80036a4:	4b85      	ldr	r3, [pc, #532]	; (80038bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a8:	091b      	lsrs	r3, r3, #4
 80036aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036ae:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80036b0:	4b82      	ldr	r3, [pc, #520]	; (80038bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80036ba:	4b80      	ldr	r3, [pc, #512]	; (80038bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036be:	08db      	lsrs	r3, r3, #3
 80036c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	fb02 f303 	mul.w	r3, r2, r3
 80036ca:	ee07 3a90 	vmov	s15, r3
 80036ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036d2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f000 80e1 	beq.w	80038a0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	f000 8083 	beq.w	80037ec <HAL_RCC_GetSysClockFreq+0x204>
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	f200 80a1 	bhi.w	8003830 <HAL_RCC_GetSysClockFreq+0x248>
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d003      	beq.n	80036fc <HAL_RCC_GetSysClockFreq+0x114>
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d056      	beq.n	80037a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 80036fa:	e099      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036fc:	4b6f      	ldr	r3, [pc, #444]	; (80038bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0320 	and.w	r3, r3, #32
 8003704:	2b00      	cmp	r3, #0
 8003706:	d02d      	beq.n	8003764 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003708:	4b6c      	ldr	r3, [pc, #432]	; (80038bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	08db      	lsrs	r3, r3, #3
 800370e:	f003 0303 	and.w	r3, r3, #3
 8003712:	4a6b      	ldr	r2, [pc, #428]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003714:	fa22 f303 	lsr.w	r3, r2, r3
 8003718:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	ee07 3a90 	vmov	s15, r3
 8003720:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	ee07 3a90 	vmov	s15, r3
 800372a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800372e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003732:	4b62      	ldr	r3, [pc, #392]	; (80038bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800373a:	ee07 3a90 	vmov	s15, r3
 800373e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003742:	ed97 6a02 	vldr	s12, [r7, #8]
 8003746:	eddf 5a61 	vldr	s11, [pc, #388]	; 80038cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800374a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800374e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003752:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800375a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800375e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003762:	e087      	b.n	8003874 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	ee07 3a90 	vmov	s15, r3
 800376a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800376e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80038d0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003776:	4b51      	ldr	r3, [pc, #324]	; (80038bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800377e:	ee07 3a90 	vmov	s15, r3
 8003782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003786:	ed97 6a02 	vldr	s12, [r7, #8]
 800378a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80038cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800378e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003796:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800379a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800379e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80037a6:	e065      	b.n	8003874 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	ee07 3a90 	vmov	s15, r3
 80037ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037b2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80038d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80037b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037ba:	4b40      	ldr	r3, [pc, #256]	; (80038bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037c2:	ee07 3a90 	vmov	s15, r3
 80037c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80037ce:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80038cc <HAL_RCC_GetSysClockFreq+0x2e4>
 80037d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80037ea:	e043      	b.n	8003874 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	ee07 3a90 	vmov	s15, r3
 80037f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037f6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80038d8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80037fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037fe:	4b2f      	ldr	r3, [pc, #188]	; (80038bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003806:	ee07 3a90 	vmov	s15, r3
 800380a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800380e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003812:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80038cc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800381a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800381e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800382a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800382e:	e021      	b.n	8003874 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	ee07 3a90 	vmov	s15, r3
 8003836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800383a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80038d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800383e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003842:	4b1e      	ldr	r3, [pc, #120]	; (80038bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800384a:	ee07 3a90 	vmov	s15, r3
 800384e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003852:	ed97 6a02 	vldr	s12, [r7, #8]
 8003856:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80038cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800385a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800385e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003862:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800386a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800386e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003872:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003874:	4b11      	ldr	r3, [pc, #68]	; (80038bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003878:	0a5b      	lsrs	r3, r3, #9
 800387a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800387e:	3301      	adds	r3, #1
 8003880:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	ee07 3a90 	vmov	s15, r3
 8003888:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800388c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003890:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003894:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003898:	ee17 3a90 	vmov	r3, s15
 800389c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800389e:	e005      	b.n	80038ac <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80038a0:	2300      	movs	r3, #0
 80038a2:	61bb      	str	r3, [r7, #24]
    break;
 80038a4:	e002      	b.n	80038ac <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80038a6:	4b07      	ldr	r3, [pc, #28]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80038a8:	61bb      	str	r3, [r7, #24]
    break;
 80038aa:	bf00      	nop
  }

  return sysclockfreq;
 80038ac:	69bb      	ldr	r3, [r7, #24]
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3724      	adds	r7, #36	; 0x24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	58024400 	.word	0x58024400
 80038c0:	03d09000 	.word	0x03d09000
 80038c4:	003d0900 	.word	0x003d0900
 80038c8:	017d7840 	.word	0x017d7840
 80038cc:	46000000 	.word	0x46000000
 80038d0:	4c742400 	.word	0x4c742400
 80038d4:	4a742400 	.word	0x4a742400
 80038d8:	4bbebc20 	.word	0x4bbebc20

080038dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80038e2:	f7ff fe81 	bl	80035e8 <HAL_RCC_GetSysClockFreq>
 80038e6:	4602      	mov	r2, r0
 80038e8:	4b10      	ldr	r3, [pc, #64]	; (800392c <HAL_RCC_GetHCLKFreq+0x50>)
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	0a1b      	lsrs	r3, r3, #8
 80038ee:	f003 030f 	and.w	r3, r3, #15
 80038f2:	490f      	ldr	r1, [pc, #60]	; (8003930 <HAL_RCC_GetHCLKFreq+0x54>)
 80038f4:	5ccb      	ldrb	r3, [r1, r3]
 80038f6:	f003 031f 	and.w	r3, r3, #31
 80038fa:	fa22 f303 	lsr.w	r3, r2, r3
 80038fe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003900:	4b0a      	ldr	r3, [pc, #40]	; (800392c <HAL_RCC_GetHCLKFreq+0x50>)
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	f003 030f 	and.w	r3, r3, #15
 8003908:	4a09      	ldr	r2, [pc, #36]	; (8003930 <HAL_RCC_GetHCLKFreq+0x54>)
 800390a:	5cd3      	ldrb	r3, [r2, r3]
 800390c:	f003 031f 	and.w	r3, r3, #31
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	fa22 f303 	lsr.w	r3, r2, r3
 8003916:	4a07      	ldr	r2, [pc, #28]	; (8003934 <HAL_RCC_GetHCLKFreq+0x58>)
 8003918:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800391a:	4a07      	ldr	r2, [pc, #28]	; (8003938 <HAL_RCC_GetHCLKFreq+0x5c>)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003920:	4b04      	ldr	r3, [pc, #16]	; (8003934 <HAL_RCC_GetHCLKFreq+0x58>)
 8003922:	681b      	ldr	r3, [r3, #0]
}
 8003924:	4618      	mov	r0, r3
 8003926:	3708      	adds	r7, #8
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	58024400 	.word	0x58024400
 8003930:	0800df4c 	.word	0x0800df4c
 8003934:	24000004 	.word	0x24000004
 8003938:	24000000 	.word	0x24000000

0800393c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003940:	f7ff ffcc 	bl	80038dc <HAL_RCC_GetHCLKFreq>
 8003944:	4602      	mov	r2, r0
 8003946:	4b06      	ldr	r3, [pc, #24]	; (8003960 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003948:	69db      	ldr	r3, [r3, #28]
 800394a:	091b      	lsrs	r3, r3, #4
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	4904      	ldr	r1, [pc, #16]	; (8003964 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003952:	5ccb      	ldrb	r3, [r1, r3]
 8003954:	f003 031f 	and.w	r3, r3, #31
 8003958:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800395c:	4618      	mov	r0, r3
 800395e:	bd80      	pop	{r7, pc}
 8003960:	58024400 	.word	0x58024400
 8003964:	0800df4c 	.word	0x0800df4c

08003968 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800396c:	f7ff ffb6 	bl	80038dc <HAL_RCC_GetHCLKFreq>
 8003970:	4602      	mov	r2, r0
 8003972:	4b06      	ldr	r3, [pc, #24]	; (800398c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	0a1b      	lsrs	r3, r3, #8
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	4904      	ldr	r1, [pc, #16]	; (8003990 <HAL_RCC_GetPCLK2Freq+0x28>)
 800397e:	5ccb      	ldrb	r3, [r1, r3]
 8003980:	f003 031f 	and.w	r3, r3, #31
 8003984:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003988:	4618      	mov	r0, r3
 800398a:	bd80      	pop	{r7, pc}
 800398c:	58024400 	.word	0x58024400
 8003990:	0800df4c 	.word	0x0800df4c

08003994 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800399c:	2300      	movs	r3, #0
 800399e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039a0:	2300      	movs	r3, #0
 80039a2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d03f      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80039b8:	d02a      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80039ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80039be:	d824      	bhi.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039c4:	d018      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80039c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039ca:	d81e      	bhi.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d003      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80039d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039d4:	d007      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80039d6:	e018      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039d8:	4bab      	ldr	r3, [pc, #684]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039dc:	4aaa      	ldr	r2, [pc, #680]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80039e4:	e015      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	3304      	adds	r3, #4
 80039ea:	2102      	movs	r1, #2
 80039ec:	4618      	mov	r0, r3
 80039ee:	f002 f823 	bl	8005a38 <RCCEx_PLL2_Config>
 80039f2:	4603      	mov	r3, r0
 80039f4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80039f6:	e00c      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	3324      	adds	r3, #36	; 0x24
 80039fc:	2102      	movs	r1, #2
 80039fe:	4618      	mov	r0, r3
 8003a00:	f002 f8cc 	bl	8005b9c <RCCEx_PLL3_Config>
 8003a04:	4603      	mov	r3, r0
 8003a06:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003a08:	e003      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	75fb      	strb	r3, [r7, #23]
      break;
 8003a0e:	e000      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003a10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a12:	7dfb      	ldrb	r3, [r7, #23]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d109      	bne.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003a18:	4b9b      	ldr	r3, [pc, #620]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a24:	4998      	ldr	r1, [pc, #608]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	650b      	str	r3, [r1, #80]	; 0x50
 8003a2a:	e001      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a2c:	7dfb      	ldrb	r3, [r7, #23]
 8003a2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d03d      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a40:	2b04      	cmp	r3, #4
 8003a42:	d826      	bhi.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003a44:	a201      	add	r2, pc, #4	; (adr r2, 8003a4c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4a:	bf00      	nop
 8003a4c:	08003a61 	.word	0x08003a61
 8003a50:	08003a6f 	.word	0x08003a6f
 8003a54:	08003a81 	.word	0x08003a81
 8003a58:	08003a99 	.word	0x08003a99
 8003a5c:	08003a99 	.word	0x08003a99
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a60:	4b89      	ldr	r3, [pc, #548]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a64:	4a88      	ldr	r2, [pc, #544]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a6c:	e015      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	3304      	adds	r3, #4
 8003a72:	2100      	movs	r1, #0
 8003a74:	4618      	mov	r0, r3
 8003a76:	f001 ffdf 	bl	8005a38 <RCCEx_PLL2_Config>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a7e:	e00c      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	3324      	adds	r3, #36	; 0x24
 8003a84:	2100      	movs	r1, #0
 8003a86:	4618      	mov	r0, r3
 8003a88:	f002 f888 	bl	8005b9c <RCCEx_PLL3_Config>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a90:	e003      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	75fb      	strb	r3, [r7, #23]
      break;
 8003a96:	e000      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003a98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a9a:	7dfb      	ldrb	r3, [r7, #23]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d109      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003aa0:	4b79      	ldr	r3, [pc, #484]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aa4:	f023 0207 	bic.w	r2, r3, #7
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aac:	4976      	ldr	r1, [pc, #472]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	650b      	str	r3, [r1, #80]	; 0x50
 8003ab2:	e001      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ab4:	7dfb      	ldrb	r3, [r7, #23]
 8003ab6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d042      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003acc:	d02b      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003ace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ad2:	d825      	bhi.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003ad4:	2bc0      	cmp	r3, #192	; 0xc0
 8003ad6:	d028      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003ad8:	2bc0      	cmp	r3, #192	; 0xc0
 8003ada:	d821      	bhi.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003adc:	2b80      	cmp	r3, #128	; 0x80
 8003ade:	d016      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003ae0:	2b80      	cmp	r3, #128	; 0x80
 8003ae2:	d81d      	bhi.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d002      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003ae8:	2b40      	cmp	r3, #64	; 0x40
 8003aea:	d007      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003aec:	e018      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003aee:	4b66      	ldr	r3, [pc, #408]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af2:	4a65      	ldr	r2, [pc, #404]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003af8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003afa:	e017      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	3304      	adds	r3, #4
 8003b00:	2100      	movs	r1, #0
 8003b02:	4618      	mov	r0, r3
 8003b04:	f001 ff98 	bl	8005a38 <RCCEx_PLL2_Config>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003b0c:	e00e      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	3324      	adds	r3, #36	; 0x24
 8003b12:	2100      	movs	r1, #0
 8003b14:	4618      	mov	r0, r3
 8003b16:	f002 f841 	bl	8005b9c <RCCEx_PLL3_Config>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003b1e:	e005      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	75fb      	strb	r3, [r7, #23]
      break;
 8003b24:	e002      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003b26:	bf00      	nop
 8003b28:	e000      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003b2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b2c:	7dfb      	ldrb	r3, [r7, #23]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d109      	bne.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003b32:	4b55      	ldr	r3, [pc, #340]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b36:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b3e:	4952      	ldr	r1, [pc, #328]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	650b      	str	r3, [r1, #80]	; 0x50
 8003b44:	e001      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b46:	7dfb      	ldrb	r3, [r7, #23]
 8003b48:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d049      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003b5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b60:	d030      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003b62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b66:	d82a      	bhi.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003b68:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003b6c:	d02c      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003b6e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003b72:	d824      	bhi.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003b74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b78:	d018      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003b7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b7e:	d81e      	bhi.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d003      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003b84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b88:	d007      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003b8a:	e018      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b8c:	4b3e      	ldr	r3, [pc, #248]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b90:	4a3d      	ldr	r2, [pc, #244]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b98:	e017      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	3304      	adds	r3, #4
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f001 ff49 	bl	8005a38 <RCCEx_PLL2_Config>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003baa:	e00e      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	3324      	adds	r3, #36	; 0x24
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f001 fff2 	bl	8005b9c <RCCEx_PLL3_Config>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003bbc:	e005      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	75fb      	strb	r3, [r7, #23]
      break;
 8003bc2:	e002      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003bc4:	bf00      	nop
 8003bc6:	e000      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003bc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bca:	7dfb      	ldrb	r3, [r7, #23]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d10a      	bne.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003bd0:	4b2d      	ldr	r3, [pc, #180]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003bde:	492a      	ldr	r1, [pc, #168]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	658b      	str	r3, [r1, #88]	; 0x58
 8003be4:	e001      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be6:	7dfb      	ldrb	r3, [r7, #23]
 8003be8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d04c      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003bfc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c00:	d030      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003c02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c06:	d82a      	bhi.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003c08:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c0c:	d02c      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8003c0e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c12:	d824      	bhi.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003c14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c18:	d018      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003c1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c1e:	d81e      	bhi.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d003      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003c24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c28:	d007      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003c2a:	e018      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c2c:	4b16      	ldr	r3, [pc, #88]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c30:	4a15      	ldr	r2, [pc, #84]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c38:	e017      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	3304      	adds	r3, #4
 8003c3e:	2100      	movs	r1, #0
 8003c40:	4618      	mov	r0, r3
 8003c42:	f001 fef9 	bl	8005a38 <RCCEx_PLL2_Config>
 8003c46:	4603      	mov	r3, r0
 8003c48:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003c4a:	e00e      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3324      	adds	r3, #36	; 0x24
 8003c50:	2100      	movs	r1, #0
 8003c52:	4618      	mov	r0, r3
 8003c54:	f001 ffa2 	bl	8005b9c <RCCEx_PLL3_Config>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c5c:	e005      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	75fb      	strb	r3, [r7, #23]
      break;
 8003c62:	e002      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003c64:	bf00      	nop
 8003c66:	e000      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003c68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c6a:	7dfb      	ldrb	r3, [r7, #23]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10d      	bne.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003c70:	4b05      	ldr	r3, [pc, #20]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c74:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c7e:	4902      	ldr	r1, [pc, #8]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	658b      	str	r3, [r1, #88]	; 0x58
 8003c84:	e004      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003c86:	bf00      	nop
 8003c88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c8c:	7dfb      	ldrb	r3, [r7, #23]
 8003c8e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d032      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ca0:	2b30      	cmp	r3, #48	; 0x30
 8003ca2:	d01c      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003ca4:	2b30      	cmp	r3, #48	; 0x30
 8003ca6:	d817      	bhi.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003ca8:	2b20      	cmp	r3, #32
 8003caa:	d00c      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003cac:	2b20      	cmp	r3, #32
 8003cae:	d813      	bhi.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d016      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003cb4:	2b10      	cmp	r3, #16
 8003cb6:	d10f      	bne.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cb8:	4bb1      	ldr	r3, [pc, #708]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbc:	4ab0      	ldr	r2, [pc, #704]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003cbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cc2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003cc4:	e00e      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	3304      	adds	r3, #4
 8003cca:	2102      	movs	r1, #2
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f001 feb3 	bl	8005a38 <RCCEx_PLL2_Config>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003cd6:	e005      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	75fb      	strb	r3, [r7, #23]
      break;
 8003cdc:	e002      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003cde:	bf00      	nop
 8003ce0:	e000      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003ce2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ce4:	7dfb      	ldrb	r3, [r7, #23]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d109      	bne.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003cea:	4ba5      	ldr	r3, [pc, #660]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cf6:	49a2      	ldr	r1, [pc, #648]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003cfc:	e001      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cfe:	7dfb      	ldrb	r3, [r7, #23]
 8003d00:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d047      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d16:	d030      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003d18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d1c:	d82a      	bhi.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003d1e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d22:	d02c      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003d24:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d28:	d824      	bhi.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003d2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d2e:	d018      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003d30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d34:	d81e      	bhi.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d003      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d3e:	d007      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003d40:	e018      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d42:	4b8f      	ldr	r3, [pc, #572]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d46:	4a8e      	ldr	r2, [pc, #568]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d4c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003d4e:	e017      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	3304      	adds	r3, #4
 8003d54:	2100      	movs	r1, #0
 8003d56:	4618      	mov	r0, r3
 8003d58:	f001 fe6e 	bl	8005a38 <RCCEx_PLL2_Config>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003d60:	e00e      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	3324      	adds	r3, #36	; 0x24
 8003d66:	2100      	movs	r1, #0
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f001 ff17 	bl	8005b9c <RCCEx_PLL3_Config>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003d72:	e005      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	75fb      	strb	r3, [r7, #23]
      break;
 8003d78:	e002      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003d7a:	bf00      	nop
 8003d7c:	e000      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003d7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d80:	7dfb      	ldrb	r3, [r7, #23]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d109      	bne.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003d86:	4b7e      	ldr	r3, [pc, #504]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d8a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d92:	497b      	ldr	r1, [pc, #492]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	650b      	str	r3, [r1, #80]	; 0x50
 8003d98:	e001      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d9a:	7dfb      	ldrb	r3, [r7, #23]
 8003d9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d049      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003db2:	d02e      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003db4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003db8:	d828      	bhi.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003dba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003dbe:	d02a      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003dc0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003dc4:	d822      	bhi.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003dc6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003dca:	d026      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003dcc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003dd0:	d81c      	bhi.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003dd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003dd6:	d010      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003dd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ddc:	d816      	bhi.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d01d      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003de6:	d111      	bne.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	3304      	adds	r3, #4
 8003dec:	2101      	movs	r1, #1
 8003dee:	4618      	mov	r0, r3
 8003df0:	f001 fe22 	bl	8005a38 <RCCEx_PLL2_Config>
 8003df4:	4603      	mov	r3, r0
 8003df6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003df8:	e012      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	3324      	adds	r3, #36	; 0x24
 8003dfe:	2101      	movs	r1, #1
 8003e00:	4618      	mov	r0, r3
 8003e02:	f001 fecb 	bl	8005b9c <RCCEx_PLL3_Config>
 8003e06:	4603      	mov	r3, r0
 8003e08:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003e0a:	e009      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	75fb      	strb	r3, [r7, #23]
      break;
 8003e10:	e006      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003e12:	bf00      	nop
 8003e14:	e004      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003e16:	bf00      	nop
 8003e18:	e002      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003e1a:	bf00      	nop
 8003e1c:	e000      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003e1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e20:	7dfb      	ldrb	r3, [r7, #23]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d109      	bne.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003e26:	4b56      	ldr	r3, [pc, #344]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e2a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e32:	4953      	ldr	r1, [pc, #332]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	650b      	str	r3, [r1, #80]	; 0x50
 8003e38:	e001      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e3a:	7dfb      	ldrb	r3, [r7, #23]
 8003e3c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d04b      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e54:	d02e      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8003e56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e5a:	d828      	bhi.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e60:	d02a      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e66:	d822      	bhi.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003e68:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e6c:	d026      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003e6e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e72:	d81c      	bhi.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003e74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e78:	d010      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003e7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e7e:	d816      	bhi.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d01d      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003e84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e88:	d111      	bne.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	3304      	adds	r3, #4
 8003e8e:	2101      	movs	r1, #1
 8003e90:	4618      	mov	r0, r3
 8003e92:	f001 fdd1 	bl	8005a38 <RCCEx_PLL2_Config>
 8003e96:	4603      	mov	r3, r0
 8003e98:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003e9a:	e012      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	3324      	adds	r3, #36	; 0x24
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f001 fe7a 	bl	8005b9c <RCCEx_PLL3_Config>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003eac:	e009      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	75fb      	strb	r3, [r7, #23]
      break;
 8003eb2:	e006      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003eb4:	bf00      	nop
 8003eb6:	e004      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003eb8:	bf00      	nop
 8003eba:	e002      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003ebc:	bf00      	nop
 8003ebe:	e000      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003ec0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ec2:	7dfb      	ldrb	r3, [r7, #23]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10a      	bne.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003ec8:	4b2d      	ldr	r3, [pc, #180]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ecc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ed6:	492a      	ldr	r1, [pc, #168]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	658b      	str	r3, [r1, #88]	; 0x58
 8003edc:	e001      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ede:	7dfb      	ldrb	r3, [r7, #23]
 8003ee0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d022      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    switch(PeriphClkInit->DsiClockSelection)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00e      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8003ef6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003efa:	d108      	bne.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x57a>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	3304      	adds	r3, #4
 8003f00:	2101      	movs	r1, #1
 8003f02:	4618      	mov	r0, r3
 8003f04:	f001 fd98 	bl	8005a38 <RCCEx_PLL2_Config>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 8003f0c:	e003      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x582>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	75fb      	strb	r3, [r7, #23]
      break;
 8003f12:	e000      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x582>
      break;
 8003f14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f16:	7dfb      	ldrb	r3, [r7, #23]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d109      	bne.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8003f1c:	4b18      	ldr	r3, [pc, #96]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f20:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f28:	4915      	ldr	r1, [pc, #84]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003f2e:	e001      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f30:	7dfb      	ldrb	r3, [r7, #23]
 8003f32:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d031      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x610>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f48:	d00e      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003f4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f4e:	d814      	bhi.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d017      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 8003f54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f58:	d10f      	bne.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f5a:	4b09      	ldr	r3, [pc, #36]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5e:	4a08      	ldr	r2, [pc, #32]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003f66:	e00e      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x5f2>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	3304      	adds	r3, #4
 8003f6c:	2101      	movs	r1, #1
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f001 fd62 	bl	8005a38 <RCCEx_PLL2_Config>
 8003f74:	4603      	mov	r3, r0
 8003f76:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003f78:	e005      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	75fb      	strb	r3, [r7, #23]
      break;
 8003f7e:	e002      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8003f80:	58024400 	.word	0x58024400
      break;
 8003f84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f86:	7dfb      	ldrb	r3, [r7, #23]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d109      	bne.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003f8c:	4bbc      	ldr	r3, [pc, #752]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f90:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f98:	49b9      	ldr	r1, [pc, #740]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	650b      	str	r3, [r1, #80]	; 0x50
 8003f9e:	e001      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa0:	7dfb      	ldrb	r3, [r7, #23]
 8003fa2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d032      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb4:	2b03      	cmp	r3, #3
 8003fb6:	d81b      	bhi.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8003fb8:	a201      	add	r2, pc, #4	; (adr r2, 8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 8003fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fbe:	bf00      	nop
 8003fc0:	08003ff7 	.word	0x08003ff7
 8003fc4:	08003fd1 	.word	0x08003fd1
 8003fc8:	08003fdf 	.word	0x08003fdf
 8003fcc:	08003ff7 	.word	0x08003ff7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fd0:	4bab      	ldr	r3, [pc, #684]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd4:	4aaa      	ldr	r2, [pc, #680]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003fd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003fdc:	e00c      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x664>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	3304      	adds	r3, #4
 8003fe2:	2102      	movs	r1, #2
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f001 fd27 	bl	8005a38 <RCCEx_PLL2_Config>
 8003fea:	4603      	mov	r3, r0
 8003fec:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003fee:	e003      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ff4:	e000      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      break;
 8003ff6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ff8:	7dfb      	ldrb	r3, [r7, #23]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d109      	bne.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003ffe:	4ba0      	ldr	r3, [pc, #640]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004002:	f023 0203 	bic.w	r2, r3, #3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400a:	499d      	ldr	r1, [pc, #628]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800400c:	4313      	orrs	r3, r2
 800400e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004010:	e001      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x682>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004012:	7dfb      	ldrb	r3, [r7, #23]
 8004014:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800401e:	2b00      	cmp	r3, #0
 8004020:	f000 8086 	beq.w	8004130 <HAL_RCCEx_PeriphCLKConfig+0x79c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004024:	4b97      	ldr	r3, [pc, #604]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a96      	ldr	r2, [pc, #600]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800402a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800402e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004030:	f7fd fb74 	bl	800171c <HAL_GetTick>
 8004034:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004036:	e009      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004038:	f7fd fb70 	bl	800171c <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b64      	cmp	r3, #100	; 0x64
 8004044:	d902      	bls.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      {
        ret = HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	75fb      	strb	r3, [r7, #23]
        break;
 800404a:	e005      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800404c:	4b8d      	ldr	r3, [pc, #564]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004054:	2b00      	cmp	r3, #0
 8004056:	d0ef      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      }
    }

    if(ret == HAL_OK)
 8004058:	7dfb      	ldrb	r3, [r7, #23]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d166      	bne.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800405e:	4b88      	ldr	r3, [pc, #544]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004060:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004068:	4053      	eors	r3, r2
 800406a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800406e:	2b00      	cmp	r3, #0
 8004070:	d013      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x706>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004072:	4b83      	ldr	r3, [pc, #524]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004076:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800407a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800407c:	4b80      	ldr	r3, [pc, #512]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800407e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004080:	4a7f      	ldr	r2, [pc, #508]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004082:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004086:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004088:	4b7d      	ldr	r3, [pc, #500]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800408a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408c:	4a7c      	ldr	r2, [pc, #496]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800408e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004092:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004094:	4a7a      	ldr	r2, [pc, #488]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80040a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040a4:	d115      	bne.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a6:	f7fd fb39 	bl	800171c <HAL_GetTick>
 80040aa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040ac:	e00b      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x732>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ae:	f7fd fb35 	bl	800171c <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040bc:	4293      	cmp	r3, r2
 80040be:	d902      	bls.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x732>
          {
            ret = HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	75fb      	strb	r3, [r7, #23]
            break;
 80040c4:	e005      	b.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040c6:	4b6e      	ldr	r3, [pc, #440]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80040c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d0ed      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x71a>
          }
        }
      }

      if(ret == HAL_OK)
 80040d2:	7dfb      	ldrb	r3, [r7, #23]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d126      	bne.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x792>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80040de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040e6:	d10d      	bne.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x770>
 80040e8:	4b65      	ldr	r3, [pc, #404]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80040f6:	0919      	lsrs	r1, r3, #4
 80040f8:	4b63      	ldr	r3, [pc, #396]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x8f4>)
 80040fa:	400b      	ands	r3, r1
 80040fc:	4960      	ldr	r1, [pc, #384]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	610b      	str	r3, [r1, #16]
 8004102:	e005      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x77c>
 8004104:	4b5e      	ldr	r3, [pc, #376]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	4a5d      	ldr	r2, [pc, #372]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800410a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800410e:	6113      	str	r3, [r2, #16]
 8004110:	4b5b      	ldr	r3, [pc, #364]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004112:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800411a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800411e:	4958      	ldr	r1, [pc, #352]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004120:	4313      	orrs	r3, r2
 8004122:	670b      	str	r3, [r1, #112]	; 0x70
 8004124:	e004      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004126:	7dfb      	ldrb	r3, [r7, #23]
 8004128:	75bb      	strb	r3, [r7, #22]
 800412a:	e001      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800412c:	7dfb      	ldrb	r3, [r7, #23]
 800412e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	2b00      	cmp	r3, #0
 800413a:	d07e      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x8a6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004140:	2b28      	cmp	r3, #40	; 0x28
 8004142:	d867      	bhi.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x880>
 8004144:	a201      	add	r2, pc, #4	; (adr r2, 800414c <HAL_RCCEx_PeriphCLKConfig+0x7b8>)
 8004146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414a:	bf00      	nop
 800414c:	0800421b 	.word	0x0800421b
 8004150:	08004215 	.word	0x08004215
 8004154:	08004215 	.word	0x08004215
 8004158:	08004215 	.word	0x08004215
 800415c:	08004215 	.word	0x08004215
 8004160:	08004215 	.word	0x08004215
 8004164:	08004215 	.word	0x08004215
 8004168:	08004215 	.word	0x08004215
 800416c:	080041f1 	.word	0x080041f1
 8004170:	08004215 	.word	0x08004215
 8004174:	08004215 	.word	0x08004215
 8004178:	08004215 	.word	0x08004215
 800417c:	08004215 	.word	0x08004215
 8004180:	08004215 	.word	0x08004215
 8004184:	08004215 	.word	0x08004215
 8004188:	08004215 	.word	0x08004215
 800418c:	08004203 	.word	0x08004203
 8004190:	08004215 	.word	0x08004215
 8004194:	08004215 	.word	0x08004215
 8004198:	08004215 	.word	0x08004215
 800419c:	08004215 	.word	0x08004215
 80041a0:	08004215 	.word	0x08004215
 80041a4:	08004215 	.word	0x08004215
 80041a8:	08004215 	.word	0x08004215
 80041ac:	0800421b 	.word	0x0800421b
 80041b0:	08004215 	.word	0x08004215
 80041b4:	08004215 	.word	0x08004215
 80041b8:	08004215 	.word	0x08004215
 80041bc:	08004215 	.word	0x08004215
 80041c0:	08004215 	.word	0x08004215
 80041c4:	08004215 	.word	0x08004215
 80041c8:	08004215 	.word	0x08004215
 80041cc:	0800421b 	.word	0x0800421b
 80041d0:	08004215 	.word	0x08004215
 80041d4:	08004215 	.word	0x08004215
 80041d8:	08004215 	.word	0x08004215
 80041dc:	08004215 	.word	0x08004215
 80041e0:	08004215 	.word	0x08004215
 80041e4:	08004215 	.word	0x08004215
 80041e8:	08004215 	.word	0x08004215
 80041ec:	0800421b 	.word	0x0800421b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	3304      	adds	r3, #4
 80041f4:	2101      	movs	r1, #1
 80041f6:	4618      	mov	r0, r3
 80041f8:	f001 fc1e 	bl	8005a38 <RCCEx_PLL2_Config>
 80041fc:	4603      	mov	r3, r0
 80041fe:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004200:	e00c      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x888>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	3324      	adds	r3, #36	; 0x24
 8004206:	2101      	movs	r1, #1
 8004208:	4618      	mov	r0, r3
 800420a:	f001 fcc7 	bl	8005b9c <RCCEx_PLL3_Config>
 800420e:	4603      	mov	r3, r0
 8004210:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004212:	e003      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x888>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	75fb      	strb	r3, [r7, #23]
      break;
 8004218:	e000      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x888>
      break;
 800421a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800421c:	7dfb      	ldrb	r3, [r7, #23]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d109      	bne.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004222:	4b17      	ldr	r3, [pc, #92]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004226:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800422e:	4914      	ldr	r1, [pc, #80]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004230:	4313      	orrs	r3, r2
 8004232:	654b      	str	r3, [r1, #84]	; 0x54
 8004234:	e001      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x8a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004236:	7dfb      	ldrb	r3, [r7, #23]
 8004238:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d03e      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800424a:	2b05      	cmp	r3, #5
 800424c:	d827      	bhi.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800424e:	a201      	add	r2, pc, #4	; (adr r2, 8004254 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004254:	080042a5 	.word	0x080042a5
 8004258:	0800426d 	.word	0x0800426d
 800425c:	0800428d 	.word	0x0800428d
 8004260:	080042a5 	.word	0x080042a5
 8004264:	080042a5 	.word	0x080042a5
 8004268:	080042a5 	.word	0x080042a5
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	3304      	adds	r3, #4
 8004270:	2101      	movs	r1, #1
 8004272:	4618      	mov	r0, r3
 8004274:	f001 fbe0 	bl	8005a38 <RCCEx_PLL2_Config>
 8004278:	4603      	mov	r3, r0
 800427a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800427c:	e013      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x912>
 800427e:	bf00      	nop
 8004280:	58024400 	.word	0x58024400
 8004284:	58024800 	.word	0x58024800
 8004288:	00ffffcf 	.word	0x00ffffcf

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	3324      	adds	r3, #36	; 0x24
 8004290:	2101      	movs	r1, #1
 8004292:	4618      	mov	r0, r3
 8004294:	f001 fc82 	bl	8005b9c <RCCEx_PLL3_Config>
 8004298:	4603      	mov	r3, r0
 800429a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800429c:	e003      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x912>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	75fb      	strb	r3, [r7, #23]
      break;
 80042a2:	e000      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 80042a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042a6:	7dfb      	ldrb	r3, [r7, #23]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d109      	bne.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x92c>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80042ac:	4b9f      	ldr	r3, [pc, #636]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80042ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b0:	f023 0207 	bic.w	r2, r3, #7
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042b8:	499c      	ldr	r1, [pc, #624]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	654b      	str	r3, [r1, #84]	; 0x54
 80042be:	e001      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c0:	7dfb      	ldrb	r3, [r7, #23]
 80042c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0304 	and.w	r3, r3, #4
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d039      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042d6:	2b05      	cmp	r3, #5
 80042d8:	d820      	bhi.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x988>
 80042da:	a201      	add	r2, pc, #4	; (adr r2, 80042e0 <HAL_RCCEx_PeriphCLKConfig+0x94c>)
 80042dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e0:	08004323 	.word	0x08004323
 80042e4:	080042f9 	.word	0x080042f9
 80042e8:	0800430b 	.word	0x0800430b
 80042ec:	08004323 	.word	0x08004323
 80042f0:	08004323 	.word	0x08004323
 80042f4:	08004323 	.word	0x08004323
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	3304      	adds	r3, #4
 80042fc:	2101      	movs	r1, #1
 80042fe:	4618      	mov	r0, r3
 8004300:	f001 fb9a 	bl	8005a38 <RCCEx_PLL2_Config>
 8004304:	4603      	mov	r3, r0
 8004306:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004308:	e00c      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x990>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	3324      	adds	r3, #36	; 0x24
 800430e:	2101      	movs	r1, #1
 8004310:	4618      	mov	r0, r3
 8004312:	f001 fc43 	bl	8005b9c <RCCEx_PLL3_Config>
 8004316:	4603      	mov	r3, r0
 8004318:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800431a:	e003      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x990>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	75fb      	strb	r3, [r7, #23]
      break;
 8004320:	e000      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x990>
      break;
 8004322:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004324:	7dfb      	ldrb	r3, [r7, #23]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10a      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800432a:	4b80      	ldr	r3, [pc, #512]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 800432c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800432e:	f023 0207 	bic.w	r2, r3, #7
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004338:	497c      	ldr	r1, [pc, #496]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 800433a:	4313      	orrs	r3, r2
 800433c:	658b      	str	r3, [r1, #88]	; 0x58
 800433e:	e001      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004340:	7dfb      	ldrb	r3, [r7, #23]
 8004342:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0320 	and.w	r3, r3, #32
 800434c:	2b00      	cmp	r3, #0
 800434e:	d04b      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xa54>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004356:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800435a:	d02e      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0xa26>
 800435c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004360:	d828      	bhi.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8004362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004366:	d02a      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 8004368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800436c:	d822      	bhi.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 800436e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004372:	d026      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 8004374:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004378:	d81c      	bhi.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 800437a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800437e:	d010      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8004380:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004384:	d816      	bhi.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8004386:	2b00      	cmp	r3, #0
 8004388:	d01d      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 800438a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800438e:	d111      	bne.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	3304      	adds	r3, #4
 8004394:	2100      	movs	r1, #0
 8004396:	4618      	mov	r0, r3
 8004398:	f001 fb4e 	bl	8005a38 <RCCEx_PLL2_Config>
 800439c:	4603      	mov	r3, r0
 800439e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80043a0:	e012      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xa34>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	3324      	adds	r3, #36	; 0x24
 80043a6:	2102      	movs	r1, #2
 80043a8:	4618      	mov	r0, r3
 80043aa:	f001 fbf7 	bl	8005b9c <RCCEx_PLL3_Config>
 80043ae:	4603      	mov	r3, r0
 80043b0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80043b2:	e009      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	75fb      	strb	r3, [r7, #23]
      break;
 80043b8:	e006      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 80043ba:	bf00      	nop
 80043bc:	e004      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 80043be:	bf00      	nop
 80043c0:	e002      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 80043c2:	bf00      	nop
 80043c4:	e000      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 80043c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043c8:	7dfb      	ldrb	r3, [r7, #23]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d10a      	bne.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043ce:	4b57      	ldr	r3, [pc, #348]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80043d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043dc:	4953      	ldr	r1, [pc, #332]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	654b      	str	r3, [r1, #84]	; 0x54
 80043e2:	e001      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xa54>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043e4:	7dfb      	ldrb	r3, [r7, #23]
 80043e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d04b      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0xaf8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043fa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80043fe:	d02e      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8004400:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004404:	d828      	bhi.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8004406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800440a:	d02a      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0xace>
 800440c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004410:	d822      	bhi.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8004412:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004416:	d026      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xad2>
 8004418:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800441c:	d81c      	bhi.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 800441e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004422:	d010      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004424:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004428:	d816      	bhi.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 800442a:	2b00      	cmp	r3, #0
 800442c:	d01d      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xad6>
 800442e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004432:	d111      	bne.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0xac4>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	3304      	adds	r3, #4
 8004438:	2100      	movs	r1, #0
 800443a:	4618      	mov	r0, r3
 800443c:	f001 fafc 	bl	8005a38 <RCCEx_PLL2_Config>
 8004440:	4603      	mov	r3, r0
 8004442:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004444:	e012      	b.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xad8>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	3324      	adds	r3, #36	; 0x24
 800444a:	2102      	movs	r1, #2
 800444c:	4618      	mov	r0, r3
 800444e:	f001 fba5 	bl	8005b9c <RCCEx_PLL3_Config>
 8004452:	4603      	mov	r3, r0
 8004454:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004456:	e009      	b.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xad8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	75fb      	strb	r3, [r7, #23]
      break;
 800445c:	e006      	b.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 800445e:	bf00      	nop
 8004460:	e004      	b.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8004462:	bf00      	nop
 8004464:	e002      	b.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8004466:	bf00      	nop
 8004468:	e000      	b.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 800446a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800446c:	7dfb      	ldrb	r3, [r7, #23]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10a      	bne.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004472:	4b2e      	ldr	r3, [pc, #184]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8004474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004476:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004480:	492a      	ldr	r1, [pc, #168]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8004482:	4313      	orrs	r3, r2
 8004484:	658b      	str	r3, [r1, #88]	; 0x58
 8004486:	e001      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0xaf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004488:	7dfb      	ldrb	r3, [r7, #23]
 800448a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004494:	2b00      	cmp	r3, #0
 8004496:	d04d      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xba0>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800449e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80044a2:	d02e      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 80044a4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80044a8:	d828      	bhi.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xb68>
 80044aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044ae:	d02a      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0xb72>
 80044b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044b4:	d822      	bhi.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xb68>
 80044b6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80044ba:	d026      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0xb76>
 80044bc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80044c0:	d81c      	bhi.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xb68>
 80044c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044c6:	d010      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0xb56>
 80044c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044cc:	d816      	bhi.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xb68>
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d01d      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0xb7a>
 80044d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044d6:	d111      	bne.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xb68>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	3304      	adds	r3, #4
 80044dc:	2100      	movs	r1, #0
 80044de:	4618      	mov	r0, r3
 80044e0:	f001 faaa 	bl	8005a38 <RCCEx_PLL2_Config>
 80044e4:	4603      	mov	r3, r0
 80044e6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80044e8:	e012      	b.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xb7c>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	3324      	adds	r3, #36	; 0x24
 80044ee:	2102      	movs	r1, #2
 80044f0:	4618      	mov	r0, r3
 80044f2:	f001 fb53 	bl	8005b9c <RCCEx_PLL3_Config>
 80044f6:	4603      	mov	r3, r0
 80044f8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80044fa:	e009      	b.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004500:	e006      	b.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8004502:	bf00      	nop
 8004504:	e004      	b.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8004506:	bf00      	nop
 8004508:	e002      	b.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 800450a:	bf00      	nop
 800450c:	e000      	b.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 800450e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004510:	7dfb      	ldrb	r3, [r7, #23]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10c      	bne.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004516:	4b05      	ldr	r3, [pc, #20]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8004518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800451a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004524:	4901      	ldr	r1, [pc, #4]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8004526:	4313      	orrs	r3, r2
 8004528:	658b      	str	r3, [r1, #88]	; 0x58
 800452a:	e003      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800452c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004530:	7dfb      	ldrb	r3, [r7, #23]
 8004532:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0308 	and.w	r3, r3, #8
 800453c:	2b00      	cmp	r3, #0
 800453e:	d01a      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800454a:	d10a      	bne.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	3324      	adds	r3, #36	; 0x24
 8004550:	2102      	movs	r1, #2
 8004552:	4618      	mov	r0, r3
 8004554:	f001 fb22 	bl	8005b9c <RCCEx_PLL3_Config>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0xbce>
        {
          status = HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004562:	4b8c      	ldr	r3, [pc, #560]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004566:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004570:	4988      	ldr	r1, [pc, #544]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004572:	4313      	orrs	r3, r2
 8004574:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0310 	and.w	r3, r3, #16
 800457e:	2b00      	cmp	r3, #0
 8004580:	d01a      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004588:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800458c:	d10a      	bne.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	3324      	adds	r3, #36	; 0x24
 8004592:	2102      	movs	r1, #2
 8004594:	4618      	mov	r0, r3
 8004596:	f001 fb01 	bl	8005b9c <RCCEx_PLL3_Config>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d001      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
      {
        status = HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80045a4:	4b7b      	ldr	r3, [pc, #492]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80045a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045b2:	4978      	ldr	r1, [pc, #480]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d034      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80045ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045ce:	d01d      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80045d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045d4:	d817      	bhi.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80045da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045de:	d009      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0xc60>
 80045e0:	e011      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	3304      	adds	r3, #4
 80045e6:	2100      	movs	r1, #0
 80045e8:	4618      	mov	r0, r3
 80045ea:	f001 fa25 	bl	8005a38 <RCCEx_PLL2_Config>
 80045ee:	4603      	mov	r3, r0
 80045f0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80045f2:	e00c      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	3324      	adds	r3, #36	; 0x24
 80045f8:	2102      	movs	r1, #2
 80045fa:	4618      	mov	r0, r3
 80045fc:	f001 face 	bl	8005b9c <RCCEx_PLL3_Config>
 8004600:	4603      	mov	r3, r0
 8004602:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004604:	e003      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	75fb      	strb	r3, [r7, #23]
      break;
 800460a:	e000      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      break;
 800460c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800460e:	7dfb      	ldrb	r3, [r7, #23]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d10a      	bne.n	800462a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004614:	4b5f      	ldr	r3, [pc, #380]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004618:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004622:	495c      	ldr	r1, [pc, #368]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004624:	4313      	orrs	r3, r2
 8004626:	658b      	str	r3, [r1, #88]	; 0x58
 8004628:	e001      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800462a:	7dfb      	ldrb	r3, [r7, #23]
 800462c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d033      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004640:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004644:	d01c      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 8004646:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800464a:	d816      	bhi.n	800467a <HAL_RCCEx_PeriphCLKConfig+0xce6>
 800464c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004650:	d003      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8004652:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004656:	d007      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 8004658:	e00f      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0xce6>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800465a:	4b4e      	ldr	r3, [pc, #312]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800465c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465e:	4a4d      	ldr	r2, [pc, #308]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004664:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004666:	e00c      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0xcee>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	3324      	adds	r3, #36	; 0x24
 800466c:	2101      	movs	r1, #1
 800466e:	4618      	mov	r0, r3
 8004670:	f001 fa94 	bl	8005b9c <RCCEx_PLL3_Config>
 8004674:	4603      	mov	r3, r0
 8004676:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004678:	e003      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0xcee>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	75fb      	strb	r3, [r7, #23]
      break;
 800467e:	e000      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0xcee>
      break;
 8004680:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004682:	7dfb      	ldrb	r3, [r7, #23]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10a      	bne.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xd0a>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004688:	4b42      	ldr	r3, [pc, #264]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800468a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800468c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004696:	493f      	ldr	r1, [pc, #252]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004698:	4313      	orrs	r3, r2
 800469a:	654b      	str	r3, [r1, #84]	; 0x54
 800469c:	e001      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800469e:	7dfb      	ldrb	r3, [r7, #23]
 80046a0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d029      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0xd2a>
 80046b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046ba:	d007      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0xd38>
 80046bc:	e00f      	b.n	80046de <HAL_RCCEx_PeriphCLKConfig+0xd4a>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046be:	4b35      	ldr	r3, [pc, #212]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80046c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c2:	4a34      	ldr	r2, [pc, #208]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80046c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80046ca:	e00b      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	3304      	adds	r3, #4
 80046d0:	2102      	movs	r1, #2
 80046d2:	4618      	mov	r0, r3
 80046d4:	f001 f9b0 	bl	8005a38 <RCCEx_PLL2_Config>
 80046d8:	4603      	mov	r3, r0
 80046da:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80046dc:	e002      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    default:
      ret = HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	75fb      	strb	r3, [r7, #23]
      break;
 80046e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046e4:	7dfb      	ldrb	r3, [r7, #23]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d109      	bne.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80046ea:	4b2a      	ldr	r3, [pc, #168]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80046ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046f6:	4927      	ldr	r1, [pc, #156]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	64cb      	str	r3, [r1, #76]	; 0x4c
 80046fc:	e001      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046fe:	7dfb      	ldrb	r3, [r7, #23]
 8004700:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00a      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0xd90>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	3324      	adds	r3, #36	; 0x24
 8004712:	2102      	movs	r1, #2
 8004714:	4618      	mov	r0, r3
 8004716:	f001 fa41 	bl	8005b9c <RCCEx_PLL3_Config>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d001      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0xd90>
    {
      status=HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d035      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0xe08>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004736:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800473a:	d017      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 800473c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004740:	d811      	bhi.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004742:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004746:	d013      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xddc>
 8004748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800474c:	d80b      	bhi.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800474e:	2b00      	cmp	r3, #0
 8004750:	d010      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0xde0>
 8004752:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004756:	d106      	bne.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004758:	4b0e      	ldr	r3, [pc, #56]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800475a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475c:	4a0d      	ldr	r2, [pc, #52]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800475e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004762:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004764:	e007      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	75fb      	strb	r3, [r7, #23]
      break;
 800476a:	e004      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 800476c:	bf00      	nop
 800476e:	e002      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8004770:	bf00      	nop
 8004772:	e000      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8004774:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004776:	7dfb      	ldrb	r3, [r7, #23]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10d      	bne.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0xe04>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800477c:	4b05      	ldr	r3, [pc, #20]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800477e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004780:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800478a:	4902      	ldr	r1, [pc, #8]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800478c:	4313      	orrs	r3, r2
 800478e:	654b      	str	r3, [r1, #84]	; 0x54
 8004790:	e004      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0xe08>
 8004792:	bf00      	nop
 8004794:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004798:	7dfb      	ldrb	r3, [r7, #23]
 800479a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d008      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80047a8:	4b31      	ldr	r3, [pc, #196]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80047aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047b4:	492e      	ldr	r1, [pc, #184]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d009      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0xe46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80047c6:	4b2a      	ldr	r3, [pc, #168]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80047d4:	4926      	ldr	r1, [pc, #152]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d008      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xe64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047e6:	4b22      	ldr	r3, [pc, #136]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80047e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ea:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047f2:	491f      	ldr	r1, [pc, #124]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00d      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0xe8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004804:	4b1a      	ldr	r3, [pc, #104]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	4a19      	ldr	r2, [pc, #100]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800480a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800480e:	6113      	str	r3, [r2, #16]
 8004810:	4b17      	ldr	r3, [pc, #92]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004812:	691a      	ldr	r2, [r3, #16]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800481a:	4915      	ldr	r1, [pc, #84]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800481c:	4313      	orrs	r3, r2
 800481e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	da08      	bge.n	800483a <HAL_RCCEx_PeriphCLKConfig+0xea6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004828:	4b11      	ldr	r3, [pc, #68]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800482a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800482c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004834:	490e      	ldr	r1, [pc, #56]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004836:	4313      	orrs	r3, r2
 8004838:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d009      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0xec6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004846:	4b0a      	ldr	r3, [pc, #40]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800484a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004854:	4906      	ldr	r1, [pc, #24]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004856:	4313      	orrs	r3, r2
 8004858:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800485a:	7dbb      	ldrb	r3, [r7, #22]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d101      	bne.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0xed0>
  {
    return HAL_OK;
 8004860:	2300      	movs	r3, #0
 8004862:	e000      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  }
  return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
}
 8004866:	4618      	mov	r0, r3
 8004868:	3718      	adds	r7, #24
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	58024400 	.word	0x58024400

08004874 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b090      	sub	sp, #64	; 0x40
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004882:	f040 8095 	bne.w	80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8004886:	4bae      	ldr	r3, [pc, #696]	; (8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800488a:	f003 0307 	and.w	r3, r3, #7
 800488e:	633b      	str	r3, [r7, #48]	; 0x30
 8004890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004892:	2b04      	cmp	r3, #4
 8004894:	f200 8088 	bhi.w	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8004898:	a201      	add	r2, pc, #4	; (adr r2, 80048a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800489a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800489e:	bf00      	nop
 80048a0:	080048b5 	.word	0x080048b5
 80048a4:	080048dd 	.word	0x080048dd
 80048a8:	08004905 	.word	0x08004905
 80048ac:	080049a1 	.word	0x080049a1
 80048b0:	0800492d 	.word	0x0800492d

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80048b4:	4ba2      	ldr	r3, [pc, #648]	; (8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048c0:	d108      	bne.n	80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80048c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048c6:	4618      	mov	r0, r3
 80048c8:	f000 ff64 	bl	8005794 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80048cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80048d0:	f000 bc95 	b.w	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80048d4:	2300      	movs	r3, #0
 80048d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80048d8:	f000 bc91 	b.w	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80048dc:	4b98      	ldr	r3, [pc, #608]	; (8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048e8:	d108      	bne.n	80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80048ea:	f107 0318 	add.w	r3, r7, #24
 80048ee:	4618      	mov	r0, r3
 80048f0:	f000 fca8 	bl	8005244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80048f8:	f000 bc81 	b.w	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80048fc:	2300      	movs	r3, #0
 80048fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004900:	f000 bc7d 	b.w	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004904:	4b8e      	ldr	r3, [pc, #568]	; (8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800490c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004910:	d108      	bne.n	8004924 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004912:	f107 030c 	add.w	r3, r7, #12
 8004916:	4618      	mov	r0, r3
 8004918:	f000 fde8 	bl	80054ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004920:	f000 bc6d 	b.w	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004924:	2300      	movs	r3, #0
 8004926:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004928:	f000 bc69 	b.w	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800492c:	4b84      	ldr	r3, [pc, #528]	; (8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800492e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004930:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004934:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004936:	4b82      	ldr	r3, [pc, #520]	; (8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0304 	and.w	r3, r3, #4
 800493e:	2b04      	cmp	r3, #4
 8004940:	d10c      	bne.n	800495c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8004942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004944:	2b00      	cmp	r3, #0
 8004946:	d109      	bne.n	800495c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004948:	4b7d      	ldr	r3, [pc, #500]	; (8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	08db      	lsrs	r3, r3, #3
 800494e:	f003 0303 	and.w	r3, r3, #3
 8004952:	4a7c      	ldr	r2, [pc, #496]	; (8004b44 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8004954:	fa22 f303 	lsr.w	r3, r2, r3
 8004958:	63fb      	str	r3, [r7, #60]	; 0x3c
 800495a:	e01f      	b.n	800499c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800495c:	4b78      	ldr	r3, [pc, #480]	; (8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004964:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004968:	d106      	bne.n	8004978 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800496a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800496c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004970:	d102      	bne.n	8004978 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004972:	4b75      	ldr	r3, [pc, #468]	; (8004b48 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004974:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004976:	e011      	b.n	800499c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004978:	4b71      	ldr	r3, [pc, #452]	; (8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004980:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004984:	d106      	bne.n	8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8004986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004988:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800498c:	d102      	bne.n	8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800498e:	4b6f      	ldr	r3, [pc, #444]	; (8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004990:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004992:	e003      	b.n	800499c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004994:	2300      	movs	r3, #0
 8004996:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004998:	f000 bc31 	b.w	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800499c:	f000 bc2f 	b.w	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80049a0:	4b6b      	ldr	r3, [pc, #428]	; (8004b50 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80049a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80049a4:	f000 bc2b 	b.w	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80049a8:	2300      	movs	r3, #0
 80049aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80049ac:	f000 bc27 	b.w	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049b6:	f040 8095 	bne.w	8004ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80049ba:	4b61      	ldr	r3, [pc, #388]	; (8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80049bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049be:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80049c2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80049c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049ca:	d04d      	beq.n	8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 80049cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049d2:	f200 8084 	bhi.w	8004ade <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80049d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d8:	2bc0      	cmp	r3, #192	; 0xc0
 80049da:	d07d      	beq.n	8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80049dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049de:	2bc0      	cmp	r3, #192	; 0xc0
 80049e0:	d87d      	bhi.n	8004ade <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80049e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e4:	2b80      	cmp	r3, #128	; 0x80
 80049e6:	d02d      	beq.n	8004a44 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80049e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ea:	2b80      	cmp	r3, #128	; 0x80
 80049ec:	d877      	bhi.n	8004ade <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80049ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d003      	beq.n	80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80049f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f6:	2b40      	cmp	r3, #64	; 0x40
 80049f8:	d012      	beq.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80049fa:	e070      	b.n	8004ade <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80049fc:	4b50      	ldr	r3, [pc, #320]	; (8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a08:	d107      	bne.n	8004a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f000 fec0 	bl	8005794 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a16:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004a18:	e3f1      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a1e:	e3ee      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004a20:	4b47      	ldr	r3, [pc, #284]	; (8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a2c:	d107      	bne.n	8004a3e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a2e:	f107 0318 	add.w	r3, r7, #24
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 fc06 	bl	8005244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004a3c:	e3df      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a42:	e3dc      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004a44:	4b3e      	ldr	r3, [pc, #248]	; (8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a50:	d107      	bne.n	8004a62 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a52:	f107 030c 	add.w	r3, r7, #12
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 fd48 	bl	80054ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004a60:	e3cd      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004a62:	2300      	movs	r3, #0
 8004a64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a66:	e3ca      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004a68:	4b35      	ldr	r3, [pc, #212]	; (8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a70:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004a72:	4b33      	ldr	r3, [pc, #204]	; (8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0304 	and.w	r3, r3, #4
 8004a7a:	2b04      	cmp	r3, #4
 8004a7c:	d10c      	bne.n	8004a98 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8004a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d109      	bne.n	8004a98 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a84:	4b2e      	ldr	r3, [pc, #184]	; (8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	08db      	lsrs	r3, r3, #3
 8004a8a:	f003 0303 	and.w	r3, r3, #3
 8004a8e:	4a2d      	ldr	r2, [pc, #180]	; (8004b44 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8004a90:	fa22 f303 	lsr.w	r3, r2, r3
 8004a94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a96:	e01e      	b.n	8004ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004a98:	4b29      	ldr	r3, [pc, #164]	; (8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aa4:	d106      	bne.n	8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8004aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aa8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004aac:	d102      	bne.n	8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004aae:	4b26      	ldr	r3, [pc, #152]	; (8004b48 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ab2:	e010      	b.n	8004ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004ab4:	4b22      	ldr	r3, [pc, #136]	; (8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004abc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ac0:	d106      	bne.n	8004ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8004ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ac4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ac8:	d102      	bne.n	8004ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004aca:	4b20      	ldr	r3, [pc, #128]	; (8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004acc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ace:	e002      	b.n	8004ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004ad4:	e393      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004ad6:	e392      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004ad8:	4b1d      	ldr	r3, [pc, #116]	; (8004b50 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004ada:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004adc:	e38f      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ae2:	e38c      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aea:	f040 80a7 	bne.w	8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8004aee:	4b14      	ldr	r3, [pc, #80]	; (8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004af2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8004af6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004afa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004afe:	d05f      	beq.n	8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8004b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b06:	f200 8096 	bhi.w	8004c36 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8004b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004b10:	f000 808e 	beq.w	8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8004b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b16:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004b1a:	f200 808c 	bhi.w	8004c36 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8004b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b24:	d03a      	beq.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8004b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b2c:	f200 8083 	bhi.w	8004c36 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8004b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00e      	beq.n	8004b54 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8004b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b3c:	d01c      	beq.n	8004b78 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8004b3e:	e07a      	b.n	8004c36 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8004b40:	58024400 	.word	0x58024400
 8004b44:	03d09000 	.word	0x03d09000
 8004b48:	003d0900 	.word	0x003d0900
 8004b4c:	017d7840 	.word	0x017d7840
 8004b50:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004b54:	4baa      	ldr	r3, [pc, #680]	; (8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b60:	d107      	bne.n	8004b72 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004b62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b66:	4618      	mov	r0, r3
 8004b68:	f000 fe14 	bl	8005794 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004b70:	e345      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004b72:	2300      	movs	r3, #0
 8004b74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b76:	e342      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004b78:	4ba1      	ldr	r3, [pc, #644]	; (8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b84:	d107      	bne.n	8004b96 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b86:	f107 0318 	add.w	r3, r7, #24
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f000 fb5a 	bl	8005244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004b94:	e333      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004b96:	2300      	movs	r3, #0
 8004b98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b9a:	e330      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004b9c:	4b98      	ldr	r3, [pc, #608]	; (8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ba4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ba8:	d107      	bne.n	8004bba <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004baa:	f107 030c 	add.w	r3, r7, #12
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 fc9c 	bl	80054ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004bb8:	e321      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004bbe:	e31e      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004bc0:	4b8f      	ldr	r3, [pc, #572]	; (8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bc4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004bc8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004bca:	4b8d      	ldr	r3, [pc, #564]	; (8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0304 	and.w	r3, r3, #4
 8004bd2:	2b04      	cmp	r3, #4
 8004bd4:	d10c      	bne.n	8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8004bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d109      	bne.n	8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004bdc:	4b88      	ldr	r3, [pc, #544]	; (8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	08db      	lsrs	r3, r3, #3
 8004be2:	f003 0303 	and.w	r3, r3, #3
 8004be6:	4a87      	ldr	r2, [pc, #540]	; (8004e04 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004be8:	fa22 f303 	lsr.w	r3, r2, r3
 8004bec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bee:	e01e      	b.n	8004c2e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004bf0:	4b83      	ldr	r3, [pc, #524]	; (8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bfc:	d106      	bne.n	8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8004bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c04:	d102      	bne.n	8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004c06:	4b80      	ldr	r3, [pc, #512]	; (8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004c08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c0a:	e010      	b.n	8004c2e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004c0c:	4b7c      	ldr	r3, [pc, #496]	; (8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c18:	d106      	bne.n	8004c28 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8004c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c20:	d102      	bne.n	8004c28 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004c22:	4b7a      	ldr	r3, [pc, #488]	; (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004c24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c26:	e002      	b.n	8004c2e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004c2c:	e2e7      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004c2e:	e2e6      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004c30:	4b77      	ldr	r3, [pc, #476]	; (8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004c32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c34:	e2e3      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8004c36:	2300      	movs	r3, #0
 8004c38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c3a:	e2e0      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c42:	f040 809c 	bne.w	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8004c46:	4b6e      	ldr	r3, [pc, #440]	; (8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c4a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004c4e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c56:	d054      	beq.n	8004d02 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8004c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c5e:	f200 808b 	bhi.w	8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8004c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c64:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004c68:	f000 8083 	beq.w	8004d72 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8004c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004c72:	f200 8081 	bhi.w	8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8004c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c7c:	d02f      	beq.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8004c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c84:	d878      	bhi.n	8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8004c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d004      	beq.n	8004c96 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8004c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c92:	d012      	beq.n	8004cba <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8004c94:	e070      	b.n	8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004c96:	4b5a      	ldr	r3, [pc, #360]	; (8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ca2:	d107      	bne.n	8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ca4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f000 fd73 	bl	8005794 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004cb2:	e2a4      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cb8:	e2a1      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004cba:	4b51      	ldr	r3, [pc, #324]	; (8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cc6:	d107      	bne.n	8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004cc8:	f107 0318 	add.w	r3, r7, #24
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f000 fab9 	bl	8005244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8004cd6:	e292      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cdc:	e28f      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004cde:	4b48      	ldr	r3, [pc, #288]	; (8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ce6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cea:	d107      	bne.n	8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004cec:	f107 030c 	add.w	r3, r7, #12
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f000 fbfb 	bl	80054ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004cfa:	e280      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d00:	e27d      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004d02:	4b3f      	ldr	r3, [pc, #252]	; (8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d0a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004d0c:	4b3c      	ldr	r3, [pc, #240]	; (8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0304 	and.w	r3, r3, #4
 8004d14:	2b04      	cmp	r3, #4
 8004d16:	d10c      	bne.n	8004d32 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8004d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d109      	bne.n	8004d32 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d1e:	4b38      	ldr	r3, [pc, #224]	; (8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	08db      	lsrs	r3, r3, #3
 8004d24:	f003 0303 	and.w	r3, r3, #3
 8004d28:	4a36      	ldr	r2, [pc, #216]	; (8004e04 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d30:	e01e      	b.n	8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004d32:	4b33      	ldr	r3, [pc, #204]	; (8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d3e:	d106      	bne.n	8004d4e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8004d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d46:	d102      	bne.n	8004d4e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004d48:	4b2f      	ldr	r3, [pc, #188]	; (8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d4c:	e010      	b.n	8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004d4e:	4b2c      	ldr	r3, [pc, #176]	; (8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d5a:	d106      	bne.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8004d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d62:	d102      	bne.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004d64:	4b29      	ldr	r3, [pc, #164]	; (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004d66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d68:	e002      	b.n	8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004d6e:	e246      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004d70:	e245      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004d72:	4b27      	ldr	r3, [pc, #156]	; (8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004d74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d76:	e242      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d7c:	e23f      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d84:	f040 80a8 	bne.w	8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8004d88:	4b1d      	ldr	r3, [pc, #116]	; (8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004d8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d8c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004d90:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d98:	d060      	beq.n	8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8004d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004da0:	f200 8097 	bhi.w	8004ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8004da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004daa:	f000 808f 	beq.w	8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8004dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004db4:	f200 808d 	bhi.w	8004ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8004db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dbe:	d03b      	beq.n	8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8004dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dc6:	f200 8084 	bhi.w	8004ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8004dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d004      	beq.n	8004dda <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8004dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dd6:	d01d      	beq.n	8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8004dd8:	e07b      	b.n	8004ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004dda:	4b09      	ldr	r3, [pc, #36]	; (8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004de2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004de6:	d107      	bne.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dec:	4618      	mov	r0, r3
 8004dee:	f000 fcd1 	bl	8005794 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004df6:	e202      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004dfc:	e1ff      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004dfe:	bf00      	nop
 8004e00:	58024400 	.word	0x58024400
 8004e04:	03d09000 	.word	0x03d09000
 8004e08:	003d0900 	.word	0x003d0900
 8004e0c:	017d7840 	.word	0x017d7840
 8004e10:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004e14:	4ba3      	ldr	r3, [pc, #652]	; (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e20:	d107      	bne.n	8004e32 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e22:	f107 0318 	add.w	r3, r7, #24
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 fa0c 	bl	8005244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004e30:	e1e5      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004e32:	2300      	movs	r3, #0
 8004e34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e36:	e1e2      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004e38:	4b9a      	ldr	r3, [pc, #616]	; (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e44:	d107      	bne.n	8004e56 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e46:	f107 030c 	add.w	r3, r7, #12
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f000 fb4e 	bl	80054ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004e54:	e1d3      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004e56:	2300      	movs	r3, #0
 8004e58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e5a:	e1d0      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004e5c:	4b91      	ldr	r3, [pc, #580]	; (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e64:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004e66:	4b8f      	ldr	r3, [pc, #572]	; (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0304 	and.w	r3, r3, #4
 8004e6e:	2b04      	cmp	r3, #4
 8004e70:	d10c      	bne.n	8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8004e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d109      	bne.n	8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e78:	4b8a      	ldr	r3, [pc, #552]	; (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	08db      	lsrs	r3, r3, #3
 8004e7e:	f003 0303 	and.w	r3, r3, #3
 8004e82:	4a89      	ldr	r2, [pc, #548]	; (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004e84:	fa22 f303 	lsr.w	r3, r2, r3
 8004e88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e8a:	e01e      	b.n	8004eca <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004e8c:	4b85      	ldr	r3, [pc, #532]	; (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e98:	d106      	bne.n	8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8004e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ea0:	d102      	bne.n	8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004ea2:	4b82      	ldr	r3, [pc, #520]	; (80050ac <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ea6:	e010      	b.n	8004eca <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004ea8:	4b7e      	ldr	r3, [pc, #504]	; (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004eb4:	d106      	bne.n	8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8004eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ebc:	d102      	bne.n	8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004ebe:	4b7c      	ldr	r3, [pc, #496]	; (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ec2:	e002      	b.n	8004eca <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004ec8:	e199      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004eca:	e198      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004ecc:	4b79      	ldr	r3, [pc, #484]	; (80050b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004ece:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ed0:	e195      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ed6:	e192      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ede:	d173      	bne.n	8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8004ee0:	4b70      	ldr	r3, [pc, #448]	; (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ee8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ef0:	d02f      	beq.n	8004f52 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8004ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ef8:	d863      	bhi.n	8004fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8004efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d004      	beq.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8004f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f06:	d012      	beq.n	8004f2e <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8004f08:	e05b      	b.n	8004fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f0a:	4b66      	ldr	r3, [pc, #408]	; (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f16:	d107      	bne.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f18:	f107 0318 	add.w	r3, r7, #24
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f000 f991 	bl	8005244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004f26:	e16a      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f2c:	e167      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004f2e:	4b5d      	ldr	r3, [pc, #372]	; (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f3a:	d107      	bne.n	8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f3c:	f107 030c 	add.w	r3, r7, #12
 8004f40:	4618      	mov	r0, r3
 8004f42:	f000 fad3 	bl	80054ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004f4a:	e158      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f50:	e155      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004f52:	4b54      	ldr	r3, [pc, #336]	; (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f5a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004f5c:	4b51      	ldr	r3, [pc, #324]	; (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0304 	and.w	r3, r3, #4
 8004f64:	2b04      	cmp	r3, #4
 8004f66:	d10c      	bne.n	8004f82 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8004f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d109      	bne.n	8004f82 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004f6e:	4b4d      	ldr	r3, [pc, #308]	; (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	08db      	lsrs	r3, r3, #3
 8004f74:	f003 0303 	and.w	r3, r3, #3
 8004f78:	4a4b      	ldr	r2, [pc, #300]	; (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f80:	e01e      	b.n	8004fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004f82:	4b48      	ldr	r3, [pc, #288]	; (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f8e:	d106      	bne.n	8004f9e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8004f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f96:	d102      	bne.n	8004f9e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004f98:	4b44      	ldr	r3, [pc, #272]	; (80050ac <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f9c:	e010      	b.n	8004fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004f9e:	4b41      	ldr	r3, [pc, #260]	; (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fa6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004faa:	d106      	bne.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8004fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fb2:	d102      	bne.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004fb4:	4b3e      	ldr	r3, [pc, #248]	; (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fb8:	e002      	b.n	8004fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004fbe:	e11e      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004fc0:	e11d      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fc6:	e11a      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fce:	d133      	bne.n	8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8004fd0:	4b34      	ldr	r3, [pc, #208]	; (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fd8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d004      	beq.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8004fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fe6:	d012      	beq.n	800500e <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8004fe8:	e023      	b.n	8005032 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004fea:	4b2e      	ldr	r3, [pc, #184]	; (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ff2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ff6:	d107      	bne.n	8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ff8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f000 fbc9 	bl	8005794 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005004:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005006:	e0fa      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005008:	2300      	movs	r3, #0
 800500a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800500c:	e0f7      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800500e:	4b25      	ldr	r3, [pc, #148]	; (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005016:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800501a:	d107      	bne.n	800502c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800501c:	f107 0318 	add.w	r3, r7, #24
 8005020:	4618      	mov	r0, r3
 8005022:	f000 f90f 	bl	8005244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005026:	6a3b      	ldr	r3, [r7, #32]
 8005028:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800502a:	e0e8      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800502c:	2300      	movs	r3, #0
 800502e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005030:	e0e5      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8005032:	2300      	movs	r3, #0
 8005034:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005036:	e0e2      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800503e:	f040 808f 	bne.w	8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8005042:	4b18      	ldr	r3, [pc, #96]	; (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005046:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800504a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800504c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800504e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005052:	d075      	beq.n	8005140 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8005054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005056:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800505a:	d87e      	bhi.n	800515a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800505c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005062:	d060      	beq.n	8005126 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8005064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800506a:	d876      	bhi.n	800515a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800506c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800506e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005072:	d045      	beq.n	8005100 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8005074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005076:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800507a:	d86e      	bhi.n	800515a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800507c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800507e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005082:	d02b      	beq.n	80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8005084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005086:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800508a:	d866      	bhi.n	800515a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800508c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508e:	2b00      	cmp	r3, #0
 8005090:	d004      	beq.n	800509c <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8005092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005094:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005098:	d00e      	beq.n	80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800509a:	e05e      	b.n	800515a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800509c:	f000 f8bc 	bl	8005218 <HAL_RCCEx_GetD3PCLK1Freq>
 80050a0:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80050a2:	e0ac      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80050a4:	58024400 	.word	0x58024400
 80050a8:	03d09000 	.word	0x03d09000
 80050ac:	003d0900 	.word	0x003d0900
 80050b0:	017d7840 	.word	0x017d7840
 80050b4:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80050b8:	4b53      	ldr	r3, [pc, #332]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050c4:	d107      	bne.n	80050d6 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050c6:	f107 0318 	add.w	r3, r7, #24
 80050ca:	4618      	mov	r0, r3
 80050cc:	f000 f8ba 	bl	8005244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80050d4:	e093      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80050d6:	2300      	movs	r3, #0
 80050d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050da:	e090      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80050dc:	4b4a      	ldr	r3, [pc, #296]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050e8:	d107      	bne.n	80050fa <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80050ea:	f107 030c 	add.w	r3, r7, #12
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 f9fc 	bl	80054ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80050f8:	e081      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80050fa:	2300      	movs	r3, #0
 80050fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050fe:	e07e      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005100:	4b41      	ldr	r3, [pc, #260]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	2b04      	cmp	r3, #4
 800510a:	d109      	bne.n	8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800510c:	4b3e      	ldr	r3, [pc, #248]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	08db      	lsrs	r3, r3, #3
 8005112:	f003 0303 	and.w	r3, r3, #3
 8005116:	4a3d      	ldr	r2, [pc, #244]	; (800520c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8005118:	fa22 f303 	lsr.w	r3, r2, r3
 800511c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800511e:	e06e      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005120:	2300      	movs	r3, #0
 8005122:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005124:	e06b      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005126:	4b38      	ldr	r3, [pc, #224]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800512e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005132:	d102      	bne.n	800513a <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8005134:	4b36      	ldr	r3, [pc, #216]	; (8005210 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005136:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005138:	e061      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800513a:	2300      	movs	r3, #0
 800513c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800513e:	e05e      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005140:	4b31      	ldr	r3, [pc, #196]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005148:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800514c:	d102      	bne.n	8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800514e:	4b31      	ldr	r3, [pc, #196]	; (8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005150:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005152:	e054      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005154:	2300      	movs	r3, #0
 8005156:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005158:	e051      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800515a:	2300      	movs	r3, #0
 800515c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800515e:	e04e      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005166:	d148      	bne.n	80051fa <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8005168:	4b27      	ldr	r3, [pc, #156]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800516a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800516c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005170:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005174:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005178:	d02a      	beq.n	80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800517a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800517c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005180:	d838      	bhi.n	80051f4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8005182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005184:	2b00      	cmp	r3, #0
 8005186:	d004      	beq.n	8005192 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8005188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800518a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800518e:	d00d      	beq.n	80051ac <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8005190:	e030      	b.n	80051f4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005192:	4b1d      	ldr	r3, [pc, #116]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800519a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800519e:	d102      	bne.n	80051a6 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 80051a0:	4b1c      	ldr	r3, [pc, #112]	; (8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80051a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80051a4:	e02b      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80051a6:	2300      	movs	r3, #0
 80051a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051aa:	e028      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80051ac:	4b16      	ldr	r3, [pc, #88]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051b8:	d107      	bne.n	80051ca <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80051ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 fae8 	bl	8005794 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80051c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80051c8:	e019      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80051ca:	2300      	movs	r3, #0
 80051cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051ce:	e016      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80051d0:	4b0d      	ldr	r3, [pc, #52]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051dc:	d107      	bne.n	80051ee <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051de:	f107 0318 	add.w	r3, r7, #24
 80051e2:	4618      	mov	r0, r3
 80051e4:	f000 f82e 	bl	8005244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80051ec:	e007      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80051ee:	2300      	movs	r3, #0
 80051f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051f2:	e004      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80051f4:	2300      	movs	r3, #0
 80051f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051f8:	e001      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 80051fa:	2300      	movs	r3, #0
 80051fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80051fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005200:	4618      	mov	r0, r3
 8005202:	3740      	adds	r7, #64	; 0x40
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	58024400 	.word	0x58024400
 800520c:	03d09000 	.word	0x03d09000
 8005210:	003d0900 	.word	0x003d0900
 8005214:	017d7840 	.word	0x017d7840

08005218 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800521c:	f7fe fb5e 	bl	80038dc <HAL_RCC_GetHCLKFreq>
 8005220:	4602      	mov	r2, r0
 8005222:	4b06      	ldr	r3, [pc, #24]	; (800523c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	091b      	lsrs	r3, r3, #4
 8005228:	f003 0307 	and.w	r3, r3, #7
 800522c:	4904      	ldr	r1, [pc, #16]	; (8005240 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800522e:	5ccb      	ldrb	r3, [r1, r3]
 8005230:	f003 031f 	and.w	r3, r3, #31
 8005234:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005238:	4618      	mov	r0, r3
 800523a:	bd80      	pop	{r7, pc}
 800523c:	58024400 	.word	0x58024400
 8005240:	0800df4c 	.word	0x0800df4c

08005244 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005244:	b480      	push	{r7}
 8005246:	b089      	sub	sp, #36	; 0x24
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800524c:	4ba1      	ldr	r3, [pc, #644]	; (80054d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800524e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005250:	f003 0303 	and.w	r3, r3, #3
 8005254:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005256:	4b9f      	ldr	r3, [pc, #636]	; (80054d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525a:	0b1b      	lsrs	r3, r3, #12
 800525c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005260:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005262:	4b9c      	ldr	r3, [pc, #624]	; (80054d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005266:	091b      	lsrs	r3, r3, #4
 8005268:	f003 0301 	and.w	r3, r3, #1
 800526c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800526e:	4b99      	ldr	r3, [pc, #612]	; (80054d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005272:	08db      	lsrs	r3, r3, #3
 8005274:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005278:	693a      	ldr	r2, [r7, #16]
 800527a:	fb02 f303 	mul.w	r3, r2, r3
 800527e:	ee07 3a90 	vmov	s15, r3
 8005282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005286:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	2b00      	cmp	r3, #0
 800528e:	f000 8111 	beq.w	80054b4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	2b02      	cmp	r3, #2
 8005296:	f000 8083 	beq.w	80053a0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	2b02      	cmp	r3, #2
 800529e:	f200 80a1 	bhi.w	80053e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d003      	beq.n	80052b0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d056      	beq.n	800535c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80052ae:	e099      	b.n	80053e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052b0:	4b88      	ldr	r3, [pc, #544]	; (80054d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0320 	and.w	r3, r3, #32
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d02d      	beq.n	8005318 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80052bc:	4b85      	ldr	r3, [pc, #532]	; (80054d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	08db      	lsrs	r3, r3, #3
 80052c2:	f003 0303 	and.w	r3, r3, #3
 80052c6:	4a84      	ldr	r2, [pc, #528]	; (80054d8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80052c8:	fa22 f303 	lsr.w	r3, r2, r3
 80052cc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	ee07 3a90 	vmov	s15, r3
 80052d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	ee07 3a90 	vmov	s15, r3
 80052de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052e6:	4b7b      	ldr	r3, [pc, #492]	; (80054d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ee:	ee07 3a90 	vmov	s15, r3
 80052f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80052fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 80054dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80052fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005306:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800530a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800530e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005312:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005316:	e087      	b.n	8005428 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	ee07 3a90 	vmov	s15, r3
 800531e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005322:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80054e0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800532a:	4b6a      	ldr	r3, [pc, #424]	; (80054d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800532c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005332:	ee07 3a90 	vmov	s15, r3
 8005336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800533a:	ed97 6a03 	vldr	s12, [r7, #12]
 800533e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80054dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800534a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800534e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005356:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800535a:	e065      	b.n	8005428 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	ee07 3a90 	vmov	s15, r3
 8005362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005366:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80054e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800536a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800536e:	4b59      	ldr	r3, [pc, #356]	; (80054d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005376:	ee07 3a90 	vmov	s15, r3
 800537a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800537e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005382:	eddf 5a56 	vldr	s11, [pc, #344]	; 80054dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800538a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800538e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800539a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800539e:	e043      	b.n	8005428 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	ee07 3a90 	vmov	s15, r3
 80053a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053aa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80054e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80053ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053b2:	4b48      	ldr	r3, [pc, #288]	; (80054d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ba:	ee07 3a90 	vmov	s15, r3
 80053be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80053c6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80054dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80053ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80053e2:	e021      	b.n	8005428 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	ee07 3a90 	vmov	s15, r3
 80053ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80054e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80053f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053f6:	4b37      	ldr	r3, [pc, #220]	; (80054d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053fe:	ee07 3a90 	vmov	s15, r3
 8005402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005406:	ed97 6a03 	vldr	s12, [r7, #12]
 800540a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80054dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800540e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005416:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800541a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800541e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005422:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005426:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005428:	4b2a      	ldr	r3, [pc, #168]	; (80054d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800542a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800542c:	0a5b      	lsrs	r3, r3, #9
 800542e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005432:	ee07 3a90 	vmov	s15, r3
 8005436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800543a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800543e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005442:	edd7 6a07 	vldr	s13, [r7, #28]
 8005446:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800544a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800544e:	ee17 2a90 	vmov	r2, s15
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005456:	4b1f      	ldr	r3, [pc, #124]	; (80054d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545a:	0c1b      	lsrs	r3, r3, #16
 800545c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005460:	ee07 3a90 	vmov	s15, r3
 8005464:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005468:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800546c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005470:	edd7 6a07 	vldr	s13, [r7, #28]
 8005474:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005478:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800547c:	ee17 2a90 	vmov	r2, s15
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005484:	4b13      	ldr	r3, [pc, #76]	; (80054d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005488:	0e1b      	lsrs	r3, r3, #24
 800548a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800548e:	ee07 3a90 	vmov	s15, r3
 8005492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005496:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800549a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800549e:	edd7 6a07 	vldr	s13, [r7, #28]
 80054a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054aa:	ee17 2a90 	vmov	r2, s15
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80054b2:	e008      	b.n	80054c6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	609a      	str	r2, [r3, #8]
}
 80054c6:	bf00      	nop
 80054c8:	3724      	adds	r7, #36	; 0x24
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	58024400 	.word	0x58024400
 80054d8:	03d09000 	.word	0x03d09000
 80054dc:	46000000 	.word	0x46000000
 80054e0:	4c742400 	.word	0x4c742400
 80054e4:	4a742400 	.word	0x4a742400
 80054e8:	4bbebc20 	.word	0x4bbebc20

080054ec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b089      	sub	sp, #36	; 0x24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80054f4:	4ba1      	ldr	r3, [pc, #644]	; (800577c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f8:	f003 0303 	and.w	r3, r3, #3
 80054fc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80054fe:	4b9f      	ldr	r3, [pc, #636]	; (800577c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005502:	0d1b      	lsrs	r3, r3, #20
 8005504:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005508:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800550a:	4b9c      	ldr	r3, [pc, #624]	; (800577c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800550c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550e:	0a1b      	lsrs	r3, r3, #8
 8005510:	f003 0301 	and.w	r3, r3, #1
 8005514:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005516:	4b99      	ldr	r3, [pc, #612]	; (800577c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800551a:	08db      	lsrs	r3, r3, #3
 800551c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	fb02 f303 	mul.w	r3, r2, r3
 8005526:	ee07 3a90 	vmov	s15, r3
 800552a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800552e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	2b00      	cmp	r3, #0
 8005536:	f000 8111 	beq.w	800575c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	2b02      	cmp	r3, #2
 800553e:	f000 8083 	beq.w	8005648 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	2b02      	cmp	r3, #2
 8005546:	f200 80a1 	bhi.w	800568c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d003      	beq.n	8005558 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d056      	beq.n	8005604 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005556:	e099      	b.n	800568c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005558:	4b88      	ldr	r3, [pc, #544]	; (800577c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0320 	and.w	r3, r3, #32
 8005560:	2b00      	cmp	r3, #0
 8005562:	d02d      	beq.n	80055c0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005564:	4b85      	ldr	r3, [pc, #532]	; (800577c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	08db      	lsrs	r3, r3, #3
 800556a:	f003 0303 	and.w	r3, r3, #3
 800556e:	4a84      	ldr	r2, [pc, #528]	; (8005780 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005570:	fa22 f303 	lsr.w	r3, r2, r3
 8005574:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	ee07 3a90 	vmov	s15, r3
 800557c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	ee07 3a90 	vmov	s15, r3
 8005586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800558a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800558e:	4b7b      	ldr	r3, [pc, #492]	; (800577c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005596:	ee07 3a90 	vmov	s15, r3
 800559a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800559e:	ed97 6a03 	vldr	s12, [r7, #12]
 80055a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005784 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80055a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055ba:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80055be:	e087      	b.n	80056d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	ee07 3a90 	vmov	s15, r3
 80055c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005788 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80055ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055d2:	4b6a      	ldr	r3, [pc, #424]	; (800577c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055da:	ee07 3a90 	vmov	s15, r3
 80055de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80055e6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005784 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80055ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005602:	e065      	b.n	80056d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	ee07 3a90 	vmov	s15, r3
 800560a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800560e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800578c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005616:	4b59      	ldr	r3, [pc, #356]	; (800577c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800561e:	ee07 3a90 	vmov	s15, r3
 8005622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005626:	ed97 6a03 	vldr	s12, [r7, #12]
 800562a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005784 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800562e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005636:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800563a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800563e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005642:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005646:	e043      	b.n	80056d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	ee07 3a90 	vmov	s15, r3
 800564e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005652:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005790 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800565a:	4b48      	ldr	r3, [pc, #288]	; (800577c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800565c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005662:	ee07 3a90 	vmov	s15, r3
 8005666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800566a:	ed97 6a03 	vldr	s12, [r7, #12]
 800566e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005784 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005672:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005676:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800567a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800567e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005686:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800568a:	e021      	b.n	80056d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	ee07 3a90 	vmov	s15, r3
 8005692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005696:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800578c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800569a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800569e:	4b37      	ldr	r3, [pc, #220]	; (800577c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056a6:	ee07 3a90 	vmov	s15, r3
 80056aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80056b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005784 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80056b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056ce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80056d0:	4b2a      	ldr	r3, [pc, #168]	; (800577c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d4:	0a5b      	lsrs	r3, r3, #9
 80056d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056da:	ee07 3a90 	vmov	s15, r3
 80056de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80056ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056f6:	ee17 2a90 	vmov	r2, s15
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80056fe:	4b1f      	ldr	r3, [pc, #124]	; (800577c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005702:	0c1b      	lsrs	r3, r3, #16
 8005704:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005708:	ee07 3a90 	vmov	s15, r3
 800570c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005710:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005714:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005718:	edd7 6a07 	vldr	s13, [r7, #28]
 800571c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005720:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005724:	ee17 2a90 	vmov	r2, s15
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800572c:	4b13      	ldr	r3, [pc, #76]	; (800577c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800572e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005730:	0e1b      	lsrs	r3, r3, #24
 8005732:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005736:	ee07 3a90 	vmov	s15, r3
 800573a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800573e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005742:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005746:	edd7 6a07 	vldr	s13, [r7, #28]
 800574a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800574e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005752:	ee17 2a90 	vmov	r2, s15
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800575a:	e008      	b.n	800576e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	609a      	str	r2, [r3, #8]
}
 800576e:	bf00      	nop
 8005770:	3724      	adds	r7, #36	; 0x24
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop
 800577c:	58024400 	.word	0x58024400
 8005780:	03d09000 	.word	0x03d09000
 8005784:	46000000 	.word	0x46000000
 8005788:	4c742400 	.word	0x4c742400
 800578c:	4a742400 	.word	0x4a742400
 8005790:	4bbebc20 	.word	0x4bbebc20

08005794 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8005794:	b480      	push	{r7}
 8005796:	b089      	sub	sp, #36	; 0x24
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800579c:	4ba0      	ldr	r3, [pc, #640]	; (8005a20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800579e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a0:	f003 0303 	and.w	r3, r3, #3
 80057a4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80057a6:	4b9e      	ldr	r3, [pc, #632]	; (8005a20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80057a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057aa:	091b      	lsrs	r3, r3, #4
 80057ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057b0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80057b2:	4b9b      	ldr	r3, [pc, #620]	; (8005a20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80057b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80057bc:	4b98      	ldr	r3, [pc, #608]	; (8005a20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80057be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057c0:	08db      	lsrs	r3, r3, #3
 80057c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	fb02 f303 	mul.w	r3, r2, r3
 80057cc:	ee07 3a90 	vmov	s15, r3
 80057d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057d4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	f000 8111 	beq.w	8005a02 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	f000 8083 	beq.w	80058ee <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	f200 80a1 	bhi.w	8005932 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d003      	beq.n	80057fe <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d056      	beq.n	80058aa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80057fc:	e099      	b.n	8005932 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057fe:	4b88      	ldr	r3, [pc, #544]	; (8005a20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0320 	and.w	r3, r3, #32
 8005806:	2b00      	cmp	r3, #0
 8005808:	d02d      	beq.n	8005866 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800580a:	4b85      	ldr	r3, [pc, #532]	; (8005a20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	08db      	lsrs	r3, r3, #3
 8005810:	f003 0303 	and.w	r3, r3, #3
 8005814:	4a83      	ldr	r2, [pc, #524]	; (8005a24 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005816:	fa22 f303 	lsr.w	r3, r2, r3
 800581a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	ee07 3a90 	vmov	s15, r3
 8005822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	ee07 3a90 	vmov	s15, r3
 800582c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005830:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005834:	4b7a      	ldr	r3, [pc, #488]	; (8005a20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800583c:	ee07 3a90 	vmov	s15, r3
 8005840:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005844:	ed97 6a03 	vldr	s12, [r7, #12]
 8005848:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005a28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800584c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005850:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005854:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005858:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800585c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005860:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005864:	e087      	b.n	8005976 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	ee07 3a90 	vmov	s15, r3
 800586c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005870:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005a2c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005874:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005878:	4b69      	ldr	r3, [pc, #420]	; (8005a20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800587a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800587c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005880:	ee07 3a90 	vmov	s15, r3
 8005884:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005888:	ed97 6a03 	vldr	s12, [r7, #12]
 800588c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005a28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005890:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005894:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005898:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800589c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058a8:	e065      	b.n	8005976 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	ee07 3a90 	vmov	s15, r3
 80058b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058b4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005a30 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80058b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058bc:	4b58      	ldr	r3, [pc, #352]	; (8005a20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80058be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058c4:	ee07 3a90 	vmov	s15, r3
 80058c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80058d0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005a28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80058d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058ec:	e043      	b.n	8005976 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	ee07 3a90 	vmov	s15, r3
 80058f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058f8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005a34 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80058fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005900:	4b47      	ldr	r3, [pc, #284]	; (8005a20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005908:	ee07 3a90 	vmov	s15, r3
 800590c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005910:	ed97 6a03 	vldr	s12, [r7, #12]
 8005914:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005a28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005918:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800591c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005920:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005924:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005928:	ee67 7a27 	vmul.f32	s15, s14, s15
 800592c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005930:	e021      	b.n	8005976 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	ee07 3a90 	vmov	s15, r3
 8005938:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800593c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8005a2c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005940:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005944:	4b36      	ldr	r3, [pc, #216]	; (8005a20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800594c:	ee07 3a90 	vmov	s15, r3
 8005950:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005954:	ed97 6a03 	vldr	s12, [r7, #12]
 8005958:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005a28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800595c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005960:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005964:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005968:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800596c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005970:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005974:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8005976:	4b2a      	ldr	r3, [pc, #168]	; (8005a20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597a:	0a5b      	lsrs	r3, r3, #9
 800597c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005980:	ee07 3a90 	vmov	s15, r3
 8005984:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005988:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800598c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005990:	edd7 6a07 	vldr	s13, [r7, #28]
 8005994:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005998:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800599c:	ee17 2a90 	vmov	r2, s15
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80059a4:	4b1e      	ldr	r3, [pc, #120]	; (8005a20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80059a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a8:	0c1b      	lsrs	r3, r3, #16
 80059aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059ae:	ee07 3a90 	vmov	s15, r3
 80059b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80059ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80059be:	edd7 6a07 	vldr	s13, [r7, #28]
 80059c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059ca:	ee17 2a90 	vmov	r2, s15
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80059d2:	4b13      	ldr	r3, [pc, #76]	; (8005a20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80059d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d6:	0e1b      	lsrs	r3, r3, #24
 80059d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059dc:	ee07 3a90 	vmov	s15, r3
 80059e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80059e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80059ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80059f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059f8:	ee17 2a90 	vmov	r2, s15
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005a00:	e008      	b.n	8005a14 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	609a      	str	r2, [r3, #8]
}
 8005a14:	bf00      	nop
 8005a16:	3724      	adds	r7, #36	; 0x24
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr
 8005a20:	58024400 	.word	0x58024400
 8005a24:	03d09000 	.word	0x03d09000
 8005a28:	46000000 	.word	0x46000000
 8005a2c:	4c742400 	.word	0x4c742400
 8005a30:	4a742400 	.word	0x4a742400
 8005a34:	4bbebc20 	.word	0x4bbebc20

08005a38 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a42:	2300      	movs	r3, #0
 8005a44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005a46:	4b53      	ldr	r3, [pc, #332]	; (8005b94 <RCCEx_PLL2_Config+0x15c>)
 8005a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a4a:	f003 0303 	and.w	r3, r3, #3
 8005a4e:	2b03      	cmp	r3, #3
 8005a50:	d101      	bne.n	8005a56 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e099      	b.n	8005b8a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005a56:	4b4f      	ldr	r3, [pc, #316]	; (8005b94 <RCCEx_PLL2_Config+0x15c>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a4e      	ldr	r2, [pc, #312]	; (8005b94 <RCCEx_PLL2_Config+0x15c>)
 8005a5c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a62:	f7fb fe5b 	bl	800171c <HAL_GetTick>
 8005a66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a68:	e008      	b.n	8005a7c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005a6a:	f7fb fe57 	bl	800171c <HAL_GetTick>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	d901      	bls.n	8005a7c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e086      	b.n	8005b8a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a7c:	4b45      	ldr	r3, [pc, #276]	; (8005b94 <RCCEx_PLL2_Config+0x15c>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1f0      	bne.n	8005a6a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005a88:	4b42      	ldr	r3, [pc, #264]	; (8005b94 <RCCEx_PLL2_Config+0x15c>)
 8005a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	031b      	lsls	r3, r3, #12
 8005a96:	493f      	ldr	r1, [pc, #252]	; (8005b94 <RCCEx_PLL2_Config+0x15c>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	628b      	str	r3, [r1, #40]	; 0x28
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	025b      	lsls	r3, r3, #9
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	431a      	orrs	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	041b      	lsls	r3, r3, #16
 8005aba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005abe:	431a      	orrs	r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	3b01      	subs	r3, #1
 8005ac6:	061b      	lsls	r3, r3, #24
 8005ac8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005acc:	4931      	ldr	r1, [pc, #196]	; (8005b94 <RCCEx_PLL2_Config+0x15c>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005ad2:	4b30      	ldr	r3, [pc, #192]	; (8005b94 <RCCEx_PLL2_Config+0x15c>)
 8005ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	492d      	ldr	r1, [pc, #180]	; (8005b94 <RCCEx_PLL2_Config+0x15c>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005ae4:	4b2b      	ldr	r3, [pc, #172]	; (8005b94 <RCCEx_PLL2_Config+0x15c>)
 8005ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae8:	f023 0220 	bic.w	r2, r3, #32
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	4928      	ldr	r1, [pc, #160]	; (8005b94 <RCCEx_PLL2_Config+0x15c>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005af6:	4b27      	ldr	r3, [pc, #156]	; (8005b94 <RCCEx_PLL2_Config+0x15c>)
 8005af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afa:	4a26      	ldr	r2, [pc, #152]	; (8005b94 <RCCEx_PLL2_Config+0x15c>)
 8005afc:	f023 0310 	bic.w	r3, r3, #16
 8005b00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005b02:	4b24      	ldr	r3, [pc, #144]	; (8005b94 <RCCEx_PLL2_Config+0x15c>)
 8005b04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b06:	4b24      	ldr	r3, [pc, #144]	; (8005b98 <RCCEx_PLL2_Config+0x160>)
 8005b08:	4013      	ands	r3, r2
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	69d2      	ldr	r2, [r2, #28]
 8005b0e:	00d2      	lsls	r2, r2, #3
 8005b10:	4920      	ldr	r1, [pc, #128]	; (8005b94 <RCCEx_PLL2_Config+0x15c>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005b16:	4b1f      	ldr	r3, [pc, #124]	; (8005b94 <RCCEx_PLL2_Config+0x15c>)
 8005b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1a:	4a1e      	ldr	r2, [pc, #120]	; (8005b94 <RCCEx_PLL2_Config+0x15c>)
 8005b1c:	f043 0310 	orr.w	r3, r3, #16
 8005b20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d106      	bne.n	8005b36 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005b28:	4b1a      	ldr	r3, [pc, #104]	; (8005b94 <RCCEx_PLL2_Config+0x15c>)
 8005b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2c:	4a19      	ldr	r2, [pc, #100]	; (8005b94 <RCCEx_PLL2_Config+0x15c>)
 8005b2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b34:	e00f      	b.n	8005b56 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d106      	bne.n	8005b4a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005b3c:	4b15      	ldr	r3, [pc, #84]	; (8005b94 <RCCEx_PLL2_Config+0x15c>)
 8005b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b40:	4a14      	ldr	r2, [pc, #80]	; (8005b94 <RCCEx_PLL2_Config+0x15c>)
 8005b42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b48:	e005      	b.n	8005b56 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005b4a:	4b12      	ldr	r3, [pc, #72]	; (8005b94 <RCCEx_PLL2_Config+0x15c>)
 8005b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b4e:	4a11      	ldr	r2, [pc, #68]	; (8005b94 <RCCEx_PLL2_Config+0x15c>)
 8005b50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b54:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005b56:	4b0f      	ldr	r3, [pc, #60]	; (8005b94 <RCCEx_PLL2_Config+0x15c>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a0e      	ldr	r2, [pc, #56]	; (8005b94 <RCCEx_PLL2_Config+0x15c>)
 8005b5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b62:	f7fb fddb 	bl	800171c <HAL_GetTick>
 8005b66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b68:	e008      	b.n	8005b7c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005b6a:	f7fb fdd7 	bl	800171c <HAL_GetTick>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d901      	bls.n	8005b7c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e006      	b.n	8005b8a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b7c:	4b05      	ldr	r3, [pc, #20]	; (8005b94 <RCCEx_PLL2_Config+0x15c>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d0f0      	beq.n	8005b6a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	58024400 	.word	0x58024400
 8005b98:	ffff0007 	.word	0xffff0007

08005b9c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005baa:	4b53      	ldr	r3, [pc, #332]	; (8005cf8 <RCCEx_PLL3_Config+0x15c>)
 8005bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bae:	f003 0303 	and.w	r3, r3, #3
 8005bb2:	2b03      	cmp	r3, #3
 8005bb4:	d101      	bne.n	8005bba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e099      	b.n	8005cee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005bba:	4b4f      	ldr	r3, [pc, #316]	; (8005cf8 <RCCEx_PLL3_Config+0x15c>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a4e      	ldr	r2, [pc, #312]	; (8005cf8 <RCCEx_PLL3_Config+0x15c>)
 8005bc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bc6:	f7fb fda9 	bl	800171c <HAL_GetTick>
 8005bca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005bcc:	e008      	b.n	8005be0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005bce:	f7fb fda5 	bl	800171c <HAL_GetTick>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d901      	bls.n	8005be0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	e086      	b.n	8005cee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005be0:	4b45      	ldr	r3, [pc, #276]	; (8005cf8 <RCCEx_PLL3_Config+0x15c>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d1f0      	bne.n	8005bce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005bec:	4b42      	ldr	r3, [pc, #264]	; (8005cf8 <RCCEx_PLL3_Config+0x15c>)
 8005bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	051b      	lsls	r3, r3, #20
 8005bfa:	493f      	ldr	r1, [pc, #252]	; (8005cf8 <RCCEx_PLL3_Config+0x15c>)
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	628b      	str	r3, [r1, #40]	; 0x28
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	3b01      	subs	r3, #1
 8005c06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	025b      	lsls	r3, r3, #9
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	431a      	orrs	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	041b      	lsls	r3, r3, #16
 8005c1e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005c22:	431a      	orrs	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	061b      	lsls	r3, r3, #24
 8005c2c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005c30:	4931      	ldr	r1, [pc, #196]	; (8005cf8 <RCCEx_PLL3_Config+0x15c>)
 8005c32:	4313      	orrs	r3, r2
 8005c34:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005c36:	4b30      	ldr	r3, [pc, #192]	; (8005cf8 <RCCEx_PLL3_Config+0x15c>)
 8005c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c3a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	492d      	ldr	r1, [pc, #180]	; (8005cf8 <RCCEx_PLL3_Config+0x15c>)
 8005c44:	4313      	orrs	r3, r2
 8005c46:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005c48:	4b2b      	ldr	r3, [pc, #172]	; (8005cf8 <RCCEx_PLL3_Config+0x15c>)
 8005c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c4c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	699b      	ldr	r3, [r3, #24]
 8005c54:	4928      	ldr	r1, [pc, #160]	; (8005cf8 <RCCEx_PLL3_Config+0x15c>)
 8005c56:	4313      	orrs	r3, r2
 8005c58:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005c5a:	4b27      	ldr	r3, [pc, #156]	; (8005cf8 <RCCEx_PLL3_Config+0x15c>)
 8005c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5e:	4a26      	ldr	r2, [pc, #152]	; (8005cf8 <RCCEx_PLL3_Config+0x15c>)
 8005c60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005c66:	4b24      	ldr	r3, [pc, #144]	; (8005cf8 <RCCEx_PLL3_Config+0x15c>)
 8005c68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c6a:	4b24      	ldr	r3, [pc, #144]	; (8005cfc <RCCEx_PLL3_Config+0x160>)
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	69d2      	ldr	r2, [r2, #28]
 8005c72:	00d2      	lsls	r2, r2, #3
 8005c74:	4920      	ldr	r1, [pc, #128]	; (8005cf8 <RCCEx_PLL3_Config+0x15c>)
 8005c76:	4313      	orrs	r3, r2
 8005c78:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005c7a:	4b1f      	ldr	r3, [pc, #124]	; (8005cf8 <RCCEx_PLL3_Config+0x15c>)
 8005c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7e:	4a1e      	ldr	r2, [pc, #120]	; (8005cf8 <RCCEx_PLL3_Config+0x15c>)
 8005c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d106      	bne.n	8005c9a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005c8c:	4b1a      	ldr	r3, [pc, #104]	; (8005cf8 <RCCEx_PLL3_Config+0x15c>)
 8005c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c90:	4a19      	ldr	r2, [pc, #100]	; (8005cf8 <RCCEx_PLL3_Config+0x15c>)
 8005c92:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005c96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005c98:	e00f      	b.n	8005cba <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d106      	bne.n	8005cae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005ca0:	4b15      	ldr	r3, [pc, #84]	; (8005cf8 <RCCEx_PLL3_Config+0x15c>)
 8005ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca4:	4a14      	ldr	r2, [pc, #80]	; (8005cf8 <RCCEx_PLL3_Config+0x15c>)
 8005ca6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005caa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005cac:	e005      	b.n	8005cba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005cae:	4b12      	ldr	r3, [pc, #72]	; (8005cf8 <RCCEx_PLL3_Config+0x15c>)
 8005cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb2:	4a11      	ldr	r2, [pc, #68]	; (8005cf8 <RCCEx_PLL3_Config+0x15c>)
 8005cb4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005cb8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005cba:	4b0f      	ldr	r3, [pc, #60]	; (8005cf8 <RCCEx_PLL3_Config+0x15c>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a0e      	ldr	r2, [pc, #56]	; (8005cf8 <RCCEx_PLL3_Config+0x15c>)
 8005cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cc6:	f7fb fd29 	bl	800171c <HAL_GetTick>
 8005cca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ccc:	e008      	b.n	8005ce0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005cce:	f7fb fd25 	bl	800171c <HAL_GetTick>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d901      	bls.n	8005ce0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e006      	b.n	8005cee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ce0:	4b05      	ldr	r3, [pc, #20]	; (8005cf8 <RCCEx_PLL3_Config+0x15c>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d0f0      	beq.n	8005cce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3710      	adds	r7, #16
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	58024400 	.word	0x58024400
 8005cfc:	ffff0007 	.word	0xffff0007

08005d00 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b08a      	sub	sp, #40	; 0x28
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d101      	bne.n	8005d12 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e07c      	b.n	8005e0c <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10c      	bne.n	8005d38 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d102      	bne.n	8005d32 <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2202      	movs	r2, #2
 8005d30:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f7fb f9e0 	bl	80010f8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2203      	movs	r2, #3
 8005d3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 f867 	bl	8005e14 <HAL_SD_InitCard>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d001      	beq.n	8005d50 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e05d      	b.n	8005e0c <HAL_SD_Init+0x10c>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8005d50:	f107 0308 	add.w	r3, r7, #8
 8005d54:	4619      	mov	r1, r3
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 fdbe 	bl	80068d8 <HAL_SD_GetCardStatus>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d001      	beq.n	8005d66 <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e052      	b.n	8005e0c <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8005d66:	7e3b      	ldrb	r3, [r7, #24]
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8005d6c:	7e7b      	ldrb	r3, [r7, #25]
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d10a      	bne.n	8005d90 <HAL_SD_Init+0x90>
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d102      	bne.n	8005d86 <HAL_SD_Init+0x86>
 8005d80:	6a3b      	ldr	r3, [r7, #32]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d004      	beq.n	8005d90 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d8c:	65da      	str	r2, [r3, #92]	; 0x5c
 8005d8e:	e00b      	b.n	8005da8 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d104      	bne.n	8005da2 <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d9e:	65da      	str	r2, [r3, #92]	; 0x5c
 8005da0:	e002      	b.n	8005da8 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	4619      	mov	r1, r3
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 fe74 	bl	8006a9c <HAL_SD_ConfigWideBusOperation>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d001      	beq.n	8005dbe <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e026      	b.n	8005e0c <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8005dbe:	f7fb fcad 	bl	800171c <HAL_GetTick>
 8005dc2:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005dc4:	e011      	b.n	8005dea <HAL_SD_Init+0xea>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005dc6:	f7fb fca9 	bl	800171c <HAL_GetTick>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd4:	d109      	bne.n	8005dea <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005ddc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e010      	b.n	8005e0c <HAL_SD_Init+0x10c>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 ff6a 	bl	8006cc4 <HAL_SD_GetCardState>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b04      	cmp	r3, #4
 8005df4:	d1e7      	bne.n	8005dc6 <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3728      	adds	r7, #40	; 0x28
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005e14:	b5b0      	push	{r4, r5, r7, lr}
 8005e16:	b08e      	sub	sp, #56	; 0x38
 8005e18:	af04      	add	r7, sp, #16
 8005e1a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005e20:	2300      	movs	r3, #0
 8005e22:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005e24:	2300      	movs	r3, #0
 8005e26:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8005e2c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005e30:	f7fe fd20 	bl	8004874 <HAL_RCCEx_GetPeriphCLKFreq>
 8005e34:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8005e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d109      	bne.n	8005e50 <HAL_SD_InitCard+0x3c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005e4a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e079      	b.n	8005f44 <HAL_SD_InitCard+0x130>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8005e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e52:	0a1b      	lsrs	r3, r3, #8
 8005e54:	4a3d      	ldr	r2, [pc, #244]	; (8005f4c <HAL_SD_InitCard+0x138>)
 8005e56:	fba2 2303 	umull	r2, r3, r2, r3
 8005e5a:	091b      	lsrs	r3, r3, #4
 8005e5c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  Init.TranceiverPresent = hsd->Init.TranceiverPresent;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	61fb      	str	r3, [r7, #28]

  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	699b      	ldr	r3, [r3, #24]
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d107      	bne.n	8005e7c <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f042 0210 	orr.w	r2, r2, #16
 8005e7a:	601a      	str	r2, [r3, #0]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681d      	ldr	r5, [r3, #0]
 8005e80:	466c      	mov	r4, sp
 8005e82:	f107 0314 	add.w	r3, r7, #20
 8005e86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005e8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005e8e:	f107 0308 	add.w	r3, r7, #8
 8005e92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e94:	4628      	mov	r0, r5
 8005e96:	f003 fc01 	bl	800969c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f003 fc44 	bl	800972c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	005b      	lsls	r3, r3, #1
 8005ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8005eb0:	4a27      	ldr	r2, [pc, #156]	; (8005f50 <HAL_SD_InitCard+0x13c>)
 8005eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eb8:	3301      	adds	r3, #1
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7fb fc3a 	bl	8001734 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 ffdb 	bl	8006e7c <SD_PowerON>
 8005ec6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005ec8:	6a3b      	ldr	r3, [r7, #32]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00b      	beq.n	8005ee6 <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eda:	6a3b      	ldr	r3, [r7, #32]
 8005edc:	431a      	orrs	r2, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e02e      	b.n	8005f44 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 ff0c 	bl	8006d04 <SD_InitCard>
 8005eec:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005eee:	6a3b      	ldr	r3, [r7, #32]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d00b      	beq.n	8005f0c <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f00:	6a3b      	ldr	r3, [r7, #32]
 8005f02:	431a      	orrs	r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e01b      	b.n	8005f44 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f14:	4618      	mov	r0, r3
 8005f16:	f003 fc9f 	bl	8009858 <SDMMC_CmdBlockLength>
 8005f1a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005f1c:	6a3b      	ldr	r3, [r7, #32]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00f      	beq.n	8005f42 <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a0b      	ldr	r2, [pc, #44]	; (8005f54 <HAL_SD_InitCard+0x140>)
 8005f28:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f2e:	6a3b      	ldr	r3, [r7, #32]
 8005f30:	431a      	orrs	r2, r3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e000      	b.n	8005f44 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3728      	adds	r7, #40	; 0x28
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bdb0      	pop	{r4, r5, r7, pc}
 8005f4c:	014f8b59 	.word	0x014f8b59
 8005f50:	00012110 	.word	0x00012110
 8005f54:	1fe00fff 	.word	0x1fe00fff

08005f58 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b08c      	sub	sp, #48	; 0x30
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]
 8005f64:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d107      	bne.n	8005f80 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f74:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e08d      	b.n	800609c <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	f040 8086 	bne.w	800609a <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2200      	movs	r2, #0
 8005f92:	639a      	str	r2, [r3, #56]	; 0x38

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005f94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	441a      	add	r2, r3
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d907      	bls.n	8005fb2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e074      	b.n	800609c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2203      	movs	r2, #3
 8005fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	68ba      	ldr	r2, [r7, #8]
 8005fc6:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	025a      	lsls	r2, r3, #9
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d002      	beq.n	8005fde <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8005fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fda:	025b      	lsls	r3, r3, #9
 8005fdc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005fde:	f04f 33ff 	mov.w	r3, #4294967295
 8005fe2:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	025b      	lsls	r3, r3, #9
 8005fe8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005fea:	2390      	movs	r3, #144	; 0x90
 8005fec:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005fee:	2302      	movs	r3, #2
 8005ff0:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f107 0210 	add.w	r2, r7, #16
 8006002:	4611      	mov	r1, r2
 8006004:	4618      	mov	r0, r3
 8006006:	f003 fbfb 	bl	8009800 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68da      	ldr	r2, [r3, #12]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006018:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68ba      	ldr	r2, [r7, #8]
 8006020:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2201      	movs	r2, #1
 8006028:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	2b01      	cmp	r3, #1
 800602e:	d90a      	bls.n	8006046 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2282      	movs	r2, #130	; 0x82
 8006034:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800603c:	4618      	mov	r0, r3
 800603e:	f003 fc51 	bl	80098e4 <SDMMC_CmdReadMultiBlock>
 8006042:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006044:	e009      	b.n	800605a <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2281      	movs	r2, #129	; 0x81
 800604a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006052:	4618      	mov	r0, r3
 8006054:	f003 fc23 	bl	800989e <SDMMC_CmdReadSingleBlock>
 8006058:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800605a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800605c:	2b00      	cmp	r3, #0
 800605e:	d012      	beq.n	8006086 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a0f      	ldr	r2, [pc, #60]	; (80060a4 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8006066:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800606c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800606e:	431a      	orrs	r2, r3
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e00a      	b.n	800609c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8006094:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 8006096:	2300      	movs	r3, #0
 8006098:	e000      	b.n	800609c <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800609a:	2302      	movs	r3, #2
  }
}
 800609c:	4618      	mov	r0, r3
 800609e:	3730      	adds	r7, #48	; 0x30
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	1fe00fff 	.word	0x1fe00fff

080060a8 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b08c      	sub	sp, #48	; 0x30
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]
 80060b4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d107      	bne.n	80060d0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e08d      	b.n	80061ec <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	2b01      	cmp	r3, #1
 80060da:	f040 8086 	bne.w	80061ea <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2200      	movs	r2, #0
 80060e2:	639a      	str	r2, [r3, #56]	; 0x38

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80060e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	441a      	add	r2, r3
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d907      	bls.n	8006102 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e074      	b.n	80061ec <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2203      	movs	r2, #3
 8006106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2200      	movs	r2, #0
 8006110:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	68ba      	ldr	r2, [r7, #8]
 8006116:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	025a      	lsls	r2, r3, #9
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	625a      	str	r2, [r3, #36]	; 0x24

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006124:	2b01      	cmp	r3, #1
 8006126:	d002      	beq.n	800612e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8006128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612a:	025b      	lsls	r3, r3, #9
 800612c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800612e:	f04f 33ff 	mov.w	r3, #4294967295
 8006132:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	025b      	lsls	r3, r3, #9
 8006138:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800613a:	2390      	movs	r3, #144	; 0x90
 800613c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800613e:	2300      	movs	r3, #0
 8006140:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006142:	2300      	movs	r3, #0
 8006144:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006146:	2300      	movs	r3, #0
 8006148:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f107 0210 	add.w	r2, r7, #16
 8006152:	4611      	mov	r1, r2
 8006154:	4618      	mov	r0, r3
 8006156:	f003 fb53 	bl	8009800 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68da      	ldr	r2, [r3, #12]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006168:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68ba      	ldr	r2, [r7, #8]
 8006170:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2201      	movs	r2, #1
 8006178:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d90a      	bls.n	8006196 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	22a0      	movs	r2, #160	; 0xa0
 8006184:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800618c:	4618      	mov	r0, r3
 800618e:	f003 fbef 	bl	8009970 <SDMMC_CmdWriteMultiBlock>
 8006192:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006194:	e009      	b.n	80061aa <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2290      	movs	r2, #144	; 0x90
 800619a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061a2:	4618      	mov	r0, r3
 80061a4:	f003 fbc1 	bl	800992a <SDMMC_CmdWriteSingleBlock>
 80061a8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80061aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d012      	beq.n	80061d6 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a0f      	ldr	r2, [pc, #60]	; (80061f4 <HAL_SD_WriteBlocks_DMA+0x14c>)
 80061b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061be:	431a      	orrs	r2, r3
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2200      	movs	r2, #0
 80061d0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e00a      	b.n	80061ec <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 80061e4:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80061e6:	2300      	movs	r3, #0
 80061e8:	e000      	b.n	80061ec <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 80061ea:	2302      	movs	r3, #2
  }
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3730      	adds	r7, #48	; 0x30
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	1fe00fff 	.word	0x1fe00fff

080061f8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006204:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800620c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006210:	2b00      	cmp	r3, #0
 8006212:	d008      	beq.n	8006226 <HAL_SD_IRQHandler+0x2e>
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f003 0308 	and.w	r3, r3, #8
 800621a:	2b00      	cmp	r3, #0
 800621c:	d003      	beq.n	8006226 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f001 f992 	bl	8007548 <SD_Read_IT>
 8006224:	e19a      	b.n	800655c <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800622c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006230:	2b00      	cmp	r3, #0
 8006232:	f000 80ac 	beq.w	800638e <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800623e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	4b9d      	ldr	r3, [pc, #628]	; (80064c0 <HAL_SD_IRQHandler+0x2c8>)
 800624c:	400b      	ands	r3, r1
 800624e:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800625e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68da      	ldr	r2, [r3, #12]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800626e:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f003 0308 	and.w	r3, r3, #8
 8006276:	2b00      	cmp	r3, #0
 8006278:	d038      	beq.n	80062ec <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f003 0302 	and.w	r3, r3, #2
 8006280:	2b00      	cmp	r3, #0
 8006282:	d104      	bne.n	800628e <HAL_SD_IRQHandler+0x96>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f003 0320 	and.w	r3, r3, #32
 800628a:	2b00      	cmp	r3, #0
 800628c:	d011      	beq.n	80062b2 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4618      	mov	r0, r3
 8006294:	f003 fb90 	bl	80099b8 <SDMMC_CmdStopTransfer>
 8006298:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d008      	beq.n	80062b2 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	431a      	orrs	r2, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 f959 	bl	8006564 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a83      	ldr	r2, [pc, #524]	; (80064c4 <HAL_SD_IRQHandler+0x2cc>)
 80062b8:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2201      	movs	r2, #1
 80062be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	631a      	str	r2, [r3, #48]	; 0x30
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f003 0301 	and.w	r3, r3, #1
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d104      	bne.n	80062dc <HAL_SD_IRQHandler+0xe4>
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f003 0302 	and.w	r3, r3, #2
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d003      	beq.n	80062e4 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f004 f84f 	bl	800a380 <HAL_SD_RxCpltCallback>
 80062e2:	e13b      	b.n	800655c <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f004 f841 	bl	800a36c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80062ea:	e137      	b.n	800655c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f000 8132 	beq.w	800655c <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2200      	movs	r2, #0
 80062fe:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2200      	movs	r2, #0
 8006306:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2200      	movs	r2, #0
 800630e:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f003 0302 	and.w	r3, r3, #2
 8006316:	2b00      	cmp	r3, #0
 8006318:	d104      	bne.n	8006324 <HAL_SD_IRQHandler+0x12c>
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f003 0320 	and.w	r3, r3, #32
 8006320:	2b00      	cmp	r3, #0
 8006322:	d011      	beq.n	8006348 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4618      	mov	r0, r3
 800632a:	f003 fb45 	bl	80099b8 <SDMMC_CmdStopTransfer>
 800632e:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d008      	beq.n	8006348 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	431a      	orrs	r2, r3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 f90e 	bl	8006564 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	631a      	str	r2, [r3, #48]	; 0x30
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f003 0310 	and.w	r3, r3, #16
 800635c:	2b00      	cmp	r3, #0
 800635e:	d104      	bne.n	800636a <HAL_SD_IRQHandler+0x172>
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f003 0320 	and.w	r3, r3, #32
 8006366:	2b00      	cmp	r3, #0
 8006368:	d002      	beq.n	8006370 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f003 fffe 	bl	800a36c <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f003 0301 	and.w	r3, r3, #1
 8006376:	2b00      	cmp	r3, #0
 8006378:	d105      	bne.n	8006386 <HAL_SD_IRQHandler+0x18e>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f003 0302 	and.w	r3, r3, #2
 8006380:	2b00      	cmp	r3, #0
 8006382:	f000 80eb 	beq.w	800655c <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f003 fffa 	bl	800a380 <HAL_SD_RxCpltCallback>
}
 800638c:	e0e6      	b.n	800655c <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006394:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006398:	2b00      	cmp	r3, #0
 800639a:	d008      	beq.n	80063ae <HAL_SD_IRQHandler+0x1b6>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f003 0308 	and.w	r3, r3, #8
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d003      	beq.n	80063ae <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f001 f914 	bl	80075d4 <SD_Write_IT>
 80063ac:	e0d6      	b.n	800655c <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063b4:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f000 80a2 	beq.w	8006502 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063c4:	f003 0302 	and.w	r3, r3, #2
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d005      	beq.n	80063d8 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d0:	f043 0202 	orr.w	r2, r3, #2
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	639a      	str	r2, [r3, #56]	; 0x38
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063de:	f003 0308 	and.w	r3, r3, #8
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d005      	beq.n	80063f2 <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ea:	f043 0208 	orr.w	r2, r3, #8
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	639a      	str	r2, [r3, #56]	; 0x38
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063f8:	f003 0320 	and.w	r3, r3, #32
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d005      	beq.n	800640c <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006404:	f043 0220 	orr.w	r2, r3, #32
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	639a      	str	r2, [r3, #56]	; 0x38
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006412:	f003 0310 	and.w	r3, r3, #16
 8006416:	2b00      	cmp	r3, #0
 8006418:	d005      	beq.n	8006426 <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641e:	f043 0210 	orr.w	r2, r3, #16
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a26      	ldr	r2, [pc, #152]	; (80064c4 <HAL_SD_IRQHandler+0x2cc>)
 800642c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800643c:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68da      	ldr	r2, [r3, #12]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800644c:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800645c:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68da      	ldr	r2, [r3, #12]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800646c:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4618      	mov	r0, r3
 8006474:	f003 faa0 	bl	80099b8 <SDMMC_CmdStopTransfer>
 8006478:	4602      	mov	r2, r0
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647e:	431a      	orrs	r2, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68da      	ldr	r2, [r3, #12]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006492:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800649c:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f003 0308 	and.w	r3, r3, #8
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00f      	beq.n	80064c8 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 f854 	bl	8006564 <HAL_SD_ErrorCallback>
}
 80064bc:	e04e      	b.n	800655c <HAL_SD_IRQHandler+0x364>
 80064be:	bf00      	nop
 80064c0:	ffff3ec5 	.word	0xffff3ec5
 80064c4:	18000f3a 	.word	0x18000f3a
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d044      	beq.n	800655c <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d040      	beq.n	800655c <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80064e8:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2200      	movs	r2, #0
 80064f0:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2201      	movs	r2, #1
 80064f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f832 	bl	8006564 <HAL_SD_ErrorCallback>
}
 8006500:	e02c      	b.n	800655c <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800650c:	2b00      	cmp	r3, #0
 800650e:	d025      	beq.n	800655c <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006518:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006520:	f003 0304 	and.w	r3, r3, #4
 8006524:	2b00      	cmp	r3, #0
 8006526:	d10c      	bne.n	8006542 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f003 0320 	and.w	r3, r3, #32
 800652e:	2b00      	cmp	r3, #0
 8006530:	d003      	beq.n	800653a <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f001 f8b6 	bl	80076a4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8006538:	e010      	b.n	800655c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f001 f89e 	bl	800767c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8006540:	e00c      	b.n	800655c <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f003 0320 	and.w	r3, r3, #32
 8006548:	2b00      	cmp	r3, #0
 800654a:	d003      	beq.n	8006554 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f001 f89f 	bl	8007690 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8006552:	e003      	b.n	800655c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f001 f887 	bl	8007668 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800655a:	e7ff      	b.n	800655c <HAL_SD_IRQHandler+0x364>
 800655c:	bf00      	nop
 800655e:	3710      	adds	r7, #16
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800656c:	bf00      	nop
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	4603      	mov	r3, r0
 8006580:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 8006582:	bf00      	nop
 8006584:	370c      	adds	r7, #12
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr
	...

08006590 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800659e:	0f9b      	lsrs	r3, r3, #30
 80065a0:	b2da      	uxtb	r2, r3
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065aa:	0e9b      	lsrs	r3, r3, #26
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	f003 030f 	and.w	r3, r3, #15
 80065b2:	b2da      	uxtb	r2, r3
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065bc:	0e1b      	lsrs	r3, r3, #24
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	f003 0303 	and.w	r3, r3, #3
 80065c4:	b2da      	uxtb	r2, r3
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065ce:	0c1b      	lsrs	r3, r3, #16
 80065d0:	b2da      	uxtb	r2, r3
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065da:	0a1b      	lsrs	r3, r3, #8
 80065dc:	b2da      	uxtb	r2, r3
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065e6:	b2da      	uxtb	r2, r3
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065f0:	0d1b      	lsrs	r3, r3, #20
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065fc:	0c1b      	lsrs	r3, r3, #16
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	f003 030f 	and.w	r3, r3, #15
 8006604:	b2da      	uxtb	r2, r3
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800660e:	0bdb      	lsrs	r3, r3, #15
 8006610:	b2db      	uxtb	r3, r3
 8006612:	f003 0301 	and.w	r3, r3, #1
 8006616:	b2da      	uxtb	r2, r3
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006620:	0b9b      	lsrs	r3, r3, #14
 8006622:	b2db      	uxtb	r3, r3
 8006624:	f003 0301 	and.w	r3, r3, #1
 8006628:	b2da      	uxtb	r2, r3
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006632:	0b5b      	lsrs	r3, r3, #13
 8006634:	b2db      	uxtb	r3, r3
 8006636:	f003 0301 	and.w	r3, r3, #1
 800663a:	b2da      	uxtb	r2, r3
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006644:	0b1b      	lsrs	r3, r3, #12
 8006646:	b2db      	uxtb	r3, r3
 8006648:	f003 0301 	and.w	r3, r3, #1
 800664c:	b2da      	uxtb	r2, r3
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	2200      	movs	r2, #0
 8006656:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800665c:	2b00      	cmp	r3, #0
 800665e:	d163      	bne.n	8006728 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006664:	009a      	lsls	r2, r3, #2
 8006666:	f640 73fc 	movw	r3, #4092	; 0xffc
 800666a:	4013      	ands	r3, r2
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006670:	0f92      	lsrs	r2, r2, #30
 8006672:	431a      	orrs	r2, r3
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800667c:	0edb      	lsrs	r3, r3, #27
 800667e:	b2db      	uxtb	r3, r3
 8006680:	f003 0307 	and.w	r3, r3, #7
 8006684:	b2da      	uxtb	r2, r3
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800668e:	0e1b      	lsrs	r3, r3, #24
 8006690:	b2db      	uxtb	r3, r3
 8006692:	f003 0307 	and.w	r3, r3, #7
 8006696:	b2da      	uxtb	r2, r3
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066a0:	0d5b      	lsrs	r3, r3, #21
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	f003 0307 	and.w	r3, r3, #7
 80066a8:	b2da      	uxtb	r2, r3
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066b2:	0c9b      	lsrs	r3, r3, #18
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	f003 0307 	and.w	r3, r3, #7
 80066ba:	b2da      	uxtb	r2, r3
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066c4:	0bdb      	lsrs	r3, r3, #15
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	f003 0307 	and.w	r3, r3, #7
 80066cc:	b2da      	uxtb	r2, r3
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	691b      	ldr	r3, [r3, #16]
 80066d6:	1c5a      	adds	r2, r3, #1
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	7e1b      	ldrb	r3, [r3, #24]
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	f003 0307 	and.w	r3, r3, #7
 80066e6:	3302      	adds	r3, #2
 80066e8:	2201      	movs	r2, #1
 80066ea:	fa02 f303 	lsl.w	r3, r2, r3
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80066f2:	fb02 f203 	mul.w	r2, r2, r3
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	7a1b      	ldrb	r3, [r3, #8]
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	f003 030f 	and.w	r3, r3, #15
 8006704:	2201      	movs	r2, #1
 8006706:	409a      	lsls	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006714:	0a52      	lsrs	r2, r2, #9
 8006716:	fb02 f203 	mul.w	r2, r2, r3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006724:	659a      	str	r2, [r3, #88]	; 0x58
 8006726:	e031      	b.n	800678c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800672c:	2b01      	cmp	r3, #1
 800672e:	d11d      	bne.n	800676c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006734:	041b      	lsls	r3, r3, #16
 8006736:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800673e:	0c1b      	lsrs	r3, r3, #16
 8006740:	431a      	orrs	r2, r3
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	3301      	adds	r3, #1
 800674c:	029a      	lsls	r2, r3, #10
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006760:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	659a      	str	r2, [r3, #88]	; 0x58
 800676a:	e00f      	b.n	800678c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a58      	ldr	r2, [pc, #352]	; (80068d4 <HAL_SD_GetCardCSD+0x344>)
 8006772:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006778:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e09d      	b.n	80068c8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006790:	0b9b      	lsrs	r3, r3, #14
 8006792:	b2db      	uxtb	r3, r3
 8006794:	f003 0301 	and.w	r3, r3, #1
 8006798:	b2da      	uxtb	r2, r3
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067a2:	09db      	lsrs	r3, r3, #7
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067aa:	b2da      	uxtb	r2, r3
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067ba:	b2da      	uxtb	r2, r3
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067c4:	0fdb      	lsrs	r3, r3, #31
 80067c6:	b2da      	uxtb	r2, r3
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067d0:	0f5b      	lsrs	r3, r3, #29
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	f003 0303 	and.w	r3, r3, #3
 80067d8:	b2da      	uxtb	r2, r3
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067e2:	0e9b      	lsrs	r3, r3, #26
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	f003 0307 	and.w	r3, r3, #7
 80067ea:	b2da      	uxtb	r2, r3
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067f4:	0d9b      	lsrs	r3, r3, #22
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	f003 030f 	and.w	r3, r3, #15
 80067fc:	b2da      	uxtb	r2, r3
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006806:	0d5b      	lsrs	r3, r3, #21
 8006808:	b2db      	uxtb	r3, r3
 800680a:	f003 0301 	and.w	r3, r3, #1
 800680e:	b2da      	uxtb	r2, r3
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006822:	0c1b      	lsrs	r3, r3, #16
 8006824:	b2db      	uxtb	r3, r3
 8006826:	f003 0301 	and.w	r3, r3, #1
 800682a:	b2da      	uxtb	r2, r3
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006836:	0bdb      	lsrs	r3, r3, #15
 8006838:	b2db      	uxtb	r3, r3
 800683a:	f003 0301 	and.w	r3, r3, #1
 800683e:	b2da      	uxtb	r2, r3
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800684a:	0b9b      	lsrs	r3, r3, #14
 800684c:	b2db      	uxtb	r3, r3
 800684e:	f003 0301 	and.w	r3, r3, #1
 8006852:	b2da      	uxtb	r2, r3
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800685e:	0b5b      	lsrs	r3, r3, #13
 8006860:	b2db      	uxtb	r3, r3
 8006862:	f003 0301 	and.w	r3, r3, #1
 8006866:	b2da      	uxtb	r2, r3
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006872:	0b1b      	lsrs	r3, r3, #12
 8006874:	b2db      	uxtb	r3, r3
 8006876:	f003 0301 	and.w	r3, r3, #1
 800687a:	b2da      	uxtb	r2, r3
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006886:	0a9b      	lsrs	r3, r3, #10
 8006888:	b2db      	uxtb	r3, r3
 800688a:	f003 0303 	and.w	r3, r3, #3
 800688e:	b2da      	uxtb	r2, r3
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800689a:	0a1b      	lsrs	r3, r3, #8
 800689c:	b2db      	uxtb	r3, r3
 800689e:	f003 0303 	and.w	r3, r3, #3
 80068a2:	b2da      	uxtb	r2, r3
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068ae:	085b      	lsrs	r3, r3, #1
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068b6:	b2da      	uxtb	r2, r3
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr
 80068d4:	1fe00fff 	.word	0x1fe00fff

080068d8 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b094      	sub	sp, #80	; 0x50
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80068e2:	2300      	movs	r3, #0
 80068e4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80068e8:	f107 0308 	add.w	r3, r7, #8
 80068ec:	4619      	mov	r1, r3
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 fbcc 	bl	800708c <SD_SendSDStatus>
 80068f4:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80068f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d011      	beq.n	8006920 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a4f      	ldr	r2, [pc, #316]	; (8006a40 <HAL_SD_GetCardStatus+0x168>)
 8006902:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006908:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800690a:	431a      	orrs	r2, r3
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800691e:	e070      	b.n	8006a02 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	099b      	lsrs	r3, r3, #6
 8006924:	b2db      	uxtb	r3, r3
 8006926:	f003 0303 	and.w	r3, r3, #3
 800692a:	b2da      	uxtb	r2, r3
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	095b      	lsrs	r3, r3, #5
 8006934:	b2db      	uxtb	r3, r3
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	b2da      	uxtb	r2, r3
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	0a1b      	lsrs	r3, r3, #8
 8006944:	b29b      	uxth	r3, r3
 8006946:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800694a:	b29a      	uxth	r2, r3
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	0e1b      	lsrs	r3, r3, #24
 8006950:	b29b      	uxth	r3, r3
 8006952:	4313      	orrs	r3, r2
 8006954:	b29a      	uxth	r2, r3
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	061a      	lsls	r2, r3, #24
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	021b      	lsls	r3, r3, #8
 8006962:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006966:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	0a1b      	lsrs	r3, r3, #8
 800696c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006970:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	0e1b      	lsrs	r3, r3, #24
 8006976:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	b2da      	uxtb	r2, r3
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	0a1b      	lsrs	r3, r3, #8
 8006988:	b2da      	uxtb	r2, r3
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	0d1b      	lsrs	r3, r3, #20
 8006992:	b2db      	uxtb	r3, r3
 8006994:	f003 030f 	and.w	r3, r3, #15
 8006998:	b2da      	uxtb	r2, r3
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	0c1b      	lsrs	r3, r3, #16
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	4313      	orrs	r3, r2
 80069b4:	b29a      	uxth	r2, r3
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	0a9b      	lsrs	r3, r3, #10
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069c4:	b2da      	uxtb	r2, r3
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	0a1b      	lsrs	r3, r3, #8
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	f003 0303 	and.w	r3, r3, #3
 80069d4:	b2da      	uxtb	r2, r3
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	091b      	lsrs	r3, r3, #4
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	f003 030f 	and.w	r3, r3, #15
 80069e4:	b2da      	uxtb	r2, r3
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	f003 030f 	and.w	r3, r3, #15
 80069f2:	b2da      	uxtb	r2, r3
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	0e1b      	lsrs	r3, r3, #24
 80069fc:	b2da      	uxtb	r2, r3
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f002 ff24 	bl	8009858 <SDMMC_CmdBlockLength>
 8006a10:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006a12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d00d      	beq.n	8006a34 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a08      	ldr	r2, [pc, #32]	; (8006a40 <HAL_SD_GetCardStatus+0x168>)
 8006a1e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a24:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2201      	movs	r2, #1
 8006a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8006a34:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3750      	adds	r7, #80	; 0x50
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}
 8006a40:	1fe00fff 	.word	0x1fe00fff

08006a44 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	370c      	adds	r7, #12
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr

08006a9c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006a9c:	b5b0      	push	{r4, r5, r7, lr}
 8006a9e:	b090      	sub	sp, #64	; 0x40
 8006aa0:	af04      	add	r7, sp, #16
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2203      	movs	r2, #3
 8006ab0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ab8:	2b03      	cmp	r3, #3
 8006aba:	d02e      	beq.n	8006b1a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ac2:	d106      	bne.n	8006ad2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	639a      	str	r2, [r3, #56]	; 0x38
 8006ad0:	e029      	b.n	8006b26 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ad8:	d10a      	bne.n	8006af0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 fbce 	bl	800727c <SD_WideBus_Enable>
 8006ae0:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae8:	431a      	orrs	r2, r3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	639a      	str	r2, [r3, #56]	; 0x38
 8006aee:	e01a      	b.n	8006b26 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d10a      	bne.n	8006b0c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 fc0b 	bl	8007312 <SD_WideBus_Disable>
 8006afc:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b04:	431a      	orrs	r2, r3
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	639a      	str	r2, [r3, #56]	; 0x38
 8006b0a:	e00c      	b.n	8006b26 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b10:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	639a      	str	r2, [r3, #56]	; 0x38
 8006b18:	e005      	b.n	8006b26 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b1e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d007      	beq.n	8006b3e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a60      	ldr	r2, [pc, #384]	; (8006cb4 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006b34:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006b3c:	e097      	b.n	8006c6e <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006b3e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006b42:	f7fd fe97 	bl	8004874 <HAL_RCCEx_GetPeriphCLKFreq>
 8006b46:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8006b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	f000 8086 	beq.w	8006c5c <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	60fb      	str	r3, [r7, #12]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	61bb      	str	r3, [r7, #24]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	695a      	ldr	r2, [r3, #20]
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6c:	4952      	ldr	r1, [pc, #328]	; (8006cb8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006b6e:	fba1 1303 	umull	r1, r3, r1, r3
 8006b72:	0e1b      	lsrs	r3, r3, #24
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d303      	bcc.n	8006b80 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	695b      	ldr	r3, [r3, #20]
 8006b7c:	61fb      	str	r3, [r7, #28]
 8006b7e:	e05a      	b.n	8006c36 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b88:	d103      	bne.n	8006b92 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	695b      	ldr	r3, [r3, #20]
 8006b8e:	61fb      	str	r3, [r7, #28]
 8006b90:	e051      	b.n	8006c36 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b9a:	d126      	bne.n	8006bea <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	695b      	ldr	r3, [r3, #20]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d10e      	bne.n	8006bc2 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8006ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba6:	4a45      	ldr	r2, [pc, #276]	; (8006cbc <HAL_SD_ConfigWideBusOperation+0x220>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d906      	bls.n	8006bba <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bae:	4a42      	ldr	r2, [pc, #264]	; (8006cb8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8006bb4:	0e5b      	lsrs	r3, r3, #25
 8006bb6:	61fb      	str	r3, [r7, #28]
 8006bb8:	e03d      	b.n	8006c36 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	695b      	ldr	r3, [r3, #20]
 8006bbe:	61fb      	str	r3, [r7, #28]
 8006bc0:	e039      	b.n	8006c36 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	695b      	ldr	r3, [r3, #20]
 8006bc6:	005b      	lsls	r3, r3, #1
 8006bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bce:	4a3b      	ldr	r2, [pc, #236]	; (8006cbc <HAL_SD_ConfigWideBusOperation+0x220>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d906      	bls.n	8006be2 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd6:	4a38      	ldr	r2, [pc, #224]	; (8006cb8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8006bdc:	0e5b      	lsrs	r3, r3, #25
 8006bde:	61fb      	str	r3, [r7, #28]
 8006be0:	e029      	b.n	8006c36 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	61fb      	str	r3, [r7, #28]
 8006be8:	e025      	b.n	8006c36 <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	695b      	ldr	r3, [r3, #20]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10e      	bne.n	8006c10 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8006bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf4:	4a32      	ldr	r2, [pc, #200]	; (8006cc0 <HAL_SD_ConfigWideBusOperation+0x224>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d906      	bls.n	8006c08 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfc:	4a2e      	ldr	r2, [pc, #184]	; (8006cb8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8006c02:	0e1b      	lsrs	r3, r3, #24
 8006c04:	61fb      	str	r3, [r7, #28]
 8006c06:	e016      	b.n	8006c36 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	695b      	ldr	r3, [r3, #20]
 8006c0c:	61fb      	str	r3, [r7, #28]
 8006c0e:	e012      	b.n	8006c36 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	695b      	ldr	r3, [r3, #20]
 8006c14:	005b      	lsls	r3, r3, #1
 8006c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c1c:	4a28      	ldr	r2, [pc, #160]	; (8006cc0 <HAL_SD_ConfigWideBusOperation+0x224>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d906      	bls.n	8006c30 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c24:	4a24      	ldr	r2, [pc, #144]	; (8006cb8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006c26:	fba2 2303 	umull	r2, r3, r2, r3
 8006c2a:	0e1b      	lsrs	r3, r3, #24
 8006c2c:	61fb      	str	r3, [r7, #28]
 8006c2e:	e002      	b.n	8006c36 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	695b      	ldr	r3, [r3, #20]
 8006c34:	61fb      	str	r3, [r7, #28]
          }
        }
      }

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	699b      	ldr	r3, [r3, #24]
 8006c3a:	623b      	str	r3, [r7, #32]
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681d      	ldr	r5, [r3, #0]
 8006c40:	466c      	mov	r4, sp
 8006c42:	f107 0318 	add.w	r3, r7, #24
 8006c46:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006c4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006c4e:	f107 030c 	add.w	r3, r7, #12
 8006c52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c54:	4628      	mov	r0, r5
 8006c56:	f002 fd21 	bl	800969c <SDMMC_Init>
 8006c5a:	e008      	b.n	8006c6e <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c60:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006c76:	4618      	mov	r0, r3
 8006c78:	f002 fdee 	bl	8009858 <SDMMC_CmdBlockLength>
 8006c7c:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8006c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d00c      	beq.n	8006c9e <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a0a      	ldr	r2, [pc, #40]	; (8006cb4 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006c8a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c92:	431a      	orrs	r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8006ca6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3730      	adds	r7, #48	; 0x30
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bdb0      	pop	{r4, r5, r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	1fe00fff 	.word	0x1fe00fff
 8006cb8:	55e63b89 	.word	0x55e63b89
 8006cbc:	02faf080 	.word	0x02faf080
 8006cc0:	017d7840 	.word	0x017d7840

08006cc4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b086      	sub	sp, #24
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006cd0:	f107 030c 	add.w	r3, r7, #12
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 faa8 	bl	800722c <SD_SendStatus>
 8006cdc:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d005      	beq.n	8006cf0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	431a      	orrs	r2, r3
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	0a5b      	lsrs	r3, r3, #9
 8006cf4:	f003 030f 	and.w	r3, r3, #15
 8006cf8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006cfa:	693b      	ldr	r3, [r7, #16]
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3718      	adds	r7, #24
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b090      	sub	sp, #64	; 0x40
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4618      	mov	r0, r3
 8006d16:	f002 fd1a 	bl	800974e <SDMMC_GetPowerState>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d102      	bne.n	8006d26 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006d20:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006d24:	e0a5      	b.n	8006e72 <SD_InitCard+0x16e>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d2a:	2b03      	cmp	r3, #3
 8006d2c:	d02e      	beq.n	8006d8c <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4618      	mov	r0, r3
 8006d34:	f002 ff65 	bl	8009c02 <SDMMC_CmdSendCID>
 8006d38:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 8006d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d001      	beq.n	8006d44 <SD_InitCard+0x40>
    {
      return errorstate;
 8006d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d42:	e096      	b.n	8006e72 <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2100      	movs	r1, #0
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f002 fd45 	bl	80097da <SDMMC_GetResponse>
 8006d50:	4602      	mov	r2, r0
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2104      	movs	r1, #4
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f002 fd3c 	bl	80097da <SDMMC_GetResponse>
 8006d62:	4602      	mov	r2, r0
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2108      	movs	r1, #8
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f002 fd33 	bl	80097da <SDMMC_GetResponse>
 8006d74:	4602      	mov	r2, r0
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	210c      	movs	r1, #12
 8006d80:	4618      	mov	r0, r3
 8006d82:	f002 fd2a 	bl	80097da <SDMMC_GetResponse>
 8006d86:	4602      	mov	r2, r0
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d90:	2b03      	cmp	r3, #3
 8006d92:	d00d      	beq.n	8006db0 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f107 020e 	add.w	r2, r7, #14
 8006d9c:	4611      	mov	r1, r2
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f002 ff6e 	bl	8009c80 <SDMMC_CmdSetRelAdd>
 8006da4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 8006da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d001      	beq.n	8006db0 <SD_InitCard+0xac>
    {
      return errorstate;
 8006dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dae:	e060      	b.n	8006e72 <SD_InitCard+0x16e>
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006db4:	2b03      	cmp	r3, #3
 8006db6:	d036      	beq.n	8006e26 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006db8:	89fb      	ldrh	r3, [r7, #14]
 8006dba:	461a      	mov	r2, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dc8:	041b      	lsls	r3, r3, #16
 8006dca:	4619      	mov	r1, r3
 8006dcc:	4610      	mov	r0, r2
 8006dce:	f002 ff37 	bl	8009c40 <SDMMC_CmdSendCSD>
 8006dd2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 8006dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d001      	beq.n	8006dde <SD_InitCard+0xda>
    {
      return errorstate;
 8006dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ddc:	e049      	b.n	8006e72 <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2100      	movs	r1, #0
 8006de4:	4618      	mov	r0, r3
 8006de6:	f002 fcf8 	bl	80097da <SDMMC_GetResponse>
 8006dea:	4602      	mov	r2, r0
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2104      	movs	r1, #4
 8006df6:	4618      	mov	r0, r3
 8006df8:	f002 fcef 	bl	80097da <SDMMC_GetResponse>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2108      	movs	r1, #8
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f002 fce6 	bl	80097da <SDMMC_GetResponse>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	210c      	movs	r1, #12
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f002 fcdd 	bl	80097da <SDMMC_GetResponse>
 8006e20:	4602      	mov	r2, r0
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2104      	movs	r1, #4
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f002 fcd4 	bl	80097da <SDMMC_GetResponse>
 8006e32:	4603      	mov	r3, r0
 8006e34:	0d1a      	lsrs	r2, r3, #20
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006e3a:	f107 0310 	add.w	r3, r7, #16
 8006e3e:	4619      	mov	r1, r3
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f7ff fba5 	bl	8006590 <HAL_SD_GetCardCSD>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d002      	beq.n	8006e52 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006e4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006e50:	e00f      	b.n	8006e72 <SD_InitCard+0x16e>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e5a:	041b      	lsls	r3, r3, #16
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	4610      	mov	r0, r2
 8006e60:	f002 fde6 	bl	8009a30 <SDMMC_CmdSelDesel>
 8006e64:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (errorstate != HAL_SD_ERROR_NONE)
 8006e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d001      	beq.n	8006e70 <SD_InitCard+0x16c>
  {
    return errorstate;
 8006e6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e6e:	e000      	b.n	8006e72 <SD_InitCard+0x16e>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3740      	adds	r7, #64	; 0x40
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
	...

08006e7c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b088      	sub	sp, #32
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e84:	2300      	movs	r3, #0
 8006e86:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	61fb      	str	r3, [r7, #28]
  uint32_t validvoltage = 0U;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 8006e90:	f7fa fc44 	bl	800171c <HAL_GetTick>
 8006e94:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f002 fdeb 	bl	8009a76 <SDMMC_CmdGoIdleState>
 8006ea0:	6138      	str	r0, [r7, #16]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d001      	beq.n	8006eac <SD_PowerON+0x30>
  {
    return errorstate;
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	e0e9      	b.n	8007080 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f002 fdfe 	bl	8009ab2 <SDMMC_CmdOperCond>
 8006eb6:	6138      	str	r0, [r7, #16]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00d      	beq.n	8006eda <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f002 fdd4 	bl	8009a76 <SDMMC_CmdGoIdleState>
 8006ece:	6138      	str	r0, [r7, #16]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d004      	beq.n	8006ee0 <SD_PowerON+0x64>
    {
      return errorstate;
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	e0d2      	b.n	8007080 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2201      	movs	r2, #1
 8006ede:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d137      	bne.n	8006f58 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2100      	movs	r1, #0
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f002 fdff 	bl	8009af2 <SDMMC_CmdAppCommand>
 8006ef4:	6138      	str	r0, [r7, #16]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d02d      	beq.n	8006f58 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006efc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006f00:	e0be      	b.n	8007080 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	2100      	movs	r1, #0
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f002 fdf2 	bl	8009af2 <SDMMC_CmdAppCommand>
 8006f0e:	6138      	str	r0, [r7, #16]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d001      	beq.n	8006f1a <SD_PowerON+0x9e>
    {
      return errorstate;
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	e0b2      	b.n	8007080 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	495a      	ldr	r1, [pc, #360]	; (8007088 <SD_PowerON+0x20c>)
 8006f20:	4618      	mov	r0, r3
 8006f22:	f002 fe09 	bl	8009b38 <SDMMC_CmdAppOperCommand>
 8006f26:	6138      	str	r0, [r7, #16]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d002      	beq.n	8006f34 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006f2e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006f32:	e0a5      	b.n	8007080 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2100      	movs	r1, #0
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f002 fc4d 	bl	80097da <SDMMC_GetResponse>
 8006f40:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	0fdb      	lsrs	r3, r3, #31
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d101      	bne.n	8006f4e <SD_PowerON+0xd2>
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e000      	b.n	8006f50 <SD_PowerON+0xd4>
 8006f4e:	2300      	movs	r3, #0
 8006f50:	61bb      	str	r3, [r7, #24]

    count++;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	3301      	adds	r3, #1
 8006f56:	60fb      	str	r3, [r7, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d802      	bhi.n	8006f68 <SD_PowerON+0xec>
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d0cc      	beq.n	8006f02 <SD_PowerON+0x86>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d902      	bls.n	8006f78 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006f72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f76:	e083      	b.n	8007080 <SD_PowerON+0x204>
  }

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d07d      	beq.n	800707e <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2201      	movs	r2, #1
 8006f86:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	699b      	ldr	r3, [r3, #24]
 8006f8c:	2b02      	cmp	r3, #2
 8006f8e:	d176      	bne.n	800707e <SD_PowerON+0x202>
    {
      if ((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d071      	beq.n	800707e <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fa0:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f042 0208 	orr.w	r2, r2, #8
 8006fb0:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f002 fec9 	bl	8009d4e <SDMMC_CmdVoltageSwitch>
 8006fbc:	6138      	str	r0, [r7, #16]
        if (errorstate != HAL_SD_ERROR_NONE)
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d00c      	beq.n	8006fde <SD_PowerON+0x162>
        {
          return errorstate;
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	e05b      	b.n	8007080 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while ((hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006fc8:	f7fa fba8 	bl	800171c <HAL_GetTick>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fd6:	d102      	bne.n	8006fde <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8006fd8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006fdc:	e050      	b.n	8007080 <SD_PowerON+0x204>
        while ((hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fe4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006fe8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006fec:	d1ec      	bne.n	8006fc8 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006ff6:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if ((hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ffe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007002:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007006:	d002      	beq.n	800700e <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8007008:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800700c:	e038      	b.n	8007080 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800700e:	2001      	movs	r0, #1
 8007010:	f7ff fab2 	bl	8006578 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f042 0204 	orr.w	r2, r2, #4
 8007022:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while ((hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8007024:	e00a      	b.n	800703c <SD_PowerON+0x1c0>
          {
            if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007026:	f7fa fb79 	bl	800171c <HAL_GetTick>
 800702a:	4602      	mov	r2, r0
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	1ad3      	subs	r3, r2, r3
 8007030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007034:	d102      	bne.n	800703c <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8007036:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800703a:	e021      	b.n	8007080 <SD_PowerON+0x204>
          while ((hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007046:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800704a:	d1ec      	bne.n	8007026 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007054:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if ((hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800705c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007060:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007064:	d102      	bne.n	800706c <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007066:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800706a:	e009      	b.n	8007080 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2213      	movs	r2, #19
 8007072:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f04f 32ff 	mov.w	r2, #4294967295
 800707c:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800707e:	2300      	movs	r3, #0
}
 8007080:	4618      	mov	r0, r3
 8007082:	3720      	adds	r7, #32
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}
 8007088:	c1100000 	.word	0xc1100000

0800708c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b08c      	sub	sp, #48	; 0x30
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007096:	f7fa fb41 	bl	800171c <HAL_GetTick>
 800709a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2100      	movs	r1, #0
 80070a6:	4618      	mov	r0, r3
 80070a8:	f002 fb97 	bl	80097da <SDMMC_GetResponse>
 80070ac:	4603      	mov	r3, r0
 80070ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070b6:	d102      	bne.n	80070be <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80070b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80070bc:	e0b0      	b.n	8007220 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2140      	movs	r1, #64	; 0x40
 80070c4:	4618      	mov	r0, r3
 80070c6:	f002 fbc7 	bl	8009858 <SDMMC_CmdBlockLength>
 80070ca:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80070cc:	6a3b      	ldr	r3, [r7, #32]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d005      	beq.n	80070de <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80070da:	6a3b      	ldr	r3, [r7, #32]
 80070dc:	e0a0      	b.n	8007220 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070e6:	041b      	lsls	r3, r3, #16
 80070e8:	4619      	mov	r1, r3
 80070ea:	4610      	mov	r0, r2
 80070ec:	f002 fd01 	bl	8009af2 <SDMMC_CmdAppCommand>
 80070f0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80070f2:	6a3b      	ldr	r3, [r7, #32]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d005      	beq.n	8007104 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007100:	6a3b      	ldr	r3, [r7, #32]
 8007102:	e08d      	b.n	8007220 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007104:	f04f 33ff 	mov.w	r3, #4294967295
 8007108:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800710a:	2340      	movs	r3, #64	; 0x40
 800710c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800710e:	2360      	movs	r3, #96	; 0x60
 8007110:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007112:	2302      	movs	r3, #2
 8007114:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007116:	2300      	movs	r3, #0
 8007118:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800711a:	2301      	movs	r3, #1
 800711c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f107 0208 	add.w	r2, r7, #8
 8007126:	4611      	mov	r1, r2
 8007128:	4618      	mov	r0, r3
 800712a:	f002 fb69 	bl	8009800 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4618      	mov	r0, r3
 8007134:	f002 fde9 	bl	8009d0a <SDMMC_CmdStatusRegister>
 8007138:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800713a:	6a3b      	ldr	r3, [r7, #32]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d02b      	beq.n	8007198 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007148:	6a3b      	ldr	r3, [r7, #32]
 800714a:	e069      	b.n	8007220 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007152:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007156:	2b00      	cmp	r3, #0
 8007158:	d013      	beq.n	8007182 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800715a:	2300      	movs	r3, #0
 800715c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800715e:	e00d      	b.n	800717c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4618      	mov	r0, r3
 8007166:	f002 fac3 	bl	80096f0 <SDMMC_ReadFIFO>
 800716a:	4602      	mov	r2, r0
 800716c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716e:	601a      	str	r2, [r3, #0]
        pData++;
 8007170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007172:	3304      	adds	r3, #4
 8007174:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8007176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007178:	3301      	adds	r3, #1
 800717a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800717c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800717e:	2b07      	cmp	r3, #7
 8007180:	d9ee      	bls.n	8007160 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007182:	f7fa facb 	bl	800171c <HAL_GetTick>
 8007186:	4602      	mov	r2, r0
 8007188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718a:	1ad3      	subs	r3, r2, r3
 800718c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007190:	d102      	bne.n	8007198 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007192:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007196:	e043      	b.n	8007220 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800719e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d0d2      	beq.n	800714c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ac:	f003 0308 	and.w	r3, r3, #8
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d001      	beq.n	80071b8 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80071b4:	2308      	movs	r3, #8
 80071b6:	e033      	b.n	8007220 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071be:	f003 0302 	and.w	r3, r3, #2
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d001      	beq.n	80071ca <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80071c6:	2302      	movs	r3, #2
 80071c8:	e02a      	b.n	8007220 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071d0:	f003 0320 	and.w	r3, r3, #32
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d017      	beq.n	8007208 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80071d8:	2320      	movs	r3, #32
 80071da:	e021      	b.n	8007220 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4618      	mov	r0, r3
 80071e2:	f002 fa85 	bl	80096f0 <SDMMC_ReadFIFO>
 80071e6:	4602      	mov	r2, r0
 80071e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ea:	601a      	str	r2, [r3, #0]
    pData++;
 80071ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ee:	3304      	adds	r3, #4
 80071f0:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80071f2:	f7fa fa93 	bl	800171c <HAL_GetTick>
 80071f6:	4602      	mov	r2, r0
 80071f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fa:	1ad3      	subs	r3, r2, r3
 80071fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007200:	d102      	bne.n	8007208 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007202:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007206:	e00b      	b.n	8007220 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800720e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007212:	2b00      	cmp	r3, #0
 8007214:	d1e2      	bne.n	80071dc <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a03      	ldr	r2, [pc, #12]	; (8007228 <SD_SendSDStatus+0x19c>)
 800721c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	3730      	adds	r7, #48	; 0x30
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}
 8007228:	18000f3a 	.word	0x18000f3a

0800722c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d102      	bne.n	8007242 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800723c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007240:	e018      	b.n	8007274 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800724a:	041b      	lsls	r3, r3, #16
 800724c:	4619      	mov	r1, r3
 800724e:	4610      	mov	r0, r2
 8007250:	f002 fd38 	bl	8009cc4 <SDMMC_CmdSendStatus>
 8007254:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d001      	beq.n	8007260 <SD_SendStatus+0x34>
  {
    return errorstate;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	e009      	b.n	8007274 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	2100      	movs	r1, #0
 8007266:	4618      	mov	r0, r3
 8007268:	f002 fab7 	bl	80097da <SDMMC_GetResponse>
 800726c:	4602      	mov	r2, r0
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007272:	2300      	movs	r3, #0
}
 8007274:	4618      	mov	r0, r3
 8007276:	3710      	adds	r7, #16
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b086      	sub	sp, #24
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007284:	2300      	movs	r3, #0
 8007286:	60fb      	str	r3, [r7, #12]
 8007288:	2300      	movs	r3, #0
 800728a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2100      	movs	r1, #0
 8007292:	4618      	mov	r0, r3
 8007294:	f002 faa1 	bl	80097da <SDMMC_GetResponse>
 8007298:	4603      	mov	r3, r0
 800729a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800729e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072a2:	d102      	bne.n	80072aa <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80072a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80072a8:	e02f      	b.n	800730a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80072aa:	f107 030c 	add.w	r3, r7, #12
 80072ae:	4619      	mov	r1, r3
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 f879 	bl	80073a8 <SD_FindSCR>
 80072b6:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d001      	beq.n	80072c2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	e023      	b.n	800730a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d01c      	beq.n	8007306 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072d4:	041b      	lsls	r3, r3, #16
 80072d6:	4619      	mov	r1, r3
 80072d8:	4610      	mov	r0, r2
 80072da:	f002 fc0a 	bl	8009af2 <SDMMC_CmdAppCommand>
 80072de:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d001      	beq.n	80072ea <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	e00f      	b.n	800730a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2102      	movs	r1, #2
 80072f0:	4618      	mov	r0, r3
 80072f2:	f002 fc41 	bl	8009b78 <SDMMC_CmdBusWidth>
 80072f6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d001      	beq.n	8007302 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	e003      	b.n	800730a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007302:	2300      	movs	r3, #0
 8007304:	e001      	b.n	800730a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007306:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800730a:	4618      	mov	r0, r3
 800730c:	3718      	adds	r7, #24
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}

08007312 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007312:	b580      	push	{r7, lr}
 8007314:	b086      	sub	sp, #24
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800731a:	2300      	movs	r3, #0
 800731c:	60fb      	str	r3, [r7, #12]
 800731e:	2300      	movs	r3, #0
 8007320:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2100      	movs	r1, #0
 8007328:	4618      	mov	r0, r3
 800732a:	f002 fa56 	bl	80097da <SDMMC_GetResponse>
 800732e:	4603      	mov	r3, r0
 8007330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007334:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007338:	d102      	bne.n	8007340 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800733a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800733e:	e02f      	b.n	80073a0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007340:	f107 030c 	add.w	r3, r7, #12
 8007344:	4619      	mov	r1, r3
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 f82e 	bl	80073a8 <SD_FindSCR>
 800734c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d001      	beq.n	8007358 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	e023      	b.n	80073a0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800735e:	2b00      	cmp	r3, #0
 8007360:	d01c      	beq.n	800739c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800736a:	041b      	lsls	r3, r3, #16
 800736c:	4619      	mov	r1, r3
 800736e:	4610      	mov	r0, r2
 8007370:	f002 fbbf 	bl	8009af2 <SDMMC_CmdAppCommand>
 8007374:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d001      	beq.n	8007380 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	e00f      	b.n	80073a0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2100      	movs	r1, #0
 8007386:	4618      	mov	r0, r3
 8007388:	f002 fbf6 	bl	8009b78 <SDMMC_CmdBusWidth>
 800738c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d001      	beq.n	8007398 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	e003      	b.n	80073a0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007398:	2300      	movs	r3, #0
 800739a:	e001      	b.n	80073a0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800739c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3718      	adds	r7, #24
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b08e      	sub	sp, #56	; 0x38
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80073b2:	f7fa f9b3 	bl	800171c <HAL_GetTick>
 80073b6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80073b8:	2300      	movs	r3, #0
 80073ba:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80073bc:	2300      	movs	r3, #0
 80073be:	60bb      	str	r3, [r7, #8]
 80073c0:	2300      	movs	r3, #0
 80073c2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2108      	movs	r1, #8
 80073ce:	4618      	mov	r0, r3
 80073d0:	f002 fa42 	bl	8009858 <SDMMC_CmdBlockLength>
 80073d4:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80073d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d001      	beq.n	80073e0 <SD_FindSCR+0x38>
  {
    return errorstate;
 80073dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073de:	e0ad      	b.n	800753c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073e8:	041b      	lsls	r3, r3, #16
 80073ea:	4619      	mov	r1, r3
 80073ec:	4610      	mov	r0, r2
 80073ee:	f002 fb80 	bl	8009af2 <SDMMC_CmdAppCommand>
 80073f2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80073f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d001      	beq.n	80073fe <SD_FindSCR+0x56>
  {
    return errorstate;
 80073fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073fc:	e09e      	b.n	800753c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80073fe:	f04f 33ff 	mov.w	r3, #4294967295
 8007402:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007404:	2308      	movs	r3, #8
 8007406:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007408:	2330      	movs	r3, #48	; 0x30
 800740a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800740c:	2302      	movs	r3, #2
 800740e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007410:	2300      	movs	r3, #0
 8007412:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007414:	2301      	movs	r3, #1
 8007416:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f107 0210 	add.w	r2, r7, #16
 8007420:	4611      	mov	r1, r2
 8007422:	4618      	mov	r0, r3
 8007424:	f002 f9ec 	bl	8009800 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4618      	mov	r0, r3
 800742e:	f002 fbc6 	bl	8009bbe <SDMMC_CmdSendSCR>
 8007432:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007436:	2b00      	cmp	r3, #0
 8007438:	d027      	beq.n	800748a <SD_FindSCR+0xe2>
  {
    return errorstate;
 800743a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743c:	e07e      	b.n	800753c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007444:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007448:	2b00      	cmp	r3, #0
 800744a:	d113      	bne.n	8007474 <SD_FindSCR+0xcc>
 800744c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800744e:	2b00      	cmp	r3, #0
 8007450:	d110      	bne.n	8007474 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4618      	mov	r0, r3
 8007458:	f002 f94a 	bl	80096f0 <SDMMC_ReadFIFO>
 800745c:	4603      	mov	r3, r0
 800745e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4618      	mov	r0, r3
 8007466:	f002 f943 	bl	80096f0 <SDMMC_ReadFIFO>
 800746a:	4603      	mov	r3, r0
 800746c:	60fb      	str	r3, [r7, #12]
      index++;
 800746e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007470:	3301      	adds	r3, #1
 8007472:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007474:	f7fa f952 	bl	800171c <HAL_GetTick>
 8007478:	4602      	mov	r2, r0
 800747a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747c:	1ad3      	subs	r3, r2, r3
 800747e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007482:	d102      	bne.n	800748a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007484:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007488:	e058      	b.n	800753c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007490:	f240 532a 	movw	r3, #1322	; 0x52a
 8007494:	4013      	ands	r3, r2
 8007496:	2b00      	cmp	r3, #0
 8007498:	d0d1      	beq.n	800743e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074a0:	f003 0308 	and.w	r3, r3, #8
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d005      	beq.n	80074b4 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2208      	movs	r2, #8
 80074ae:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80074b0:	2308      	movs	r3, #8
 80074b2:	e043      	b.n	800753c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074ba:	f003 0302 	and.w	r3, r3, #2
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d005      	beq.n	80074ce <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2202      	movs	r2, #2
 80074c8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80074ca:	2302      	movs	r3, #2
 80074cc:	e036      	b.n	800753c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074d4:	f003 0320 	and.w	r3, r3, #32
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d005      	beq.n	80074e8 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	2220      	movs	r2, #32
 80074e2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80074e4:	2320      	movs	r3, #32
 80074e6:	e029      	b.n	800753c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a15      	ldr	r2, [pc, #84]	; (8007544 <SD_FindSCR+0x19c>)
 80074ee:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	061a      	lsls	r2, r3, #24
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	021b      	lsls	r3, r3, #8
 80074f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80074fc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	0a1b      	lsrs	r3, r3, #8
 8007502:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007506:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	0e1b      	lsrs	r3, r3, #24
 800750c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800750e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007510:	601a      	str	r2, [r3, #0]
    scr++;
 8007512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007514:	3304      	adds	r3, #4
 8007516:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	061a      	lsls	r2, r3, #24
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	021b      	lsls	r3, r3, #8
 8007520:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007524:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	0a1b      	lsrs	r3, r3, #8
 800752a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800752e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	0e1b      	lsrs	r3, r3, #24
 8007534:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007538:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800753a:	2300      	movs	r3, #0
}
 800753c:	4618      	mov	r0, r3
 800753e:	3738      	adds	r7, #56	; 0x38
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}
 8007544:	18000f3a 	.word	0x18000f3a

08007548 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b086      	sub	sp, #24
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007554:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800755a:	2b1f      	cmp	r3, #31
 800755c:	d936      	bls.n	80075cc <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800755e:	2300      	movs	r3, #0
 8007560:	617b      	str	r3, [r7, #20]
 8007562:	e027      	b.n	80075b4 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4618      	mov	r0, r3
 800756a:	f002 f8c1 	bl	80096f0 <SDMMC_ReadFIFO>
 800756e:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	b2da      	uxtb	r2, r3
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	3301      	adds	r3, #1
 800757c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	0a1b      	lsrs	r3, r3, #8
 8007582:	b2da      	uxtb	r2, r3
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	3301      	adds	r3, #1
 800758c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	0c1b      	lsrs	r3, r3, #16
 8007592:	b2da      	uxtb	r2, r3
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	3301      	adds	r3, #1
 800759c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	0e1b      	lsrs	r3, r3, #24
 80075a2:	b2da      	uxtb	r2, r3
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	3301      	adds	r3, #1
 80075ac:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	3301      	adds	r3, #1
 80075b2:	617b      	str	r3, [r7, #20]
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	2b07      	cmp	r3, #7
 80075b8:	d9d4      	bls.n	8007564 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	693a      	ldr	r2, [r7, #16]
 80075be:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c4:	f1a3 0220 	sub.w	r2, r3, #32
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80075cc:	bf00      	nop
 80075ce:	3718      	adds	r7, #24
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b086      	sub	sp, #24
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6a1b      	ldr	r3, [r3, #32]
 80075e0:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e6:	2b1f      	cmp	r3, #31
 80075e8:	d93a      	bls.n	8007660 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 80075ea:	2300      	movs	r3, #0
 80075ec:	617b      	str	r3, [r7, #20]
 80075ee:	e02b      	b.n	8007648 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	60fb      	str	r3, [r7, #12]
      tmp++;
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	3301      	adds	r3, #1
 80075fa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	021a      	lsls	r2, r3, #8
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	4313      	orrs	r3, r2
 8007606:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	3301      	adds	r3, #1
 800760c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	041a      	lsls	r2, r3, #16
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	4313      	orrs	r3, r2
 8007618:	60fb      	str	r3, [r7, #12]
      tmp++;
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	3301      	adds	r3, #1
 800761e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	061a      	lsls	r2, r3, #24
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	4313      	orrs	r3, r2
 800762a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	3301      	adds	r3, #1
 8007630:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f107 020c 	add.w	r2, r7, #12
 800763a:	4611      	mov	r1, r2
 800763c:	4618      	mov	r0, r3
 800763e:	f002 f864 	bl	800970a <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	3301      	adds	r3, #1
 8007646:	617b      	str	r3, [r7, #20]
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	2b07      	cmp	r3, #7
 800764c:	d9d0      	bls.n	80075f0 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	693a      	ldr	r2, [r7, #16]
 8007652:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize -= 32U;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007658:	f1a3 0220 	sub.w	r2, r3, #32
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8007660:	bf00      	nop
 8007662:	3718      	adds	r7, #24
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8007668:	b480      	push	{r7}
 800766a:	b083      	sub	sp, #12
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8007670:	bf00      	nop
 8007672:	370c      	adds	r7, #12
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800767c:	b480      	push	{r7}
 800767e:	b083      	sub	sp, #12
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8007684:	bf00      	nop
 8007686:	370c      	adds	r7, #12
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr

08007690 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8007698:	bf00      	nop
 800769a:	370c      	adds	r7, #12
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80076ac:	bf00      	nop
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d101      	bne.n	80076ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e042      	b.n	8007750 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d106      	bne.n	80076e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f7f9 fd9f 	bl	8001220 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2224      	movs	r2, #36	; 0x24
 80076e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f022 0201 	bic.w	r2, r2, #1
 80076f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 fbe2 	bl	8007ec4 <UART_SetConfig>
 8007700:	4603      	mov	r3, r0
 8007702:	2b01      	cmp	r3, #1
 8007704:	d101      	bne.n	800770a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	e022      	b.n	8007750 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800770e:	2b00      	cmp	r3, #0
 8007710:	d002      	beq.n	8007718 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f001 f936 	bl	8008984 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	685a      	ldr	r2, [r3, #4]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007726:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	689a      	ldr	r2, [r3, #8]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007736:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f042 0201 	orr.w	r2, r2, #1
 8007746:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f001 f9bd 	bl	8008ac8 <UART_CheckIdleState>
 800774e:	4603      	mov	r3, r0
}
 8007750:	4618      	mov	r0, r3
 8007752:	3708      	adds	r7, #8
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b08a      	sub	sp, #40	; 0x28
 800775c:	af02      	add	r7, sp, #8
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	603b      	str	r3, [r7, #0]
 8007764:	4613      	mov	r3, r2
 8007766:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800776e:	2b20      	cmp	r3, #32
 8007770:	f040 8083 	bne.w	800787a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d002      	beq.n	8007780 <HAL_UART_Transmit+0x28>
 800777a:	88fb      	ldrh	r3, [r7, #6]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d101      	bne.n	8007784 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	e07b      	b.n	800787c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800778a:	2b01      	cmp	r3, #1
 800778c:	d101      	bne.n	8007792 <HAL_UART_Transmit+0x3a>
 800778e:	2302      	movs	r3, #2
 8007790:	e074      	b.n	800787c <HAL_UART_Transmit+0x124>
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2201      	movs	r2, #1
 8007796:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2200      	movs	r2, #0
 800779e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2221      	movs	r2, #33	; 0x21
 80077a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80077aa:	f7f9 ffb7 	bl	800171c <HAL_GetTick>
 80077ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	88fa      	ldrh	r2, [r7, #6]
 80077b4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	88fa      	ldrh	r2, [r7, #6]
 80077bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077c8:	d108      	bne.n	80077dc <HAL_UART_Transmit+0x84>
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	691b      	ldr	r3, [r3, #16]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d104      	bne.n	80077dc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80077d2:	2300      	movs	r3, #0
 80077d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	61bb      	str	r3, [r7, #24]
 80077da:	e003      	b.n	80077e4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80077e0:	2300      	movs	r3, #0
 80077e2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2200      	movs	r2, #0
 80077e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80077ec:	e02c      	b.n	8007848 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	9300      	str	r3, [sp, #0]
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	2200      	movs	r2, #0
 80077f6:	2180      	movs	r1, #128	; 0x80
 80077f8:	68f8      	ldr	r0, [r7, #12]
 80077fa:	f001 f9b0 	bl	8008b5e <UART_WaitOnFlagUntilTimeout>
 80077fe:	4603      	mov	r3, r0
 8007800:	2b00      	cmp	r3, #0
 8007802:	d001      	beq.n	8007808 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007804:	2303      	movs	r3, #3
 8007806:	e039      	b.n	800787c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d10b      	bne.n	8007826 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	881b      	ldrh	r3, [r3, #0]
 8007812:	461a      	mov	r2, r3
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800781c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800781e:	69bb      	ldr	r3, [r7, #24]
 8007820:	3302      	adds	r3, #2
 8007822:	61bb      	str	r3, [r7, #24]
 8007824:	e007      	b.n	8007836 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007826:	69fb      	ldr	r3, [r7, #28]
 8007828:	781a      	ldrb	r2, [r3, #0]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	3301      	adds	r3, #1
 8007834:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800783c:	b29b      	uxth	r3, r3
 800783e:	3b01      	subs	r3, #1
 8007840:	b29a      	uxth	r2, r3
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800784e:	b29b      	uxth	r3, r3
 8007850:	2b00      	cmp	r3, #0
 8007852:	d1cc      	bne.n	80077ee <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	9300      	str	r3, [sp, #0]
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	2200      	movs	r2, #0
 800785c:	2140      	movs	r1, #64	; 0x40
 800785e:	68f8      	ldr	r0, [r7, #12]
 8007860:	f001 f97d 	bl	8008b5e <UART_WaitOnFlagUntilTimeout>
 8007864:	4603      	mov	r3, r0
 8007866:	2b00      	cmp	r3, #0
 8007868:	d001      	beq.n	800786e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800786a:	2303      	movs	r3, #3
 800786c:	e006      	b.n	800787c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2220      	movs	r2, #32
 8007872:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007876:	2300      	movs	r3, #0
 8007878:	e000      	b.n	800787c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800787a:	2302      	movs	r3, #2
  }
}
 800787c:	4618      	mov	r0, r3
 800787e:	3720      	adds	r7, #32
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	4613      	mov	r3, r2
 8007890:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007898:	2b20      	cmp	r3, #32
 800789a:	d131      	bne.n	8007900 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d002      	beq.n	80078a8 <HAL_UART_Receive_IT+0x24>
 80078a2:	88fb      	ldrh	r3, [r7, #6]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d101      	bne.n	80078ac <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	e02a      	b.n	8007902 <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d101      	bne.n	80078ba <HAL_UART_Receive_IT+0x36>
 80078b6:	2302      	movs	r3, #2
 80078b8:	e023      	b.n	8007902 <HAL_UART_Receive_IT+0x7e>
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2201      	movs	r2, #1
 80078be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2200      	movs	r2, #0
 80078c6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a0f      	ldr	r2, [pc, #60]	; (800790c <HAL_UART_Receive_IT+0x88>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d00e      	beq.n	80078f0 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d007      	beq.n	80078f0 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80078ee:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80078f0:	88fb      	ldrh	r3, [r7, #6]
 80078f2:	461a      	mov	r2, r3
 80078f4:	68b9      	ldr	r1, [r7, #8]
 80078f6:	68f8      	ldr	r0, [r7, #12]
 80078f8:	f001 f9b2 	bl	8008c60 <UART_Start_Receive_IT>
 80078fc:	4603      	mov	r3, r0
 80078fe:	e000      	b.n	8007902 <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8007900:	2302      	movs	r3, #2
  }
}
 8007902:	4618      	mov	r0, r3
 8007904:	3710      	adds	r7, #16
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	58000c00 	.word	0x58000c00

08007910 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b088      	sub	sp, #32
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	69db      	ldr	r3, [r3, #28]
 800791e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007930:	69fa      	ldr	r2, [r7, #28]
 8007932:	f640 030f 	movw	r3, #2063	; 0x80f
 8007936:	4013      	ands	r3, r2
 8007938:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d118      	bne.n	8007972 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	f003 0320 	and.w	r3, r3, #32
 8007946:	2b00      	cmp	r3, #0
 8007948:	d013      	beq.n	8007972 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800794a:	69bb      	ldr	r3, [r7, #24]
 800794c:	f003 0320 	and.w	r3, r3, #32
 8007950:	2b00      	cmp	r3, #0
 8007952:	d104      	bne.n	800795e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800795a:	2b00      	cmp	r3, #0
 800795c:	d009      	beq.n	8007972 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007962:	2b00      	cmp	r3, #0
 8007964:	f000 8282 	beq.w	8007e6c <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	4798      	blx	r3
      }
      return;
 8007970:	e27c      	b.n	8007e6c <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	2b00      	cmp	r3, #0
 8007976:	f000 80ef 	beq.w	8007b58 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800797a:	697a      	ldr	r2, [r7, #20]
 800797c:	4b73      	ldr	r3, [pc, #460]	; (8007b4c <HAL_UART_IRQHandler+0x23c>)
 800797e:	4013      	ands	r3, r2
 8007980:	2b00      	cmp	r3, #0
 8007982:	d105      	bne.n	8007990 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007984:	69ba      	ldr	r2, [r7, #24]
 8007986:	4b72      	ldr	r3, [pc, #456]	; (8007b50 <HAL_UART_IRQHandler+0x240>)
 8007988:	4013      	ands	r3, r2
 800798a:	2b00      	cmp	r3, #0
 800798c:	f000 80e4 	beq.w	8007b58 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007990:	69fb      	ldr	r3, [r7, #28]
 8007992:	f003 0301 	and.w	r3, r3, #1
 8007996:	2b00      	cmp	r3, #0
 8007998:	d010      	beq.n	80079bc <HAL_UART_IRQHandler+0xac>
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00b      	beq.n	80079bc <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2201      	movs	r2, #1
 80079aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079b2:	f043 0201 	orr.w	r2, r3, #1
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	f003 0302 	and.w	r3, r3, #2
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d010      	beq.n	80079e8 <HAL_UART_IRQHandler+0xd8>
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	f003 0301 	and.w	r3, r3, #1
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d00b      	beq.n	80079e8 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2202      	movs	r2, #2
 80079d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079de:	f043 0204 	orr.w	r2, r3, #4
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	f003 0304 	and.w	r3, r3, #4
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d010      	beq.n	8007a14 <HAL_UART_IRQHandler+0x104>
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	f003 0301 	and.w	r3, r3, #1
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d00b      	beq.n	8007a14 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2204      	movs	r2, #4
 8007a02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a0a:	f043 0202 	orr.w	r2, r3, #2
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007a14:	69fb      	ldr	r3, [r7, #28]
 8007a16:	f003 0308 	and.w	r3, r3, #8
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d015      	beq.n	8007a4a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007a1e:	69bb      	ldr	r3, [r7, #24]
 8007a20:	f003 0320 	and.w	r3, r3, #32
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d104      	bne.n	8007a32 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007a28:	697a      	ldr	r2, [r7, #20]
 8007a2a:	4b48      	ldr	r3, [pc, #288]	; (8007b4c <HAL_UART_IRQHandler+0x23c>)
 8007a2c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00b      	beq.n	8007a4a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	2208      	movs	r2, #8
 8007a38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a40:	f043 0208 	orr.w	r2, r3, #8
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d011      	beq.n	8007a78 <HAL_UART_IRQHandler+0x168>
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d00c      	beq.n	8007a78 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a6e:	f043 0220 	orr.w	r2, r3, #32
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	f000 81f6 	beq.w	8007e70 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007a84:	69fb      	ldr	r3, [r7, #28]
 8007a86:	f003 0320 	and.w	r3, r3, #32
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d011      	beq.n	8007ab2 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007a8e:	69bb      	ldr	r3, [r7, #24]
 8007a90:	f003 0320 	and.w	r3, r3, #32
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d104      	bne.n	8007aa2 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d007      	beq.n	8007ab2 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d003      	beq.n	8007ab2 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ab8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ac4:	2b40      	cmp	r3, #64	; 0x40
 8007ac6:	d004      	beq.n	8007ad2 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d031      	beq.n	8007b36 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f001 f982 	bl	8008ddc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ae2:	2b40      	cmp	r3, #64	; 0x40
 8007ae4:	d123      	bne.n	8007b2e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	689a      	ldr	r2, [r3, #8]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007af4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d013      	beq.n	8007b26 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b02:	4a14      	ldr	r2, [pc, #80]	; (8007b54 <HAL_UART_IRQHandler+0x244>)
 8007b04:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7fa fa70 	bl	8001ff0 <HAL_DMA_Abort_IT>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d017      	beq.n	8007b46 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007b20:	4610      	mov	r0, r2
 8007b22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b24:	e00f      	b.n	8007b46 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 f9b6 	bl	8007e98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b2c:	e00b      	b.n	8007b46 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 f9b2 	bl	8007e98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b34:	e007      	b.n	8007b46 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 f9ae 	bl	8007e98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007b44:	e194      	b.n	8007e70 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b46:	bf00      	nop
    return;
 8007b48:	e192      	b.n	8007e70 <HAL_UART_IRQHandler+0x560>
 8007b4a:	bf00      	nop
 8007b4c:	10000001 	.word	0x10000001
 8007b50:	04000120 	.word	0x04000120
 8007b54:	08008e41 	.word	0x08008e41

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	f040 810f 	bne.w	8007d80 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	f003 0310 	and.w	r3, r3, #16
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f000 8109 	beq.w	8007d80 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	f003 0310 	and.w	r3, r3, #16
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	f000 8103 	beq.w	8007d80 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2210      	movs	r2, #16
 8007b80:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b8c:	2b40      	cmp	r3, #64	; 0x40
 8007b8e:	f040 80bb 	bne.w	8007d08 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a96      	ldr	r2, [pc, #600]	; (8007df4 <HAL_UART_IRQHandler+0x4e4>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d059      	beq.n	8007c52 <HAL_UART_IRQHandler+0x342>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a94      	ldr	r2, [pc, #592]	; (8007df8 <HAL_UART_IRQHandler+0x4e8>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d053      	beq.n	8007c52 <HAL_UART_IRQHandler+0x342>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a92      	ldr	r2, [pc, #584]	; (8007dfc <HAL_UART_IRQHandler+0x4ec>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d04d      	beq.n	8007c52 <HAL_UART_IRQHandler+0x342>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a90      	ldr	r2, [pc, #576]	; (8007e00 <HAL_UART_IRQHandler+0x4f0>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d047      	beq.n	8007c52 <HAL_UART_IRQHandler+0x342>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a8e      	ldr	r2, [pc, #568]	; (8007e04 <HAL_UART_IRQHandler+0x4f4>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d041      	beq.n	8007c52 <HAL_UART_IRQHandler+0x342>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a8c      	ldr	r2, [pc, #560]	; (8007e08 <HAL_UART_IRQHandler+0x4f8>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d03b      	beq.n	8007c52 <HAL_UART_IRQHandler+0x342>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a8a      	ldr	r2, [pc, #552]	; (8007e0c <HAL_UART_IRQHandler+0x4fc>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d035      	beq.n	8007c52 <HAL_UART_IRQHandler+0x342>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a88      	ldr	r2, [pc, #544]	; (8007e10 <HAL_UART_IRQHandler+0x500>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d02f      	beq.n	8007c52 <HAL_UART_IRQHandler+0x342>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a86      	ldr	r2, [pc, #536]	; (8007e14 <HAL_UART_IRQHandler+0x504>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d029      	beq.n	8007c52 <HAL_UART_IRQHandler+0x342>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a84      	ldr	r2, [pc, #528]	; (8007e18 <HAL_UART_IRQHandler+0x508>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d023      	beq.n	8007c52 <HAL_UART_IRQHandler+0x342>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a82      	ldr	r2, [pc, #520]	; (8007e1c <HAL_UART_IRQHandler+0x50c>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d01d      	beq.n	8007c52 <HAL_UART_IRQHandler+0x342>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a80      	ldr	r2, [pc, #512]	; (8007e20 <HAL_UART_IRQHandler+0x510>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d017      	beq.n	8007c52 <HAL_UART_IRQHandler+0x342>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a7e      	ldr	r2, [pc, #504]	; (8007e24 <HAL_UART_IRQHandler+0x514>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d011      	beq.n	8007c52 <HAL_UART_IRQHandler+0x342>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a7c      	ldr	r2, [pc, #496]	; (8007e28 <HAL_UART_IRQHandler+0x518>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d00b      	beq.n	8007c52 <HAL_UART_IRQHandler+0x342>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a7a      	ldr	r2, [pc, #488]	; (8007e2c <HAL_UART_IRQHandler+0x51c>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d005      	beq.n	8007c52 <HAL_UART_IRQHandler+0x342>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a78      	ldr	r2, [pc, #480]	; (8007e30 <HAL_UART_IRQHandler+0x520>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d105      	bne.n	8007c5e <HAL_UART_IRQHandler+0x34e>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	e004      	b.n	8007c68 <HAL_UART_IRQHandler+0x358>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8007c6a:	893b      	ldrh	r3, [r7, #8]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	f000 8101 	beq.w	8007e74 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007c78:	893a      	ldrh	r2, [r7, #8]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	f080 80fa 	bcs.w	8007e74 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	893a      	ldrh	r2, [r7, #8]
 8007c84:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c8c:	69db      	ldr	r3, [r3, #28]
 8007c8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c92:	d02b      	beq.n	8007cec <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ca2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	689a      	ldr	r2, [r3, #8]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f022 0201 	bic.w	r2, r2, #1
 8007cb2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	689a      	ldr	r2, [r3, #8]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cc2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2220      	movs	r2, #32
 8007cc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f022 0210 	bic.w	r2, r2, #16
 8007ce0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7f9 fe64 	bl	80019b4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	1ad3      	subs	r3, r2, r3
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	4619      	mov	r1, r3
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 f8d3 	bl	8007eac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d06:	e0b5      	b.n	8007e74 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	1ad3      	subs	r3, r2, r3
 8007d18:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	f000 80a8 	beq.w	8007e78 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8007d28:	897b      	ldrh	r3, [r7, #10]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	f000 80a4 	beq.w	8007e78 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007d3e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	6899      	ldr	r1, [r3, #8]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	4b3a      	ldr	r3, [pc, #232]	; (8007e34 <HAL_UART_IRQHandler+0x524>)
 8007d4c:	400b      	ands	r3, r1
 8007d4e:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2220      	movs	r2, #32
 8007d54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f022 0210 	bic.w	r2, r2, #16
 8007d72:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007d74:	897b      	ldrh	r3, [r7, #10]
 8007d76:	4619      	mov	r1, r3
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 f897 	bl	8007eac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d7e:	e07b      	b.n	8007e78 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007d80:	69fb      	ldr	r3, [r7, #28]
 8007d82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00d      	beq.n	8007da6 <HAL_UART_IRQHandler+0x496>
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d008      	beq.n	8007da6 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007d9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f001 fb5a 	bl	8009458 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007da4:	e06b      	b.n	8007e7e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007da6:	69fb      	ldr	r3, [r7, #28]
 8007da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d012      	beq.n	8007dd6 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007db0:	69bb      	ldr	r3, [r7, #24]
 8007db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d104      	bne.n	8007dc4 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d008      	beq.n	8007dd6 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d057      	beq.n	8007e7c <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	4798      	blx	r3
    }
    return;
 8007dd4:	e052      	b.n	8007e7c <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007dd6:	69fb      	ldr	r3, [r7, #28]
 8007dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d02b      	beq.n	8007e38 <HAL_UART_IRQHandler+0x528>
 8007de0:	69bb      	ldr	r3, [r7, #24]
 8007de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d026      	beq.n	8007e38 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f001 f83e 	bl	8008e6c <UART_EndTransmit_IT>
    return;
 8007df0:	e045      	b.n	8007e7e <HAL_UART_IRQHandler+0x56e>
 8007df2:	bf00      	nop
 8007df4:	40020010 	.word	0x40020010
 8007df8:	40020028 	.word	0x40020028
 8007dfc:	40020040 	.word	0x40020040
 8007e00:	40020058 	.word	0x40020058
 8007e04:	40020070 	.word	0x40020070
 8007e08:	40020088 	.word	0x40020088
 8007e0c:	400200a0 	.word	0x400200a0
 8007e10:	400200b8 	.word	0x400200b8
 8007e14:	40020410 	.word	0x40020410
 8007e18:	40020428 	.word	0x40020428
 8007e1c:	40020440 	.word	0x40020440
 8007e20:	40020458 	.word	0x40020458
 8007e24:	40020470 	.word	0x40020470
 8007e28:	40020488 	.word	0x40020488
 8007e2c:	400204a0 	.word	0x400204a0
 8007e30:	400204b8 	.word	0x400204b8
 8007e34:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007e38:	69fb      	ldr	r3, [r7, #28]
 8007e3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d008      	beq.n	8007e54 <HAL_UART_IRQHandler+0x544>
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d003      	beq.n	8007e54 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f001 fb17 	bl	8009480 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e52:	e014      	b.n	8007e7e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d00f      	beq.n	8007e7e <HAL_UART_IRQHandler+0x56e>
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	da0c      	bge.n	8007e7e <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f001 fb01 	bl	800946c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e6a:	e008      	b.n	8007e7e <HAL_UART_IRQHandler+0x56e>
      return;
 8007e6c:	bf00      	nop
 8007e6e:	e006      	b.n	8007e7e <HAL_UART_IRQHandler+0x56e>
    return;
 8007e70:	bf00      	nop
 8007e72:	e004      	b.n	8007e7e <HAL_UART_IRQHandler+0x56e>
      return;
 8007e74:	bf00      	nop
 8007e76:	e002      	b.n	8007e7e <HAL_UART_IRQHandler+0x56e>
      return;
 8007e78:	bf00      	nop
 8007e7a:	e000      	b.n	8007e7e <HAL_UART_IRQHandler+0x56e>
    return;
 8007e7c:	bf00      	nop
  }
}
 8007e7e:	3720      	adds	r7, #32
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007e8c:	bf00      	nop
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007ea0:	bf00      	nop
 8007ea2:	370c      	adds	r7, #12
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr

08007eac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007eb8:	bf00      	nop
 8007eba:	370c      	adds	r7, #12
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ec4:	b5b0      	push	{r4, r5, r7, lr}
 8007ec6:	b08e      	sub	sp, #56	; 0x38
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	689a      	ldr	r2, [r3, #8]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	431a      	orrs	r2, r3
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	695b      	ldr	r3, [r3, #20]
 8007ee0:	431a      	orrs	r2, r3
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	69db      	ldr	r3, [r3, #28]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	4bbf      	ldr	r3, [pc, #764]	; (80081f0 <UART_SetConfig+0x32c>)
 8007ef2:	4013      	ands	r3, r2
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	6812      	ldr	r2, [r2, #0]
 8007ef8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007efa:	430b      	orrs	r3, r1
 8007efc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	68da      	ldr	r2, [r3, #12]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	430a      	orrs	r2, r1
 8007f12:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	699b      	ldr	r3, [r3, #24]
 8007f18:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4ab5      	ldr	r2, [pc, #724]	; (80081f4 <UART_SetConfig+0x330>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d004      	beq.n	8007f2e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6a1b      	ldr	r3, [r3, #32]
 8007f28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	689a      	ldr	r2, [r3, #8]
 8007f34:	4bb0      	ldr	r3, [pc, #704]	; (80081f8 <UART_SetConfig+0x334>)
 8007f36:	4013      	ands	r3, r2
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	6812      	ldr	r2, [r2, #0]
 8007f3c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007f3e:	430b      	orrs	r3, r1
 8007f40:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f48:	f023 010f 	bic.w	r1, r3, #15
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	430a      	orrs	r2, r1
 8007f56:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4aa7      	ldr	r2, [pc, #668]	; (80081fc <UART_SetConfig+0x338>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d176      	bne.n	8008050 <UART_SetConfig+0x18c>
 8007f62:	4ba7      	ldr	r3, [pc, #668]	; (8008200 <UART_SetConfig+0x33c>)
 8007f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f6a:	2b28      	cmp	r3, #40	; 0x28
 8007f6c:	d86c      	bhi.n	8008048 <UART_SetConfig+0x184>
 8007f6e:	a201      	add	r2, pc, #4	; (adr r2, 8007f74 <UART_SetConfig+0xb0>)
 8007f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f74:	08008019 	.word	0x08008019
 8007f78:	08008049 	.word	0x08008049
 8007f7c:	08008049 	.word	0x08008049
 8007f80:	08008049 	.word	0x08008049
 8007f84:	08008049 	.word	0x08008049
 8007f88:	08008049 	.word	0x08008049
 8007f8c:	08008049 	.word	0x08008049
 8007f90:	08008049 	.word	0x08008049
 8007f94:	08008021 	.word	0x08008021
 8007f98:	08008049 	.word	0x08008049
 8007f9c:	08008049 	.word	0x08008049
 8007fa0:	08008049 	.word	0x08008049
 8007fa4:	08008049 	.word	0x08008049
 8007fa8:	08008049 	.word	0x08008049
 8007fac:	08008049 	.word	0x08008049
 8007fb0:	08008049 	.word	0x08008049
 8007fb4:	08008029 	.word	0x08008029
 8007fb8:	08008049 	.word	0x08008049
 8007fbc:	08008049 	.word	0x08008049
 8007fc0:	08008049 	.word	0x08008049
 8007fc4:	08008049 	.word	0x08008049
 8007fc8:	08008049 	.word	0x08008049
 8007fcc:	08008049 	.word	0x08008049
 8007fd0:	08008049 	.word	0x08008049
 8007fd4:	08008031 	.word	0x08008031
 8007fd8:	08008049 	.word	0x08008049
 8007fdc:	08008049 	.word	0x08008049
 8007fe0:	08008049 	.word	0x08008049
 8007fe4:	08008049 	.word	0x08008049
 8007fe8:	08008049 	.word	0x08008049
 8007fec:	08008049 	.word	0x08008049
 8007ff0:	08008049 	.word	0x08008049
 8007ff4:	08008039 	.word	0x08008039
 8007ff8:	08008049 	.word	0x08008049
 8007ffc:	08008049 	.word	0x08008049
 8008000:	08008049 	.word	0x08008049
 8008004:	08008049 	.word	0x08008049
 8008008:	08008049 	.word	0x08008049
 800800c:	08008049 	.word	0x08008049
 8008010:	08008049 	.word	0x08008049
 8008014:	08008041 	.word	0x08008041
 8008018:	2301      	movs	r3, #1
 800801a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800801e:	e222      	b.n	8008466 <UART_SetConfig+0x5a2>
 8008020:	2304      	movs	r3, #4
 8008022:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008026:	e21e      	b.n	8008466 <UART_SetConfig+0x5a2>
 8008028:	2308      	movs	r3, #8
 800802a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800802e:	e21a      	b.n	8008466 <UART_SetConfig+0x5a2>
 8008030:	2310      	movs	r3, #16
 8008032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008036:	e216      	b.n	8008466 <UART_SetConfig+0x5a2>
 8008038:	2320      	movs	r3, #32
 800803a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800803e:	e212      	b.n	8008466 <UART_SetConfig+0x5a2>
 8008040:	2340      	movs	r3, #64	; 0x40
 8008042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008046:	e20e      	b.n	8008466 <UART_SetConfig+0x5a2>
 8008048:	2380      	movs	r3, #128	; 0x80
 800804a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800804e:	e20a      	b.n	8008466 <UART_SetConfig+0x5a2>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a6b      	ldr	r2, [pc, #428]	; (8008204 <UART_SetConfig+0x340>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d130      	bne.n	80080bc <UART_SetConfig+0x1f8>
 800805a:	4b69      	ldr	r3, [pc, #420]	; (8008200 <UART_SetConfig+0x33c>)
 800805c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800805e:	f003 0307 	and.w	r3, r3, #7
 8008062:	2b05      	cmp	r3, #5
 8008064:	d826      	bhi.n	80080b4 <UART_SetConfig+0x1f0>
 8008066:	a201      	add	r2, pc, #4	; (adr r2, 800806c <UART_SetConfig+0x1a8>)
 8008068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800806c:	08008085 	.word	0x08008085
 8008070:	0800808d 	.word	0x0800808d
 8008074:	08008095 	.word	0x08008095
 8008078:	0800809d 	.word	0x0800809d
 800807c:	080080a5 	.word	0x080080a5
 8008080:	080080ad 	.word	0x080080ad
 8008084:	2300      	movs	r3, #0
 8008086:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800808a:	e1ec      	b.n	8008466 <UART_SetConfig+0x5a2>
 800808c:	2304      	movs	r3, #4
 800808e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008092:	e1e8      	b.n	8008466 <UART_SetConfig+0x5a2>
 8008094:	2308      	movs	r3, #8
 8008096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800809a:	e1e4      	b.n	8008466 <UART_SetConfig+0x5a2>
 800809c:	2310      	movs	r3, #16
 800809e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080a2:	e1e0      	b.n	8008466 <UART_SetConfig+0x5a2>
 80080a4:	2320      	movs	r3, #32
 80080a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080aa:	e1dc      	b.n	8008466 <UART_SetConfig+0x5a2>
 80080ac:	2340      	movs	r3, #64	; 0x40
 80080ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080b2:	e1d8      	b.n	8008466 <UART_SetConfig+0x5a2>
 80080b4:	2380      	movs	r3, #128	; 0x80
 80080b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080ba:	e1d4      	b.n	8008466 <UART_SetConfig+0x5a2>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a51      	ldr	r2, [pc, #324]	; (8008208 <UART_SetConfig+0x344>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d130      	bne.n	8008128 <UART_SetConfig+0x264>
 80080c6:	4b4e      	ldr	r3, [pc, #312]	; (8008200 <UART_SetConfig+0x33c>)
 80080c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080ca:	f003 0307 	and.w	r3, r3, #7
 80080ce:	2b05      	cmp	r3, #5
 80080d0:	d826      	bhi.n	8008120 <UART_SetConfig+0x25c>
 80080d2:	a201      	add	r2, pc, #4	; (adr r2, 80080d8 <UART_SetConfig+0x214>)
 80080d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d8:	080080f1 	.word	0x080080f1
 80080dc:	080080f9 	.word	0x080080f9
 80080e0:	08008101 	.word	0x08008101
 80080e4:	08008109 	.word	0x08008109
 80080e8:	08008111 	.word	0x08008111
 80080ec:	08008119 	.word	0x08008119
 80080f0:	2300      	movs	r3, #0
 80080f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080f6:	e1b6      	b.n	8008466 <UART_SetConfig+0x5a2>
 80080f8:	2304      	movs	r3, #4
 80080fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080fe:	e1b2      	b.n	8008466 <UART_SetConfig+0x5a2>
 8008100:	2308      	movs	r3, #8
 8008102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008106:	e1ae      	b.n	8008466 <UART_SetConfig+0x5a2>
 8008108:	2310      	movs	r3, #16
 800810a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800810e:	e1aa      	b.n	8008466 <UART_SetConfig+0x5a2>
 8008110:	2320      	movs	r3, #32
 8008112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008116:	e1a6      	b.n	8008466 <UART_SetConfig+0x5a2>
 8008118:	2340      	movs	r3, #64	; 0x40
 800811a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800811e:	e1a2      	b.n	8008466 <UART_SetConfig+0x5a2>
 8008120:	2380      	movs	r3, #128	; 0x80
 8008122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008126:	e19e      	b.n	8008466 <UART_SetConfig+0x5a2>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a37      	ldr	r2, [pc, #220]	; (800820c <UART_SetConfig+0x348>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d130      	bne.n	8008194 <UART_SetConfig+0x2d0>
 8008132:	4b33      	ldr	r3, [pc, #204]	; (8008200 <UART_SetConfig+0x33c>)
 8008134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008136:	f003 0307 	and.w	r3, r3, #7
 800813a:	2b05      	cmp	r3, #5
 800813c:	d826      	bhi.n	800818c <UART_SetConfig+0x2c8>
 800813e:	a201      	add	r2, pc, #4	; (adr r2, 8008144 <UART_SetConfig+0x280>)
 8008140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008144:	0800815d 	.word	0x0800815d
 8008148:	08008165 	.word	0x08008165
 800814c:	0800816d 	.word	0x0800816d
 8008150:	08008175 	.word	0x08008175
 8008154:	0800817d 	.word	0x0800817d
 8008158:	08008185 	.word	0x08008185
 800815c:	2300      	movs	r3, #0
 800815e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008162:	e180      	b.n	8008466 <UART_SetConfig+0x5a2>
 8008164:	2304      	movs	r3, #4
 8008166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800816a:	e17c      	b.n	8008466 <UART_SetConfig+0x5a2>
 800816c:	2308      	movs	r3, #8
 800816e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008172:	e178      	b.n	8008466 <UART_SetConfig+0x5a2>
 8008174:	2310      	movs	r3, #16
 8008176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800817a:	e174      	b.n	8008466 <UART_SetConfig+0x5a2>
 800817c:	2320      	movs	r3, #32
 800817e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008182:	e170      	b.n	8008466 <UART_SetConfig+0x5a2>
 8008184:	2340      	movs	r3, #64	; 0x40
 8008186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800818a:	e16c      	b.n	8008466 <UART_SetConfig+0x5a2>
 800818c:	2380      	movs	r3, #128	; 0x80
 800818e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008192:	e168      	b.n	8008466 <UART_SetConfig+0x5a2>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a1d      	ldr	r2, [pc, #116]	; (8008210 <UART_SetConfig+0x34c>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d142      	bne.n	8008224 <UART_SetConfig+0x360>
 800819e:	4b18      	ldr	r3, [pc, #96]	; (8008200 <UART_SetConfig+0x33c>)
 80081a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081a2:	f003 0307 	and.w	r3, r3, #7
 80081a6:	2b05      	cmp	r3, #5
 80081a8:	d838      	bhi.n	800821c <UART_SetConfig+0x358>
 80081aa:	a201      	add	r2, pc, #4	; (adr r2, 80081b0 <UART_SetConfig+0x2ec>)
 80081ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081b0:	080081c9 	.word	0x080081c9
 80081b4:	080081d1 	.word	0x080081d1
 80081b8:	080081d9 	.word	0x080081d9
 80081bc:	080081e1 	.word	0x080081e1
 80081c0:	080081e9 	.word	0x080081e9
 80081c4:	08008215 	.word	0x08008215
 80081c8:	2300      	movs	r3, #0
 80081ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081ce:	e14a      	b.n	8008466 <UART_SetConfig+0x5a2>
 80081d0:	2304      	movs	r3, #4
 80081d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081d6:	e146      	b.n	8008466 <UART_SetConfig+0x5a2>
 80081d8:	2308      	movs	r3, #8
 80081da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081de:	e142      	b.n	8008466 <UART_SetConfig+0x5a2>
 80081e0:	2310      	movs	r3, #16
 80081e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081e6:	e13e      	b.n	8008466 <UART_SetConfig+0x5a2>
 80081e8:	2320      	movs	r3, #32
 80081ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081ee:	e13a      	b.n	8008466 <UART_SetConfig+0x5a2>
 80081f0:	cfff69f3 	.word	0xcfff69f3
 80081f4:	58000c00 	.word	0x58000c00
 80081f8:	11fff4ff 	.word	0x11fff4ff
 80081fc:	40011000 	.word	0x40011000
 8008200:	58024400 	.word	0x58024400
 8008204:	40004400 	.word	0x40004400
 8008208:	40004800 	.word	0x40004800
 800820c:	40004c00 	.word	0x40004c00
 8008210:	40005000 	.word	0x40005000
 8008214:	2340      	movs	r3, #64	; 0x40
 8008216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800821a:	e124      	b.n	8008466 <UART_SetConfig+0x5a2>
 800821c:	2380      	movs	r3, #128	; 0x80
 800821e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008222:	e120      	b.n	8008466 <UART_SetConfig+0x5a2>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4acc      	ldr	r2, [pc, #816]	; (800855c <UART_SetConfig+0x698>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d176      	bne.n	800831c <UART_SetConfig+0x458>
 800822e:	4bcc      	ldr	r3, [pc, #816]	; (8008560 <UART_SetConfig+0x69c>)
 8008230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008232:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008236:	2b28      	cmp	r3, #40	; 0x28
 8008238:	d86c      	bhi.n	8008314 <UART_SetConfig+0x450>
 800823a:	a201      	add	r2, pc, #4	; (adr r2, 8008240 <UART_SetConfig+0x37c>)
 800823c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008240:	080082e5 	.word	0x080082e5
 8008244:	08008315 	.word	0x08008315
 8008248:	08008315 	.word	0x08008315
 800824c:	08008315 	.word	0x08008315
 8008250:	08008315 	.word	0x08008315
 8008254:	08008315 	.word	0x08008315
 8008258:	08008315 	.word	0x08008315
 800825c:	08008315 	.word	0x08008315
 8008260:	080082ed 	.word	0x080082ed
 8008264:	08008315 	.word	0x08008315
 8008268:	08008315 	.word	0x08008315
 800826c:	08008315 	.word	0x08008315
 8008270:	08008315 	.word	0x08008315
 8008274:	08008315 	.word	0x08008315
 8008278:	08008315 	.word	0x08008315
 800827c:	08008315 	.word	0x08008315
 8008280:	080082f5 	.word	0x080082f5
 8008284:	08008315 	.word	0x08008315
 8008288:	08008315 	.word	0x08008315
 800828c:	08008315 	.word	0x08008315
 8008290:	08008315 	.word	0x08008315
 8008294:	08008315 	.word	0x08008315
 8008298:	08008315 	.word	0x08008315
 800829c:	08008315 	.word	0x08008315
 80082a0:	080082fd 	.word	0x080082fd
 80082a4:	08008315 	.word	0x08008315
 80082a8:	08008315 	.word	0x08008315
 80082ac:	08008315 	.word	0x08008315
 80082b0:	08008315 	.word	0x08008315
 80082b4:	08008315 	.word	0x08008315
 80082b8:	08008315 	.word	0x08008315
 80082bc:	08008315 	.word	0x08008315
 80082c0:	08008305 	.word	0x08008305
 80082c4:	08008315 	.word	0x08008315
 80082c8:	08008315 	.word	0x08008315
 80082cc:	08008315 	.word	0x08008315
 80082d0:	08008315 	.word	0x08008315
 80082d4:	08008315 	.word	0x08008315
 80082d8:	08008315 	.word	0x08008315
 80082dc:	08008315 	.word	0x08008315
 80082e0:	0800830d 	.word	0x0800830d
 80082e4:	2301      	movs	r3, #1
 80082e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082ea:	e0bc      	b.n	8008466 <UART_SetConfig+0x5a2>
 80082ec:	2304      	movs	r3, #4
 80082ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082f2:	e0b8      	b.n	8008466 <UART_SetConfig+0x5a2>
 80082f4:	2308      	movs	r3, #8
 80082f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082fa:	e0b4      	b.n	8008466 <UART_SetConfig+0x5a2>
 80082fc:	2310      	movs	r3, #16
 80082fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008302:	e0b0      	b.n	8008466 <UART_SetConfig+0x5a2>
 8008304:	2320      	movs	r3, #32
 8008306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800830a:	e0ac      	b.n	8008466 <UART_SetConfig+0x5a2>
 800830c:	2340      	movs	r3, #64	; 0x40
 800830e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008312:	e0a8      	b.n	8008466 <UART_SetConfig+0x5a2>
 8008314:	2380      	movs	r3, #128	; 0x80
 8008316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800831a:	e0a4      	b.n	8008466 <UART_SetConfig+0x5a2>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a90      	ldr	r2, [pc, #576]	; (8008564 <UART_SetConfig+0x6a0>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d130      	bne.n	8008388 <UART_SetConfig+0x4c4>
 8008326:	4b8e      	ldr	r3, [pc, #568]	; (8008560 <UART_SetConfig+0x69c>)
 8008328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800832a:	f003 0307 	and.w	r3, r3, #7
 800832e:	2b05      	cmp	r3, #5
 8008330:	d826      	bhi.n	8008380 <UART_SetConfig+0x4bc>
 8008332:	a201      	add	r2, pc, #4	; (adr r2, 8008338 <UART_SetConfig+0x474>)
 8008334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008338:	08008351 	.word	0x08008351
 800833c:	08008359 	.word	0x08008359
 8008340:	08008361 	.word	0x08008361
 8008344:	08008369 	.word	0x08008369
 8008348:	08008371 	.word	0x08008371
 800834c:	08008379 	.word	0x08008379
 8008350:	2300      	movs	r3, #0
 8008352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008356:	e086      	b.n	8008466 <UART_SetConfig+0x5a2>
 8008358:	2304      	movs	r3, #4
 800835a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800835e:	e082      	b.n	8008466 <UART_SetConfig+0x5a2>
 8008360:	2308      	movs	r3, #8
 8008362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008366:	e07e      	b.n	8008466 <UART_SetConfig+0x5a2>
 8008368:	2310      	movs	r3, #16
 800836a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800836e:	e07a      	b.n	8008466 <UART_SetConfig+0x5a2>
 8008370:	2320      	movs	r3, #32
 8008372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008376:	e076      	b.n	8008466 <UART_SetConfig+0x5a2>
 8008378:	2340      	movs	r3, #64	; 0x40
 800837a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800837e:	e072      	b.n	8008466 <UART_SetConfig+0x5a2>
 8008380:	2380      	movs	r3, #128	; 0x80
 8008382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008386:	e06e      	b.n	8008466 <UART_SetConfig+0x5a2>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a76      	ldr	r2, [pc, #472]	; (8008568 <UART_SetConfig+0x6a4>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d130      	bne.n	80083f4 <UART_SetConfig+0x530>
 8008392:	4b73      	ldr	r3, [pc, #460]	; (8008560 <UART_SetConfig+0x69c>)
 8008394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008396:	f003 0307 	and.w	r3, r3, #7
 800839a:	2b05      	cmp	r3, #5
 800839c:	d826      	bhi.n	80083ec <UART_SetConfig+0x528>
 800839e:	a201      	add	r2, pc, #4	; (adr r2, 80083a4 <UART_SetConfig+0x4e0>)
 80083a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a4:	080083bd 	.word	0x080083bd
 80083a8:	080083c5 	.word	0x080083c5
 80083ac:	080083cd 	.word	0x080083cd
 80083b0:	080083d5 	.word	0x080083d5
 80083b4:	080083dd 	.word	0x080083dd
 80083b8:	080083e5 	.word	0x080083e5
 80083bc:	2300      	movs	r3, #0
 80083be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083c2:	e050      	b.n	8008466 <UART_SetConfig+0x5a2>
 80083c4:	2304      	movs	r3, #4
 80083c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083ca:	e04c      	b.n	8008466 <UART_SetConfig+0x5a2>
 80083cc:	2308      	movs	r3, #8
 80083ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083d2:	e048      	b.n	8008466 <UART_SetConfig+0x5a2>
 80083d4:	2310      	movs	r3, #16
 80083d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083da:	e044      	b.n	8008466 <UART_SetConfig+0x5a2>
 80083dc:	2320      	movs	r3, #32
 80083de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083e2:	e040      	b.n	8008466 <UART_SetConfig+0x5a2>
 80083e4:	2340      	movs	r3, #64	; 0x40
 80083e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083ea:	e03c      	b.n	8008466 <UART_SetConfig+0x5a2>
 80083ec:	2380      	movs	r3, #128	; 0x80
 80083ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083f2:	e038      	b.n	8008466 <UART_SetConfig+0x5a2>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a5c      	ldr	r2, [pc, #368]	; (800856c <UART_SetConfig+0x6a8>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d130      	bne.n	8008460 <UART_SetConfig+0x59c>
 80083fe:	4b58      	ldr	r3, [pc, #352]	; (8008560 <UART_SetConfig+0x69c>)
 8008400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008402:	f003 0307 	and.w	r3, r3, #7
 8008406:	2b05      	cmp	r3, #5
 8008408:	d826      	bhi.n	8008458 <UART_SetConfig+0x594>
 800840a:	a201      	add	r2, pc, #4	; (adr r2, 8008410 <UART_SetConfig+0x54c>)
 800840c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008410:	08008429 	.word	0x08008429
 8008414:	08008431 	.word	0x08008431
 8008418:	08008439 	.word	0x08008439
 800841c:	08008441 	.word	0x08008441
 8008420:	08008449 	.word	0x08008449
 8008424:	08008451 	.word	0x08008451
 8008428:	2302      	movs	r3, #2
 800842a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800842e:	e01a      	b.n	8008466 <UART_SetConfig+0x5a2>
 8008430:	2304      	movs	r3, #4
 8008432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008436:	e016      	b.n	8008466 <UART_SetConfig+0x5a2>
 8008438:	2308      	movs	r3, #8
 800843a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800843e:	e012      	b.n	8008466 <UART_SetConfig+0x5a2>
 8008440:	2310      	movs	r3, #16
 8008442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008446:	e00e      	b.n	8008466 <UART_SetConfig+0x5a2>
 8008448:	2320      	movs	r3, #32
 800844a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800844e:	e00a      	b.n	8008466 <UART_SetConfig+0x5a2>
 8008450:	2340      	movs	r3, #64	; 0x40
 8008452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008456:	e006      	b.n	8008466 <UART_SetConfig+0x5a2>
 8008458:	2380      	movs	r3, #128	; 0x80
 800845a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800845e:	e002      	b.n	8008466 <UART_SetConfig+0x5a2>
 8008460:	2380      	movs	r3, #128	; 0x80
 8008462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a40      	ldr	r2, [pc, #256]	; (800856c <UART_SetConfig+0x6a8>)
 800846c:	4293      	cmp	r3, r2
 800846e:	f040 80ef 	bne.w	8008650 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008472:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008476:	2b20      	cmp	r3, #32
 8008478:	dc46      	bgt.n	8008508 <UART_SetConfig+0x644>
 800847a:	2b02      	cmp	r3, #2
 800847c:	f2c0 8081 	blt.w	8008582 <UART_SetConfig+0x6be>
 8008480:	3b02      	subs	r3, #2
 8008482:	2b1e      	cmp	r3, #30
 8008484:	d87d      	bhi.n	8008582 <UART_SetConfig+0x6be>
 8008486:	a201      	add	r2, pc, #4	; (adr r2, 800848c <UART_SetConfig+0x5c8>)
 8008488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800848c:	0800850f 	.word	0x0800850f
 8008490:	08008583 	.word	0x08008583
 8008494:	08008517 	.word	0x08008517
 8008498:	08008583 	.word	0x08008583
 800849c:	08008583 	.word	0x08008583
 80084a0:	08008583 	.word	0x08008583
 80084a4:	08008527 	.word	0x08008527
 80084a8:	08008583 	.word	0x08008583
 80084ac:	08008583 	.word	0x08008583
 80084b0:	08008583 	.word	0x08008583
 80084b4:	08008583 	.word	0x08008583
 80084b8:	08008583 	.word	0x08008583
 80084bc:	08008583 	.word	0x08008583
 80084c0:	08008583 	.word	0x08008583
 80084c4:	08008537 	.word	0x08008537
 80084c8:	08008583 	.word	0x08008583
 80084cc:	08008583 	.word	0x08008583
 80084d0:	08008583 	.word	0x08008583
 80084d4:	08008583 	.word	0x08008583
 80084d8:	08008583 	.word	0x08008583
 80084dc:	08008583 	.word	0x08008583
 80084e0:	08008583 	.word	0x08008583
 80084e4:	08008583 	.word	0x08008583
 80084e8:	08008583 	.word	0x08008583
 80084ec:	08008583 	.word	0x08008583
 80084f0:	08008583 	.word	0x08008583
 80084f4:	08008583 	.word	0x08008583
 80084f8:	08008583 	.word	0x08008583
 80084fc:	08008583 	.word	0x08008583
 8008500:	08008583 	.word	0x08008583
 8008504:	08008575 	.word	0x08008575
 8008508:	2b40      	cmp	r3, #64	; 0x40
 800850a:	d036      	beq.n	800857a <UART_SetConfig+0x6b6>
 800850c:	e039      	b.n	8008582 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800850e:	f7fc fe83 	bl	8005218 <HAL_RCCEx_GetD3PCLK1Freq>
 8008512:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008514:	e03b      	b.n	800858e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008516:	f107 0314 	add.w	r3, r7, #20
 800851a:	4618      	mov	r0, r3
 800851c:	f7fc fe92 	bl	8005244 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008520:	69bb      	ldr	r3, [r7, #24]
 8008522:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008524:	e033      	b.n	800858e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008526:	f107 0308 	add.w	r3, r7, #8
 800852a:	4618      	mov	r0, r3
 800852c:	f7fc ffde 	bl	80054ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008534:	e02b      	b.n	800858e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008536:	4b0a      	ldr	r3, [pc, #40]	; (8008560 <UART_SetConfig+0x69c>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f003 0320 	and.w	r3, r3, #32
 800853e:	2b00      	cmp	r3, #0
 8008540:	d009      	beq.n	8008556 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008542:	4b07      	ldr	r3, [pc, #28]	; (8008560 <UART_SetConfig+0x69c>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	08db      	lsrs	r3, r3, #3
 8008548:	f003 0303 	and.w	r3, r3, #3
 800854c:	4a08      	ldr	r2, [pc, #32]	; (8008570 <UART_SetConfig+0x6ac>)
 800854e:	fa22 f303 	lsr.w	r3, r2, r3
 8008552:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008554:	e01b      	b.n	800858e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8008556:	4b06      	ldr	r3, [pc, #24]	; (8008570 <UART_SetConfig+0x6ac>)
 8008558:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800855a:	e018      	b.n	800858e <UART_SetConfig+0x6ca>
 800855c:	40011400 	.word	0x40011400
 8008560:	58024400 	.word	0x58024400
 8008564:	40007800 	.word	0x40007800
 8008568:	40007c00 	.word	0x40007c00
 800856c:	58000c00 	.word	0x58000c00
 8008570:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008574:	4bc4      	ldr	r3, [pc, #784]	; (8008888 <UART_SetConfig+0x9c4>)
 8008576:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008578:	e009      	b.n	800858e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800857a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800857e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008580:	e005      	b.n	800858e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8008582:	2300      	movs	r3, #0
 8008584:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008586:	2301      	movs	r3, #1
 8008588:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800858c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800858e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008590:	2b00      	cmp	r3, #0
 8008592:	f000 81da 	beq.w	800894a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800859a:	4abc      	ldr	r2, [pc, #752]	; (800888c <UART_SetConfig+0x9c8>)
 800859c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085a0:	461a      	mov	r2, r3
 80085a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80085a8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	685a      	ldr	r2, [r3, #4]
 80085ae:	4613      	mov	r3, r2
 80085b0:	005b      	lsls	r3, r3, #1
 80085b2:	4413      	add	r3, r2
 80085b4:	6a3a      	ldr	r2, [r7, #32]
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d305      	bcc.n	80085c6 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80085c0:	6a3a      	ldr	r2, [r7, #32]
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d903      	bls.n	80085ce <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 80085c6:	2301      	movs	r3, #1
 80085c8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80085cc:	e1bd      	b.n	800894a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d0:	4618      	mov	r0, r3
 80085d2:	f04f 0100 	mov.w	r1, #0
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085da:	4aac      	ldr	r2, [pc, #688]	; (800888c <UART_SetConfig+0x9c8>)
 80085dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085e0:	b29a      	uxth	r2, r3
 80085e2:	f04f 0300 	mov.w	r3, #0
 80085e6:	f7f7 fecb 	bl	8000380 <__aeabi_uldivmod>
 80085ea:	4602      	mov	r2, r0
 80085ec:	460b      	mov	r3, r1
 80085ee:	4610      	mov	r0, r2
 80085f0:	4619      	mov	r1, r3
 80085f2:	f04f 0200 	mov.w	r2, #0
 80085f6:	f04f 0300 	mov.w	r3, #0
 80085fa:	020b      	lsls	r3, r1, #8
 80085fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008600:	0202      	lsls	r2, r0, #8
 8008602:	6879      	ldr	r1, [r7, #4]
 8008604:	6849      	ldr	r1, [r1, #4]
 8008606:	0849      	lsrs	r1, r1, #1
 8008608:	4608      	mov	r0, r1
 800860a:	f04f 0100 	mov.w	r1, #0
 800860e:	1814      	adds	r4, r2, r0
 8008610:	eb43 0501 	adc.w	r5, r3, r1
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	461a      	mov	r2, r3
 800861a:	f04f 0300 	mov.w	r3, #0
 800861e:	4620      	mov	r0, r4
 8008620:	4629      	mov	r1, r5
 8008622:	f7f7 fead 	bl	8000380 <__aeabi_uldivmod>
 8008626:	4602      	mov	r2, r0
 8008628:	460b      	mov	r3, r1
 800862a:	4613      	mov	r3, r2
 800862c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800862e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008630:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008634:	d308      	bcc.n	8008648 <UART_SetConfig+0x784>
 8008636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008638:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800863c:	d204      	bcs.n	8008648 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008644:	60da      	str	r2, [r3, #12]
 8008646:	e180      	b.n	800894a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8008648:	2301      	movs	r3, #1
 800864a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800864e:	e17c      	b.n	800894a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	69db      	ldr	r3, [r3, #28]
 8008654:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008658:	f040 80bf 	bne.w	80087da <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800865c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008660:	2b20      	cmp	r3, #32
 8008662:	dc49      	bgt.n	80086f8 <UART_SetConfig+0x834>
 8008664:	2b00      	cmp	r3, #0
 8008666:	db7c      	blt.n	8008762 <UART_SetConfig+0x89e>
 8008668:	2b20      	cmp	r3, #32
 800866a:	d87a      	bhi.n	8008762 <UART_SetConfig+0x89e>
 800866c:	a201      	add	r2, pc, #4	; (adr r2, 8008674 <UART_SetConfig+0x7b0>)
 800866e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008672:	bf00      	nop
 8008674:	080086ff 	.word	0x080086ff
 8008678:	08008707 	.word	0x08008707
 800867c:	08008763 	.word	0x08008763
 8008680:	08008763 	.word	0x08008763
 8008684:	0800870f 	.word	0x0800870f
 8008688:	08008763 	.word	0x08008763
 800868c:	08008763 	.word	0x08008763
 8008690:	08008763 	.word	0x08008763
 8008694:	0800871f 	.word	0x0800871f
 8008698:	08008763 	.word	0x08008763
 800869c:	08008763 	.word	0x08008763
 80086a0:	08008763 	.word	0x08008763
 80086a4:	08008763 	.word	0x08008763
 80086a8:	08008763 	.word	0x08008763
 80086ac:	08008763 	.word	0x08008763
 80086b0:	08008763 	.word	0x08008763
 80086b4:	0800872f 	.word	0x0800872f
 80086b8:	08008763 	.word	0x08008763
 80086bc:	08008763 	.word	0x08008763
 80086c0:	08008763 	.word	0x08008763
 80086c4:	08008763 	.word	0x08008763
 80086c8:	08008763 	.word	0x08008763
 80086cc:	08008763 	.word	0x08008763
 80086d0:	08008763 	.word	0x08008763
 80086d4:	08008763 	.word	0x08008763
 80086d8:	08008763 	.word	0x08008763
 80086dc:	08008763 	.word	0x08008763
 80086e0:	08008763 	.word	0x08008763
 80086e4:	08008763 	.word	0x08008763
 80086e8:	08008763 	.word	0x08008763
 80086ec:	08008763 	.word	0x08008763
 80086f0:	08008763 	.word	0x08008763
 80086f4:	08008755 	.word	0x08008755
 80086f8:	2b40      	cmp	r3, #64	; 0x40
 80086fa:	d02e      	beq.n	800875a <UART_SetConfig+0x896>
 80086fc:	e031      	b.n	8008762 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086fe:	f7fb f91d 	bl	800393c <HAL_RCC_GetPCLK1Freq>
 8008702:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008704:	e033      	b.n	800876e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008706:	f7fb f92f 	bl	8003968 <HAL_RCC_GetPCLK2Freq>
 800870a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800870c:	e02f      	b.n	800876e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800870e:	f107 0314 	add.w	r3, r7, #20
 8008712:	4618      	mov	r0, r3
 8008714:	f7fc fd96 	bl	8005244 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008718:	69bb      	ldr	r3, [r7, #24]
 800871a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800871c:	e027      	b.n	800876e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800871e:	f107 0308 	add.w	r3, r7, #8
 8008722:	4618      	mov	r0, r3
 8008724:	f7fc fee2 	bl	80054ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800872c:	e01f      	b.n	800876e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800872e:	4b58      	ldr	r3, [pc, #352]	; (8008890 <UART_SetConfig+0x9cc>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f003 0320 	and.w	r3, r3, #32
 8008736:	2b00      	cmp	r3, #0
 8008738:	d009      	beq.n	800874e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800873a:	4b55      	ldr	r3, [pc, #340]	; (8008890 <UART_SetConfig+0x9cc>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	08db      	lsrs	r3, r3, #3
 8008740:	f003 0303 	and.w	r3, r3, #3
 8008744:	4a53      	ldr	r2, [pc, #332]	; (8008894 <UART_SetConfig+0x9d0>)
 8008746:	fa22 f303 	lsr.w	r3, r2, r3
 800874a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800874c:	e00f      	b.n	800876e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800874e:	4b51      	ldr	r3, [pc, #324]	; (8008894 <UART_SetConfig+0x9d0>)
 8008750:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008752:	e00c      	b.n	800876e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008754:	4b4c      	ldr	r3, [pc, #304]	; (8008888 <UART_SetConfig+0x9c4>)
 8008756:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008758:	e009      	b.n	800876e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800875a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800875e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008760:	e005      	b.n	800876e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8008762:	2300      	movs	r3, #0
 8008764:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008766:	2301      	movs	r3, #1
 8008768:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800876c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800876e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008770:	2b00      	cmp	r3, #0
 8008772:	f000 80ea 	beq.w	800894a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800877a:	4a44      	ldr	r2, [pc, #272]	; (800888c <UART_SetConfig+0x9c8>)
 800877c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008780:	461a      	mov	r2, r3
 8008782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008784:	fbb3 f3f2 	udiv	r3, r3, r2
 8008788:	005a      	lsls	r2, r3, #1
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	085b      	lsrs	r3, r3, #1
 8008790:	441a      	add	r2, r3
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	fbb2 f3f3 	udiv	r3, r2, r3
 800879a:	b29b      	uxth	r3, r3
 800879c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800879e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a0:	2b0f      	cmp	r3, #15
 80087a2:	d916      	bls.n	80087d2 <UART_SetConfig+0x90e>
 80087a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087aa:	d212      	bcs.n	80087d2 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80087ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	f023 030f 	bic.w	r3, r3, #15
 80087b4:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80087b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b8:	085b      	lsrs	r3, r3, #1
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	f003 0307 	and.w	r3, r3, #7
 80087c0:	b29a      	uxth	r2, r3
 80087c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80087c4:	4313      	orrs	r3, r2
 80087c6:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80087ce:	60da      	str	r2, [r3, #12]
 80087d0:	e0bb      	b.n	800894a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80087d2:	2301      	movs	r3, #1
 80087d4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80087d8:	e0b7      	b.n	800894a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80087da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80087de:	2b20      	cmp	r3, #32
 80087e0:	dc4a      	bgt.n	8008878 <UART_SetConfig+0x9b4>
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	f2c0 8086 	blt.w	80088f4 <UART_SetConfig+0xa30>
 80087e8:	2b20      	cmp	r3, #32
 80087ea:	f200 8083 	bhi.w	80088f4 <UART_SetConfig+0xa30>
 80087ee:	a201      	add	r2, pc, #4	; (adr r2, 80087f4 <UART_SetConfig+0x930>)
 80087f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087f4:	0800887f 	.word	0x0800887f
 80087f8:	08008899 	.word	0x08008899
 80087fc:	080088f5 	.word	0x080088f5
 8008800:	080088f5 	.word	0x080088f5
 8008804:	080088a1 	.word	0x080088a1
 8008808:	080088f5 	.word	0x080088f5
 800880c:	080088f5 	.word	0x080088f5
 8008810:	080088f5 	.word	0x080088f5
 8008814:	080088b1 	.word	0x080088b1
 8008818:	080088f5 	.word	0x080088f5
 800881c:	080088f5 	.word	0x080088f5
 8008820:	080088f5 	.word	0x080088f5
 8008824:	080088f5 	.word	0x080088f5
 8008828:	080088f5 	.word	0x080088f5
 800882c:	080088f5 	.word	0x080088f5
 8008830:	080088f5 	.word	0x080088f5
 8008834:	080088c1 	.word	0x080088c1
 8008838:	080088f5 	.word	0x080088f5
 800883c:	080088f5 	.word	0x080088f5
 8008840:	080088f5 	.word	0x080088f5
 8008844:	080088f5 	.word	0x080088f5
 8008848:	080088f5 	.word	0x080088f5
 800884c:	080088f5 	.word	0x080088f5
 8008850:	080088f5 	.word	0x080088f5
 8008854:	080088f5 	.word	0x080088f5
 8008858:	080088f5 	.word	0x080088f5
 800885c:	080088f5 	.word	0x080088f5
 8008860:	080088f5 	.word	0x080088f5
 8008864:	080088f5 	.word	0x080088f5
 8008868:	080088f5 	.word	0x080088f5
 800886c:	080088f5 	.word	0x080088f5
 8008870:	080088f5 	.word	0x080088f5
 8008874:	080088e7 	.word	0x080088e7
 8008878:	2b40      	cmp	r3, #64	; 0x40
 800887a:	d037      	beq.n	80088ec <UART_SetConfig+0xa28>
 800887c:	e03a      	b.n	80088f4 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800887e:	f7fb f85d 	bl	800393c <HAL_RCC_GetPCLK1Freq>
 8008882:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008884:	e03c      	b.n	8008900 <UART_SetConfig+0xa3c>
 8008886:	bf00      	nop
 8008888:	003d0900 	.word	0x003d0900
 800888c:	0800df5c 	.word	0x0800df5c
 8008890:	58024400 	.word	0x58024400
 8008894:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008898:	f7fb f866 	bl	8003968 <HAL_RCC_GetPCLK2Freq>
 800889c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800889e:	e02f      	b.n	8008900 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088a0:	f107 0314 	add.w	r3, r7, #20
 80088a4:	4618      	mov	r0, r3
 80088a6:	f7fc fccd 	bl	8005244 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80088ae:	e027      	b.n	8008900 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088b0:	f107 0308 	add.w	r3, r7, #8
 80088b4:	4618      	mov	r0, r3
 80088b6:	f7fc fe19 	bl	80054ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80088be:	e01f      	b.n	8008900 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088c0:	4b2c      	ldr	r3, [pc, #176]	; (8008974 <UART_SetConfig+0xab0>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f003 0320 	and.w	r3, r3, #32
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d009      	beq.n	80088e0 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80088cc:	4b29      	ldr	r3, [pc, #164]	; (8008974 <UART_SetConfig+0xab0>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	08db      	lsrs	r3, r3, #3
 80088d2:	f003 0303 	and.w	r3, r3, #3
 80088d6:	4a28      	ldr	r2, [pc, #160]	; (8008978 <UART_SetConfig+0xab4>)
 80088d8:	fa22 f303 	lsr.w	r3, r2, r3
 80088dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80088de:	e00f      	b.n	8008900 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 80088e0:	4b25      	ldr	r3, [pc, #148]	; (8008978 <UART_SetConfig+0xab4>)
 80088e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80088e4:	e00c      	b.n	8008900 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80088e6:	4b25      	ldr	r3, [pc, #148]	; (800897c <UART_SetConfig+0xab8>)
 80088e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80088ea:	e009      	b.n	8008900 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80088f2:	e005      	b.n	8008900 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 80088f4:	2300      	movs	r3, #0
 80088f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80088f8:	2301      	movs	r3, #1
 80088fa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80088fe:	bf00      	nop
    }

    if (pclk != 0U)
 8008900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008902:	2b00      	cmp	r3, #0
 8008904:	d021      	beq.n	800894a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890a:	4a1d      	ldr	r2, [pc, #116]	; (8008980 <UART_SetConfig+0xabc>)
 800890c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008910:	461a      	mov	r2, r3
 8008912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008914:	fbb3 f2f2 	udiv	r2, r3, r2
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	085b      	lsrs	r3, r3, #1
 800891e:	441a      	add	r2, r3
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	fbb2 f3f3 	udiv	r3, r2, r3
 8008928:	b29b      	uxth	r3, r3
 800892a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800892c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800892e:	2b0f      	cmp	r3, #15
 8008930:	d908      	bls.n	8008944 <UART_SetConfig+0xa80>
 8008932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008938:	d204      	bcs.n	8008944 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008940:	60da      	str	r2, [r3, #12]
 8008942:	e002      	b.n	800894a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8008944:	2301      	movs	r3, #1
 8008946:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2201      	movs	r2, #1
 800894e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2201      	movs	r2, #1
 8008956:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2200      	movs	r2, #0
 800895e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2200      	movs	r2, #0
 8008964:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008966:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800896a:	4618      	mov	r0, r3
 800896c:	3738      	adds	r7, #56	; 0x38
 800896e:	46bd      	mov	sp, r7
 8008970:	bdb0      	pop	{r4, r5, r7, pc}
 8008972:	bf00      	nop
 8008974:	58024400 	.word	0x58024400
 8008978:	03d09000 	.word	0x03d09000
 800897c:	003d0900 	.word	0x003d0900
 8008980:	0800df5c 	.word	0x0800df5c

08008984 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008984:	b480      	push	{r7}
 8008986:	b083      	sub	sp, #12
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008990:	f003 0301 	and.w	r3, r3, #1
 8008994:	2b00      	cmp	r3, #0
 8008996:	d00a      	beq.n	80089ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	430a      	orrs	r2, r1
 80089ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089b2:	f003 0302 	and.w	r3, r3, #2
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d00a      	beq.n	80089d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	430a      	orrs	r2, r1
 80089ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089d4:	f003 0304 	and.w	r3, r3, #4
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d00a      	beq.n	80089f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	430a      	orrs	r2, r1
 80089f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f6:	f003 0308 	and.w	r3, r3, #8
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d00a      	beq.n	8008a14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	430a      	orrs	r2, r1
 8008a12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a18:	f003 0310 	and.w	r3, r3, #16
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d00a      	beq.n	8008a36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	689b      	ldr	r3, [r3, #8]
 8008a26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	430a      	orrs	r2, r1
 8008a34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a3a:	f003 0320 	and.w	r3, r3, #32
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d00a      	beq.n	8008a58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	430a      	orrs	r2, r1
 8008a56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d01a      	beq.n	8008a9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	430a      	orrs	r2, r1
 8008a78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a82:	d10a      	bne.n	8008a9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	430a      	orrs	r2, r1
 8008a98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d00a      	beq.n	8008abc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	430a      	orrs	r2, r1
 8008aba:	605a      	str	r2, [r3, #4]
  }
}
 8008abc:	bf00      	nop
 8008abe:	370c      	adds	r7, #12
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr

08008ac8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b086      	sub	sp, #24
 8008acc:	af02      	add	r7, sp, #8
 8008ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ad8:	f7f8 fe20 	bl	800171c <HAL_GetTick>
 8008adc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f003 0308 	and.w	r3, r3, #8
 8008ae8:	2b08      	cmp	r3, #8
 8008aea:	d10e      	bne.n	8008b0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008aec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008af0:	9300      	str	r3, [sp, #0]
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2200      	movs	r2, #0
 8008af6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 f82f 	bl	8008b5e <UART_WaitOnFlagUntilTimeout>
 8008b00:	4603      	mov	r3, r0
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d001      	beq.n	8008b0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b06:	2303      	movs	r3, #3
 8008b08:	e025      	b.n	8008b56 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f003 0304 	and.w	r3, r3, #4
 8008b14:	2b04      	cmp	r3, #4
 8008b16:	d10e      	bne.n	8008b36 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008b1c:	9300      	str	r3, [sp, #0]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2200      	movs	r2, #0
 8008b22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 f819 	bl	8008b5e <UART_WaitOnFlagUntilTimeout>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d001      	beq.n	8008b36 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b32:	2303      	movs	r3, #3
 8008b34:	e00f      	b.n	8008b56 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2220      	movs	r2, #32
 8008b3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2220      	movs	r2, #32
 8008b42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008b54:	2300      	movs	r3, #0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3710      	adds	r7, #16
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}

08008b5e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b5e:	b580      	push	{r7, lr}
 8008b60:	b084      	sub	sp, #16
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	60f8      	str	r0, [r7, #12]
 8008b66:	60b9      	str	r1, [r7, #8]
 8008b68:	603b      	str	r3, [r7, #0]
 8008b6a:	4613      	mov	r3, r2
 8008b6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b6e:	e062      	b.n	8008c36 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b70:	69bb      	ldr	r3, [r7, #24]
 8008b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b76:	d05e      	beq.n	8008c36 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b78:	f7f8 fdd0 	bl	800171c <HAL_GetTick>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	1ad3      	subs	r3, r2, r3
 8008b82:	69ba      	ldr	r2, [r7, #24]
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d302      	bcc.n	8008b8e <UART_WaitOnFlagUntilTimeout+0x30>
 8008b88:	69bb      	ldr	r3, [r7, #24]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d11d      	bne.n	8008bca <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008b9c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	689a      	ldr	r2, [r3, #8]
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f022 0201 	bic.w	r2, r2, #1
 8008bac:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2220      	movs	r2, #32
 8008bb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2220      	movs	r2, #32
 8008bba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008bc6:	2303      	movs	r3, #3
 8008bc8:	e045      	b.n	8008c56 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f003 0304 	and.w	r3, r3, #4
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d02e      	beq.n	8008c36 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	69db      	ldr	r3, [r3, #28]
 8008bde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008be2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008be6:	d126      	bne.n	8008c36 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008bf0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008c00:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	689a      	ldr	r2, [r3, #8]
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f022 0201 	bic.w	r2, r2, #1
 8008c10:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2220      	movs	r2, #32
 8008c16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2220      	movs	r2, #32
 8008c1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2220      	movs	r2, #32
 8008c26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008c32:	2303      	movs	r3, #3
 8008c34:	e00f      	b.n	8008c56 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	69da      	ldr	r2, [r3, #28]
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	4013      	ands	r3, r2
 8008c40:	68ba      	ldr	r2, [r7, #8]
 8008c42:	429a      	cmp	r2, r3
 8008c44:	bf0c      	ite	eq
 8008c46:	2301      	moveq	r3, #1
 8008c48:	2300      	movne	r3, #0
 8008c4a:	b2db      	uxtb	r3, r3
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	79fb      	ldrb	r3, [r7, #7]
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d08d      	beq.n	8008b70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c54:	2300      	movs	r3, #0
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3710      	adds	r7, #16
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
	...

08008c60 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b085      	sub	sp, #20
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	60f8      	str	r0, [r7, #12]
 8008c68:	60b9      	str	r1, [r7, #8]
 8008c6a:	4613      	mov	r3, r2
 8008c6c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	68ba      	ldr	r2, [r7, #8]
 8008c72:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	88fa      	ldrh	r2, [r7, #6]
 8008c78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	88fa      	ldrh	r2, [r7, #6]
 8008c80:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2200      	movs	r2, #0
 8008c88:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	689b      	ldr	r3, [r3, #8]
 8008c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c92:	d10e      	bne.n	8008cb2 <UART_Start_Receive_IT+0x52>
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	691b      	ldr	r3, [r3, #16]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d105      	bne.n	8008ca8 <UART_Start_Receive_IT+0x48>
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008ca2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008ca6:	e02d      	b.n	8008d04 <UART_Start_Receive_IT+0xa4>
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	22ff      	movs	r2, #255	; 0xff
 8008cac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008cb0:	e028      	b.n	8008d04 <UART_Start_Receive_IT+0xa4>
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d10d      	bne.n	8008cd6 <UART_Start_Receive_IT+0x76>
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	691b      	ldr	r3, [r3, #16]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d104      	bne.n	8008ccc <UART_Start_Receive_IT+0x6c>
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	22ff      	movs	r2, #255	; 0xff
 8008cc6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008cca:	e01b      	b.n	8008d04 <UART_Start_Receive_IT+0xa4>
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	227f      	movs	r2, #127	; 0x7f
 8008cd0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008cd4:	e016      	b.n	8008d04 <UART_Start_Receive_IT+0xa4>
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	689b      	ldr	r3, [r3, #8]
 8008cda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008cde:	d10d      	bne.n	8008cfc <UART_Start_Receive_IT+0x9c>
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	691b      	ldr	r3, [r3, #16]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d104      	bne.n	8008cf2 <UART_Start_Receive_IT+0x92>
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	227f      	movs	r2, #127	; 0x7f
 8008cec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008cf0:	e008      	b.n	8008d04 <UART_Start_Receive_IT+0xa4>
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	223f      	movs	r2, #63	; 0x3f
 8008cf6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008cfa:	e003      	b.n	8008d04 <UART_Start_Receive_IT+0xa4>
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2200      	movs	r2, #0
 8008d08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2222      	movs	r2, #34	; 0x22
 8008d10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	689a      	ldr	r2, [r3, #8]
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f042 0201 	orr.w	r2, r2, #1
 8008d22:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d2c:	d12a      	bne.n	8008d84 <UART_Start_Receive_IT+0x124>
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008d34:	88fa      	ldrh	r2, [r7, #6]
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d324      	bcc.n	8008d84 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d42:	d107      	bne.n	8008d54 <UART_Start_Receive_IT+0xf4>
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	691b      	ldr	r3, [r3, #16]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d103      	bne.n	8008d54 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	4a1f      	ldr	r2, [pc, #124]	; (8008dcc <UART_Start_Receive_IT+0x16c>)
 8008d50:	671a      	str	r2, [r3, #112]	; 0x70
 8008d52:	e002      	b.n	8008d5a <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	4a1e      	ldr	r2, [pc, #120]	; (8008dd0 <UART_Start_Receive_IT+0x170>)
 8008d58:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	681a      	ldr	r2, [r3, #0]
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d70:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	689a      	ldr	r2, [r3, #8]
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008d80:	609a      	str	r2, [r3, #8]
 8008d82:	e01b      	b.n	8008dbc <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	689b      	ldr	r3, [r3, #8]
 8008d88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d8c:	d107      	bne.n	8008d9e <UART_Start_Receive_IT+0x13e>
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	691b      	ldr	r3, [r3, #16]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d103      	bne.n	8008d9e <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	4a0e      	ldr	r2, [pc, #56]	; (8008dd4 <UART_Start_Receive_IT+0x174>)
 8008d9a:	671a      	str	r2, [r3, #112]	; 0x70
 8008d9c:	e002      	b.n	8008da4 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	4a0d      	ldr	r2, [pc, #52]	; (8008dd8 <UART_Start_Receive_IT+0x178>)
 8008da2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2200      	movs	r2, #0
 8008da8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8008dba:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8008dbc:	2300      	movs	r3, #0
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3714      	adds	r7, #20
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr
 8008dca:	bf00      	nop
 8008dcc:	08009255 	.word	0x08009255
 8008dd0:	08009051 	.word	0x08009051
 8008dd4:	08008f79 	.word	0x08008f79
 8008dd8:	08008ea1 	.word	0x08008ea1

08008ddc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b083      	sub	sp, #12
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008df2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	6899      	ldr	r1, [r3, #8]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681a      	ldr	r2, [r3, #0]
 8008dfe:	4b0f      	ldr	r3, [pc, #60]	; (8008e3c <UART_EndRxTransfer+0x60>)
 8008e00:	400b      	ands	r3, r1
 8008e02:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d107      	bne.n	8008e1c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	681a      	ldr	r2, [r3, #0]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f022 0210 	bic.w	r2, r2, #16
 8008e1a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2220      	movs	r2, #32
 8008e20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2200      	movs	r2, #0
 8008e28:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008e30:	bf00      	nop
 8008e32:	370c      	adds	r7, #12
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr
 8008e3c:	effffffe 	.word	0xeffffffe

08008e40 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b084      	sub	sp, #16
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	2200      	movs	r2, #0
 8008e52:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e5e:	68f8      	ldr	r0, [r7, #12]
 8008e60:	f7ff f81a 	bl	8007e98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e64:	bf00      	nop
 8008e66:	3710      	adds	r7, #16
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e82:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2220      	movs	r2, #32
 8008e88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f7fe fff6 	bl	8007e84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e98:	bf00      	nop
 8008e9a:	3708      	adds	r7, #8
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008eae:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008eb6:	2b22      	cmp	r3, #34	; 0x22
 8008eb8:	d152      	bne.n	8008f60 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec0:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008ec2:	89bb      	ldrh	r3, [r7, #12]
 8008ec4:	b2d9      	uxtb	r1, r3
 8008ec6:	89fb      	ldrh	r3, [r7, #14]
 8008ec8:	b2da      	uxtb	r2, r3
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ece:	400a      	ands	r2, r1
 8008ed0:	b2d2      	uxtb	r2, r2
 8008ed2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ed8:	1c5a      	adds	r2, r3, #1
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ee4:	b29b      	uxth	r3, r3
 8008ee6:	3b01      	subs	r3, #1
 8008ee8:	b29a      	uxth	r2, r3
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d139      	bne.n	8008f70 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008f0a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	689a      	ldr	r2, [r3, #8]
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f022 0201 	bic.w	r2, r2, #1
 8008f1a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2220      	movs	r2, #32
 8008f20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2200      	movs	r2, #0
 8008f28:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	d10f      	bne.n	8008f52 <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	681a      	ldr	r2, [r3, #0]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f022 0210 	bic.w	r2, r2, #16
 8008f40:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008f48:	4619      	mov	r1, r3
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f7fe ffae 	bl	8007eac <HAL_UARTEx_RxEventCallback>
 8008f50:	e002      	b.n	8008f58 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f7f7 fd26 	bl	80009a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f5e:	e007      	b.n	8008f70 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	699a      	ldr	r2, [r3, #24]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f042 0208 	orr.w	r2, r2, #8
 8008f6e:	619a      	str	r2, [r3, #24]
}
 8008f70:	bf00      	nop
 8008f72:	3710      	adds	r7, #16
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b084      	sub	sp, #16
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008f86:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f8e:	2b22      	cmp	r3, #34	; 0x22
 8008f90:	d152      	bne.n	8009038 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f98:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f9e:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8008fa0:	89ba      	ldrh	r2, [r7, #12]
 8008fa2:	89fb      	ldrh	r3, [r7, #14]
 8008fa4:	4013      	ands	r3, r2
 8008fa6:	b29a      	uxth	r2, r3
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fb0:	1c9a      	adds	r2, r3, #2
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	3b01      	subs	r3, #1
 8008fc0:	b29a      	uxth	r2, r3
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008fce:	b29b      	uxth	r3, r3
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d139      	bne.n	8009048 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008fe2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	689a      	ldr	r2, [r3, #8]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f022 0201 	bic.w	r2, r2, #1
 8008ff2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2220      	movs	r2, #32
 8008ff8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009006:	2b01      	cmp	r3, #1
 8009008:	d10f      	bne.n	800902a <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f022 0210 	bic.w	r2, r2, #16
 8009018:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009020:	4619      	mov	r1, r3
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f7fe ff42 	bl	8007eac <HAL_UARTEx_RxEventCallback>
 8009028:	e002      	b.n	8009030 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f7f7 fcba 	bl	80009a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2200      	movs	r2, #0
 8009034:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009036:	e007      	b.n	8009048 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	699a      	ldr	r2, [r3, #24]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f042 0208 	orr.w	r2, r2, #8
 8009046:	619a      	str	r2, [r3, #24]
}
 8009048:	bf00      	nop
 800904a:	3710      	adds	r7, #16
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b088      	sub	sp, #32
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800905e:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	69db      	ldr	r3, [r3, #28]
 8009066:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800907e:	2b22      	cmp	r3, #34	; 0x22
 8009080:	f040 80d8 	bne.w	8009234 <UART_RxISR_8BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800908a:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800908c:	e0a8      	b.n	80091e0 <UART_RxISR_8BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009094:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009096:	89bb      	ldrh	r3, [r7, #12]
 8009098:	b2d9      	uxtb	r1, r3
 800909a:	8b7b      	ldrh	r3, [r7, #26]
 800909c:	b2da      	uxtb	r2, r3
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090a2:	400a      	ands	r2, r1
 80090a4:	b2d2      	uxtb	r2, r2
 80090a6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090ac:	1c5a      	adds	r2, r3, #1
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80090b8:	b29b      	uxth	r3, r3
 80090ba:	3b01      	subs	r3, #1
 80090bc:	b29a      	uxth	r2, r3
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	69db      	ldr	r3, [r3, #28]
 80090ca:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80090cc:	69fb      	ldr	r3, [r7, #28]
 80090ce:	f003 0307 	and.w	r3, r3, #7
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d04d      	beq.n	8009172 <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80090d6:	69fb      	ldr	r3, [r7, #28]
 80090d8:	f003 0301 	and.w	r3, r3, #1
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d010      	beq.n	8009102 <UART_RxISR_8BIT_FIFOEN+0xb2>
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d00b      	beq.n	8009102 <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	2201      	movs	r2, #1
 80090f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090f8:	f043 0201 	orr.w	r2, r3, #1
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009102:	69fb      	ldr	r3, [r7, #28]
 8009104:	f003 0302 	and.w	r3, r3, #2
 8009108:	2b00      	cmp	r3, #0
 800910a:	d010      	beq.n	800912e <UART_RxISR_8BIT_FIFOEN+0xde>
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	f003 0301 	and.w	r3, r3, #1
 8009112:	2b00      	cmp	r3, #0
 8009114:	d00b      	beq.n	800912e <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	2202      	movs	r2, #2
 800911c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009124:	f043 0204 	orr.w	r2, r3, #4
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800912e:	69fb      	ldr	r3, [r7, #28]
 8009130:	f003 0304 	and.w	r3, r3, #4
 8009134:	2b00      	cmp	r3, #0
 8009136:	d010      	beq.n	800915a <UART_RxISR_8BIT_FIFOEN+0x10a>
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	f003 0301 	and.w	r3, r3, #1
 800913e:	2b00      	cmp	r3, #0
 8009140:	d00b      	beq.n	800915a <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	2204      	movs	r2, #4
 8009148:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009150:	f043 0202 	orr.w	r2, r3, #2
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009160:	2b00      	cmp	r3, #0
 8009162:	d006      	beq.n	8009172 <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f7fe fe97 	bl	8007e98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2200      	movs	r2, #0
 800916e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009178:	b29b      	uxth	r3, r3
 800917a:	2b00      	cmp	r3, #0
 800917c:	d130      	bne.n	80091e0 <UART_RxISR_8BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	681a      	ldr	r2, [r3, #0]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800918c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	6899      	ldr	r1, [r3, #8]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681a      	ldr	r2, [r3, #0]
 8009198:	4b2c      	ldr	r3, [pc, #176]	; (800924c <UART_RxISR_8BIT_FIFOEN+0x1fc>)
 800919a:	400b      	ands	r3, r1
 800919c:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2220      	movs	r2, #32
 80091a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2200      	movs	r2, #0
 80091aa:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d10f      	bne.n	80091d4 <UART_RxISR_8BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	681a      	ldr	r2, [r3, #0]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f022 0210 	bic.w	r2, r2, #16
 80091c2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80091ca:	4619      	mov	r1, r3
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f7fe fe6d 	bl	8007eac <HAL_UARTEx_RxEventCallback>
 80091d2:	e002      	b.n	80091da <UART_RxISR_8BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f7f7 fbe5 	bl	80009a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2200      	movs	r2, #0
 80091de:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80091e0:	89fb      	ldrh	r3, [r7, #14]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d005      	beq.n	80091f2 <UART_RxISR_8BIT_FIFOEN+0x1a2>
 80091e6:	69fb      	ldr	r3, [r7, #28]
 80091e8:	f003 0320 	and.w	r3, r3, #32
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	f47f af4e 	bne.w	800908e <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091f8:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80091fa:	897b      	ldrh	r3, [r7, #10]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d021      	beq.n	8009244 <UART_RxISR_8BIT_FIFOEN+0x1f4>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009206:	897a      	ldrh	r2, [r7, #10]
 8009208:	429a      	cmp	r2, r3
 800920a:	d21b      	bcs.n	8009244 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	689a      	ldr	r2, [r3, #8]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800921a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	4a0c      	ldr	r2, [pc, #48]	; (8009250 <UART_RxISR_8BIT_FIFOEN+0x200>)
 8009220:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	681a      	ldr	r2, [r3, #0]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f042 0220 	orr.w	r2, r2, #32
 8009230:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009232:	e007      	b.n	8009244 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	699a      	ldr	r2, [r3, #24]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f042 0208 	orr.w	r2, r2, #8
 8009242:	619a      	str	r2, [r3, #24]
}
 8009244:	bf00      	nop
 8009246:	3720      	adds	r7, #32
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}
 800924c:	effffffe 	.word	0xeffffffe
 8009250:	08008ea1 	.word	0x08008ea1

08009254 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b08a      	sub	sp, #40	; 0x28
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009262:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	69db      	ldr	r3, [r3, #28]
 800926a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	689b      	ldr	r3, [r3, #8]
 800927a:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009282:	2b22      	cmp	r3, #34	; 0x22
 8009284:	f040 80d8 	bne.w	8009438 <UART_RxISR_16BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800928e:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009290:	e0a8      	b.n	80093e4 <UART_RxISR_16BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009298:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800929e:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 80092a0:	8aba      	ldrh	r2, [r7, #20]
 80092a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80092a4:	4013      	ands	r3, r2
 80092a6:	b29a      	uxth	r2, r3
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092b0:	1c9a      	adds	r2, r3, #2
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80092bc:	b29b      	uxth	r3, r3
 80092be:	3b01      	subs	r3, #1
 80092c0:	b29a      	uxth	r2, r3
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	69db      	ldr	r3, [r3, #28]
 80092ce:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80092d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d2:	f003 0307 	and.w	r3, r3, #7
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d04d      	beq.n	8009376 <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80092da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092dc:	f003 0301 	and.w	r3, r3, #1
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d010      	beq.n	8009306 <UART_RxISR_16BIT_FIFOEN+0xb2>
 80092e4:	69fb      	ldr	r3, [r7, #28]
 80092e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d00b      	beq.n	8009306 <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	2201      	movs	r2, #1
 80092f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092fc:	f043 0201 	orr.w	r2, r3, #1
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009308:	f003 0302 	and.w	r3, r3, #2
 800930c:	2b00      	cmp	r3, #0
 800930e:	d010      	beq.n	8009332 <UART_RxISR_16BIT_FIFOEN+0xde>
 8009310:	69bb      	ldr	r3, [r7, #24]
 8009312:	f003 0301 	and.w	r3, r3, #1
 8009316:	2b00      	cmp	r3, #0
 8009318:	d00b      	beq.n	8009332 <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	2202      	movs	r2, #2
 8009320:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009328:	f043 0204 	orr.w	r2, r3, #4
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009334:	f003 0304 	and.w	r3, r3, #4
 8009338:	2b00      	cmp	r3, #0
 800933a:	d010      	beq.n	800935e <UART_RxISR_16BIT_FIFOEN+0x10a>
 800933c:	69bb      	ldr	r3, [r7, #24]
 800933e:	f003 0301 	and.w	r3, r3, #1
 8009342:	2b00      	cmp	r3, #0
 8009344:	d00b      	beq.n	800935e <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	2204      	movs	r2, #4
 800934c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009354:	f043 0202 	orr.w	r2, r3, #2
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009364:	2b00      	cmp	r3, #0
 8009366:	d006      	beq.n	8009376 <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f7fe fd95 	bl	8007e98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800937c:	b29b      	uxth	r3, r3
 800937e:	2b00      	cmp	r3, #0
 8009380:	d130      	bne.n	80093e4 <UART_RxISR_16BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	681a      	ldr	r2, [r3, #0]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009390:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	6899      	ldr	r1, [r3, #8]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	4b2c      	ldr	r3, [pc, #176]	; (8009450 <UART_RxISR_16BIT_FIFOEN+0x1fc>)
 800939e:	400b      	ands	r3, r1
 80093a0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2220      	movs	r2, #32
 80093a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2200      	movs	r2, #0
 80093ae:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d10f      	bne.n	80093d8 <UART_RxISR_16BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	681a      	ldr	r2, [r3, #0]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f022 0210 	bic.w	r2, r2, #16
 80093c6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80093ce:	4619      	mov	r1, r3
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f7fe fd6b 	bl	8007eac <HAL_UARTEx_RxEventCallback>
 80093d6:	e002      	b.n	80093de <UART_RxISR_16BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f7f7 fae3 	bl	80009a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2200      	movs	r2, #0
 80093e2:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80093e4:	8afb      	ldrh	r3, [r7, #22]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d005      	beq.n	80093f6 <UART_RxISR_16BIT_FIFOEN+0x1a2>
 80093ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ec:	f003 0320 	and.w	r3, r3, #32
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	f47f af4e 	bne.w	8009292 <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80093fc:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80093fe:	89fb      	ldrh	r3, [r7, #14]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d021      	beq.n	8009448 <UART_RxISR_16BIT_FIFOEN+0x1f4>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800940a:	89fa      	ldrh	r2, [r7, #14]
 800940c:	429a      	cmp	r2, r3
 800940e:	d21b      	bcs.n	8009448 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	689a      	ldr	r2, [r3, #8]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800941e:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	4a0c      	ldr	r2, [pc, #48]	; (8009454 <UART_RxISR_16BIT_FIFOEN+0x200>)
 8009424:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	681a      	ldr	r2, [r3, #0]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f042 0220 	orr.w	r2, r2, #32
 8009434:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009436:	e007      	b.n	8009448 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	699a      	ldr	r2, [r3, #24]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f042 0208 	orr.w	r2, r2, #8
 8009446:	619a      	str	r2, [r3, #24]
}
 8009448:	bf00      	nop
 800944a:	3728      	adds	r7, #40	; 0x28
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}
 8009450:	effffffe 	.word	0xeffffffe
 8009454:	08008f79 	.word	0x08008f79

08009458 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009458:	b480      	push	{r7}
 800945a:	b083      	sub	sp, #12
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009460:	bf00      	nop
 8009462:	370c      	adds	r7, #12
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr

0800946c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800946c:	b480      	push	{r7}
 800946e:	b083      	sub	sp, #12
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009474:	bf00      	nop
 8009476:	370c      	adds	r7, #12
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr

08009480 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009480:	b480      	push	{r7}
 8009482:	b083      	sub	sp, #12
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009488:	bf00      	nop
 800948a:	370c      	adds	r7, #12
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr

08009494 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009494:	b480      	push	{r7}
 8009496:	b085      	sub	sp, #20
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80094a2:	2b01      	cmp	r3, #1
 80094a4:	d101      	bne.n	80094aa <HAL_UARTEx_DisableFifoMode+0x16>
 80094a6:	2302      	movs	r3, #2
 80094a8:	e027      	b.n	80094fa <HAL_UARTEx_DisableFifoMode+0x66>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2201      	movs	r2, #1
 80094ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2224      	movs	r2, #36	; 0x24
 80094b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f022 0201 	bic.w	r2, r2, #1
 80094d0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80094d8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2200      	movs	r2, #0
 80094de:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	68fa      	ldr	r2, [r7, #12]
 80094e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2220      	movs	r2, #32
 80094ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2200      	movs	r2, #0
 80094f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80094f8:	2300      	movs	r3, #0
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3714      	adds	r7, #20
 80094fe:	46bd      	mov	sp, r7
 8009500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009504:	4770      	bx	lr

08009506 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009506:	b580      	push	{r7, lr}
 8009508:	b084      	sub	sp, #16
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
 800950e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009516:	2b01      	cmp	r3, #1
 8009518:	d101      	bne.n	800951e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800951a:	2302      	movs	r3, #2
 800951c:	e02d      	b.n	800957a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2201      	movs	r2, #1
 8009522:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2224      	movs	r2, #36	; 0x24
 800952a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	681a      	ldr	r2, [r3, #0]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f022 0201 	bic.w	r2, r2, #1
 8009544:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	689b      	ldr	r3, [r3, #8]
 800954c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	683a      	ldr	r2, [r7, #0]
 8009556:	430a      	orrs	r2, r1
 8009558:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 f850 	bl	8009600 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	68fa      	ldr	r2, [r7, #12]
 8009566:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2220      	movs	r2, #32
 800956c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2200      	movs	r2, #0
 8009574:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009578:	2300      	movs	r3, #0
}
 800957a:	4618      	mov	r0, r3
 800957c:	3710      	adds	r7, #16
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}

08009582 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009582:	b580      	push	{r7, lr}
 8009584:	b084      	sub	sp, #16
 8009586:	af00      	add	r7, sp, #0
 8009588:	6078      	str	r0, [r7, #4]
 800958a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009592:	2b01      	cmp	r3, #1
 8009594:	d101      	bne.n	800959a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009596:	2302      	movs	r3, #2
 8009598:	e02d      	b.n	80095f6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2201      	movs	r2, #1
 800959e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2224      	movs	r2, #36	; 0x24
 80095a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	681a      	ldr	r2, [r3, #0]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f022 0201 	bic.w	r2, r2, #1
 80095c0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	689b      	ldr	r3, [r3, #8]
 80095c8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	683a      	ldr	r2, [r7, #0]
 80095d2:	430a      	orrs	r2, r1
 80095d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f000 f812 	bl	8009600 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	68fa      	ldr	r2, [r7, #12]
 80095e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2220      	movs	r2, #32
 80095e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2200      	movs	r2, #0
 80095f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80095f4:	2300      	movs	r3, #0
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3710      	adds	r7, #16
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}
	...

08009600 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009600:	b480      	push	{r7}
 8009602:	b085      	sub	sp, #20
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800960c:	2b00      	cmp	r3, #0
 800960e:	d108      	bne.n	8009622 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2201      	movs	r2, #1
 8009614:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2201      	movs	r2, #1
 800961c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009620:	e031      	b.n	8009686 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009622:	2310      	movs	r3, #16
 8009624:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009626:	2310      	movs	r3, #16
 8009628:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	689b      	ldr	r3, [r3, #8]
 8009630:	0e5b      	lsrs	r3, r3, #25
 8009632:	b2db      	uxtb	r3, r3
 8009634:	f003 0307 	and.w	r3, r3, #7
 8009638:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	689b      	ldr	r3, [r3, #8]
 8009640:	0f5b      	lsrs	r3, r3, #29
 8009642:	b2db      	uxtb	r3, r3
 8009644:	f003 0307 	and.w	r3, r3, #7
 8009648:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800964a:	7bbb      	ldrb	r3, [r7, #14]
 800964c:	7b3a      	ldrb	r2, [r7, #12]
 800964e:	4911      	ldr	r1, [pc, #68]	; (8009694 <UARTEx_SetNbDataToProcess+0x94>)
 8009650:	5c8a      	ldrb	r2, [r1, r2]
 8009652:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009656:	7b3a      	ldrb	r2, [r7, #12]
 8009658:	490f      	ldr	r1, [pc, #60]	; (8009698 <UARTEx_SetNbDataToProcess+0x98>)
 800965a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800965c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009660:	b29a      	uxth	r2, r3
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009668:	7bfb      	ldrb	r3, [r7, #15]
 800966a:	7b7a      	ldrb	r2, [r7, #13]
 800966c:	4909      	ldr	r1, [pc, #36]	; (8009694 <UARTEx_SetNbDataToProcess+0x94>)
 800966e:	5c8a      	ldrb	r2, [r1, r2]
 8009670:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009674:	7b7a      	ldrb	r2, [r7, #13]
 8009676:	4908      	ldr	r1, [pc, #32]	; (8009698 <UARTEx_SetNbDataToProcess+0x98>)
 8009678:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800967a:	fb93 f3f2 	sdiv	r3, r3, r2
 800967e:	b29a      	uxth	r2, r3
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009686:	bf00      	nop
 8009688:	3714      	adds	r7, #20
 800968a:	46bd      	mov	sp, r7
 800968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009690:	4770      	bx	lr
 8009692:	bf00      	nop
 8009694:	0800df74 	.word	0x0800df74
 8009698:	0800df7c 	.word	0x0800df7c

0800969c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800969c:	b084      	sub	sp, #16
 800969e:	b480      	push	{r7}
 80096a0:	b085      	sub	sp, #20
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
 80096a6:	f107 001c 	add.w	r0, r7, #28
 80096aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80096ae:	2300      	movs	r3, #0
 80096b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 80096b2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 80096b4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 80096b6:	431a      	orrs	r2, r3
             Init.BusWide             | \
 80096b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 80096ba:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 80096bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 80096be:	431a      	orrs	r2, r3
             Init.ClockDiv
 80096c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 80096c2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 80096c4:	68fa      	ldr	r2, [r7, #12]
 80096c6:	4313      	orrs	r3, r2
 80096c8:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	685a      	ldr	r2, [r3, #4]
 80096ce:	4b07      	ldr	r3, [pc, #28]	; (80096ec <SDMMC_Init+0x50>)
 80096d0:	4013      	ands	r3, r2
 80096d2:	68fa      	ldr	r2, [r7, #12]
 80096d4:	431a      	orrs	r2, r3
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80096da:	2300      	movs	r3, #0
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3714      	adds	r7, #20
 80096e0:	46bd      	mov	sp, r7
 80096e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e6:	b004      	add	sp, #16
 80096e8:	4770      	bx	lr
 80096ea:	bf00      	nop
 80096ec:	ffc02c00 	.word	0xffc02c00

080096f0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b083      	sub	sp, #12
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80096fe:	4618      	mov	r0, r3
 8009700:	370c      	adds	r7, #12
 8009702:	46bd      	mov	sp, r7
 8009704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009708:	4770      	bx	lr

0800970a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800970a:	b480      	push	{r7}
 800970c:	b083      	sub	sp, #12
 800970e:	af00      	add	r7, sp, #0
 8009710:	6078      	str	r0, [r7, #4]
 8009712:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	681a      	ldr	r2, [r3, #0]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800971e:	2300      	movs	r3, #0
}
 8009720:	4618      	mov	r0, r3
 8009722:	370c      	adds	r7, #12
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr

0800972c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800972c:	b480      	push	{r7}
 800972e:	b083      	sub	sp, #12
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f043 0203 	orr.w	r2, r3, #3
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009740:	2300      	movs	r3, #0
}
 8009742:	4618      	mov	r0, r3
 8009744:	370c      	adds	r7, #12
 8009746:	46bd      	mov	sp, r7
 8009748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974c:	4770      	bx	lr

0800974e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800974e:	b480      	push	{r7}
 8009750:	b083      	sub	sp, #12
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f003 0303 	and.w	r3, r3, #3
}
 800975e:	4618      	mov	r0, r3
 8009760:	370c      	adds	r7, #12
 8009762:	46bd      	mov	sp, r7
 8009764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009768:	4770      	bx	lr
	...

0800976c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800976c:	b480      	push	{r7}
 800976e:	b085      	sub	sp, #20
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
 8009774:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009776:	2300      	movs	r3, #0
 8009778:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	681a      	ldr	r2, [r3, #0]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800978a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8009790:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8009796:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009798:	68fa      	ldr	r2, [r7, #12]
 800979a:	4313      	orrs	r3, r2
 800979c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	68da      	ldr	r2, [r3, #12]
 80097a2:	4b06      	ldr	r3, [pc, #24]	; (80097bc <SDMMC_SendCommand+0x50>)
 80097a4:	4013      	ands	r3, r2
 80097a6:	68fa      	ldr	r2, [r7, #12]
 80097a8:	431a      	orrs	r2, r3
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80097ae:	2300      	movs	r3, #0
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3714      	adds	r7, #20
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr
 80097bc:	fffee0c0 	.word	0xfffee0c0

080097c0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b083      	sub	sp, #12
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	691b      	ldr	r3, [r3, #16]
 80097cc:	b2db      	uxtb	r3, r3
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	370c      	adds	r7, #12
 80097d2:	46bd      	mov	sp, r7
 80097d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d8:	4770      	bx	lr

080097da <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80097da:	b480      	push	{r7}
 80097dc:	b085      	sub	sp, #20
 80097de:	af00      	add	r7, sp, #0
 80097e0:	6078      	str	r0, [r7, #4]
 80097e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	3314      	adds	r3, #20
 80097e8:	461a      	mov	r2, r3
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	4413      	add	r3, r2
 80097ee:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3714      	adds	r7, #20
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr

08009800 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8009800:	b480      	push	{r7}
 8009802:	b085      	sub	sp, #20
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800980a:	2300      	movs	r3, #0
 800980c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	685a      	ldr	r2, [r3, #4]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009826:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800982c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8009832:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009834:	68fa      	ldr	r2, [r7, #12]
 8009836:	4313      	orrs	r3, r2
 8009838:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800983e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	431a      	orrs	r2, r3
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800984a:	2300      	movs	r3, #0

}
 800984c:	4618      	mov	r0, r3
 800984e:	3714      	adds	r7, #20
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr

08009858 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b088      	sub	sp, #32
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009866:	2310      	movs	r3, #16
 8009868:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800986a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800986e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009870:	2300      	movs	r3, #0
 8009872:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009874:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009878:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800987a:	f107 0308 	add.w	r3, r7, #8
 800987e:	4619      	mov	r1, r3
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f7ff ff73 	bl	800976c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009886:	f241 3288 	movw	r2, #5000	; 0x1388
 800988a:	2110      	movs	r1, #16
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f000 fa81 	bl	8009d94 <SDMMC_GetCmdResp1>
 8009892:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009894:	69fb      	ldr	r3, [r7, #28]
}
 8009896:	4618      	mov	r0, r3
 8009898:	3720      	adds	r7, #32
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800989e:	b580      	push	{r7, lr}
 80098a0:	b088      	sub	sp, #32
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
 80098a6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80098ac:	2311      	movs	r3, #17
 80098ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80098b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80098b6:	2300      	movs	r3, #0
 80098b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80098ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80098be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80098c0:	f107 0308 	add.w	r3, r7, #8
 80098c4:	4619      	mov	r1, r3
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f7ff ff50 	bl	800976c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80098cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80098d0:	2111      	movs	r1, #17
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 fa5e 	bl	8009d94 <SDMMC_GetCmdResp1>
 80098d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098da:	69fb      	ldr	r3, [r7, #28]
}
 80098dc:	4618      	mov	r0, r3
 80098de:	3720      	adds	r7, #32
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}

080098e4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b088      	sub	sp, #32
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
 80098ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80098f2:	2312      	movs	r3, #18
 80098f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80098f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80098fc:	2300      	movs	r3, #0
 80098fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009900:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009904:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009906:	f107 0308 	add.w	r3, r7, #8
 800990a:	4619      	mov	r1, r3
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f7ff ff2d 	bl	800976c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009912:	f241 3288 	movw	r2, #5000	; 0x1388
 8009916:	2112      	movs	r1, #18
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f000 fa3b 	bl	8009d94 <SDMMC_GetCmdResp1>
 800991e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009920:	69fb      	ldr	r3, [r7, #28]
}
 8009922:	4618      	mov	r0, r3
 8009924:	3720      	adds	r7, #32
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}

0800992a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800992a:	b580      	push	{r7, lr}
 800992c:	b088      	sub	sp, #32
 800992e:	af00      	add	r7, sp, #0
 8009930:	6078      	str	r0, [r7, #4]
 8009932:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009938:	2318      	movs	r3, #24
 800993a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800993c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009940:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009942:	2300      	movs	r3, #0
 8009944:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009946:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800994a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800994c:	f107 0308 	add.w	r3, r7, #8
 8009950:	4619      	mov	r1, r3
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f7ff ff0a 	bl	800976c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009958:	f241 3288 	movw	r2, #5000	; 0x1388
 800995c:	2118      	movs	r1, #24
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f000 fa18 	bl	8009d94 <SDMMC_GetCmdResp1>
 8009964:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009966:	69fb      	ldr	r3, [r7, #28]
}
 8009968:	4618      	mov	r0, r3
 800996a:	3720      	adds	r7, #32
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}

08009970 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b088      	sub	sp, #32
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800997e:	2319      	movs	r3, #25
 8009980:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009982:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009986:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009988:	2300      	movs	r3, #0
 800998a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800998c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009990:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009992:	f107 0308 	add.w	r3, r7, #8
 8009996:	4619      	mov	r1, r3
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f7ff fee7 	bl	800976c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800999e:	f241 3288 	movw	r2, #5000	; 0x1388
 80099a2:	2119      	movs	r1, #25
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f000 f9f5 	bl	8009d94 <SDMMC_GetCmdResp1>
 80099aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099ac:	69fb      	ldr	r3, [r7, #28]
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3720      	adds	r7, #32
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
	...

080099b8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b088      	sub	sp, #32
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80099c0:	2300      	movs	r3, #0
 80099c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80099c4:	230c      	movs	r3, #12
 80099c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80099c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80099ce:	2300      	movs	r3, #0
 80099d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80099d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80099d6:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	68db      	ldr	r3, [r3, #12]
 80099dc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	68db      	ldr	r3, [r3, #12]
 80099e8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80099f0:	f107 0308 	add.w	r3, r7, #8
 80099f4:	4619      	mov	r1, r3
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f7ff feb8 	bl	800976c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80099fc:	4a0b      	ldr	r2, [pc, #44]	; (8009a2c <SDMMC_CmdStopTransfer+0x74>)
 80099fe:	210c      	movs	r1, #12
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f000 f9c7 	bl	8009d94 <SDMMC_GetCmdResp1>
 8009a06:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	68db      	ldr	r3, [r3, #12]
 8009a0c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009a14:	69fb      	ldr	r3, [r7, #28]
 8009a16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a1a:	d101      	bne.n	8009a20 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8009a20:	69fb      	ldr	r3, [r7, #28]
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3720      	adds	r7, #32
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}
 8009a2a:	bf00      	nop
 8009a2c:	05f5e100 	.word	0x05f5e100

08009a30 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b088      	sub	sp, #32
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009a3e:	2307      	movs	r3, #7
 8009a40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a50:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a52:	f107 0308 	add.w	r3, r7, #8
 8009a56:	4619      	mov	r1, r3
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f7ff fe87 	bl	800976c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a62:	2107      	movs	r1, #7
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f000 f995 	bl	8009d94 <SDMMC_GetCmdResp1>
 8009a6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a6c:	69fb      	ldr	r3, [r7, #28]
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3720      	adds	r7, #32
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}

08009a76 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009a76:	b580      	push	{r7, lr}
 8009a78:	b088      	sub	sp, #32
 8009a7a:	af00      	add	r7, sp, #0
 8009a7c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009a82:	2300      	movs	r3, #0
 8009a84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009a86:	2300      	movs	r3, #0
 8009a88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a92:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a94:	f107 0308 	add.w	r3, r7, #8
 8009a98:	4619      	mov	r1, r3
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f7ff fe66 	bl	800976c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f000 fbb9 	bl	800a218 <SDMMC_GetCmdError>
 8009aa6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009aa8:	69fb      	ldr	r3, [r7, #28]
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3720      	adds	r7, #32
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}

08009ab2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009ab2:	b580      	push	{r7, lr}
 8009ab4:	b088      	sub	sp, #32
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009aba:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009abe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009ac0:	2308      	movs	r3, #8
 8009ac2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ac4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ac8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009aca:	2300      	movs	r3, #0
 8009acc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ace:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ad2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ad4:	f107 0308 	add.w	r3, r7, #8
 8009ad8:	4619      	mov	r1, r3
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f7ff fe46 	bl	800976c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f000 fb4b 	bl	800a17c <SDMMC_GetCmdResp7>
 8009ae6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ae8:	69fb      	ldr	r3, [r7, #28]
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3720      	adds	r7, #32
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}

08009af2 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009af2:	b580      	push	{r7, lr}
 8009af4:	b088      	sub	sp, #32
 8009af6:	af00      	add	r7, sp, #0
 8009af8:	6078      	str	r0, [r7, #4]
 8009afa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009b00:	2337      	movs	r3, #55	; 0x37
 8009b02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b12:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b14:	f107 0308 	add.w	r3, r7, #8
 8009b18:	4619      	mov	r1, r3
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f7ff fe26 	bl	800976c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b24:	2137      	movs	r1, #55	; 0x37
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 f934 	bl	8009d94 <SDMMC_GetCmdResp1>
 8009b2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b2e:	69fb      	ldr	r3, [r7, #28]
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3720      	adds	r7, #32
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}

08009b38 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b088      	sub	sp, #32
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009b46:	2329      	movs	r3, #41	; 0x29
 8009b48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b50:	2300      	movs	r3, #0
 8009b52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b58:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b5a:	f107 0308 	add.w	r3, r7, #8
 8009b5e:	4619      	mov	r1, r3
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f7ff fe03 	bl	800976c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f000 fa50 	bl	800a00c <SDMMC_GetCmdResp3>
 8009b6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b6e:	69fb      	ldr	r3, [r7, #28]
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	3720      	adds	r7, #32
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}

08009b78 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b088      	sub	sp, #32
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009b86:	2306      	movs	r3, #6
 8009b88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b90:	2300      	movs	r3, #0
 8009b92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b98:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b9a:	f107 0308 	add.w	r3, r7, #8
 8009b9e:	4619      	mov	r1, r3
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f7ff fde3 	bl	800976c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009baa:	2106      	movs	r1, #6
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 f8f1 	bl	8009d94 <SDMMC_GetCmdResp1>
 8009bb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009bb4:	69fb      	ldr	r3, [r7, #28]
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3720      	adds	r7, #32
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}

08009bbe <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009bbe:	b580      	push	{r7, lr}
 8009bc0:	b088      	sub	sp, #32
 8009bc2:	af00      	add	r7, sp, #0
 8009bc4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009bca:	2333      	movs	r3, #51	; 0x33
 8009bcc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009bce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009bd2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009bd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009bdc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009bde:	f107 0308 	add.w	r3, r7, #8
 8009be2:	4619      	mov	r1, r3
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f7ff fdc1 	bl	800976c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bee:	2133      	movs	r1, #51	; 0x33
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f000 f8cf 	bl	8009d94 <SDMMC_GetCmdResp1>
 8009bf6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009bf8:	69fb      	ldr	r3, [r7, #28]
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3720      	adds	r7, #32
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}

08009c02 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009c02:	b580      	push	{r7, lr}
 8009c04:	b088      	sub	sp, #32
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009c0e:	2302      	movs	r3, #2
 8009c10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009c12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009c16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c20:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c22:	f107 0308 	add.w	r3, r7, #8
 8009c26:	4619      	mov	r1, r3
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f7ff fd9f 	bl	800976c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f000 f9a2 	bl	8009f78 <SDMMC_GetCmdResp2>
 8009c34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c36:	69fb      	ldr	r3, [r7, #28]
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3720      	adds	r7, #32
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}

08009c40 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b088      	sub	sp, #32
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
 8009c48:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009c4e:	2309      	movs	r3, #9
 8009c50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009c52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009c56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c60:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c62:	f107 0308 	add.w	r3, r7, #8
 8009c66:	4619      	mov	r1, r3
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f7ff fd7f 	bl	800976c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f000 f982 	bl	8009f78 <SDMMC_GetCmdResp2>
 8009c74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c76:	69fb      	ldr	r3, [r7, #28]
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3720      	adds	r7, #32
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}

08009c80 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b088      	sub	sp, #32
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009c8e:	2303      	movs	r3, #3
 8009c90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ca0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ca2:	f107 0308 	add.w	r3, r7, #8
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f7ff fd5f 	bl	800976c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009cae:	683a      	ldr	r2, [r7, #0]
 8009cb0:	2103      	movs	r1, #3
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 f9ea 	bl	800a08c <SDMMC_GetCmdResp6>
 8009cb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009cba:	69fb      	ldr	r3, [r7, #28]
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3720      	adds	r7, #32
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b088      	sub	sp, #32
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009cd2:	230d      	movs	r3, #13
 8009cd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009cd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009cda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ce0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ce4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ce6:	f107 0308 	add.w	r3, r7, #8
 8009cea:	4619      	mov	r1, r3
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f7ff fd3d 	bl	800976c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cf6:	210d      	movs	r1, #13
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 f84b 	bl	8009d94 <SDMMC_GetCmdResp1>
 8009cfe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d00:	69fb      	ldr	r3, [r7, #28]
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3720      	adds	r7, #32
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}

08009d0a <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8009d0a:	b580      	push	{r7, lr}
 8009d0c:	b088      	sub	sp, #32
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009d12:	2300      	movs	r3, #0
 8009d14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8009d16:	230d      	movs	r3, #13
 8009d18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d20:	2300      	movs	r3, #0
 8009d22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d28:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d2a:	f107 0308 	add.w	r3, r7, #8
 8009d2e:	4619      	mov	r1, r3
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f7ff fd1b 	bl	800976c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8009d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d3a:	210d      	movs	r1, #13
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f000 f829 	bl	8009d94 <SDMMC_GetCmdResp1>
 8009d42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d44:	69fb      	ldr	r3, [r7, #28]
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3720      	adds	r7, #32
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}

08009d4e <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8009d4e:	b580      	push	{r7, lr}
 8009d50:	b088      	sub	sp, #32
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8009d56:	2300      	movs	r3, #0
 8009d58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8009d5a:	230b      	movs	r3, #11
 8009d5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d64:	2300      	movs	r3, #0
 8009d66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d6c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d6e:	f107 0308 	add.w	r3, r7, #8
 8009d72:	4619      	mov	r1, r3
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f7ff fcf9 	bl	800976c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8009d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d7e:	210b      	movs	r1, #11
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f000 f807 	bl	8009d94 <SDMMC_GetCmdResp1>
 8009d86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d88:	69fb      	ldr	r3, [r7, #28]
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3720      	adds	r7, #32
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
	...

08009d94 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b088      	sub	sp, #32
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	60f8      	str	r0, [r7, #12]
 8009d9c:	460b      	mov	r3, r1
 8009d9e:	607a      	str	r2, [r7, #4]
 8009da0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009da2:	4b70      	ldr	r3, [pc, #448]	; (8009f64 <SDMMC_GetCmdResp1+0x1d0>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	4a70      	ldr	r2, [pc, #448]	; (8009f68 <SDMMC_GetCmdResp1+0x1d4>)
 8009da8:	fba2 2303 	umull	r2, r3, r2, r3
 8009dac:	0a5a      	lsrs	r2, r3, #9
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	fb02 f303 	mul.w	r3, r2, r3
 8009db4:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009db6:	69fb      	ldr	r3, [r7, #28]
 8009db8:	1e5a      	subs	r2, r3, #1
 8009dba:	61fa      	str	r2, [r7, #28]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d102      	bne.n	8009dc6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009dc0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009dc4:	e0c9      	b.n	8009f5a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dca:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009dcc:	69ba      	ldr	r2, [r7, #24]
 8009dce:	4b67      	ldr	r3, [pc, #412]	; (8009f6c <SDMMC_GetCmdResp1+0x1d8>)
 8009dd0:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d0ef      	beq.n	8009db6 <SDMMC_GetCmdResp1+0x22>
 8009dd6:	69bb      	ldr	r3, [r7, #24]
 8009dd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d1ea      	bne.n	8009db6 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009de4:	f003 0304 	and.w	r3, r3, #4
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d004      	beq.n	8009df6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2204      	movs	r2, #4
 8009df0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009df2:	2304      	movs	r3, #4
 8009df4:	e0b1      	b.n	8009f5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dfa:	f003 0301 	and.w	r3, r3, #1
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d004      	beq.n	8009e0c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	2201      	movs	r2, #1
 8009e06:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	e0a6      	b.n	8009f5a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	4a58      	ldr	r2, [pc, #352]	; (8009f70 <SDMMC_GetCmdResp1+0x1dc>)
 8009e10:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009e12:	68f8      	ldr	r0, [r7, #12]
 8009e14:	f7ff fcd4 	bl	80097c0 <SDMMC_GetCommandResponse>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	461a      	mov	r2, r3
 8009e1c:	7afb      	ldrb	r3, [r7, #11]
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d001      	beq.n	8009e26 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e22:	2301      	movs	r3, #1
 8009e24:	e099      	b.n	8009f5a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009e26:	2100      	movs	r1, #0
 8009e28:	68f8      	ldr	r0, [r7, #12]
 8009e2a:	f7ff fcd6 	bl	80097da <SDMMC_GetResponse>
 8009e2e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009e30:	697a      	ldr	r2, [r7, #20]
 8009e32:	4b50      	ldr	r3, [pc, #320]	; (8009f74 <SDMMC_GetCmdResp1+0x1e0>)
 8009e34:	4013      	ands	r3, r2
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d101      	bne.n	8009e3e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	e08d      	b.n	8009f5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	da02      	bge.n	8009e4a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009e44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009e48:	e087      	b.n	8009f5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d001      	beq.n	8009e58 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009e54:	2340      	movs	r3, #64	; 0x40
 8009e56:	e080      	b.n	8009f5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d001      	beq.n	8009e66 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009e62:	2380      	movs	r3, #128	; 0x80
 8009e64:	e079      	b.n	8009f5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d002      	beq.n	8009e76 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009e70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e74:	e071      	b.n	8009f5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d002      	beq.n	8009e86 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009e80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e84:	e069      	b.n	8009f5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d002      	beq.n	8009e96 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009e90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e94:	e061      	b.n	8009f5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d002      	beq.n	8009ea6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009ea0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009ea4:	e059      	b.n	8009f5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d002      	beq.n	8009eb6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009eb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009eb4:	e051      	b.n	8009f5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d002      	beq.n	8009ec6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009ec0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009ec4:	e049      	b.n	8009f5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d002      	beq.n	8009ed6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009ed0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009ed4:	e041      	b.n	8009f5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d002      	beq.n	8009ee6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009ee0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ee4:	e039      	b.n	8009f5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d002      	beq.n	8009ef6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009ef0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009ef4:	e031      	b.n	8009f5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d002      	beq.n	8009f06 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009f00:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009f04:	e029      	b.n	8009f5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d002      	beq.n	8009f16 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009f10:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009f14:	e021      	b.n	8009f5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d002      	beq.n	8009f26 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009f20:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009f24:	e019      	b.n	8009f5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d002      	beq.n	8009f36 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009f30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009f34:	e011      	b.n	8009f5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d002      	beq.n	8009f46 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009f40:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009f44:	e009      	b.n	8009f5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	f003 0308 	and.w	r3, r3, #8
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d002      	beq.n	8009f56 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009f50:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009f54:	e001      	b.n	8009f5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009f56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3720      	adds	r7, #32
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}
 8009f62:	bf00      	nop
 8009f64:	24000000 	.word	0x24000000
 8009f68:	10624dd3 	.word	0x10624dd3
 8009f6c:	00200045 	.word	0x00200045
 8009f70:	002000c5 	.word	0x002000c5
 8009f74:	fdffe008 	.word	0xfdffe008

08009f78 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b085      	sub	sp, #20
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009f80:	4b1f      	ldr	r3, [pc, #124]	; (800a000 <SDMMC_GetCmdResp2+0x88>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4a1f      	ldr	r2, [pc, #124]	; (800a004 <SDMMC_GetCmdResp2+0x8c>)
 8009f86:	fba2 2303 	umull	r2, r3, r2, r3
 8009f8a:	0a5b      	lsrs	r3, r3, #9
 8009f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f90:	fb02 f303 	mul.w	r3, r2, r3
 8009f94:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	1e5a      	subs	r2, r3, #1
 8009f9a:	60fa      	str	r2, [r7, #12]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d102      	bne.n	8009fa6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009fa0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009fa4:	e026      	b.n	8009ff4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009faa:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d0ef      	beq.n	8009f96 <SDMMC_GetCmdResp2+0x1e>
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d1ea      	bne.n	8009f96 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fc4:	f003 0304 	and.w	r3, r3, #4
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d004      	beq.n	8009fd6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2204      	movs	r2, #4
 8009fd0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009fd2:	2304      	movs	r3, #4
 8009fd4:	e00e      	b.n	8009ff4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fda:	f003 0301 	and.w	r3, r3, #1
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d004      	beq.n	8009fec <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2201      	movs	r2, #1
 8009fe6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	e003      	b.n	8009ff4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	4a06      	ldr	r2, [pc, #24]	; (800a008 <SDMMC_GetCmdResp2+0x90>)
 8009ff0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009ff2:	2300      	movs	r3, #0
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3714      	adds	r7, #20
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffe:	4770      	bx	lr
 800a000:	24000000 	.word	0x24000000
 800a004:	10624dd3 	.word	0x10624dd3
 800a008:	002000c5 	.word	0x002000c5

0800a00c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b085      	sub	sp, #20
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a014:	4b1a      	ldr	r3, [pc, #104]	; (800a080 <SDMMC_GetCmdResp3+0x74>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	4a1a      	ldr	r2, [pc, #104]	; (800a084 <SDMMC_GetCmdResp3+0x78>)
 800a01a:	fba2 2303 	umull	r2, r3, r2, r3
 800a01e:	0a5b      	lsrs	r3, r3, #9
 800a020:	f241 3288 	movw	r2, #5000	; 0x1388
 800a024:	fb02 f303 	mul.w	r3, r2, r3
 800a028:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	1e5a      	subs	r2, r3, #1
 800a02e:	60fa      	str	r2, [r7, #12]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d102      	bne.n	800a03a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a034:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a038:	e01b      	b.n	800a072 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a03e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a046:	2b00      	cmp	r3, #0
 800a048:	d0ef      	beq.n	800a02a <SDMMC_GetCmdResp3+0x1e>
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a050:	2b00      	cmp	r3, #0
 800a052:	d1ea      	bne.n	800a02a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a058:	f003 0304 	and.w	r3, r3, #4
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d004      	beq.n	800a06a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2204      	movs	r2, #4
 800a064:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a066:	2304      	movs	r3, #4
 800a068:	e003      	b.n	800a072 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	4a06      	ldr	r2, [pc, #24]	; (800a088 <SDMMC_GetCmdResp3+0x7c>)
 800a06e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a070:	2300      	movs	r3, #0
}
 800a072:	4618      	mov	r0, r3
 800a074:	3714      	adds	r7, #20
 800a076:	46bd      	mov	sp, r7
 800a078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07c:	4770      	bx	lr
 800a07e:	bf00      	nop
 800a080:	24000000 	.word	0x24000000
 800a084:	10624dd3 	.word	0x10624dd3
 800a088:	002000c5 	.word	0x002000c5

0800a08c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b088      	sub	sp, #32
 800a090:	af00      	add	r7, sp, #0
 800a092:	60f8      	str	r0, [r7, #12]
 800a094:	460b      	mov	r3, r1
 800a096:	607a      	str	r2, [r7, #4]
 800a098:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a09a:	4b35      	ldr	r3, [pc, #212]	; (800a170 <SDMMC_GetCmdResp6+0xe4>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	4a35      	ldr	r2, [pc, #212]	; (800a174 <SDMMC_GetCmdResp6+0xe8>)
 800a0a0:	fba2 2303 	umull	r2, r3, r2, r3
 800a0a4:	0a5b      	lsrs	r3, r3, #9
 800a0a6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0aa:	fb02 f303 	mul.w	r3, r2, r3
 800a0ae:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a0b0:	69fb      	ldr	r3, [r7, #28]
 800a0b2:	1e5a      	subs	r2, r3, #1
 800a0b4:	61fa      	str	r2, [r7, #28]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d102      	bne.n	800a0c0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a0ba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a0be:	e052      	b.n	800a166 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0c4:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a0c6:	69bb      	ldr	r3, [r7, #24]
 800a0c8:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d0ef      	beq.n	800a0b0 <SDMMC_GetCmdResp6+0x24>
 800a0d0:	69bb      	ldr	r3, [r7, #24]
 800a0d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d1ea      	bne.n	800a0b0 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0de:	f003 0304 	and.w	r3, r3, #4
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d004      	beq.n	800a0f0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2204      	movs	r2, #4
 800a0ea:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a0ec:	2304      	movs	r3, #4
 800a0ee:	e03a      	b.n	800a166 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0f4:	f003 0301 	and.w	r3, r3, #1
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d004      	beq.n	800a106 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2201      	movs	r2, #1
 800a100:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a102:	2301      	movs	r3, #1
 800a104:	e02f      	b.n	800a166 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a106:	68f8      	ldr	r0, [r7, #12]
 800a108:	f7ff fb5a 	bl	80097c0 <SDMMC_GetCommandResponse>
 800a10c:	4603      	mov	r3, r0
 800a10e:	461a      	mov	r2, r3
 800a110:	7afb      	ldrb	r3, [r7, #11]
 800a112:	4293      	cmp	r3, r2
 800a114:	d001      	beq.n	800a11a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a116:	2301      	movs	r3, #1
 800a118:	e025      	b.n	800a166 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	4a16      	ldr	r2, [pc, #88]	; (800a178 <SDMMC_GetCmdResp6+0xec>)
 800a11e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a120:	2100      	movs	r1, #0
 800a122:	68f8      	ldr	r0, [r7, #12]
 800a124:	f7ff fb59 	bl	80097da <SDMMC_GetResponse>
 800a128:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a130:	2b00      	cmp	r3, #0
 800a132:	d106      	bne.n	800a142 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	0c1b      	lsrs	r3, r3, #16
 800a138:	b29a      	uxth	r2, r3
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800a13e:	2300      	movs	r3, #0
 800a140:	e011      	b.n	800a166 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d002      	beq.n	800a152 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a14c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a150:	e009      	b.n	800a166 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d002      	beq.n	800a162 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a15c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a160:	e001      	b.n	800a166 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a162:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a166:	4618      	mov	r0, r3
 800a168:	3720      	adds	r7, #32
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}
 800a16e:	bf00      	nop
 800a170:	24000000 	.word	0x24000000
 800a174:	10624dd3 	.word	0x10624dd3
 800a178:	002000c5 	.word	0x002000c5

0800a17c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b085      	sub	sp, #20
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a184:	4b22      	ldr	r3, [pc, #136]	; (800a210 <SDMMC_GetCmdResp7+0x94>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4a22      	ldr	r2, [pc, #136]	; (800a214 <SDMMC_GetCmdResp7+0x98>)
 800a18a:	fba2 2303 	umull	r2, r3, r2, r3
 800a18e:	0a5b      	lsrs	r3, r3, #9
 800a190:	f241 3288 	movw	r2, #5000	; 0x1388
 800a194:	fb02 f303 	mul.w	r3, r2, r3
 800a198:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	1e5a      	subs	r2, r3, #1
 800a19e:	60fa      	str	r2, [r7, #12]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d102      	bne.n	800a1aa <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a1a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a1a8:	e02c      	b.n	800a204 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1ae:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d0ef      	beq.n	800a19a <SDMMC_GetCmdResp7+0x1e>
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d1ea      	bne.n	800a19a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1c8:	f003 0304 	and.w	r3, r3, #4
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d004      	beq.n	800a1da <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2204      	movs	r2, #4
 800a1d4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a1d6:	2304      	movs	r3, #4
 800a1d8:	e014      	b.n	800a204 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1de:	f003 0301 	and.w	r3, r3, #1
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d004      	beq.n	800a1f0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	e009      	b.n	800a204 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d002      	beq.n	800a202 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2240      	movs	r2, #64	; 0x40
 800a200:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a202:	2300      	movs	r3, #0

}
 800a204:	4618      	mov	r0, r3
 800a206:	3714      	adds	r7, #20
 800a208:	46bd      	mov	sp, r7
 800a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20e:	4770      	bx	lr
 800a210:	24000000 	.word	0x24000000
 800a214:	10624dd3 	.word	0x10624dd3

0800a218 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a218:	b480      	push	{r7}
 800a21a:	b085      	sub	sp, #20
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a220:	4b11      	ldr	r3, [pc, #68]	; (800a268 <SDMMC_GetCmdError+0x50>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	4a11      	ldr	r2, [pc, #68]	; (800a26c <SDMMC_GetCmdError+0x54>)
 800a226:	fba2 2303 	umull	r2, r3, r2, r3
 800a22a:	0a5b      	lsrs	r3, r3, #9
 800a22c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a230:	fb02 f303 	mul.w	r3, r2, r3
 800a234:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	1e5a      	subs	r2, r3, #1
 800a23a:	60fa      	str	r2, [r7, #12]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d102      	bne.n	800a246 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a240:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a244:	e009      	b.n	800a25a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a24a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d0f1      	beq.n	800a236 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	4a06      	ldr	r2, [pc, #24]	; (800a270 <SDMMC_GetCmdError+0x58>)
 800a256:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800a258:	2300      	movs	r3, #0
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3714      	adds	r7, #20
 800a25e:	46bd      	mov	sp, r7
 800a260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a264:	4770      	bx	lr
 800a266:	bf00      	nop
 800a268:	24000000 	.word	0x24000000
 800a26c:	10624dd3 	.word	0x10624dd3
 800a270:	002000c5 	.word	0x002000c5

0800a274 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a278:	4904      	ldr	r1, [pc, #16]	; (800a28c <MX_FATFS_Init+0x18>)
 800a27a:	4805      	ldr	r0, [pc, #20]	; (800a290 <MX_FATFS_Init+0x1c>)
 800a27c:	f000 faa2 	bl	800a7c4 <FATFS_LinkDriver>
 800a280:	4603      	mov	r3, r0
 800a282:	461a      	mov	r2, r3
 800a284:	4b03      	ldr	r3, [pc, #12]	; (800a294 <MX_FATFS_Init+0x20>)
 800a286:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a288:	bf00      	nop
 800a28a:	bd80      	pop	{r7, pc}
 800a28c:	2400426c 	.word	0x2400426c
 800a290:	0800df84 	.word	0x0800df84
 800a294:	24004268 	.word	0x24004268

0800a298 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b082      	sub	sp, #8
 800a29c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a2a2:	f000 f877 	bl	800a394 <BSP_SD_IsDetected>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	2b01      	cmp	r3, #1
 800a2aa:	d001      	beq.n	800a2b0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800a2ac:	2302      	movs	r3, #2
 800a2ae:	e005      	b.n	800a2bc <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800a2b0:	4804      	ldr	r0, [pc, #16]	; (800a2c4 <BSP_SD_Init+0x2c>)
 800a2b2:	f7fb fd25 	bl	8005d00 <HAL_SD_Init>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800a2ba:	79fb      	ldrb	r3, [r7, #7]
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	3708      	adds	r7, #8
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}
 800a2c4:	2400405c 	.word	0x2400405c

0800a2c8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b086      	sub	sp, #24
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	60f8      	str	r0, [r7, #12]
 800a2d0:	60b9      	str	r1, [r7, #8]
 800a2d2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	68ba      	ldr	r2, [r7, #8]
 800a2dc:	68f9      	ldr	r1, [r7, #12]
 800a2de:	4806      	ldr	r0, [pc, #24]	; (800a2f8 <BSP_SD_ReadBlocks_DMA+0x30>)
 800a2e0:	f7fb fe3a 	bl	8005f58 <HAL_SD_ReadBlocks_DMA>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d001      	beq.n	800a2ee <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a2ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3718      	adds	r7, #24
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}
 800a2f8:	2400405c 	.word	0x2400405c

0800a2fc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b086      	sub	sp, #24
 800a300:	af00      	add	r7, sp, #0
 800a302:	60f8      	str	r0, [r7, #12]
 800a304:	60b9      	str	r1, [r7, #8]
 800a306:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a308:	2300      	movs	r3, #0
 800a30a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	68ba      	ldr	r2, [r7, #8]
 800a310:	68f9      	ldr	r1, [r7, #12]
 800a312:	4806      	ldr	r0, [pc, #24]	; (800a32c <BSP_SD_WriteBlocks_DMA+0x30>)
 800a314:	f7fb fec8 	bl	80060a8 <HAL_SD_WriteBlocks_DMA>
 800a318:	4603      	mov	r3, r0
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d001      	beq.n	800a322 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a31e:	2301      	movs	r3, #1
 800a320:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a322:	7dfb      	ldrb	r3, [r7, #23]
}
 800a324:	4618      	mov	r0, r3
 800a326:	3718      	adds	r7, #24
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}
 800a32c:	2400405c 	.word	0x2400405c

0800a330 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a334:	4805      	ldr	r0, [pc, #20]	; (800a34c <BSP_SD_GetCardState+0x1c>)
 800a336:	f7fc fcc5 	bl	8006cc4 <HAL_SD_GetCardState>
 800a33a:	4603      	mov	r3, r0
 800a33c:	2b04      	cmp	r3, #4
 800a33e:	bf14      	ite	ne
 800a340:	2301      	movne	r3, #1
 800a342:	2300      	moveq	r3, #0
 800a344:	b2db      	uxtb	r3, r3
}
 800a346:	4618      	mov	r0, r3
 800a348:	bd80      	pop	{r7, pc}
 800a34a:	bf00      	nop
 800a34c:	2400405c 	.word	0x2400405c

0800a350 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b082      	sub	sp, #8
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800a358:	6879      	ldr	r1, [r7, #4]
 800a35a:	4803      	ldr	r0, [pc, #12]	; (800a368 <BSP_SD_GetCardInfo+0x18>)
 800a35c:	f7fc fb72 	bl	8006a44 <HAL_SD_GetCardInfo>
}
 800a360:	bf00      	nop
 800a362:	3708      	adds	r7, #8
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}
 800a368:	2400405c 	.word	0x2400405c

0800a36c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b082      	sub	sp, #8
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a374:	f000 f9a0 	bl	800a6b8 <BSP_SD_WriteCpltCallback>
}
 800a378:	bf00      	nop
 800a37a:	3708      	adds	r7, #8
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b082      	sub	sp, #8
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a388:	f000 f9a4 	bl	800a6d4 <BSP_SD_ReadCpltCallback>
}
 800a38c:	bf00      	nop
 800a38e:	3708      	adds	r7, #8
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}

0800a394 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a394:	b480      	push	{r7}
 800a396:	b083      	sub	sp, #12
 800a398:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a39a:	2301      	movs	r3, #1
 800a39c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 800a39e:	79fb      	ldrb	r3, [r7, #7]
 800a3a0:	b2db      	uxtb	r3, r3
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	370c      	adds	r7, #12
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ac:	4770      	bx	lr

0800a3ae <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800a3ae:	b580      	push	{r7, lr}
 800a3b0:	b084      	sub	sp, #16
 800a3b2:	af00      	add	r7, sp, #0
 800a3b4:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800a3b6:	f000 fa51 	bl	800a85c <osKernelSysTick>
 800a3ba:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800a3bc:	e006      	b.n	800a3cc <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a3be:	f7ff ffb7 	bl	800a330 <BSP_SD_GetCardState>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d101      	bne.n	800a3cc <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	e009      	b.n	800a3e0 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800a3cc:	f000 fa46 	bl	800a85c <osKernelSysTick>
 800a3d0:	4602      	mov	r2, r0
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	1ad3      	subs	r3, r2, r3
 800a3d6:	687a      	ldr	r2, [r7, #4]
 800a3d8:	429a      	cmp	r2, r3
 800a3da:	d8f0      	bhi.n	800a3be <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800a3dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3710      	adds	r7, #16
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}

0800a3e8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b082      	sub	sp, #8
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a3f2:	4b0b      	ldr	r3, [pc, #44]	; (800a420 <SD_CheckStatus+0x38>)
 800a3f4:	2201      	movs	r2, #1
 800a3f6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a3f8:	f7ff ff9a 	bl	800a330 <BSP_SD_GetCardState>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d107      	bne.n	800a412 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a402:	4b07      	ldr	r3, [pc, #28]	; (800a420 <SD_CheckStatus+0x38>)
 800a404:	781b      	ldrb	r3, [r3, #0]
 800a406:	b2db      	uxtb	r3, r3
 800a408:	f023 0301 	bic.w	r3, r3, #1
 800a40c:	b2da      	uxtb	r2, r3
 800a40e:	4b04      	ldr	r3, [pc, #16]	; (800a420 <SD_CheckStatus+0x38>)
 800a410:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a412:	4b03      	ldr	r3, [pc, #12]	; (800a420 <SD_CheckStatus+0x38>)
 800a414:	781b      	ldrb	r3, [r3, #0]
 800a416:	b2db      	uxtb	r3, r3
}
 800a418:	4618      	mov	r0, r3
 800a41a:	3708      	adds	r7, #8
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}
 800a420:	2400000d 	.word	0x2400000d

0800a424 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a424:	b590      	push	{r4, r7, lr}
 800a426:	b087      	sub	sp, #28
 800a428:	af00      	add	r7, sp, #0
 800a42a:	4603      	mov	r3, r0
 800a42c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800a42e:	4b20      	ldr	r3, [pc, #128]	; (800a4b0 <SD_initialize+0x8c>)
 800a430:	2201      	movs	r2, #1
 800a432:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800a434:	f000 fa06 	bl	800a844 <osKernelRunning>
 800a438:	4603      	mov	r3, r0
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d030      	beq.n	800a4a0 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800a43e:	f7ff ff2b 	bl	800a298 <BSP_SD_Init>
 800a442:	4603      	mov	r3, r0
 800a444:	2b00      	cmp	r3, #0
 800a446:	d107      	bne.n	800a458 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800a448:	79fb      	ldrb	r3, [r7, #7]
 800a44a:	4618      	mov	r0, r3
 800a44c:	f7ff ffcc 	bl	800a3e8 <SD_CheckStatus>
 800a450:	4603      	mov	r3, r0
 800a452:	461a      	mov	r2, r3
 800a454:	4b16      	ldr	r3, [pc, #88]	; (800a4b0 <SD_initialize+0x8c>)
 800a456:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800a458:	4b15      	ldr	r3, [pc, #84]	; (800a4b0 <SD_initialize+0x8c>)
 800a45a:	781b      	ldrb	r3, [r3, #0]
 800a45c:	b2db      	uxtb	r3, r3
 800a45e:	2b01      	cmp	r3, #1
 800a460:	d01e      	beq.n	800a4a0 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800a462:	4b14      	ldr	r3, [pc, #80]	; (800a4b4 <SD_initialize+0x90>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d10e      	bne.n	800a488 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800a46a:	4b13      	ldr	r3, [pc, #76]	; (800a4b8 <SD_initialize+0x94>)
 800a46c:	f107 0408 	add.w	r4, r7, #8
 800a470:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a472:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800a476:	f107 0308 	add.w	r3, r7, #8
 800a47a:	2100      	movs	r1, #0
 800a47c:	4618      	mov	r0, r3
 800a47e:	f000 fa49 	bl	800a914 <osMessageCreate>
 800a482:	4603      	mov	r3, r0
 800a484:	4a0b      	ldr	r2, [pc, #44]	; (800a4b4 <SD_initialize+0x90>)
 800a486:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800a488:	4b0a      	ldr	r3, [pc, #40]	; (800a4b4 <SD_initialize+0x90>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d107      	bne.n	800a4a0 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800a490:	4b07      	ldr	r3, [pc, #28]	; (800a4b0 <SD_initialize+0x8c>)
 800a492:	781b      	ldrb	r3, [r3, #0]
 800a494:	b2db      	uxtb	r3, r3
 800a496:	f043 0301 	orr.w	r3, r3, #1
 800a49a:	b2da      	uxtb	r2, r3
 800a49c:	4b04      	ldr	r3, [pc, #16]	; (800a4b0 <SD_initialize+0x8c>)
 800a49e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800a4a0:	4b03      	ldr	r3, [pc, #12]	; (800a4b0 <SD_initialize+0x8c>)
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	b2db      	uxtb	r3, r3
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	371c      	adds	r7, #28
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd90      	pop	{r4, r7, pc}
 800a4ae:	bf00      	nop
 800a4b0:	2400000d 	.word	0x2400000d
 800a4b4:	240002ec 	.word	0x240002ec
 800a4b8:	0800df34 	.word	0x0800df34

0800a4bc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b082      	sub	sp, #8
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a4c6:	79fb      	ldrb	r3, [r7, #7]
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f7ff ff8d 	bl	800a3e8 <SD_CheckStatus>
 800a4ce:	4603      	mov	r3, r0
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3708      	adds	r7, #8
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b08a      	sub	sp, #40	; 0x28
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	60b9      	str	r1, [r7, #8]
 800a4e0:	607a      	str	r2, [r7, #4]
 800a4e2:	603b      	str	r3, [r7, #0]
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a4ee:	f247 5030 	movw	r0, #30000	; 0x7530
 800a4f2:	f7ff ff5c 	bl	800a3ae <SD_CheckStatusWithTimeout>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	da02      	bge.n	800a502 <SD_read+0x2a>
  {
    return res;
 800a4fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a500:	e032      	b.n	800a568 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800a502:	683a      	ldr	r2, [r7, #0]
 800a504:	6879      	ldr	r1, [r7, #4]
 800a506:	68b8      	ldr	r0, [r7, #8]
 800a508:	f7ff fede 	bl	800a2c8 <BSP_SD_ReadBlocks_DMA>
 800a50c:	4603      	mov	r3, r0
 800a50e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800a512:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a516:	2b00      	cmp	r3, #0
 800a518:	d124      	bne.n	800a564 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800a51a:	4b15      	ldr	r3, [pc, #84]	; (800a570 <SD_read+0x98>)
 800a51c:	6819      	ldr	r1, [r3, #0]
 800a51e:	f107 0314 	add.w	r3, r7, #20
 800a522:	f247 5230 	movw	r2, #30000	; 0x7530
 800a526:	4618      	mov	r0, r3
 800a528:	f000 fa5c 	bl	800a9e4 <osMessageGet>

    if (event.status == osEventMessage)
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	2b10      	cmp	r3, #16
 800a530:	d118      	bne.n	800a564 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800a532:	69bb      	ldr	r3, [r7, #24]
 800a534:	2b01      	cmp	r3, #1
 800a536:	d115      	bne.n	800a564 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800a538:	f000 f990 	bl	800a85c <osKernelSysTick>
 800a53c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800a53e:	e008      	b.n	800a552 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a540:	f7ff fef6 	bl	800a330 <BSP_SD_GetCardState>
 800a544:	4603      	mov	r3, r0
 800a546:	2b00      	cmp	r3, #0
 800a548:	d103      	bne.n	800a552 <SD_read+0x7a>
              {
                res = RES_OK;
 800a54a:	2300      	movs	r3, #0
 800a54c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800a550:	e008      	b.n	800a564 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800a552:	f000 f983 	bl	800a85c <osKernelSysTick>
 800a556:	4602      	mov	r2, r0
 800a558:	6a3b      	ldr	r3, [r7, #32]
 800a55a:	1ad3      	subs	r3, r2, r3
 800a55c:	f247 522f 	movw	r2, #29999	; 0x752f
 800a560:	4293      	cmp	r3, r2
 800a562:	d9ed      	bls.n	800a540 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800a564:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3728      	adds	r7, #40	; 0x28
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}
 800a570:	240002ec 	.word	0x240002ec

0800a574 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b08a      	sub	sp, #40	; 0x28
 800a578:	af00      	add	r7, sp, #0
 800a57a:	60b9      	str	r1, [r7, #8]
 800a57c:	607a      	str	r2, [r7, #4]
 800a57e:	603b      	str	r3, [r7, #0]
 800a580:	4603      	mov	r3, r0
 800a582:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a584:	2301      	movs	r3, #1
 800a586:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a58a:	f247 5030 	movw	r0, #30000	; 0x7530
 800a58e:	f7ff ff0e 	bl	800a3ae <SD_CheckStatusWithTimeout>
 800a592:	4603      	mov	r3, r0
 800a594:	2b00      	cmp	r3, #0
 800a596:	da02      	bge.n	800a59e <SD_write+0x2a>
  {
    return res;
 800a598:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a59c:	e02e      	b.n	800a5fc <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800a59e:	683a      	ldr	r2, [r7, #0]
 800a5a0:	6879      	ldr	r1, [r7, #4]
 800a5a2:	68b8      	ldr	r0, [r7, #8]
 800a5a4:	f7ff feaa 	bl	800a2fc <BSP_SD_WriteBlocks_DMA>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d124      	bne.n	800a5f8 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800a5ae:	4b15      	ldr	r3, [pc, #84]	; (800a604 <SD_write+0x90>)
 800a5b0:	6819      	ldr	r1, [r3, #0]
 800a5b2:	f107 0314 	add.w	r3, r7, #20
 800a5b6:	f247 5230 	movw	r2, #30000	; 0x7530
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f000 fa12 	bl	800a9e4 <osMessageGet>

    if (event.status == osEventMessage)
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	2b10      	cmp	r3, #16
 800a5c4:	d118      	bne.n	800a5f8 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800a5c6:	69bb      	ldr	r3, [r7, #24]
 800a5c8:	2b02      	cmp	r3, #2
 800a5ca:	d115      	bne.n	800a5f8 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800a5cc:	f000 f946 	bl	800a85c <osKernelSysTick>
 800a5d0:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800a5d2:	e008      	b.n	800a5e6 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a5d4:	f7ff feac 	bl	800a330 <BSP_SD_GetCardState>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d103      	bne.n	800a5e6 <SD_write+0x72>
          {
            res = RES_OK;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800a5e4:	e008      	b.n	800a5f8 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800a5e6:	f000 f939 	bl	800a85c <osKernelSysTick>
 800a5ea:	4602      	mov	r2, r0
 800a5ec:	6a3b      	ldr	r3, [r7, #32]
 800a5ee:	1ad3      	subs	r3, r2, r3
 800a5f0:	f247 522f 	movw	r2, #29999	; 0x752f
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d9ed      	bls.n	800a5d4 <SD_write+0x60>
    }

  }
#endif

  return res;
 800a5f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3728      	adds	r7, #40	; 0x28
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}
 800a604:	240002ec 	.word	0x240002ec

0800a608 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b08c      	sub	sp, #48	; 0x30
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	4603      	mov	r3, r0
 800a610:	603a      	str	r2, [r7, #0]
 800a612:	71fb      	strb	r3, [r7, #7]
 800a614:	460b      	mov	r3, r1
 800a616:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a618:	2301      	movs	r3, #1
 800a61a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a61e:	4b25      	ldr	r3, [pc, #148]	; (800a6b4 <SD_ioctl+0xac>)
 800a620:	781b      	ldrb	r3, [r3, #0]
 800a622:	b2db      	uxtb	r3, r3
 800a624:	f003 0301 	and.w	r3, r3, #1
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d001      	beq.n	800a630 <SD_ioctl+0x28>
 800a62c:	2303      	movs	r3, #3
 800a62e:	e03c      	b.n	800a6aa <SD_ioctl+0xa2>

  switch (cmd)
 800a630:	79bb      	ldrb	r3, [r7, #6]
 800a632:	2b03      	cmp	r3, #3
 800a634:	d834      	bhi.n	800a6a0 <SD_ioctl+0x98>
 800a636:	a201      	add	r2, pc, #4	; (adr r2, 800a63c <SD_ioctl+0x34>)
 800a638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a63c:	0800a64d 	.word	0x0800a64d
 800a640:	0800a655 	.word	0x0800a655
 800a644:	0800a66d 	.word	0x0800a66d
 800a648:	0800a687 	.word	0x0800a687
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a64c:	2300      	movs	r3, #0
 800a64e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a652:	e028      	b.n	800a6a6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a654:	f107 0308 	add.w	r3, r7, #8
 800a658:	4618      	mov	r0, r3
 800a65a:	f7ff fe79 	bl	800a350 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a65e:	6a3a      	ldr	r2, [r7, #32]
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a664:	2300      	movs	r3, #0
 800a666:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a66a:	e01c      	b.n	800a6a6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a66c:	f107 0308 	add.w	r3, r7, #8
 800a670:	4618      	mov	r0, r3
 800a672:	f7ff fe6d 	bl	800a350 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a678:	b29a      	uxth	r2, r3
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a67e:	2300      	movs	r3, #0
 800a680:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a684:	e00f      	b.n	800a6a6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a686:	f107 0308 	add.w	r3, r7, #8
 800a68a:	4618      	mov	r0, r3
 800a68c:	f7ff fe60 	bl	800a350 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a692:	0a5a      	lsrs	r2, r3, #9
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a698:	2300      	movs	r3, #0
 800a69a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a69e:	e002      	b.n	800a6a6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a6a0:	2304      	movs	r3, #4
 800a6a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a6a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3730      	adds	r7, #48	; 0x30
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}
 800a6b2:	bf00      	nop
 800a6b4:	2400000d 	.word	0x2400000d

0800a6b8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 800a6bc:	4b04      	ldr	r3, [pc, #16]	; (800a6d0 <BSP_SD_WriteCpltCallback+0x18>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	2102      	movs	r1, #2
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f000 f94d 	bl	800a964 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800a6ca:	bf00      	nop
 800a6cc:	bd80      	pop	{r7, pc}
 800a6ce:	bf00      	nop
 800a6d0:	240002ec 	.word	0x240002ec

0800a6d4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800a6d8:	4b04      	ldr	r3, [pc, #16]	; (800a6ec <BSP_SD_ReadCpltCallback+0x18>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	2101      	movs	r1, #1
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f000 f93f 	bl	800a964 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800a6e6:	bf00      	nop
 800a6e8:	bd80      	pop	{r7, pc}
 800a6ea:	bf00      	nop
 800a6ec:	240002ec 	.word	0x240002ec

0800a6f0 <MX_MBEDTLS_Init>:

/* USER CODE END 2 */

/* MBEDTLS init function */
void MX_MBEDTLS_Init(void)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	af00      	add	r7, sp, #0
   /**
  */
  mbedtls_ssl_init(&ssl);
 800a6f4:	4808      	ldr	r0, [pc, #32]	; (800a718 <MX_MBEDTLS_Init+0x28>)
 800a6f6:	f002 fb10 	bl	800cd1a <mbedtls_ssl_init>
  mbedtls_ssl_config_init(&conf);
 800a6fa:	4808      	ldr	r0, [pc, #32]	; (800a71c <MX_MBEDTLS_Init+0x2c>)
 800a6fc:	f002 fb1b 	bl	800cd36 <mbedtls_ssl_config_init>
  mbedtls_x509_crt_init(&cert);
 800a700:	4807      	ldr	r0, [pc, #28]	; (800a720 <MX_MBEDTLS_Init+0x30>)
 800a702:	f002 fb25 	bl	800cd50 <mbedtls_x509_crt_init>
  mbedtls_ctr_drbg_init(&ctr_drbg);
 800a706:	4807      	ldr	r0, [pc, #28]	; (800a724 <MX_MBEDTLS_Init+0x34>)
 800a708:	f002 fad0 	bl	800ccac <mbedtls_ctr_drbg_init>
  mbedtls_entropy_init( &entropy );
 800a70c:	4806      	ldr	r0, [pc, #24]	; (800a728 <MX_MBEDTLS_Init+0x38>)
 800a70e:	f002 fadb 	bl	800ccc8 <mbedtls_entropy_init>
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */

}
 800a712:	bf00      	nop
 800a714:	bd80      	pop	{r7, pc}
 800a716:	bf00      	nop
 800a718:	24004b58 	.word	0x24004b58
 800a71c:	2400480c 	.word	0x2400480c
 800a720:	240046d8 	.word	0x240046d8
 800a724:	24004c70 	.word	0x24004c70
 800a728:	240048e0 	.word	0x240048e0

0800a72c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a72c:	b480      	push	{r7}
 800a72e:	b087      	sub	sp, #28
 800a730:	af00      	add	r7, sp, #0
 800a732:	60f8      	str	r0, [r7, #12]
 800a734:	60b9      	str	r1, [r7, #8]
 800a736:	4613      	mov	r3, r2
 800a738:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a73a:	2301      	movs	r3, #1
 800a73c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a73e:	2300      	movs	r3, #0
 800a740:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a742:	4b1f      	ldr	r3, [pc, #124]	; (800a7c0 <FATFS_LinkDriverEx+0x94>)
 800a744:	7a5b      	ldrb	r3, [r3, #9]
 800a746:	b2db      	uxtb	r3, r3
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d131      	bne.n	800a7b0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a74c:	4b1c      	ldr	r3, [pc, #112]	; (800a7c0 <FATFS_LinkDriverEx+0x94>)
 800a74e:	7a5b      	ldrb	r3, [r3, #9]
 800a750:	b2db      	uxtb	r3, r3
 800a752:	461a      	mov	r2, r3
 800a754:	4b1a      	ldr	r3, [pc, #104]	; (800a7c0 <FATFS_LinkDriverEx+0x94>)
 800a756:	2100      	movs	r1, #0
 800a758:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a75a:	4b19      	ldr	r3, [pc, #100]	; (800a7c0 <FATFS_LinkDriverEx+0x94>)
 800a75c:	7a5b      	ldrb	r3, [r3, #9]
 800a75e:	b2db      	uxtb	r3, r3
 800a760:	4a17      	ldr	r2, [pc, #92]	; (800a7c0 <FATFS_LinkDriverEx+0x94>)
 800a762:	009b      	lsls	r3, r3, #2
 800a764:	4413      	add	r3, r2
 800a766:	68fa      	ldr	r2, [r7, #12]
 800a768:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a76a:	4b15      	ldr	r3, [pc, #84]	; (800a7c0 <FATFS_LinkDriverEx+0x94>)
 800a76c:	7a5b      	ldrb	r3, [r3, #9]
 800a76e:	b2db      	uxtb	r3, r3
 800a770:	461a      	mov	r2, r3
 800a772:	4b13      	ldr	r3, [pc, #76]	; (800a7c0 <FATFS_LinkDriverEx+0x94>)
 800a774:	4413      	add	r3, r2
 800a776:	79fa      	ldrb	r2, [r7, #7]
 800a778:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a77a:	4b11      	ldr	r3, [pc, #68]	; (800a7c0 <FATFS_LinkDriverEx+0x94>)
 800a77c:	7a5b      	ldrb	r3, [r3, #9]
 800a77e:	b2db      	uxtb	r3, r3
 800a780:	1c5a      	adds	r2, r3, #1
 800a782:	b2d1      	uxtb	r1, r2
 800a784:	4a0e      	ldr	r2, [pc, #56]	; (800a7c0 <FATFS_LinkDriverEx+0x94>)
 800a786:	7251      	strb	r1, [r2, #9]
 800a788:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a78a:	7dbb      	ldrb	r3, [r7, #22]
 800a78c:	3330      	adds	r3, #48	; 0x30
 800a78e:	b2da      	uxtb	r2, r3
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	3301      	adds	r3, #1
 800a798:	223a      	movs	r2, #58	; 0x3a
 800a79a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	3302      	adds	r3, #2
 800a7a0:	222f      	movs	r2, #47	; 0x2f
 800a7a2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	3303      	adds	r3, #3
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a7b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	371c      	adds	r7, #28
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr
 800a7be:	bf00      	nop
 800a7c0:	240002f0 	.word	0x240002f0

0800a7c4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b082      	sub	sp, #8
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	6839      	ldr	r1, [r7, #0]
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f7ff ffaa 	bl	800a72c <FATFS_LinkDriverEx>
 800a7d8:	4603      	mov	r3, r0
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	3708      	adds	r7, #8
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}

0800a7e2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a7e2:	b480      	push	{r7}
 800a7e4:	b085      	sub	sp, #20
 800a7e6:	af00      	add	r7, sp, #0
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a7f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a7f4:	2b84      	cmp	r3, #132	; 0x84
 800a7f6:	d005      	beq.n	800a804 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a7f8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	4413      	add	r3, r2
 800a800:	3303      	adds	r3, #3
 800a802:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a804:	68fb      	ldr	r3, [r7, #12]
}
 800a806:	4618      	mov	r0, r3
 800a808:	3714      	adds	r7, #20
 800a80a:	46bd      	mov	sp, r7
 800a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a810:	4770      	bx	lr

0800a812 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a812:	b480      	push	{r7}
 800a814:	b083      	sub	sp, #12
 800a816:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a818:	f3ef 8305 	mrs	r3, IPSR
 800a81c:	607b      	str	r3, [r7, #4]
  return(result);
 800a81e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a820:	2b00      	cmp	r3, #0
 800a822:	bf14      	ite	ne
 800a824:	2301      	movne	r3, #1
 800a826:	2300      	moveq	r3, #0
 800a828:	b2db      	uxtb	r3, r3
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	370c      	adds	r7, #12
 800a82e:	46bd      	mov	sp, r7
 800a830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a834:	4770      	bx	lr

0800a836 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a836:	b580      	push	{r7, lr}
 800a838:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a83a:	f001 fd0d 	bl	800c258 <vTaskStartScheduler>
  
  return osOK;
 800a83e:	2300      	movs	r3, #0
}
 800a840:	4618      	mov	r0, r3
 800a842:	bd80      	pop	{r7, pc}

0800a844 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800a848:	f002 f926 	bl	800ca98 <xTaskGetSchedulerState>
 800a84c:	4603      	mov	r3, r0
 800a84e:	2b01      	cmp	r3, #1
 800a850:	d101      	bne.n	800a856 <osKernelRunning+0x12>
    return 0;
 800a852:	2300      	movs	r3, #0
 800a854:	e000      	b.n	800a858 <osKernelRunning+0x14>
  else
    return 1;
 800a856:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800a858:	4618      	mov	r0, r3
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800a860:	f7ff ffd7 	bl	800a812 <inHandlerMode>
 800a864:	4603      	mov	r3, r0
 800a866:	2b00      	cmp	r3, #0
 800a868:	d003      	beq.n	800a872 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800a86a:	f001 fe0f 	bl	800c48c <xTaskGetTickCountFromISR>
 800a86e:	4603      	mov	r3, r0
 800a870:	e002      	b.n	800a878 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800a872:	f001 fdfb 	bl	800c46c <xTaskGetTickCount>
 800a876:	4603      	mov	r3, r0
  }
}
 800a878:	4618      	mov	r0, r3
 800a87a:	bd80      	pop	{r7, pc}

0800a87c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a87c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a87e:	b089      	sub	sp, #36	; 0x24
 800a880:	af04      	add	r7, sp, #16
 800a882:	6078      	str	r0, [r7, #4]
 800a884:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	695b      	ldr	r3, [r3, #20]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d020      	beq.n	800a8d0 <osThreadCreate+0x54>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	699b      	ldr	r3, [r3, #24]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d01c      	beq.n	800a8d0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	685c      	ldr	r4, [r3, #4]
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681d      	ldr	r5, [r3, #0]
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	691e      	ldr	r6, [r3, #16]
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f7ff ff9a 	bl	800a7e2 <makeFreeRtosPriority>
 800a8ae:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	695b      	ldr	r3, [r3, #20]
 800a8b4:	687a      	ldr	r2, [r7, #4]
 800a8b6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a8b8:	9202      	str	r2, [sp, #8]
 800a8ba:	9301      	str	r3, [sp, #4]
 800a8bc:	9100      	str	r1, [sp, #0]
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	4632      	mov	r2, r6
 800a8c2:	4629      	mov	r1, r5
 800a8c4:	4620      	mov	r0, r4
 800a8c6:	f001 fb33 	bl	800bf30 <xTaskCreateStatic>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	60fb      	str	r3, [r7, #12]
 800a8ce:	e01c      	b.n	800a90a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	685c      	ldr	r4, [r3, #4]
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a8dc:	b29e      	uxth	r6, r3
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f7ff ff7c 	bl	800a7e2 <makeFreeRtosPriority>
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	f107 030c 	add.w	r3, r7, #12
 800a8f0:	9301      	str	r3, [sp, #4]
 800a8f2:	9200      	str	r2, [sp, #0]
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	4632      	mov	r2, r6
 800a8f8:	4629      	mov	r1, r5
 800a8fa:	4620      	mov	r0, r4
 800a8fc:	f001 fb75 	bl	800bfea <xTaskCreate>
 800a900:	4603      	mov	r3, r0
 800a902:	2b01      	cmp	r3, #1
 800a904:	d001      	beq.n	800a90a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a906:	2300      	movs	r3, #0
 800a908:	e000      	b.n	800a90c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a90a:	68fb      	ldr	r3, [r7, #12]
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3714      	adds	r7, #20
 800a910:	46bd      	mov	sp, r7
 800a912:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a914 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a914:	b590      	push	{r4, r7, lr}
 800a916:	b085      	sub	sp, #20
 800a918:	af02      	add	r7, sp, #8
 800a91a:	6078      	str	r0, [r7, #4]
 800a91c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	689b      	ldr	r3, [r3, #8]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d011      	beq.n	800a94a <osMessageCreate+0x36>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	68db      	ldr	r3, [r3, #12]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d00d      	beq.n	800a94a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6818      	ldr	r0, [r3, #0]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6859      	ldr	r1, [r3, #4]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	689a      	ldr	r2, [r3, #8]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	68db      	ldr	r3, [r3, #12]
 800a93e:	2400      	movs	r4, #0
 800a940:	9400      	str	r4, [sp, #0]
 800a942:	f000 fe19 	bl	800b578 <xQueueGenericCreateStatic>
 800a946:	4603      	mov	r3, r0
 800a948:	e008      	b.n	800a95c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6818      	ldr	r0, [r3, #0]
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	685b      	ldr	r3, [r3, #4]
 800a952:	2200      	movs	r2, #0
 800a954:	4619      	mov	r1, r3
 800a956:	f000 fe87 	bl	800b668 <xQueueGenericCreate>
 800a95a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	370c      	adds	r7, #12
 800a960:	46bd      	mov	sp, r7
 800a962:	bd90      	pop	{r4, r7, pc}

0800a964 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b086      	sub	sp, #24
 800a968:	af00      	add	r7, sp, #0
 800a96a:	60f8      	str	r0, [r7, #12]
 800a96c:	60b9      	str	r1, [r7, #8]
 800a96e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800a970:	2300      	movs	r3, #0
 800a972:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d101      	bne.n	800a982 <osMessagePut+0x1e>
    ticks = 1;
 800a97e:	2301      	movs	r3, #1
 800a980:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800a982:	f7ff ff46 	bl	800a812 <inHandlerMode>
 800a986:	4603      	mov	r3, r0
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d018      	beq.n	800a9be <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800a98c:	f107 0210 	add.w	r2, r7, #16
 800a990:	f107 0108 	add.w	r1, r7, #8
 800a994:	2300      	movs	r3, #0
 800a996:	68f8      	ldr	r0, [r7, #12]
 800a998:	f000 ffbe 	bl	800b918 <xQueueGenericSendFromISR>
 800a99c:	4603      	mov	r3, r0
 800a99e:	2b01      	cmp	r3, #1
 800a9a0:	d001      	beq.n	800a9a6 <osMessagePut+0x42>
      return osErrorOS;
 800a9a2:	23ff      	movs	r3, #255	; 0xff
 800a9a4:	e018      	b.n	800a9d8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d014      	beq.n	800a9d6 <osMessagePut+0x72>
 800a9ac:	4b0c      	ldr	r3, [pc, #48]	; (800a9e0 <osMessagePut+0x7c>)
 800a9ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9b2:	601a      	str	r2, [r3, #0]
 800a9b4:	f3bf 8f4f 	dsb	sy
 800a9b8:	f3bf 8f6f 	isb	sy
 800a9bc:	e00b      	b.n	800a9d6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800a9be:	f107 0108 	add.w	r1, r7, #8
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	697a      	ldr	r2, [r7, #20]
 800a9c6:	68f8      	ldr	r0, [r7, #12]
 800a9c8:	f000 fea8 	bl	800b71c <xQueueGenericSend>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	2b01      	cmp	r3, #1
 800a9d0:	d001      	beq.n	800a9d6 <osMessagePut+0x72>
      return osErrorOS;
 800a9d2:	23ff      	movs	r3, #255	; 0xff
 800a9d4:	e000      	b.n	800a9d8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800a9d6:	2300      	movs	r3, #0
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3718      	adds	r7, #24
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}
 800a9e0:	e000ed04 	.word	0xe000ed04

0800a9e4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800a9e4:	b590      	push	{r4, r7, lr}
 800a9e6:	b08b      	sub	sp, #44	; 0x2c
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	60f8      	str	r0, [r7, #12]
 800a9ec:	60b9      	str	r1, [r7, #8]
 800a9ee:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d10a      	bne.n	800aa14 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800a9fe:	2380      	movs	r3, #128	; 0x80
 800aa00:	617b      	str	r3, [r7, #20]
    return event;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	461c      	mov	r4, r3
 800aa06:	f107 0314 	add.w	r3, r7, #20
 800aa0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800aa0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800aa12:	e054      	b.n	800aabe <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800aa14:	2300      	movs	r3, #0
 800aa16:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa22:	d103      	bne.n	800aa2c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800aa24:	f04f 33ff 	mov.w	r3, #4294967295
 800aa28:	627b      	str	r3, [r7, #36]	; 0x24
 800aa2a:	e009      	b.n	800aa40 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d006      	beq.n	800aa40 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800aa36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d101      	bne.n	800aa40 <osMessageGet+0x5c>
      ticks = 1;
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800aa40:	f7ff fee7 	bl	800a812 <inHandlerMode>
 800aa44:	4603      	mov	r3, r0
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d01c      	beq.n	800aa84 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800aa4a:	f107 0220 	add.w	r2, r7, #32
 800aa4e:	f107 0314 	add.w	r3, r7, #20
 800aa52:	3304      	adds	r3, #4
 800aa54:	4619      	mov	r1, r3
 800aa56:	68b8      	ldr	r0, [r7, #8]
 800aa58:	f001 f8da 	bl	800bc10 <xQueueReceiveFromISR>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d102      	bne.n	800aa68 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800aa62:	2310      	movs	r3, #16
 800aa64:	617b      	str	r3, [r7, #20]
 800aa66:	e001      	b.n	800aa6c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800aa68:	2300      	movs	r3, #0
 800aa6a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800aa6c:	6a3b      	ldr	r3, [r7, #32]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d01d      	beq.n	800aaae <osMessageGet+0xca>
 800aa72:	4b15      	ldr	r3, [pc, #84]	; (800aac8 <osMessageGet+0xe4>)
 800aa74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa78:	601a      	str	r2, [r3, #0]
 800aa7a:	f3bf 8f4f 	dsb	sy
 800aa7e:	f3bf 8f6f 	isb	sy
 800aa82:	e014      	b.n	800aaae <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800aa84:	f107 0314 	add.w	r3, r7, #20
 800aa88:	3304      	adds	r3, #4
 800aa8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa8c:	4619      	mov	r1, r3
 800aa8e:	68b8      	ldr	r0, [r7, #8]
 800aa90:	f000 ffde 	bl	800ba50 <xQueueReceive>
 800aa94:	4603      	mov	r3, r0
 800aa96:	2b01      	cmp	r3, #1
 800aa98:	d102      	bne.n	800aaa0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800aa9a:	2310      	movs	r3, #16
 800aa9c:	617b      	str	r3, [r7, #20]
 800aa9e:	e006      	b.n	800aaae <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800aaa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d101      	bne.n	800aaaa <osMessageGet+0xc6>
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	e000      	b.n	800aaac <osMessageGet+0xc8>
 800aaaa:	2340      	movs	r3, #64	; 0x40
 800aaac:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	461c      	mov	r4, r3
 800aab2:	f107 0314 	add.w	r3, r7, #20
 800aab6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800aaba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800aabe:	68f8      	ldr	r0, [r7, #12]
 800aac0:	372c      	adds	r7, #44	; 0x2c
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd90      	pop	{r4, r7, pc}
 800aac6:	bf00      	nop
 800aac8:	e000ed04 	.word	0xe000ed04

0800aacc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b08a      	sub	sp, #40	; 0x28
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aad4:	2300      	movs	r3, #0
 800aad6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aad8:	f001 fc1e 	bl	800c318 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aadc:	4b5b      	ldr	r3, [pc, #364]	; (800ac4c <pvPortMalloc+0x180>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d101      	bne.n	800aae8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800aae4:	f000 f920 	bl	800ad28 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aae8:	4b59      	ldr	r3, [pc, #356]	; (800ac50 <pvPortMalloc+0x184>)
 800aaea:	681a      	ldr	r2, [r3, #0]
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	4013      	ands	r3, r2
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	f040 8093 	bne.w	800ac1c <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d01d      	beq.n	800ab38 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800aafc:	2208      	movs	r2, #8
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	4413      	add	r3, r2
 800ab02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f003 0307 	and.w	r3, r3, #7
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d014      	beq.n	800ab38 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f023 0307 	bic.w	r3, r3, #7
 800ab14:	3308      	adds	r3, #8
 800ab16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f003 0307 	and.w	r3, r3, #7
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d00a      	beq.n	800ab38 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ab22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab26:	f383 8811 	msr	BASEPRI, r3
 800ab2a:	f3bf 8f6f 	isb	sy
 800ab2e:	f3bf 8f4f 	dsb	sy
 800ab32:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ab34:	bf00      	nop
 800ab36:	e7fe      	b.n	800ab36 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d06e      	beq.n	800ac1c <pvPortMalloc+0x150>
 800ab3e:	4b45      	ldr	r3, [pc, #276]	; (800ac54 <pvPortMalloc+0x188>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	687a      	ldr	r2, [r7, #4]
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d869      	bhi.n	800ac1c <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ab48:	4b43      	ldr	r3, [pc, #268]	; (800ac58 <pvPortMalloc+0x18c>)
 800ab4a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ab4c:	4b42      	ldr	r3, [pc, #264]	; (800ac58 <pvPortMalloc+0x18c>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ab52:	e004      	b.n	800ab5e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ab54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab56:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ab58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ab5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab60:	685b      	ldr	r3, [r3, #4]
 800ab62:	687a      	ldr	r2, [r7, #4]
 800ab64:	429a      	cmp	r2, r3
 800ab66:	d903      	bls.n	800ab70 <pvPortMalloc+0xa4>
 800ab68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d1f1      	bne.n	800ab54 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ab70:	4b36      	ldr	r3, [pc, #216]	; (800ac4c <pvPortMalloc+0x180>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab76:	429a      	cmp	r2, r3
 800ab78:	d050      	beq.n	800ac1c <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ab7a:	6a3b      	ldr	r3, [r7, #32]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	2208      	movs	r2, #8
 800ab80:	4413      	add	r3, r2
 800ab82:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ab84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab86:	681a      	ldr	r2, [r3, #0]
 800ab88:	6a3b      	ldr	r3, [r7, #32]
 800ab8a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ab8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab8e:	685a      	ldr	r2, [r3, #4]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	1ad2      	subs	r2, r2, r3
 800ab94:	2308      	movs	r3, #8
 800ab96:	005b      	lsls	r3, r3, #1
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	d91f      	bls.n	800abdc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ab9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	4413      	add	r3, r2
 800aba2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aba4:	69bb      	ldr	r3, [r7, #24]
 800aba6:	f003 0307 	and.w	r3, r3, #7
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d00a      	beq.n	800abc4 <pvPortMalloc+0xf8>
	__asm volatile
 800abae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb2:	f383 8811 	msr	BASEPRI, r3
 800abb6:	f3bf 8f6f 	isb	sy
 800abba:	f3bf 8f4f 	dsb	sy
 800abbe:	613b      	str	r3, [r7, #16]
}
 800abc0:	bf00      	nop
 800abc2:	e7fe      	b.n	800abc2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800abc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc6:	685a      	ldr	r2, [r3, #4]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	1ad2      	subs	r2, r2, r3
 800abcc:	69bb      	ldr	r3, [r7, #24]
 800abce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800abd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd2:	687a      	ldr	r2, [r7, #4]
 800abd4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800abd6:	69b8      	ldr	r0, [r7, #24]
 800abd8:	f000 f908 	bl	800adec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800abdc:	4b1d      	ldr	r3, [pc, #116]	; (800ac54 <pvPortMalloc+0x188>)
 800abde:	681a      	ldr	r2, [r3, #0]
 800abe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe2:	685b      	ldr	r3, [r3, #4]
 800abe4:	1ad3      	subs	r3, r2, r3
 800abe6:	4a1b      	ldr	r2, [pc, #108]	; (800ac54 <pvPortMalloc+0x188>)
 800abe8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800abea:	4b1a      	ldr	r3, [pc, #104]	; (800ac54 <pvPortMalloc+0x188>)
 800abec:	681a      	ldr	r2, [r3, #0]
 800abee:	4b1b      	ldr	r3, [pc, #108]	; (800ac5c <pvPortMalloc+0x190>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	429a      	cmp	r2, r3
 800abf4:	d203      	bcs.n	800abfe <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800abf6:	4b17      	ldr	r3, [pc, #92]	; (800ac54 <pvPortMalloc+0x188>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	4a18      	ldr	r2, [pc, #96]	; (800ac5c <pvPortMalloc+0x190>)
 800abfc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800abfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac00:	685a      	ldr	r2, [r3, #4]
 800ac02:	4b13      	ldr	r3, [pc, #76]	; (800ac50 <pvPortMalloc+0x184>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	431a      	orrs	r2, r3
 800ac08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ac0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac0e:	2200      	movs	r2, #0
 800ac10:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ac12:	4b13      	ldr	r3, [pc, #76]	; (800ac60 <pvPortMalloc+0x194>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	3301      	adds	r3, #1
 800ac18:	4a11      	ldr	r2, [pc, #68]	; (800ac60 <pvPortMalloc+0x194>)
 800ac1a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ac1c:	f001 fb8a 	bl	800c334 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac20:	69fb      	ldr	r3, [r7, #28]
 800ac22:	f003 0307 	and.w	r3, r3, #7
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d00a      	beq.n	800ac40 <pvPortMalloc+0x174>
	__asm volatile
 800ac2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac2e:	f383 8811 	msr	BASEPRI, r3
 800ac32:	f3bf 8f6f 	isb	sy
 800ac36:	f3bf 8f4f 	dsb	sy
 800ac3a:	60fb      	str	r3, [r7, #12]
}
 800ac3c:	bf00      	nop
 800ac3e:	e7fe      	b.n	800ac3e <pvPortMalloc+0x172>
	return pvReturn;
 800ac40:	69fb      	ldr	r3, [r7, #28]
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3728      	adds	r7, #40	; 0x28
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}
 800ac4a:	bf00      	nop
 800ac4c:	24003f04 	.word	0x24003f04
 800ac50:	24003f18 	.word	0x24003f18
 800ac54:	24003f08 	.word	0x24003f08
 800ac58:	24003efc 	.word	0x24003efc
 800ac5c:	24003f0c 	.word	0x24003f0c
 800ac60:	24003f10 	.word	0x24003f10

0800ac64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b086      	sub	sp, #24
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d04d      	beq.n	800ad12 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ac76:	2308      	movs	r3, #8
 800ac78:	425b      	negs	r3, r3
 800ac7a:	697a      	ldr	r2, [r7, #20]
 800ac7c:	4413      	add	r3, r2
 800ac7e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	685a      	ldr	r2, [r3, #4]
 800ac88:	4b24      	ldr	r3, [pc, #144]	; (800ad1c <vPortFree+0xb8>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	4013      	ands	r3, r2
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d10a      	bne.n	800aca8 <vPortFree+0x44>
	__asm volatile
 800ac92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac96:	f383 8811 	msr	BASEPRI, r3
 800ac9a:	f3bf 8f6f 	isb	sy
 800ac9e:	f3bf 8f4f 	dsb	sy
 800aca2:	60fb      	str	r3, [r7, #12]
}
 800aca4:	bf00      	nop
 800aca6:	e7fe      	b.n	800aca6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d00a      	beq.n	800acc6 <vPortFree+0x62>
	__asm volatile
 800acb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb4:	f383 8811 	msr	BASEPRI, r3
 800acb8:	f3bf 8f6f 	isb	sy
 800acbc:	f3bf 8f4f 	dsb	sy
 800acc0:	60bb      	str	r3, [r7, #8]
}
 800acc2:	bf00      	nop
 800acc4:	e7fe      	b.n	800acc4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800acc6:	693b      	ldr	r3, [r7, #16]
 800acc8:	685a      	ldr	r2, [r3, #4]
 800acca:	4b14      	ldr	r3, [pc, #80]	; (800ad1c <vPortFree+0xb8>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	4013      	ands	r3, r2
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d01e      	beq.n	800ad12 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d11a      	bne.n	800ad12 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	685a      	ldr	r2, [r3, #4]
 800ace0:	4b0e      	ldr	r3, [pc, #56]	; (800ad1c <vPortFree+0xb8>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	43db      	mvns	r3, r3
 800ace6:	401a      	ands	r2, r3
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800acec:	f001 fb14 	bl	800c318 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	685a      	ldr	r2, [r3, #4]
 800acf4:	4b0a      	ldr	r3, [pc, #40]	; (800ad20 <vPortFree+0xbc>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	4413      	add	r3, r2
 800acfa:	4a09      	ldr	r2, [pc, #36]	; (800ad20 <vPortFree+0xbc>)
 800acfc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800acfe:	6938      	ldr	r0, [r7, #16]
 800ad00:	f000 f874 	bl	800adec <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ad04:	4b07      	ldr	r3, [pc, #28]	; (800ad24 <vPortFree+0xc0>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	3301      	adds	r3, #1
 800ad0a:	4a06      	ldr	r2, [pc, #24]	; (800ad24 <vPortFree+0xc0>)
 800ad0c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ad0e:	f001 fb11 	bl	800c334 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ad12:	bf00      	nop
 800ad14:	3718      	adds	r7, #24
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}
 800ad1a:	bf00      	nop
 800ad1c:	24003f18 	.word	0x24003f18
 800ad20:	24003f08 	.word	0x24003f08
 800ad24:	24003f14 	.word	0x24003f14

0800ad28 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b085      	sub	sp, #20
 800ad2c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ad2e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ad32:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ad34:	4b27      	ldr	r3, [pc, #156]	; (800add4 <prvHeapInit+0xac>)
 800ad36:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	f003 0307 	and.w	r3, r3, #7
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d00c      	beq.n	800ad5c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	3307      	adds	r3, #7
 800ad46:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	f023 0307 	bic.w	r3, r3, #7
 800ad4e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ad50:	68ba      	ldr	r2, [r7, #8]
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	1ad3      	subs	r3, r2, r3
 800ad56:	4a1f      	ldr	r2, [pc, #124]	; (800add4 <prvHeapInit+0xac>)
 800ad58:	4413      	add	r3, r2
 800ad5a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ad60:	4a1d      	ldr	r2, [pc, #116]	; (800add8 <prvHeapInit+0xb0>)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ad66:	4b1c      	ldr	r3, [pc, #112]	; (800add8 <prvHeapInit+0xb0>)
 800ad68:	2200      	movs	r2, #0
 800ad6a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	68ba      	ldr	r2, [r7, #8]
 800ad70:	4413      	add	r3, r2
 800ad72:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ad74:	2208      	movs	r2, #8
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	1a9b      	subs	r3, r3, r2
 800ad7a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	f023 0307 	bic.w	r3, r3, #7
 800ad82:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	4a15      	ldr	r2, [pc, #84]	; (800addc <prvHeapInit+0xb4>)
 800ad88:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ad8a:	4b14      	ldr	r3, [pc, #80]	; (800addc <prvHeapInit+0xb4>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ad92:	4b12      	ldr	r3, [pc, #72]	; (800addc <prvHeapInit+0xb4>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	2200      	movs	r2, #0
 800ad98:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	68fa      	ldr	r2, [r7, #12]
 800ada2:	1ad2      	subs	r2, r2, r3
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ada8:	4b0c      	ldr	r3, [pc, #48]	; (800addc <prvHeapInit+0xb4>)
 800adaa:	681a      	ldr	r2, [r3, #0]
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	685b      	ldr	r3, [r3, #4]
 800adb4:	4a0a      	ldr	r2, [pc, #40]	; (800ade0 <prvHeapInit+0xb8>)
 800adb6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	685b      	ldr	r3, [r3, #4]
 800adbc:	4a09      	ldr	r2, [pc, #36]	; (800ade4 <prvHeapInit+0xbc>)
 800adbe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800adc0:	4b09      	ldr	r3, [pc, #36]	; (800ade8 <prvHeapInit+0xc0>)
 800adc2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800adc6:	601a      	str	r2, [r3, #0]
}
 800adc8:	bf00      	nop
 800adca:	3714      	adds	r7, #20
 800adcc:	46bd      	mov	sp, r7
 800adce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add2:	4770      	bx	lr
 800add4:	240002fc 	.word	0x240002fc
 800add8:	24003efc 	.word	0x24003efc
 800addc:	24003f04 	.word	0x24003f04
 800ade0:	24003f0c 	.word	0x24003f0c
 800ade4:	24003f08 	.word	0x24003f08
 800ade8:	24003f18 	.word	0x24003f18

0800adec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800adec:	b480      	push	{r7}
 800adee:	b085      	sub	sp, #20
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800adf4:	4b28      	ldr	r3, [pc, #160]	; (800ae98 <prvInsertBlockIntoFreeList+0xac>)
 800adf6:	60fb      	str	r3, [r7, #12]
 800adf8:	e002      	b.n	800ae00 <prvInsertBlockIntoFreeList+0x14>
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	60fb      	str	r3, [r7, #12]
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	687a      	ldr	r2, [r7, #4]
 800ae06:	429a      	cmp	r2, r3
 800ae08:	d8f7      	bhi.n	800adfa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	685b      	ldr	r3, [r3, #4]
 800ae12:	68ba      	ldr	r2, [r7, #8]
 800ae14:	4413      	add	r3, r2
 800ae16:	687a      	ldr	r2, [r7, #4]
 800ae18:	429a      	cmp	r2, r3
 800ae1a:	d108      	bne.n	800ae2e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	685a      	ldr	r2, [r3, #4]
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	685b      	ldr	r3, [r3, #4]
 800ae24:	441a      	add	r2, r3
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	685b      	ldr	r3, [r3, #4]
 800ae36:	68ba      	ldr	r2, [r7, #8]
 800ae38:	441a      	add	r2, r3
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	d118      	bne.n	800ae74 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681a      	ldr	r2, [r3, #0]
 800ae46:	4b15      	ldr	r3, [pc, #84]	; (800ae9c <prvInsertBlockIntoFreeList+0xb0>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	d00d      	beq.n	800ae6a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	685a      	ldr	r2, [r3, #4]
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	441a      	add	r2, r3
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	681a      	ldr	r2, [r3, #0]
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	601a      	str	r2, [r3, #0]
 800ae68:	e008      	b.n	800ae7c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ae6a:	4b0c      	ldr	r3, [pc, #48]	; (800ae9c <prvInsertBlockIntoFreeList+0xb0>)
 800ae6c:	681a      	ldr	r2, [r3, #0]
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	601a      	str	r2, [r3, #0]
 800ae72:	e003      	b.n	800ae7c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	681a      	ldr	r2, [r3, #0]
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ae7c:	68fa      	ldr	r2, [r7, #12]
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d002      	beq.n	800ae8a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	687a      	ldr	r2, [r7, #4]
 800ae88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae8a:	bf00      	nop
 800ae8c:	3714      	adds	r7, #20
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae94:	4770      	bx	lr
 800ae96:	bf00      	nop
 800ae98:	24003efc 	.word	0x24003efc
 800ae9c:	24003f04 	.word	0x24003f04

0800aea0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aea0:	b480      	push	{r7}
 800aea2:	b083      	sub	sp, #12
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f103 0208 	add.w	r2, r3, #8
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f04f 32ff 	mov.w	r2, #4294967295
 800aeb8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f103 0208 	add.w	r2, r3, #8
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f103 0208 	add.w	r2, r3, #8
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2200      	movs	r2, #0
 800aed2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aed4:	bf00      	nop
 800aed6:	370c      	adds	r7, #12
 800aed8:	46bd      	mov	sp, r7
 800aeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aede:	4770      	bx	lr

0800aee0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800aee0:	b480      	push	{r7}
 800aee2:	b083      	sub	sp, #12
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2200      	movs	r2, #0
 800aeec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800aeee:	bf00      	nop
 800aef0:	370c      	adds	r7, #12
 800aef2:	46bd      	mov	sp, r7
 800aef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef8:	4770      	bx	lr

0800aefa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aefa:	b480      	push	{r7}
 800aefc:	b085      	sub	sp, #20
 800aefe:	af00      	add	r7, sp, #0
 800af00:	6078      	str	r0, [r7, #4]
 800af02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	685b      	ldr	r3, [r3, #4]
 800af08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	68fa      	ldr	r2, [r7, #12]
 800af0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	689a      	ldr	r2, [r3, #8]
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	689b      	ldr	r3, [r3, #8]
 800af1c:	683a      	ldr	r2, [r7, #0]
 800af1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	683a      	ldr	r2, [r7, #0]
 800af24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	687a      	ldr	r2, [r7, #4]
 800af2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	1c5a      	adds	r2, r3, #1
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	601a      	str	r2, [r3, #0]
}
 800af36:	bf00      	nop
 800af38:	3714      	adds	r7, #20
 800af3a:	46bd      	mov	sp, r7
 800af3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af40:	4770      	bx	lr

0800af42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800af42:	b480      	push	{r7}
 800af44:	b085      	sub	sp, #20
 800af46:	af00      	add	r7, sp, #0
 800af48:	6078      	str	r0, [r7, #4]
 800af4a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af58:	d103      	bne.n	800af62 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	691b      	ldr	r3, [r3, #16]
 800af5e:	60fb      	str	r3, [r7, #12]
 800af60:	e00c      	b.n	800af7c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	3308      	adds	r3, #8
 800af66:	60fb      	str	r3, [r7, #12]
 800af68:	e002      	b.n	800af70 <vListInsert+0x2e>
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	685b      	ldr	r3, [r3, #4]
 800af6e:	60fb      	str	r3, [r7, #12]
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	685b      	ldr	r3, [r3, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	68ba      	ldr	r2, [r7, #8]
 800af78:	429a      	cmp	r2, r3
 800af7a:	d2f6      	bcs.n	800af6a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	685a      	ldr	r2, [r3, #4]
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	685b      	ldr	r3, [r3, #4]
 800af88:	683a      	ldr	r2, [r7, #0]
 800af8a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	68fa      	ldr	r2, [r7, #12]
 800af90:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	683a      	ldr	r2, [r7, #0]
 800af96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	687a      	ldr	r2, [r7, #4]
 800af9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	1c5a      	adds	r2, r3, #1
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	601a      	str	r2, [r3, #0]
}
 800afa8:	bf00      	nop
 800afaa:	3714      	adds	r7, #20
 800afac:	46bd      	mov	sp, r7
 800afae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb2:	4770      	bx	lr

0800afb4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800afb4:	b480      	push	{r7}
 800afb6:	b085      	sub	sp, #20
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	691b      	ldr	r3, [r3, #16]
 800afc0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	685b      	ldr	r3, [r3, #4]
 800afc6:	687a      	ldr	r2, [r7, #4]
 800afc8:	6892      	ldr	r2, [r2, #8]
 800afca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	689b      	ldr	r3, [r3, #8]
 800afd0:	687a      	ldr	r2, [r7, #4]
 800afd2:	6852      	ldr	r2, [r2, #4]
 800afd4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	685b      	ldr	r3, [r3, #4]
 800afda:	687a      	ldr	r2, [r7, #4]
 800afdc:	429a      	cmp	r2, r3
 800afde:	d103      	bne.n	800afe8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	689a      	ldr	r2, [r3, #8]
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2200      	movs	r2, #0
 800afec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	1e5a      	subs	r2, r3, #1
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
}
 800affc:	4618      	mov	r0, r3
 800affe:	3714      	adds	r7, #20
 800b000:	46bd      	mov	sp, r7
 800b002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b006:	4770      	bx	lr

0800b008 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b008:	b480      	push	{r7}
 800b00a:	b085      	sub	sp, #20
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	60f8      	str	r0, [r7, #12]
 800b010:	60b9      	str	r1, [r7, #8]
 800b012:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	3b04      	subs	r3, #4
 800b018:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b020:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	3b04      	subs	r3, #4
 800b026:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	f023 0201 	bic.w	r2, r3, #1
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	3b04      	subs	r3, #4
 800b036:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b038:	4a0c      	ldr	r2, [pc, #48]	; (800b06c <pxPortInitialiseStack+0x64>)
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	3b14      	subs	r3, #20
 800b042:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b044:	687a      	ldr	r2, [r7, #4]
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	3b04      	subs	r3, #4
 800b04e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	f06f 0202 	mvn.w	r2, #2
 800b056:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	3b20      	subs	r3, #32
 800b05c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b05e:	68fb      	ldr	r3, [r7, #12]
}
 800b060:	4618      	mov	r0, r3
 800b062:	3714      	adds	r7, #20
 800b064:	46bd      	mov	sp, r7
 800b066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06a:	4770      	bx	lr
 800b06c:	0800b071 	.word	0x0800b071

0800b070 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b070:	b480      	push	{r7}
 800b072:	b085      	sub	sp, #20
 800b074:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b076:	2300      	movs	r3, #0
 800b078:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b07a:	4b12      	ldr	r3, [pc, #72]	; (800b0c4 <prvTaskExitError+0x54>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b082:	d00a      	beq.n	800b09a <prvTaskExitError+0x2a>
	__asm volatile
 800b084:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b088:	f383 8811 	msr	BASEPRI, r3
 800b08c:	f3bf 8f6f 	isb	sy
 800b090:	f3bf 8f4f 	dsb	sy
 800b094:	60fb      	str	r3, [r7, #12]
}
 800b096:	bf00      	nop
 800b098:	e7fe      	b.n	800b098 <prvTaskExitError+0x28>
	__asm volatile
 800b09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b09e:	f383 8811 	msr	BASEPRI, r3
 800b0a2:	f3bf 8f6f 	isb	sy
 800b0a6:	f3bf 8f4f 	dsb	sy
 800b0aa:	60bb      	str	r3, [r7, #8]
}
 800b0ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b0ae:	bf00      	nop
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d0fc      	beq.n	800b0b0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b0b6:	bf00      	nop
 800b0b8:	bf00      	nop
 800b0ba:	3714      	adds	r7, #20
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c2:	4770      	bx	lr
 800b0c4:	24000010 	.word	0x24000010
	...

0800b0d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b0d0:	4b07      	ldr	r3, [pc, #28]	; (800b0f0 <pxCurrentTCBConst2>)
 800b0d2:	6819      	ldr	r1, [r3, #0]
 800b0d4:	6808      	ldr	r0, [r1, #0]
 800b0d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0da:	f380 8809 	msr	PSP, r0
 800b0de:	f3bf 8f6f 	isb	sy
 800b0e2:	f04f 0000 	mov.w	r0, #0
 800b0e6:	f380 8811 	msr	BASEPRI, r0
 800b0ea:	4770      	bx	lr
 800b0ec:	f3af 8000 	nop.w

0800b0f0 <pxCurrentTCBConst2>:
 800b0f0:	24003f24 	.word	0x24003f24
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b0f4:	bf00      	nop
 800b0f6:	bf00      	nop

0800b0f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b0f8:	4808      	ldr	r0, [pc, #32]	; (800b11c <prvPortStartFirstTask+0x24>)
 800b0fa:	6800      	ldr	r0, [r0, #0]
 800b0fc:	6800      	ldr	r0, [r0, #0]
 800b0fe:	f380 8808 	msr	MSP, r0
 800b102:	f04f 0000 	mov.w	r0, #0
 800b106:	f380 8814 	msr	CONTROL, r0
 800b10a:	b662      	cpsie	i
 800b10c:	b661      	cpsie	f
 800b10e:	f3bf 8f4f 	dsb	sy
 800b112:	f3bf 8f6f 	isb	sy
 800b116:	df00      	svc	0
 800b118:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b11a:	bf00      	nop
 800b11c:	e000ed08 	.word	0xe000ed08

0800b120 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b086      	sub	sp, #24
 800b124:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b126:	4b46      	ldr	r3, [pc, #280]	; (800b240 <xPortStartScheduler+0x120>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	4a46      	ldr	r2, [pc, #280]	; (800b244 <xPortStartScheduler+0x124>)
 800b12c:	4293      	cmp	r3, r2
 800b12e:	d10a      	bne.n	800b146 <xPortStartScheduler+0x26>
	__asm volatile
 800b130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b134:	f383 8811 	msr	BASEPRI, r3
 800b138:	f3bf 8f6f 	isb	sy
 800b13c:	f3bf 8f4f 	dsb	sy
 800b140:	613b      	str	r3, [r7, #16]
}
 800b142:	bf00      	nop
 800b144:	e7fe      	b.n	800b144 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b146:	4b3e      	ldr	r3, [pc, #248]	; (800b240 <xPortStartScheduler+0x120>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	4a3f      	ldr	r2, [pc, #252]	; (800b248 <xPortStartScheduler+0x128>)
 800b14c:	4293      	cmp	r3, r2
 800b14e:	d10a      	bne.n	800b166 <xPortStartScheduler+0x46>
	__asm volatile
 800b150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b154:	f383 8811 	msr	BASEPRI, r3
 800b158:	f3bf 8f6f 	isb	sy
 800b15c:	f3bf 8f4f 	dsb	sy
 800b160:	60fb      	str	r3, [r7, #12]
}
 800b162:	bf00      	nop
 800b164:	e7fe      	b.n	800b164 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b166:	4b39      	ldr	r3, [pc, #228]	; (800b24c <xPortStartScheduler+0x12c>)
 800b168:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	781b      	ldrb	r3, [r3, #0]
 800b16e:	b2db      	uxtb	r3, r3
 800b170:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	22ff      	movs	r2, #255	; 0xff
 800b176:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b178:	697b      	ldr	r3, [r7, #20]
 800b17a:	781b      	ldrb	r3, [r3, #0]
 800b17c:	b2db      	uxtb	r3, r3
 800b17e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b180:	78fb      	ldrb	r3, [r7, #3]
 800b182:	b2db      	uxtb	r3, r3
 800b184:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b188:	b2da      	uxtb	r2, r3
 800b18a:	4b31      	ldr	r3, [pc, #196]	; (800b250 <xPortStartScheduler+0x130>)
 800b18c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b18e:	4b31      	ldr	r3, [pc, #196]	; (800b254 <xPortStartScheduler+0x134>)
 800b190:	2207      	movs	r2, #7
 800b192:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b194:	e009      	b.n	800b1aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b196:	4b2f      	ldr	r3, [pc, #188]	; (800b254 <xPortStartScheduler+0x134>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	3b01      	subs	r3, #1
 800b19c:	4a2d      	ldr	r2, [pc, #180]	; (800b254 <xPortStartScheduler+0x134>)
 800b19e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b1a0:	78fb      	ldrb	r3, [r7, #3]
 800b1a2:	b2db      	uxtb	r3, r3
 800b1a4:	005b      	lsls	r3, r3, #1
 800b1a6:	b2db      	uxtb	r3, r3
 800b1a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b1aa:	78fb      	ldrb	r3, [r7, #3]
 800b1ac:	b2db      	uxtb	r3, r3
 800b1ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1b2:	2b80      	cmp	r3, #128	; 0x80
 800b1b4:	d0ef      	beq.n	800b196 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b1b6:	4b27      	ldr	r3, [pc, #156]	; (800b254 <xPortStartScheduler+0x134>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f1c3 0307 	rsb	r3, r3, #7
 800b1be:	2b04      	cmp	r3, #4
 800b1c0:	d00a      	beq.n	800b1d8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c6:	f383 8811 	msr	BASEPRI, r3
 800b1ca:	f3bf 8f6f 	isb	sy
 800b1ce:	f3bf 8f4f 	dsb	sy
 800b1d2:	60bb      	str	r3, [r7, #8]
}
 800b1d4:	bf00      	nop
 800b1d6:	e7fe      	b.n	800b1d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b1d8:	4b1e      	ldr	r3, [pc, #120]	; (800b254 <xPortStartScheduler+0x134>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	021b      	lsls	r3, r3, #8
 800b1de:	4a1d      	ldr	r2, [pc, #116]	; (800b254 <xPortStartScheduler+0x134>)
 800b1e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b1e2:	4b1c      	ldr	r3, [pc, #112]	; (800b254 <xPortStartScheduler+0x134>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b1ea:	4a1a      	ldr	r2, [pc, #104]	; (800b254 <xPortStartScheduler+0x134>)
 800b1ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	b2da      	uxtb	r2, r3
 800b1f2:	697b      	ldr	r3, [r7, #20]
 800b1f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b1f6:	4b18      	ldr	r3, [pc, #96]	; (800b258 <xPortStartScheduler+0x138>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	4a17      	ldr	r2, [pc, #92]	; (800b258 <xPortStartScheduler+0x138>)
 800b1fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b200:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b202:	4b15      	ldr	r3, [pc, #84]	; (800b258 <xPortStartScheduler+0x138>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	4a14      	ldr	r2, [pc, #80]	; (800b258 <xPortStartScheduler+0x138>)
 800b208:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b20c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b20e:	f000 f8dd 	bl	800b3cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b212:	4b12      	ldr	r3, [pc, #72]	; (800b25c <xPortStartScheduler+0x13c>)
 800b214:	2200      	movs	r2, #0
 800b216:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b218:	f000 f8fc 	bl	800b414 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b21c:	4b10      	ldr	r3, [pc, #64]	; (800b260 <xPortStartScheduler+0x140>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	4a0f      	ldr	r2, [pc, #60]	; (800b260 <xPortStartScheduler+0x140>)
 800b222:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b226:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b228:	f7ff ff66 	bl	800b0f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b22c:	f001 f9f8 	bl	800c620 <vTaskSwitchContext>
	prvTaskExitError();
 800b230:	f7ff ff1e 	bl	800b070 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b234:	2300      	movs	r3, #0
}
 800b236:	4618      	mov	r0, r3
 800b238:	3718      	adds	r7, #24
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}
 800b23e:	bf00      	nop
 800b240:	e000ed00 	.word	0xe000ed00
 800b244:	410fc271 	.word	0x410fc271
 800b248:	410fc270 	.word	0x410fc270
 800b24c:	e000e400 	.word	0xe000e400
 800b250:	24003f1c 	.word	0x24003f1c
 800b254:	24003f20 	.word	0x24003f20
 800b258:	e000ed20 	.word	0xe000ed20
 800b25c:	24000010 	.word	0x24000010
 800b260:	e000ef34 	.word	0xe000ef34

0800b264 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b264:	b480      	push	{r7}
 800b266:	b083      	sub	sp, #12
 800b268:	af00      	add	r7, sp, #0
	__asm volatile
 800b26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b26e:	f383 8811 	msr	BASEPRI, r3
 800b272:	f3bf 8f6f 	isb	sy
 800b276:	f3bf 8f4f 	dsb	sy
 800b27a:	607b      	str	r3, [r7, #4]
}
 800b27c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b27e:	4b0f      	ldr	r3, [pc, #60]	; (800b2bc <vPortEnterCritical+0x58>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	3301      	adds	r3, #1
 800b284:	4a0d      	ldr	r2, [pc, #52]	; (800b2bc <vPortEnterCritical+0x58>)
 800b286:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b288:	4b0c      	ldr	r3, [pc, #48]	; (800b2bc <vPortEnterCritical+0x58>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	2b01      	cmp	r3, #1
 800b28e:	d10f      	bne.n	800b2b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b290:	4b0b      	ldr	r3, [pc, #44]	; (800b2c0 <vPortEnterCritical+0x5c>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	b2db      	uxtb	r3, r3
 800b296:	2b00      	cmp	r3, #0
 800b298:	d00a      	beq.n	800b2b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800b29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b29e:	f383 8811 	msr	BASEPRI, r3
 800b2a2:	f3bf 8f6f 	isb	sy
 800b2a6:	f3bf 8f4f 	dsb	sy
 800b2aa:	603b      	str	r3, [r7, #0]
}
 800b2ac:	bf00      	nop
 800b2ae:	e7fe      	b.n	800b2ae <vPortEnterCritical+0x4a>
	}
}
 800b2b0:	bf00      	nop
 800b2b2:	370c      	adds	r7, #12
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ba:	4770      	bx	lr
 800b2bc:	24000010 	.word	0x24000010
 800b2c0:	e000ed04 	.word	0xe000ed04

0800b2c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b083      	sub	sp, #12
 800b2c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b2ca:	4b12      	ldr	r3, [pc, #72]	; (800b314 <vPortExitCritical+0x50>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d10a      	bne.n	800b2e8 <vPortExitCritical+0x24>
	__asm volatile
 800b2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2d6:	f383 8811 	msr	BASEPRI, r3
 800b2da:	f3bf 8f6f 	isb	sy
 800b2de:	f3bf 8f4f 	dsb	sy
 800b2e2:	607b      	str	r3, [r7, #4]
}
 800b2e4:	bf00      	nop
 800b2e6:	e7fe      	b.n	800b2e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b2e8:	4b0a      	ldr	r3, [pc, #40]	; (800b314 <vPortExitCritical+0x50>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	3b01      	subs	r3, #1
 800b2ee:	4a09      	ldr	r2, [pc, #36]	; (800b314 <vPortExitCritical+0x50>)
 800b2f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b2f2:	4b08      	ldr	r3, [pc, #32]	; (800b314 <vPortExitCritical+0x50>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d105      	bne.n	800b306 <vPortExitCritical+0x42>
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b304:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b306:	bf00      	nop
 800b308:	370c      	adds	r7, #12
 800b30a:	46bd      	mov	sp, r7
 800b30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b310:	4770      	bx	lr
 800b312:	bf00      	nop
 800b314:	24000010 	.word	0x24000010
	...

0800b320 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b320:	f3ef 8009 	mrs	r0, PSP
 800b324:	f3bf 8f6f 	isb	sy
 800b328:	4b15      	ldr	r3, [pc, #84]	; (800b380 <pxCurrentTCBConst>)
 800b32a:	681a      	ldr	r2, [r3, #0]
 800b32c:	f01e 0f10 	tst.w	lr, #16
 800b330:	bf08      	it	eq
 800b332:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b336:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b33a:	6010      	str	r0, [r2, #0]
 800b33c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b340:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b344:	f380 8811 	msr	BASEPRI, r0
 800b348:	f3bf 8f4f 	dsb	sy
 800b34c:	f3bf 8f6f 	isb	sy
 800b350:	f001 f966 	bl	800c620 <vTaskSwitchContext>
 800b354:	f04f 0000 	mov.w	r0, #0
 800b358:	f380 8811 	msr	BASEPRI, r0
 800b35c:	bc09      	pop	{r0, r3}
 800b35e:	6819      	ldr	r1, [r3, #0]
 800b360:	6808      	ldr	r0, [r1, #0]
 800b362:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b366:	f01e 0f10 	tst.w	lr, #16
 800b36a:	bf08      	it	eq
 800b36c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b370:	f380 8809 	msr	PSP, r0
 800b374:	f3bf 8f6f 	isb	sy
 800b378:	4770      	bx	lr
 800b37a:	bf00      	nop
 800b37c:	f3af 8000 	nop.w

0800b380 <pxCurrentTCBConst>:
 800b380:	24003f24 	.word	0x24003f24
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b384:	bf00      	nop
 800b386:	bf00      	nop

0800b388 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b082      	sub	sp, #8
 800b38c:	af00      	add	r7, sp, #0
	__asm volatile
 800b38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b392:	f383 8811 	msr	BASEPRI, r3
 800b396:	f3bf 8f6f 	isb	sy
 800b39a:	f3bf 8f4f 	dsb	sy
 800b39e:	607b      	str	r3, [r7, #4]
}
 800b3a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b3a2:	f001 f885 	bl	800c4b0 <xTaskIncrementTick>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d003      	beq.n	800b3b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b3ac:	4b06      	ldr	r3, [pc, #24]	; (800b3c8 <xPortSysTickHandler+0x40>)
 800b3ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3b2:	601a      	str	r2, [r3, #0]
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	f383 8811 	msr	BASEPRI, r3
}
 800b3be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b3c0:	bf00      	nop
 800b3c2:	3708      	adds	r7, #8
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}
 800b3c8:	e000ed04 	.word	0xe000ed04

0800b3cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b3d0:	4b0b      	ldr	r3, [pc, #44]	; (800b400 <vPortSetupTimerInterrupt+0x34>)
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b3d6:	4b0b      	ldr	r3, [pc, #44]	; (800b404 <vPortSetupTimerInterrupt+0x38>)
 800b3d8:	2200      	movs	r2, #0
 800b3da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b3dc:	4b0a      	ldr	r3, [pc, #40]	; (800b408 <vPortSetupTimerInterrupt+0x3c>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	4a0a      	ldr	r2, [pc, #40]	; (800b40c <vPortSetupTimerInterrupt+0x40>)
 800b3e2:	fba2 2303 	umull	r2, r3, r2, r3
 800b3e6:	099b      	lsrs	r3, r3, #6
 800b3e8:	4a09      	ldr	r2, [pc, #36]	; (800b410 <vPortSetupTimerInterrupt+0x44>)
 800b3ea:	3b01      	subs	r3, #1
 800b3ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b3ee:	4b04      	ldr	r3, [pc, #16]	; (800b400 <vPortSetupTimerInterrupt+0x34>)
 800b3f0:	2207      	movs	r2, #7
 800b3f2:	601a      	str	r2, [r3, #0]
}
 800b3f4:	bf00      	nop
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fc:	4770      	bx	lr
 800b3fe:	bf00      	nop
 800b400:	e000e010 	.word	0xe000e010
 800b404:	e000e018 	.word	0xe000e018
 800b408:	24000000 	.word	0x24000000
 800b40c:	10624dd3 	.word	0x10624dd3
 800b410:	e000e014 	.word	0xe000e014

0800b414 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b414:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b424 <vPortEnableVFP+0x10>
 800b418:	6801      	ldr	r1, [r0, #0]
 800b41a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b41e:	6001      	str	r1, [r0, #0]
 800b420:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b422:	bf00      	nop
 800b424:	e000ed88 	.word	0xe000ed88

0800b428 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b428:	b480      	push	{r7}
 800b42a:	b085      	sub	sp, #20
 800b42c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b42e:	f3ef 8305 	mrs	r3, IPSR
 800b432:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	2b0f      	cmp	r3, #15
 800b438:	d914      	bls.n	800b464 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b43a:	4a17      	ldr	r2, [pc, #92]	; (800b498 <vPortValidateInterruptPriority+0x70>)
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	4413      	add	r3, r2
 800b440:	781b      	ldrb	r3, [r3, #0]
 800b442:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b444:	4b15      	ldr	r3, [pc, #84]	; (800b49c <vPortValidateInterruptPriority+0x74>)
 800b446:	781b      	ldrb	r3, [r3, #0]
 800b448:	7afa      	ldrb	r2, [r7, #11]
 800b44a:	429a      	cmp	r2, r3
 800b44c:	d20a      	bcs.n	800b464 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b452:	f383 8811 	msr	BASEPRI, r3
 800b456:	f3bf 8f6f 	isb	sy
 800b45a:	f3bf 8f4f 	dsb	sy
 800b45e:	607b      	str	r3, [r7, #4]
}
 800b460:	bf00      	nop
 800b462:	e7fe      	b.n	800b462 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b464:	4b0e      	ldr	r3, [pc, #56]	; (800b4a0 <vPortValidateInterruptPriority+0x78>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b46c:	4b0d      	ldr	r3, [pc, #52]	; (800b4a4 <vPortValidateInterruptPriority+0x7c>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	429a      	cmp	r2, r3
 800b472:	d90a      	bls.n	800b48a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b478:	f383 8811 	msr	BASEPRI, r3
 800b47c:	f3bf 8f6f 	isb	sy
 800b480:	f3bf 8f4f 	dsb	sy
 800b484:	603b      	str	r3, [r7, #0]
}
 800b486:	bf00      	nop
 800b488:	e7fe      	b.n	800b488 <vPortValidateInterruptPriority+0x60>
	}
 800b48a:	bf00      	nop
 800b48c:	3714      	adds	r7, #20
 800b48e:	46bd      	mov	sp, r7
 800b490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b494:	4770      	bx	lr
 800b496:	bf00      	nop
 800b498:	e000e3f0 	.word	0xe000e3f0
 800b49c:	24003f1c 	.word	0x24003f1c
 800b4a0:	e000ed0c 	.word	0xe000ed0c
 800b4a4:	24003f20 	.word	0x24003f20

0800b4a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b084      	sub	sp, #16
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d10a      	bne.n	800b4d2 <xQueueGenericReset+0x2a>
	__asm volatile
 800b4bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c0:	f383 8811 	msr	BASEPRI, r3
 800b4c4:	f3bf 8f6f 	isb	sy
 800b4c8:	f3bf 8f4f 	dsb	sy
 800b4cc:	60bb      	str	r3, [r7, #8]
}
 800b4ce:	bf00      	nop
 800b4d0:	e7fe      	b.n	800b4d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b4d2:	f7ff fec7 	bl	800b264 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681a      	ldr	r2, [r3, #0]
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4de:	68f9      	ldr	r1, [r7, #12]
 800b4e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b4e2:	fb01 f303 	mul.w	r3, r1, r3
 800b4e6:	441a      	add	r2, r3
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	681a      	ldr	r2, [r3, #0]
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	681a      	ldr	r2, [r3, #0]
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b502:	3b01      	subs	r3, #1
 800b504:	68f9      	ldr	r1, [r7, #12]
 800b506:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b508:	fb01 f303 	mul.w	r3, r1, r3
 800b50c:	441a      	add	r2, r3
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	22ff      	movs	r2, #255	; 0xff
 800b516:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	22ff      	movs	r2, #255	; 0xff
 800b51e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d114      	bne.n	800b552 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	691b      	ldr	r3, [r3, #16]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d01a      	beq.n	800b566 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	3310      	adds	r3, #16
 800b534:	4618      	mov	r0, r3
 800b536:	f001 f8f3 	bl	800c720 <xTaskRemoveFromEventList>
 800b53a:	4603      	mov	r3, r0
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d012      	beq.n	800b566 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b540:	4b0c      	ldr	r3, [pc, #48]	; (800b574 <xQueueGenericReset+0xcc>)
 800b542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b546:	601a      	str	r2, [r3, #0]
 800b548:	f3bf 8f4f 	dsb	sy
 800b54c:	f3bf 8f6f 	isb	sy
 800b550:	e009      	b.n	800b566 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	3310      	adds	r3, #16
 800b556:	4618      	mov	r0, r3
 800b558:	f7ff fca2 	bl	800aea0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	3324      	adds	r3, #36	; 0x24
 800b560:	4618      	mov	r0, r3
 800b562:	f7ff fc9d 	bl	800aea0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b566:	f7ff fead 	bl	800b2c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b56a:	2301      	movs	r3, #1
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3710      	adds	r7, #16
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}
 800b574:	e000ed04 	.word	0xe000ed04

0800b578 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b08e      	sub	sp, #56	; 0x38
 800b57c:	af02      	add	r7, sp, #8
 800b57e:	60f8      	str	r0, [r7, #12]
 800b580:	60b9      	str	r1, [r7, #8]
 800b582:	607a      	str	r2, [r7, #4]
 800b584:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d10a      	bne.n	800b5a2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b58c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b590:	f383 8811 	msr	BASEPRI, r3
 800b594:	f3bf 8f6f 	isb	sy
 800b598:	f3bf 8f4f 	dsb	sy
 800b59c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b59e:	bf00      	nop
 800b5a0:	e7fe      	b.n	800b5a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d10a      	bne.n	800b5be <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b5a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ac:	f383 8811 	msr	BASEPRI, r3
 800b5b0:	f3bf 8f6f 	isb	sy
 800b5b4:	f3bf 8f4f 	dsb	sy
 800b5b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b5ba:	bf00      	nop
 800b5bc:	e7fe      	b.n	800b5bc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d002      	beq.n	800b5ca <xQueueGenericCreateStatic+0x52>
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d001      	beq.n	800b5ce <xQueueGenericCreateStatic+0x56>
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	e000      	b.n	800b5d0 <xQueueGenericCreateStatic+0x58>
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d10a      	bne.n	800b5ea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b5d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d8:	f383 8811 	msr	BASEPRI, r3
 800b5dc:	f3bf 8f6f 	isb	sy
 800b5e0:	f3bf 8f4f 	dsb	sy
 800b5e4:	623b      	str	r3, [r7, #32]
}
 800b5e6:	bf00      	nop
 800b5e8:	e7fe      	b.n	800b5e8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d102      	bne.n	800b5f6 <xQueueGenericCreateStatic+0x7e>
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d101      	bne.n	800b5fa <xQueueGenericCreateStatic+0x82>
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	e000      	b.n	800b5fc <xQueueGenericCreateStatic+0x84>
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d10a      	bne.n	800b616 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b604:	f383 8811 	msr	BASEPRI, r3
 800b608:	f3bf 8f6f 	isb	sy
 800b60c:	f3bf 8f4f 	dsb	sy
 800b610:	61fb      	str	r3, [r7, #28]
}
 800b612:	bf00      	nop
 800b614:	e7fe      	b.n	800b614 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b616:	2348      	movs	r3, #72	; 0x48
 800b618:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	2b48      	cmp	r3, #72	; 0x48
 800b61e:	d00a      	beq.n	800b636 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b624:	f383 8811 	msr	BASEPRI, r3
 800b628:	f3bf 8f6f 	isb	sy
 800b62c:	f3bf 8f4f 	dsb	sy
 800b630:	61bb      	str	r3, [r7, #24]
}
 800b632:	bf00      	nop
 800b634:	e7fe      	b.n	800b634 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b636:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d00d      	beq.n	800b65e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b644:	2201      	movs	r2, #1
 800b646:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b64a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b650:	9300      	str	r3, [sp, #0]
 800b652:	4613      	mov	r3, r2
 800b654:	687a      	ldr	r2, [r7, #4]
 800b656:	68b9      	ldr	r1, [r7, #8]
 800b658:	68f8      	ldr	r0, [r7, #12]
 800b65a:	f000 f83f 	bl	800b6dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b65e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b660:	4618      	mov	r0, r3
 800b662:	3730      	adds	r7, #48	; 0x30
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}

0800b668 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b08a      	sub	sp, #40	; 0x28
 800b66c:	af02      	add	r7, sp, #8
 800b66e:	60f8      	str	r0, [r7, #12]
 800b670:	60b9      	str	r1, [r7, #8]
 800b672:	4613      	mov	r3, r2
 800b674:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d10a      	bne.n	800b692 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b680:	f383 8811 	msr	BASEPRI, r3
 800b684:	f3bf 8f6f 	isb	sy
 800b688:	f3bf 8f4f 	dsb	sy
 800b68c:	613b      	str	r3, [r7, #16]
}
 800b68e:	bf00      	nop
 800b690:	e7fe      	b.n	800b690 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	68ba      	ldr	r2, [r7, #8]
 800b696:	fb02 f303 	mul.w	r3, r2, r3
 800b69a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b69c:	69fb      	ldr	r3, [r7, #28]
 800b69e:	3348      	adds	r3, #72	; 0x48
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f7ff fa13 	bl	800aacc <pvPortMalloc>
 800b6a6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b6a8:	69bb      	ldr	r3, [r7, #24]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d011      	beq.n	800b6d2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b6ae:	69bb      	ldr	r3, [r7, #24]
 800b6b0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	3348      	adds	r3, #72	; 0x48
 800b6b6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b6b8:	69bb      	ldr	r3, [r7, #24]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b6c0:	79fa      	ldrb	r2, [r7, #7]
 800b6c2:	69bb      	ldr	r3, [r7, #24]
 800b6c4:	9300      	str	r3, [sp, #0]
 800b6c6:	4613      	mov	r3, r2
 800b6c8:	697a      	ldr	r2, [r7, #20]
 800b6ca:	68b9      	ldr	r1, [r7, #8]
 800b6cc:	68f8      	ldr	r0, [r7, #12]
 800b6ce:	f000 f805 	bl	800b6dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b6d2:	69bb      	ldr	r3, [r7, #24]
	}
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	3720      	adds	r7, #32
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bd80      	pop	{r7, pc}

0800b6dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b084      	sub	sp, #16
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	60f8      	str	r0, [r7, #12]
 800b6e4:	60b9      	str	r1, [r7, #8]
 800b6e6:	607a      	str	r2, [r7, #4]
 800b6e8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d103      	bne.n	800b6f8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b6f0:	69bb      	ldr	r3, [r7, #24]
 800b6f2:	69ba      	ldr	r2, [r7, #24]
 800b6f4:	601a      	str	r2, [r3, #0]
 800b6f6:	e002      	b.n	800b6fe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b6f8:	69bb      	ldr	r3, [r7, #24]
 800b6fa:	687a      	ldr	r2, [r7, #4]
 800b6fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b6fe:	69bb      	ldr	r3, [r7, #24]
 800b700:	68fa      	ldr	r2, [r7, #12]
 800b702:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b704:	69bb      	ldr	r3, [r7, #24]
 800b706:	68ba      	ldr	r2, [r7, #8]
 800b708:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b70a:	2101      	movs	r1, #1
 800b70c:	69b8      	ldr	r0, [r7, #24]
 800b70e:	f7ff fecb 	bl	800b4a8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b712:	bf00      	nop
 800b714:	3710      	adds	r7, #16
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}
	...

0800b71c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b08e      	sub	sp, #56	; 0x38
 800b720:	af00      	add	r7, sp, #0
 800b722:	60f8      	str	r0, [r7, #12]
 800b724:	60b9      	str	r1, [r7, #8]
 800b726:	607a      	str	r2, [r7, #4]
 800b728:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b72a:	2300      	movs	r3, #0
 800b72c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b734:	2b00      	cmp	r3, #0
 800b736:	d10a      	bne.n	800b74e <xQueueGenericSend+0x32>
	__asm volatile
 800b738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b73c:	f383 8811 	msr	BASEPRI, r3
 800b740:	f3bf 8f6f 	isb	sy
 800b744:	f3bf 8f4f 	dsb	sy
 800b748:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b74a:	bf00      	nop
 800b74c:	e7fe      	b.n	800b74c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d103      	bne.n	800b75c <xQueueGenericSend+0x40>
 800b754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d101      	bne.n	800b760 <xQueueGenericSend+0x44>
 800b75c:	2301      	movs	r3, #1
 800b75e:	e000      	b.n	800b762 <xQueueGenericSend+0x46>
 800b760:	2300      	movs	r3, #0
 800b762:	2b00      	cmp	r3, #0
 800b764:	d10a      	bne.n	800b77c <xQueueGenericSend+0x60>
	__asm volatile
 800b766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b76a:	f383 8811 	msr	BASEPRI, r3
 800b76e:	f3bf 8f6f 	isb	sy
 800b772:	f3bf 8f4f 	dsb	sy
 800b776:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b778:	bf00      	nop
 800b77a:	e7fe      	b.n	800b77a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	2b02      	cmp	r3, #2
 800b780:	d103      	bne.n	800b78a <xQueueGenericSend+0x6e>
 800b782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b786:	2b01      	cmp	r3, #1
 800b788:	d101      	bne.n	800b78e <xQueueGenericSend+0x72>
 800b78a:	2301      	movs	r3, #1
 800b78c:	e000      	b.n	800b790 <xQueueGenericSend+0x74>
 800b78e:	2300      	movs	r3, #0
 800b790:	2b00      	cmp	r3, #0
 800b792:	d10a      	bne.n	800b7aa <xQueueGenericSend+0x8e>
	__asm volatile
 800b794:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b798:	f383 8811 	msr	BASEPRI, r3
 800b79c:	f3bf 8f6f 	isb	sy
 800b7a0:	f3bf 8f4f 	dsb	sy
 800b7a4:	623b      	str	r3, [r7, #32]
}
 800b7a6:	bf00      	nop
 800b7a8:	e7fe      	b.n	800b7a8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b7aa:	f001 f975 	bl	800ca98 <xTaskGetSchedulerState>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d102      	bne.n	800b7ba <xQueueGenericSend+0x9e>
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d101      	bne.n	800b7be <xQueueGenericSend+0xa2>
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	e000      	b.n	800b7c0 <xQueueGenericSend+0xa4>
 800b7be:	2300      	movs	r3, #0
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d10a      	bne.n	800b7da <xQueueGenericSend+0xbe>
	__asm volatile
 800b7c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c8:	f383 8811 	msr	BASEPRI, r3
 800b7cc:	f3bf 8f6f 	isb	sy
 800b7d0:	f3bf 8f4f 	dsb	sy
 800b7d4:	61fb      	str	r3, [r7, #28]
}
 800b7d6:	bf00      	nop
 800b7d8:	e7fe      	b.n	800b7d8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b7da:	f7ff fd43 	bl	800b264 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7e6:	429a      	cmp	r2, r3
 800b7e8:	d302      	bcc.n	800b7f0 <xQueueGenericSend+0xd4>
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	2b02      	cmp	r3, #2
 800b7ee:	d129      	bne.n	800b844 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b7f0:	683a      	ldr	r2, [r7, #0]
 800b7f2:	68b9      	ldr	r1, [r7, #8]
 800b7f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b7f6:	f000 fa8b 	bl	800bd10 <prvCopyDataToQueue>
 800b7fa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b800:	2b00      	cmp	r3, #0
 800b802:	d010      	beq.n	800b826 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b806:	3324      	adds	r3, #36	; 0x24
 800b808:	4618      	mov	r0, r3
 800b80a:	f000 ff89 	bl	800c720 <xTaskRemoveFromEventList>
 800b80e:	4603      	mov	r3, r0
 800b810:	2b00      	cmp	r3, #0
 800b812:	d013      	beq.n	800b83c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b814:	4b3f      	ldr	r3, [pc, #252]	; (800b914 <xQueueGenericSend+0x1f8>)
 800b816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b81a:	601a      	str	r2, [r3, #0]
 800b81c:	f3bf 8f4f 	dsb	sy
 800b820:	f3bf 8f6f 	isb	sy
 800b824:	e00a      	b.n	800b83c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d007      	beq.n	800b83c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b82c:	4b39      	ldr	r3, [pc, #228]	; (800b914 <xQueueGenericSend+0x1f8>)
 800b82e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b832:	601a      	str	r2, [r3, #0]
 800b834:	f3bf 8f4f 	dsb	sy
 800b838:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b83c:	f7ff fd42 	bl	800b2c4 <vPortExitCritical>
				return pdPASS;
 800b840:	2301      	movs	r3, #1
 800b842:	e063      	b.n	800b90c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d103      	bne.n	800b852 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b84a:	f7ff fd3b 	bl	800b2c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b84e:	2300      	movs	r3, #0
 800b850:	e05c      	b.n	800b90c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b854:	2b00      	cmp	r3, #0
 800b856:	d106      	bne.n	800b866 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b858:	f107 0314 	add.w	r3, r7, #20
 800b85c:	4618      	mov	r0, r3
 800b85e:	f000 ffc1 	bl	800c7e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b862:	2301      	movs	r3, #1
 800b864:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b866:	f7ff fd2d 	bl	800b2c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b86a:	f000 fd55 	bl	800c318 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b86e:	f7ff fcf9 	bl	800b264 <vPortEnterCritical>
 800b872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b874:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b878:	b25b      	sxtb	r3, r3
 800b87a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b87e:	d103      	bne.n	800b888 <xQueueGenericSend+0x16c>
 800b880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b882:	2200      	movs	r2, #0
 800b884:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b88a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b88e:	b25b      	sxtb	r3, r3
 800b890:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b894:	d103      	bne.n	800b89e <xQueueGenericSend+0x182>
 800b896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b898:	2200      	movs	r2, #0
 800b89a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b89e:	f7ff fd11 	bl	800b2c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b8a2:	1d3a      	adds	r2, r7, #4
 800b8a4:	f107 0314 	add.w	r3, r7, #20
 800b8a8:	4611      	mov	r1, r2
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f000 ffb0 	bl	800c810 <xTaskCheckForTimeOut>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d124      	bne.n	800b900 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b8b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8b8:	f000 fb22 	bl	800bf00 <prvIsQueueFull>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d018      	beq.n	800b8f4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c4:	3310      	adds	r3, #16
 800b8c6:	687a      	ldr	r2, [r7, #4]
 800b8c8:	4611      	mov	r1, r2
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f000 ff04 	bl	800c6d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b8d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8d2:	f000 faad 	bl	800be30 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b8d6:	f000 fd2d 	bl	800c334 <xTaskResumeAll>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	f47f af7c 	bne.w	800b7da <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b8e2:	4b0c      	ldr	r3, [pc, #48]	; (800b914 <xQueueGenericSend+0x1f8>)
 800b8e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8e8:	601a      	str	r2, [r3, #0]
 800b8ea:	f3bf 8f4f 	dsb	sy
 800b8ee:	f3bf 8f6f 	isb	sy
 800b8f2:	e772      	b.n	800b7da <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b8f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8f6:	f000 fa9b 	bl	800be30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b8fa:	f000 fd1b 	bl	800c334 <xTaskResumeAll>
 800b8fe:	e76c      	b.n	800b7da <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b900:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b902:	f000 fa95 	bl	800be30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b906:	f000 fd15 	bl	800c334 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b90a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	3738      	adds	r7, #56	; 0x38
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}
 800b914:	e000ed04 	.word	0xe000ed04

0800b918 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b090      	sub	sp, #64	; 0x40
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	60f8      	str	r0, [r7, #12]
 800b920:	60b9      	str	r1, [r7, #8]
 800b922:	607a      	str	r2, [r7, #4]
 800b924:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d10a      	bne.n	800b946 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b934:	f383 8811 	msr	BASEPRI, r3
 800b938:	f3bf 8f6f 	isb	sy
 800b93c:	f3bf 8f4f 	dsb	sy
 800b940:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b942:	bf00      	nop
 800b944:	e7fe      	b.n	800b944 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d103      	bne.n	800b954 <xQueueGenericSendFromISR+0x3c>
 800b94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b94e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b950:	2b00      	cmp	r3, #0
 800b952:	d101      	bne.n	800b958 <xQueueGenericSendFromISR+0x40>
 800b954:	2301      	movs	r3, #1
 800b956:	e000      	b.n	800b95a <xQueueGenericSendFromISR+0x42>
 800b958:	2300      	movs	r3, #0
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d10a      	bne.n	800b974 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b962:	f383 8811 	msr	BASEPRI, r3
 800b966:	f3bf 8f6f 	isb	sy
 800b96a:	f3bf 8f4f 	dsb	sy
 800b96e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b970:	bf00      	nop
 800b972:	e7fe      	b.n	800b972 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	2b02      	cmp	r3, #2
 800b978:	d103      	bne.n	800b982 <xQueueGenericSendFromISR+0x6a>
 800b97a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b97c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b97e:	2b01      	cmp	r3, #1
 800b980:	d101      	bne.n	800b986 <xQueueGenericSendFromISR+0x6e>
 800b982:	2301      	movs	r3, #1
 800b984:	e000      	b.n	800b988 <xQueueGenericSendFromISR+0x70>
 800b986:	2300      	movs	r3, #0
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d10a      	bne.n	800b9a2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b990:	f383 8811 	msr	BASEPRI, r3
 800b994:	f3bf 8f6f 	isb	sy
 800b998:	f3bf 8f4f 	dsb	sy
 800b99c:	623b      	str	r3, [r7, #32]
}
 800b99e:	bf00      	nop
 800b9a0:	e7fe      	b.n	800b9a0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b9a2:	f7ff fd41 	bl	800b428 <vPortValidateInterruptPriority>
	__asm volatile
 800b9a6:	f3ef 8211 	mrs	r2, BASEPRI
 800b9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ae:	f383 8811 	msr	BASEPRI, r3
 800b9b2:	f3bf 8f6f 	isb	sy
 800b9b6:	f3bf 8f4f 	dsb	sy
 800b9ba:	61fa      	str	r2, [r7, #28]
 800b9bc:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800b9be:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b9c0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9ca:	429a      	cmp	r2, r3
 800b9cc:	d302      	bcc.n	800b9d4 <xQueueGenericSendFromISR+0xbc>
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	2b02      	cmp	r3, #2
 800b9d2:	d12f      	bne.n	800ba34 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b9d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b9da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b9de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9e2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b9e4:	683a      	ldr	r2, [r7, #0]
 800b9e6:	68b9      	ldr	r1, [r7, #8]
 800b9e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b9ea:	f000 f991 	bl	800bd10 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b9ee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b9f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9f6:	d112      	bne.n	800ba1e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d016      	beq.n	800ba2e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ba00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba02:	3324      	adds	r3, #36	; 0x24
 800ba04:	4618      	mov	r0, r3
 800ba06:	f000 fe8b 	bl	800c720 <xTaskRemoveFromEventList>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d00e      	beq.n	800ba2e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d00b      	beq.n	800ba2e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2201      	movs	r2, #1
 800ba1a:	601a      	str	r2, [r3, #0]
 800ba1c:	e007      	b.n	800ba2e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ba1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ba22:	3301      	adds	r3, #1
 800ba24:	b2db      	uxtb	r3, r3
 800ba26:	b25a      	sxtb	r2, r3
 800ba28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ba2e:	2301      	movs	r3, #1
 800ba30:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ba32:	e001      	b.n	800ba38 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ba34:	2300      	movs	r3, #0
 800ba36:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba3a:	617b      	str	r3, [r7, #20]
	__asm volatile
 800ba3c:	697b      	ldr	r3, [r7, #20]
 800ba3e:	f383 8811 	msr	BASEPRI, r3
}
 800ba42:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ba44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3740      	adds	r7, #64	; 0x40
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}
	...

0800ba50 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b08c      	sub	sp, #48	; 0x30
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	60f8      	str	r0, [r7, #12]
 800ba58:	60b9      	str	r1, [r7, #8]
 800ba5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ba64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d10a      	bne.n	800ba80 <xQueueReceive+0x30>
	__asm volatile
 800ba6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba6e:	f383 8811 	msr	BASEPRI, r3
 800ba72:	f3bf 8f6f 	isb	sy
 800ba76:	f3bf 8f4f 	dsb	sy
 800ba7a:	623b      	str	r3, [r7, #32]
}
 800ba7c:	bf00      	nop
 800ba7e:	e7fe      	b.n	800ba7e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d103      	bne.n	800ba8e <xQueueReceive+0x3e>
 800ba86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d101      	bne.n	800ba92 <xQueueReceive+0x42>
 800ba8e:	2301      	movs	r3, #1
 800ba90:	e000      	b.n	800ba94 <xQueueReceive+0x44>
 800ba92:	2300      	movs	r3, #0
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d10a      	bne.n	800baae <xQueueReceive+0x5e>
	__asm volatile
 800ba98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba9c:	f383 8811 	msr	BASEPRI, r3
 800baa0:	f3bf 8f6f 	isb	sy
 800baa4:	f3bf 8f4f 	dsb	sy
 800baa8:	61fb      	str	r3, [r7, #28]
}
 800baaa:	bf00      	nop
 800baac:	e7fe      	b.n	800baac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800baae:	f000 fff3 	bl	800ca98 <xTaskGetSchedulerState>
 800bab2:	4603      	mov	r3, r0
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d102      	bne.n	800babe <xQueueReceive+0x6e>
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d101      	bne.n	800bac2 <xQueueReceive+0x72>
 800babe:	2301      	movs	r3, #1
 800bac0:	e000      	b.n	800bac4 <xQueueReceive+0x74>
 800bac2:	2300      	movs	r3, #0
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d10a      	bne.n	800bade <xQueueReceive+0x8e>
	__asm volatile
 800bac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bacc:	f383 8811 	msr	BASEPRI, r3
 800bad0:	f3bf 8f6f 	isb	sy
 800bad4:	f3bf 8f4f 	dsb	sy
 800bad8:	61bb      	str	r3, [r7, #24]
}
 800bada:	bf00      	nop
 800badc:	e7fe      	b.n	800badc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bade:	f7ff fbc1 	bl	800b264 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bae6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baea:	2b00      	cmp	r3, #0
 800baec:	d01f      	beq.n	800bb2e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800baee:	68b9      	ldr	r1, [r7, #8]
 800baf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800baf2:	f000 f977 	bl	800bde4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800baf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf8:	1e5a      	subs	r2, r3, #1
 800bafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bafc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb00:	691b      	ldr	r3, [r3, #16]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d00f      	beq.n	800bb26 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb08:	3310      	adds	r3, #16
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f000 fe08 	bl	800c720 <xTaskRemoveFromEventList>
 800bb10:	4603      	mov	r3, r0
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d007      	beq.n	800bb26 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bb16:	4b3d      	ldr	r3, [pc, #244]	; (800bc0c <xQueueReceive+0x1bc>)
 800bb18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb1c:	601a      	str	r2, [r3, #0]
 800bb1e:	f3bf 8f4f 	dsb	sy
 800bb22:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bb26:	f7ff fbcd 	bl	800b2c4 <vPortExitCritical>
				return pdPASS;
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	e069      	b.n	800bc02 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d103      	bne.n	800bb3c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bb34:	f7ff fbc6 	bl	800b2c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bb38:	2300      	movs	r3, #0
 800bb3a:	e062      	b.n	800bc02 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bb3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d106      	bne.n	800bb50 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bb42:	f107 0310 	add.w	r3, r7, #16
 800bb46:	4618      	mov	r0, r3
 800bb48:	f000 fe4c 	bl	800c7e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bb50:	f7ff fbb8 	bl	800b2c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bb54:	f000 fbe0 	bl	800c318 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bb58:	f7ff fb84 	bl	800b264 <vPortEnterCritical>
 800bb5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb62:	b25b      	sxtb	r3, r3
 800bb64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb68:	d103      	bne.n	800bb72 <xQueueReceive+0x122>
 800bb6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb78:	b25b      	sxtb	r3, r3
 800bb7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb7e:	d103      	bne.n	800bb88 <xQueueReceive+0x138>
 800bb80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb82:	2200      	movs	r2, #0
 800bb84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bb88:	f7ff fb9c 	bl	800b2c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bb8c:	1d3a      	adds	r2, r7, #4
 800bb8e:	f107 0310 	add.w	r3, r7, #16
 800bb92:	4611      	mov	r1, r2
 800bb94:	4618      	mov	r0, r3
 800bb96:	f000 fe3b 	bl	800c810 <xTaskCheckForTimeOut>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d123      	bne.n	800bbe8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bba0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bba2:	f000 f997 	bl	800bed4 <prvIsQueueEmpty>
 800bba6:	4603      	mov	r3, r0
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d017      	beq.n	800bbdc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bbac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbae:	3324      	adds	r3, #36	; 0x24
 800bbb0:	687a      	ldr	r2, [r7, #4]
 800bbb2:	4611      	mov	r1, r2
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f000 fd8f 	bl	800c6d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bbba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbbc:	f000 f938 	bl	800be30 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bbc0:	f000 fbb8 	bl	800c334 <xTaskResumeAll>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d189      	bne.n	800bade <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800bbca:	4b10      	ldr	r3, [pc, #64]	; (800bc0c <xQueueReceive+0x1bc>)
 800bbcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbd0:	601a      	str	r2, [r3, #0]
 800bbd2:	f3bf 8f4f 	dsb	sy
 800bbd6:	f3bf 8f6f 	isb	sy
 800bbda:	e780      	b.n	800bade <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bbdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbde:	f000 f927 	bl	800be30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bbe2:	f000 fba7 	bl	800c334 <xTaskResumeAll>
 800bbe6:	e77a      	b.n	800bade <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bbe8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbea:	f000 f921 	bl	800be30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bbee:	f000 fba1 	bl	800c334 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bbf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbf4:	f000 f96e 	bl	800bed4 <prvIsQueueEmpty>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	f43f af6f 	beq.w	800bade <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bc00:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	3730      	adds	r7, #48	; 0x30
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}
 800bc0a:	bf00      	nop
 800bc0c:	e000ed04 	.word	0xe000ed04

0800bc10 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b08e      	sub	sp, #56	; 0x38
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	60f8      	str	r0, [r7, #12]
 800bc18:	60b9      	str	r1, [r7, #8]
 800bc1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bc20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d10a      	bne.n	800bc3c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800bc26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc2a:	f383 8811 	msr	BASEPRI, r3
 800bc2e:	f3bf 8f6f 	isb	sy
 800bc32:	f3bf 8f4f 	dsb	sy
 800bc36:	623b      	str	r3, [r7, #32]
}
 800bc38:	bf00      	nop
 800bc3a:	e7fe      	b.n	800bc3a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d103      	bne.n	800bc4a <xQueueReceiveFromISR+0x3a>
 800bc42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d101      	bne.n	800bc4e <xQueueReceiveFromISR+0x3e>
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	e000      	b.n	800bc50 <xQueueReceiveFromISR+0x40>
 800bc4e:	2300      	movs	r3, #0
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d10a      	bne.n	800bc6a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800bc54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc58:	f383 8811 	msr	BASEPRI, r3
 800bc5c:	f3bf 8f6f 	isb	sy
 800bc60:	f3bf 8f4f 	dsb	sy
 800bc64:	61fb      	str	r3, [r7, #28]
}
 800bc66:	bf00      	nop
 800bc68:	e7fe      	b.n	800bc68 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bc6a:	f7ff fbdd 	bl	800b428 <vPortValidateInterruptPriority>
	__asm volatile
 800bc6e:	f3ef 8211 	mrs	r2, BASEPRI
 800bc72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc76:	f383 8811 	msr	BASEPRI, r3
 800bc7a:	f3bf 8f6f 	isb	sy
 800bc7e:	f3bf 8f4f 	dsb	sy
 800bc82:	61ba      	str	r2, [r7, #24]
 800bc84:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800bc86:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bc88:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bc8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc8e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bc90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d02f      	beq.n	800bcf6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800bc96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bca0:	68b9      	ldr	r1, [r7, #8]
 800bca2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bca4:	f000 f89e 	bl	800bde4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcaa:	1e5a      	subs	r2, r3, #1
 800bcac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcae:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800bcb0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bcb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcb8:	d112      	bne.n	800bce0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bcba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcbc:	691b      	ldr	r3, [r3, #16]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d016      	beq.n	800bcf0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bcc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc4:	3310      	adds	r3, #16
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f000 fd2a 	bl	800c720 <xTaskRemoveFromEventList>
 800bccc:	4603      	mov	r3, r0
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d00e      	beq.n	800bcf0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d00b      	beq.n	800bcf0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2201      	movs	r2, #1
 800bcdc:	601a      	str	r2, [r3, #0]
 800bcde:	e007      	b.n	800bcf0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800bce0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bce4:	3301      	adds	r3, #1
 800bce6:	b2db      	uxtb	r3, r3
 800bce8:	b25a      	sxtb	r2, r3
 800bcea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	637b      	str	r3, [r7, #52]	; 0x34
 800bcf4:	e001      	b.n	800bcfa <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	637b      	str	r3, [r7, #52]	; 0x34
 800bcfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcfc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bcfe:	693b      	ldr	r3, [r7, #16]
 800bd00:	f383 8811 	msr	BASEPRI, r3
}
 800bd04:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bd06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3738      	adds	r7, #56	; 0x38
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}

0800bd10 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b086      	sub	sp, #24
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	60f8      	str	r0, [r7, #12]
 800bd18:	60b9      	str	r1, [r7, #8]
 800bd1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd24:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d10d      	bne.n	800bd4a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d14d      	bne.n	800bdd2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	689b      	ldr	r3, [r3, #8]
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f000 feca 	bl	800cad4 <xTaskPriorityDisinherit>
 800bd40:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	2200      	movs	r2, #0
 800bd46:	609a      	str	r2, [r3, #8]
 800bd48:	e043      	b.n	800bdd2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d119      	bne.n	800bd84 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	6858      	ldr	r0, [r3, #4]
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd58:	461a      	mov	r2, r3
 800bd5a:	68b9      	ldr	r1, [r7, #8]
 800bd5c:	f001 f832 	bl	800cdc4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	685a      	ldr	r2, [r3, #4]
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd68:	441a      	add	r2, r3
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	685a      	ldr	r2, [r3, #4]
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	689b      	ldr	r3, [r3, #8]
 800bd76:	429a      	cmp	r2, r3
 800bd78:	d32b      	bcc.n	800bdd2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	681a      	ldr	r2, [r3, #0]
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	605a      	str	r2, [r3, #4]
 800bd82:	e026      	b.n	800bdd2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	68d8      	ldr	r0, [r3, #12]
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd8c:	461a      	mov	r2, r3
 800bd8e:	68b9      	ldr	r1, [r7, #8]
 800bd90:	f001 f818 	bl	800cdc4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	68da      	ldr	r2, [r3, #12]
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd9c:	425b      	negs	r3, r3
 800bd9e:	441a      	add	r2, r3
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	68da      	ldr	r2, [r3, #12]
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	429a      	cmp	r2, r3
 800bdae:	d207      	bcs.n	800bdc0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	689a      	ldr	r2, [r3, #8]
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdb8:	425b      	negs	r3, r3
 800bdba:	441a      	add	r2, r3
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2b02      	cmp	r3, #2
 800bdc4:	d105      	bne.n	800bdd2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bdc6:	693b      	ldr	r3, [r7, #16]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d002      	beq.n	800bdd2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bdcc:	693b      	ldr	r3, [r7, #16]
 800bdce:	3b01      	subs	r3, #1
 800bdd0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bdd2:	693b      	ldr	r3, [r7, #16]
 800bdd4:	1c5a      	adds	r2, r3, #1
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bdda:	697b      	ldr	r3, [r7, #20]
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	3718      	adds	r7, #24
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}

0800bde4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b082      	sub	sp, #8
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
 800bdec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d018      	beq.n	800be28 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	68da      	ldr	r2, [r3, #12]
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdfe:	441a      	add	r2, r3
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	68da      	ldr	r2, [r3, #12]
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	689b      	ldr	r3, [r3, #8]
 800be0c:	429a      	cmp	r2, r3
 800be0e:	d303      	bcc.n	800be18 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681a      	ldr	r2, [r3, #0]
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	68d9      	ldr	r1, [r3, #12]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be20:	461a      	mov	r2, r3
 800be22:	6838      	ldr	r0, [r7, #0]
 800be24:	f000 ffce 	bl	800cdc4 <memcpy>
	}
}
 800be28:	bf00      	nop
 800be2a:	3708      	adds	r7, #8
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bd80      	pop	{r7, pc}

0800be30 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b084      	sub	sp, #16
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800be38:	f7ff fa14 	bl	800b264 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be42:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800be44:	e011      	b.n	800be6a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d012      	beq.n	800be74 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	3324      	adds	r3, #36	; 0x24
 800be52:	4618      	mov	r0, r3
 800be54:	f000 fc64 	bl	800c720 <xTaskRemoveFromEventList>
 800be58:	4603      	mov	r3, r0
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d001      	beq.n	800be62 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800be5e:	f000 fd39 	bl	800c8d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800be62:	7bfb      	ldrb	r3, [r7, #15]
 800be64:	3b01      	subs	r3, #1
 800be66:	b2db      	uxtb	r3, r3
 800be68:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800be6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	dce9      	bgt.n	800be46 <prvUnlockQueue+0x16>
 800be72:	e000      	b.n	800be76 <prvUnlockQueue+0x46>
					break;
 800be74:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	22ff      	movs	r2, #255	; 0xff
 800be7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800be7e:	f7ff fa21 	bl	800b2c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800be82:	f7ff f9ef 	bl	800b264 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be8c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800be8e:	e011      	b.n	800beb4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	691b      	ldr	r3, [r3, #16]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d012      	beq.n	800bebe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	3310      	adds	r3, #16
 800be9c:	4618      	mov	r0, r3
 800be9e:	f000 fc3f 	bl	800c720 <xTaskRemoveFromEventList>
 800bea2:	4603      	mov	r3, r0
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d001      	beq.n	800beac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bea8:	f000 fd14 	bl	800c8d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800beac:	7bbb      	ldrb	r3, [r7, #14]
 800beae:	3b01      	subs	r3, #1
 800beb0:	b2db      	uxtb	r3, r3
 800beb2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800beb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	dce9      	bgt.n	800be90 <prvUnlockQueue+0x60>
 800bebc:	e000      	b.n	800bec0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bebe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	22ff      	movs	r2, #255	; 0xff
 800bec4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bec8:	f7ff f9fc 	bl	800b2c4 <vPortExitCritical>
}
 800becc:	bf00      	nop
 800bece:	3710      	adds	r7, #16
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}

0800bed4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b084      	sub	sp, #16
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bedc:	f7ff f9c2 	bl	800b264 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d102      	bne.n	800beee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bee8:	2301      	movs	r3, #1
 800beea:	60fb      	str	r3, [r7, #12]
 800beec:	e001      	b.n	800bef2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800beee:	2300      	movs	r3, #0
 800bef0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bef2:	f7ff f9e7 	bl	800b2c4 <vPortExitCritical>

	return xReturn;
 800bef6:	68fb      	ldr	r3, [r7, #12]
}
 800bef8:	4618      	mov	r0, r3
 800befa:	3710      	adds	r7, #16
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}

0800bf00 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b084      	sub	sp, #16
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bf08:	f7ff f9ac 	bl	800b264 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf14:	429a      	cmp	r2, r3
 800bf16:	d102      	bne.n	800bf1e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bf18:	2301      	movs	r3, #1
 800bf1a:	60fb      	str	r3, [r7, #12]
 800bf1c:	e001      	b.n	800bf22 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bf22:	f7ff f9cf 	bl	800b2c4 <vPortExitCritical>

	return xReturn;
 800bf26:	68fb      	ldr	r3, [r7, #12]
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3710      	adds	r7, #16
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}

0800bf30 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b08e      	sub	sp, #56	; 0x38
 800bf34:	af04      	add	r7, sp, #16
 800bf36:	60f8      	str	r0, [r7, #12]
 800bf38:	60b9      	str	r1, [r7, #8]
 800bf3a:	607a      	str	r2, [r7, #4]
 800bf3c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bf3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d10a      	bne.n	800bf5a <xTaskCreateStatic+0x2a>
	__asm volatile
 800bf44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf48:	f383 8811 	msr	BASEPRI, r3
 800bf4c:	f3bf 8f6f 	isb	sy
 800bf50:	f3bf 8f4f 	dsb	sy
 800bf54:	623b      	str	r3, [r7, #32]
}
 800bf56:	bf00      	nop
 800bf58:	e7fe      	b.n	800bf58 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bf5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d10a      	bne.n	800bf76 <xTaskCreateStatic+0x46>
	__asm volatile
 800bf60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf64:	f383 8811 	msr	BASEPRI, r3
 800bf68:	f3bf 8f6f 	isb	sy
 800bf6c:	f3bf 8f4f 	dsb	sy
 800bf70:	61fb      	str	r3, [r7, #28]
}
 800bf72:	bf00      	nop
 800bf74:	e7fe      	b.n	800bf74 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bf76:	2354      	movs	r3, #84	; 0x54
 800bf78:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bf7a:	693b      	ldr	r3, [r7, #16]
 800bf7c:	2b54      	cmp	r3, #84	; 0x54
 800bf7e:	d00a      	beq.n	800bf96 <xTaskCreateStatic+0x66>
	__asm volatile
 800bf80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf84:	f383 8811 	msr	BASEPRI, r3
 800bf88:	f3bf 8f6f 	isb	sy
 800bf8c:	f3bf 8f4f 	dsb	sy
 800bf90:	61bb      	str	r3, [r7, #24]
}
 800bf92:	bf00      	nop
 800bf94:	e7fe      	b.n	800bf94 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bf96:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bf98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d01e      	beq.n	800bfdc <xTaskCreateStatic+0xac>
 800bf9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d01b      	beq.n	800bfdc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bfa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bfa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bfac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bfae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb0:	2202      	movs	r2, #2
 800bfb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	9303      	str	r3, [sp, #12]
 800bfba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfbc:	9302      	str	r3, [sp, #8]
 800bfbe:	f107 0314 	add.w	r3, r7, #20
 800bfc2:	9301      	str	r3, [sp, #4]
 800bfc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc6:	9300      	str	r3, [sp, #0]
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	687a      	ldr	r2, [r7, #4]
 800bfcc:	68b9      	ldr	r1, [r7, #8]
 800bfce:	68f8      	ldr	r0, [r7, #12]
 800bfd0:	f000 f850 	bl	800c074 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bfd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bfd6:	f000 f8d5 	bl	800c184 <prvAddNewTaskToReadyList>
 800bfda:	e001      	b.n	800bfe0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bfe0:	697b      	ldr	r3, [r7, #20]
	}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	3728      	adds	r7, #40	; 0x28
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}

0800bfea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bfea:	b580      	push	{r7, lr}
 800bfec:	b08c      	sub	sp, #48	; 0x30
 800bfee:	af04      	add	r7, sp, #16
 800bff0:	60f8      	str	r0, [r7, #12]
 800bff2:	60b9      	str	r1, [r7, #8]
 800bff4:	603b      	str	r3, [r7, #0]
 800bff6:	4613      	mov	r3, r2
 800bff8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bffa:	88fb      	ldrh	r3, [r7, #6]
 800bffc:	009b      	lsls	r3, r3, #2
 800bffe:	4618      	mov	r0, r3
 800c000:	f7fe fd64 	bl	800aacc <pvPortMalloc>
 800c004:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c006:	697b      	ldr	r3, [r7, #20]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d00e      	beq.n	800c02a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c00c:	2054      	movs	r0, #84	; 0x54
 800c00e:	f7fe fd5d 	bl	800aacc <pvPortMalloc>
 800c012:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c014:	69fb      	ldr	r3, [r7, #28]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d003      	beq.n	800c022 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c01a:	69fb      	ldr	r3, [r7, #28]
 800c01c:	697a      	ldr	r2, [r7, #20]
 800c01e:	631a      	str	r2, [r3, #48]	; 0x30
 800c020:	e005      	b.n	800c02e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c022:	6978      	ldr	r0, [r7, #20]
 800c024:	f7fe fe1e 	bl	800ac64 <vPortFree>
 800c028:	e001      	b.n	800c02e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c02a:	2300      	movs	r3, #0
 800c02c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c02e:	69fb      	ldr	r3, [r7, #28]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d017      	beq.n	800c064 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c034:	69fb      	ldr	r3, [r7, #28]
 800c036:	2200      	movs	r2, #0
 800c038:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c03c:	88fa      	ldrh	r2, [r7, #6]
 800c03e:	2300      	movs	r3, #0
 800c040:	9303      	str	r3, [sp, #12]
 800c042:	69fb      	ldr	r3, [r7, #28]
 800c044:	9302      	str	r3, [sp, #8]
 800c046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c048:	9301      	str	r3, [sp, #4]
 800c04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c04c:	9300      	str	r3, [sp, #0]
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	68b9      	ldr	r1, [r7, #8]
 800c052:	68f8      	ldr	r0, [r7, #12]
 800c054:	f000 f80e 	bl	800c074 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c058:	69f8      	ldr	r0, [r7, #28]
 800c05a:	f000 f893 	bl	800c184 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c05e:	2301      	movs	r3, #1
 800c060:	61bb      	str	r3, [r7, #24]
 800c062:	e002      	b.n	800c06a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c064:	f04f 33ff 	mov.w	r3, #4294967295
 800c068:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c06a:	69bb      	ldr	r3, [r7, #24]
	}
 800c06c:	4618      	mov	r0, r3
 800c06e:	3720      	adds	r7, #32
 800c070:	46bd      	mov	sp, r7
 800c072:	bd80      	pop	{r7, pc}

0800c074 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b088      	sub	sp, #32
 800c078:	af00      	add	r7, sp, #0
 800c07a:	60f8      	str	r0, [r7, #12]
 800c07c:	60b9      	str	r1, [r7, #8]
 800c07e:	607a      	str	r2, [r7, #4]
 800c080:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c084:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c086:	6879      	ldr	r1, [r7, #4]
 800c088:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c08c:	440b      	add	r3, r1
 800c08e:	009b      	lsls	r3, r3, #2
 800c090:	4413      	add	r3, r2
 800c092:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c094:	69bb      	ldr	r3, [r7, #24]
 800c096:	f023 0307 	bic.w	r3, r3, #7
 800c09a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c09c:	69bb      	ldr	r3, [r7, #24]
 800c09e:	f003 0307 	and.w	r3, r3, #7
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d00a      	beq.n	800c0bc <prvInitialiseNewTask+0x48>
	__asm volatile
 800c0a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0aa:	f383 8811 	msr	BASEPRI, r3
 800c0ae:	f3bf 8f6f 	isb	sy
 800c0b2:	f3bf 8f4f 	dsb	sy
 800c0b6:	617b      	str	r3, [r7, #20]
}
 800c0b8:	bf00      	nop
 800c0ba:	e7fe      	b.n	800c0ba <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d01f      	beq.n	800c102 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	61fb      	str	r3, [r7, #28]
 800c0c6:	e012      	b.n	800c0ee <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c0c8:	68ba      	ldr	r2, [r7, #8]
 800c0ca:	69fb      	ldr	r3, [r7, #28]
 800c0cc:	4413      	add	r3, r2
 800c0ce:	7819      	ldrb	r1, [r3, #0]
 800c0d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0d2:	69fb      	ldr	r3, [r7, #28]
 800c0d4:	4413      	add	r3, r2
 800c0d6:	3334      	adds	r3, #52	; 0x34
 800c0d8:	460a      	mov	r2, r1
 800c0da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c0dc:	68ba      	ldr	r2, [r7, #8]
 800c0de:	69fb      	ldr	r3, [r7, #28]
 800c0e0:	4413      	add	r3, r2
 800c0e2:	781b      	ldrb	r3, [r3, #0]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d006      	beq.n	800c0f6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c0e8:	69fb      	ldr	r3, [r7, #28]
 800c0ea:	3301      	adds	r3, #1
 800c0ec:	61fb      	str	r3, [r7, #28]
 800c0ee:	69fb      	ldr	r3, [r7, #28]
 800c0f0:	2b0f      	cmp	r3, #15
 800c0f2:	d9e9      	bls.n	800c0c8 <prvInitialiseNewTask+0x54>
 800c0f4:	e000      	b.n	800c0f8 <prvInitialiseNewTask+0x84>
			{
				break;
 800c0f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c0f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c100:	e003      	b.n	800c10a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c104:	2200      	movs	r2, #0
 800c106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c10c:	2b06      	cmp	r3, #6
 800c10e:	d901      	bls.n	800c114 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c110:	2306      	movs	r3, #6
 800c112:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c116:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c118:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c11c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c11e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c122:	2200      	movs	r2, #0
 800c124:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c128:	3304      	adds	r3, #4
 800c12a:	4618      	mov	r0, r3
 800c12c:	f7fe fed8 	bl	800aee0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c132:	3318      	adds	r3, #24
 800c134:	4618      	mov	r0, r3
 800c136:	f7fe fed3 	bl	800aee0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c13c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c13e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c142:	f1c3 0207 	rsb	r2, r3, #7
 800c146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c148:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c14c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c14e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c152:	2200      	movs	r2, #0
 800c154:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c158:	2200      	movs	r2, #0
 800c15a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c15e:	683a      	ldr	r2, [r7, #0]
 800c160:	68f9      	ldr	r1, [r7, #12]
 800c162:	69b8      	ldr	r0, [r7, #24]
 800c164:	f7fe ff50 	bl	800b008 <pxPortInitialiseStack>
 800c168:	4602      	mov	r2, r0
 800c16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c16c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c16e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c170:	2b00      	cmp	r3, #0
 800c172:	d002      	beq.n	800c17a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c176:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c178:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c17a:	bf00      	nop
 800c17c:	3720      	adds	r7, #32
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}
	...

0800c184 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b082      	sub	sp, #8
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c18c:	f7ff f86a 	bl	800b264 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c190:	4b2a      	ldr	r3, [pc, #168]	; (800c23c <prvAddNewTaskToReadyList+0xb8>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	3301      	adds	r3, #1
 800c196:	4a29      	ldr	r2, [pc, #164]	; (800c23c <prvAddNewTaskToReadyList+0xb8>)
 800c198:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c19a:	4b29      	ldr	r3, [pc, #164]	; (800c240 <prvAddNewTaskToReadyList+0xbc>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d109      	bne.n	800c1b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c1a2:	4a27      	ldr	r2, [pc, #156]	; (800c240 <prvAddNewTaskToReadyList+0xbc>)
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c1a8:	4b24      	ldr	r3, [pc, #144]	; (800c23c <prvAddNewTaskToReadyList+0xb8>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	2b01      	cmp	r3, #1
 800c1ae:	d110      	bne.n	800c1d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c1b0:	f000 fbb4 	bl	800c91c <prvInitialiseTaskLists>
 800c1b4:	e00d      	b.n	800c1d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c1b6:	4b23      	ldr	r3, [pc, #140]	; (800c244 <prvAddNewTaskToReadyList+0xc0>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d109      	bne.n	800c1d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c1be:	4b20      	ldr	r3, [pc, #128]	; (800c240 <prvAddNewTaskToReadyList+0xbc>)
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1c8:	429a      	cmp	r2, r3
 800c1ca:	d802      	bhi.n	800c1d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c1cc:	4a1c      	ldr	r2, [pc, #112]	; (800c240 <prvAddNewTaskToReadyList+0xbc>)
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c1d2:	4b1d      	ldr	r3, [pc, #116]	; (800c248 <prvAddNewTaskToReadyList+0xc4>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	3301      	adds	r3, #1
 800c1d8:	4a1b      	ldr	r2, [pc, #108]	; (800c248 <prvAddNewTaskToReadyList+0xc4>)
 800c1da:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1e0:	2201      	movs	r2, #1
 800c1e2:	409a      	lsls	r2, r3
 800c1e4:	4b19      	ldr	r3, [pc, #100]	; (800c24c <prvAddNewTaskToReadyList+0xc8>)
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	4313      	orrs	r3, r2
 800c1ea:	4a18      	ldr	r2, [pc, #96]	; (800c24c <prvAddNewTaskToReadyList+0xc8>)
 800c1ec:	6013      	str	r3, [r2, #0]
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1f2:	4613      	mov	r3, r2
 800c1f4:	009b      	lsls	r3, r3, #2
 800c1f6:	4413      	add	r3, r2
 800c1f8:	009b      	lsls	r3, r3, #2
 800c1fa:	4a15      	ldr	r2, [pc, #84]	; (800c250 <prvAddNewTaskToReadyList+0xcc>)
 800c1fc:	441a      	add	r2, r3
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	3304      	adds	r3, #4
 800c202:	4619      	mov	r1, r3
 800c204:	4610      	mov	r0, r2
 800c206:	f7fe fe78 	bl	800aefa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c20a:	f7ff f85b 	bl	800b2c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c20e:	4b0d      	ldr	r3, [pc, #52]	; (800c244 <prvAddNewTaskToReadyList+0xc0>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d00e      	beq.n	800c234 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c216:	4b0a      	ldr	r3, [pc, #40]	; (800c240 <prvAddNewTaskToReadyList+0xbc>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c220:	429a      	cmp	r2, r3
 800c222:	d207      	bcs.n	800c234 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c224:	4b0b      	ldr	r3, [pc, #44]	; (800c254 <prvAddNewTaskToReadyList+0xd0>)
 800c226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c22a:	601a      	str	r2, [r3, #0]
 800c22c:	f3bf 8f4f 	dsb	sy
 800c230:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c234:	bf00      	nop
 800c236:	3708      	adds	r7, #8
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}
 800c23c:	24004024 	.word	0x24004024
 800c240:	24003f24 	.word	0x24003f24
 800c244:	24004030 	.word	0x24004030
 800c248:	24004040 	.word	0x24004040
 800c24c:	2400402c 	.word	0x2400402c
 800c250:	24003f28 	.word	0x24003f28
 800c254:	e000ed04 	.word	0xe000ed04

0800c258 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b08a      	sub	sp, #40	; 0x28
 800c25c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c25e:	2300      	movs	r3, #0
 800c260:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c262:	2300      	movs	r3, #0
 800c264:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c266:	463a      	mov	r2, r7
 800c268:	1d39      	adds	r1, r7, #4
 800c26a:	f107 0308 	add.w	r3, r7, #8
 800c26e:	4618      	mov	r0, r3
 800c270:	f7f4 fa9c 	bl	80007ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c274:	6839      	ldr	r1, [r7, #0]
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	68ba      	ldr	r2, [r7, #8]
 800c27a:	9202      	str	r2, [sp, #8]
 800c27c:	9301      	str	r3, [sp, #4]
 800c27e:	2300      	movs	r3, #0
 800c280:	9300      	str	r3, [sp, #0]
 800c282:	2300      	movs	r3, #0
 800c284:	460a      	mov	r2, r1
 800c286:	491e      	ldr	r1, [pc, #120]	; (800c300 <vTaskStartScheduler+0xa8>)
 800c288:	481e      	ldr	r0, [pc, #120]	; (800c304 <vTaskStartScheduler+0xac>)
 800c28a:	f7ff fe51 	bl	800bf30 <xTaskCreateStatic>
 800c28e:	4603      	mov	r3, r0
 800c290:	4a1d      	ldr	r2, [pc, #116]	; (800c308 <vTaskStartScheduler+0xb0>)
 800c292:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c294:	4b1c      	ldr	r3, [pc, #112]	; (800c308 <vTaskStartScheduler+0xb0>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d002      	beq.n	800c2a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c29c:	2301      	movs	r3, #1
 800c29e:	617b      	str	r3, [r7, #20]
 800c2a0:	e001      	b.n	800c2a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	2b01      	cmp	r3, #1
 800c2aa:	d116      	bne.n	800c2da <vTaskStartScheduler+0x82>
	__asm volatile
 800c2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b0:	f383 8811 	msr	BASEPRI, r3
 800c2b4:	f3bf 8f6f 	isb	sy
 800c2b8:	f3bf 8f4f 	dsb	sy
 800c2bc:	613b      	str	r3, [r7, #16]
}
 800c2be:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c2c0:	4b12      	ldr	r3, [pc, #72]	; (800c30c <vTaskStartScheduler+0xb4>)
 800c2c2:	f04f 32ff 	mov.w	r2, #4294967295
 800c2c6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c2c8:	4b11      	ldr	r3, [pc, #68]	; (800c310 <vTaskStartScheduler+0xb8>)
 800c2ca:	2201      	movs	r2, #1
 800c2cc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c2ce:	4b11      	ldr	r3, [pc, #68]	; (800c314 <vTaskStartScheduler+0xbc>)
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c2d4:	f7fe ff24 	bl	800b120 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c2d8:	e00e      	b.n	800c2f8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c2da:	697b      	ldr	r3, [r7, #20]
 800c2dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2e0:	d10a      	bne.n	800c2f8 <vTaskStartScheduler+0xa0>
	__asm volatile
 800c2e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2e6:	f383 8811 	msr	BASEPRI, r3
 800c2ea:	f3bf 8f6f 	isb	sy
 800c2ee:	f3bf 8f4f 	dsb	sy
 800c2f2:	60fb      	str	r3, [r7, #12]
}
 800c2f4:	bf00      	nop
 800c2f6:	e7fe      	b.n	800c2f6 <vTaskStartScheduler+0x9e>
}
 800c2f8:	bf00      	nop
 800c2fa:	3718      	adds	r7, #24
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}
 800c300:	0800df44 	.word	0x0800df44
 800c304:	0800c8ed 	.word	0x0800c8ed
 800c308:	24004048 	.word	0x24004048
 800c30c:	24004044 	.word	0x24004044
 800c310:	24004030 	.word	0x24004030
 800c314:	24004028 	.word	0x24004028

0800c318 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c318:	b480      	push	{r7}
 800c31a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c31c:	4b04      	ldr	r3, [pc, #16]	; (800c330 <vTaskSuspendAll+0x18>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	3301      	adds	r3, #1
 800c322:	4a03      	ldr	r2, [pc, #12]	; (800c330 <vTaskSuspendAll+0x18>)
 800c324:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c326:	bf00      	nop
 800c328:	46bd      	mov	sp, r7
 800c32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32e:	4770      	bx	lr
 800c330:	2400404c 	.word	0x2400404c

0800c334 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b084      	sub	sp, #16
 800c338:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c33a:	2300      	movs	r3, #0
 800c33c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c33e:	2300      	movs	r3, #0
 800c340:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c342:	4b41      	ldr	r3, [pc, #260]	; (800c448 <xTaskResumeAll+0x114>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d10a      	bne.n	800c360 <xTaskResumeAll+0x2c>
	__asm volatile
 800c34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c34e:	f383 8811 	msr	BASEPRI, r3
 800c352:	f3bf 8f6f 	isb	sy
 800c356:	f3bf 8f4f 	dsb	sy
 800c35a:	603b      	str	r3, [r7, #0]
}
 800c35c:	bf00      	nop
 800c35e:	e7fe      	b.n	800c35e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c360:	f7fe ff80 	bl	800b264 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c364:	4b38      	ldr	r3, [pc, #224]	; (800c448 <xTaskResumeAll+0x114>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	3b01      	subs	r3, #1
 800c36a:	4a37      	ldr	r2, [pc, #220]	; (800c448 <xTaskResumeAll+0x114>)
 800c36c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c36e:	4b36      	ldr	r3, [pc, #216]	; (800c448 <xTaskResumeAll+0x114>)
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d161      	bne.n	800c43a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c376:	4b35      	ldr	r3, [pc, #212]	; (800c44c <xTaskResumeAll+0x118>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d05d      	beq.n	800c43a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c37e:	e02e      	b.n	800c3de <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c380:	4b33      	ldr	r3, [pc, #204]	; (800c450 <xTaskResumeAll+0x11c>)
 800c382:	68db      	ldr	r3, [r3, #12]
 800c384:	68db      	ldr	r3, [r3, #12]
 800c386:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	3318      	adds	r3, #24
 800c38c:	4618      	mov	r0, r3
 800c38e:	f7fe fe11 	bl	800afb4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	3304      	adds	r3, #4
 800c396:	4618      	mov	r0, r3
 800c398:	f7fe fe0c 	bl	800afb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3a0:	2201      	movs	r2, #1
 800c3a2:	409a      	lsls	r2, r3
 800c3a4:	4b2b      	ldr	r3, [pc, #172]	; (800c454 <xTaskResumeAll+0x120>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	4313      	orrs	r3, r2
 800c3aa:	4a2a      	ldr	r2, [pc, #168]	; (800c454 <xTaskResumeAll+0x120>)
 800c3ac:	6013      	str	r3, [r2, #0]
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3b2:	4613      	mov	r3, r2
 800c3b4:	009b      	lsls	r3, r3, #2
 800c3b6:	4413      	add	r3, r2
 800c3b8:	009b      	lsls	r3, r3, #2
 800c3ba:	4a27      	ldr	r2, [pc, #156]	; (800c458 <xTaskResumeAll+0x124>)
 800c3bc:	441a      	add	r2, r3
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	3304      	adds	r3, #4
 800c3c2:	4619      	mov	r1, r3
 800c3c4:	4610      	mov	r0, r2
 800c3c6:	f7fe fd98 	bl	800aefa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3ce:	4b23      	ldr	r3, [pc, #140]	; (800c45c <xTaskResumeAll+0x128>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3d4:	429a      	cmp	r2, r3
 800c3d6:	d302      	bcc.n	800c3de <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c3d8:	4b21      	ldr	r3, [pc, #132]	; (800c460 <xTaskResumeAll+0x12c>)
 800c3da:	2201      	movs	r2, #1
 800c3dc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c3de:	4b1c      	ldr	r3, [pc, #112]	; (800c450 <xTaskResumeAll+0x11c>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d1cc      	bne.n	800c380 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d001      	beq.n	800c3f0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c3ec:	f000 fb34 	bl	800ca58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c3f0:	4b1c      	ldr	r3, [pc, #112]	; (800c464 <xTaskResumeAll+0x130>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d010      	beq.n	800c41e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c3fc:	f000 f858 	bl	800c4b0 <xTaskIncrementTick>
 800c400:	4603      	mov	r3, r0
 800c402:	2b00      	cmp	r3, #0
 800c404:	d002      	beq.n	800c40c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c406:	4b16      	ldr	r3, [pc, #88]	; (800c460 <xTaskResumeAll+0x12c>)
 800c408:	2201      	movs	r2, #1
 800c40a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	3b01      	subs	r3, #1
 800c410:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d1f1      	bne.n	800c3fc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800c418:	4b12      	ldr	r3, [pc, #72]	; (800c464 <xTaskResumeAll+0x130>)
 800c41a:	2200      	movs	r2, #0
 800c41c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c41e:	4b10      	ldr	r3, [pc, #64]	; (800c460 <xTaskResumeAll+0x12c>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d009      	beq.n	800c43a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c426:	2301      	movs	r3, #1
 800c428:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c42a:	4b0f      	ldr	r3, [pc, #60]	; (800c468 <xTaskResumeAll+0x134>)
 800c42c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c430:	601a      	str	r2, [r3, #0]
 800c432:	f3bf 8f4f 	dsb	sy
 800c436:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c43a:	f7fe ff43 	bl	800b2c4 <vPortExitCritical>

	return xAlreadyYielded;
 800c43e:	68bb      	ldr	r3, [r7, #8]
}
 800c440:	4618      	mov	r0, r3
 800c442:	3710      	adds	r7, #16
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}
 800c448:	2400404c 	.word	0x2400404c
 800c44c:	24004024 	.word	0x24004024
 800c450:	24003fe4 	.word	0x24003fe4
 800c454:	2400402c 	.word	0x2400402c
 800c458:	24003f28 	.word	0x24003f28
 800c45c:	24003f24 	.word	0x24003f24
 800c460:	24004038 	.word	0x24004038
 800c464:	24004034 	.word	0x24004034
 800c468:	e000ed04 	.word	0xe000ed04

0800c46c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c46c:	b480      	push	{r7}
 800c46e:	b083      	sub	sp, #12
 800c470:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c472:	4b05      	ldr	r3, [pc, #20]	; (800c488 <xTaskGetTickCount+0x1c>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c478:	687b      	ldr	r3, [r7, #4]
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	370c      	adds	r7, #12
 800c47e:	46bd      	mov	sp, r7
 800c480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c484:	4770      	bx	lr
 800c486:	bf00      	nop
 800c488:	24004028 	.word	0x24004028

0800c48c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b082      	sub	sp, #8
 800c490:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c492:	f7fe ffc9 	bl	800b428 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c496:	2300      	movs	r3, #0
 800c498:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800c49a:	4b04      	ldr	r3, [pc, #16]	; (800c4ac <xTaskGetTickCountFromISR+0x20>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c4a0:	683b      	ldr	r3, [r7, #0]
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3708      	adds	r7, #8
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}
 800c4aa:	bf00      	nop
 800c4ac:	24004028 	.word	0x24004028

0800c4b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b086      	sub	sp, #24
 800c4b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c4ba:	4b4e      	ldr	r3, [pc, #312]	; (800c5f4 <xTaskIncrementTick+0x144>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	f040 808e 	bne.w	800c5e0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c4c4:	4b4c      	ldr	r3, [pc, #304]	; (800c5f8 <xTaskIncrementTick+0x148>)
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	3301      	adds	r3, #1
 800c4ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c4cc:	4a4a      	ldr	r2, [pc, #296]	; (800c5f8 <xTaskIncrementTick+0x148>)
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c4d2:	693b      	ldr	r3, [r7, #16]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d120      	bne.n	800c51a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c4d8:	4b48      	ldr	r3, [pc, #288]	; (800c5fc <xTaskIncrementTick+0x14c>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d00a      	beq.n	800c4f8 <xTaskIncrementTick+0x48>
	__asm volatile
 800c4e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e6:	f383 8811 	msr	BASEPRI, r3
 800c4ea:	f3bf 8f6f 	isb	sy
 800c4ee:	f3bf 8f4f 	dsb	sy
 800c4f2:	603b      	str	r3, [r7, #0]
}
 800c4f4:	bf00      	nop
 800c4f6:	e7fe      	b.n	800c4f6 <xTaskIncrementTick+0x46>
 800c4f8:	4b40      	ldr	r3, [pc, #256]	; (800c5fc <xTaskIncrementTick+0x14c>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	60fb      	str	r3, [r7, #12]
 800c4fe:	4b40      	ldr	r3, [pc, #256]	; (800c600 <xTaskIncrementTick+0x150>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	4a3e      	ldr	r2, [pc, #248]	; (800c5fc <xTaskIncrementTick+0x14c>)
 800c504:	6013      	str	r3, [r2, #0]
 800c506:	4a3e      	ldr	r2, [pc, #248]	; (800c600 <xTaskIncrementTick+0x150>)
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	6013      	str	r3, [r2, #0]
 800c50c:	4b3d      	ldr	r3, [pc, #244]	; (800c604 <xTaskIncrementTick+0x154>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	3301      	adds	r3, #1
 800c512:	4a3c      	ldr	r2, [pc, #240]	; (800c604 <xTaskIncrementTick+0x154>)
 800c514:	6013      	str	r3, [r2, #0]
 800c516:	f000 fa9f 	bl	800ca58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c51a:	4b3b      	ldr	r3, [pc, #236]	; (800c608 <xTaskIncrementTick+0x158>)
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	693a      	ldr	r2, [r7, #16]
 800c520:	429a      	cmp	r2, r3
 800c522:	d348      	bcc.n	800c5b6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c524:	4b35      	ldr	r3, [pc, #212]	; (800c5fc <xTaskIncrementTick+0x14c>)
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d104      	bne.n	800c538 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c52e:	4b36      	ldr	r3, [pc, #216]	; (800c608 <xTaskIncrementTick+0x158>)
 800c530:	f04f 32ff 	mov.w	r2, #4294967295
 800c534:	601a      	str	r2, [r3, #0]
					break;
 800c536:	e03e      	b.n	800c5b6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c538:	4b30      	ldr	r3, [pc, #192]	; (800c5fc <xTaskIncrementTick+0x14c>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	68db      	ldr	r3, [r3, #12]
 800c53e:	68db      	ldr	r3, [r3, #12]
 800c540:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c542:	68bb      	ldr	r3, [r7, #8]
 800c544:	685b      	ldr	r3, [r3, #4]
 800c546:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c548:	693a      	ldr	r2, [r7, #16]
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	429a      	cmp	r2, r3
 800c54e:	d203      	bcs.n	800c558 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c550:	4a2d      	ldr	r2, [pc, #180]	; (800c608 <xTaskIncrementTick+0x158>)
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c556:	e02e      	b.n	800c5b6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	3304      	adds	r3, #4
 800c55c:	4618      	mov	r0, r3
 800c55e:	f7fe fd29 	bl	800afb4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c566:	2b00      	cmp	r3, #0
 800c568:	d004      	beq.n	800c574 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c56a:	68bb      	ldr	r3, [r7, #8]
 800c56c:	3318      	adds	r3, #24
 800c56e:	4618      	mov	r0, r3
 800c570:	f7fe fd20 	bl	800afb4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c574:	68bb      	ldr	r3, [r7, #8]
 800c576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c578:	2201      	movs	r2, #1
 800c57a:	409a      	lsls	r2, r3
 800c57c:	4b23      	ldr	r3, [pc, #140]	; (800c60c <xTaskIncrementTick+0x15c>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	4313      	orrs	r3, r2
 800c582:	4a22      	ldr	r2, [pc, #136]	; (800c60c <xTaskIncrementTick+0x15c>)
 800c584:	6013      	str	r3, [r2, #0]
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c58a:	4613      	mov	r3, r2
 800c58c:	009b      	lsls	r3, r3, #2
 800c58e:	4413      	add	r3, r2
 800c590:	009b      	lsls	r3, r3, #2
 800c592:	4a1f      	ldr	r2, [pc, #124]	; (800c610 <xTaskIncrementTick+0x160>)
 800c594:	441a      	add	r2, r3
 800c596:	68bb      	ldr	r3, [r7, #8]
 800c598:	3304      	adds	r3, #4
 800c59a:	4619      	mov	r1, r3
 800c59c:	4610      	mov	r0, r2
 800c59e:	f7fe fcac 	bl	800aefa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5a6:	4b1b      	ldr	r3, [pc, #108]	; (800c614 <xTaskIncrementTick+0x164>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5ac:	429a      	cmp	r2, r3
 800c5ae:	d3b9      	bcc.n	800c524 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c5b0:	2301      	movs	r3, #1
 800c5b2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c5b4:	e7b6      	b.n	800c524 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c5b6:	4b17      	ldr	r3, [pc, #92]	; (800c614 <xTaskIncrementTick+0x164>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5bc:	4914      	ldr	r1, [pc, #80]	; (800c610 <xTaskIncrementTick+0x160>)
 800c5be:	4613      	mov	r3, r2
 800c5c0:	009b      	lsls	r3, r3, #2
 800c5c2:	4413      	add	r3, r2
 800c5c4:	009b      	lsls	r3, r3, #2
 800c5c6:	440b      	add	r3, r1
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	2b01      	cmp	r3, #1
 800c5cc:	d901      	bls.n	800c5d2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800c5ce:	2301      	movs	r3, #1
 800c5d0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c5d2:	4b11      	ldr	r3, [pc, #68]	; (800c618 <xTaskIncrementTick+0x168>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d007      	beq.n	800c5ea <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800c5da:	2301      	movs	r3, #1
 800c5dc:	617b      	str	r3, [r7, #20]
 800c5de:	e004      	b.n	800c5ea <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c5e0:	4b0e      	ldr	r3, [pc, #56]	; (800c61c <xTaskIncrementTick+0x16c>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	3301      	adds	r3, #1
 800c5e6:	4a0d      	ldr	r2, [pc, #52]	; (800c61c <xTaskIncrementTick+0x16c>)
 800c5e8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c5ea:	697b      	ldr	r3, [r7, #20]
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	3718      	adds	r7, #24
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}
 800c5f4:	2400404c 	.word	0x2400404c
 800c5f8:	24004028 	.word	0x24004028
 800c5fc:	24003fdc 	.word	0x24003fdc
 800c600:	24003fe0 	.word	0x24003fe0
 800c604:	2400403c 	.word	0x2400403c
 800c608:	24004044 	.word	0x24004044
 800c60c:	2400402c 	.word	0x2400402c
 800c610:	24003f28 	.word	0x24003f28
 800c614:	24003f24 	.word	0x24003f24
 800c618:	24004038 	.word	0x24004038
 800c61c:	24004034 	.word	0x24004034

0800c620 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c620:	b480      	push	{r7}
 800c622:	b087      	sub	sp, #28
 800c624:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c626:	4b27      	ldr	r3, [pc, #156]	; (800c6c4 <vTaskSwitchContext+0xa4>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d003      	beq.n	800c636 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c62e:	4b26      	ldr	r3, [pc, #152]	; (800c6c8 <vTaskSwitchContext+0xa8>)
 800c630:	2201      	movs	r2, #1
 800c632:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c634:	e03f      	b.n	800c6b6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800c636:	4b24      	ldr	r3, [pc, #144]	; (800c6c8 <vTaskSwitchContext+0xa8>)
 800c638:	2200      	movs	r2, #0
 800c63a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c63c:	4b23      	ldr	r3, [pc, #140]	; (800c6cc <vTaskSwitchContext+0xac>)
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	fab3 f383 	clz	r3, r3
 800c648:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c64a:	7afb      	ldrb	r3, [r7, #11]
 800c64c:	f1c3 031f 	rsb	r3, r3, #31
 800c650:	617b      	str	r3, [r7, #20]
 800c652:	491f      	ldr	r1, [pc, #124]	; (800c6d0 <vTaskSwitchContext+0xb0>)
 800c654:	697a      	ldr	r2, [r7, #20]
 800c656:	4613      	mov	r3, r2
 800c658:	009b      	lsls	r3, r3, #2
 800c65a:	4413      	add	r3, r2
 800c65c:	009b      	lsls	r3, r3, #2
 800c65e:	440b      	add	r3, r1
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d10a      	bne.n	800c67c <vTaskSwitchContext+0x5c>
	__asm volatile
 800c666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c66a:	f383 8811 	msr	BASEPRI, r3
 800c66e:	f3bf 8f6f 	isb	sy
 800c672:	f3bf 8f4f 	dsb	sy
 800c676:	607b      	str	r3, [r7, #4]
}
 800c678:	bf00      	nop
 800c67a:	e7fe      	b.n	800c67a <vTaskSwitchContext+0x5a>
 800c67c:	697a      	ldr	r2, [r7, #20]
 800c67e:	4613      	mov	r3, r2
 800c680:	009b      	lsls	r3, r3, #2
 800c682:	4413      	add	r3, r2
 800c684:	009b      	lsls	r3, r3, #2
 800c686:	4a12      	ldr	r2, [pc, #72]	; (800c6d0 <vTaskSwitchContext+0xb0>)
 800c688:	4413      	add	r3, r2
 800c68a:	613b      	str	r3, [r7, #16]
 800c68c:	693b      	ldr	r3, [r7, #16]
 800c68e:	685b      	ldr	r3, [r3, #4]
 800c690:	685a      	ldr	r2, [r3, #4]
 800c692:	693b      	ldr	r3, [r7, #16]
 800c694:	605a      	str	r2, [r3, #4]
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	685a      	ldr	r2, [r3, #4]
 800c69a:	693b      	ldr	r3, [r7, #16]
 800c69c:	3308      	adds	r3, #8
 800c69e:	429a      	cmp	r2, r3
 800c6a0:	d104      	bne.n	800c6ac <vTaskSwitchContext+0x8c>
 800c6a2:	693b      	ldr	r3, [r7, #16]
 800c6a4:	685b      	ldr	r3, [r3, #4]
 800c6a6:	685a      	ldr	r2, [r3, #4]
 800c6a8:	693b      	ldr	r3, [r7, #16]
 800c6aa:	605a      	str	r2, [r3, #4]
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	685b      	ldr	r3, [r3, #4]
 800c6b0:	68db      	ldr	r3, [r3, #12]
 800c6b2:	4a08      	ldr	r2, [pc, #32]	; (800c6d4 <vTaskSwitchContext+0xb4>)
 800c6b4:	6013      	str	r3, [r2, #0]
}
 800c6b6:	bf00      	nop
 800c6b8:	371c      	adds	r7, #28
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c0:	4770      	bx	lr
 800c6c2:	bf00      	nop
 800c6c4:	2400404c 	.word	0x2400404c
 800c6c8:	24004038 	.word	0x24004038
 800c6cc:	2400402c 	.word	0x2400402c
 800c6d0:	24003f28 	.word	0x24003f28
 800c6d4:	24003f24 	.word	0x24003f24

0800c6d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b084      	sub	sp, #16
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
 800c6e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d10a      	bne.n	800c6fe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ec:	f383 8811 	msr	BASEPRI, r3
 800c6f0:	f3bf 8f6f 	isb	sy
 800c6f4:	f3bf 8f4f 	dsb	sy
 800c6f8:	60fb      	str	r3, [r7, #12]
}
 800c6fa:	bf00      	nop
 800c6fc:	e7fe      	b.n	800c6fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c6fe:	4b07      	ldr	r3, [pc, #28]	; (800c71c <vTaskPlaceOnEventList+0x44>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	3318      	adds	r3, #24
 800c704:	4619      	mov	r1, r3
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	f7fe fc1b 	bl	800af42 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c70c:	2101      	movs	r1, #1
 800c70e:	6838      	ldr	r0, [r7, #0]
 800c710:	f000 fa66 	bl	800cbe0 <prvAddCurrentTaskToDelayedList>
}
 800c714:	bf00      	nop
 800c716:	3710      	adds	r7, #16
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd80      	pop	{r7, pc}
 800c71c:	24003f24 	.word	0x24003f24

0800c720 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b086      	sub	sp, #24
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	68db      	ldr	r3, [r3, #12]
 800c72c:	68db      	ldr	r3, [r3, #12]
 800c72e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c730:	693b      	ldr	r3, [r7, #16]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d10a      	bne.n	800c74c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c73a:	f383 8811 	msr	BASEPRI, r3
 800c73e:	f3bf 8f6f 	isb	sy
 800c742:	f3bf 8f4f 	dsb	sy
 800c746:	60fb      	str	r3, [r7, #12]
}
 800c748:	bf00      	nop
 800c74a:	e7fe      	b.n	800c74a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c74c:	693b      	ldr	r3, [r7, #16]
 800c74e:	3318      	adds	r3, #24
 800c750:	4618      	mov	r0, r3
 800c752:	f7fe fc2f 	bl	800afb4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c756:	4b1d      	ldr	r3, [pc, #116]	; (800c7cc <xTaskRemoveFromEventList+0xac>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d11c      	bne.n	800c798 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c75e:	693b      	ldr	r3, [r7, #16]
 800c760:	3304      	adds	r3, #4
 800c762:	4618      	mov	r0, r3
 800c764:	f7fe fc26 	bl	800afb4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c768:	693b      	ldr	r3, [r7, #16]
 800c76a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c76c:	2201      	movs	r2, #1
 800c76e:	409a      	lsls	r2, r3
 800c770:	4b17      	ldr	r3, [pc, #92]	; (800c7d0 <xTaskRemoveFromEventList+0xb0>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	4313      	orrs	r3, r2
 800c776:	4a16      	ldr	r2, [pc, #88]	; (800c7d0 <xTaskRemoveFromEventList+0xb0>)
 800c778:	6013      	str	r3, [r2, #0]
 800c77a:	693b      	ldr	r3, [r7, #16]
 800c77c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c77e:	4613      	mov	r3, r2
 800c780:	009b      	lsls	r3, r3, #2
 800c782:	4413      	add	r3, r2
 800c784:	009b      	lsls	r3, r3, #2
 800c786:	4a13      	ldr	r2, [pc, #76]	; (800c7d4 <xTaskRemoveFromEventList+0xb4>)
 800c788:	441a      	add	r2, r3
 800c78a:	693b      	ldr	r3, [r7, #16]
 800c78c:	3304      	adds	r3, #4
 800c78e:	4619      	mov	r1, r3
 800c790:	4610      	mov	r0, r2
 800c792:	f7fe fbb2 	bl	800aefa <vListInsertEnd>
 800c796:	e005      	b.n	800c7a4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c798:	693b      	ldr	r3, [r7, #16]
 800c79a:	3318      	adds	r3, #24
 800c79c:	4619      	mov	r1, r3
 800c79e:	480e      	ldr	r0, [pc, #56]	; (800c7d8 <xTaskRemoveFromEventList+0xb8>)
 800c7a0:	f7fe fbab 	bl	800aefa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c7a4:	693b      	ldr	r3, [r7, #16]
 800c7a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7a8:	4b0c      	ldr	r3, [pc, #48]	; (800c7dc <xTaskRemoveFromEventList+0xbc>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7ae:	429a      	cmp	r2, r3
 800c7b0:	d905      	bls.n	800c7be <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c7b2:	2301      	movs	r3, #1
 800c7b4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c7b6:	4b0a      	ldr	r3, [pc, #40]	; (800c7e0 <xTaskRemoveFromEventList+0xc0>)
 800c7b8:	2201      	movs	r2, #1
 800c7ba:	601a      	str	r2, [r3, #0]
 800c7bc:	e001      	b.n	800c7c2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800c7be:	2300      	movs	r3, #0
 800c7c0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c7c2:	697b      	ldr	r3, [r7, #20]
}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	3718      	adds	r7, #24
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}
 800c7cc:	2400404c 	.word	0x2400404c
 800c7d0:	2400402c 	.word	0x2400402c
 800c7d4:	24003f28 	.word	0x24003f28
 800c7d8:	24003fe4 	.word	0x24003fe4
 800c7dc:	24003f24 	.word	0x24003f24
 800c7e0:	24004038 	.word	0x24004038

0800c7e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c7e4:	b480      	push	{r7}
 800c7e6:	b083      	sub	sp, #12
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c7ec:	4b06      	ldr	r3, [pc, #24]	; (800c808 <vTaskInternalSetTimeOutState+0x24>)
 800c7ee:	681a      	ldr	r2, [r3, #0]
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c7f4:	4b05      	ldr	r3, [pc, #20]	; (800c80c <vTaskInternalSetTimeOutState+0x28>)
 800c7f6:	681a      	ldr	r2, [r3, #0]
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	605a      	str	r2, [r3, #4]
}
 800c7fc:	bf00      	nop
 800c7fe:	370c      	adds	r7, #12
 800c800:	46bd      	mov	sp, r7
 800c802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c806:	4770      	bx	lr
 800c808:	2400403c 	.word	0x2400403c
 800c80c:	24004028 	.word	0x24004028

0800c810 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b088      	sub	sp, #32
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
 800c818:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d10a      	bne.n	800c836 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c824:	f383 8811 	msr	BASEPRI, r3
 800c828:	f3bf 8f6f 	isb	sy
 800c82c:	f3bf 8f4f 	dsb	sy
 800c830:	613b      	str	r3, [r7, #16]
}
 800c832:	bf00      	nop
 800c834:	e7fe      	b.n	800c834 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d10a      	bne.n	800c852 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c840:	f383 8811 	msr	BASEPRI, r3
 800c844:	f3bf 8f6f 	isb	sy
 800c848:	f3bf 8f4f 	dsb	sy
 800c84c:	60fb      	str	r3, [r7, #12]
}
 800c84e:	bf00      	nop
 800c850:	e7fe      	b.n	800c850 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c852:	f7fe fd07 	bl	800b264 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c856:	4b1d      	ldr	r3, [pc, #116]	; (800c8cc <xTaskCheckForTimeOut+0xbc>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	685b      	ldr	r3, [r3, #4]
 800c860:	69ba      	ldr	r2, [r7, #24]
 800c862:	1ad3      	subs	r3, r2, r3
 800c864:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c86e:	d102      	bne.n	800c876 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c870:	2300      	movs	r3, #0
 800c872:	61fb      	str	r3, [r7, #28]
 800c874:	e023      	b.n	800c8be <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681a      	ldr	r2, [r3, #0]
 800c87a:	4b15      	ldr	r3, [pc, #84]	; (800c8d0 <xTaskCheckForTimeOut+0xc0>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	429a      	cmp	r2, r3
 800c880:	d007      	beq.n	800c892 <xTaskCheckForTimeOut+0x82>
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	685b      	ldr	r3, [r3, #4]
 800c886:	69ba      	ldr	r2, [r7, #24]
 800c888:	429a      	cmp	r2, r3
 800c88a:	d302      	bcc.n	800c892 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c88c:	2301      	movs	r3, #1
 800c88e:	61fb      	str	r3, [r7, #28]
 800c890:	e015      	b.n	800c8be <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	697a      	ldr	r2, [r7, #20]
 800c898:	429a      	cmp	r2, r3
 800c89a:	d20b      	bcs.n	800c8b4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	681a      	ldr	r2, [r3, #0]
 800c8a0:	697b      	ldr	r3, [r7, #20]
 800c8a2:	1ad2      	subs	r2, r2, r3
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c8a8:	6878      	ldr	r0, [r7, #4]
 800c8aa:	f7ff ff9b 	bl	800c7e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	61fb      	str	r3, [r7, #28]
 800c8b2:	e004      	b.n	800c8be <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c8be:	f7fe fd01 	bl	800b2c4 <vPortExitCritical>

	return xReturn;
 800c8c2:	69fb      	ldr	r3, [r7, #28]
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	3720      	adds	r7, #32
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}
 800c8cc:	24004028 	.word	0x24004028
 800c8d0:	2400403c 	.word	0x2400403c

0800c8d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c8d4:	b480      	push	{r7}
 800c8d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c8d8:	4b03      	ldr	r3, [pc, #12]	; (800c8e8 <vTaskMissedYield+0x14>)
 800c8da:	2201      	movs	r2, #1
 800c8dc:	601a      	str	r2, [r3, #0]
}
 800c8de:	bf00      	nop
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e6:	4770      	bx	lr
 800c8e8:	24004038 	.word	0x24004038

0800c8ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b082      	sub	sp, #8
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c8f4:	f000 f852 	bl	800c99c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c8f8:	4b06      	ldr	r3, [pc, #24]	; (800c914 <prvIdleTask+0x28>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	2b01      	cmp	r3, #1
 800c8fe:	d9f9      	bls.n	800c8f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c900:	4b05      	ldr	r3, [pc, #20]	; (800c918 <prvIdleTask+0x2c>)
 800c902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c906:	601a      	str	r2, [r3, #0]
 800c908:	f3bf 8f4f 	dsb	sy
 800c90c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c910:	e7f0      	b.n	800c8f4 <prvIdleTask+0x8>
 800c912:	bf00      	nop
 800c914:	24003f28 	.word	0x24003f28
 800c918:	e000ed04 	.word	0xe000ed04

0800c91c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b082      	sub	sp, #8
 800c920:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c922:	2300      	movs	r3, #0
 800c924:	607b      	str	r3, [r7, #4]
 800c926:	e00c      	b.n	800c942 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c928:	687a      	ldr	r2, [r7, #4]
 800c92a:	4613      	mov	r3, r2
 800c92c:	009b      	lsls	r3, r3, #2
 800c92e:	4413      	add	r3, r2
 800c930:	009b      	lsls	r3, r3, #2
 800c932:	4a12      	ldr	r2, [pc, #72]	; (800c97c <prvInitialiseTaskLists+0x60>)
 800c934:	4413      	add	r3, r2
 800c936:	4618      	mov	r0, r3
 800c938:	f7fe fab2 	bl	800aea0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	3301      	adds	r3, #1
 800c940:	607b      	str	r3, [r7, #4]
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	2b06      	cmp	r3, #6
 800c946:	d9ef      	bls.n	800c928 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c948:	480d      	ldr	r0, [pc, #52]	; (800c980 <prvInitialiseTaskLists+0x64>)
 800c94a:	f7fe faa9 	bl	800aea0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c94e:	480d      	ldr	r0, [pc, #52]	; (800c984 <prvInitialiseTaskLists+0x68>)
 800c950:	f7fe faa6 	bl	800aea0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c954:	480c      	ldr	r0, [pc, #48]	; (800c988 <prvInitialiseTaskLists+0x6c>)
 800c956:	f7fe faa3 	bl	800aea0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c95a:	480c      	ldr	r0, [pc, #48]	; (800c98c <prvInitialiseTaskLists+0x70>)
 800c95c:	f7fe faa0 	bl	800aea0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c960:	480b      	ldr	r0, [pc, #44]	; (800c990 <prvInitialiseTaskLists+0x74>)
 800c962:	f7fe fa9d 	bl	800aea0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c966:	4b0b      	ldr	r3, [pc, #44]	; (800c994 <prvInitialiseTaskLists+0x78>)
 800c968:	4a05      	ldr	r2, [pc, #20]	; (800c980 <prvInitialiseTaskLists+0x64>)
 800c96a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c96c:	4b0a      	ldr	r3, [pc, #40]	; (800c998 <prvInitialiseTaskLists+0x7c>)
 800c96e:	4a05      	ldr	r2, [pc, #20]	; (800c984 <prvInitialiseTaskLists+0x68>)
 800c970:	601a      	str	r2, [r3, #0]
}
 800c972:	bf00      	nop
 800c974:	3708      	adds	r7, #8
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}
 800c97a:	bf00      	nop
 800c97c:	24003f28 	.word	0x24003f28
 800c980:	24003fb4 	.word	0x24003fb4
 800c984:	24003fc8 	.word	0x24003fc8
 800c988:	24003fe4 	.word	0x24003fe4
 800c98c:	24003ff8 	.word	0x24003ff8
 800c990:	24004010 	.word	0x24004010
 800c994:	24003fdc 	.word	0x24003fdc
 800c998:	24003fe0 	.word	0x24003fe0

0800c99c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b082      	sub	sp, #8
 800c9a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c9a2:	e019      	b.n	800c9d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c9a4:	f7fe fc5e 	bl	800b264 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9a8:	4b10      	ldr	r3, [pc, #64]	; (800c9ec <prvCheckTasksWaitingTermination+0x50>)
 800c9aa:	68db      	ldr	r3, [r3, #12]
 800c9ac:	68db      	ldr	r3, [r3, #12]
 800c9ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	3304      	adds	r3, #4
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	f7fe fafd 	bl	800afb4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c9ba:	4b0d      	ldr	r3, [pc, #52]	; (800c9f0 <prvCheckTasksWaitingTermination+0x54>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	3b01      	subs	r3, #1
 800c9c0:	4a0b      	ldr	r2, [pc, #44]	; (800c9f0 <prvCheckTasksWaitingTermination+0x54>)
 800c9c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c9c4:	4b0b      	ldr	r3, [pc, #44]	; (800c9f4 <prvCheckTasksWaitingTermination+0x58>)
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	3b01      	subs	r3, #1
 800c9ca:	4a0a      	ldr	r2, [pc, #40]	; (800c9f4 <prvCheckTasksWaitingTermination+0x58>)
 800c9cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c9ce:	f7fe fc79 	bl	800b2c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f000 f810 	bl	800c9f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c9d8:	4b06      	ldr	r3, [pc, #24]	; (800c9f4 <prvCheckTasksWaitingTermination+0x58>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d1e1      	bne.n	800c9a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c9e0:	bf00      	nop
 800c9e2:	bf00      	nop
 800c9e4:	3708      	adds	r7, #8
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bd80      	pop	{r7, pc}
 800c9ea:	bf00      	nop
 800c9ec:	24003ff8 	.word	0x24003ff8
 800c9f0:	24004024 	.word	0x24004024
 800c9f4:	2400400c 	.word	0x2400400c

0800c9f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b084      	sub	sp, #16
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d108      	bne.n	800ca1c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f7fe f928 	bl	800ac64 <vPortFree>
				vPortFree( pxTCB );
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	f7fe f925 	bl	800ac64 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ca1a:	e018      	b.n	800ca4e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ca22:	2b01      	cmp	r3, #1
 800ca24:	d103      	bne.n	800ca2e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	f7fe f91c 	bl	800ac64 <vPortFree>
	}
 800ca2c:	e00f      	b.n	800ca4e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ca34:	2b02      	cmp	r3, #2
 800ca36:	d00a      	beq.n	800ca4e <prvDeleteTCB+0x56>
	__asm volatile
 800ca38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca3c:	f383 8811 	msr	BASEPRI, r3
 800ca40:	f3bf 8f6f 	isb	sy
 800ca44:	f3bf 8f4f 	dsb	sy
 800ca48:	60fb      	str	r3, [r7, #12]
}
 800ca4a:	bf00      	nop
 800ca4c:	e7fe      	b.n	800ca4c <prvDeleteTCB+0x54>
	}
 800ca4e:	bf00      	nop
 800ca50:	3710      	adds	r7, #16
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}
	...

0800ca58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b083      	sub	sp, #12
 800ca5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ca5e:	4b0c      	ldr	r3, [pc, #48]	; (800ca90 <prvResetNextTaskUnblockTime+0x38>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d104      	bne.n	800ca72 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ca68:	4b0a      	ldr	r3, [pc, #40]	; (800ca94 <prvResetNextTaskUnblockTime+0x3c>)
 800ca6a:	f04f 32ff 	mov.w	r2, #4294967295
 800ca6e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ca70:	e008      	b.n	800ca84 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca72:	4b07      	ldr	r3, [pc, #28]	; (800ca90 <prvResetNextTaskUnblockTime+0x38>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	68db      	ldr	r3, [r3, #12]
 800ca78:	68db      	ldr	r3, [r3, #12]
 800ca7a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	685b      	ldr	r3, [r3, #4]
 800ca80:	4a04      	ldr	r2, [pc, #16]	; (800ca94 <prvResetNextTaskUnblockTime+0x3c>)
 800ca82:	6013      	str	r3, [r2, #0]
}
 800ca84:	bf00      	nop
 800ca86:	370c      	adds	r7, #12
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8e:	4770      	bx	lr
 800ca90:	24003fdc 	.word	0x24003fdc
 800ca94:	24004044 	.word	0x24004044

0800ca98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ca98:	b480      	push	{r7}
 800ca9a:	b083      	sub	sp, #12
 800ca9c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ca9e:	4b0b      	ldr	r3, [pc, #44]	; (800cacc <xTaskGetSchedulerState+0x34>)
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d102      	bne.n	800caac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800caa6:	2301      	movs	r3, #1
 800caa8:	607b      	str	r3, [r7, #4]
 800caaa:	e008      	b.n	800cabe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800caac:	4b08      	ldr	r3, [pc, #32]	; (800cad0 <xTaskGetSchedulerState+0x38>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d102      	bne.n	800caba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cab4:	2302      	movs	r3, #2
 800cab6:	607b      	str	r3, [r7, #4]
 800cab8:	e001      	b.n	800cabe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800caba:	2300      	movs	r3, #0
 800cabc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cabe:	687b      	ldr	r3, [r7, #4]
	}
 800cac0:	4618      	mov	r0, r3
 800cac2:	370c      	adds	r7, #12
 800cac4:	46bd      	mov	sp, r7
 800cac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caca:	4770      	bx	lr
 800cacc:	24004030 	.word	0x24004030
 800cad0:	2400404c 	.word	0x2400404c

0800cad4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b086      	sub	sp, #24
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cae0:	2300      	movs	r3, #0
 800cae2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d06e      	beq.n	800cbc8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800caea:	4b3a      	ldr	r3, [pc, #232]	; (800cbd4 <xTaskPriorityDisinherit+0x100>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	693a      	ldr	r2, [r7, #16]
 800caf0:	429a      	cmp	r2, r3
 800caf2:	d00a      	beq.n	800cb0a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800caf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caf8:	f383 8811 	msr	BASEPRI, r3
 800cafc:	f3bf 8f6f 	isb	sy
 800cb00:	f3bf 8f4f 	dsb	sy
 800cb04:	60fb      	str	r3, [r7, #12]
}
 800cb06:	bf00      	nop
 800cb08:	e7fe      	b.n	800cb08 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cb0a:	693b      	ldr	r3, [r7, #16]
 800cb0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d10a      	bne.n	800cb28 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800cb12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb16:	f383 8811 	msr	BASEPRI, r3
 800cb1a:	f3bf 8f6f 	isb	sy
 800cb1e:	f3bf 8f4f 	dsb	sy
 800cb22:	60bb      	str	r3, [r7, #8]
}
 800cb24:	bf00      	nop
 800cb26:	e7fe      	b.n	800cb26 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800cb28:	693b      	ldr	r3, [r7, #16]
 800cb2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb2c:	1e5a      	subs	r2, r3, #1
 800cb2e:	693b      	ldr	r3, [r7, #16]
 800cb30:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cb32:	693b      	ldr	r3, [r7, #16]
 800cb34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb36:	693b      	ldr	r3, [r7, #16]
 800cb38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb3a:	429a      	cmp	r2, r3
 800cb3c:	d044      	beq.n	800cbc8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cb3e:	693b      	ldr	r3, [r7, #16]
 800cb40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d140      	bne.n	800cbc8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cb46:	693b      	ldr	r3, [r7, #16]
 800cb48:	3304      	adds	r3, #4
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f7fe fa32 	bl	800afb4 <uxListRemove>
 800cb50:	4603      	mov	r3, r0
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d115      	bne.n	800cb82 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cb56:	693b      	ldr	r3, [r7, #16]
 800cb58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb5a:	491f      	ldr	r1, [pc, #124]	; (800cbd8 <xTaskPriorityDisinherit+0x104>)
 800cb5c:	4613      	mov	r3, r2
 800cb5e:	009b      	lsls	r3, r3, #2
 800cb60:	4413      	add	r3, r2
 800cb62:	009b      	lsls	r3, r3, #2
 800cb64:	440b      	add	r3, r1
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d10a      	bne.n	800cb82 <xTaskPriorityDisinherit+0xae>
 800cb6c:	693b      	ldr	r3, [r7, #16]
 800cb6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb70:	2201      	movs	r2, #1
 800cb72:	fa02 f303 	lsl.w	r3, r2, r3
 800cb76:	43da      	mvns	r2, r3
 800cb78:	4b18      	ldr	r3, [pc, #96]	; (800cbdc <xTaskPriorityDisinherit+0x108>)
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	4013      	ands	r3, r2
 800cb7e:	4a17      	ldr	r2, [pc, #92]	; (800cbdc <xTaskPriorityDisinherit+0x108>)
 800cb80:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cb82:	693b      	ldr	r3, [r7, #16]
 800cb84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb86:	693b      	ldr	r3, [r7, #16]
 800cb88:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb8a:	693b      	ldr	r3, [r7, #16]
 800cb8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb8e:	f1c3 0207 	rsb	r2, r3, #7
 800cb92:	693b      	ldr	r3, [r7, #16]
 800cb94:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cb96:	693b      	ldr	r3, [r7, #16]
 800cb98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb9a:	2201      	movs	r2, #1
 800cb9c:	409a      	lsls	r2, r3
 800cb9e:	4b0f      	ldr	r3, [pc, #60]	; (800cbdc <xTaskPriorityDisinherit+0x108>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	4313      	orrs	r3, r2
 800cba4:	4a0d      	ldr	r2, [pc, #52]	; (800cbdc <xTaskPriorityDisinherit+0x108>)
 800cba6:	6013      	str	r3, [r2, #0]
 800cba8:	693b      	ldr	r3, [r7, #16]
 800cbaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbac:	4613      	mov	r3, r2
 800cbae:	009b      	lsls	r3, r3, #2
 800cbb0:	4413      	add	r3, r2
 800cbb2:	009b      	lsls	r3, r3, #2
 800cbb4:	4a08      	ldr	r2, [pc, #32]	; (800cbd8 <xTaskPriorityDisinherit+0x104>)
 800cbb6:	441a      	add	r2, r3
 800cbb8:	693b      	ldr	r3, [r7, #16]
 800cbba:	3304      	adds	r3, #4
 800cbbc:	4619      	mov	r1, r3
 800cbbe:	4610      	mov	r0, r2
 800cbc0:	f7fe f99b 	bl	800aefa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cbc8:	697b      	ldr	r3, [r7, #20]
	}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	3718      	adds	r7, #24
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd80      	pop	{r7, pc}
 800cbd2:	bf00      	nop
 800cbd4:	24003f24 	.word	0x24003f24
 800cbd8:	24003f28 	.word	0x24003f28
 800cbdc:	2400402c 	.word	0x2400402c

0800cbe0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b084      	sub	sp, #16
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
 800cbe8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cbea:	4b29      	ldr	r3, [pc, #164]	; (800cc90 <prvAddCurrentTaskToDelayedList+0xb0>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cbf0:	4b28      	ldr	r3, [pc, #160]	; (800cc94 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	3304      	adds	r3, #4
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f7fe f9dc 	bl	800afb4 <uxListRemove>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d10b      	bne.n	800cc1a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800cc02:	4b24      	ldr	r3, [pc, #144]	; (800cc94 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc08:	2201      	movs	r2, #1
 800cc0a:	fa02 f303 	lsl.w	r3, r2, r3
 800cc0e:	43da      	mvns	r2, r3
 800cc10:	4b21      	ldr	r3, [pc, #132]	; (800cc98 <prvAddCurrentTaskToDelayedList+0xb8>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	4013      	ands	r3, r2
 800cc16:	4a20      	ldr	r2, [pc, #128]	; (800cc98 <prvAddCurrentTaskToDelayedList+0xb8>)
 800cc18:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc20:	d10a      	bne.n	800cc38 <prvAddCurrentTaskToDelayedList+0x58>
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d007      	beq.n	800cc38 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cc28:	4b1a      	ldr	r3, [pc, #104]	; (800cc94 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	3304      	adds	r3, #4
 800cc2e:	4619      	mov	r1, r3
 800cc30:	481a      	ldr	r0, [pc, #104]	; (800cc9c <prvAddCurrentTaskToDelayedList+0xbc>)
 800cc32:	f7fe f962 	bl	800aefa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cc36:	e026      	b.n	800cc86 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cc38:	68fa      	ldr	r2, [r7, #12]
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	4413      	add	r3, r2
 800cc3e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cc40:	4b14      	ldr	r3, [pc, #80]	; (800cc94 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	68ba      	ldr	r2, [r7, #8]
 800cc46:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cc48:	68ba      	ldr	r2, [r7, #8]
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	429a      	cmp	r2, r3
 800cc4e:	d209      	bcs.n	800cc64 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cc50:	4b13      	ldr	r3, [pc, #76]	; (800cca0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800cc52:	681a      	ldr	r2, [r3, #0]
 800cc54:	4b0f      	ldr	r3, [pc, #60]	; (800cc94 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	3304      	adds	r3, #4
 800cc5a:	4619      	mov	r1, r3
 800cc5c:	4610      	mov	r0, r2
 800cc5e:	f7fe f970 	bl	800af42 <vListInsert>
}
 800cc62:	e010      	b.n	800cc86 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cc64:	4b0f      	ldr	r3, [pc, #60]	; (800cca4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800cc66:	681a      	ldr	r2, [r3, #0]
 800cc68:	4b0a      	ldr	r3, [pc, #40]	; (800cc94 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	3304      	adds	r3, #4
 800cc6e:	4619      	mov	r1, r3
 800cc70:	4610      	mov	r0, r2
 800cc72:	f7fe f966 	bl	800af42 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cc76:	4b0c      	ldr	r3, [pc, #48]	; (800cca8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	68ba      	ldr	r2, [r7, #8]
 800cc7c:	429a      	cmp	r2, r3
 800cc7e:	d202      	bcs.n	800cc86 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800cc80:	4a09      	ldr	r2, [pc, #36]	; (800cca8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800cc82:	68bb      	ldr	r3, [r7, #8]
 800cc84:	6013      	str	r3, [r2, #0]
}
 800cc86:	bf00      	nop
 800cc88:	3710      	adds	r7, #16
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}
 800cc8e:	bf00      	nop
 800cc90:	24004028 	.word	0x24004028
 800cc94:	24003f24 	.word	0x24003f24
 800cc98:	2400402c 	.word	0x2400402c
 800cc9c:	24004010 	.word	0x24004010
 800cca0:	24003fe0 	.word	0x24003fe0
 800cca4:	24003fdc 	.word	0x24003fdc
 800cca8:	24004044 	.word	0x24004044

0800ccac <mbedtls_ctr_drbg_init>:

/*
 * CTR_DRBG context initialization
 */
void mbedtls_ctr_drbg_init( mbedtls_ctr_drbg_context *ctx )
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b082      	sub	sp, #8
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_ctr_drbg_context ) );
 800ccb4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800ccb8:	2100      	movs	r1, #0
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	f000 f890 	bl	800cde0 <memset>

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &ctx->mutex );
#endif
}
 800ccc0:	bf00      	nop
 800ccc2:	3708      	adds	r7, #8
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}

0800ccc8 <mbedtls_entropy_init>:
#endif

#define ENTROPY_MAX_LOOP    256     /**< Maximum amount to loop before error */

void mbedtls_entropy_init( mbedtls_entropy_context *ctx )
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b082      	sub	sp, #8
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
    ctx->source_count = 0;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    memset( ctx->source, 0, sizeof( ctx->source ) );
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	33e4      	adds	r3, #228	; 0xe4
 800ccdc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800cce0:	2100      	movs	r1, #0
 800cce2:	4618      	mov	r0, r3
 800cce4:	f000 f87c 	bl	800cde0 <memset>

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &ctx->mutex );
#endif

    ctx->accumulator_started = 0;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2200      	movs	r2, #0
 800ccec:	601a      	str	r2, [r3, #0]
#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
    mbedtls_sha512_init( &ctx->accumulator );
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	3308      	adds	r3, #8
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f000 f804 	bl	800cd00 <mbedtls_sha512_init>
                                MBEDTLS_ENTROPY_BLOCK_SIZE,
                                MBEDTLS_ENTROPY_SOURCE_STRONG );
    ctx->initial_entropy_run = 0;
#endif
#endif /* MBEDTLS_NO_DEFAULT_ENTROPY_SOURCES */
}
 800ccf8:	bf00      	nop
 800ccfa:	3708      	adds	r7, #8
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bd80      	pop	{r7, pc}

0800cd00 <mbedtls_sha512_init>:
    (b)[(i) + 7] = (unsigned char) ( (n)       );       \
}
#endif /* PUT_UINT64_BE */

void mbedtls_sha512_init( mbedtls_sha512_context *ctx )
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b082      	sub	sp, #8
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
    SHA512_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha512_context ) );
 800cd08:	22d8      	movs	r2, #216	; 0xd8
 800cd0a:	2100      	movs	r1, #0
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	f000 f867 	bl	800cde0 <memset>
}
 800cd12:	bf00      	nop
 800cd14:	3708      	adds	r7, #8
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}

0800cd1a <mbedtls_ssl_init>:

/*
 * Initialize an SSL context
 */
void mbedtls_ssl_init( mbedtls_ssl_context *ssl )
{
 800cd1a:	b580      	push	{r7, lr}
 800cd1c:	b082      	sub	sp, #8
 800cd1e:	af00      	add	r7, sp, #0
 800cd20:	6078      	str	r0, [r7, #4]
    memset( ssl, 0, sizeof( mbedtls_ssl_context ) );
 800cd22:	f44f 728c 	mov.w	r2, #280	; 0x118
 800cd26:	2100      	movs	r1, #0
 800cd28:	6878      	ldr	r0, [r7, #4]
 800cd2a:	f000 f859 	bl	800cde0 <memset>
}
 800cd2e:	bf00      	nop
 800cd30:	3708      	adds	r7, #8
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd80      	pop	{r7, pc}

0800cd36 <mbedtls_ssl_config_init>:

/*
 * Initialze mbedtls_ssl_config
 */
void mbedtls_ssl_config_init( mbedtls_ssl_config *conf )
{
 800cd36:	b580      	push	{r7, lr}
 800cd38:	b082      	sub	sp, #8
 800cd3a:	af00      	add	r7, sp, #0
 800cd3c:	6078      	str	r0, [r7, #4]
    memset( conf, 0, sizeof( mbedtls_ssl_config ) );
 800cd3e:	22d0      	movs	r2, #208	; 0xd0
 800cd40:	2100      	movs	r1, #0
 800cd42:	6878      	ldr	r0, [r7, #4]
 800cd44:	f000 f84c 	bl	800cde0 <memset>
}
 800cd48:	bf00      	nop
 800cd4a:	3708      	adds	r7, #8
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	bd80      	pop	{r7, pc}

0800cd50 <mbedtls_x509_crt_init>:

/*
 * Initialize a certificate chain
 */
void mbedtls_x509_crt_init( mbedtls_x509_crt *crt )
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b082      	sub	sp, #8
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
    memset( crt, 0, sizeof(mbedtls_x509_crt) );
 800cd58:	f44f 729a 	mov.w	r2, #308	; 0x134
 800cd5c:	2100      	movs	r1, #0
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f000 f83e 	bl	800cde0 <memset>
}
 800cd64:	bf00      	nop
 800cd66:	3708      	adds	r7, #8
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	bd80      	pop	{r7, pc}

0800cd6c <__libc_init_array>:
 800cd6c:	b570      	push	{r4, r5, r6, lr}
 800cd6e:	4d0d      	ldr	r5, [pc, #52]	; (800cda4 <__libc_init_array+0x38>)
 800cd70:	4c0d      	ldr	r4, [pc, #52]	; (800cda8 <__libc_init_array+0x3c>)
 800cd72:	1b64      	subs	r4, r4, r5
 800cd74:	10a4      	asrs	r4, r4, #2
 800cd76:	2600      	movs	r6, #0
 800cd78:	42a6      	cmp	r6, r4
 800cd7a:	d109      	bne.n	800cd90 <__libc_init_array+0x24>
 800cd7c:	4d0b      	ldr	r5, [pc, #44]	; (800cdac <__libc_init_array+0x40>)
 800cd7e:	4c0c      	ldr	r4, [pc, #48]	; (800cdb0 <__libc_init_array+0x44>)
 800cd80:	f001 f880 	bl	800de84 <_init>
 800cd84:	1b64      	subs	r4, r4, r5
 800cd86:	10a4      	asrs	r4, r4, #2
 800cd88:	2600      	movs	r6, #0
 800cd8a:	42a6      	cmp	r6, r4
 800cd8c:	d105      	bne.n	800cd9a <__libc_init_array+0x2e>
 800cd8e:	bd70      	pop	{r4, r5, r6, pc}
 800cd90:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd94:	4798      	blx	r3
 800cd96:	3601      	adds	r6, #1
 800cd98:	e7ee      	b.n	800cd78 <__libc_init_array+0xc>
 800cd9a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd9e:	4798      	blx	r3
 800cda0:	3601      	adds	r6, #1
 800cda2:	e7f2      	b.n	800cd8a <__libc_init_array+0x1e>
 800cda4:	0800e1f0 	.word	0x0800e1f0
 800cda8:	0800e1f0 	.word	0x0800e1f0
 800cdac:	0800e1f0 	.word	0x0800e1f0
 800cdb0:	0800e1f4 	.word	0x0800e1f4

0800cdb4 <malloc>:
 800cdb4:	4b02      	ldr	r3, [pc, #8]	; (800cdc0 <malloc+0xc>)
 800cdb6:	4601      	mov	r1, r0
 800cdb8:	6818      	ldr	r0, [r3, #0]
 800cdba:	f000 b869 	b.w	800ce90 <_malloc_r>
 800cdbe:	bf00      	nop
 800cdc0:	24000014 	.word	0x24000014

0800cdc4 <memcpy>:
 800cdc4:	440a      	add	r2, r1
 800cdc6:	4291      	cmp	r1, r2
 800cdc8:	f100 33ff 	add.w	r3, r0, #4294967295
 800cdcc:	d100      	bne.n	800cdd0 <memcpy+0xc>
 800cdce:	4770      	bx	lr
 800cdd0:	b510      	push	{r4, lr}
 800cdd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cdd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cdda:	4291      	cmp	r1, r2
 800cddc:	d1f9      	bne.n	800cdd2 <memcpy+0xe>
 800cdde:	bd10      	pop	{r4, pc}

0800cde0 <memset>:
 800cde0:	4402      	add	r2, r0
 800cde2:	4603      	mov	r3, r0
 800cde4:	4293      	cmp	r3, r2
 800cde6:	d100      	bne.n	800cdea <memset+0xa>
 800cde8:	4770      	bx	lr
 800cdea:	f803 1b01 	strb.w	r1, [r3], #1
 800cdee:	e7f9      	b.n	800cde4 <memset+0x4>

0800cdf0 <_free_r>:
 800cdf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cdf2:	2900      	cmp	r1, #0
 800cdf4:	d048      	beq.n	800ce88 <_free_r+0x98>
 800cdf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cdfa:	9001      	str	r0, [sp, #4]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	f1a1 0404 	sub.w	r4, r1, #4
 800ce02:	bfb8      	it	lt
 800ce04:	18e4      	addlt	r4, r4, r3
 800ce06:	f000 fc4b 	bl	800d6a0 <__malloc_lock>
 800ce0a:	4a20      	ldr	r2, [pc, #128]	; (800ce8c <_free_r+0x9c>)
 800ce0c:	9801      	ldr	r0, [sp, #4]
 800ce0e:	6813      	ldr	r3, [r2, #0]
 800ce10:	4615      	mov	r5, r2
 800ce12:	b933      	cbnz	r3, 800ce22 <_free_r+0x32>
 800ce14:	6063      	str	r3, [r4, #4]
 800ce16:	6014      	str	r4, [r2, #0]
 800ce18:	b003      	add	sp, #12
 800ce1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ce1e:	f000 bc45 	b.w	800d6ac <__malloc_unlock>
 800ce22:	42a3      	cmp	r3, r4
 800ce24:	d90b      	bls.n	800ce3e <_free_r+0x4e>
 800ce26:	6821      	ldr	r1, [r4, #0]
 800ce28:	1862      	adds	r2, r4, r1
 800ce2a:	4293      	cmp	r3, r2
 800ce2c:	bf04      	itt	eq
 800ce2e:	681a      	ldreq	r2, [r3, #0]
 800ce30:	685b      	ldreq	r3, [r3, #4]
 800ce32:	6063      	str	r3, [r4, #4]
 800ce34:	bf04      	itt	eq
 800ce36:	1852      	addeq	r2, r2, r1
 800ce38:	6022      	streq	r2, [r4, #0]
 800ce3a:	602c      	str	r4, [r5, #0]
 800ce3c:	e7ec      	b.n	800ce18 <_free_r+0x28>
 800ce3e:	461a      	mov	r2, r3
 800ce40:	685b      	ldr	r3, [r3, #4]
 800ce42:	b10b      	cbz	r3, 800ce48 <_free_r+0x58>
 800ce44:	42a3      	cmp	r3, r4
 800ce46:	d9fa      	bls.n	800ce3e <_free_r+0x4e>
 800ce48:	6811      	ldr	r1, [r2, #0]
 800ce4a:	1855      	adds	r5, r2, r1
 800ce4c:	42a5      	cmp	r5, r4
 800ce4e:	d10b      	bne.n	800ce68 <_free_r+0x78>
 800ce50:	6824      	ldr	r4, [r4, #0]
 800ce52:	4421      	add	r1, r4
 800ce54:	1854      	adds	r4, r2, r1
 800ce56:	42a3      	cmp	r3, r4
 800ce58:	6011      	str	r1, [r2, #0]
 800ce5a:	d1dd      	bne.n	800ce18 <_free_r+0x28>
 800ce5c:	681c      	ldr	r4, [r3, #0]
 800ce5e:	685b      	ldr	r3, [r3, #4]
 800ce60:	6053      	str	r3, [r2, #4]
 800ce62:	4421      	add	r1, r4
 800ce64:	6011      	str	r1, [r2, #0]
 800ce66:	e7d7      	b.n	800ce18 <_free_r+0x28>
 800ce68:	d902      	bls.n	800ce70 <_free_r+0x80>
 800ce6a:	230c      	movs	r3, #12
 800ce6c:	6003      	str	r3, [r0, #0]
 800ce6e:	e7d3      	b.n	800ce18 <_free_r+0x28>
 800ce70:	6825      	ldr	r5, [r4, #0]
 800ce72:	1961      	adds	r1, r4, r5
 800ce74:	428b      	cmp	r3, r1
 800ce76:	bf04      	itt	eq
 800ce78:	6819      	ldreq	r1, [r3, #0]
 800ce7a:	685b      	ldreq	r3, [r3, #4]
 800ce7c:	6063      	str	r3, [r4, #4]
 800ce7e:	bf04      	itt	eq
 800ce80:	1949      	addeq	r1, r1, r5
 800ce82:	6021      	streq	r1, [r4, #0]
 800ce84:	6054      	str	r4, [r2, #4]
 800ce86:	e7c7      	b.n	800ce18 <_free_r+0x28>
 800ce88:	b003      	add	sp, #12
 800ce8a:	bd30      	pop	{r4, r5, pc}
 800ce8c:	24004050 	.word	0x24004050

0800ce90 <_malloc_r>:
 800ce90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce92:	1ccd      	adds	r5, r1, #3
 800ce94:	f025 0503 	bic.w	r5, r5, #3
 800ce98:	3508      	adds	r5, #8
 800ce9a:	2d0c      	cmp	r5, #12
 800ce9c:	bf38      	it	cc
 800ce9e:	250c      	movcc	r5, #12
 800cea0:	2d00      	cmp	r5, #0
 800cea2:	4606      	mov	r6, r0
 800cea4:	db01      	blt.n	800ceaa <_malloc_r+0x1a>
 800cea6:	42a9      	cmp	r1, r5
 800cea8:	d903      	bls.n	800ceb2 <_malloc_r+0x22>
 800ceaa:	230c      	movs	r3, #12
 800ceac:	6033      	str	r3, [r6, #0]
 800ceae:	2000      	movs	r0, #0
 800ceb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ceb2:	f000 fbf5 	bl	800d6a0 <__malloc_lock>
 800ceb6:	4921      	ldr	r1, [pc, #132]	; (800cf3c <_malloc_r+0xac>)
 800ceb8:	680a      	ldr	r2, [r1, #0]
 800ceba:	4614      	mov	r4, r2
 800cebc:	b99c      	cbnz	r4, 800cee6 <_malloc_r+0x56>
 800cebe:	4f20      	ldr	r7, [pc, #128]	; (800cf40 <_malloc_r+0xb0>)
 800cec0:	683b      	ldr	r3, [r7, #0]
 800cec2:	b923      	cbnz	r3, 800cece <_malloc_r+0x3e>
 800cec4:	4621      	mov	r1, r4
 800cec6:	4630      	mov	r0, r6
 800cec8:	f000 f854 	bl	800cf74 <_sbrk_r>
 800cecc:	6038      	str	r0, [r7, #0]
 800cece:	4629      	mov	r1, r5
 800ced0:	4630      	mov	r0, r6
 800ced2:	f000 f84f 	bl	800cf74 <_sbrk_r>
 800ced6:	1c43      	adds	r3, r0, #1
 800ced8:	d123      	bne.n	800cf22 <_malloc_r+0x92>
 800ceda:	230c      	movs	r3, #12
 800cedc:	6033      	str	r3, [r6, #0]
 800cede:	4630      	mov	r0, r6
 800cee0:	f000 fbe4 	bl	800d6ac <__malloc_unlock>
 800cee4:	e7e3      	b.n	800ceae <_malloc_r+0x1e>
 800cee6:	6823      	ldr	r3, [r4, #0]
 800cee8:	1b5b      	subs	r3, r3, r5
 800ceea:	d417      	bmi.n	800cf1c <_malloc_r+0x8c>
 800ceec:	2b0b      	cmp	r3, #11
 800ceee:	d903      	bls.n	800cef8 <_malloc_r+0x68>
 800cef0:	6023      	str	r3, [r4, #0]
 800cef2:	441c      	add	r4, r3
 800cef4:	6025      	str	r5, [r4, #0]
 800cef6:	e004      	b.n	800cf02 <_malloc_r+0x72>
 800cef8:	6863      	ldr	r3, [r4, #4]
 800cefa:	42a2      	cmp	r2, r4
 800cefc:	bf0c      	ite	eq
 800cefe:	600b      	streq	r3, [r1, #0]
 800cf00:	6053      	strne	r3, [r2, #4]
 800cf02:	4630      	mov	r0, r6
 800cf04:	f000 fbd2 	bl	800d6ac <__malloc_unlock>
 800cf08:	f104 000b 	add.w	r0, r4, #11
 800cf0c:	1d23      	adds	r3, r4, #4
 800cf0e:	f020 0007 	bic.w	r0, r0, #7
 800cf12:	1ac2      	subs	r2, r0, r3
 800cf14:	d0cc      	beq.n	800ceb0 <_malloc_r+0x20>
 800cf16:	1a1b      	subs	r3, r3, r0
 800cf18:	50a3      	str	r3, [r4, r2]
 800cf1a:	e7c9      	b.n	800ceb0 <_malloc_r+0x20>
 800cf1c:	4622      	mov	r2, r4
 800cf1e:	6864      	ldr	r4, [r4, #4]
 800cf20:	e7cc      	b.n	800cebc <_malloc_r+0x2c>
 800cf22:	1cc4      	adds	r4, r0, #3
 800cf24:	f024 0403 	bic.w	r4, r4, #3
 800cf28:	42a0      	cmp	r0, r4
 800cf2a:	d0e3      	beq.n	800cef4 <_malloc_r+0x64>
 800cf2c:	1a21      	subs	r1, r4, r0
 800cf2e:	4630      	mov	r0, r6
 800cf30:	f000 f820 	bl	800cf74 <_sbrk_r>
 800cf34:	3001      	adds	r0, #1
 800cf36:	d1dd      	bne.n	800cef4 <_malloc_r+0x64>
 800cf38:	e7cf      	b.n	800ceda <_malloc_r+0x4a>
 800cf3a:	bf00      	nop
 800cf3c:	24004050 	.word	0x24004050
 800cf40:	24004054 	.word	0x24004054

0800cf44 <iprintf>:
 800cf44:	b40f      	push	{r0, r1, r2, r3}
 800cf46:	4b0a      	ldr	r3, [pc, #40]	; (800cf70 <iprintf+0x2c>)
 800cf48:	b513      	push	{r0, r1, r4, lr}
 800cf4a:	681c      	ldr	r4, [r3, #0]
 800cf4c:	b124      	cbz	r4, 800cf58 <iprintf+0x14>
 800cf4e:	69a3      	ldr	r3, [r4, #24]
 800cf50:	b913      	cbnz	r3, 800cf58 <iprintf+0x14>
 800cf52:	4620      	mov	r0, r4
 800cf54:	f000 fa8e 	bl	800d474 <__sinit>
 800cf58:	ab05      	add	r3, sp, #20
 800cf5a:	9a04      	ldr	r2, [sp, #16]
 800cf5c:	68a1      	ldr	r1, [r4, #8]
 800cf5e:	9301      	str	r3, [sp, #4]
 800cf60:	4620      	mov	r0, r4
 800cf62:	f000 fbd3 	bl	800d70c <_vfiprintf_r>
 800cf66:	b002      	add	sp, #8
 800cf68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf6c:	b004      	add	sp, #16
 800cf6e:	4770      	bx	lr
 800cf70:	24000014 	.word	0x24000014

0800cf74 <_sbrk_r>:
 800cf74:	b538      	push	{r3, r4, r5, lr}
 800cf76:	4d06      	ldr	r5, [pc, #24]	; (800cf90 <_sbrk_r+0x1c>)
 800cf78:	2300      	movs	r3, #0
 800cf7a:	4604      	mov	r4, r0
 800cf7c:	4608      	mov	r0, r1
 800cf7e:	602b      	str	r3, [r5, #0]
 800cf80:	f7f4 fae4 	bl	800154c <_sbrk>
 800cf84:	1c43      	adds	r3, r0, #1
 800cf86:	d102      	bne.n	800cf8e <_sbrk_r+0x1a>
 800cf88:	682b      	ldr	r3, [r5, #0]
 800cf8a:	b103      	cbz	r3, 800cf8e <_sbrk_r+0x1a>
 800cf8c:	6023      	str	r3, [r4, #0]
 800cf8e:	bd38      	pop	{r3, r4, r5, pc}
 800cf90:	24004db0 	.word	0x24004db0

0800cf94 <strcasecmp>:
 800cf94:	b570      	push	{r4, r5, r6, lr}
 800cf96:	4d0c      	ldr	r5, [pc, #48]	; (800cfc8 <strcasecmp+0x34>)
 800cf98:	4604      	mov	r4, r0
 800cf9a:	462e      	mov	r6, r5
 800cf9c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cfa0:	5d5a      	ldrb	r2, [r3, r5]
 800cfa2:	f002 0203 	and.w	r2, r2, #3
 800cfa6:	2a01      	cmp	r2, #1
 800cfa8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cfac:	5cb0      	ldrb	r0, [r6, r2]
 800cfae:	f000 0003 	and.w	r0, r0, #3
 800cfb2:	bf08      	it	eq
 800cfb4:	3320      	addeq	r3, #32
 800cfb6:	2801      	cmp	r0, #1
 800cfb8:	bf08      	it	eq
 800cfba:	3220      	addeq	r2, #32
 800cfbc:	1a98      	subs	r0, r3, r2
 800cfbe:	d101      	bne.n	800cfc4 <strcasecmp+0x30>
 800cfc0:	2a00      	cmp	r2, #0
 800cfc2:	d1eb      	bne.n	800cf9c <strcasecmp+0x8>
 800cfc4:	bd70      	pop	{r4, r5, r6, pc}
 800cfc6:	bf00      	nop
 800cfc8:	0800df99 	.word	0x0800df99

0800cfcc <strtok>:
 800cfcc:	4b16      	ldr	r3, [pc, #88]	; (800d028 <strtok+0x5c>)
 800cfce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cfd0:	681e      	ldr	r6, [r3, #0]
 800cfd2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800cfd4:	4605      	mov	r5, r0
 800cfd6:	b9fc      	cbnz	r4, 800d018 <strtok+0x4c>
 800cfd8:	2050      	movs	r0, #80	; 0x50
 800cfda:	9101      	str	r1, [sp, #4]
 800cfdc:	f7ff feea 	bl	800cdb4 <malloc>
 800cfe0:	9901      	ldr	r1, [sp, #4]
 800cfe2:	65b0      	str	r0, [r6, #88]	; 0x58
 800cfe4:	4602      	mov	r2, r0
 800cfe6:	b920      	cbnz	r0, 800cff2 <strtok+0x26>
 800cfe8:	4b10      	ldr	r3, [pc, #64]	; (800d02c <strtok+0x60>)
 800cfea:	4811      	ldr	r0, [pc, #68]	; (800d030 <strtok+0x64>)
 800cfec:	2157      	movs	r1, #87	; 0x57
 800cfee:	f000 f909 	bl	800d204 <__assert_func>
 800cff2:	e9c0 4400 	strd	r4, r4, [r0]
 800cff6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800cffa:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800cffe:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800d002:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800d006:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800d00a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800d00e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800d012:	6184      	str	r4, [r0, #24]
 800d014:	7704      	strb	r4, [r0, #28]
 800d016:	6244      	str	r4, [r0, #36]	; 0x24
 800d018:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800d01a:	2301      	movs	r3, #1
 800d01c:	4628      	mov	r0, r5
 800d01e:	b002      	add	sp, #8
 800d020:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d024:	f000 b806 	b.w	800d034 <__strtok_r>
 800d028:	24000014 	.word	0x24000014
 800d02c:	0800e0a0 	.word	0x0800e0a0
 800d030:	0800e0b7 	.word	0x0800e0b7

0800d034 <__strtok_r>:
 800d034:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d036:	b908      	cbnz	r0, 800d03c <__strtok_r+0x8>
 800d038:	6810      	ldr	r0, [r2, #0]
 800d03a:	b188      	cbz	r0, 800d060 <__strtok_r+0x2c>
 800d03c:	4604      	mov	r4, r0
 800d03e:	4620      	mov	r0, r4
 800d040:	f814 5b01 	ldrb.w	r5, [r4], #1
 800d044:	460f      	mov	r7, r1
 800d046:	f817 6b01 	ldrb.w	r6, [r7], #1
 800d04a:	b91e      	cbnz	r6, 800d054 <__strtok_r+0x20>
 800d04c:	b965      	cbnz	r5, 800d068 <__strtok_r+0x34>
 800d04e:	6015      	str	r5, [r2, #0]
 800d050:	4628      	mov	r0, r5
 800d052:	e005      	b.n	800d060 <__strtok_r+0x2c>
 800d054:	42b5      	cmp	r5, r6
 800d056:	d1f6      	bne.n	800d046 <__strtok_r+0x12>
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d1f0      	bne.n	800d03e <__strtok_r+0xa>
 800d05c:	6014      	str	r4, [r2, #0]
 800d05e:	7003      	strb	r3, [r0, #0]
 800d060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d062:	461c      	mov	r4, r3
 800d064:	e00c      	b.n	800d080 <__strtok_r+0x4c>
 800d066:	b915      	cbnz	r5, 800d06e <__strtok_r+0x3a>
 800d068:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d06c:	460e      	mov	r6, r1
 800d06e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800d072:	42ab      	cmp	r3, r5
 800d074:	d1f7      	bne.n	800d066 <__strtok_r+0x32>
 800d076:	2b00      	cmp	r3, #0
 800d078:	d0f3      	beq.n	800d062 <__strtok_r+0x2e>
 800d07a:	2300      	movs	r3, #0
 800d07c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800d080:	6014      	str	r4, [r2, #0]
 800d082:	e7ed      	b.n	800d060 <__strtok_r+0x2c>

0800d084 <__swbuf_r>:
 800d084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d086:	460e      	mov	r6, r1
 800d088:	4614      	mov	r4, r2
 800d08a:	4605      	mov	r5, r0
 800d08c:	b118      	cbz	r0, 800d096 <__swbuf_r+0x12>
 800d08e:	6983      	ldr	r3, [r0, #24]
 800d090:	b90b      	cbnz	r3, 800d096 <__swbuf_r+0x12>
 800d092:	f000 f9ef 	bl	800d474 <__sinit>
 800d096:	4b21      	ldr	r3, [pc, #132]	; (800d11c <__swbuf_r+0x98>)
 800d098:	429c      	cmp	r4, r3
 800d09a:	d12b      	bne.n	800d0f4 <__swbuf_r+0x70>
 800d09c:	686c      	ldr	r4, [r5, #4]
 800d09e:	69a3      	ldr	r3, [r4, #24]
 800d0a0:	60a3      	str	r3, [r4, #8]
 800d0a2:	89a3      	ldrh	r3, [r4, #12]
 800d0a4:	071a      	lsls	r2, r3, #28
 800d0a6:	d52f      	bpl.n	800d108 <__swbuf_r+0x84>
 800d0a8:	6923      	ldr	r3, [r4, #16]
 800d0aa:	b36b      	cbz	r3, 800d108 <__swbuf_r+0x84>
 800d0ac:	6923      	ldr	r3, [r4, #16]
 800d0ae:	6820      	ldr	r0, [r4, #0]
 800d0b0:	1ac0      	subs	r0, r0, r3
 800d0b2:	6963      	ldr	r3, [r4, #20]
 800d0b4:	b2f6      	uxtb	r6, r6
 800d0b6:	4283      	cmp	r3, r0
 800d0b8:	4637      	mov	r7, r6
 800d0ba:	dc04      	bgt.n	800d0c6 <__swbuf_r+0x42>
 800d0bc:	4621      	mov	r1, r4
 800d0be:	4628      	mov	r0, r5
 800d0c0:	f000 f944 	bl	800d34c <_fflush_r>
 800d0c4:	bb30      	cbnz	r0, 800d114 <__swbuf_r+0x90>
 800d0c6:	68a3      	ldr	r3, [r4, #8]
 800d0c8:	3b01      	subs	r3, #1
 800d0ca:	60a3      	str	r3, [r4, #8]
 800d0cc:	6823      	ldr	r3, [r4, #0]
 800d0ce:	1c5a      	adds	r2, r3, #1
 800d0d0:	6022      	str	r2, [r4, #0]
 800d0d2:	701e      	strb	r6, [r3, #0]
 800d0d4:	6963      	ldr	r3, [r4, #20]
 800d0d6:	3001      	adds	r0, #1
 800d0d8:	4283      	cmp	r3, r0
 800d0da:	d004      	beq.n	800d0e6 <__swbuf_r+0x62>
 800d0dc:	89a3      	ldrh	r3, [r4, #12]
 800d0de:	07db      	lsls	r3, r3, #31
 800d0e0:	d506      	bpl.n	800d0f0 <__swbuf_r+0x6c>
 800d0e2:	2e0a      	cmp	r6, #10
 800d0e4:	d104      	bne.n	800d0f0 <__swbuf_r+0x6c>
 800d0e6:	4621      	mov	r1, r4
 800d0e8:	4628      	mov	r0, r5
 800d0ea:	f000 f92f 	bl	800d34c <_fflush_r>
 800d0ee:	b988      	cbnz	r0, 800d114 <__swbuf_r+0x90>
 800d0f0:	4638      	mov	r0, r7
 800d0f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0f4:	4b0a      	ldr	r3, [pc, #40]	; (800d120 <__swbuf_r+0x9c>)
 800d0f6:	429c      	cmp	r4, r3
 800d0f8:	d101      	bne.n	800d0fe <__swbuf_r+0x7a>
 800d0fa:	68ac      	ldr	r4, [r5, #8]
 800d0fc:	e7cf      	b.n	800d09e <__swbuf_r+0x1a>
 800d0fe:	4b09      	ldr	r3, [pc, #36]	; (800d124 <__swbuf_r+0xa0>)
 800d100:	429c      	cmp	r4, r3
 800d102:	bf08      	it	eq
 800d104:	68ec      	ldreq	r4, [r5, #12]
 800d106:	e7ca      	b.n	800d09e <__swbuf_r+0x1a>
 800d108:	4621      	mov	r1, r4
 800d10a:	4628      	mov	r0, r5
 800d10c:	f000 f80c 	bl	800d128 <__swsetup_r>
 800d110:	2800      	cmp	r0, #0
 800d112:	d0cb      	beq.n	800d0ac <__swbuf_r+0x28>
 800d114:	f04f 37ff 	mov.w	r7, #4294967295
 800d118:	e7ea      	b.n	800d0f0 <__swbuf_r+0x6c>
 800d11a:	bf00      	nop
 800d11c:	0800e174 	.word	0x0800e174
 800d120:	0800e194 	.word	0x0800e194
 800d124:	0800e154 	.word	0x0800e154

0800d128 <__swsetup_r>:
 800d128:	4b32      	ldr	r3, [pc, #200]	; (800d1f4 <__swsetup_r+0xcc>)
 800d12a:	b570      	push	{r4, r5, r6, lr}
 800d12c:	681d      	ldr	r5, [r3, #0]
 800d12e:	4606      	mov	r6, r0
 800d130:	460c      	mov	r4, r1
 800d132:	b125      	cbz	r5, 800d13e <__swsetup_r+0x16>
 800d134:	69ab      	ldr	r3, [r5, #24]
 800d136:	b913      	cbnz	r3, 800d13e <__swsetup_r+0x16>
 800d138:	4628      	mov	r0, r5
 800d13a:	f000 f99b 	bl	800d474 <__sinit>
 800d13e:	4b2e      	ldr	r3, [pc, #184]	; (800d1f8 <__swsetup_r+0xd0>)
 800d140:	429c      	cmp	r4, r3
 800d142:	d10f      	bne.n	800d164 <__swsetup_r+0x3c>
 800d144:	686c      	ldr	r4, [r5, #4]
 800d146:	89a3      	ldrh	r3, [r4, #12]
 800d148:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d14c:	0719      	lsls	r1, r3, #28
 800d14e:	d42c      	bmi.n	800d1aa <__swsetup_r+0x82>
 800d150:	06dd      	lsls	r5, r3, #27
 800d152:	d411      	bmi.n	800d178 <__swsetup_r+0x50>
 800d154:	2309      	movs	r3, #9
 800d156:	6033      	str	r3, [r6, #0]
 800d158:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d15c:	81a3      	strh	r3, [r4, #12]
 800d15e:	f04f 30ff 	mov.w	r0, #4294967295
 800d162:	e03e      	b.n	800d1e2 <__swsetup_r+0xba>
 800d164:	4b25      	ldr	r3, [pc, #148]	; (800d1fc <__swsetup_r+0xd4>)
 800d166:	429c      	cmp	r4, r3
 800d168:	d101      	bne.n	800d16e <__swsetup_r+0x46>
 800d16a:	68ac      	ldr	r4, [r5, #8]
 800d16c:	e7eb      	b.n	800d146 <__swsetup_r+0x1e>
 800d16e:	4b24      	ldr	r3, [pc, #144]	; (800d200 <__swsetup_r+0xd8>)
 800d170:	429c      	cmp	r4, r3
 800d172:	bf08      	it	eq
 800d174:	68ec      	ldreq	r4, [r5, #12]
 800d176:	e7e6      	b.n	800d146 <__swsetup_r+0x1e>
 800d178:	0758      	lsls	r0, r3, #29
 800d17a:	d512      	bpl.n	800d1a2 <__swsetup_r+0x7a>
 800d17c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d17e:	b141      	cbz	r1, 800d192 <__swsetup_r+0x6a>
 800d180:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d184:	4299      	cmp	r1, r3
 800d186:	d002      	beq.n	800d18e <__swsetup_r+0x66>
 800d188:	4630      	mov	r0, r6
 800d18a:	f7ff fe31 	bl	800cdf0 <_free_r>
 800d18e:	2300      	movs	r3, #0
 800d190:	6363      	str	r3, [r4, #52]	; 0x34
 800d192:	89a3      	ldrh	r3, [r4, #12]
 800d194:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d198:	81a3      	strh	r3, [r4, #12]
 800d19a:	2300      	movs	r3, #0
 800d19c:	6063      	str	r3, [r4, #4]
 800d19e:	6923      	ldr	r3, [r4, #16]
 800d1a0:	6023      	str	r3, [r4, #0]
 800d1a2:	89a3      	ldrh	r3, [r4, #12]
 800d1a4:	f043 0308 	orr.w	r3, r3, #8
 800d1a8:	81a3      	strh	r3, [r4, #12]
 800d1aa:	6923      	ldr	r3, [r4, #16]
 800d1ac:	b94b      	cbnz	r3, 800d1c2 <__swsetup_r+0x9a>
 800d1ae:	89a3      	ldrh	r3, [r4, #12]
 800d1b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d1b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d1b8:	d003      	beq.n	800d1c2 <__swsetup_r+0x9a>
 800d1ba:	4621      	mov	r1, r4
 800d1bc:	4630      	mov	r0, r6
 800d1be:	f000 fa2f 	bl	800d620 <__smakebuf_r>
 800d1c2:	89a0      	ldrh	r0, [r4, #12]
 800d1c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d1c8:	f010 0301 	ands.w	r3, r0, #1
 800d1cc:	d00a      	beq.n	800d1e4 <__swsetup_r+0xbc>
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	60a3      	str	r3, [r4, #8]
 800d1d2:	6963      	ldr	r3, [r4, #20]
 800d1d4:	425b      	negs	r3, r3
 800d1d6:	61a3      	str	r3, [r4, #24]
 800d1d8:	6923      	ldr	r3, [r4, #16]
 800d1da:	b943      	cbnz	r3, 800d1ee <__swsetup_r+0xc6>
 800d1dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d1e0:	d1ba      	bne.n	800d158 <__swsetup_r+0x30>
 800d1e2:	bd70      	pop	{r4, r5, r6, pc}
 800d1e4:	0781      	lsls	r1, r0, #30
 800d1e6:	bf58      	it	pl
 800d1e8:	6963      	ldrpl	r3, [r4, #20]
 800d1ea:	60a3      	str	r3, [r4, #8]
 800d1ec:	e7f4      	b.n	800d1d8 <__swsetup_r+0xb0>
 800d1ee:	2000      	movs	r0, #0
 800d1f0:	e7f7      	b.n	800d1e2 <__swsetup_r+0xba>
 800d1f2:	bf00      	nop
 800d1f4:	24000014 	.word	0x24000014
 800d1f8:	0800e174 	.word	0x0800e174
 800d1fc:	0800e194 	.word	0x0800e194
 800d200:	0800e154 	.word	0x0800e154

0800d204 <__assert_func>:
 800d204:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d206:	4614      	mov	r4, r2
 800d208:	461a      	mov	r2, r3
 800d20a:	4b09      	ldr	r3, [pc, #36]	; (800d230 <__assert_func+0x2c>)
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	4605      	mov	r5, r0
 800d210:	68d8      	ldr	r0, [r3, #12]
 800d212:	b14c      	cbz	r4, 800d228 <__assert_func+0x24>
 800d214:	4b07      	ldr	r3, [pc, #28]	; (800d234 <__assert_func+0x30>)
 800d216:	9100      	str	r1, [sp, #0]
 800d218:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d21c:	4906      	ldr	r1, [pc, #24]	; (800d238 <__assert_func+0x34>)
 800d21e:	462b      	mov	r3, r5
 800d220:	f000 f9a6 	bl	800d570 <fiprintf>
 800d224:	f000 fd8c 	bl	800dd40 <abort>
 800d228:	4b04      	ldr	r3, [pc, #16]	; (800d23c <__assert_func+0x38>)
 800d22a:	461c      	mov	r4, r3
 800d22c:	e7f3      	b.n	800d216 <__assert_func+0x12>
 800d22e:	bf00      	nop
 800d230:	24000014 	.word	0x24000014
 800d234:	0800e118 	.word	0x0800e118
 800d238:	0800e125 	.word	0x0800e125
 800d23c:	0800e153 	.word	0x0800e153

0800d240 <__sflush_r>:
 800d240:	898a      	ldrh	r2, [r1, #12]
 800d242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d246:	4605      	mov	r5, r0
 800d248:	0710      	lsls	r0, r2, #28
 800d24a:	460c      	mov	r4, r1
 800d24c:	d458      	bmi.n	800d300 <__sflush_r+0xc0>
 800d24e:	684b      	ldr	r3, [r1, #4]
 800d250:	2b00      	cmp	r3, #0
 800d252:	dc05      	bgt.n	800d260 <__sflush_r+0x20>
 800d254:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d256:	2b00      	cmp	r3, #0
 800d258:	dc02      	bgt.n	800d260 <__sflush_r+0x20>
 800d25a:	2000      	movs	r0, #0
 800d25c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d260:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d262:	2e00      	cmp	r6, #0
 800d264:	d0f9      	beq.n	800d25a <__sflush_r+0x1a>
 800d266:	2300      	movs	r3, #0
 800d268:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d26c:	682f      	ldr	r7, [r5, #0]
 800d26e:	602b      	str	r3, [r5, #0]
 800d270:	d032      	beq.n	800d2d8 <__sflush_r+0x98>
 800d272:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d274:	89a3      	ldrh	r3, [r4, #12]
 800d276:	075a      	lsls	r2, r3, #29
 800d278:	d505      	bpl.n	800d286 <__sflush_r+0x46>
 800d27a:	6863      	ldr	r3, [r4, #4]
 800d27c:	1ac0      	subs	r0, r0, r3
 800d27e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d280:	b10b      	cbz	r3, 800d286 <__sflush_r+0x46>
 800d282:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d284:	1ac0      	subs	r0, r0, r3
 800d286:	2300      	movs	r3, #0
 800d288:	4602      	mov	r2, r0
 800d28a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d28c:	6a21      	ldr	r1, [r4, #32]
 800d28e:	4628      	mov	r0, r5
 800d290:	47b0      	blx	r6
 800d292:	1c43      	adds	r3, r0, #1
 800d294:	89a3      	ldrh	r3, [r4, #12]
 800d296:	d106      	bne.n	800d2a6 <__sflush_r+0x66>
 800d298:	6829      	ldr	r1, [r5, #0]
 800d29a:	291d      	cmp	r1, #29
 800d29c:	d82c      	bhi.n	800d2f8 <__sflush_r+0xb8>
 800d29e:	4a2a      	ldr	r2, [pc, #168]	; (800d348 <__sflush_r+0x108>)
 800d2a0:	40ca      	lsrs	r2, r1
 800d2a2:	07d6      	lsls	r6, r2, #31
 800d2a4:	d528      	bpl.n	800d2f8 <__sflush_r+0xb8>
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	6062      	str	r2, [r4, #4]
 800d2aa:	04d9      	lsls	r1, r3, #19
 800d2ac:	6922      	ldr	r2, [r4, #16]
 800d2ae:	6022      	str	r2, [r4, #0]
 800d2b0:	d504      	bpl.n	800d2bc <__sflush_r+0x7c>
 800d2b2:	1c42      	adds	r2, r0, #1
 800d2b4:	d101      	bne.n	800d2ba <__sflush_r+0x7a>
 800d2b6:	682b      	ldr	r3, [r5, #0]
 800d2b8:	b903      	cbnz	r3, 800d2bc <__sflush_r+0x7c>
 800d2ba:	6560      	str	r0, [r4, #84]	; 0x54
 800d2bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d2be:	602f      	str	r7, [r5, #0]
 800d2c0:	2900      	cmp	r1, #0
 800d2c2:	d0ca      	beq.n	800d25a <__sflush_r+0x1a>
 800d2c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d2c8:	4299      	cmp	r1, r3
 800d2ca:	d002      	beq.n	800d2d2 <__sflush_r+0x92>
 800d2cc:	4628      	mov	r0, r5
 800d2ce:	f7ff fd8f 	bl	800cdf0 <_free_r>
 800d2d2:	2000      	movs	r0, #0
 800d2d4:	6360      	str	r0, [r4, #52]	; 0x34
 800d2d6:	e7c1      	b.n	800d25c <__sflush_r+0x1c>
 800d2d8:	6a21      	ldr	r1, [r4, #32]
 800d2da:	2301      	movs	r3, #1
 800d2dc:	4628      	mov	r0, r5
 800d2de:	47b0      	blx	r6
 800d2e0:	1c41      	adds	r1, r0, #1
 800d2e2:	d1c7      	bne.n	800d274 <__sflush_r+0x34>
 800d2e4:	682b      	ldr	r3, [r5, #0]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d0c4      	beq.n	800d274 <__sflush_r+0x34>
 800d2ea:	2b1d      	cmp	r3, #29
 800d2ec:	d001      	beq.n	800d2f2 <__sflush_r+0xb2>
 800d2ee:	2b16      	cmp	r3, #22
 800d2f0:	d101      	bne.n	800d2f6 <__sflush_r+0xb6>
 800d2f2:	602f      	str	r7, [r5, #0]
 800d2f4:	e7b1      	b.n	800d25a <__sflush_r+0x1a>
 800d2f6:	89a3      	ldrh	r3, [r4, #12]
 800d2f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2fc:	81a3      	strh	r3, [r4, #12]
 800d2fe:	e7ad      	b.n	800d25c <__sflush_r+0x1c>
 800d300:	690f      	ldr	r7, [r1, #16]
 800d302:	2f00      	cmp	r7, #0
 800d304:	d0a9      	beq.n	800d25a <__sflush_r+0x1a>
 800d306:	0793      	lsls	r3, r2, #30
 800d308:	680e      	ldr	r6, [r1, #0]
 800d30a:	bf08      	it	eq
 800d30c:	694b      	ldreq	r3, [r1, #20]
 800d30e:	600f      	str	r7, [r1, #0]
 800d310:	bf18      	it	ne
 800d312:	2300      	movne	r3, #0
 800d314:	eba6 0807 	sub.w	r8, r6, r7
 800d318:	608b      	str	r3, [r1, #8]
 800d31a:	f1b8 0f00 	cmp.w	r8, #0
 800d31e:	dd9c      	ble.n	800d25a <__sflush_r+0x1a>
 800d320:	6a21      	ldr	r1, [r4, #32]
 800d322:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d324:	4643      	mov	r3, r8
 800d326:	463a      	mov	r2, r7
 800d328:	4628      	mov	r0, r5
 800d32a:	47b0      	blx	r6
 800d32c:	2800      	cmp	r0, #0
 800d32e:	dc06      	bgt.n	800d33e <__sflush_r+0xfe>
 800d330:	89a3      	ldrh	r3, [r4, #12]
 800d332:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d336:	81a3      	strh	r3, [r4, #12]
 800d338:	f04f 30ff 	mov.w	r0, #4294967295
 800d33c:	e78e      	b.n	800d25c <__sflush_r+0x1c>
 800d33e:	4407      	add	r7, r0
 800d340:	eba8 0800 	sub.w	r8, r8, r0
 800d344:	e7e9      	b.n	800d31a <__sflush_r+0xda>
 800d346:	bf00      	nop
 800d348:	20400001 	.word	0x20400001

0800d34c <_fflush_r>:
 800d34c:	b538      	push	{r3, r4, r5, lr}
 800d34e:	690b      	ldr	r3, [r1, #16]
 800d350:	4605      	mov	r5, r0
 800d352:	460c      	mov	r4, r1
 800d354:	b913      	cbnz	r3, 800d35c <_fflush_r+0x10>
 800d356:	2500      	movs	r5, #0
 800d358:	4628      	mov	r0, r5
 800d35a:	bd38      	pop	{r3, r4, r5, pc}
 800d35c:	b118      	cbz	r0, 800d366 <_fflush_r+0x1a>
 800d35e:	6983      	ldr	r3, [r0, #24]
 800d360:	b90b      	cbnz	r3, 800d366 <_fflush_r+0x1a>
 800d362:	f000 f887 	bl	800d474 <__sinit>
 800d366:	4b14      	ldr	r3, [pc, #80]	; (800d3b8 <_fflush_r+0x6c>)
 800d368:	429c      	cmp	r4, r3
 800d36a:	d11b      	bne.n	800d3a4 <_fflush_r+0x58>
 800d36c:	686c      	ldr	r4, [r5, #4]
 800d36e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d0ef      	beq.n	800d356 <_fflush_r+0xa>
 800d376:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d378:	07d0      	lsls	r0, r2, #31
 800d37a:	d404      	bmi.n	800d386 <_fflush_r+0x3a>
 800d37c:	0599      	lsls	r1, r3, #22
 800d37e:	d402      	bmi.n	800d386 <_fflush_r+0x3a>
 800d380:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d382:	f000 f927 	bl	800d5d4 <__retarget_lock_acquire_recursive>
 800d386:	4628      	mov	r0, r5
 800d388:	4621      	mov	r1, r4
 800d38a:	f7ff ff59 	bl	800d240 <__sflush_r>
 800d38e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d390:	07da      	lsls	r2, r3, #31
 800d392:	4605      	mov	r5, r0
 800d394:	d4e0      	bmi.n	800d358 <_fflush_r+0xc>
 800d396:	89a3      	ldrh	r3, [r4, #12]
 800d398:	059b      	lsls	r3, r3, #22
 800d39a:	d4dd      	bmi.n	800d358 <_fflush_r+0xc>
 800d39c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d39e:	f000 f91a 	bl	800d5d6 <__retarget_lock_release_recursive>
 800d3a2:	e7d9      	b.n	800d358 <_fflush_r+0xc>
 800d3a4:	4b05      	ldr	r3, [pc, #20]	; (800d3bc <_fflush_r+0x70>)
 800d3a6:	429c      	cmp	r4, r3
 800d3a8:	d101      	bne.n	800d3ae <_fflush_r+0x62>
 800d3aa:	68ac      	ldr	r4, [r5, #8]
 800d3ac:	e7df      	b.n	800d36e <_fflush_r+0x22>
 800d3ae:	4b04      	ldr	r3, [pc, #16]	; (800d3c0 <_fflush_r+0x74>)
 800d3b0:	429c      	cmp	r4, r3
 800d3b2:	bf08      	it	eq
 800d3b4:	68ec      	ldreq	r4, [r5, #12]
 800d3b6:	e7da      	b.n	800d36e <_fflush_r+0x22>
 800d3b8:	0800e174 	.word	0x0800e174
 800d3bc:	0800e194 	.word	0x0800e194
 800d3c0:	0800e154 	.word	0x0800e154

0800d3c4 <std>:
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	b510      	push	{r4, lr}
 800d3c8:	4604      	mov	r4, r0
 800d3ca:	e9c0 3300 	strd	r3, r3, [r0]
 800d3ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d3d2:	6083      	str	r3, [r0, #8]
 800d3d4:	8181      	strh	r1, [r0, #12]
 800d3d6:	6643      	str	r3, [r0, #100]	; 0x64
 800d3d8:	81c2      	strh	r2, [r0, #14]
 800d3da:	6183      	str	r3, [r0, #24]
 800d3dc:	4619      	mov	r1, r3
 800d3de:	2208      	movs	r2, #8
 800d3e0:	305c      	adds	r0, #92	; 0x5c
 800d3e2:	f7ff fcfd 	bl	800cde0 <memset>
 800d3e6:	4b05      	ldr	r3, [pc, #20]	; (800d3fc <std+0x38>)
 800d3e8:	6263      	str	r3, [r4, #36]	; 0x24
 800d3ea:	4b05      	ldr	r3, [pc, #20]	; (800d400 <std+0x3c>)
 800d3ec:	62a3      	str	r3, [r4, #40]	; 0x28
 800d3ee:	4b05      	ldr	r3, [pc, #20]	; (800d404 <std+0x40>)
 800d3f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d3f2:	4b05      	ldr	r3, [pc, #20]	; (800d408 <std+0x44>)
 800d3f4:	6224      	str	r4, [r4, #32]
 800d3f6:	6323      	str	r3, [r4, #48]	; 0x30
 800d3f8:	bd10      	pop	{r4, pc}
 800d3fa:	bf00      	nop
 800d3fc:	0800dc95 	.word	0x0800dc95
 800d400:	0800dcb7 	.word	0x0800dcb7
 800d404:	0800dcef 	.word	0x0800dcef
 800d408:	0800dd13 	.word	0x0800dd13

0800d40c <_cleanup_r>:
 800d40c:	4901      	ldr	r1, [pc, #4]	; (800d414 <_cleanup_r+0x8>)
 800d40e:	f000 b8c1 	b.w	800d594 <_fwalk_reent>
 800d412:	bf00      	nop
 800d414:	0800d34d 	.word	0x0800d34d

0800d418 <__sfmoreglue>:
 800d418:	b570      	push	{r4, r5, r6, lr}
 800d41a:	1e4a      	subs	r2, r1, #1
 800d41c:	2568      	movs	r5, #104	; 0x68
 800d41e:	4355      	muls	r5, r2
 800d420:	460e      	mov	r6, r1
 800d422:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d426:	f7ff fd33 	bl	800ce90 <_malloc_r>
 800d42a:	4604      	mov	r4, r0
 800d42c:	b140      	cbz	r0, 800d440 <__sfmoreglue+0x28>
 800d42e:	2100      	movs	r1, #0
 800d430:	e9c0 1600 	strd	r1, r6, [r0]
 800d434:	300c      	adds	r0, #12
 800d436:	60a0      	str	r0, [r4, #8]
 800d438:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d43c:	f7ff fcd0 	bl	800cde0 <memset>
 800d440:	4620      	mov	r0, r4
 800d442:	bd70      	pop	{r4, r5, r6, pc}

0800d444 <__sfp_lock_acquire>:
 800d444:	4801      	ldr	r0, [pc, #4]	; (800d44c <__sfp_lock_acquire+0x8>)
 800d446:	f000 b8c5 	b.w	800d5d4 <__retarget_lock_acquire_recursive>
 800d44a:	bf00      	nop
 800d44c:	24004dc0 	.word	0x24004dc0

0800d450 <__sfp_lock_release>:
 800d450:	4801      	ldr	r0, [pc, #4]	; (800d458 <__sfp_lock_release+0x8>)
 800d452:	f000 b8c0 	b.w	800d5d6 <__retarget_lock_release_recursive>
 800d456:	bf00      	nop
 800d458:	24004dc0 	.word	0x24004dc0

0800d45c <__sinit_lock_acquire>:
 800d45c:	4801      	ldr	r0, [pc, #4]	; (800d464 <__sinit_lock_acquire+0x8>)
 800d45e:	f000 b8b9 	b.w	800d5d4 <__retarget_lock_acquire_recursive>
 800d462:	bf00      	nop
 800d464:	24004dbb 	.word	0x24004dbb

0800d468 <__sinit_lock_release>:
 800d468:	4801      	ldr	r0, [pc, #4]	; (800d470 <__sinit_lock_release+0x8>)
 800d46a:	f000 b8b4 	b.w	800d5d6 <__retarget_lock_release_recursive>
 800d46e:	bf00      	nop
 800d470:	24004dbb 	.word	0x24004dbb

0800d474 <__sinit>:
 800d474:	b510      	push	{r4, lr}
 800d476:	4604      	mov	r4, r0
 800d478:	f7ff fff0 	bl	800d45c <__sinit_lock_acquire>
 800d47c:	69a3      	ldr	r3, [r4, #24]
 800d47e:	b11b      	cbz	r3, 800d488 <__sinit+0x14>
 800d480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d484:	f7ff bff0 	b.w	800d468 <__sinit_lock_release>
 800d488:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d48c:	6523      	str	r3, [r4, #80]	; 0x50
 800d48e:	4b13      	ldr	r3, [pc, #76]	; (800d4dc <__sinit+0x68>)
 800d490:	4a13      	ldr	r2, [pc, #76]	; (800d4e0 <__sinit+0x6c>)
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	62a2      	str	r2, [r4, #40]	; 0x28
 800d496:	42a3      	cmp	r3, r4
 800d498:	bf04      	itt	eq
 800d49a:	2301      	moveq	r3, #1
 800d49c:	61a3      	streq	r3, [r4, #24]
 800d49e:	4620      	mov	r0, r4
 800d4a0:	f000 f820 	bl	800d4e4 <__sfp>
 800d4a4:	6060      	str	r0, [r4, #4]
 800d4a6:	4620      	mov	r0, r4
 800d4a8:	f000 f81c 	bl	800d4e4 <__sfp>
 800d4ac:	60a0      	str	r0, [r4, #8]
 800d4ae:	4620      	mov	r0, r4
 800d4b0:	f000 f818 	bl	800d4e4 <__sfp>
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	60e0      	str	r0, [r4, #12]
 800d4b8:	2104      	movs	r1, #4
 800d4ba:	6860      	ldr	r0, [r4, #4]
 800d4bc:	f7ff ff82 	bl	800d3c4 <std>
 800d4c0:	68a0      	ldr	r0, [r4, #8]
 800d4c2:	2201      	movs	r2, #1
 800d4c4:	2109      	movs	r1, #9
 800d4c6:	f7ff ff7d 	bl	800d3c4 <std>
 800d4ca:	68e0      	ldr	r0, [r4, #12]
 800d4cc:	2202      	movs	r2, #2
 800d4ce:	2112      	movs	r1, #18
 800d4d0:	f7ff ff78 	bl	800d3c4 <std>
 800d4d4:	2301      	movs	r3, #1
 800d4d6:	61a3      	str	r3, [r4, #24]
 800d4d8:	e7d2      	b.n	800d480 <__sinit+0xc>
 800d4da:	bf00      	nop
 800d4dc:	0800e09c 	.word	0x0800e09c
 800d4e0:	0800d40d 	.word	0x0800d40d

0800d4e4 <__sfp>:
 800d4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4e6:	4607      	mov	r7, r0
 800d4e8:	f7ff ffac 	bl	800d444 <__sfp_lock_acquire>
 800d4ec:	4b1e      	ldr	r3, [pc, #120]	; (800d568 <__sfp+0x84>)
 800d4ee:	681e      	ldr	r6, [r3, #0]
 800d4f0:	69b3      	ldr	r3, [r6, #24]
 800d4f2:	b913      	cbnz	r3, 800d4fa <__sfp+0x16>
 800d4f4:	4630      	mov	r0, r6
 800d4f6:	f7ff ffbd 	bl	800d474 <__sinit>
 800d4fa:	3648      	adds	r6, #72	; 0x48
 800d4fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d500:	3b01      	subs	r3, #1
 800d502:	d503      	bpl.n	800d50c <__sfp+0x28>
 800d504:	6833      	ldr	r3, [r6, #0]
 800d506:	b30b      	cbz	r3, 800d54c <__sfp+0x68>
 800d508:	6836      	ldr	r6, [r6, #0]
 800d50a:	e7f7      	b.n	800d4fc <__sfp+0x18>
 800d50c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d510:	b9d5      	cbnz	r5, 800d548 <__sfp+0x64>
 800d512:	4b16      	ldr	r3, [pc, #88]	; (800d56c <__sfp+0x88>)
 800d514:	60e3      	str	r3, [r4, #12]
 800d516:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d51a:	6665      	str	r5, [r4, #100]	; 0x64
 800d51c:	f000 f859 	bl	800d5d2 <__retarget_lock_init_recursive>
 800d520:	f7ff ff96 	bl	800d450 <__sfp_lock_release>
 800d524:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d528:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d52c:	6025      	str	r5, [r4, #0]
 800d52e:	61a5      	str	r5, [r4, #24]
 800d530:	2208      	movs	r2, #8
 800d532:	4629      	mov	r1, r5
 800d534:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d538:	f7ff fc52 	bl	800cde0 <memset>
 800d53c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d540:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d544:	4620      	mov	r0, r4
 800d546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d548:	3468      	adds	r4, #104	; 0x68
 800d54a:	e7d9      	b.n	800d500 <__sfp+0x1c>
 800d54c:	2104      	movs	r1, #4
 800d54e:	4638      	mov	r0, r7
 800d550:	f7ff ff62 	bl	800d418 <__sfmoreglue>
 800d554:	4604      	mov	r4, r0
 800d556:	6030      	str	r0, [r6, #0]
 800d558:	2800      	cmp	r0, #0
 800d55a:	d1d5      	bne.n	800d508 <__sfp+0x24>
 800d55c:	f7ff ff78 	bl	800d450 <__sfp_lock_release>
 800d560:	230c      	movs	r3, #12
 800d562:	603b      	str	r3, [r7, #0]
 800d564:	e7ee      	b.n	800d544 <__sfp+0x60>
 800d566:	bf00      	nop
 800d568:	0800e09c 	.word	0x0800e09c
 800d56c:	ffff0001 	.word	0xffff0001

0800d570 <fiprintf>:
 800d570:	b40e      	push	{r1, r2, r3}
 800d572:	b503      	push	{r0, r1, lr}
 800d574:	4601      	mov	r1, r0
 800d576:	ab03      	add	r3, sp, #12
 800d578:	4805      	ldr	r0, [pc, #20]	; (800d590 <fiprintf+0x20>)
 800d57a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d57e:	6800      	ldr	r0, [r0, #0]
 800d580:	9301      	str	r3, [sp, #4]
 800d582:	f000 f8c3 	bl	800d70c <_vfiprintf_r>
 800d586:	b002      	add	sp, #8
 800d588:	f85d eb04 	ldr.w	lr, [sp], #4
 800d58c:	b003      	add	sp, #12
 800d58e:	4770      	bx	lr
 800d590:	24000014 	.word	0x24000014

0800d594 <_fwalk_reent>:
 800d594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d598:	4606      	mov	r6, r0
 800d59a:	4688      	mov	r8, r1
 800d59c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d5a0:	2700      	movs	r7, #0
 800d5a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d5a6:	f1b9 0901 	subs.w	r9, r9, #1
 800d5aa:	d505      	bpl.n	800d5b8 <_fwalk_reent+0x24>
 800d5ac:	6824      	ldr	r4, [r4, #0]
 800d5ae:	2c00      	cmp	r4, #0
 800d5b0:	d1f7      	bne.n	800d5a2 <_fwalk_reent+0xe>
 800d5b2:	4638      	mov	r0, r7
 800d5b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5b8:	89ab      	ldrh	r3, [r5, #12]
 800d5ba:	2b01      	cmp	r3, #1
 800d5bc:	d907      	bls.n	800d5ce <_fwalk_reent+0x3a>
 800d5be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d5c2:	3301      	adds	r3, #1
 800d5c4:	d003      	beq.n	800d5ce <_fwalk_reent+0x3a>
 800d5c6:	4629      	mov	r1, r5
 800d5c8:	4630      	mov	r0, r6
 800d5ca:	47c0      	blx	r8
 800d5cc:	4307      	orrs	r7, r0
 800d5ce:	3568      	adds	r5, #104	; 0x68
 800d5d0:	e7e9      	b.n	800d5a6 <_fwalk_reent+0x12>

0800d5d2 <__retarget_lock_init_recursive>:
 800d5d2:	4770      	bx	lr

0800d5d4 <__retarget_lock_acquire_recursive>:
 800d5d4:	4770      	bx	lr

0800d5d6 <__retarget_lock_release_recursive>:
 800d5d6:	4770      	bx	lr

0800d5d8 <__swhatbuf_r>:
 800d5d8:	b570      	push	{r4, r5, r6, lr}
 800d5da:	460e      	mov	r6, r1
 800d5dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5e0:	2900      	cmp	r1, #0
 800d5e2:	b096      	sub	sp, #88	; 0x58
 800d5e4:	4614      	mov	r4, r2
 800d5e6:	461d      	mov	r5, r3
 800d5e8:	da07      	bge.n	800d5fa <__swhatbuf_r+0x22>
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	602b      	str	r3, [r5, #0]
 800d5ee:	89b3      	ldrh	r3, [r6, #12]
 800d5f0:	061a      	lsls	r2, r3, #24
 800d5f2:	d410      	bmi.n	800d616 <__swhatbuf_r+0x3e>
 800d5f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d5f8:	e00e      	b.n	800d618 <__swhatbuf_r+0x40>
 800d5fa:	466a      	mov	r2, sp
 800d5fc:	f000 fbb8 	bl	800dd70 <_fstat_r>
 800d600:	2800      	cmp	r0, #0
 800d602:	dbf2      	blt.n	800d5ea <__swhatbuf_r+0x12>
 800d604:	9a01      	ldr	r2, [sp, #4]
 800d606:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d60a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d60e:	425a      	negs	r2, r3
 800d610:	415a      	adcs	r2, r3
 800d612:	602a      	str	r2, [r5, #0]
 800d614:	e7ee      	b.n	800d5f4 <__swhatbuf_r+0x1c>
 800d616:	2340      	movs	r3, #64	; 0x40
 800d618:	2000      	movs	r0, #0
 800d61a:	6023      	str	r3, [r4, #0]
 800d61c:	b016      	add	sp, #88	; 0x58
 800d61e:	bd70      	pop	{r4, r5, r6, pc}

0800d620 <__smakebuf_r>:
 800d620:	898b      	ldrh	r3, [r1, #12]
 800d622:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d624:	079d      	lsls	r5, r3, #30
 800d626:	4606      	mov	r6, r0
 800d628:	460c      	mov	r4, r1
 800d62a:	d507      	bpl.n	800d63c <__smakebuf_r+0x1c>
 800d62c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d630:	6023      	str	r3, [r4, #0]
 800d632:	6123      	str	r3, [r4, #16]
 800d634:	2301      	movs	r3, #1
 800d636:	6163      	str	r3, [r4, #20]
 800d638:	b002      	add	sp, #8
 800d63a:	bd70      	pop	{r4, r5, r6, pc}
 800d63c:	ab01      	add	r3, sp, #4
 800d63e:	466a      	mov	r2, sp
 800d640:	f7ff ffca 	bl	800d5d8 <__swhatbuf_r>
 800d644:	9900      	ldr	r1, [sp, #0]
 800d646:	4605      	mov	r5, r0
 800d648:	4630      	mov	r0, r6
 800d64a:	f7ff fc21 	bl	800ce90 <_malloc_r>
 800d64e:	b948      	cbnz	r0, 800d664 <__smakebuf_r+0x44>
 800d650:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d654:	059a      	lsls	r2, r3, #22
 800d656:	d4ef      	bmi.n	800d638 <__smakebuf_r+0x18>
 800d658:	f023 0303 	bic.w	r3, r3, #3
 800d65c:	f043 0302 	orr.w	r3, r3, #2
 800d660:	81a3      	strh	r3, [r4, #12]
 800d662:	e7e3      	b.n	800d62c <__smakebuf_r+0xc>
 800d664:	4b0d      	ldr	r3, [pc, #52]	; (800d69c <__smakebuf_r+0x7c>)
 800d666:	62b3      	str	r3, [r6, #40]	; 0x28
 800d668:	89a3      	ldrh	r3, [r4, #12]
 800d66a:	6020      	str	r0, [r4, #0]
 800d66c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d670:	81a3      	strh	r3, [r4, #12]
 800d672:	9b00      	ldr	r3, [sp, #0]
 800d674:	6163      	str	r3, [r4, #20]
 800d676:	9b01      	ldr	r3, [sp, #4]
 800d678:	6120      	str	r0, [r4, #16]
 800d67a:	b15b      	cbz	r3, 800d694 <__smakebuf_r+0x74>
 800d67c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d680:	4630      	mov	r0, r6
 800d682:	f000 fb87 	bl	800dd94 <_isatty_r>
 800d686:	b128      	cbz	r0, 800d694 <__smakebuf_r+0x74>
 800d688:	89a3      	ldrh	r3, [r4, #12]
 800d68a:	f023 0303 	bic.w	r3, r3, #3
 800d68e:	f043 0301 	orr.w	r3, r3, #1
 800d692:	81a3      	strh	r3, [r4, #12]
 800d694:	89a0      	ldrh	r0, [r4, #12]
 800d696:	4305      	orrs	r5, r0
 800d698:	81a5      	strh	r5, [r4, #12]
 800d69a:	e7cd      	b.n	800d638 <__smakebuf_r+0x18>
 800d69c:	0800d40d 	.word	0x0800d40d

0800d6a0 <__malloc_lock>:
 800d6a0:	4801      	ldr	r0, [pc, #4]	; (800d6a8 <__malloc_lock+0x8>)
 800d6a2:	f7ff bf97 	b.w	800d5d4 <__retarget_lock_acquire_recursive>
 800d6a6:	bf00      	nop
 800d6a8:	24004dbc 	.word	0x24004dbc

0800d6ac <__malloc_unlock>:
 800d6ac:	4801      	ldr	r0, [pc, #4]	; (800d6b4 <__malloc_unlock+0x8>)
 800d6ae:	f7ff bf92 	b.w	800d5d6 <__retarget_lock_release_recursive>
 800d6b2:	bf00      	nop
 800d6b4:	24004dbc 	.word	0x24004dbc

0800d6b8 <__sfputc_r>:
 800d6b8:	6893      	ldr	r3, [r2, #8]
 800d6ba:	3b01      	subs	r3, #1
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	b410      	push	{r4}
 800d6c0:	6093      	str	r3, [r2, #8]
 800d6c2:	da08      	bge.n	800d6d6 <__sfputc_r+0x1e>
 800d6c4:	6994      	ldr	r4, [r2, #24]
 800d6c6:	42a3      	cmp	r3, r4
 800d6c8:	db01      	blt.n	800d6ce <__sfputc_r+0x16>
 800d6ca:	290a      	cmp	r1, #10
 800d6cc:	d103      	bne.n	800d6d6 <__sfputc_r+0x1e>
 800d6ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d6d2:	f7ff bcd7 	b.w	800d084 <__swbuf_r>
 800d6d6:	6813      	ldr	r3, [r2, #0]
 800d6d8:	1c58      	adds	r0, r3, #1
 800d6da:	6010      	str	r0, [r2, #0]
 800d6dc:	7019      	strb	r1, [r3, #0]
 800d6de:	4608      	mov	r0, r1
 800d6e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d6e4:	4770      	bx	lr

0800d6e6 <__sfputs_r>:
 800d6e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6e8:	4606      	mov	r6, r0
 800d6ea:	460f      	mov	r7, r1
 800d6ec:	4614      	mov	r4, r2
 800d6ee:	18d5      	adds	r5, r2, r3
 800d6f0:	42ac      	cmp	r4, r5
 800d6f2:	d101      	bne.n	800d6f8 <__sfputs_r+0x12>
 800d6f4:	2000      	movs	r0, #0
 800d6f6:	e007      	b.n	800d708 <__sfputs_r+0x22>
 800d6f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6fc:	463a      	mov	r2, r7
 800d6fe:	4630      	mov	r0, r6
 800d700:	f7ff ffda 	bl	800d6b8 <__sfputc_r>
 800d704:	1c43      	adds	r3, r0, #1
 800d706:	d1f3      	bne.n	800d6f0 <__sfputs_r+0xa>
 800d708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d70c <_vfiprintf_r>:
 800d70c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d710:	460d      	mov	r5, r1
 800d712:	b09d      	sub	sp, #116	; 0x74
 800d714:	4614      	mov	r4, r2
 800d716:	4698      	mov	r8, r3
 800d718:	4606      	mov	r6, r0
 800d71a:	b118      	cbz	r0, 800d724 <_vfiprintf_r+0x18>
 800d71c:	6983      	ldr	r3, [r0, #24]
 800d71e:	b90b      	cbnz	r3, 800d724 <_vfiprintf_r+0x18>
 800d720:	f7ff fea8 	bl	800d474 <__sinit>
 800d724:	4b89      	ldr	r3, [pc, #548]	; (800d94c <_vfiprintf_r+0x240>)
 800d726:	429d      	cmp	r5, r3
 800d728:	d11b      	bne.n	800d762 <_vfiprintf_r+0x56>
 800d72a:	6875      	ldr	r5, [r6, #4]
 800d72c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d72e:	07d9      	lsls	r1, r3, #31
 800d730:	d405      	bmi.n	800d73e <_vfiprintf_r+0x32>
 800d732:	89ab      	ldrh	r3, [r5, #12]
 800d734:	059a      	lsls	r2, r3, #22
 800d736:	d402      	bmi.n	800d73e <_vfiprintf_r+0x32>
 800d738:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d73a:	f7ff ff4b 	bl	800d5d4 <__retarget_lock_acquire_recursive>
 800d73e:	89ab      	ldrh	r3, [r5, #12]
 800d740:	071b      	lsls	r3, r3, #28
 800d742:	d501      	bpl.n	800d748 <_vfiprintf_r+0x3c>
 800d744:	692b      	ldr	r3, [r5, #16]
 800d746:	b9eb      	cbnz	r3, 800d784 <_vfiprintf_r+0x78>
 800d748:	4629      	mov	r1, r5
 800d74a:	4630      	mov	r0, r6
 800d74c:	f7ff fcec 	bl	800d128 <__swsetup_r>
 800d750:	b1c0      	cbz	r0, 800d784 <_vfiprintf_r+0x78>
 800d752:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d754:	07dc      	lsls	r4, r3, #31
 800d756:	d50e      	bpl.n	800d776 <_vfiprintf_r+0x6a>
 800d758:	f04f 30ff 	mov.w	r0, #4294967295
 800d75c:	b01d      	add	sp, #116	; 0x74
 800d75e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d762:	4b7b      	ldr	r3, [pc, #492]	; (800d950 <_vfiprintf_r+0x244>)
 800d764:	429d      	cmp	r5, r3
 800d766:	d101      	bne.n	800d76c <_vfiprintf_r+0x60>
 800d768:	68b5      	ldr	r5, [r6, #8]
 800d76a:	e7df      	b.n	800d72c <_vfiprintf_r+0x20>
 800d76c:	4b79      	ldr	r3, [pc, #484]	; (800d954 <_vfiprintf_r+0x248>)
 800d76e:	429d      	cmp	r5, r3
 800d770:	bf08      	it	eq
 800d772:	68f5      	ldreq	r5, [r6, #12]
 800d774:	e7da      	b.n	800d72c <_vfiprintf_r+0x20>
 800d776:	89ab      	ldrh	r3, [r5, #12]
 800d778:	0598      	lsls	r0, r3, #22
 800d77a:	d4ed      	bmi.n	800d758 <_vfiprintf_r+0x4c>
 800d77c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d77e:	f7ff ff2a 	bl	800d5d6 <__retarget_lock_release_recursive>
 800d782:	e7e9      	b.n	800d758 <_vfiprintf_r+0x4c>
 800d784:	2300      	movs	r3, #0
 800d786:	9309      	str	r3, [sp, #36]	; 0x24
 800d788:	2320      	movs	r3, #32
 800d78a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d78e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d792:	2330      	movs	r3, #48	; 0x30
 800d794:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d958 <_vfiprintf_r+0x24c>
 800d798:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d79c:	f04f 0901 	mov.w	r9, #1
 800d7a0:	4623      	mov	r3, r4
 800d7a2:	469a      	mov	sl, r3
 800d7a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d7a8:	b10a      	cbz	r2, 800d7ae <_vfiprintf_r+0xa2>
 800d7aa:	2a25      	cmp	r2, #37	; 0x25
 800d7ac:	d1f9      	bne.n	800d7a2 <_vfiprintf_r+0x96>
 800d7ae:	ebba 0b04 	subs.w	fp, sl, r4
 800d7b2:	d00b      	beq.n	800d7cc <_vfiprintf_r+0xc0>
 800d7b4:	465b      	mov	r3, fp
 800d7b6:	4622      	mov	r2, r4
 800d7b8:	4629      	mov	r1, r5
 800d7ba:	4630      	mov	r0, r6
 800d7bc:	f7ff ff93 	bl	800d6e6 <__sfputs_r>
 800d7c0:	3001      	adds	r0, #1
 800d7c2:	f000 80aa 	beq.w	800d91a <_vfiprintf_r+0x20e>
 800d7c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d7c8:	445a      	add	r2, fp
 800d7ca:	9209      	str	r2, [sp, #36]	; 0x24
 800d7cc:	f89a 3000 	ldrb.w	r3, [sl]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	f000 80a2 	beq.w	800d91a <_vfiprintf_r+0x20e>
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	f04f 32ff 	mov.w	r2, #4294967295
 800d7dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d7e0:	f10a 0a01 	add.w	sl, sl, #1
 800d7e4:	9304      	str	r3, [sp, #16]
 800d7e6:	9307      	str	r3, [sp, #28]
 800d7e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d7ec:	931a      	str	r3, [sp, #104]	; 0x68
 800d7ee:	4654      	mov	r4, sl
 800d7f0:	2205      	movs	r2, #5
 800d7f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7f6:	4858      	ldr	r0, [pc, #352]	; (800d958 <_vfiprintf_r+0x24c>)
 800d7f8:	f7f2 fd72 	bl	80002e0 <memchr>
 800d7fc:	9a04      	ldr	r2, [sp, #16]
 800d7fe:	b9d8      	cbnz	r0, 800d838 <_vfiprintf_r+0x12c>
 800d800:	06d1      	lsls	r1, r2, #27
 800d802:	bf44      	itt	mi
 800d804:	2320      	movmi	r3, #32
 800d806:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d80a:	0713      	lsls	r3, r2, #28
 800d80c:	bf44      	itt	mi
 800d80e:	232b      	movmi	r3, #43	; 0x2b
 800d810:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d814:	f89a 3000 	ldrb.w	r3, [sl]
 800d818:	2b2a      	cmp	r3, #42	; 0x2a
 800d81a:	d015      	beq.n	800d848 <_vfiprintf_r+0x13c>
 800d81c:	9a07      	ldr	r2, [sp, #28]
 800d81e:	4654      	mov	r4, sl
 800d820:	2000      	movs	r0, #0
 800d822:	f04f 0c0a 	mov.w	ip, #10
 800d826:	4621      	mov	r1, r4
 800d828:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d82c:	3b30      	subs	r3, #48	; 0x30
 800d82e:	2b09      	cmp	r3, #9
 800d830:	d94e      	bls.n	800d8d0 <_vfiprintf_r+0x1c4>
 800d832:	b1b0      	cbz	r0, 800d862 <_vfiprintf_r+0x156>
 800d834:	9207      	str	r2, [sp, #28]
 800d836:	e014      	b.n	800d862 <_vfiprintf_r+0x156>
 800d838:	eba0 0308 	sub.w	r3, r0, r8
 800d83c:	fa09 f303 	lsl.w	r3, r9, r3
 800d840:	4313      	orrs	r3, r2
 800d842:	9304      	str	r3, [sp, #16]
 800d844:	46a2      	mov	sl, r4
 800d846:	e7d2      	b.n	800d7ee <_vfiprintf_r+0xe2>
 800d848:	9b03      	ldr	r3, [sp, #12]
 800d84a:	1d19      	adds	r1, r3, #4
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	9103      	str	r1, [sp, #12]
 800d850:	2b00      	cmp	r3, #0
 800d852:	bfbb      	ittet	lt
 800d854:	425b      	neglt	r3, r3
 800d856:	f042 0202 	orrlt.w	r2, r2, #2
 800d85a:	9307      	strge	r3, [sp, #28]
 800d85c:	9307      	strlt	r3, [sp, #28]
 800d85e:	bfb8      	it	lt
 800d860:	9204      	strlt	r2, [sp, #16]
 800d862:	7823      	ldrb	r3, [r4, #0]
 800d864:	2b2e      	cmp	r3, #46	; 0x2e
 800d866:	d10c      	bne.n	800d882 <_vfiprintf_r+0x176>
 800d868:	7863      	ldrb	r3, [r4, #1]
 800d86a:	2b2a      	cmp	r3, #42	; 0x2a
 800d86c:	d135      	bne.n	800d8da <_vfiprintf_r+0x1ce>
 800d86e:	9b03      	ldr	r3, [sp, #12]
 800d870:	1d1a      	adds	r2, r3, #4
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	9203      	str	r2, [sp, #12]
 800d876:	2b00      	cmp	r3, #0
 800d878:	bfb8      	it	lt
 800d87a:	f04f 33ff 	movlt.w	r3, #4294967295
 800d87e:	3402      	adds	r4, #2
 800d880:	9305      	str	r3, [sp, #20]
 800d882:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d968 <_vfiprintf_r+0x25c>
 800d886:	7821      	ldrb	r1, [r4, #0]
 800d888:	2203      	movs	r2, #3
 800d88a:	4650      	mov	r0, sl
 800d88c:	f7f2 fd28 	bl	80002e0 <memchr>
 800d890:	b140      	cbz	r0, 800d8a4 <_vfiprintf_r+0x198>
 800d892:	2340      	movs	r3, #64	; 0x40
 800d894:	eba0 000a 	sub.w	r0, r0, sl
 800d898:	fa03 f000 	lsl.w	r0, r3, r0
 800d89c:	9b04      	ldr	r3, [sp, #16]
 800d89e:	4303      	orrs	r3, r0
 800d8a0:	3401      	adds	r4, #1
 800d8a2:	9304      	str	r3, [sp, #16]
 800d8a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8a8:	482c      	ldr	r0, [pc, #176]	; (800d95c <_vfiprintf_r+0x250>)
 800d8aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d8ae:	2206      	movs	r2, #6
 800d8b0:	f7f2 fd16 	bl	80002e0 <memchr>
 800d8b4:	2800      	cmp	r0, #0
 800d8b6:	d03f      	beq.n	800d938 <_vfiprintf_r+0x22c>
 800d8b8:	4b29      	ldr	r3, [pc, #164]	; (800d960 <_vfiprintf_r+0x254>)
 800d8ba:	bb1b      	cbnz	r3, 800d904 <_vfiprintf_r+0x1f8>
 800d8bc:	9b03      	ldr	r3, [sp, #12]
 800d8be:	3307      	adds	r3, #7
 800d8c0:	f023 0307 	bic.w	r3, r3, #7
 800d8c4:	3308      	adds	r3, #8
 800d8c6:	9303      	str	r3, [sp, #12]
 800d8c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8ca:	443b      	add	r3, r7
 800d8cc:	9309      	str	r3, [sp, #36]	; 0x24
 800d8ce:	e767      	b.n	800d7a0 <_vfiprintf_r+0x94>
 800d8d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d8d4:	460c      	mov	r4, r1
 800d8d6:	2001      	movs	r0, #1
 800d8d8:	e7a5      	b.n	800d826 <_vfiprintf_r+0x11a>
 800d8da:	2300      	movs	r3, #0
 800d8dc:	3401      	adds	r4, #1
 800d8de:	9305      	str	r3, [sp, #20]
 800d8e0:	4619      	mov	r1, r3
 800d8e2:	f04f 0c0a 	mov.w	ip, #10
 800d8e6:	4620      	mov	r0, r4
 800d8e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d8ec:	3a30      	subs	r2, #48	; 0x30
 800d8ee:	2a09      	cmp	r2, #9
 800d8f0:	d903      	bls.n	800d8fa <_vfiprintf_r+0x1ee>
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d0c5      	beq.n	800d882 <_vfiprintf_r+0x176>
 800d8f6:	9105      	str	r1, [sp, #20]
 800d8f8:	e7c3      	b.n	800d882 <_vfiprintf_r+0x176>
 800d8fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800d8fe:	4604      	mov	r4, r0
 800d900:	2301      	movs	r3, #1
 800d902:	e7f0      	b.n	800d8e6 <_vfiprintf_r+0x1da>
 800d904:	ab03      	add	r3, sp, #12
 800d906:	9300      	str	r3, [sp, #0]
 800d908:	462a      	mov	r2, r5
 800d90a:	4b16      	ldr	r3, [pc, #88]	; (800d964 <_vfiprintf_r+0x258>)
 800d90c:	a904      	add	r1, sp, #16
 800d90e:	4630      	mov	r0, r6
 800d910:	f3af 8000 	nop.w
 800d914:	4607      	mov	r7, r0
 800d916:	1c78      	adds	r0, r7, #1
 800d918:	d1d6      	bne.n	800d8c8 <_vfiprintf_r+0x1bc>
 800d91a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d91c:	07d9      	lsls	r1, r3, #31
 800d91e:	d405      	bmi.n	800d92c <_vfiprintf_r+0x220>
 800d920:	89ab      	ldrh	r3, [r5, #12]
 800d922:	059a      	lsls	r2, r3, #22
 800d924:	d402      	bmi.n	800d92c <_vfiprintf_r+0x220>
 800d926:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d928:	f7ff fe55 	bl	800d5d6 <__retarget_lock_release_recursive>
 800d92c:	89ab      	ldrh	r3, [r5, #12]
 800d92e:	065b      	lsls	r3, r3, #25
 800d930:	f53f af12 	bmi.w	800d758 <_vfiprintf_r+0x4c>
 800d934:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d936:	e711      	b.n	800d75c <_vfiprintf_r+0x50>
 800d938:	ab03      	add	r3, sp, #12
 800d93a:	9300      	str	r3, [sp, #0]
 800d93c:	462a      	mov	r2, r5
 800d93e:	4b09      	ldr	r3, [pc, #36]	; (800d964 <_vfiprintf_r+0x258>)
 800d940:	a904      	add	r1, sp, #16
 800d942:	4630      	mov	r0, r6
 800d944:	f000 f880 	bl	800da48 <_printf_i>
 800d948:	e7e4      	b.n	800d914 <_vfiprintf_r+0x208>
 800d94a:	bf00      	nop
 800d94c:	0800e174 	.word	0x0800e174
 800d950:	0800e194 	.word	0x0800e194
 800d954:	0800e154 	.word	0x0800e154
 800d958:	0800e1b4 	.word	0x0800e1b4
 800d95c:	0800e1be 	.word	0x0800e1be
 800d960:	00000000 	.word	0x00000000
 800d964:	0800d6e7 	.word	0x0800d6e7
 800d968:	0800e1ba 	.word	0x0800e1ba

0800d96c <_printf_common>:
 800d96c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d970:	4616      	mov	r6, r2
 800d972:	4699      	mov	r9, r3
 800d974:	688a      	ldr	r2, [r1, #8]
 800d976:	690b      	ldr	r3, [r1, #16]
 800d978:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d97c:	4293      	cmp	r3, r2
 800d97e:	bfb8      	it	lt
 800d980:	4613      	movlt	r3, r2
 800d982:	6033      	str	r3, [r6, #0]
 800d984:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d988:	4607      	mov	r7, r0
 800d98a:	460c      	mov	r4, r1
 800d98c:	b10a      	cbz	r2, 800d992 <_printf_common+0x26>
 800d98e:	3301      	adds	r3, #1
 800d990:	6033      	str	r3, [r6, #0]
 800d992:	6823      	ldr	r3, [r4, #0]
 800d994:	0699      	lsls	r1, r3, #26
 800d996:	bf42      	ittt	mi
 800d998:	6833      	ldrmi	r3, [r6, #0]
 800d99a:	3302      	addmi	r3, #2
 800d99c:	6033      	strmi	r3, [r6, #0]
 800d99e:	6825      	ldr	r5, [r4, #0]
 800d9a0:	f015 0506 	ands.w	r5, r5, #6
 800d9a4:	d106      	bne.n	800d9b4 <_printf_common+0x48>
 800d9a6:	f104 0a19 	add.w	sl, r4, #25
 800d9aa:	68e3      	ldr	r3, [r4, #12]
 800d9ac:	6832      	ldr	r2, [r6, #0]
 800d9ae:	1a9b      	subs	r3, r3, r2
 800d9b0:	42ab      	cmp	r3, r5
 800d9b2:	dc26      	bgt.n	800da02 <_printf_common+0x96>
 800d9b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d9b8:	1e13      	subs	r3, r2, #0
 800d9ba:	6822      	ldr	r2, [r4, #0]
 800d9bc:	bf18      	it	ne
 800d9be:	2301      	movne	r3, #1
 800d9c0:	0692      	lsls	r2, r2, #26
 800d9c2:	d42b      	bmi.n	800da1c <_printf_common+0xb0>
 800d9c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d9c8:	4649      	mov	r1, r9
 800d9ca:	4638      	mov	r0, r7
 800d9cc:	47c0      	blx	r8
 800d9ce:	3001      	adds	r0, #1
 800d9d0:	d01e      	beq.n	800da10 <_printf_common+0xa4>
 800d9d2:	6823      	ldr	r3, [r4, #0]
 800d9d4:	68e5      	ldr	r5, [r4, #12]
 800d9d6:	6832      	ldr	r2, [r6, #0]
 800d9d8:	f003 0306 	and.w	r3, r3, #6
 800d9dc:	2b04      	cmp	r3, #4
 800d9de:	bf08      	it	eq
 800d9e0:	1aad      	subeq	r5, r5, r2
 800d9e2:	68a3      	ldr	r3, [r4, #8]
 800d9e4:	6922      	ldr	r2, [r4, #16]
 800d9e6:	bf0c      	ite	eq
 800d9e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d9ec:	2500      	movne	r5, #0
 800d9ee:	4293      	cmp	r3, r2
 800d9f0:	bfc4      	itt	gt
 800d9f2:	1a9b      	subgt	r3, r3, r2
 800d9f4:	18ed      	addgt	r5, r5, r3
 800d9f6:	2600      	movs	r6, #0
 800d9f8:	341a      	adds	r4, #26
 800d9fa:	42b5      	cmp	r5, r6
 800d9fc:	d11a      	bne.n	800da34 <_printf_common+0xc8>
 800d9fe:	2000      	movs	r0, #0
 800da00:	e008      	b.n	800da14 <_printf_common+0xa8>
 800da02:	2301      	movs	r3, #1
 800da04:	4652      	mov	r2, sl
 800da06:	4649      	mov	r1, r9
 800da08:	4638      	mov	r0, r7
 800da0a:	47c0      	blx	r8
 800da0c:	3001      	adds	r0, #1
 800da0e:	d103      	bne.n	800da18 <_printf_common+0xac>
 800da10:	f04f 30ff 	mov.w	r0, #4294967295
 800da14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da18:	3501      	adds	r5, #1
 800da1a:	e7c6      	b.n	800d9aa <_printf_common+0x3e>
 800da1c:	18e1      	adds	r1, r4, r3
 800da1e:	1c5a      	adds	r2, r3, #1
 800da20:	2030      	movs	r0, #48	; 0x30
 800da22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800da26:	4422      	add	r2, r4
 800da28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800da2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800da30:	3302      	adds	r3, #2
 800da32:	e7c7      	b.n	800d9c4 <_printf_common+0x58>
 800da34:	2301      	movs	r3, #1
 800da36:	4622      	mov	r2, r4
 800da38:	4649      	mov	r1, r9
 800da3a:	4638      	mov	r0, r7
 800da3c:	47c0      	blx	r8
 800da3e:	3001      	adds	r0, #1
 800da40:	d0e6      	beq.n	800da10 <_printf_common+0xa4>
 800da42:	3601      	adds	r6, #1
 800da44:	e7d9      	b.n	800d9fa <_printf_common+0x8e>
	...

0800da48 <_printf_i>:
 800da48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800da4c:	460c      	mov	r4, r1
 800da4e:	4691      	mov	r9, r2
 800da50:	7e27      	ldrb	r7, [r4, #24]
 800da52:	990c      	ldr	r1, [sp, #48]	; 0x30
 800da54:	2f78      	cmp	r7, #120	; 0x78
 800da56:	4680      	mov	r8, r0
 800da58:	469a      	mov	sl, r3
 800da5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800da5e:	d807      	bhi.n	800da70 <_printf_i+0x28>
 800da60:	2f62      	cmp	r7, #98	; 0x62
 800da62:	d80a      	bhi.n	800da7a <_printf_i+0x32>
 800da64:	2f00      	cmp	r7, #0
 800da66:	f000 80d8 	beq.w	800dc1a <_printf_i+0x1d2>
 800da6a:	2f58      	cmp	r7, #88	; 0x58
 800da6c:	f000 80a3 	beq.w	800dbb6 <_printf_i+0x16e>
 800da70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800da74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800da78:	e03a      	b.n	800daf0 <_printf_i+0xa8>
 800da7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800da7e:	2b15      	cmp	r3, #21
 800da80:	d8f6      	bhi.n	800da70 <_printf_i+0x28>
 800da82:	a001      	add	r0, pc, #4	; (adr r0, 800da88 <_printf_i+0x40>)
 800da84:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800da88:	0800dae1 	.word	0x0800dae1
 800da8c:	0800daf5 	.word	0x0800daf5
 800da90:	0800da71 	.word	0x0800da71
 800da94:	0800da71 	.word	0x0800da71
 800da98:	0800da71 	.word	0x0800da71
 800da9c:	0800da71 	.word	0x0800da71
 800daa0:	0800daf5 	.word	0x0800daf5
 800daa4:	0800da71 	.word	0x0800da71
 800daa8:	0800da71 	.word	0x0800da71
 800daac:	0800da71 	.word	0x0800da71
 800dab0:	0800da71 	.word	0x0800da71
 800dab4:	0800dc01 	.word	0x0800dc01
 800dab8:	0800db25 	.word	0x0800db25
 800dabc:	0800dbe3 	.word	0x0800dbe3
 800dac0:	0800da71 	.word	0x0800da71
 800dac4:	0800da71 	.word	0x0800da71
 800dac8:	0800dc23 	.word	0x0800dc23
 800dacc:	0800da71 	.word	0x0800da71
 800dad0:	0800db25 	.word	0x0800db25
 800dad4:	0800da71 	.word	0x0800da71
 800dad8:	0800da71 	.word	0x0800da71
 800dadc:	0800dbeb 	.word	0x0800dbeb
 800dae0:	680b      	ldr	r3, [r1, #0]
 800dae2:	1d1a      	adds	r2, r3, #4
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	600a      	str	r2, [r1, #0]
 800dae8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800daec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800daf0:	2301      	movs	r3, #1
 800daf2:	e0a3      	b.n	800dc3c <_printf_i+0x1f4>
 800daf4:	6825      	ldr	r5, [r4, #0]
 800daf6:	6808      	ldr	r0, [r1, #0]
 800daf8:	062e      	lsls	r6, r5, #24
 800dafa:	f100 0304 	add.w	r3, r0, #4
 800dafe:	d50a      	bpl.n	800db16 <_printf_i+0xce>
 800db00:	6805      	ldr	r5, [r0, #0]
 800db02:	600b      	str	r3, [r1, #0]
 800db04:	2d00      	cmp	r5, #0
 800db06:	da03      	bge.n	800db10 <_printf_i+0xc8>
 800db08:	232d      	movs	r3, #45	; 0x2d
 800db0a:	426d      	negs	r5, r5
 800db0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db10:	485e      	ldr	r0, [pc, #376]	; (800dc8c <_printf_i+0x244>)
 800db12:	230a      	movs	r3, #10
 800db14:	e019      	b.n	800db4a <_printf_i+0x102>
 800db16:	f015 0f40 	tst.w	r5, #64	; 0x40
 800db1a:	6805      	ldr	r5, [r0, #0]
 800db1c:	600b      	str	r3, [r1, #0]
 800db1e:	bf18      	it	ne
 800db20:	b22d      	sxthne	r5, r5
 800db22:	e7ef      	b.n	800db04 <_printf_i+0xbc>
 800db24:	680b      	ldr	r3, [r1, #0]
 800db26:	6825      	ldr	r5, [r4, #0]
 800db28:	1d18      	adds	r0, r3, #4
 800db2a:	6008      	str	r0, [r1, #0]
 800db2c:	0628      	lsls	r0, r5, #24
 800db2e:	d501      	bpl.n	800db34 <_printf_i+0xec>
 800db30:	681d      	ldr	r5, [r3, #0]
 800db32:	e002      	b.n	800db3a <_printf_i+0xf2>
 800db34:	0669      	lsls	r1, r5, #25
 800db36:	d5fb      	bpl.n	800db30 <_printf_i+0xe8>
 800db38:	881d      	ldrh	r5, [r3, #0]
 800db3a:	4854      	ldr	r0, [pc, #336]	; (800dc8c <_printf_i+0x244>)
 800db3c:	2f6f      	cmp	r7, #111	; 0x6f
 800db3e:	bf0c      	ite	eq
 800db40:	2308      	moveq	r3, #8
 800db42:	230a      	movne	r3, #10
 800db44:	2100      	movs	r1, #0
 800db46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800db4a:	6866      	ldr	r6, [r4, #4]
 800db4c:	60a6      	str	r6, [r4, #8]
 800db4e:	2e00      	cmp	r6, #0
 800db50:	bfa2      	ittt	ge
 800db52:	6821      	ldrge	r1, [r4, #0]
 800db54:	f021 0104 	bicge.w	r1, r1, #4
 800db58:	6021      	strge	r1, [r4, #0]
 800db5a:	b90d      	cbnz	r5, 800db60 <_printf_i+0x118>
 800db5c:	2e00      	cmp	r6, #0
 800db5e:	d04d      	beq.n	800dbfc <_printf_i+0x1b4>
 800db60:	4616      	mov	r6, r2
 800db62:	fbb5 f1f3 	udiv	r1, r5, r3
 800db66:	fb03 5711 	mls	r7, r3, r1, r5
 800db6a:	5dc7      	ldrb	r7, [r0, r7]
 800db6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800db70:	462f      	mov	r7, r5
 800db72:	42bb      	cmp	r3, r7
 800db74:	460d      	mov	r5, r1
 800db76:	d9f4      	bls.n	800db62 <_printf_i+0x11a>
 800db78:	2b08      	cmp	r3, #8
 800db7a:	d10b      	bne.n	800db94 <_printf_i+0x14c>
 800db7c:	6823      	ldr	r3, [r4, #0]
 800db7e:	07df      	lsls	r7, r3, #31
 800db80:	d508      	bpl.n	800db94 <_printf_i+0x14c>
 800db82:	6923      	ldr	r3, [r4, #16]
 800db84:	6861      	ldr	r1, [r4, #4]
 800db86:	4299      	cmp	r1, r3
 800db88:	bfde      	ittt	le
 800db8a:	2330      	movle	r3, #48	; 0x30
 800db8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800db90:	f106 36ff 	addle.w	r6, r6, #4294967295
 800db94:	1b92      	subs	r2, r2, r6
 800db96:	6122      	str	r2, [r4, #16]
 800db98:	f8cd a000 	str.w	sl, [sp]
 800db9c:	464b      	mov	r3, r9
 800db9e:	aa03      	add	r2, sp, #12
 800dba0:	4621      	mov	r1, r4
 800dba2:	4640      	mov	r0, r8
 800dba4:	f7ff fee2 	bl	800d96c <_printf_common>
 800dba8:	3001      	adds	r0, #1
 800dbaa:	d14c      	bne.n	800dc46 <_printf_i+0x1fe>
 800dbac:	f04f 30ff 	mov.w	r0, #4294967295
 800dbb0:	b004      	add	sp, #16
 800dbb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbb6:	4835      	ldr	r0, [pc, #212]	; (800dc8c <_printf_i+0x244>)
 800dbb8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800dbbc:	6823      	ldr	r3, [r4, #0]
 800dbbe:	680e      	ldr	r6, [r1, #0]
 800dbc0:	061f      	lsls	r7, r3, #24
 800dbc2:	f856 5b04 	ldr.w	r5, [r6], #4
 800dbc6:	600e      	str	r6, [r1, #0]
 800dbc8:	d514      	bpl.n	800dbf4 <_printf_i+0x1ac>
 800dbca:	07d9      	lsls	r1, r3, #31
 800dbcc:	bf44      	itt	mi
 800dbce:	f043 0320 	orrmi.w	r3, r3, #32
 800dbd2:	6023      	strmi	r3, [r4, #0]
 800dbd4:	b91d      	cbnz	r5, 800dbde <_printf_i+0x196>
 800dbd6:	6823      	ldr	r3, [r4, #0]
 800dbd8:	f023 0320 	bic.w	r3, r3, #32
 800dbdc:	6023      	str	r3, [r4, #0]
 800dbde:	2310      	movs	r3, #16
 800dbe0:	e7b0      	b.n	800db44 <_printf_i+0xfc>
 800dbe2:	6823      	ldr	r3, [r4, #0]
 800dbe4:	f043 0320 	orr.w	r3, r3, #32
 800dbe8:	6023      	str	r3, [r4, #0]
 800dbea:	2378      	movs	r3, #120	; 0x78
 800dbec:	4828      	ldr	r0, [pc, #160]	; (800dc90 <_printf_i+0x248>)
 800dbee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dbf2:	e7e3      	b.n	800dbbc <_printf_i+0x174>
 800dbf4:	065e      	lsls	r6, r3, #25
 800dbf6:	bf48      	it	mi
 800dbf8:	b2ad      	uxthmi	r5, r5
 800dbfa:	e7e6      	b.n	800dbca <_printf_i+0x182>
 800dbfc:	4616      	mov	r6, r2
 800dbfe:	e7bb      	b.n	800db78 <_printf_i+0x130>
 800dc00:	680b      	ldr	r3, [r1, #0]
 800dc02:	6826      	ldr	r6, [r4, #0]
 800dc04:	6960      	ldr	r0, [r4, #20]
 800dc06:	1d1d      	adds	r5, r3, #4
 800dc08:	600d      	str	r5, [r1, #0]
 800dc0a:	0635      	lsls	r5, r6, #24
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	d501      	bpl.n	800dc14 <_printf_i+0x1cc>
 800dc10:	6018      	str	r0, [r3, #0]
 800dc12:	e002      	b.n	800dc1a <_printf_i+0x1d2>
 800dc14:	0671      	lsls	r1, r6, #25
 800dc16:	d5fb      	bpl.n	800dc10 <_printf_i+0x1c8>
 800dc18:	8018      	strh	r0, [r3, #0]
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	6123      	str	r3, [r4, #16]
 800dc1e:	4616      	mov	r6, r2
 800dc20:	e7ba      	b.n	800db98 <_printf_i+0x150>
 800dc22:	680b      	ldr	r3, [r1, #0]
 800dc24:	1d1a      	adds	r2, r3, #4
 800dc26:	600a      	str	r2, [r1, #0]
 800dc28:	681e      	ldr	r6, [r3, #0]
 800dc2a:	6862      	ldr	r2, [r4, #4]
 800dc2c:	2100      	movs	r1, #0
 800dc2e:	4630      	mov	r0, r6
 800dc30:	f7f2 fb56 	bl	80002e0 <memchr>
 800dc34:	b108      	cbz	r0, 800dc3a <_printf_i+0x1f2>
 800dc36:	1b80      	subs	r0, r0, r6
 800dc38:	6060      	str	r0, [r4, #4]
 800dc3a:	6863      	ldr	r3, [r4, #4]
 800dc3c:	6123      	str	r3, [r4, #16]
 800dc3e:	2300      	movs	r3, #0
 800dc40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dc44:	e7a8      	b.n	800db98 <_printf_i+0x150>
 800dc46:	6923      	ldr	r3, [r4, #16]
 800dc48:	4632      	mov	r2, r6
 800dc4a:	4649      	mov	r1, r9
 800dc4c:	4640      	mov	r0, r8
 800dc4e:	47d0      	blx	sl
 800dc50:	3001      	adds	r0, #1
 800dc52:	d0ab      	beq.n	800dbac <_printf_i+0x164>
 800dc54:	6823      	ldr	r3, [r4, #0]
 800dc56:	079b      	lsls	r3, r3, #30
 800dc58:	d413      	bmi.n	800dc82 <_printf_i+0x23a>
 800dc5a:	68e0      	ldr	r0, [r4, #12]
 800dc5c:	9b03      	ldr	r3, [sp, #12]
 800dc5e:	4298      	cmp	r0, r3
 800dc60:	bfb8      	it	lt
 800dc62:	4618      	movlt	r0, r3
 800dc64:	e7a4      	b.n	800dbb0 <_printf_i+0x168>
 800dc66:	2301      	movs	r3, #1
 800dc68:	4632      	mov	r2, r6
 800dc6a:	4649      	mov	r1, r9
 800dc6c:	4640      	mov	r0, r8
 800dc6e:	47d0      	blx	sl
 800dc70:	3001      	adds	r0, #1
 800dc72:	d09b      	beq.n	800dbac <_printf_i+0x164>
 800dc74:	3501      	adds	r5, #1
 800dc76:	68e3      	ldr	r3, [r4, #12]
 800dc78:	9903      	ldr	r1, [sp, #12]
 800dc7a:	1a5b      	subs	r3, r3, r1
 800dc7c:	42ab      	cmp	r3, r5
 800dc7e:	dcf2      	bgt.n	800dc66 <_printf_i+0x21e>
 800dc80:	e7eb      	b.n	800dc5a <_printf_i+0x212>
 800dc82:	2500      	movs	r5, #0
 800dc84:	f104 0619 	add.w	r6, r4, #25
 800dc88:	e7f5      	b.n	800dc76 <_printf_i+0x22e>
 800dc8a:	bf00      	nop
 800dc8c:	0800e1c5 	.word	0x0800e1c5
 800dc90:	0800e1d6 	.word	0x0800e1d6

0800dc94 <__sread>:
 800dc94:	b510      	push	{r4, lr}
 800dc96:	460c      	mov	r4, r1
 800dc98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc9c:	f000 f89c 	bl	800ddd8 <_read_r>
 800dca0:	2800      	cmp	r0, #0
 800dca2:	bfab      	itete	ge
 800dca4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dca6:	89a3      	ldrhlt	r3, [r4, #12]
 800dca8:	181b      	addge	r3, r3, r0
 800dcaa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dcae:	bfac      	ite	ge
 800dcb0:	6563      	strge	r3, [r4, #84]	; 0x54
 800dcb2:	81a3      	strhlt	r3, [r4, #12]
 800dcb4:	bd10      	pop	{r4, pc}

0800dcb6 <__swrite>:
 800dcb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcba:	461f      	mov	r7, r3
 800dcbc:	898b      	ldrh	r3, [r1, #12]
 800dcbe:	05db      	lsls	r3, r3, #23
 800dcc0:	4605      	mov	r5, r0
 800dcc2:	460c      	mov	r4, r1
 800dcc4:	4616      	mov	r6, r2
 800dcc6:	d505      	bpl.n	800dcd4 <__swrite+0x1e>
 800dcc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dccc:	2302      	movs	r3, #2
 800dcce:	2200      	movs	r2, #0
 800dcd0:	f000 f870 	bl	800ddb4 <_lseek_r>
 800dcd4:	89a3      	ldrh	r3, [r4, #12]
 800dcd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dcda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dcde:	81a3      	strh	r3, [r4, #12]
 800dce0:	4632      	mov	r2, r6
 800dce2:	463b      	mov	r3, r7
 800dce4:	4628      	mov	r0, r5
 800dce6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dcea:	f000 b817 	b.w	800dd1c <_write_r>

0800dcee <__sseek>:
 800dcee:	b510      	push	{r4, lr}
 800dcf0:	460c      	mov	r4, r1
 800dcf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcf6:	f000 f85d 	bl	800ddb4 <_lseek_r>
 800dcfa:	1c43      	adds	r3, r0, #1
 800dcfc:	89a3      	ldrh	r3, [r4, #12]
 800dcfe:	bf15      	itete	ne
 800dd00:	6560      	strne	r0, [r4, #84]	; 0x54
 800dd02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dd06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dd0a:	81a3      	strheq	r3, [r4, #12]
 800dd0c:	bf18      	it	ne
 800dd0e:	81a3      	strhne	r3, [r4, #12]
 800dd10:	bd10      	pop	{r4, pc}

0800dd12 <__sclose>:
 800dd12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd16:	f000 b81b 	b.w	800dd50 <_close_r>
	...

0800dd1c <_write_r>:
 800dd1c:	b538      	push	{r3, r4, r5, lr}
 800dd1e:	4d07      	ldr	r5, [pc, #28]	; (800dd3c <_write_r+0x20>)
 800dd20:	4604      	mov	r4, r0
 800dd22:	4608      	mov	r0, r1
 800dd24:	4611      	mov	r1, r2
 800dd26:	2200      	movs	r2, #0
 800dd28:	602a      	str	r2, [r5, #0]
 800dd2a:	461a      	mov	r2, r3
 800dd2c:	f7f3 fbbd 	bl	80014aa <_write>
 800dd30:	1c43      	adds	r3, r0, #1
 800dd32:	d102      	bne.n	800dd3a <_write_r+0x1e>
 800dd34:	682b      	ldr	r3, [r5, #0]
 800dd36:	b103      	cbz	r3, 800dd3a <_write_r+0x1e>
 800dd38:	6023      	str	r3, [r4, #0]
 800dd3a:	bd38      	pop	{r3, r4, r5, pc}
 800dd3c:	24004db0 	.word	0x24004db0

0800dd40 <abort>:
 800dd40:	b508      	push	{r3, lr}
 800dd42:	2006      	movs	r0, #6
 800dd44:	f000 f882 	bl	800de4c <raise>
 800dd48:	2001      	movs	r0, #1
 800dd4a:	f7f3 fb87 	bl	800145c <_exit>
	...

0800dd50 <_close_r>:
 800dd50:	b538      	push	{r3, r4, r5, lr}
 800dd52:	4d06      	ldr	r5, [pc, #24]	; (800dd6c <_close_r+0x1c>)
 800dd54:	2300      	movs	r3, #0
 800dd56:	4604      	mov	r4, r0
 800dd58:	4608      	mov	r0, r1
 800dd5a:	602b      	str	r3, [r5, #0]
 800dd5c:	f7f3 fbc1 	bl	80014e2 <_close>
 800dd60:	1c43      	adds	r3, r0, #1
 800dd62:	d102      	bne.n	800dd6a <_close_r+0x1a>
 800dd64:	682b      	ldr	r3, [r5, #0]
 800dd66:	b103      	cbz	r3, 800dd6a <_close_r+0x1a>
 800dd68:	6023      	str	r3, [r4, #0]
 800dd6a:	bd38      	pop	{r3, r4, r5, pc}
 800dd6c:	24004db0 	.word	0x24004db0

0800dd70 <_fstat_r>:
 800dd70:	b538      	push	{r3, r4, r5, lr}
 800dd72:	4d07      	ldr	r5, [pc, #28]	; (800dd90 <_fstat_r+0x20>)
 800dd74:	2300      	movs	r3, #0
 800dd76:	4604      	mov	r4, r0
 800dd78:	4608      	mov	r0, r1
 800dd7a:	4611      	mov	r1, r2
 800dd7c:	602b      	str	r3, [r5, #0]
 800dd7e:	f7f3 fbbc 	bl	80014fa <_fstat>
 800dd82:	1c43      	adds	r3, r0, #1
 800dd84:	d102      	bne.n	800dd8c <_fstat_r+0x1c>
 800dd86:	682b      	ldr	r3, [r5, #0]
 800dd88:	b103      	cbz	r3, 800dd8c <_fstat_r+0x1c>
 800dd8a:	6023      	str	r3, [r4, #0]
 800dd8c:	bd38      	pop	{r3, r4, r5, pc}
 800dd8e:	bf00      	nop
 800dd90:	24004db0 	.word	0x24004db0

0800dd94 <_isatty_r>:
 800dd94:	b538      	push	{r3, r4, r5, lr}
 800dd96:	4d06      	ldr	r5, [pc, #24]	; (800ddb0 <_isatty_r+0x1c>)
 800dd98:	2300      	movs	r3, #0
 800dd9a:	4604      	mov	r4, r0
 800dd9c:	4608      	mov	r0, r1
 800dd9e:	602b      	str	r3, [r5, #0]
 800dda0:	f7f3 fbbb 	bl	800151a <_isatty>
 800dda4:	1c43      	adds	r3, r0, #1
 800dda6:	d102      	bne.n	800ddae <_isatty_r+0x1a>
 800dda8:	682b      	ldr	r3, [r5, #0]
 800ddaa:	b103      	cbz	r3, 800ddae <_isatty_r+0x1a>
 800ddac:	6023      	str	r3, [r4, #0]
 800ddae:	bd38      	pop	{r3, r4, r5, pc}
 800ddb0:	24004db0 	.word	0x24004db0

0800ddb4 <_lseek_r>:
 800ddb4:	b538      	push	{r3, r4, r5, lr}
 800ddb6:	4d07      	ldr	r5, [pc, #28]	; (800ddd4 <_lseek_r+0x20>)
 800ddb8:	4604      	mov	r4, r0
 800ddba:	4608      	mov	r0, r1
 800ddbc:	4611      	mov	r1, r2
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	602a      	str	r2, [r5, #0]
 800ddc2:	461a      	mov	r2, r3
 800ddc4:	f7f3 fbb4 	bl	8001530 <_lseek>
 800ddc8:	1c43      	adds	r3, r0, #1
 800ddca:	d102      	bne.n	800ddd2 <_lseek_r+0x1e>
 800ddcc:	682b      	ldr	r3, [r5, #0]
 800ddce:	b103      	cbz	r3, 800ddd2 <_lseek_r+0x1e>
 800ddd0:	6023      	str	r3, [r4, #0]
 800ddd2:	bd38      	pop	{r3, r4, r5, pc}
 800ddd4:	24004db0 	.word	0x24004db0

0800ddd8 <_read_r>:
 800ddd8:	b538      	push	{r3, r4, r5, lr}
 800ddda:	4d07      	ldr	r5, [pc, #28]	; (800ddf8 <_read_r+0x20>)
 800dddc:	4604      	mov	r4, r0
 800ddde:	4608      	mov	r0, r1
 800dde0:	4611      	mov	r1, r2
 800dde2:	2200      	movs	r2, #0
 800dde4:	602a      	str	r2, [r5, #0]
 800dde6:	461a      	mov	r2, r3
 800dde8:	f7f3 fb42 	bl	8001470 <_read>
 800ddec:	1c43      	adds	r3, r0, #1
 800ddee:	d102      	bne.n	800ddf6 <_read_r+0x1e>
 800ddf0:	682b      	ldr	r3, [r5, #0]
 800ddf2:	b103      	cbz	r3, 800ddf6 <_read_r+0x1e>
 800ddf4:	6023      	str	r3, [r4, #0]
 800ddf6:	bd38      	pop	{r3, r4, r5, pc}
 800ddf8:	24004db0 	.word	0x24004db0

0800ddfc <_raise_r>:
 800ddfc:	291f      	cmp	r1, #31
 800ddfe:	b538      	push	{r3, r4, r5, lr}
 800de00:	4604      	mov	r4, r0
 800de02:	460d      	mov	r5, r1
 800de04:	d904      	bls.n	800de10 <_raise_r+0x14>
 800de06:	2316      	movs	r3, #22
 800de08:	6003      	str	r3, [r0, #0]
 800de0a:	f04f 30ff 	mov.w	r0, #4294967295
 800de0e:	bd38      	pop	{r3, r4, r5, pc}
 800de10:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800de12:	b112      	cbz	r2, 800de1a <_raise_r+0x1e>
 800de14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800de18:	b94b      	cbnz	r3, 800de2e <_raise_r+0x32>
 800de1a:	4620      	mov	r0, r4
 800de1c:	f000 f830 	bl	800de80 <_getpid_r>
 800de20:	462a      	mov	r2, r5
 800de22:	4601      	mov	r1, r0
 800de24:	4620      	mov	r0, r4
 800de26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de2a:	f000 b817 	b.w	800de5c <_kill_r>
 800de2e:	2b01      	cmp	r3, #1
 800de30:	d00a      	beq.n	800de48 <_raise_r+0x4c>
 800de32:	1c59      	adds	r1, r3, #1
 800de34:	d103      	bne.n	800de3e <_raise_r+0x42>
 800de36:	2316      	movs	r3, #22
 800de38:	6003      	str	r3, [r0, #0]
 800de3a:	2001      	movs	r0, #1
 800de3c:	e7e7      	b.n	800de0e <_raise_r+0x12>
 800de3e:	2400      	movs	r4, #0
 800de40:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800de44:	4628      	mov	r0, r5
 800de46:	4798      	blx	r3
 800de48:	2000      	movs	r0, #0
 800de4a:	e7e0      	b.n	800de0e <_raise_r+0x12>

0800de4c <raise>:
 800de4c:	4b02      	ldr	r3, [pc, #8]	; (800de58 <raise+0xc>)
 800de4e:	4601      	mov	r1, r0
 800de50:	6818      	ldr	r0, [r3, #0]
 800de52:	f7ff bfd3 	b.w	800ddfc <_raise_r>
 800de56:	bf00      	nop
 800de58:	24000014 	.word	0x24000014

0800de5c <_kill_r>:
 800de5c:	b538      	push	{r3, r4, r5, lr}
 800de5e:	4d07      	ldr	r5, [pc, #28]	; (800de7c <_kill_r+0x20>)
 800de60:	2300      	movs	r3, #0
 800de62:	4604      	mov	r4, r0
 800de64:	4608      	mov	r0, r1
 800de66:	4611      	mov	r1, r2
 800de68:	602b      	str	r3, [r5, #0]
 800de6a:	f7f3 fae5 	bl	8001438 <_kill>
 800de6e:	1c43      	adds	r3, r0, #1
 800de70:	d102      	bne.n	800de78 <_kill_r+0x1c>
 800de72:	682b      	ldr	r3, [r5, #0]
 800de74:	b103      	cbz	r3, 800de78 <_kill_r+0x1c>
 800de76:	6023      	str	r3, [r4, #0]
 800de78:	bd38      	pop	{r3, r4, r5, pc}
 800de7a:	bf00      	nop
 800de7c:	24004db0 	.word	0x24004db0

0800de80 <_getpid_r>:
 800de80:	f7f3 bad2 	b.w	8001428 <_getpid>

0800de84 <_init>:
 800de84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de86:	bf00      	nop
 800de88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de8a:	bc08      	pop	{r3}
 800de8c:	469e      	mov	lr, r3
 800de8e:	4770      	bx	lr

0800de90 <_fini>:
 800de90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de92:	bf00      	nop
 800de94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de96:	bc08      	pop	{r3}
 800de98:	469e      	mov	lr, r3
 800de9a:	4770      	bx	lr
