
H747_USB_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000938c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08009624  08009624  00019624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009674  08009674  00019674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800967c  0800967c  0001967c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009680  08009680  00019680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000094  20000000  08009684  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002810  20000098  08009718  00020098  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  200028a8  08009718  000228a8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002e99e  00000000  00000000  000200c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000525d  00000000  00000000  0004ea60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001310  00000000  00000000  00053cc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001128  00000000  00000000  00054fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000422fd  00000000  00000000  000560f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001724b  00000000  00000000  000983f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00198b03  00000000  00000000  000af640  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  00248143  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004e2c  00000000  00000000  002481c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000098 	.word	0x20000098
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800960c 	.word	0x0800960c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2000009c 	.word	0x2000009c
 80002d4:	0800960c 	.word	0x0800960c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005dc:	4b3f      	ldr	r3, [pc, #252]	; (80006dc <SystemInit+0x104>)
 80005de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e2:	4a3e      	ldr	r2, [pc, #248]	; (80006dc <SystemInit+0x104>)
 80005e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005ec:	4b3b      	ldr	r3, [pc, #236]	; (80006dc <SystemInit+0x104>)
 80005ee:	691b      	ldr	r3, [r3, #16]
 80005f0:	4a3a      	ldr	r2, [pc, #232]	; (80006dc <SystemInit+0x104>)
 80005f2:	f043 0310 	orr.w	r3, r3, #16
 80005f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f8:	4b39      	ldr	r3, [pc, #228]	; (80006e0 <SystemInit+0x108>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f003 030f 	and.w	r3, r3, #15
 8000600:	2b06      	cmp	r3, #6
 8000602:	d807      	bhi.n	8000614 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000604:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <SystemInit+0x108>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f023 030f 	bic.w	r3, r3, #15
 800060c:	4a34      	ldr	r2, [pc, #208]	; (80006e0 <SystemInit+0x108>)
 800060e:	f043 0307 	orr.w	r3, r3, #7
 8000612:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000614:	4b33      	ldr	r3, [pc, #204]	; (80006e4 <SystemInit+0x10c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a32      	ldr	r2, [pc, #200]	; (80006e4 <SystemInit+0x10c>)
 800061a:	f043 0301 	orr.w	r3, r3, #1
 800061e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000620:	4b30      	ldr	r3, [pc, #192]	; (80006e4 <SystemInit+0x10c>)
 8000622:	2200      	movs	r2, #0
 8000624:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000626:	4b2f      	ldr	r3, [pc, #188]	; (80006e4 <SystemInit+0x10c>)
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	492e      	ldr	r1, [pc, #184]	; (80006e4 <SystemInit+0x10c>)
 800062c:	4b2e      	ldr	r3, [pc, #184]	; (80006e8 <SystemInit+0x110>)
 800062e:	4013      	ands	r3, r2
 8000630:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000632:	4b2b      	ldr	r3, [pc, #172]	; (80006e0 <SystemInit+0x108>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f003 030f 	and.w	r3, r3, #15
 800063a:	2b07      	cmp	r3, #7
 800063c:	d907      	bls.n	800064e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063e:	4b28      	ldr	r3, [pc, #160]	; (80006e0 <SystemInit+0x108>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f023 030f 	bic.w	r3, r3, #15
 8000646:	4a26      	ldr	r2, [pc, #152]	; (80006e0 <SystemInit+0x108>)
 8000648:	f043 0307 	orr.w	r3, r3, #7
 800064c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064e:	4b25      	ldr	r3, [pc, #148]	; (80006e4 <SystemInit+0x10c>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000654:	4b23      	ldr	r3, [pc, #140]	; (80006e4 <SystemInit+0x10c>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065a:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <SystemInit+0x10c>)
 800065c:	2200      	movs	r2, #0
 800065e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000660:	4b20      	ldr	r3, [pc, #128]	; (80006e4 <SystemInit+0x10c>)
 8000662:	4a22      	ldr	r2, [pc, #136]	; (80006ec <SystemInit+0x114>)
 8000664:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000666:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <SystemInit+0x10c>)
 8000668:	4a21      	ldr	r2, [pc, #132]	; (80006f0 <SystemInit+0x118>)
 800066a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800066c:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <SystemInit+0x10c>)
 800066e:	4a21      	ldr	r2, [pc, #132]	; (80006f4 <SystemInit+0x11c>)
 8000670:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000672:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <SystemInit+0x10c>)
 8000674:	2200      	movs	r2, #0
 8000676:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000678:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <SystemInit+0x10c>)
 800067a:	4a1e      	ldr	r2, [pc, #120]	; (80006f4 <SystemInit+0x11c>)
 800067c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067e:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <SystemInit+0x10c>)
 8000680:	2200      	movs	r2, #0
 8000682:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000684:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <SystemInit+0x10c>)
 8000686:	4a1b      	ldr	r2, [pc, #108]	; (80006f4 <SystemInit+0x11c>)
 8000688:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068a:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <SystemInit+0x10c>)
 800068c:	2200      	movs	r2, #0
 800068e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000690:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <SystemInit+0x10c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a13      	ldr	r2, [pc, #76]	; (80006e4 <SystemInit+0x10c>)
 8000696:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <SystemInit+0x10c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <SystemInit+0x120>)
 80006a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a6:	4a14      	ldr	r2, [pc, #80]	; (80006f8 <SystemInit+0x120>)
 80006a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ac:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006ae:	4b13      	ldr	r3, [pc, #76]	; (80006fc <SystemInit+0x124>)
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	4b13      	ldr	r3, [pc, #76]	; (8000700 <SystemInit+0x128>)
 80006b4:	4013      	ands	r3, r2
 80006b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006ba:	d202      	bcs.n	80006c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <SystemInit+0x12c>)
 80006be:	2201      	movs	r2, #1
 80006c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <SystemInit+0x130>)
 80006c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006ca:	4b04      	ldr	r3, [pc, #16]	; (80006dc <SystemInit+0x104>)
 80006cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006d0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006d2:	bf00      	nop
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000ed00 	.word	0xe000ed00
 80006e0:	52002000 	.word	0x52002000
 80006e4:	58024400 	.word	0x58024400
 80006e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80006ec:	02020200 	.word	0x02020200
 80006f0:	01ff0000 	.word	0x01ff0000
 80006f4:	01010280 	.word	0x01010280
 80006f8:	580000c0 	.word	0x580000c0
 80006fc:	5c001000 	.word	0x5c001000
 8000700:	ffff0000 	.word	0xffff0000
 8000704:	51008108 	.word	0x51008108
 8000708:	52004000 	.word	0x52004000

0800070c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8000712:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000716:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000718:	bf00      	nop
 800071a:	4b2d      	ldr	r3, [pc, #180]	; (80007d0 <main+0xc4>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000722:	2b00      	cmp	r3, #0
 8000724:	d004      	beq.n	8000730 <main+0x24>
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	1e5a      	subs	r2, r3, #1
 800072a:	607a      	str	r2, [r7, #4]
 800072c:	2b00      	cmp	r3, #0
 800072e:	dcf4      	bgt.n	800071a <main+0xe>
	if ( timeout < 0 )
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2b00      	cmp	r3, #0
 8000734:	da01      	bge.n	800073a <main+0x2e>
	{
		Error_Handler();
 8000736:	f000 f97d 	bl	8000a34 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073a:	f000 fa89 	bl	8000c50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073e:	f000 f84b 	bl	80007d8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000742:	4b23      	ldr	r3, [pc, #140]	; (80007d0 <main+0xc4>)
 8000744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000748:	4a21      	ldr	r2, [pc, #132]	; (80007d0 <main+0xc4>)
 800074a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800074e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000752:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <main+0xc4>)
 8000754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000760:	2000      	movs	r0, #0
 8000762:	f002 fd43 	bl	80031ec <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8000766:	2100      	movs	r1, #0
 8000768:	2000      	movs	r0, #0
 800076a:	f002 fd59 	bl	8003220 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 800076e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000772:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000774:	bf00      	nop
 8000776:	4b16      	ldr	r3, [pc, #88]	; (80007d0 <main+0xc4>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800077e:	2b00      	cmp	r3, #0
 8000780:	d104      	bne.n	800078c <main+0x80>
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	1e5a      	subs	r2, r3, #1
 8000786:	607a      	str	r2, [r7, #4]
 8000788:	2b00      	cmp	r3, #0
 800078a:	dcf4      	bgt.n	8000776 <main+0x6a>
	if ( timeout < 0 )
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2b00      	cmp	r3, #0
 8000790:	da01      	bge.n	8000796 <main+0x8a>
	{
		Error_Handler();
 8000792:	f000 f94f 	bl	8000a34 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000796:	f000 f8e9 	bl	800096c <MX_GPIO_Init>
  MX_UART8_Init();
 800079a:	f000 f89b 	bl	80008d4 <MX_UART8_Init>
  MX_FATFS_Init();
 800079e:	f006 f981 	bl	8006aa4 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 80007a2:	f008 fb47 	bl	8008e34 <MX_USB_HOST_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
		//HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_12);
		HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_13);
 80007a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007aa:	480a      	ldr	r0, [pc, #40]	; (80007d4 <main+0xc8>)
 80007ac:	f001 f82d 	bl	800180a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_14);
 80007b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007b4:	4807      	ldr	r0, [pc, #28]	; (80007d4 <main+0xc8>)
 80007b6:	f001 f828 	bl	800180a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_15);
 80007ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007be:	4805      	ldr	r0, [pc, #20]	; (80007d4 <main+0xc8>)
 80007c0:	f001 f823 	bl	800180a <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80007c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007c8:	f000 fad4 	bl	8000d74 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_13);
 80007cc:	e7eb      	b.n	80007a6 <main+0x9a>
 80007ce:	bf00      	nop
 80007d0:	58024400 	.word	0x58024400
 80007d4:	58022000 	.word	0x58022000

080007d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b09e      	sub	sp, #120	; 0x78
 80007dc:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 80007de:	2300      	movs	r3, #0
 80007e0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007e4:	2004      	movs	r0, #4
 80007e6:	f002 fd2f 	bl	8003248 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	4b37      	ldr	r3, [pc, #220]	; (80008cc <SystemClock_Config+0xf4>)
 80007f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007f2:	4a36      	ldr	r2, [pc, #216]	; (80008cc <SystemClock_Config+0xf4>)
 80007f4:	f023 0301 	bic.w	r3, r3, #1
 80007f8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007fa:	4b34      	ldr	r3, [pc, #208]	; (80008cc <SystemClock_Config+0xf4>)
 80007fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	4b32      	ldr	r3, [pc, #200]	; (80008d0 <SystemClock_Config+0xf8>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	4a31      	ldr	r2, [pc, #196]	; (80008d0 <SystemClock_Config+0xf8>)
 800080a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800080e:	6193      	str	r3, [r2, #24]
 8000810:	4b2f      	ldr	r3, [pc, #188]	; (80008d0 <SystemClock_Config+0xf8>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800081c:	bf00      	nop
 800081e:	4b2c      	ldr	r3, [pc, #176]	; (80008d0 <SystemClock_Config+0xf8>)
 8000820:	699b      	ldr	r3, [r3, #24]
 8000822:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000826:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800082a:	d1f8      	bne.n	800081e <SystemClock_Config+0x46>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800082c:	2301      	movs	r3, #1
 800082e:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000830:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000834:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000836:	2300      	movs	r3, #0
 8000838:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 800083a:	2300      	movs	r3, #0
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083e:	2302      	movs	r3, #2
 8000840:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000842:	2302      	movs	r3, #2
 8000844:	633b      	str	r3, [r7, #48]	; 0x30

  RCC_OscInitStruct.PLL.PLLM = 5;
 8000846:	2305      	movs	r3, #5
 8000848:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 160;
 800084a:	23a0      	movs	r3, #160	; 0xa0
 800084c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000852:	2302      	movs	r3, #2
 8000854:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000856:	2302      	movs	r3, #2
 8000858:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800085a:	2304      	movs	r3, #4
 800085c:	643b      	str	r3, [r7, #64]	; 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800085e:	2300      	movs	r3, #0
 8000860:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000862:	2308      	movs	r3, #8
 8000864:	64bb      	str	r3, [r7, #72]	; 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000866:	f107 0308 	add.w	r3, r7, #8
 800086a:	4618      	mov	r0, r3
 800086c:	f002 fd46 	bl	80032fc <HAL_RCC_OscConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 8000876:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800087e:	f000 f8d9 	bl	8000a34 <Error_Handler>
  }

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8000882:	233f      	movs	r3, #63	; 0x3f
 8000884:	657b      	str	r3, [r7, #84]	; 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000886:	2303      	movs	r3, #3
 8000888:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800088a:	2300      	movs	r3, #0
 800088c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800088e:	2308      	movs	r3, #8
 8000890:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000892:	2340      	movs	r3, #64	; 0x40
 8000894:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000896:	2340      	movs	r3, #64	; 0x40
 8000898:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800089a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800089e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008a0:	2340      	movs	r3, #64	; 0x40
 80008a2:	673b      	str	r3, [r7, #112]	; 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 80008a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008a8:	2104      	movs	r1, #4
 80008aa:	4618      	mov	r0, r3
 80008ac:	f003 f936 	bl	8003b1c <HAL_RCC_ClockConfig>
 80008b0:	4603      	mov	r3, r0
 80008b2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 80008b6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80008be:	f000 f8b9 	bl	8000a34 <Error_Handler>

  __HAL_RCC_SYSCFG_CLK_ENABLE() ;

  HAL_EnableCompensationCell();
  */
}
 80008c2:	bf00      	nop
 80008c4:	3778      	adds	r7, #120	; 0x78
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	58000400 	.word	0x58000400
 80008d0:	58024800 	.word	0x58024800

080008d4 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80008d8:	4b22      	ldr	r3, [pc, #136]	; (8000964 <MX_UART8_Init+0x90>)
 80008da:	4a23      	ldr	r2, [pc, #140]	; (8000968 <MX_UART8_Init+0x94>)
 80008dc:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80008de:	4b21      	ldr	r3, [pc, #132]	; (8000964 <MX_UART8_Init+0x90>)
 80008e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e4:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80008e6:	4b1f      	ldr	r3, [pc, #124]	; (8000964 <MX_UART8_Init+0x90>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80008ec:	4b1d      	ldr	r3, [pc, #116]	; (8000964 <MX_UART8_Init+0x90>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80008f2:	4b1c      	ldr	r3, [pc, #112]	; (8000964 <MX_UART8_Init+0x90>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80008f8:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <MX_UART8_Init+0x90>)
 80008fa:	220c      	movs	r2, #12
 80008fc:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fe:	4b19      	ldr	r3, [pc, #100]	; (8000964 <MX_UART8_Init+0x90>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000904:	4b17      	ldr	r3, [pc, #92]	; (8000964 <MX_UART8_Init+0x90>)
 8000906:	2200      	movs	r2, #0
 8000908:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800090a:	4b16      	ldr	r3, [pc, #88]	; (8000964 <MX_UART8_Init+0x90>)
 800090c:	2200      	movs	r2, #0
 800090e:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000910:	4b14      	ldr	r3, [pc, #80]	; (8000964 <MX_UART8_Init+0x90>)
 8000912:	2200      	movs	r2, #0
 8000914:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000916:	4b13      	ldr	r3, [pc, #76]	; (8000964 <MX_UART8_Init+0x90>)
 8000918:	2200      	movs	r2, #0
 800091a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800091c:	4811      	ldr	r0, [pc, #68]	; (8000964 <MX_UART8_Init+0x90>)
 800091e:	f003 ff2f 	bl	8004780 <HAL_UART_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8000928:	f000 f884 	bl	8000a34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800092c:	2100      	movs	r1, #0
 800092e:	480d      	ldr	r0, [pc, #52]	; (8000964 <MX_UART8_Init+0x90>)
 8000930:	f005 f8cf 	bl	8005ad2 <HAL_UARTEx_SetTxFifoThreshold>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 800093a:	f000 f87b 	bl	8000a34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800093e:	2100      	movs	r1, #0
 8000940:	4808      	ldr	r0, [pc, #32]	; (8000964 <MX_UART8_Init+0x90>)
 8000942:	f005 f904 	bl	8005b4e <HAL_UARTEx_SetRxFifoThreshold>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 800094c:	f000 f872 	bl	8000a34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <MX_UART8_Init+0x90>)
 8000952:	f005 f885 	bl	8005a60 <HAL_UARTEx_DisableFifoMode>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 800095c:	f000 f86a 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	200000d4 	.word	0x200000d4
 8000968:	40007c00 	.word	0x40007c00

0800096c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08a      	sub	sp, #40	; 0x28
 8000970:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]
 800097e:	60da      	str	r2, [r3, #12]
 8000980:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000982:	4b2a      	ldr	r3, [pc, #168]	; (8000a2c <MX_GPIO_Init+0xc0>)
 8000984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000988:	4a28      	ldr	r2, [pc, #160]	; (8000a2c <MX_GPIO_Init+0xc0>)
 800098a:	f043 0310 	orr.w	r3, r3, #16
 800098e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000992:	4b26      	ldr	r3, [pc, #152]	; (8000a2c <MX_GPIO_Init+0xc0>)
 8000994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000998:	f003 0310 	and.w	r3, r3, #16
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a0:	4b22      	ldr	r3, [pc, #136]	; (8000a2c <MX_GPIO_Init+0xc0>)
 80009a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a6:	4a21      	ldr	r2, [pc, #132]	; (8000a2c <MX_GPIO_Init+0xc0>)
 80009a8:	f043 0301 	orr.w	r3, r3, #1
 80009ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009b0:	4b1e      	ldr	r3, [pc, #120]	; (8000a2c <MX_GPIO_Init+0xc0>)
 80009b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80009be:	4b1b      	ldr	r3, [pc, #108]	; (8000a2c <MX_GPIO_Init+0xc0>)
 80009c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c4:	4a19      	ldr	r2, [pc, #100]	; (8000a2c <MX_GPIO_Init+0xc0>)
 80009c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ce:	4b17      	ldr	r3, [pc, #92]	; (8000a2c <MX_GPIO_Init+0xc0>)
 80009d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009d8:	60bb      	str	r3, [r7, #8]
 80009da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009dc:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <MX_GPIO_Init+0xc0>)
 80009de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e2:	4a12      	ldr	r2, [pc, #72]	; (8000a2c <MX_GPIO_Init+0xc0>)
 80009e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <MX_GPIO_Init+0xc0>)
 80009ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000a00:	480b      	ldr	r0, [pc, #44]	; (8000a30 <MX_GPIO_Init+0xc4>)
 8000a02:	f000 fee9 	bl	80017d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PI12 PI13 PI14 PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000a06:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000a0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a14:	2300      	movs	r3, #0
 8000a16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4804      	ldr	r0, [pc, #16]	; (8000a30 <MX_GPIO_Init+0xc4>)
 8000a20:	f000 fd2a 	bl	8001478 <HAL_GPIO_Init>

}
 8000a24:	bf00      	nop
 8000a26:	3728      	adds	r7, #40	; 0x28
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	58024400 	.word	0x58024400
 8000a30:	58022000 	.word	0x58022000

08000a34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a38:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a3a:	e7fe      	b.n	8000a3a <Error_Handler+0x6>

08000a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a42:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <HAL_MspInit+0x30>)
 8000a44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a48:	4a08      	ldr	r2, [pc, #32]	; (8000a6c <HAL_MspInit+0x30>)
 8000a4a:	f043 0302 	orr.w	r3, r3, #2
 8000a4e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <HAL_MspInit+0x30>)
 8000a54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a58:	f003 0302 	and.w	r3, r3, #2
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	58024400 	.word	0x58024400

08000a70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	; 0x28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a1e      	ldr	r2, [pc, #120]	; (8000b08 <HAL_UART_MspInit+0x98>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d135      	bne.n	8000afe <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8000a92:	4b1e      	ldr	r3, [pc, #120]	; (8000b0c <HAL_UART_MspInit+0x9c>)
 8000a94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000a98:	4a1c      	ldr	r2, [pc, #112]	; (8000b0c <HAL_UART_MspInit+0x9c>)
 8000a9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000aa2:	4b1a      	ldr	r3, [pc, #104]	; (8000b0c <HAL_UART_MspInit+0x9c>)
 8000aa4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000aa8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000aac:	613b      	str	r3, [r7, #16]
 8000aae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ab0:	4b16      	ldr	r3, [pc, #88]	; (8000b0c <HAL_UART_MspInit+0x9c>)
 8000ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab6:	4a15      	ldr	r2, [pc, #84]	; (8000b0c <HAL_UART_MspInit+0x9c>)
 8000ab8:	f043 0310 	orr.w	r3, r3, #16
 8000abc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <HAL_UART_MspInit+0x9c>)
 8000ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac6:	f003 0310 	and.w	r3, r3, #16
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
    /**UART8 GPIO Configuration
    PE1     ------> UART8_TX
    PE0     ------> UART8_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	2300      	movs	r3, #0
 8000adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8000ade:	2308      	movs	r3, #8
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4809      	ldr	r0, [pc, #36]	; (8000b10 <HAL_UART_MspInit+0xa0>)
 8000aea:	f000 fcc5 	bl	8001478 <HAL_GPIO_Init>

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2100      	movs	r1, #0
 8000af2:	2053      	movs	r0, #83	; 0x53
 8000af4:	f000 fa47 	bl	8000f86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8000af8:	2053      	movs	r0, #83	; 0x53
 8000afa:	f000 fa5e 	bl	8000fba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }

}
 8000afe:	bf00      	nop
 8000b00:	3728      	adds	r7, #40	; 0x28
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40007c00 	.word	0x40007c00
 8000b0c:	58024400 	.word	0x58024400
 8000b10:	58021000 	.word	0x58021000

08000b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <NMI_Handler+0x4>

08000b1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1e:	e7fe      	b.n	8000b1e <HardFault_Handler+0x4>

08000b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <MemManage_Handler+0x4>

08000b26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b2a:	e7fe      	b.n	8000b2a <BusFault_Handler+0x4>

08000b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <UsageFault_Handler+0x4>

08000b32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b60:	f000 f8e8 	bl	8000d34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8000b6c:	4802      	ldr	r0, [pc, #8]	; (8000b78 <UART8_IRQHandler+0x10>)
 8000b6e:	f003 fe57 	bl	8004820 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	200000d4 	.word	0x200000d4

08000b7c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000b80:	4802      	ldr	r0, [pc, #8]	; (8000b8c <OTG_FS_IRQHandler+0x10>)
 8000b82:	f001 f8ed 	bl	8001d60 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200025e0 	.word	0x200025e0

08000b90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b98:	4a14      	ldr	r2, [pc, #80]	; (8000bec <_sbrk+0x5c>)
 8000b9a:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <_sbrk+0x60>)
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba4:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <_sbrk+0x64>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d102      	bne.n	8000bb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bac:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <_sbrk+0x64>)
 8000bae:	4a12      	ldr	r2, [pc, #72]	; (8000bf8 <_sbrk+0x68>)
 8000bb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <_sbrk+0x64>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4413      	add	r3, r2
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d207      	bcs.n	8000bd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bc0:	f008 fc1c 	bl	80093fc <__errno>
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	230c      	movs	r3, #12
 8000bc8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000bca:	f04f 33ff 	mov.w	r3, #4294967295
 8000bce:	e009      	b.n	8000be4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bd0:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <_sbrk+0x64>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bd6:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <_sbrk+0x64>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4413      	add	r3, r2
 8000bde:	4a05      	ldr	r2, [pc, #20]	; (8000bf4 <_sbrk+0x64>)
 8000be0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000be2:	68fb      	ldr	r3, [r7, #12]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3718      	adds	r7, #24
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20020000 	.word	0x20020000
 8000bf0:	00000400 	.word	0x00000400
 8000bf4:	200000b4 	.word	0x200000b4
 8000bf8:	200028a8 	.word	0x200028a8

08000bfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c34 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c00:	f7ff fcea 	bl	80005d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c04:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c06:	e003      	b.n	8000c10 <LoopCopyDataInit>

08000c08 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c08:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8000c0a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c0c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c0e:	3104      	adds	r1, #4

08000c10 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c10:	480a      	ldr	r0, [pc, #40]	; (8000c3c <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8000c14:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c16:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c18:	d3f6      	bcc.n	8000c08 <CopyDataInit>
  ldr  r2, =_sbss
 8000c1a:	4a0a      	ldr	r2, [pc, #40]	; (8000c44 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8000c1c:	e002      	b.n	8000c24 <LoopFillZerobss>

08000c1e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c1e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c20:	f842 3b04 	str.w	r3, [r2], #4

08000c24 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c24:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8000c26:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c28:	d3f9      	bcc.n	8000c1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c2a:	f008 fbed 	bl	8009408 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c2e:	f7ff fd6d 	bl	800070c <main>
  bx  lr    
 8000c32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c34:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000c38:	08009684 	.word	0x08009684
  ldr  r0, =_sdata
 8000c3c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c40:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8000c44:	20000098 	.word	0x20000098
  ldr  r3, = _ebss
 8000c48:	200028a8 	.word	0x200028a8

08000c4c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c4c:	e7fe      	b.n	8000c4c <ADC3_IRQHandler>
	...

08000c50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c56:	2003      	movs	r0, #3
 8000c58:	f000 f98a 	bl	8000f70 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000c5c:	f003 f914 	bl	8003e88 <HAL_RCC_GetSysClockFreq>
 8000c60:	4601      	mov	r1, r0
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <HAL_Init+0x68>)
 8000c64:	699b      	ldr	r3, [r3, #24]
 8000c66:	0a1b      	lsrs	r3, r3, #8
 8000c68:	f003 030f 	and.w	r3, r3, #15
 8000c6c:	4a13      	ldr	r2, [pc, #76]	; (8000cbc <HAL_Init+0x6c>)
 8000c6e:	5cd3      	ldrb	r3, [r2, r3]
 8000c70:	f003 031f 	and.w	r3, r3, #31
 8000c74:	fa21 f303 	lsr.w	r3, r1, r3
 8000c78:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <HAL_Init+0x68>)
 8000c7c:	699b      	ldr	r3, [r3, #24]
 8000c7e:	f003 030f 	and.w	r3, r3, #15
 8000c82:	4a0e      	ldr	r2, [pc, #56]	; (8000cbc <HAL_Init+0x6c>)
 8000c84:	5cd3      	ldrb	r3, [r2, r3]
 8000c86:	f003 031f 	and.w	r3, r3, #31
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c90:	4a0b      	ldr	r2, [pc, #44]	; (8000cc0 <HAL_Init+0x70>)
 8000c92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c94:	4a0b      	ldr	r2, [pc, #44]	; (8000cc4 <HAL_Init+0x74>)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f000 f814 	bl	8000cc8 <HAL_InitTick>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e002      	b.n	8000cb0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000caa:	f7ff fec7 	bl	8000a3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cae:	2300      	movs	r3, #0
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	58024400 	.word	0x58024400
 8000cbc:	08009638 	.word	0x08009638
 8000cc0:	20000004 	.word	0x20000004
 8000cc4:	20000000 	.word	0x20000000

08000cc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000cd0:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <HAL_InitTick+0x60>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d101      	bne.n	8000cdc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	e021      	b.n	8000d20 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000cdc:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <HAL_InitTick+0x64>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <HAL_InitTick+0x60>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 f96f 	bl	8000fd6 <HAL_SYSTICK_Config>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e00e      	b.n	8000d20 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2b0f      	cmp	r3, #15
 8000d06:	d80a      	bhi.n	8000d1e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	6879      	ldr	r1, [r7, #4]
 8000d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d10:	f000 f939 	bl	8000f86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d14:	4a06      	ldr	r2, [pc, #24]	; (8000d30 <HAL_InitTick+0x68>)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	e000      	b.n	8000d20 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	2000000c 	.word	0x2000000c
 8000d2c:	20000000 	.word	0x20000000
 8000d30:	20000008 	.word	0x20000008

08000d34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_IncTick+0x20>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <HAL_IncTick+0x24>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4413      	add	r3, r2
 8000d44:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <HAL_IncTick+0x24>)
 8000d46:	6013      	str	r3, [r2, #0]
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	2000000c 	.word	0x2000000c
 8000d58:	20000160 	.word	0x20000160

08000d5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d60:	4b03      	ldr	r3, [pc, #12]	; (8000d70 <HAL_GetTick+0x14>)
 8000d62:	681b      	ldr	r3, [r3, #0]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	20000160 	.word	0x20000160

08000d74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d7c:	f7ff ffee 	bl	8000d5c <HAL_GetTick>
 8000d80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d8c:	d005      	beq.n	8000d9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d8e:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <HAL_Delay+0x40>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	461a      	mov	r2, r3
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	4413      	add	r3, r2
 8000d98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d9a:	bf00      	nop
 8000d9c:	f7ff ffde 	bl	8000d5c <HAL_GetTick>
 8000da0:	4602      	mov	r2, r0
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	68fa      	ldr	r2, [r7, #12]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d8f7      	bhi.n	8000d9c <HAL_Delay+0x28>
  {
  }
}
 8000dac:	bf00      	nop
 8000dae:	3710      	adds	r7, #16
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	2000000c 	.word	0x2000000c

08000db8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000dbc:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <HAL_GetREVID+0x14>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	0c1b      	lsrs	r3, r3, #16
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	5c001000 	.word	0x5c001000

08000dd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f003 0307 	and.w	r3, r3, #7
 8000dde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de0:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <__NVIC_SetPriorityGrouping+0x40>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000de6:	68ba      	ldr	r2, [r7, #8]
 8000de8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dec:	4013      	ands	r3, r2
 8000dee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <__NVIC_SetPriorityGrouping+0x44>)
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dfe:	4a04      	ldr	r2, [pc, #16]	; (8000e10 <__NVIC_SetPriorityGrouping+0x40>)
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	60d3      	str	r3, [r2, #12]
}
 8000e04:	bf00      	nop
 8000e06:	3714      	adds	r7, #20
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	e000ed00 	.word	0xe000ed00
 8000e14:	05fa0000 	.word	0x05fa0000

08000e18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e1c:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <__NVIC_GetPriorityGrouping+0x18>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	0a1b      	lsrs	r3, r3, #8
 8000e22:	f003 0307 	and.w	r3, r3, #7
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	db0b      	blt.n	8000e5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e46:	88fb      	ldrh	r3, [r7, #6]
 8000e48:	f003 021f 	and.w	r2, r3, #31
 8000e4c:	4907      	ldr	r1, [pc, #28]	; (8000e6c <__NVIC_EnableIRQ+0x38>)
 8000e4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e52:	095b      	lsrs	r3, r3, #5
 8000e54:	2001      	movs	r0, #1
 8000e56:	fa00 f202 	lsl.w	r2, r0, r2
 8000e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e5e:	bf00      	nop
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000e100 	.word	0xe000e100

08000e70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	6039      	str	r1, [r7, #0]
 8000e7a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	db0a      	blt.n	8000e9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	490c      	ldr	r1, [pc, #48]	; (8000ebc <__NVIC_SetPriority+0x4c>)
 8000e8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e8e:	0112      	lsls	r2, r2, #4
 8000e90:	b2d2      	uxtb	r2, r2
 8000e92:	440b      	add	r3, r1
 8000e94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e98:	e00a      	b.n	8000eb0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	4908      	ldr	r1, [pc, #32]	; (8000ec0 <__NVIC_SetPriority+0x50>)
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	f003 030f 	and.w	r3, r3, #15
 8000ea6:	3b04      	subs	r3, #4
 8000ea8:	0112      	lsls	r2, r2, #4
 8000eaa:	b2d2      	uxtb	r2, r2
 8000eac:	440b      	add	r3, r1
 8000eae:	761a      	strb	r2, [r3, #24]
}
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000e100 	.word	0xe000e100
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b089      	sub	sp, #36	; 0x24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	f1c3 0307 	rsb	r3, r3, #7
 8000ede:	2b04      	cmp	r3, #4
 8000ee0:	bf28      	it	cs
 8000ee2:	2304      	movcs	r3, #4
 8000ee4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	3304      	adds	r3, #4
 8000eea:	2b06      	cmp	r3, #6
 8000eec:	d902      	bls.n	8000ef4 <NVIC_EncodePriority+0x30>
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	3b03      	subs	r3, #3
 8000ef2:	e000      	b.n	8000ef6 <NVIC_EncodePriority+0x32>
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	43da      	mvns	r2, r3
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	401a      	ands	r2, r3
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	fa01 f303 	lsl.w	r3, r1, r3
 8000f16:	43d9      	mvns	r1, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f1c:	4313      	orrs	r3, r2
         );
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3724      	adds	r7, #36	; 0x24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
	...

08000f2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f3c:	d301      	bcc.n	8000f42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e00f      	b.n	8000f62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f42:	4a0a      	ldr	r2, [pc, #40]	; (8000f6c <SysTick_Config+0x40>)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3b01      	subs	r3, #1
 8000f48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f4a:	210f      	movs	r1, #15
 8000f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f50:	f7ff ff8e 	bl	8000e70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f54:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <SysTick_Config+0x40>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f5a:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <SysTick_Config+0x40>)
 8000f5c:	2207      	movs	r2, #7
 8000f5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	e000e010 	.word	0xe000e010

08000f70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f7ff ff29 	bl	8000dd0 <__NVIC_SetPriorityGrouping>
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b086      	sub	sp, #24
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	60b9      	str	r1, [r7, #8]
 8000f90:	607a      	str	r2, [r7, #4]
 8000f92:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f94:	f7ff ff40 	bl	8000e18 <__NVIC_GetPriorityGrouping>
 8000f98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	68b9      	ldr	r1, [r7, #8]
 8000f9e:	6978      	ldr	r0, [r7, #20]
 8000fa0:	f7ff ff90 	bl	8000ec4 <NVIC_EncodePriority>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000faa:	4611      	mov	r1, r2
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff ff5f 	bl	8000e70 <__NVIC_SetPriority>
}
 8000fb2:	bf00      	nop
 8000fb4:	3718      	adds	r7, #24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ff33 	bl	8000e34 <__NVIC_EnableIRQ>
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b082      	sub	sp, #8
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff ffa4 	bl	8000f2c <SysTick_Config>
 8000fe4:	4603      	mov	r3, r0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d101      	bne.n	8001002 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e205      	b.n	800140e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b02      	cmp	r3, #2
 800100c:	d004      	beq.n	8001018 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2280      	movs	r2, #128	; 0x80
 8001012:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	e1fa      	b.n	800140e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a8c      	ldr	r2, [pc, #560]	; (8001250 <HAL_DMA_Abort_IT+0x260>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d04a      	beq.n	80010b8 <HAL_DMA_Abort_IT+0xc8>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a8b      	ldr	r2, [pc, #556]	; (8001254 <HAL_DMA_Abort_IT+0x264>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d045      	beq.n	80010b8 <HAL_DMA_Abort_IT+0xc8>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a89      	ldr	r2, [pc, #548]	; (8001258 <HAL_DMA_Abort_IT+0x268>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d040      	beq.n	80010b8 <HAL_DMA_Abort_IT+0xc8>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a88      	ldr	r2, [pc, #544]	; (800125c <HAL_DMA_Abort_IT+0x26c>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d03b      	beq.n	80010b8 <HAL_DMA_Abort_IT+0xc8>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a86      	ldr	r2, [pc, #536]	; (8001260 <HAL_DMA_Abort_IT+0x270>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d036      	beq.n	80010b8 <HAL_DMA_Abort_IT+0xc8>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a85      	ldr	r2, [pc, #532]	; (8001264 <HAL_DMA_Abort_IT+0x274>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d031      	beq.n	80010b8 <HAL_DMA_Abort_IT+0xc8>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a83      	ldr	r2, [pc, #524]	; (8001268 <HAL_DMA_Abort_IT+0x278>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d02c      	beq.n	80010b8 <HAL_DMA_Abort_IT+0xc8>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a82      	ldr	r2, [pc, #520]	; (800126c <HAL_DMA_Abort_IT+0x27c>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d027      	beq.n	80010b8 <HAL_DMA_Abort_IT+0xc8>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a80      	ldr	r2, [pc, #512]	; (8001270 <HAL_DMA_Abort_IT+0x280>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d022      	beq.n	80010b8 <HAL_DMA_Abort_IT+0xc8>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a7f      	ldr	r2, [pc, #508]	; (8001274 <HAL_DMA_Abort_IT+0x284>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d01d      	beq.n	80010b8 <HAL_DMA_Abort_IT+0xc8>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a7d      	ldr	r2, [pc, #500]	; (8001278 <HAL_DMA_Abort_IT+0x288>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d018      	beq.n	80010b8 <HAL_DMA_Abort_IT+0xc8>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a7c      	ldr	r2, [pc, #496]	; (800127c <HAL_DMA_Abort_IT+0x28c>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d013      	beq.n	80010b8 <HAL_DMA_Abort_IT+0xc8>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a7a      	ldr	r2, [pc, #488]	; (8001280 <HAL_DMA_Abort_IT+0x290>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d00e      	beq.n	80010b8 <HAL_DMA_Abort_IT+0xc8>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a79      	ldr	r2, [pc, #484]	; (8001284 <HAL_DMA_Abort_IT+0x294>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d009      	beq.n	80010b8 <HAL_DMA_Abort_IT+0xc8>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a77      	ldr	r2, [pc, #476]	; (8001288 <HAL_DMA_Abort_IT+0x298>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d004      	beq.n	80010b8 <HAL_DMA_Abort_IT+0xc8>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a76      	ldr	r2, [pc, #472]	; (800128c <HAL_DMA_Abort_IT+0x29c>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d101      	bne.n	80010bc <HAL_DMA_Abort_IT+0xcc>
 80010b8:	2301      	movs	r3, #1
 80010ba:	e000      	b.n	80010be <HAL_DMA_Abort_IT+0xce>
 80010bc:	2300      	movs	r3, #0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d065      	beq.n	800118e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2204      	movs	r2, #4
 80010c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a60      	ldr	r2, [pc, #384]	; (8001250 <HAL_DMA_Abort_IT+0x260>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d04a      	beq.n	800116a <HAL_DMA_Abort_IT+0x17a>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a5e      	ldr	r2, [pc, #376]	; (8001254 <HAL_DMA_Abort_IT+0x264>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d045      	beq.n	800116a <HAL_DMA_Abort_IT+0x17a>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a5d      	ldr	r2, [pc, #372]	; (8001258 <HAL_DMA_Abort_IT+0x268>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d040      	beq.n	800116a <HAL_DMA_Abort_IT+0x17a>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a5b      	ldr	r2, [pc, #364]	; (800125c <HAL_DMA_Abort_IT+0x26c>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d03b      	beq.n	800116a <HAL_DMA_Abort_IT+0x17a>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a5a      	ldr	r2, [pc, #360]	; (8001260 <HAL_DMA_Abort_IT+0x270>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d036      	beq.n	800116a <HAL_DMA_Abort_IT+0x17a>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a58      	ldr	r2, [pc, #352]	; (8001264 <HAL_DMA_Abort_IT+0x274>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d031      	beq.n	800116a <HAL_DMA_Abort_IT+0x17a>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a57      	ldr	r2, [pc, #348]	; (8001268 <HAL_DMA_Abort_IT+0x278>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d02c      	beq.n	800116a <HAL_DMA_Abort_IT+0x17a>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a55      	ldr	r2, [pc, #340]	; (800126c <HAL_DMA_Abort_IT+0x27c>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d027      	beq.n	800116a <HAL_DMA_Abort_IT+0x17a>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a54      	ldr	r2, [pc, #336]	; (8001270 <HAL_DMA_Abort_IT+0x280>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d022      	beq.n	800116a <HAL_DMA_Abort_IT+0x17a>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a52      	ldr	r2, [pc, #328]	; (8001274 <HAL_DMA_Abort_IT+0x284>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d01d      	beq.n	800116a <HAL_DMA_Abort_IT+0x17a>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a51      	ldr	r2, [pc, #324]	; (8001278 <HAL_DMA_Abort_IT+0x288>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d018      	beq.n	800116a <HAL_DMA_Abort_IT+0x17a>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a4f      	ldr	r2, [pc, #316]	; (800127c <HAL_DMA_Abort_IT+0x28c>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d013      	beq.n	800116a <HAL_DMA_Abort_IT+0x17a>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a4e      	ldr	r2, [pc, #312]	; (8001280 <HAL_DMA_Abort_IT+0x290>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d00e      	beq.n	800116a <HAL_DMA_Abort_IT+0x17a>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a4c      	ldr	r2, [pc, #304]	; (8001284 <HAL_DMA_Abort_IT+0x294>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d009      	beq.n	800116a <HAL_DMA_Abort_IT+0x17a>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a4b      	ldr	r2, [pc, #300]	; (8001288 <HAL_DMA_Abort_IT+0x298>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d004      	beq.n	800116a <HAL_DMA_Abort_IT+0x17a>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a49      	ldr	r2, [pc, #292]	; (800128c <HAL_DMA_Abort_IT+0x29c>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d108      	bne.n	800117c <HAL_DMA_Abort_IT+0x18c>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f022 0201 	bic.w	r2, r2, #1
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	e147      	b.n	800140c <HAL_DMA_Abort_IT+0x41c>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f022 0201 	bic.w	r2, r2, #1
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	e13e      	b.n	800140c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f022 020e 	bic.w	r2, r2, #14
 800119c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a2b      	ldr	r2, [pc, #172]	; (8001250 <HAL_DMA_Abort_IT+0x260>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d04a      	beq.n	800123e <HAL_DMA_Abort_IT+0x24e>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a29      	ldr	r2, [pc, #164]	; (8001254 <HAL_DMA_Abort_IT+0x264>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d045      	beq.n	800123e <HAL_DMA_Abort_IT+0x24e>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a28      	ldr	r2, [pc, #160]	; (8001258 <HAL_DMA_Abort_IT+0x268>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d040      	beq.n	800123e <HAL_DMA_Abort_IT+0x24e>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a26      	ldr	r2, [pc, #152]	; (800125c <HAL_DMA_Abort_IT+0x26c>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d03b      	beq.n	800123e <HAL_DMA_Abort_IT+0x24e>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a25      	ldr	r2, [pc, #148]	; (8001260 <HAL_DMA_Abort_IT+0x270>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d036      	beq.n	800123e <HAL_DMA_Abort_IT+0x24e>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a23      	ldr	r2, [pc, #140]	; (8001264 <HAL_DMA_Abort_IT+0x274>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d031      	beq.n	800123e <HAL_DMA_Abort_IT+0x24e>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a22      	ldr	r2, [pc, #136]	; (8001268 <HAL_DMA_Abort_IT+0x278>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d02c      	beq.n	800123e <HAL_DMA_Abort_IT+0x24e>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a20      	ldr	r2, [pc, #128]	; (800126c <HAL_DMA_Abort_IT+0x27c>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d027      	beq.n	800123e <HAL_DMA_Abort_IT+0x24e>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a1f      	ldr	r2, [pc, #124]	; (8001270 <HAL_DMA_Abort_IT+0x280>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d022      	beq.n	800123e <HAL_DMA_Abort_IT+0x24e>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a1d      	ldr	r2, [pc, #116]	; (8001274 <HAL_DMA_Abort_IT+0x284>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d01d      	beq.n	800123e <HAL_DMA_Abort_IT+0x24e>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a1c      	ldr	r2, [pc, #112]	; (8001278 <HAL_DMA_Abort_IT+0x288>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d018      	beq.n	800123e <HAL_DMA_Abort_IT+0x24e>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a1a      	ldr	r2, [pc, #104]	; (800127c <HAL_DMA_Abort_IT+0x28c>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d013      	beq.n	800123e <HAL_DMA_Abort_IT+0x24e>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a19      	ldr	r2, [pc, #100]	; (8001280 <HAL_DMA_Abort_IT+0x290>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d00e      	beq.n	800123e <HAL_DMA_Abort_IT+0x24e>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a17      	ldr	r2, [pc, #92]	; (8001284 <HAL_DMA_Abort_IT+0x294>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d009      	beq.n	800123e <HAL_DMA_Abort_IT+0x24e>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a16      	ldr	r2, [pc, #88]	; (8001288 <HAL_DMA_Abort_IT+0x298>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d004      	beq.n	800123e <HAL_DMA_Abort_IT+0x24e>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a14      	ldr	r2, [pc, #80]	; (800128c <HAL_DMA_Abort_IT+0x29c>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d128      	bne.n	8001290 <HAL_DMA_Abort_IT+0x2a0>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f022 0201 	bic.w	r2, r2, #1
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	e027      	b.n	80012a0 <HAL_DMA_Abort_IT+0x2b0>
 8001250:	40020010 	.word	0x40020010
 8001254:	40020028 	.word	0x40020028
 8001258:	40020040 	.word	0x40020040
 800125c:	40020058 	.word	0x40020058
 8001260:	40020070 	.word	0x40020070
 8001264:	40020088 	.word	0x40020088
 8001268:	400200a0 	.word	0x400200a0
 800126c:	400200b8 	.word	0x400200b8
 8001270:	40020410 	.word	0x40020410
 8001274:	40020428 	.word	0x40020428
 8001278:	40020440 	.word	0x40020440
 800127c:	40020458 	.word	0x40020458
 8001280:	40020470 	.word	0x40020470
 8001284:	40020488 	.word	0x40020488
 8001288:	400204a0 	.word	0x400204a0
 800128c:	400204b8 	.word	0x400204b8
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f022 0201 	bic.w	r2, r2, #1
 800129e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a5c      	ldr	r2, [pc, #368]	; (8001418 <HAL_DMA_Abort_IT+0x428>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d072      	beq.n	8001390 <HAL_DMA_Abort_IT+0x3a0>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a5b      	ldr	r2, [pc, #364]	; (800141c <HAL_DMA_Abort_IT+0x42c>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d06d      	beq.n	8001390 <HAL_DMA_Abort_IT+0x3a0>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a59      	ldr	r2, [pc, #356]	; (8001420 <HAL_DMA_Abort_IT+0x430>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d068      	beq.n	8001390 <HAL_DMA_Abort_IT+0x3a0>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a58      	ldr	r2, [pc, #352]	; (8001424 <HAL_DMA_Abort_IT+0x434>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d063      	beq.n	8001390 <HAL_DMA_Abort_IT+0x3a0>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a56      	ldr	r2, [pc, #344]	; (8001428 <HAL_DMA_Abort_IT+0x438>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d05e      	beq.n	8001390 <HAL_DMA_Abort_IT+0x3a0>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a55      	ldr	r2, [pc, #340]	; (800142c <HAL_DMA_Abort_IT+0x43c>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d059      	beq.n	8001390 <HAL_DMA_Abort_IT+0x3a0>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a53      	ldr	r2, [pc, #332]	; (8001430 <HAL_DMA_Abort_IT+0x440>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d054      	beq.n	8001390 <HAL_DMA_Abort_IT+0x3a0>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a52      	ldr	r2, [pc, #328]	; (8001434 <HAL_DMA_Abort_IT+0x444>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d04f      	beq.n	8001390 <HAL_DMA_Abort_IT+0x3a0>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a50      	ldr	r2, [pc, #320]	; (8001438 <HAL_DMA_Abort_IT+0x448>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d04a      	beq.n	8001390 <HAL_DMA_Abort_IT+0x3a0>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a4f      	ldr	r2, [pc, #316]	; (800143c <HAL_DMA_Abort_IT+0x44c>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d045      	beq.n	8001390 <HAL_DMA_Abort_IT+0x3a0>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a4d      	ldr	r2, [pc, #308]	; (8001440 <HAL_DMA_Abort_IT+0x450>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d040      	beq.n	8001390 <HAL_DMA_Abort_IT+0x3a0>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a4c      	ldr	r2, [pc, #304]	; (8001444 <HAL_DMA_Abort_IT+0x454>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d03b      	beq.n	8001390 <HAL_DMA_Abort_IT+0x3a0>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a4a      	ldr	r2, [pc, #296]	; (8001448 <HAL_DMA_Abort_IT+0x458>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d036      	beq.n	8001390 <HAL_DMA_Abort_IT+0x3a0>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a49      	ldr	r2, [pc, #292]	; (800144c <HAL_DMA_Abort_IT+0x45c>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d031      	beq.n	8001390 <HAL_DMA_Abort_IT+0x3a0>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a47      	ldr	r2, [pc, #284]	; (8001450 <HAL_DMA_Abort_IT+0x460>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d02c      	beq.n	8001390 <HAL_DMA_Abort_IT+0x3a0>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a46      	ldr	r2, [pc, #280]	; (8001454 <HAL_DMA_Abort_IT+0x464>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d027      	beq.n	8001390 <HAL_DMA_Abort_IT+0x3a0>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a44      	ldr	r2, [pc, #272]	; (8001458 <HAL_DMA_Abort_IT+0x468>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d022      	beq.n	8001390 <HAL_DMA_Abort_IT+0x3a0>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a43      	ldr	r2, [pc, #268]	; (800145c <HAL_DMA_Abort_IT+0x46c>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d01d      	beq.n	8001390 <HAL_DMA_Abort_IT+0x3a0>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a41      	ldr	r2, [pc, #260]	; (8001460 <HAL_DMA_Abort_IT+0x470>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d018      	beq.n	8001390 <HAL_DMA_Abort_IT+0x3a0>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a40      	ldr	r2, [pc, #256]	; (8001464 <HAL_DMA_Abort_IT+0x474>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d013      	beq.n	8001390 <HAL_DMA_Abort_IT+0x3a0>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a3e      	ldr	r2, [pc, #248]	; (8001468 <HAL_DMA_Abort_IT+0x478>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d00e      	beq.n	8001390 <HAL_DMA_Abort_IT+0x3a0>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a3d      	ldr	r2, [pc, #244]	; (800146c <HAL_DMA_Abort_IT+0x47c>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d009      	beq.n	8001390 <HAL_DMA_Abort_IT+0x3a0>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a3b      	ldr	r2, [pc, #236]	; (8001470 <HAL_DMA_Abort_IT+0x480>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d004      	beq.n	8001390 <HAL_DMA_Abort_IT+0x3a0>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a3a      	ldr	r2, [pc, #232]	; (8001474 <HAL_DMA_Abort_IT+0x484>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d101      	bne.n	8001394 <HAL_DMA_Abort_IT+0x3a4>
 8001390:	2301      	movs	r3, #1
 8001392:	e000      	b.n	8001396 <HAL_DMA_Abort_IT+0x3a6>
 8001394:	2300      	movs	r3, #0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d028      	beq.n	80013ec <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013a8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ae:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013b4:	f003 031f 	and.w	r3, r3, #31
 80013b8:	2201      	movs	r2, #1
 80013ba:	409a      	lsls	r2, r3
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80013c8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d00c      	beq.n	80013ec <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80013dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013e0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80013ea:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2201      	movs	r2, #1
 80013f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001400:	2b00      	cmp	r3, #0
 8001402:	d003      	beq.n	800140c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40020010 	.word	0x40020010
 800141c:	40020028 	.word	0x40020028
 8001420:	40020040 	.word	0x40020040
 8001424:	40020058 	.word	0x40020058
 8001428:	40020070 	.word	0x40020070
 800142c:	40020088 	.word	0x40020088
 8001430:	400200a0 	.word	0x400200a0
 8001434:	400200b8 	.word	0x400200b8
 8001438:	40020410 	.word	0x40020410
 800143c:	40020428 	.word	0x40020428
 8001440:	40020440 	.word	0x40020440
 8001444:	40020458 	.word	0x40020458
 8001448:	40020470 	.word	0x40020470
 800144c:	40020488 	.word	0x40020488
 8001450:	400204a0 	.word	0x400204a0
 8001454:	400204b8 	.word	0x400204b8
 8001458:	58025408 	.word	0x58025408
 800145c:	5802541c 	.word	0x5802541c
 8001460:	58025430 	.word	0x58025430
 8001464:	58025444 	.word	0x58025444
 8001468:	58025458 	.word	0x58025458
 800146c:	5802546c 	.word	0x5802546c
 8001470:	58025480 	.word	0x58025480
 8001474:	58025494 	.word	0x58025494

08001478 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001478:	b480      	push	{r7}
 800147a:	b089      	sub	sp, #36	; 0x24
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001482:	2300      	movs	r3, #0
 8001484:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001486:	4b89      	ldr	r3, [pc, #548]	; (80016ac <HAL_GPIO_Init+0x234>)
 8001488:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800148a:	e194      	b.n	80017b6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	2101      	movs	r1, #1
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	fa01 f303 	lsl.w	r3, r1, r3
 8001498:	4013      	ands	r3, r2
 800149a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f000 8186 	beq.w	80017b0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d00b      	beq.n	80014c4 <HAL_GPIO_Init+0x4c>
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d007      	beq.n	80014c4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014b8:	2b11      	cmp	r3, #17
 80014ba:	d003      	beq.n	80014c4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	2b12      	cmp	r3, #18
 80014c2:	d130      	bne.n	8001526 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	2203      	movs	r2, #3
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	43db      	mvns	r3, r3
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4013      	ands	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	68da      	ldr	r2, [r3, #12]
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014fa:	2201      	movs	r2, #1
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43db      	mvns	r3, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4013      	ands	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	091b      	lsrs	r3, r3, #4
 8001510:	f003 0201 	and.w	r2, r3, #1
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4313      	orrs	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	2203      	movs	r2, #3
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43db      	mvns	r3, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4013      	ands	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4313      	orrs	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	2b02      	cmp	r3, #2
 800155c:	d003      	beq.n	8001566 <HAL_GPIO_Init+0xee>
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2b12      	cmp	r3, #18
 8001564:	d123      	bne.n	80015ae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	08da      	lsrs	r2, r3, #3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	3208      	adds	r2, #8
 800156e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001572:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	220f      	movs	r2, #15
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43db      	mvns	r3, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4013      	ands	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	691a      	ldr	r2, [r3, #16]
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	f003 0307 	and.w	r3, r3, #7
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4313      	orrs	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	08da      	lsrs	r2, r3, #3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3208      	adds	r2, #8
 80015a8:	69b9      	ldr	r1, [r7, #24]
 80015aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	2203      	movs	r2, #3
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	43db      	mvns	r3, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4013      	ands	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f003 0203 	and.w	r2, r3, #3
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	4313      	orrs	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f000 80e0 	beq.w	80017b0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f0:	4b2f      	ldr	r3, [pc, #188]	; (80016b0 <HAL_GPIO_Init+0x238>)
 80015f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015f6:	4a2e      	ldr	r2, [pc, #184]	; (80016b0 <HAL_GPIO_Init+0x238>)
 80015f8:	f043 0302 	orr.w	r3, r3, #2
 80015fc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001600:	4b2b      	ldr	r3, [pc, #172]	; (80016b0 <HAL_GPIO_Init+0x238>)
 8001602:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800160e:	4a29      	ldr	r2, [pc, #164]	; (80016b4 <HAL_GPIO_Init+0x23c>)
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	089b      	lsrs	r3, r3, #2
 8001614:	3302      	adds	r3, #2
 8001616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800161a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	f003 0303 	and.w	r3, r3, #3
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	220f      	movs	r2, #15
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43db      	mvns	r3, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4013      	ands	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a20      	ldr	r2, [pc, #128]	; (80016b8 <HAL_GPIO_Init+0x240>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d052      	beq.n	80016e0 <HAL_GPIO_Init+0x268>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a1f      	ldr	r2, [pc, #124]	; (80016bc <HAL_GPIO_Init+0x244>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d031      	beq.n	80016a6 <HAL_GPIO_Init+0x22e>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a1e      	ldr	r2, [pc, #120]	; (80016c0 <HAL_GPIO_Init+0x248>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d02b      	beq.n	80016a2 <HAL_GPIO_Init+0x22a>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a1d      	ldr	r2, [pc, #116]	; (80016c4 <HAL_GPIO_Init+0x24c>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d025      	beq.n	800169e <HAL_GPIO_Init+0x226>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a1c      	ldr	r2, [pc, #112]	; (80016c8 <HAL_GPIO_Init+0x250>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d01f      	beq.n	800169a <HAL_GPIO_Init+0x222>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a1b      	ldr	r2, [pc, #108]	; (80016cc <HAL_GPIO_Init+0x254>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d019      	beq.n	8001696 <HAL_GPIO_Init+0x21e>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a1a      	ldr	r2, [pc, #104]	; (80016d0 <HAL_GPIO_Init+0x258>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d013      	beq.n	8001692 <HAL_GPIO_Init+0x21a>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a19      	ldr	r2, [pc, #100]	; (80016d4 <HAL_GPIO_Init+0x25c>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d00d      	beq.n	800168e <HAL_GPIO_Init+0x216>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a18      	ldr	r2, [pc, #96]	; (80016d8 <HAL_GPIO_Init+0x260>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d007      	beq.n	800168a <HAL_GPIO_Init+0x212>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a17      	ldr	r2, [pc, #92]	; (80016dc <HAL_GPIO_Init+0x264>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d101      	bne.n	8001686 <HAL_GPIO_Init+0x20e>
 8001682:	2309      	movs	r3, #9
 8001684:	e02d      	b.n	80016e2 <HAL_GPIO_Init+0x26a>
 8001686:	230a      	movs	r3, #10
 8001688:	e02b      	b.n	80016e2 <HAL_GPIO_Init+0x26a>
 800168a:	2308      	movs	r3, #8
 800168c:	e029      	b.n	80016e2 <HAL_GPIO_Init+0x26a>
 800168e:	2307      	movs	r3, #7
 8001690:	e027      	b.n	80016e2 <HAL_GPIO_Init+0x26a>
 8001692:	2306      	movs	r3, #6
 8001694:	e025      	b.n	80016e2 <HAL_GPIO_Init+0x26a>
 8001696:	2305      	movs	r3, #5
 8001698:	e023      	b.n	80016e2 <HAL_GPIO_Init+0x26a>
 800169a:	2304      	movs	r3, #4
 800169c:	e021      	b.n	80016e2 <HAL_GPIO_Init+0x26a>
 800169e:	2303      	movs	r3, #3
 80016a0:	e01f      	b.n	80016e2 <HAL_GPIO_Init+0x26a>
 80016a2:	2302      	movs	r3, #2
 80016a4:	e01d      	b.n	80016e2 <HAL_GPIO_Init+0x26a>
 80016a6:	2301      	movs	r3, #1
 80016a8:	e01b      	b.n	80016e2 <HAL_GPIO_Init+0x26a>
 80016aa:	bf00      	nop
 80016ac:	58000080 	.word	0x58000080
 80016b0:	58024400 	.word	0x58024400
 80016b4:	58000400 	.word	0x58000400
 80016b8:	58020000 	.word	0x58020000
 80016bc:	58020400 	.word	0x58020400
 80016c0:	58020800 	.word	0x58020800
 80016c4:	58020c00 	.word	0x58020c00
 80016c8:	58021000 	.word	0x58021000
 80016cc:	58021400 	.word	0x58021400
 80016d0:	58021800 	.word	0x58021800
 80016d4:	58021c00 	.word	0x58021c00
 80016d8:	58022000 	.word	0x58022000
 80016dc:	58022400 	.word	0x58022400
 80016e0:	2300      	movs	r3, #0
 80016e2:	69fa      	ldr	r2, [r7, #28]
 80016e4:	f002 0203 	and.w	r2, r2, #3
 80016e8:	0092      	lsls	r2, r2, #2
 80016ea:	4093      	lsls	r3, r2
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016f2:	4938      	ldr	r1, [pc, #224]	; (80017d4 <HAL_GPIO_Init+0x35c>)
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	089b      	lsrs	r3, r3, #2
 80016f8:	3302      	adds	r3, #2
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	43db      	mvns	r3, r3
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	4013      	ands	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d003      	beq.n	8001724 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	4313      	orrs	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	43db      	mvns	r3, r3
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4013      	ands	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d003      	beq.n	800174e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	4313      	orrs	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001754:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	43db      	mvns	r3, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4013      	ands	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	4313      	orrs	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800177a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	43db      	mvns	r3, r3
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4013      	ands	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d003      	beq.n	80017a8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80017a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	3301      	adds	r3, #1
 80017b4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	fa22 f303 	lsr.w	r3, r2, r3
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	f47f ae63 	bne.w	800148c <HAL_GPIO_Init+0x14>
  }
}
 80017c6:	bf00      	nop
 80017c8:	3724      	adds	r7, #36	; 0x24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	58000400 	.word	0x58000400

080017d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	460b      	mov	r3, r1
 80017e2:	807b      	strh	r3, [r7, #2]
 80017e4:	4613      	mov	r3, r2
 80017e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017e8:	787b      	ldrb	r3, [r7, #1]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d003      	beq.n	80017f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017ee:	887a      	ldrh	r2, [r7, #2]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80017f4:	e003      	b.n	80017fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80017f6:	887b      	ldrh	r3, [r7, #2]
 80017f8:	041a      	lsls	r2, r3, #16
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	619a      	str	r2, [r3, #24]
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
 8001812:	460b      	mov	r3, r1
 8001814:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	695a      	ldr	r2, [r3, #20]
 800181a:	887b      	ldrh	r3, [r7, #2]
 800181c:	401a      	ands	r2, r3
 800181e:	887b      	ldrh	r3, [r7, #2]
 8001820:	429a      	cmp	r2, r3
 8001822:	d104      	bne.n	800182e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001824:	887b      	ldrh	r3, [r7, #2]
 8001826:	041a      	lsls	r2, r3, #16
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800182c:	e002      	b.n	8001834 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800182e:	887a      	ldrh	r2, [r7, #2]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	619a      	str	r2, [r3, #24]
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001842:	b08f      	sub	sp, #60	; 0x3c
 8001844:	af0a      	add	r7, sp, #40	; 0x28
 8001846:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e054      	b.n	80018fc <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800185e:	b2db      	uxtb	r3, r3
 8001860:	2b00      	cmp	r3, #0
 8001862:	d106      	bne.n	8001872 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f007 fb35 	bl	8008edc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2203      	movs	r2, #3
 8001876:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800187e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001882:	2b00      	cmp	r3, #0
 8001884:	d102      	bne.n	800188c <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f004 fa76 	bl	8005d82 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	603b      	str	r3, [r7, #0]
 800189c:	687e      	ldr	r6, [r7, #4]
 800189e:	466d      	mov	r5, sp
 80018a0:	f106 0410 	add.w	r4, r6, #16
 80018a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80018b4:	1d33      	adds	r3, r6, #4
 80018b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018b8:	6838      	ldr	r0, [r7, #0]
 80018ba:	f004 f9ef 	bl	8005c9c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2101      	movs	r1, #1
 80018c4:	4618      	mov	r0, r3
 80018c6:	f004 fa6d 	bl	8005da4 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	603b      	str	r3, [r7, #0]
 80018d0:	687e      	ldr	r6, [r7, #4]
 80018d2:	466d      	mov	r5, sp
 80018d4:	f106 0410 	add.w	r4, r6, #16
 80018d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018e4:	e885 0003 	stmia.w	r5, {r0, r1}
 80018e8:	1d33      	adds	r3, r6, #4
 80018ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018ec:	6838      	ldr	r0, [r7, #0]
 80018ee:	f004 fb7f 	bl	8005ff0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2201      	movs	r2, #1
 80018f6:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001904 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001904:	b590      	push	{r4, r7, lr}
 8001906:	b089      	sub	sp, #36	; 0x24
 8001908:	af04      	add	r7, sp, #16
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	4608      	mov	r0, r1
 800190e:	4611      	mov	r1, r2
 8001910:	461a      	mov	r2, r3
 8001912:	4603      	mov	r3, r0
 8001914:	70fb      	strb	r3, [r7, #3]
 8001916:	460b      	mov	r3, r1
 8001918:	70bb      	strb	r3, [r7, #2]
 800191a:	4613      	mov	r3, r2
 800191c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001924:	2b01      	cmp	r3, #1
 8001926:	d101      	bne.n	800192c <HAL_HCD_HC_Init+0x28>
 8001928:	2302      	movs	r3, #2
 800192a:	e07f      	b.n	8001a2c <HAL_HCD_HC_Init+0x128>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001934:	78fa      	ldrb	r2, [r7, #3]
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	4613      	mov	r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4413      	add	r3, r2
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	440b      	add	r3, r1
 8001942:	333d      	adds	r3, #61	; 0x3d
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001948:	78fa      	ldrb	r2, [r7, #3]
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	440b      	add	r3, r1
 8001956:	3338      	adds	r3, #56	; 0x38
 8001958:	787a      	ldrb	r2, [r7, #1]
 800195a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800195c:	78fa      	ldrb	r2, [r7, #3]
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	4613      	mov	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	4413      	add	r3, r2
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	440b      	add	r3, r1
 800196a:	3340      	adds	r3, #64	; 0x40
 800196c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800196e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001970:	78fa      	ldrb	r2, [r7, #3]
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	4613      	mov	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	440b      	add	r3, r1
 800197e:	3339      	adds	r3, #57	; 0x39
 8001980:	78fa      	ldrb	r2, [r7, #3]
 8001982:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001984:	78fa      	ldrb	r2, [r7, #3]
 8001986:	6879      	ldr	r1, [r7, #4]
 8001988:	4613      	mov	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	440b      	add	r3, r1
 8001992:	333f      	adds	r3, #63	; 0x3f
 8001994:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001998:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800199a:	78fa      	ldrb	r2, [r7, #3]
 800199c:	78bb      	ldrb	r3, [r7, #2]
 800199e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019a2:	b2d8      	uxtb	r0, r3
 80019a4:	6879      	ldr	r1, [r7, #4]
 80019a6:	4613      	mov	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	440b      	add	r3, r1
 80019b0:	333a      	adds	r3, #58	; 0x3a
 80019b2:	4602      	mov	r2, r0
 80019b4:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80019b6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	da0a      	bge.n	80019d4 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80019be:	78fa      	ldrb	r2, [r7, #3]
 80019c0:	6879      	ldr	r1, [r7, #4]
 80019c2:	4613      	mov	r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	4413      	add	r3, r2
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	440b      	add	r3, r1
 80019cc:	333b      	adds	r3, #59	; 0x3b
 80019ce:	2201      	movs	r2, #1
 80019d0:	701a      	strb	r2, [r3, #0]
 80019d2:	e009      	b.n	80019e8 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80019d4:	78fa      	ldrb	r2, [r7, #3]
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	4613      	mov	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	440b      	add	r3, r1
 80019e2:	333b      	adds	r3, #59	; 0x3b
 80019e4:	2200      	movs	r2, #0
 80019e6:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80019e8:	78fa      	ldrb	r2, [r7, #3]
 80019ea:	6879      	ldr	r1, [r7, #4]
 80019ec:	4613      	mov	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	440b      	add	r3, r1
 80019f6:	333c      	adds	r3, #60	; 0x3c
 80019f8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80019fc:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6818      	ldr	r0, [r3, #0]
 8001a02:	787c      	ldrb	r4, [r7, #1]
 8001a04:	78ba      	ldrb	r2, [r7, #2]
 8001a06:	78f9      	ldrb	r1, [r7, #3]
 8001a08:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a0a:	9302      	str	r3, [sp, #8]
 8001a0c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001a10:	9301      	str	r3, [sp, #4]
 8001a12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	4623      	mov	r3, r4
 8001a1a:	f004 fc23 	bl	8006264 <USB_HC_Init>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd90      	pop	{r4, r7, pc}

08001a34 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001a40:	2300      	movs	r3, #0
 8001a42:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d101      	bne.n	8001a52 <HAL_HCD_HC_Halt+0x1e>
 8001a4e:	2302      	movs	r3, #2
 8001a50:	e00f      	b.n	8001a72 <HAL_HCD_HC_Halt+0x3e>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	78fa      	ldrb	r2, [r7, #3]
 8001a60:	4611      	mov	r1, r2
 8001a62:	4618      	mov	r0, r3
 8001a64:	f004 fe5d 	bl	8006722 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
	...

08001a7c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	4608      	mov	r0, r1
 8001a86:	4611      	mov	r1, r2
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	70fb      	strb	r3, [r7, #3]
 8001a8e:	460b      	mov	r3, r1
 8001a90:	70bb      	strb	r3, [r7, #2]
 8001a92:	4613      	mov	r3, r2
 8001a94:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001a96:	78fa      	ldrb	r2, [r7, #3]
 8001a98:	6879      	ldr	r1, [r7, #4]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4413      	add	r3, r2
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	440b      	add	r3, r1
 8001aa4:	333b      	adds	r3, #59	; 0x3b
 8001aa6:	78ba      	ldrb	r2, [r7, #2]
 8001aa8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001aaa:	78fa      	ldrb	r2, [r7, #3]
 8001aac:	6879      	ldr	r1, [r7, #4]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	440b      	add	r3, r1
 8001ab8:	333f      	adds	r3, #63	; 0x3f
 8001aba:	787a      	ldrb	r2, [r7, #1]
 8001abc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001abe:	7c3b      	ldrb	r3, [r7, #16]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d114      	bne.n	8001aee <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001ac4:	78fa      	ldrb	r2, [r7, #3]
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4413      	add	r3, r2
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	440b      	add	r3, r1
 8001ad2:	3342      	adds	r3, #66	; 0x42
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001ad8:	78fa      	ldrb	r2, [r7, #3]
 8001ada:	6879      	ldr	r1, [r7, #4]
 8001adc:	4613      	mov	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	440b      	add	r3, r1
 8001ae6:	333d      	adds	r3, #61	; 0x3d
 8001ae8:	7f3a      	ldrb	r2, [r7, #28]
 8001aea:	701a      	strb	r2, [r3, #0]
 8001aec:	e009      	b.n	8001b02 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001aee:	78fa      	ldrb	r2, [r7, #3]
 8001af0:	6879      	ldr	r1, [r7, #4]
 8001af2:	4613      	mov	r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	4413      	add	r3, r2
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	440b      	add	r3, r1
 8001afc:	3342      	adds	r3, #66	; 0x42
 8001afe:	2202      	movs	r2, #2
 8001b00:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001b02:	787b      	ldrb	r3, [r7, #1]
 8001b04:	2b03      	cmp	r3, #3
 8001b06:	f200 80d6 	bhi.w	8001cb6 <HAL_HCD_HC_SubmitRequest+0x23a>
 8001b0a:	a201      	add	r2, pc, #4	; (adr r2, 8001b10 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b10:	08001b21 	.word	0x08001b21
 8001b14:	08001ca1 	.word	0x08001ca1
 8001b18:	08001b8d 	.word	0x08001b8d
 8001b1c:	08001c17 	.word	0x08001c17
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001b20:	7c3b      	ldrb	r3, [r7, #16]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	f040 80c9 	bne.w	8001cba <HAL_HCD_HC_SubmitRequest+0x23e>
 8001b28:	78bb      	ldrb	r3, [r7, #2]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f040 80c5 	bne.w	8001cba <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8001b30:	8b3b      	ldrh	r3, [r7, #24]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d109      	bne.n	8001b4a <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001b36:	78fa      	ldrb	r2, [r7, #3]
 8001b38:	6879      	ldr	r1, [r7, #4]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4413      	add	r3, r2
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	440b      	add	r3, r1
 8001b44:	3351      	adds	r3, #81	; 0x51
 8001b46:	2201      	movs	r2, #1
 8001b48:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b4a:	78fa      	ldrb	r2, [r7, #3]
 8001b4c:	6879      	ldr	r1, [r7, #4]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4413      	add	r3, r2
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	440b      	add	r3, r1
 8001b58:	3351      	adds	r3, #81	; 0x51
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d10a      	bne.n	8001b76 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b60:	78fa      	ldrb	r2, [r7, #3]
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	4613      	mov	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4413      	add	r3, r2
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	440b      	add	r3, r1
 8001b6e:	3342      	adds	r3, #66	; 0x42
 8001b70:	2200      	movs	r2, #0
 8001b72:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001b74:	e0a1      	b.n	8001cba <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b76:	78fa      	ldrb	r2, [r7, #3]
 8001b78:	6879      	ldr	r1, [r7, #4]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4413      	add	r3, r2
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	440b      	add	r3, r1
 8001b84:	3342      	adds	r3, #66	; 0x42
 8001b86:	2202      	movs	r2, #2
 8001b88:	701a      	strb	r2, [r3, #0]
      break;
 8001b8a:	e096      	b.n	8001cba <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001b8c:	78bb      	ldrb	r3, [r7, #2]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d120      	bne.n	8001bd4 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b92:	78fa      	ldrb	r2, [r7, #3]
 8001b94:	6879      	ldr	r1, [r7, #4]
 8001b96:	4613      	mov	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	440b      	add	r3, r1
 8001ba0:	3351      	adds	r3, #81	; 0x51
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d10a      	bne.n	8001bbe <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ba8:	78fa      	ldrb	r2, [r7, #3]
 8001baa:	6879      	ldr	r1, [r7, #4]
 8001bac:	4613      	mov	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	440b      	add	r3, r1
 8001bb6:	3342      	adds	r3, #66	; 0x42
 8001bb8:	2200      	movs	r2, #0
 8001bba:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001bbc:	e07e      	b.n	8001cbc <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bbe:	78fa      	ldrb	r2, [r7, #3]
 8001bc0:	6879      	ldr	r1, [r7, #4]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	440b      	add	r3, r1
 8001bcc:	3342      	adds	r3, #66	; 0x42
 8001bce:	2202      	movs	r2, #2
 8001bd0:	701a      	strb	r2, [r3, #0]
      break;
 8001bd2:	e073      	b.n	8001cbc <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001bd4:	78fa      	ldrb	r2, [r7, #3]
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	4413      	add	r3, r2
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	440b      	add	r3, r1
 8001be2:	3350      	adds	r3, #80	; 0x50
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10a      	bne.n	8001c00 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bea:	78fa      	ldrb	r2, [r7, #3]
 8001bec:	6879      	ldr	r1, [r7, #4]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4413      	add	r3, r2
 8001bf4:	00db      	lsls	r3, r3, #3
 8001bf6:	440b      	add	r3, r1
 8001bf8:	3342      	adds	r3, #66	; 0x42
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	701a      	strb	r2, [r3, #0]
      break;
 8001bfe:	e05d      	b.n	8001cbc <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c00:	78fa      	ldrb	r2, [r7, #3]
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	4613      	mov	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	440b      	add	r3, r1
 8001c0e:	3342      	adds	r3, #66	; 0x42
 8001c10:	2202      	movs	r2, #2
 8001c12:	701a      	strb	r2, [r3, #0]
      break;
 8001c14:	e052      	b.n	8001cbc <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001c16:	78bb      	ldrb	r3, [r7, #2]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d120      	bne.n	8001c5e <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c1c:	78fa      	ldrb	r2, [r7, #3]
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	4613      	mov	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4413      	add	r3, r2
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	440b      	add	r3, r1
 8001c2a:	3351      	adds	r3, #81	; 0x51
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d10a      	bne.n	8001c48 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c32:	78fa      	ldrb	r2, [r7, #3]
 8001c34:	6879      	ldr	r1, [r7, #4]
 8001c36:	4613      	mov	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	440b      	add	r3, r1
 8001c40:	3342      	adds	r3, #66	; 0x42
 8001c42:	2200      	movs	r2, #0
 8001c44:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c46:	e039      	b.n	8001cbc <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c48:	78fa      	ldrb	r2, [r7, #3]
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4413      	add	r3, r2
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	440b      	add	r3, r1
 8001c56:	3342      	adds	r3, #66	; 0x42
 8001c58:	2202      	movs	r2, #2
 8001c5a:	701a      	strb	r2, [r3, #0]
      break;
 8001c5c:	e02e      	b.n	8001cbc <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c5e:	78fa      	ldrb	r2, [r7, #3]
 8001c60:	6879      	ldr	r1, [r7, #4]
 8001c62:	4613      	mov	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	440b      	add	r3, r1
 8001c6c:	3350      	adds	r3, #80	; 0x50
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d10a      	bne.n	8001c8a <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c74:	78fa      	ldrb	r2, [r7, #3]
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4413      	add	r3, r2
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	440b      	add	r3, r1
 8001c82:	3342      	adds	r3, #66	; 0x42
 8001c84:	2200      	movs	r2, #0
 8001c86:	701a      	strb	r2, [r3, #0]
      break;
 8001c88:	e018      	b.n	8001cbc <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c8a:	78fa      	ldrb	r2, [r7, #3]
 8001c8c:	6879      	ldr	r1, [r7, #4]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	440b      	add	r3, r1
 8001c98:	3342      	adds	r3, #66	; 0x42
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	701a      	strb	r2, [r3, #0]
      break;
 8001c9e:	e00d      	b.n	8001cbc <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ca0:	78fa      	ldrb	r2, [r7, #3]
 8001ca2:	6879      	ldr	r1, [r7, #4]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	440b      	add	r3, r1
 8001cae:	3342      	adds	r3, #66	; 0x42
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	701a      	strb	r2, [r3, #0]
      break;
 8001cb4:	e002      	b.n	8001cbc <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8001cb6:	bf00      	nop
 8001cb8:	e000      	b.n	8001cbc <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8001cba:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001cbc:	78fa      	ldrb	r2, [r7, #3]
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4413      	add	r3, r2
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	440b      	add	r3, r1
 8001cca:	3344      	adds	r3, #68	; 0x44
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001cd0:	78fa      	ldrb	r2, [r7, #3]
 8001cd2:	8b39      	ldrh	r1, [r7, #24]
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	4403      	add	r3, r0
 8001ce0:	3348      	adds	r3, #72	; 0x48
 8001ce2:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001ce4:	78fa      	ldrb	r2, [r7, #3]
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4413      	add	r3, r2
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	440b      	add	r3, r1
 8001cf2:	335c      	adds	r3, #92	; 0x5c
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001cf8:	78fa      	ldrb	r2, [r7, #3]
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	440b      	add	r3, r1
 8001d06:	334c      	adds	r3, #76	; 0x4c
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d0c:	78fa      	ldrb	r2, [r7, #3]
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	4613      	mov	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	4413      	add	r3, r2
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	440b      	add	r3, r1
 8001d1a:	3339      	adds	r3, #57	; 0x39
 8001d1c:	78fa      	ldrb	r2, [r7, #3]
 8001d1e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001d20:	78fa      	ldrb	r2, [r7, #3]
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	4613      	mov	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	440b      	add	r3, r1
 8001d2e:	335d      	adds	r3, #93	; 0x5d
 8001d30:	2200      	movs	r2, #0
 8001d32:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6818      	ldr	r0, [r3, #0]
 8001d38:	78fa      	ldrb	r2, [r7, #3]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	4413      	add	r3, r2
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	3338      	adds	r3, #56	; 0x38
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	18d1      	adds	r1, r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	461a      	mov	r2, r3
 8001d50:	f004 fb92 	bl	8006478 <USB_HC_StartXfer>
 8001d54:	4603      	mov	r3, r0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop

08001d60 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f004 f8f7 	bl	8005f6a <USB_GetMode>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	f040 80ef 	bne.w	8001f62 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f004 f8db 	bl	8005f44 <USB_ReadInterrupts>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f000 80e5 	beq.w	8001f60 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f004 f8d2 	bl	8005f44 <USB_ReadInterrupts>
 8001da0:	4603      	mov	r3, r0
 8001da2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001da6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001daa:	d104      	bne.n	8001db6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001db4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f004 f8c2 	bl	8005f44 <USB_ReadInterrupts>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001dca:	d104      	bne.n	8001dd6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001dd4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f004 f8b2 	bl	8005f44 <USB_ReadInterrupts>
 8001de0:	4603      	mov	r3, r0
 8001de2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001de6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001dea:	d104      	bne.n	8001df6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001df4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f004 f8a2 	bl	8005f44 <USB_ReadInterrupts>
 8001e00:	4603      	mov	r3, r0
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d103      	bne.n	8001e12 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2202      	movs	r2, #2
 8001e10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f004 f894 	bl	8005f44 <USB_ReadInterrupts>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e26:	d115      	bne.n	8001e54 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001e30:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d108      	bne.n	8001e54 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f007 f8c6 	bl	8008fd4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f004 f984 	bl	800615c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f004 f873 	bl	8005f44 <USB_ReadInterrupts>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e68:	d102      	bne.n	8001e70 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f001 f94a 	bl	8003104 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f004 f865 	bl	8005f44 <USB_ReadInterrupts>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	f003 0308 	and.w	r3, r3, #8
 8001e80:	2b08      	cmp	r3, #8
 8001e82:	d106      	bne.n	8001e92 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f007 f889 	bl	8008f9c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2208      	movs	r2, #8
 8001e90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f004 f854 	bl	8005f44 <USB_ReadInterrupts>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ea6:	d138      	bne.n	8001f1a <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f004 fc27 	bl	8006700 <USB_HC_ReadInterrupt>
 8001eb2:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	e025      	b.n	8001f06 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	f003 030f 	and.w	r3, r3, #15
 8001ec0:	68ba      	ldr	r2, [r7, #8]
 8001ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d018      	beq.n	8001f00 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	015a      	lsls	r2, r3, #5
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ee0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ee4:	d106      	bne.n	8001ef4 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	4619      	mov	r1, r3
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 f8b3 	bl	8002058 <HCD_HC_IN_IRQHandler>
 8001ef2:	e005      	b.n	8001f00 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	4619      	mov	r1, r3
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 fce1 	bl	80028c2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	3301      	adds	r3, #1
 8001f04:	617b      	str	r3, [r7, #20]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d3d4      	bcc.n	8001eba <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f004 f810 	bl	8005f44 <USB_ReadInterrupts>
 8001f24:	4603      	mov	r3, r0
 8001f26:	f003 0310 	and.w	r3, r3, #16
 8001f2a:	2b10      	cmp	r3, #16
 8001f2c:	d101      	bne.n	8001f32 <HAL_HCD_IRQHandler+0x1d2>
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e000      	b.n	8001f34 <HAL_HCD_IRQHandler+0x1d4>
 8001f32:	2300      	movs	r3, #0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d014      	beq.n	8001f62 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	699a      	ldr	r2, [r3, #24]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 0210 	bic.w	r2, r2, #16
 8001f46:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f001 f82f 	bl	8002fac <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	699a      	ldr	r2, [r3, #24]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f042 0210 	orr.w	r2, r2, #16
 8001f5c:	619a      	str	r2, [r3, #24]
 8001f5e:	e000      	b.n	8001f62 <HAL_HCD_IRQHandler+0x202>
      return;
 8001f60:	bf00      	nop
    }
  }
}
 8001f62:	3718      	adds	r7, #24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d101      	bne.n	8001f7e <HAL_HCD_Start+0x16>
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	e013      	b.n	8001fa6 <HAL_HCD_Start+0x3e>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f003 fee8 	bl	8005d60 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2101      	movs	r1, #1
 8001f96:	4618      	mov	r0, r3
 8001f98:	f004 f91a 	bl	80061d0 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b082      	sub	sp, #8
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d101      	bne.n	8001fc4 <HAL_HCD_Stop+0x16>
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	e00d      	b.n	8001fe0 <HAL_HCD_Stop+0x32>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f004 fce1 	bl	8006998 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001ff4:	78fa      	ldrb	r2, [r7, #3]
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	440b      	add	r3, r1
 8002002:	335c      	adds	r3, #92	; 0x5c
 8002004:	781b      	ldrb	r3, [r3, #0]
}
 8002006:	4618      	mov	r0, r3
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
 800201a:	460b      	mov	r3, r1
 800201c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800201e:	78fa      	ldrb	r2, [r7, #3]
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	4613      	mov	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	440b      	add	r3, r1
 800202c:	334c      	adds	r3, #76	; 0x4c
 800202e:	681b      	ldr	r3, [r3, #0]
}
 8002030:	4618      	mov	r0, r3
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f004 f8fa 	bl	8006242 <USB_GetCurrentFrame>
 800204e:	4603      	mov	r3, r0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	460b      	mov	r3, r1
 8002062:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800206e:	78fb      	ldrb	r3, [r7, #3]
 8002070:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	015a      	lsls	r2, r3, #5
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	4413      	add	r3, r2
 800207a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b04      	cmp	r3, #4
 8002086:	d119      	bne.n	80020bc <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	015a      	lsls	r2, r3, #5
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	4413      	add	r3, r2
 8002090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002094:	461a      	mov	r2, r3
 8002096:	2304      	movs	r3, #4
 8002098:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	015a      	lsls	r2, r3, #5
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	4413      	add	r3, r2
 80020a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	0151      	lsls	r1, r2, #5
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	440a      	add	r2, r1
 80020b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020b4:	f043 0302 	orr.w	r3, r3, #2
 80020b8:	60d3      	str	r3, [r2, #12]
 80020ba:	e0ce      	b.n	800225a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	015a      	lsls	r2, r3, #5
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	4413      	add	r3, r2
 80020c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020d2:	d12c      	bne.n	800212e <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	015a      	lsls	r2, r3, #5
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	4413      	add	r3, r2
 80020dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e0:	461a      	mov	r2, r3
 80020e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020e6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	4613      	mov	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	440b      	add	r3, r1
 80020f6:	335d      	adds	r3, #93	; 0x5d
 80020f8:	2207      	movs	r2, #7
 80020fa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	015a      	lsls	r2, r3, #5
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	4413      	add	r3, r2
 8002104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	0151      	lsls	r1, r2, #5
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	440a      	add	r2, r1
 8002112:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002116:	f043 0302 	orr.w	r3, r3, #2
 800211a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	4611      	mov	r1, r2
 8002126:	4618      	mov	r0, r3
 8002128:	f004 fafb 	bl	8006722 <USB_HC_Halt>
 800212c:	e095      	b.n	800225a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	015a      	lsls	r2, r3, #5
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	4413      	add	r3, r2
 8002136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f003 0320 	and.w	r3, r3, #32
 8002140:	2b20      	cmp	r3, #32
 8002142:	d109      	bne.n	8002158 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	015a      	lsls	r2, r3, #5
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	4413      	add	r3, r2
 800214c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002150:	461a      	mov	r2, r3
 8002152:	2320      	movs	r3, #32
 8002154:	6093      	str	r3, [r2, #8]
 8002156:	e080      	b.n	800225a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	015a      	lsls	r2, r3, #5
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	4413      	add	r3, r2
 8002160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	2b08      	cmp	r3, #8
 800216c:	d134      	bne.n	80021d8 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	015a      	lsls	r2, r3, #5
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	4413      	add	r3, r2
 8002176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	0151      	lsls	r1, r2, #5
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	440a      	add	r2, r1
 8002184:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002188:	f043 0302 	orr.w	r3, r3, #2
 800218c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	4613      	mov	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	440b      	add	r3, r1
 800219c:	335d      	adds	r3, #93	; 0x5d
 800219e:	2205      	movs	r2, #5
 80021a0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	015a      	lsls	r2, r3, #5
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	4413      	add	r3, r2
 80021aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ae:	461a      	mov	r2, r3
 80021b0:	2310      	movs	r3, #16
 80021b2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	015a      	lsls	r2, r3, #5
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	4413      	add	r3, r2
 80021bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c0:	461a      	mov	r2, r3
 80021c2:	2308      	movs	r3, #8
 80021c4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	4611      	mov	r1, r2
 80021d0:	4618      	mov	r0, r3
 80021d2:	f004 faa6 	bl	8006722 <USB_HC_Halt>
 80021d6:	e040      	b.n	800225a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	015a      	lsls	r2, r3, #5
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	4413      	add	r3, r2
 80021e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ee:	d134      	bne.n	800225a <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	015a      	lsls	r2, r3, #5
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	4413      	add	r3, r2
 80021f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	0151      	lsls	r1, r2, #5
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	440a      	add	r2, r1
 8002206:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800220a:	f043 0302 	orr.w	r3, r3, #2
 800220e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	4611      	mov	r1, r2
 800221a:	4618      	mov	r0, r3
 800221c:	f004 fa81 	bl	8006722 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	015a      	lsls	r2, r3, #5
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	4413      	add	r3, r2
 8002228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800222c:	461a      	mov	r2, r3
 800222e:	2310      	movs	r3, #16
 8002230:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	4613      	mov	r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4413      	add	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	440b      	add	r3, r1
 8002240:	335d      	adds	r3, #93	; 0x5d
 8002242:	2208      	movs	r2, #8
 8002244:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	015a      	lsls	r2, r3, #5
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	4413      	add	r3, r2
 800224e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002252:	461a      	mov	r2, r3
 8002254:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002258:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	015a      	lsls	r2, r3, #5
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	4413      	add	r3, r2
 8002262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800226c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002270:	d122      	bne.n	80022b8 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	015a      	lsls	r2, r3, #5
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	4413      	add	r3, r2
 800227a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	0151      	lsls	r1, r2, #5
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	440a      	add	r2, r1
 8002288:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800228c:	f043 0302 	orr.w	r3, r3, #2
 8002290:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	4611      	mov	r1, r2
 800229c:	4618      	mov	r0, r3
 800229e:	f004 fa40 	bl	8006722 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	015a      	lsls	r2, r3, #5
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	4413      	add	r3, r2
 80022aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ae:	461a      	mov	r2, r3
 80022b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022b4:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80022b6:	e300      	b.n	80028ba <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	015a      	lsls	r2, r3, #5
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	4413      	add	r3, r2
 80022c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	f040 80fd 	bne.w	80024ca <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d01b      	beq.n	8002310 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80022d8:	6879      	ldr	r1, [r7, #4]
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	4613      	mov	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	440b      	add	r3, r1
 80022e6:	3348      	adds	r3, #72	; 0x48
 80022e8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	0159      	lsls	r1, r3, #5
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	440b      	add	r3, r1
 80022f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80022fc:	1ad1      	subs	r1, r2, r3
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	4613      	mov	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4413      	add	r3, r2
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	4403      	add	r3, r0
 800230c:	334c      	adds	r3, #76	; 0x4c
 800230e:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	4613      	mov	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4413      	add	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	440b      	add	r3, r1
 800231e:	335d      	adds	r3, #93	; 0x5d
 8002320:	2201      	movs	r2, #1
 8002322:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	4613      	mov	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	440b      	add	r3, r1
 8002332:	3358      	adds	r3, #88	; 0x58
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	015a      	lsls	r2, r3, #5
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	4413      	add	r3, r2
 8002340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002344:	461a      	mov	r2, r3
 8002346:	2301      	movs	r3, #1
 8002348:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	4613      	mov	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	440b      	add	r3, r1
 8002358:	333f      	adds	r3, #63	; 0x3f
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00a      	beq.n	8002376 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	4613      	mov	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	440b      	add	r3, r1
 800236e:	333f      	adds	r3, #63	; 0x3f
 8002370:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002372:	2b02      	cmp	r3, #2
 8002374:	d121      	bne.n	80023ba <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	015a      	lsls	r2, r3, #5
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	4413      	add	r3, r2
 800237e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	0151      	lsls	r1, r2, #5
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	440a      	add	r2, r1
 800238c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002390:	f043 0302 	orr.w	r3, r3, #2
 8002394:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	b2d2      	uxtb	r2, r2
 800239e:	4611      	mov	r1, r2
 80023a0:	4618      	mov	r0, r3
 80023a2:	f004 f9be 	bl	8006722 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	015a      	lsls	r2, r3, #5
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	4413      	add	r3, r2
 80023ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b2:	461a      	mov	r2, r3
 80023b4:	2310      	movs	r3, #16
 80023b6:	6093      	str	r3, [r2, #8]
 80023b8:	e070      	b.n	800249c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80023ba:	6879      	ldr	r1, [r7, #4]
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	4613      	mov	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	440b      	add	r3, r1
 80023c8:	333f      	adds	r3, #63	; 0x3f
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	2b03      	cmp	r3, #3
 80023ce:	d12a      	bne.n	8002426 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	015a      	lsls	r2, r3, #5
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	4413      	add	r3, r2
 80023d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	0151      	lsls	r1, r2, #5
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	440a      	add	r2, r1
 80023e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80023ee:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	4613      	mov	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	440b      	add	r3, r1
 80023fe:	335c      	adds	r3, #92	; 0x5c
 8002400:	2201      	movs	r2, #1
 8002402:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	b2d8      	uxtb	r0, r3
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	4613      	mov	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4413      	add	r3, r2
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	440b      	add	r3, r1
 8002416:	335c      	adds	r3, #92	; 0x5c
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	461a      	mov	r2, r3
 800241c:	4601      	mov	r1, r0
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f006 fde6 	bl	8008ff0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002424:	e03a      	b.n	800249c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	4613      	mov	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4413      	add	r3, r2
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	440b      	add	r3, r1
 8002434:	333f      	adds	r3, #63	; 0x3f
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d12f      	bne.n	800249c <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	4613      	mov	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	440b      	add	r3, r1
 800244a:	335c      	adds	r3, #92	; 0x5c
 800244c:	2201      	movs	r2, #1
 800244e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002450:	6879      	ldr	r1, [r7, #4]
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	4613      	mov	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	440b      	add	r3, r1
 800245e:	3350      	adds	r3, #80	; 0x50
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	f083 0301 	eor.w	r3, r3, #1
 8002466:	b2d8      	uxtb	r0, r3
 8002468:	6879      	ldr	r1, [r7, #4]
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	4613      	mov	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4413      	add	r3, r2
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	440b      	add	r3, r1
 8002476:	3350      	adds	r3, #80	; 0x50
 8002478:	4602      	mov	r2, r0
 800247a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	b2d8      	uxtb	r0, r3
 8002480:	6879      	ldr	r1, [r7, #4]
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	4613      	mov	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4413      	add	r3, r2
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	440b      	add	r3, r1
 800248e:	335c      	adds	r3, #92	; 0x5c
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	461a      	mov	r2, r3
 8002494:	4601      	mov	r1, r0
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f006 fdaa 	bl	8008ff0 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	4613      	mov	r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4413      	add	r3, r2
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	440b      	add	r3, r1
 80024aa:	3350      	adds	r3, #80	; 0x50
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	f083 0301 	eor.w	r3, r3, #1
 80024b2:	b2d8      	uxtb	r0, r3
 80024b4:	6879      	ldr	r1, [r7, #4]
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	4613      	mov	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	440b      	add	r3, r1
 80024c2:	3350      	adds	r3, #80	; 0x50
 80024c4:	4602      	mov	r2, r0
 80024c6:	701a      	strb	r2, [r3, #0]
}
 80024c8:	e1f7      	b.n	80028ba <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	015a      	lsls	r2, r3, #5
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	4413      	add	r3, r2
 80024d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b02      	cmp	r3, #2
 80024de:	f040 811a 	bne.w	8002716 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	015a      	lsls	r2, r3, #5
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	4413      	add	r3, r2
 80024ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	0151      	lsls	r1, r2, #5
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	440a      	add	r2, r1
 80024f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024fc:	f023 0302 	bic.w	r3, r3, #2
 8002500:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	4613      	mov	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	440b      	add	r3, r1
 8002510:	335d      	adds	r3, #93	; 0x5d
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d10a      	bne.n	800252e <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002518:	6879      	ldr	r1, [r7, #4]
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	4613      	mov	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4413      	add	r3, r2
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	440b      	add	r3, r1
 8002526:	335c      	adds	r3, #92	; 0x5c
 8002528:	2201      	movs	r2, #1
 800252a:	701a      	strb	r2, [r3, #0]
 800252c:	e0d9      	b.n	80026e2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800252e:	6879      	ldr	r1, [r7, #4]
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	4613      	mov	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	4413      	add	r3, r2
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	440b      	add	r3, r1
 800253c:	335d      	adds	r3, #93	; 0x5d
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b05      	cmp	r3, #5
 8002542:	d10a      	bne.n	800255a <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002544:	6879      	ldr	r1, [r7, #4]
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	4613      	mov	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	440b      	add	r3, r1
 8002552:	335c      	adds	r3, #92	; 0x5c
 8002554:	2205      	movs	r2, #5
 8002556:	701a      	strb	r2, [r3, #0]
 8002558:	e0c3      	b.n	80026e2 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	4613      	mov	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	4413      	add	r3, r2
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	440b      	add	r3, r1
 8002568:	335d      	adds	r3, #93	; 0x5d
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b06      	cmp	r3, #6
 800256e:	d00a      	beq.n	8002586 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	4613      	mov	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4413      	add	r3, r2
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	440b      	add	r3, r1
 800257e:	335d      	adds	r3, #93	; 0x5d
 8002580:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002582:	2b08      	cmp	r3, #8
 8002584:	d156      	bne.n	8002634 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	4613      	mov	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	440b      	add	r3, r1
 8002594:	3358      	adds	r3, #88	; 0x58
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	1c59      	adds	r1, r3, #1
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	4613      	mov	r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4413      	add	r3, r2
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	4403      	add	r3, r0
 80025a8:	3358      	adds	r3, #88	; 0x58
 80025aa:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80025ac:	6879      	ldr	r1, [r7, #4]
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	4613      	mov	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	440b      	add	r3, r1
 80025ba:	3358      	adds	r3, #88	; 0x58
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2b03      	cmp	r3, #3
 80025c0:	d914      	bls.n	80025ec <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	4613      	mov	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4413      	add	r3, r2
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	440b      	add	r3, r1
 80025d0:	3358      	adds	r3, #88	; 0x58
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	4613      	mov	r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	4413      	add	r3, r2
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	440b      	add	r3, r1
 80025e4:	335c      	adds	r3, #92	; 0x5c
 80025e6:	2204      	movs	r2, #4
 80025e8:	701a      	strb	r2, [r3, #0]
 80025ea:	e009      	b.n	8002600 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	4613      	mov	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	440b      	add	r3, r1
 80025fa:	335c      	adds	r3, #92	; 0x5c
 80025fc:	2202      	movs	r2, #2
 80025fe:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	015a      	lsls	r2, r3, #5
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	4413      	add	r3, r2
 8002608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002616:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800261e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	015a      	lsls	r2, r3, #5
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	4413      	add	r3, r2
 8002628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800262c:	461a      	mov	r2, r3
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	e056      	b.n	80026e2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	4613      	mov	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	440b      	add	r3, r1
 8002642:	335d      	adds	r3, #93	; 0x5d
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	2b03      	cmp	r3, #3
 8002648:	d123      	bne.n	8002692 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	4613      	mov	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4413      	add	r3, r2
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	440b      	add	r3, r1
 8002658:	335c      	adds	r3, #92	; 0x5c
 800265a:	2202      	movs	r2, #2
 800265c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	015a      	lsls	r2, r3, #5
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	4413      	add	r3, r2
 8002666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002674:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800267c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	015a      	lsls	r2, r3, #5
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	4413      	add	r3, r2
 8002686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800268a:	461a      	mov	r2, r3
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	6013      	str	r3, [r2, #0]
 8002690:	e027      	b.n	80026e2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	4613      	mov	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	440b      	add	r3, r1
 80026a0:	335d      	adds	r3, #93	; 0x5d
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	2b07      	cmp	r3, #7
 80026a6:	d11c      	bne.n	80026e2 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80026a8:	6879      	ldr	r1, [r7, #4]
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	4613      	mov	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4413      	add	r3, r2
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	440b      	add	r3, r1
 80026b6:	3358      	adds	r3, #88	; 0x58
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	1c59      	adds	r1, r3, #1
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	4613      	mov	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	4403      	add	r3, r0
 80026ca:	3358      	adds	r3, #88	; 0x58
 80026cc:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	4613      	mov	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	4413      	add	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	440b      	add	r3, r1
 80026dc:	335c      	adds	r3, #92	; 0x5c
 80026de:	2204      	movs	r2, #4
 80026e0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	015a      	lsls	r2, r3, #5
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	4413      	add	r3, r2
 80026ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ee:	461a      	mov	r2, r3
 80026f0:	2302      	movs	r3, #2
 80026f2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	b2d8      	uxtb	r0, r3
 80026f8:	6879      	ldr	r1, [r7, #4]
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	4613      	mov	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4413      	add	r3, r2
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	440b      	add	r3, r1
 8002706:	335c      	adds	r3, #92	; 0x5c
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	461a      	mov	r2, r3
 800270c:	4601      	mov	r1, r0
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f006 fc6e 	bl	8008ff0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002714:	e0d1      	b.n	80028ba <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	015a      	lsls	r2, r3, #5
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	4413      	add	r3, r2
 800271e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002728:	2b80      	cmp	r3, #128	; 0x80
 800272a:	d13e      	bne.n	80027aa <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	015a      	lsls	r2, r3, #5
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	4413      	add	r3, r2
 8002734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	0151      	lsls	r1, r2, #5
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	440a      	add	r2, r1
 8002742:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002746:	f043 0302 	orr.w	r3, r3, #2
 800274a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800274c:	6879      	ldr	r1, [r7, #4]
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	4613      	mov	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	440b      	add	r3, r1
 800275a:	3358      	adds	r3, #88	; 0x58
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	1c59      	adds	r1, r3, #1
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	4613      	mov	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	4403      	add	r3, r0
 800276e:	3358      	adds	r3, #88	; 0x58
 8002770:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	4613      	mov	r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	4413      	add	r3, r2
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	440b      	add	r3, r1
 8002780:	335d      	adds	r3, #93	; 0x5d
 8002782:	2206      	movs	r2, #6
 8002784:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	b2d2      	uxtb	r2, r2
 800278e:	4611      	mov	r1, r2
 8002790:	4618      	mov	r0, r3
 8002792:	f003 ffc6 	bl	8006722 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	015a      	lsls	r2, r3, #5
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	4413      	add	r3, r2
 800279e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a2:	461a      	mov	r2, r3
 80027a4:	2380      	movs	r3, #128	; 0x80
 80027a6:	6093      	str	r3, [r2, #8]
}
 80027a8:	e087      	b.n	80028ba <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	015a      	lsls	r2, r3, #5
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	4413      	add	r3, r2
 80027b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f003 0310 	and.w	r3, r3, #16
 80027bc:	2b10      	cmp	r3, #16
 80027be:	d17c      	bne.n	80028ba <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80027c0:	6879      	ldr	r1, [r7, #4]
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	4613      	mov	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	440b      	add	r3, r1
 80027ce:	333f      	adds	r3, #63	; 0x3f
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	2b03      	cmp	r3, #3
 80027d4:	d122      	bne.n	800281c <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80027d6:	6879      	ldr	r1, [r7, #4]
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	4613      	mov	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4413      	add	r3, r2
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	440b      	add	r3, r1
 80027e4:	3358      	adds	r3, #88	; 0x58
 80027e6:	2200      	movs	r2, #0
 80027e8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	015a      	lsls	r2, r3, #5
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	4413      	add	r3, r2
 80027f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	0151      	lsls	r1, r2, #5
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	440a      	add	r2, r1
 8002800:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002804:	f043 0302 	orr.w	r3, r3, #2
 8002808:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	b2d2      	uxtb	r2, r2
 8002812:	4611      	mov	r1, r2
 8002814:	4618      	mov	r0, r3
 8002816:	f003 ff84 	bl	8006722 <USB_HC_Halt>
 800281a:	e045      	b.n	80028a8 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	4613      	mov	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4413      	add	r3, r2
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	440b      	add	r3, r1
 800282a:	333f      	adds	r3, #63	; 0x3f
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00a      	beq.n	8002848 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	4613      	mov	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4413      	add	r3, r2
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	440b      	add	r3, r1
 8002840:	333f      	adds	r3, #63	; 0x3f
 8002842:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002844:	2b02      	cmp	r3, #2
 8002846:	d12f      	bne.n	80028a8 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002848:	6879      	ldr	r1, [r7, #4]
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	4613      	mov	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	440b      	add	r3, r1
 8002856:	3358      	adds	r3, #88	; 0x58
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d121      	bne.n	80028a8 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	4613      	mov	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	440b      	add	r3, r1
 8002872:	335d      	adds	r3, #93	; 0x5d
 8002874:	2203      	movs	r2, #3
 8002876:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	015a      	lsls	r2, r3, #5
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	4413      	add	r3, r2
 8002880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	0151      	lsls	r1, r2, #5
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	440a      	add	r2, r1
 800288e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002892:	f043 0302 	orr.w	r3, r3, #2
 8002896:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	4611      	mov	r1, r2
 80028a2:	4618      	mov	r0, r3
 80028a4:	f003 ff3d 	bl	8006722 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	015a      	lsls	r2, r3, #5
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	4413      	add	r3, r2
 80028b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b4:	461a      	mov	r2, r3
 80028b6:	2310      	movs	r3, #16
 80028b8:	6093      	str	r3, [r2, #8]
}
 80028ba:	bf00      	nop
 80028bc:	3718      	adds	r7, #24
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b086      	sub	sp, #24
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
 80028ca:	460b      	mov	r3, r1
 80028cc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80028d8:	78fb      	ldrb	r3, [r7, #3]
 80028da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	015a      	lsls	r2, r3, #5
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	4413      	add	r3, r2
 80028e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 0304 	and.w	r3, r3, #4
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	d119      	bne.n	8002926 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	015a      	lsls	r2, r3, #5
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	4413      	add	r3, r2
 80028fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028fe:	461a      	mov	r2, r3
 8002900:	2304      	movs	r3, #4
 8002902:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	015a      	lsls	r2, r3, #5
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	4413      	add	r3, r2
 800290c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	0151      	lsls	r1, r2, #5
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	440a      	add	r2, r1
 800291a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800291e:	f043 0302 	orr.w	r3, r3, #2
 8002922:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002924:	e33e      	b.n	8002fa4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	015a      	lsls	r2, r3, #5
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	4413      	add	r3, r2
 800292e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f003 0320 	and.w	r3, r3, #32
 8002938:	2b20      	cmp	r3, #32
 800293a:	d141      	bne.n	80029c0 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	015a      	lsls	r2, r3, #5
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	4413      	add	r3, r2
 8002944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002948:	461a      	mov	r2, r3
 800294a:	2320      	movs	r3, #32
 800294c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	4613      	mov	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	440b      	add	r3, r1
 800295c:	333d      	adds	r3, #61	; 0x3d
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2b01      	cmp	r3, #1
 8002962:	f040 831f 	bne.w	8002fa4 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	4613      	mov	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	440b      	add	r3, r1
 8002974:	333d      	adds	r3, #61	; 0x3d
 8002976:	2200      	movs	r2, #0
 8002978:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	4613      	mov	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	4413      	add	r3, r2
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	440b      	add	r3, r1
 8002988:	335c      	adds	r3, #92	; 0x5c
 800298a:	2202      	movs	r2, #2
 800298c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	015a      	lsls	r2, r3, #5
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	4413      	add	r3, r2
 8002996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	0151      	lsls	r1, r2, #5
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	440a      	add	r2, r1
 80029a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029a8:	f043 0302 	orr.w	r3, r3, #2
 80029ac:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	4611      	mov	r1, r2
 80029b8:	4618      	mov	r0, r3
 80029ba:	f003 feb2 	bl	8006722 <USB_HC_Halt>
}
 80029be:	e2f1      	b.n	8002fa4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	015a      	lsls	r2, r3, #5
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	4413      	add	r3, r2
 80029c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d2:	2b40      	cmp	r3, #64	; 0x40
 80029d4:	d13f      	bne.n	8002a56 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	4613      	mov	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4413      	add	r3, r2
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	440b      	add	r3, r1
 80029e4:	335d      	adds	r3, #93	; 0x5d
 80029e6:	2204      	movs	r2, #4
 80029e8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	4613      	mov	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4413      	add	r3, r2
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	440b      	add	r3, r1
 80029f8:	333d      	adds	r3, #61	; 0x3d
 80029fa:	2201      	movs	r2, #1
 80029fc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	4613      	mov	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4413      	add	r3, r2
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	440b      	add	r3, r1
 8002a0c:	3358      	adds	r3, #88	; 0x58
 8002a0e:	2200      	movs	r2, #0
 8002a10:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	015a      	lsls	r2, r3, #5
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	4413      	add	r3, r2
 8002a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	0151      	lsls	r1, r2, #5
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	440a      	add	r2, r1
 8002a28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a2c:	f043 0302 	orr.w	r3, r3, #2
 8002a30:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	b2d2      	uxtb	r2, r2
 8002a3a:	4611      	mov	r1, r2
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f003 fe70 	bl	8006722 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	015a      	lsls	r2, r3, #5
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	4413      	add	r3, r2
 8002a4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a4e:	461a      	mov	r2, r3
 8002a50:	2340      	movs	r3, #64	; 0x40
 8002a52:	6093      	str	r3, [r2, #8]
}
 8002a54:	e2a6      	b.n	8002fa4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	015a      	lsls	r2, r3, #5
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a6c:	d122      	bne.n	8002ab4 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	015a      	lsls	r2, r3, #5
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	4413      	add	r3, r2
 8002a76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	0151      	lsls	r1, r2, #5
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	440a      	add	r2, r1
 8002a84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a88:	f043 0302 	orr.w	r3, r3, #2
 8002a8c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	4611      	mov	r1, r2
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f003 fe42 	bl	8006722 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	015a      	lsls	r2, r3, #5
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aaa:	461a      	mov	r2, r3
 8002aac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ab0:	6093      	str	r3, [r2, #8]
}
 8002ab2:	e277      	b.n	8002fa4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	015a      	lsls	r2, r3, #5
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	4413      	add	r3, r2
 8002abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d135      	bne.n	8002b36 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	440b      	add	r3, r1
 8002ad8:	3358      	adds	r3, #88	; 0x58
 8002ada:	2200      	movs	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	015a      	lsls	r2, r3, #5
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	0151      	lsls	r1, r2, #5
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	440a      	add	r2, r1
 8002af4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002af8:	f043 0302 	orr.w	r3, r3, #2
 8002afc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	b2d2      	uxtb	r2, r2
 8002b06:	4611      	mov	r1, r2
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f003 fe0a 	bl	8006722 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	015a      	lsls	r2, r3, #5
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	4413      	add	r3, r2
 8002b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002b20:	6879      	ldr	r1, [r7, #4]
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	4613      	mov	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4413      	add	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	440b      	add	r3, r1
 8002b2e:	335d      	adds	r3, #93	; 0x5d
 8002b30:	2201      	movs	r2, #1
 8002b32:	701a      	strb	r2, [r3, #0]
}
 8002b34:	e236      	b.n	8002fa4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	015a      	lsls	r2, r3, #5
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f003 0308 	and.w	r3, r3, #8
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	d12b      	bne.n	8002ba4 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	015a      	lsls	r2, r3, #5
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	4413      	add	r3, r2
 8002b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b58:	461a      	mov	r2, r3
 8002b5a:	2308      	movs	r3, #8
 8002b5c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	015a      	lsls	r2, r3, #5
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	4413      	add	r3, r2
 8002b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	0151      	lsls	r1, r2, #5
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	440a      	add	r2, r1
 8002b74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b78:	f043 0302 	orr.w	r3, r3, #2
 8002b7c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	b2d2      	uxtb	r2, r2
 8002b86:	4611      	mov	r1, r2
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f003 fdca 	bl	8006722 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002b8e:	6879      	ldr	r1, [r7, #4]
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	4613      	mov	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	4413      	add	r3, r2
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	440b      	add	r3, r1
 8002b9c:	335d      	adds	r3, #93	; 0x5d
 8002b9e:	2205      	movs	r2, #5
 8002ba0:	701a      	strb	r2, [r3, #0]
}
 8002ba2:	e1ff      	b.n	8002fa4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	015a      	lsls	r2, r3, #5
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	4413      	add	r3, r2
 8002bac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 0310 	and.w	r3, r3, #16
 8002bb6:	2b10      	cmp	r3, #16
 8002bb8:	d155      	bne.n	8002c66 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	440b      	add	r3, r1
 8002bc8:	3358      	adds	r3, #88	; 0x58
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4413      	add	r3, r2
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	440b      	add	r3, r1
 8002bdc:	335d      	adds	r3, #93	; 0x5d
 8002bde:	2203      	movs	r2, #3
 8002be0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	4613      	mov	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	440b      	add	r3, r1
 8002bf0:	333d      	adds	r3, #61	; 0x3d
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d114      	bne.n	8002c22 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	4413      	add	r3, r2
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	440b      	add	r3, r1
 8002c06:	333c      	adds	r3, #60	; 0x3c
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d109      	bne.n	8002c22 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	4613      	mov	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4413      	add	r3, r2
 8002c18:	00db      	lsls	r3, r3, #3
 8002c1a:	440b      	add	r3, r1
 8002c1c:	333d      	adds	r3, #61	; 0x3d
 8002c1e:	2201      	movs	r2, #1
 8002c20:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	015a      	lsls	r2, r3, #5
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	4413      	add	r3, r2
 8002c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	0151      	lsls	r1, r2, #5
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	440a      	add	r2, r1
 8002c38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c3c:	f043 0302 	orr.w	r3, r3, #2
 8002c40:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	b2d2      	uxtb	r2, r2
 8002c4a:	4611      	mov	r1, r2
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f003 fd68 	bl	8006722 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	015a      	lsls	r2, r3, #5
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	4413      	add	r3, r2
 8002c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c5e:	461a      	mov	r2, r3
 8002c60:	2310      	movs	r3, #16
 8002c62:	6093      	str	r3, [r2, #8]
}
 8002c64:	e19e      	b.n	8002fa4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	015a      	lsls	r2, r3, #5
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c78:	2b80      	cmp	r3, #128	; 0x80
 8002c7a:	d12b      	bne.n	8002cd4 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	015a      	lsls	r2, r3, #5
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	4413      	add	r3, r2
 8002c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	0151      	lsls	r1, r2, #5
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	440a      	add	r2, r1
 8002c92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c96:	f043 0302 	orr.w	r3, r3, #2
 8002c9a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	4611      	mov	r1, r2
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f003 fd3b 	bl	8006722 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	440b      	add	r3, r1
 8002cba:	335d      	adds	r3, #93	; 0x5d
 8002cbc:	2206      	movs	r2, #6
 8002cbe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	015a      	lsls	r2, r3, #5
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ccc:	461a      	mov	r2, r3
 8002cce:	2380      	movs	r3, #128	; 0x80
 8002cd0:	6093      	str	r3, [r2, #8]
}
 8002cd2:	e167      	b.n	8002fa4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	015a      	lsls	r2, r3, #5
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	4413      	add	r3, r2
 8002cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cea:	d135      	bne.n	8002d58 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	015a      	lsls	r2, r3, #5
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	0151      	lsls	r1, r2, #5
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	440a      	add	r2, r1
 8002d02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d06:	f043 0302 	orr.w	r3, r3, #2
 8002d0a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	b2d2      	uxtb	r2, r2
 8002d14:	4611      	mov	r1, r2
 8002d16:	4618      	mov	r0, r3
 8002d18:	f003 fd03 	bl	8006722 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	015a      	lsls	r2, r3, #5
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	4413      	add	r3, r2
 8002d24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d28:	461a      	mov	r2, r3
 8002d2a:	2310      	movs	r3, #16
 8002d2c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	015a      	lsls	r2, r3, #5
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	4413      	add	r3, r2
 8002d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d40:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	4613      	mov	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	440b      	add	r3, r1
 8002d50:	335d      	adds	r3, #93	; 0x5d
 8002d52:	2208      	movs	r2, #8
 8002d54:	701a      	strb	r2, [r3, #0]
}
 8002d56:	e125      	b.n	8002fa4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	015a      	lsls	r2, r3, #5
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	4413      	add	r3, r2
 8002d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	f040 811a 	bne.w	8002fa4 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	015a      	lsls	r2, r3, #5
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	4413      	add	r3, r2
 8002d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	0151      	lsls	r1, r2, #5
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	440a      	add	r2, r1
 8002d86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d8a:	f023 0302 	bic.w	r3, r3, #2
 8002d8e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002d90:	6879      	ldr	r1, [r7, #4]
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	4613      	mov	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4413      	add	r3, r2
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	440b      	add	r3, r1
 8002d9e:	335d      	adds	r3, #93	; 0x5d
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d137      	bne.n	8002e16 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002da6:	6879      	ldr	r1, [r7, #4]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	4613      	mov	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4413      	add	r3, r2
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	440b      	add	r3, r1
 8002db4:	335c      	adds	r3, #92	; 0x5c
 8002db6:	2201      	movs	r2, #1
 8002db8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	440b      	add	r3, r1
 8002dc8:	333f      	adds	r3, #63	; 0x3f
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d00b      	beq.n	8002de8 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002dd0:	6879      	ldr	r1, [r7, #4]
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	440b      	add	r3, r1
 8002dde:	333f      	adds	r3, #63	; 0x3f
 8002de0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002de2:	2b03      	cmp	r3, #3
 8002de4:	f040 80c5 	bne.w	8002f72 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002de8:	6879      	ldr	r1, [r7, #4]
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	4613      	mov	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4413      	add	r3, r2
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	440b      	add	r3, r1
 8002df6:	3351      	adds	r3, #81	; 0x51
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	f083 0301 	eor.w	r3, r3, #1
 8002dfe:	b2d8      	uxtb	r0, r3
 8002e00:	6879      	ldr	r1, [r7, #4]
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	4613      	mov	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4413      	add	r3, r2
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	440b      	add	r3, r1
 8002e0e:	3351      	adds	r3, #81	; 0x51
 8002e10:	4602      	mov	r2, r0
 8002e12:	701a      	strb	r2, [r3, #0]
 8002e14:	e0ad      	b.n	8002f72 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	440b      	add	r3, r1
 8002e24:	335d      	adds	r3, #93	; 0x5d
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b03      	cmp	r3, #3
 8002e2a:	d10a      	bne.n	8002e42 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e2c:	6879      	ldr	r1, [r7, #4]
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	4613      	mov	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	4413      	add	r3, r2
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	440b      	add	r3, r1
 8002e3a:	335c      	adds	r3, #92	; 0x5c
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	701a      	strb	r2, [r3, #0]
 8002e40:	e097      	b.n	8002f72 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002e42:	6879      	ldr	r1, [r7, #4]
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	4613      	mov	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4413      	add	r3, r2
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	440b      	add	r3, r1
 8002e50:	335d      	adds	r3, #93	; 0x5d
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	2b04      	cmp	r3, #4
 8002e56:	d10a      	bne.n	8002e6e <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002e58:	6879      	ldr	r1, [r7, #4]
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4413      	add	r3, r2
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	440b      	add	r3, r1
 8002e66:	335c      	adds	r3, #92	; 0x5c
 8002e68:	2202      	movs	r2, #2
 8002e6a:	701a      	strb	r2, [r3, #0]
 8002e6c:	e081      	b.n	8002f72 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	4613      	mov	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4413      	add	r3, r2
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	440b      	add	r3, r1
 8002e7c:	335d      	adds	r3, #93	; 0x5d
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	2b05      	cmp	r3, #5
 8002e82:	d10a      	bne.n	8002e9a <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002e84:	6879      	ldr	r1, [r7, #4]
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	440b      	add	r3, r1
 8002e92:	335c      	adds	r3, #92	; 0x5c
 8002e94:	2205      	movs	r2, #5
 8002e96:	701a      	strb	r2, [r3, #0]
 8002e98:	e06b      	b.n	8002f72 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e9a:	6879      	ldr	r1, [r7, #4]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4413      	add	r3, r2
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	440b      	add	r3, r1
 8002ea8:	335d      	adds	r3, #93	; 0x5d
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	2b06      	cmp	r3, #6
 8002eae:	d00a      	beq.n	8002ec6 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002eb0:	6879      	ldr	r1, [r7, #4]
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	4413      	add	r3, r2
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	440b      	add	r3, r1
 8002ebe:	335d      	adds	r3, #93	; 0x5d
 8002ec0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ec2:	2b08      	cmp	r3, #8
 8002ec4:	d155      	bne.n	8002f72 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002ec6:	6879      	ldr	r1, [r7, #4]
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	440b      	add	r3, r1
 8002ed4:	3358      	adds	r3, #88	; 0x58
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	1c59      	adds	r1, r3, #1
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	4413      	add	r3, r2
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	4403      	add	r3, r0
 8002ee8:	3358      	adds	r3, #88	; 0x58
 8002eea:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002eec:	6879      	ldr	r1, [r7, #4]
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	4413      	add	r3, r2
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	440b      	add	r3, r1
 8002efa:	3358      	adds	r3, #88	; 0x58
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2b03      	cmp	r3, #3
 8002f00:	d914      	bls.n	8002f2c <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002f02:	6879      	ldr	r1, [r7, #4]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	4613      	mov	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4413      	add	r3, r2
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	440b      	add	r3, r1
 8002f10:	3358      	adds	r3, #88	; 0x58
 8002f12:	2200      	movs	r2, #0
 8002f14:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f16:	6879      	ldr	r1, [r7, #4]
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4413      	add	r3, r2
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	440b      	add	r3, r1
 8002f24:	335c      	adds	r3, #92	; 0x5c
 8002f26:	2204      	movs	r2, #4
 8002f28:	701a      	strb	r2, [r3, #0]
 8002f2a:	e009      	b.n	8002f40 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f2c:	6879      	ldr	r1, [r7, #4]
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	4613      	mov	r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	4413      	add	r3, r2
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	440b      	add	r3, r1
 8002f3a:	335c      	adds	r3, #92	; 0x5c
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	015a      	lsls	r2, r3, #5
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	4413      	add	r3, r2
 8002f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f56:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f5e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	015a      	lsls	r2, r3, #5
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	4413      	add	r3, r2
 8002f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	015a      	lsls	r2, r3, #5
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	4413      	add	r3, r2
 8002f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f7e:	461a      	mov	r2, r3
 8002f80:	2302      	movs	r3, #2
 8002f82:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	b2d8      	uxtb	r0, r3
 8002f88:	6879      	ldr	r1, [r7, #4]
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	440b      	add	r3, r1
 8002f96:	335c      	adds	r3, #92	; 0x5c
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	4601      	mov	r1, r0
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f006 f826 	bl	8008ff0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002fa4:	bf00      	nop
 8002fa6:	3718      	adds	r7, #24
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b08a      	sub	sp, #40	; 0x28
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbc:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	f003 030f 	and.w	r3, r3, #15
 8002fcc:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	0c5b      	lsrs	r3, r3, #17
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	091b      	lsrs	r3, r3, #4
 8002fdc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fe0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d003      	beq.n	8002ff0 <HCD_RXQLVL_IRQHandler+0x44>
 8002fe8:	2b05      	cmp	r3, #5
 8002fea:	f000 8082 	beq.w	80030f2 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002fee:	e083      	b.n	80030f8 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d07f      	beq.n	80030f6 <HCD_RXQLVL_IRQHandler+0x14a>
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4413      	add	r3, r2
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	440b      	add	r3, r1
 8003004:	3344      	adds	r3, #68	; 0x44
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d074      	beq.n	80030f6 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6818      	ldr	r0, [r3, #0]
 8003010:	6879      	ldr	r1, [r7, #4]
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	4613      	mov	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	440b      	add	r3, r1
 800301e:	3344      	adds	r3, #68	; 0x44
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	b292      	uxth	r2, r2
 8003026:	4619      	mov	r1, r3
 8003028:	f002 ff63 	bl	8005ef2 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 800302c:	6879      	ldr	r1, [r7, #4]
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4613      	mov	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	4413      	add	r3, r2
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	440b      	add	r3, r1
 800303a:	3344      	adds	r3, #68	; 0x44
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	18d1      	adds	r1, r2, r3
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	4613      	mov	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4413      	add	r3, r2
 800304c:	00db      	lsls	r3, r3, #3
 800304e:	4403      	add	r3, r0
 8003050:	3344      	adds	r3, #68	; 0x44
 8003052:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4613      	mov	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	440b      	add	r3, r1
 8003062:	334c      	adds	r3, #76	; 0x4c
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	18d1      	adds	r1, r2, r3
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	4613      	mov	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4413      	add	r3, r2
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	4403      	add	r3, r0
 8003078:	334c      	adds	r3, #76	; 0x4c
 800307a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	015a      	lsls	r2, r3, #5
 8003080:	6a3b      	ldr	r3, [r7, #32]
 8003082:	4413      	add	r3, r2
 8003084:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003088:	691a      	ldr	r2, [r3, #16]
 800308a:	4b1d      	ldr	r3, [pc, #116]	; (8003100 <HCD_RXQLVL_IRQHandler+0x154>)
 800308c:	4013      	ands	r3, r2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d031      	beq.n	80030f6 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	015a      	lsls	r2, r3, #5
 8003096:	6a3b      	ldr	r3, [r7, #32]
 8003098:	4413      	add	r3, r2
 800309a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80030a8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80030b0:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	015a      	lsls	r2, r3, #5
 80030b6:	6a3b      	ldr	r3, [r7, #32]
 80030b8:	4413      	add	r3, r2
 80030ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030be:	461a      	mov	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80030c4:	6879      	ldr	r1, [r7, #4]
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	4613      	mov	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	4413      	add	r3, r2
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	440b      	add	r3, r1
 80030d2:	3350      	adds	r3, #80	; 0x50
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	f083 0301 	eor.w	r3, r3, #1
 80030da:	b2d8      	uxtb	r0, r3
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	4613      	mov	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	4413      	add	r3, r2
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	440b      	add	r3, r1
 80030ea:	3350      	adds	r3, #80	; 0x50
 80030ec:	4602      	mov	r2, r0
 80030ee:	701a      	strb	r2, [r3, #0]
      break;
 80030f0:	e001      	b.n	80030f6 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80030f2:	bf00      	nop
 80030f4:	e000      	b.n	80030f8 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80030f6:	bf00      	nop
  }
}
 80030f8:	bf00      	nop
 80030fa:	3728      	adds	r7, #40	; 0x28
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	1ff80000 	.word	0x1ff80000

08003104 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003130:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b02      	cmp	r3, #2
 800313a:	d10b      	bne.n	8003154 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b01      	cmp	r3, #1
 8003144:	d102      	bne.n	800314c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f005 ff36 	bl	8008fb8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	f043 0302 	orr.w	r3, r3, #2
 8003152:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f003 0308 	and.w	r3, r3, #8
 800315a:	2b08      	cmp	r3, #8
 800315c:	d132      	bne.n	80031c4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	f043 0308 	orr.w	r3, r3, #8
 8003164:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b04      	cmp	r3, #4
 800316e:	d126      	bne.n	80031be <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	2b02      	cmp	r3, #2
 8003176:	d113      	bne.n	80031a0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800317e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003182:	d106      	bne.n	8003192 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2102      	movs	r1, #2
 800318a:	4618      	mov	r0, r3
 800318c:	f002 ffe6 	bl	800615c <USB_InitFSLSPClkSel>
 8003190:	e011      	b.n	80031b6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2101      	movs	r1, #1
 8003198:	4618      	mov	r0, r3
 800319a:	f002 ffdf 	bl	800615c <USB_InitFSLSPClkSel>
 800319e:	e00a      	b.n	80031b6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d106      	bne.n	80031b6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031ae:	461a      	mov	r2, r3
 80031b0:	f64e 2360 	movw	r3, #60000	; 0xea60
 80031b4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f005 ff28 	bl	800900c <HAL_HCD_PortEnabled_Callback>
 80031bc:	e002      	b.n	80031c4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f005 ff32 	bl	8009028 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f003 0320 	and.w	r3, r3, #32
 80031ca:	2b20      	cmp	r3, #32
 80031cc:	d103      	bne.n	80031d6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	f043 0320 	orr.w	r3, r3, #32
 80031d4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80031dc:	461a      	mov	r2, r3
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	6013      	str	r3, [r2, #0]
}
 80031e2:	bf00      	nop
 80031e4:	3718      	adds	r7, #24
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
	...

080031ec <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80031f4:	4a08      	ldr	r2, [pc, #32]	; (8003218 <HAL_HSEM_FastTake+0x2c>)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	3320      	adds	r3, #32
 80031fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031fe:	4a07      	ldr	r2, [pc, #28]	; (800321c <HAL_HSEM_FastTake+0x30>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d101      	bne.n	8003208 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003204:	2300      	movs	r3, #0
 8003206:	e000      	b.n	800320a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
}
 800320a:	4618      	mov	r0, r3
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	58026400 	.word	0x58026400
 800321c:	80000300 	.word	0x80000300

08003220 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800322a:	4906      	ldr	r1, [pc, #24]	; (8003244 <HAL_HSEM_Release+0x24>)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr
 8003244:	58026400 	.word	0x58026400

08003248 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003250:	4b29      	ldr	r3, [pc, #164]	; (80032f8 <HAL_PWREx_ConfigSupply+0xb0>)
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	2b06      	cmp	r3, #6
 800325a:	d00a      	beq.n	8003272 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800325c:	4b26      	ldr	r3, [pc, #152]	; (80032f8 <HAL_PWREx_ConfigSupply+0xb0>)
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	429a      	cmp	r2, r3
 8003268:	d001      	beq.n	800326e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e040      	b.n	80032f0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800326e:	2300      	movs	r3, #0
 8003270:	e03e      	b.n	80032f0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003272:	4b21      	ldr	r3, [pc, #132]	; (80032f8 <HAL_PWREx_ConfigSupply+0xb0>)
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800327a:	491f      	ldr	r1, [pc, #124]	; (80032f8 <HAL_PWREx_ConfigSupply+0xb0>)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4313      	orrs	r3, r2
 8003280:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003282:	f7fd fd6b 	bl	8000d5c <HAL_GetTick>
 8003286:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003288:	e009      	b.n	800329e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800328a:	f7fd fd67 	bl	8000d5c <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003298:	d901      	bls.n	800329e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e028      	b.n	80032f0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800329e:	4b16      	ldr	r3, [pc, #88]	; (80032f8 <HAL_PWREx_ConfigSupply+0xb0>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032aa:	d1ee      	bne.n	800328a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b1e      	cmp	r3, #30
 80032b0:	d008      	beq.n	80032c4 <HAL_PWREx_ConfigSupply+0x7c>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2b2e      	cmp	r3, #46	; 0x2e
 80032b6:	d005      	beq.n	80032c4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b1d      	cmp	r3, #29
 80032bc:	d002      	beq.n	80032c4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b2d      	cmp	r3, #45	; 0x2d
 80032c2:	d114      	bne.n	80032ee <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80032c4:	f7fd fd4a 	bl	8000d5c <HAL_GetTick>
 80032c8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80032ca:	e009      	b.n	80032e0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80032cc:	f7fd fd46 	bl	8000d5c <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032da:	d901      	bls.n	80032e0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e007      	b.n	80032f0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80032e0:	4b05      	ldr	r3, [pc, #20]	; (80032f8 <HAL_PWREx_ConfigSupply+0xb0>)
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ec:	d1ee      	bne.n	80032cc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	58024800 	.word	0x58024800

080032fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b08c      	sub	sp, #48	; 0x30
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e3ff      	b.n	8003b0e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	f000 8087 	beq.w	800342a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800331c:	4b99      	ldr	r3, [pc, #612]	; (8003584 <HAL_RCC_OscConfig+0x288>)
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003324:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003326:	4b97      	ldr	r3, [pc, #604]	; (8003584 <HAL_RCC_OscConfig+0x288>)
 8003328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800332c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800332e:	2b10      	cmp	r3, #16
 8003330:	d007      	beq.n	8003342 <HAL_RCC_OscConfig+0x46>
 8003332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003334:	2b18      	cmp	r3, #24
 8003336:	d110      	bne.n	800335a <HAL_RCC_OscConfig+0x5e>
 8003338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333a:	f003 0303 	and.w	r3, r3, #3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d10b      	bne.n	800335a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003342:	4b90      	ldr	r3, [pc, #576]	; (8003584 <HAL_RCC_OscConfig+0x288>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d06c      	beq.n	8003428 <HAL_RCC_OscConfig+0x12c>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d168      	bne.n	8003428 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e3d9      	b.n	8003b0e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003362:	d106      	bne.n	8003372 <HAL_RCC_OscConfig+0x76>
 8003364:	4b87      	ldr	r3, [pc, #540]	; (8003584 <HAL_RCC_OscConfig+0x288>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a86      	ldr	r2, [pc, #536]	; (8003584 <HAL_RCC_OscConfig+0x288>)
 800336a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800336e:	6013      	str	r3, [r2, #0]
 8003370:	e02e      	b.n	80033d0 <HAL_RCC_OscConfig+0xd4>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10c      	bne.n	8003394 <HAL_RCC_OscConfig+0x98>
 800337a:	4b82      	ldr	r3, [pc, #520]	; (8003584 <HAL_RCC_OscConfig+0x288>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a81      	ldr	r2, [pc, #516]	; (8003584 <HAL_RCC_OscConfig+0x288>)
 8003380:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003384:	6013      	str	r3, [r2, #0]
 8003386:	4b7f      	ldr	r3, [pc, #508]	; (8003584 <HAL_RCC_OscConfig+0x288>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a7e      	ldr	r2, [pc, #504]	; (8003584 <HAL_RCC_OscConfig+0x288>)
 800338c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003390:	6013      	str	r3, [r2, #0]
 8003392:	e01d      	b.n	80033d0 <HAL_RCC_OscConfig+0xd4>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800339c:	d10c      	bne.n	80033b8 <HAL_RCC_OscConfig+0xbc>
 800339e:	4b79      	ldr	r3, [pc, #484]	; (8003584 <HAL_RCC_OscConfig+0x288>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a78      	ldr	r2, [pc, #480]	; (8003584 <HAL_RCC_OscConfig+0x288>)
 80033a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033a8:	6013      	str	r3, [r2, #0]
 80033aa:	4b76      	ldr	r3, [pc, #472]	; (8003584 <HAL_RCC_OscConfig+0x288>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a75      	ldr	r2, [pc, #468]	; (8003584 <HAL_RCC_OscConfig+0x288>)
 80033b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b4:	6013      	str	r3, [r2, #0]
 80033b6:	e00b      	b.n	80033d0 <HAL_RCC_OscConfig+0xd4>
 80033b8:	4b72      	ldr	r3, [pc, #456]	; (8003584 <HAL_RCC_OscConfig+0x288>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a71      	ldr	r2, [pc, #452]	; (8003584 <HAL_RCC_OscConfig+0x288>)
 80033be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033c2:	6013      	str	r3, [r2, #0]
 80033c4:	4b6f      	ldr	r3, [pc, #444]	; (8003584 <HAL_RCC_OscConfig+0x288>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a6e      	ldr	r2, [pc, #440]	; (8003584 <HAL_RCC_OscConfig+0x288>)
 80033ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d013      	beq.n	8003400 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d8:	f7fd fcc0 	bl	8000d5c <HAL_GetTick>
 80033dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033e0:	f7fd fcbc 	bl	8000d5c <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b64      	cmp	r3, #100	; 0x64
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e38d      	b.n	8003b0e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033f2:	4b64      	ldr	r3, [pc, #400]	; (8003584 <HAL_RCC_OscConfig+0x288>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d0f0      	beq.n	80033e0 <HAL_RCC_OscConfig+0xe4>
 80033fe:	e014      	b.n	800342a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003400:	f7fd fcac 	bl	8000d5c <HAL_GetTick>
 8003404:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003408:	f7fd fca8 	bl	8000d5c <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b64      	cmp	r3, #100	; 0x64
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e379      	b.n	8003b0e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800341a:	4b5a      	ldr	r3, [pc, #360]	; (8003584 <HAL_RCC_OscConfig+0x288>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1f0      	bne.n	8003408 <HAL_RCC_OscConfig+0x10c>
 8003426:	e000      	b.n	800342a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	f000 80ae 	beq.w	8003594 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003438:	4b52      	ldr	r3, [pc, #328]	; (8003584 <HAL_RCC_OscConfig+0x288>)
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003440:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003442:	4b50      	ldr	r3, [pc, #320]	; (8003584 <HAL_RCC_OscConfig+0x288>)
 8003444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003446:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003448:	6a3b      	ldr	r3, [r7, #32]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d007      	beq.n	800345e <HAL_RCC_OscConfig+0x162>
 800344e:	6a3b      	ldr	r3, [r7, #32]
 8003450:	2b18      	cmp	r3, #24
 8003452:	d13a      	bne.n	80034ca <HAL_RCC_OscConfig+0x1ce>
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	f003 0303 	and.w	r3, r3, #3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d135      	bne.n	80034ca <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800345e:	4b49      	ldr	r3, [pc, #292]	; (8003584 <HAL_RCC_OscConfig+0x288>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0304 	and.w	r3, r3, #4
 8003466:	2b00      	cmp	r3, #0
 8003468:	d005      	beq.n	8003476 <HAL_RCC_OscConfig+0x17a>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e34b      	b.n	8003b0e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003476:	f7fd fc9f 	bl	8000db8 <HAL_GetREVID>
 800347a:	4602      	mov	r2, r0
 800347c:	f241 0303 	movw	r3, #4099	; 0x1003
 8003480:	429a      	cmp	r2, r3
 8003482:	d817      	bhi.n	80034b4 <HAL_RCC_OscConfig+0x1b8>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	2b40      	cmp	r3, #64	; 0x40
 800348a:	d108      	bne.n	800349e <HAL_RCC_OscConfig+0x1a2>
 800348c:	4b3d      	ldr	r3, [pc, #244]	; (8003584 <HAL_RCC_OscConfig+0x288>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003494:	4a3b      	ldr	r2, [pc, #236]	; (8003584 <HAL_RCC_OscConfig+0x288>)
 8003496:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800349a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800349c:	e07a      	b.n	8003594 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800349e:	4b39      	ldr	r3, [pc, #228]	; (8003584 <HAL_RCC_OscConfig+0x288>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	031b      	lsls	r3, r3, #12
 80034ac:	4935      	ldr	r1, [pc, #212]	; (8003584 <HAL_RCC_OscConfig+0x288>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034b2:	e06f      	b.n	8003594 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b4:	4b33      	ldr	r3, [pc, #204]	; (8003584 <HAL_RCC_OscConfig+0x288>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	061b      	lsls	r3, r3, #24
 80034c2:	4930      	ldr	r1, [pc, #192]	; (8003584 <HAL_RCC_OscConfig+0x288>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034c8:	e064      	b.n	8003594 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d045      	beq.n	800355e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80034d2:	4b2c      	ldr	r3, [pc, #176]	; (8003584 <HAL_RCC_OscConfig+0x288>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f023 0219 	bic.w	r2, r3, #25
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	4929      	ldr	r1, [pc, #164]	; (8003584 <HAL_RCC_OscConfig+0x288>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e4:	f7fd fc3a 	bl	8000d5c <HAL_GetTick>
 80034e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034ec:	f7fd fc36 	bl	8000d5c <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e307      	b.n	8003b0e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034fe:	4b21      	ldr	r3, [pc, #132]	; (8003584 <HAL_RCC_OscConfig+0x288>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0304 	and.w	r3, r3, #4
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0f0      	beq.n	80034ec <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800350a:	f7fd fc55 	bl	8000db8 <HAL_GetREVID>
 800350e:	4602      	mov	r2, r0
 8003510:	f241 0303 	movw	r3, #4099	; 0x1003
 8003514:	429a      	cmp	r2, r3
 8003516:	d817      	bhi.n	8003548 <HAL_RCC_OscConfig+0x24c>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	2b40      	cmp	r3, #64	; 0x40
 800351e:	d108      	bne.n	8003532 <HAL_RCC_OscConfig+0x236>
 8003520:	4b18      	ldr	r3, [pc, #96]	; (8003584 <HAL_RCC_OscConfig+0x288>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003528:	4a16      	ldr	r2, [pc, #88]	; (8003584 <HAL_RCC_OscConfig+0x288>)
 800352a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800352e:	6053      	str	r3, [r2, #4]
 8003530:	e030      	b.n	8003594 <HAL_RCC_OscConfig+0x298>
 8003532:	4b14      	ldr	r3, [pc, #80]	; (8003584 <HAL_RCC_OscConfig+0x288>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	031b      	lsls	r3, r3, #12
 8003540:	4910      	ldr	r1, [pc, #64]	; (8003584 <HAL_RCC_OscConfig+0x288>)
 8003542:	4313      	orrs	r3, r2
 8003544:	604b      	str	r3, [r1, #4]
 8003546:	e025      	b.n	8003594 <HAL_RCC_OscConfig+0x298>
 8003548:	4b0e      	ldr	r3, [pc, #56]	; (8003584 <HAL_RCC_OscConfig+0x288>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	061b      	lsls	r3, r3, #24
 8003556:	490b      	ldr	r1, [pc, #44]	; (8003584 <HAL_RCC_OscConfig+0x288>)
 8003558:	4313      	orrs	r3, r2
 800355a:	604b      	str	r3, [r1, #4]
 800355c:	e01a      	b.n	8003594 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800355e:	4b09      	ldr	r3, [pc, #36]	; (8003584 <HAL_RCC_OscConfig+0x288>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a08      	ldr	r2, [pc, #32]	; (8003584 <HAL_RCC_OscConfig+0x288>)
 8003564:	f023 0301 	bic.w	r3, r3, #1
 8003568:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356a:	f7fd fbf7 	bl	8000d5c <HAL_GetTick>
 800356e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003570:	e00a      	b.n	8003588 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003572:	f7fd fbf3 	bl	8000d5c <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d903      	bls.n	8003588 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e2c4      	b.n	8003b0e <HAL_RCC_OscConfig+0x812>
 8003584:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003588:	4ba4      	ldr	r3, [pc, #656]	; (800381c <HAL_RCC_OscConfig+0x520>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1ee      	bne.n	8003572 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0310 	and.w	r3, r3, #16
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 80a9 	beq.w	80036f4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035a2:	4b9e      	ldr	r3, [pc, #632]	; (800381c <HAL_RCC_OscConfig+0x520>)
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035aa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80035ac:	4b9b      	ldr	r3, [pc, #620]	; (800381c <HAL_RCC_OscConfig+0x520>)
 80035ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	d007      	beq.n	80035c8 <HAL_RCC_OscConfig+0x2cc>
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	2b18      	cmp	r3, #24
 80035bc:	d13a      	bne.n	8003634 <HAL_RCC_OscConfig+0x338>
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f003 0303 	and.w	r3, r3, #3
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d135      	bne.n	8003634 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80035c8:	4b94      	ldr	r3, [pc, #592]	; (800381c <HAL_RCC_OscConfig+0x520>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d005      	beq.n	80035e0 <HAL_RCC_OscConfig+0x2e4>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	2b80      	cmp	r3, #128	; 0x80
 80035da:	d001      	beq.n	80035e0 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e296      	b.n	8003b0e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80035e0:	f7fd fbea 	bl	8000db8 <HAL_GetREVID>
 80035e4:	4602      	mov	r2, r0
 80035e6:	f241 0303 	movw	r3, #4099	; 0x1003
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d817      	bhi.n	800361e <HAL_RCC_OscConfig+0x322>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	2b20      	cmp	r3, #32
 80035f4:	d108      	bne.n	8003608 <HAL_RCC_OscConfig+0x30c>
 80035f6:	4b89      	ldr	r3, [pc, #548]	; (800381c <HAL_RCC_OscConfig+0x520>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80035fe:	4a87      	ldr	r2, [pc, #540]	; (800381c <HAL_RCC_OscConfig+0x520>)
 8003600:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003604:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003606:	e075      	b.n	80036f4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003608:	4b84      	ldr	r3, [pc, #528]	; (800381c <HAL_RCC_OscConfig+0x520>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	069b      	lsls	r3, r3, #26
 8003616:	4981      	ldr	r1, [pc, #516]	; (800381c <HAL_RCC_OscConfig+0x520>)
 8003618:	4313      	orrs	r3, r2
 800361a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800361c:	e06a      	b.n	80036f4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800361e:	4b7f      	ldr	r3, [pc, #508]	; (800381c <HAL_RCC_OscConfig+0x520>)
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	061b      	lsls	r3, r3, #24
 800362c:	497b      	ldr	r1, [pc, #492]	; (800381c <HAL_RCC_OscConfig+0x520>)
 800362e:	4313      	orrs	r3, r2
 8003630:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003632:	e05f      	b.n	80036f4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	69db      	ldr	r3, [r3, #28]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d042      	beq.n	80036c2 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800363c:	4b77      	ldr	r3, [pc, #476]	; (800381c <HAL_RCC_OscConfig+0x520>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a76      	ldr	r2, [pc, #472]	; (800381c <HAL_RCC_OscConfig+0x520>)
 8003642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003646:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003648:	f7fd fb88 	bl	8000d5c <HAL_GetTick>
 800364c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003650:	f7fd fb84 	bl	8000d5c <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e255      	b.n	8003b0e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003662:	4b6e      	ldr	r3, [pc, #440]	; (800381c <HAL_RCC_OscConfig+0x520>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366a:	2b00      	cmp	r3, #0
 800366c:	d0f0      	beq.n	8003650 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800366e:	f7fd fba3 	bl	8000db8 <HAL_GetREVID>
 8003672:	4602      	mov	r2, r0
 8003674:	f241 0303 	movw	r3, #4099	; 0x1003
 8003678:	429a      	cmp	r2, r3
 800367a:	d817      	bhi.n	80036ac <HAL_RCC_OscConfig+0x3b0>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	2b20      	cmp	r3, #32
 8003682:	d108      	bne.n	8003696 <HAL_RCC_OscConfig+0x39a>
 8003684:	4b65      	ldr	r3, [pc, #404]	; (800381c <HAL_RCC_OscConfig+0x520>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800368c:	4a63      	ldr	r2, [pc, #396]	; (800381c <HAL_RCC_OscConfig+0x520>)
 800368e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003692:	6053      	str	r3, [r2, #4]
 8003694:	e02e      	b.n	80036f4 <HAL_RCC_OscConfig+0x3f8>
 8003696:	4b61      	ldr	r3, [pc, #388]	; (800381c <HAL_RCC_OscConfig+0x520>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	069b      	lsls	r3, r3, #26
 80036a4:	495d      	ldr	r1, [pc, #372]	; (800381c <HAL_RCC_OscConfig+0x520>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	604b      	str	r3, [r1, #4]
 80036aa:	e023      	b.n	80036f4 <HAL_RCC_OscConfig+0x3f8>
 80036ac:	4b5b      	ldr	r3, [pc, #364]	; (800381c <HAL_RCC_OscConfig+0x520>)
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	061b      	lsls	r3, r3, #24
 80036ba:	4958      	ldr	r1, [pc, #352]	; (800381c <HAL_RCC_OscConfig+0x520>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	60cb      	str	r3, [r1, #12]
 80036c0:	e018      	b.n	80036f4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80036c2:	4b56      	ldr	r3, [pc, #344]	; (800381c <HAL_RCC_OscConfig+0x520>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a55      	ldr	r2, [pc, #340]	; (800381c <HAL_RCC_OscConfig+0x520>)
 80036c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ce:	f7fd fb45 	bl	8000d5c <HAL_GetTick>
 80036d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80036d4:	e008      	b.n	80036e8 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80036d6:	f7fd fb41 	bl	8000d5c <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d901      	bls.n	80036e8 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e212      	b.n	8003b0e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80036e8:	4b4c      	ldr	r3, [pc, #304]	; (800381c <HAL_RCC_OscConfig+0x520>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1f0      	bne.n	80036d6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0308 	and.w	r3, r3, #8
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d036      	beq.n	800376e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d019      	beq.n	800373c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003708:	4b44      	ldr	r3, [pc, #272]	; (800381c <HAL_RCC_OscConfig+0x520>)
 800370a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800370c:	4a43      	ldr	r2, [pc, #268]	; (800381c <HAL_RCC_OscConfig+0x520>)
 800370e:	f043 0301 	orr.w	r3, r3, #1
 8003712:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003714:	f7fd fb22 	bl	8000d5c <HAL_GetTick>
 8003718:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800371c:	f7fd fb1e 	bl	8000d5c <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e1ef      	b.n	8003b0e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800372e:	4b3b      	ldr	r3, [pc, #236]	; (800381c <HAL_RCC_OscConfig+0x520>)
 8003730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d0f0      	beq.n	800371c <HAL_RCC_OscConfig+0x420>
 800373a:	e018      	b.n	800376e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800373c:	4b37      	ldr	r3, [pc, #220]	; (800381c <HAL_RCC_OscConfig+0x520>)
 800373e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003740:	4a36      	ldr	r2, [pc, #216]	; (800381c <HAL_RCC_OscConfig+0x520>)
 8003742:	f023 0301 	bic.w	r3, r3, #1
 8003746:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003748:	f7fd fb08 	bl	8000d5c <HAL_GetTick>
 800374c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800374e:	e008      	b.n	8003762 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003750:	f7fd fb04 	bl	8000d5c <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b02      	cmp	r3, #2
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e1d5      	b.n	8003b0e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003762:	4b2e      	ldr	r3, [pc, #184]	; (800381c <HAL_RCC_OscConfig+0x520>)
 8003764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1f0      	bne.n	8003750 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0320 	and.w	r3, r3, #32
 8003776:	2b00      	cmp	r3, #0
 8003778:	d036      	beq.n	80037e8 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d019      	beq.n	80037b6 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003782:	4b26      	ldr	r3, [pc, #152]	; (800381c <HAL_RCC_OscConfig+0x520>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a25      	ldr	r2, [pc, #148]	; (800381c <HAL_RCC_OscConfig+0x520>)
 8003788:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800378c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800378e:	f7fd fae5 	bl	8000d5c <HAL_GetTick>
 8003792:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003794:	e008      	b.n	80037a8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003796:	f7fd fae1 	bl	8000d5c <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d901      	bls.n	80037a8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e1b2      	b.n	8003b0e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80037a8:	4b1c      	ldr	r3, [pc, #112]	; (800381c <HAL_RCC_OscConfig+0x520>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d0f0      	beq.n	8003796 <HAL_RCC_OscConfig+0x49a>
 80037b4:	e018      	b.n	80037e8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80037b6:	4b19      	ldr	r3, [pc, #100]	; (800381c <HAL_RCC_OscConfig+0x520>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a18      	ldr	r2, [pc, #96]	; (800381c <HAL_RCC_OscConfig+0x520>)
 80037bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037c0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80037c2:	f7fd facb 	bl	8000d5c <HAL_GetTick>
 80037c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80037c8:	e008      	b.n	80037dc <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80037ca:	f7fd fac7 	bl	8000d5c <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d901      	bls.n	80037dc <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e198      	b.n	8003b0e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80037dc:	4b0f      	ldr	r3, [pc, #60]	; (800381c <HAL_RCC_OscConfig+0x520>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1f0      	bne.n	80037ca <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0304 	and.w	r3, r3, #4
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 8085 	beq.w	8003900 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80037f6:	4b0a      	ldr	r3, [pc, #40]	; (8003820 <HAL_RCC_OscConfig+0x524>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a09      	ldr	r2, [pc, #36]	; (8003820 <HAL_RCC_OscConfig+0x524>)
 80037fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003800:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003802:	f7fd faab 	bl	8000d5c <HAL_GetTick>
 8003806:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003808:	e00c      	b.n	8003824 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800380a:	f7fd faa7 	bl	8000d5c <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	2b64      	cmp	r3, #100	; 0x64
 8003816:	d905      	bls.n	8003824 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e178      	b.n	8003b0e <HAL_RCC_OscConfig+0x812>
 800381c:	58024400 	.word	0x58024400
 8003820:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003824:	4b96      	ldr	r3, [pc, #600]	; (8003a80 <HAL_RCC_OscConfig+0x784>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382c:	2b00      	cmp	r3, #0
 800382e:	d0ec      	beq.n	800380a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d106      	bne.n	8003846 <HAL_RCC_OscConfig+0x54a>
 8003838:	4b92      	ldr	r3, [pc, #584]	; (8003a84 <HAL_RCC_OscConfig+0x788>)
 800383a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383c:	4a91      	ldr	r2, [pc, #580]	; (8003a84 <HAL_RCC_OscConfig+0x788>)
 800383e:	f043 0301 	orr.w	r3, r3, #1
 8003842:	6713      	str	r3, [r2, #112]	; 0x70
 8003844:	e02d      	b.n	80038a2 <HAL_RCC_OscConfig+0x5a6>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10c      	bne.n	8003868 <HAL_RCC_OscConfig+0x56c>
 800384e:	4b8d      	ldr	r3, [pc, #564]	; (8003a84 <HAL_RCC_OscConfig+0x788>)
 8003850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003852:	4a8c      	ldr	r2, [pc, #560]	; (8003a84 <HAL_RCC_OscConfig+0x788>)
 8003854:	f023 0301 	bic.w	r3, r3, #1
 8003858:	6713      	str	r3, [r2, #112]	; 0x70
 800385a:	4b8a      	ldr	r3, [pc, #552]	; (8003a84 <HAL_RCC_OscConfig+0x788>)
 800385c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385e:	4a89      	ldr	r2, [pc, #548]	; (8003a84 <HAL_RCC_OscConfig+0x788>)
 8003860:	f023 0304 	bic.w	r3, r3, #4
 8003864:	6713      	str	r3, [r2, #112]	; 0x70
 8003866:	e01c      	b.n	80038a2 <HAL_RCC_OscConfig+0x5a6>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	2b05      	cmp	r3, #5
 800386e:	d10c      	bne.n	800388a <HAL_RCC_OscConfig+0x58e>
 8003870:	4b84      	ldr	r3, [pc, #528]	; (8003a84 <HAL_RCC_OscConfig+0x788>)
 8003872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003874:	4a83      	ldr	r2, [pc, #524]	; (8003a84 <HAL_RCC_OscConfig+0x788>)
 8003876:	f043 0304 	orr.w	r3, r3, #4
 800387a:	6713      	str	r3, [r2, #112]	; 0x70
 800387c:	4b81      	ldr	r3, [pc, #516]	; (8003a84 <HAL_RCC_OscConfig+0x788>)
 800387e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003880:	4a80      	ldr	r2, [pc, #512]	; (8003a84 <HAL_RCC_OscConfig+0x788>)
 8003882:	f043 0301 	orr.w	r3, r3, #1
 8003886:	6713      	str	r3, [r2, #112]	; 0x70
 8003888:	e00b      	b.n	80038a2 <HAL_RCC_OscConfig+0x5a6>
 800388a:	4b7e      	ldr	r3, [pc, #504]	; (8003a84 <HAL_RCC_OscConfig+0x788>)
 800388c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388e:	4a7d      	ldr	r2, [pc, #500]	; (8003a84 <HAL_RCC_OscConfig+0x788>)
 8003890:	f023 0301 	bic.w	r3, r3, #1
 8003894:	6713      	str	r3, [r2, #112]	; 0x70
 8003896:	4b7b      	ldr	r3, [pc, #492]	; (8003a84 <HAL_RCC_OscConfig+0x788>)
 8003898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389a:	4a7a      	ldr	r2, [pc, #488]	; (8003a84 <HAL_RCC_OscConfig+0x788>)
 800389c:	f023 0304 	bic.w	r3, r3, #4
 80038a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d015      	beq.n	80038d6 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038aa:	f7fd fa57 	bl	8000d5c <HAL_GetTick>
 80038ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038b0:	e00a      	b.n	80038c8 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038b2:	f7fd fa53 	bl	8000d5c <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e122      	b.n	8003b0e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038c8:	4b6e      	ldr	r3, [pc, #440]	; (8003a84 <HAL_RCC_OscConfig+0x788>)
 80038ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d0ee      	beq.n	80038b2 <HAL_RCC_OscConfig+0x5b6>
 80038d4:	e014      	b.n	8003900 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d6:	f7fd fa41 	bl	8000d5c <HAL_GetTick>
 80038da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80038dc:	e00a      	b.n	80038f4 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038de:	f7fd fa3d 	bl	8000d5c <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e10c      	b.n	8003b0e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80038f4:	4b63      	ldr	r3, [pc, #396]	; (8003a84 <HAL_RCC_OscConfig+0x788>)
 80038f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1ee      	bne.n	80038de <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 8101 	beq.w	8003b0c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800390a:	4b5e      	ldr	r3, [pc, #376]	; (8003a84 <HAL_RCC_OscConfig+0x788>)
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003912:	2b18      	cmp	r3, #24
 8003914:	f000 80bc 	beq.w	8003a90 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391c:	2b02      	cmp	r3, #2
 800391e:	f040 8095 	bne.w	8003a4c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003922:	4b58      	ldr	r3, [pc, #352]	; (8003a84 <HAL_RCC_OscConfig+0x788>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a57      	ldr	r2, [pc, #348]	; (8003a84 <HAL_RCC_OscConfig+0x788>)
 8003928:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800392c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392e:	f7fd fa15 	bl	8000d5c <HAL_GetTick>
 8003932:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003934:	e008      	b.n	8003948 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003936:	f7fd fa11 	bl	8000d5c <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	2b02      	cmp	r3, #2
 8003942:	d901      	bls.n	8003948 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e0e2      	b.n	8003b0e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003948:	4b4e      	ldr	r3, [pc, #312]	; (8003a84 <HAL_RCC_OscConfig+0x788>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1f0      	bne.n	8003936 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003954:	4b4b      	ldr	r3, [pc, #300]	; (8003a84 <HAL_RCC_OscConfig+0x788>)
 8003956:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003958:	4b4b      	ldr	r3, [pc, #300]	; (8003a88 <HAL_RCC_OscConfig+0x78c>)
 800395a:	4013      	ands	r3, r2
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003964:	0112      	lsls	r2, r2, #4
 8003966:	430a      	orrs	r2, r1
 8003968:	4946      	ldr	r1, [pc, #280]	; (8003a84 <HAL_RCC_OscConfig+0x788>)
 800396a:	4313      	orrs	r3, r2
 800396c:	628b      	str	r3, [r1, #40]	; 0x28
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003972:	3b01      	subs	r3, #1
 8003974:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800397c:	3b01      	subs	r3, #1
 800397e:	025b      	lsls	r3, r3, #9
 8003980:	b29b      	uxth	r3, r3
 8003982:	431a      	orrs	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003988:	3b01      	subs	r3, #1
 800398a:	041b      	lsls	r3, r3, #16
 800398c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003990:	431a      	orrs	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003996:	3b01      	subs	r3, #1
 8003998:	061b      	lsls	r3, r3, #24
 800399a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800399e:	4939      	ldr	r1, [pc, #228]	; (8003a84 <HAL_RCC_OscConfig+0x788>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80039a4:	4b37      	ldr	r3, [pc, #220]	; (8003a84 <HAL_RCC_OscConfig+0x788>)
 80039a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a8:	4a36      	ldr	r2, [pc, #216]	; (8003a84 <HAL_RCC_OscConfig+0x788>)
 80039aa:	f023 0301 	bic.w	r3, r3, #1
 80039ae:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80039b0:	4b34      	ldr	r3, [pc, #208]	; (8003a84 <HAL_RCC_OscConfig+0x788>)
 80039b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039b4:	4b35      	ldr	r3, [pc, #212]	; (8003a8c <HAL_RCC_OscConfig+0x790>)
 80039b6:	4013      	ands	r3, r2
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80039bc:	00d2      	lsls	r2, r2, #3
 80039be:	4931      	ldr	r1, [pc, #196]	; (8003a84 <HAL_RCC_OscConfig+0x788>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80039c4:	4b2f      	ldr	r3, [pc, #188]	; (8003a84 <HAL_RCC_OscConfig+0x788>)
 80039c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c8:	f023 020c 	bic.w	r2, r3, #12
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d0:	492c      	ldr	r1, [pc, #176]	; (8003a84 <HAL_RCC_OscConfig+0x788>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80039d6:	4b2b      	ldr	r3, [pc, #172]	; (8003a84 <HAL_RCC_OscConfig+0x788>)
 80039d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039da:	f023 0202 	bic.w	r2, r3, #2
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e2:	4928      	ldr	r1, [pc, #160]	; (8003a84 <HAL_RCC_OscConfig+0x788>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80039e8:	4b26      	ldr	r3, [pc, #152]	; (8003a84 <HAL_RCC_OscConfig+0x788>)
 80039ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ec:	4a25      	ldr	r2, [pc, #148]	; (8003a84 <HAL_RCC_OscConfig+0x788>)
 80039ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039f4:	4b23      	ldr	r3, [pc, #140]	; (8003a84 <HAL_RCC_OscConfig+0x788>)
 80039f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f8:	4a22      	ldr	r2, [pc, #136]	; (8003a84 <HAL_RCC_OscConfig+0x788>)
 80039fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003a00:	4b20      	ldr	r3, [pc, #128]	; (8003a84 <HAL_RCC_OscConfig+0x788>)
 8003a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a04:	4a1f      	ldr	r2, [pc, #124]	; (8003a84 <HAL_RCC_OscConfig+0x788>)
 8003a06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003a0c:	4b1d      	ldr	r3, [pc, #116]	; (8003a84 <HAL_RCC_OscConfig+0x788>)
 8003a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a10:	4a1c      	ldr	r2, [pc, #112]	; (8003a84 <HAL_RCC_OscConfig+0x788>)
 8003a12:	f043 0301 	orr.w	r3, r3, #1
 8003a16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a18:	4b1a      	ldr	r3, [pc, #104]	; (8003a84 <HAL_RCC_OscConfig+0x788>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a19      	ldr	r2, [pc, #100]	; (8003a84 <HAL_RCC_OscConfig+0x788>)
 8003a1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a24:	f7fd f99a 	bl	8000d5c <HAL_GetTick>
 8003a28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a2a:	e008      	b.n	8003a3e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a2c:	f7fd f996 	bl	8000d5c <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e067      	b.n	8003b0e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a3e:	4b11      	ldr	r3, [pc, #68]	; (8003a84 <HAL_RCC_OscConfig+0x788>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d0f0      	beq.n	8003a2c <HAL_RCC_OscConfig+0x730>
 8003a4a:	e05f      	b.n	8003b0c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a4c:	4b0d      	ldr	r3, [pc, #52]	; (8003a84 <HAL_RCC_OscConfig+0x788>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a0c      	ldr	r2, [pc, #48]	; (8003a84 <HAL_RCC_OscConfig+0x788>)
 8003a52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a58:	f7fd f980 	bl	8000d5c <HAL_GetTick>
 8003a5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a60:	f7fd f97c 	bl	8000d5c <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e04d      	b.n	8003b0e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a72:	4b04      	ldr	r3, [pc, #16]	; (8003a84 <HAL_RCC_OscConfig+0x788>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1f0      	bne.n	8003a60 <HAL_RCC_OscConfig+0x764>
 8003a7e:	e045      	b.n	8003b0c <HAL_RCC_OscConfig+0x810>
 8003a80:	58024800 	.word	0x58024800
 8003a84:	58024400 	.word	0x58024400
 8003a88:	fffffc0c 	.word	0xfffffc0c
 8003a8c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003a90:	4b21      	ldr	r3, [pc, #132]	; (8003b18 <HAL_RCC_OscConfig+0x81c>)
 8003a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a94:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003a96:	4b20      	ldr	r3, [pc, #128]	; (8003b18 <HAL_RCC_OscConfig+0x81c>)
 8003a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d031      	beq.n	8003b08 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	f003 0203 	and.w	r2, r3, #3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d12a      	bne.n	8003b08 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	091b      	lsrs	r3, r3, #4
 8003ab6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d122      	bne.n	8003b08 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003acc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d11a      	bne.n	8003b08 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	0a5b      	lsrs	r3, r3, #9
 8003ad6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ade:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d111      	bne.n	8003b08 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	0c1b      	lsrs	r3, r3, #16
 8003ae8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d108      	bne.n	8003b08 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	0e1b      	lsrs	r3, r3, #24
 8003afa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b02:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d001      	beq.n	8003b0c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e000      	b.n	8003b0e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3730      	adds	r7, #48	; 0x30
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	58024400 	.word	0x58024400

08003b1c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d101      	bne.n	8003b30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e19c      	b.n	8003e6a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b30:	4b8a      	ldr	r3, [pc, #552]	; (8003d5c <HAL_RCC_ClockConfig+0x240>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 030f 	and.w	r3, r3, #15
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d910      	bls.n	8003b60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b3e:	4b87      	ldr	r3, [pc, #540]	; (8003d5c <HAL_RCC_ClockConfig+0x240>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f023 020f 	bic.w	r2, r3, #15
 8003b46:	4985      	ldr	r1, [pc, #532]	; (8003d5c <HAL_RCC_ClockConfig+0x240>)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b4e:	4b83      	ldr	r3, [pc, #524]	; (8003d5c <HAL_RCC_ClockConfig+0x240>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 030f 	and.w	r3, r3, #15
 8003b56:	683a      	ldr	r2, [r7, #0]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d001      	beq.n	8003b60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e184      	b.n	8003e6a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0304 	and.w	r3, r3, #4
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d010      	beq.n	8003b8e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	691a      	ldr	r2, [r3, #16]
 8003b70:	4b7b      	ldr	r3, [pc, #492]	; (8003d60 <HAL_RCC_ClockConfig+0x244>)
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d908      	bls.n	8003b8e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003b7c:	4b78      	ldr	r3, [pc, #480]	; (8003d60 <HAL_RCC_ClockConfig+0x244>)
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	4975      	ldr	r1, [pc, #468]	; (8003d60 <HAL_RCC_ClockConfig+0x244>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0308 	and.w	r3, r3, #8
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d010      	beq.n	8003bbc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	695a      	ldr	r2, [r3, #20]
 8003b9e:	4b70      	ldr	r3, [pc, #448]	; (8003d60 <HAL_RCC_ClockConfig+0x244>)
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d908      	bls.n	8003bbc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003baa:	4b6d      	ldr	r3, [pc, #436]	; (8003d60 <HAL_RCC_ClockConfig+0x244>)
 8003bac:	69db      	ldr	r3, [r3, #28]
 8003bae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	496a      	ldr	r1, [pc, #424]	; (8003d60 <HAL_RCC_ClockConfig+0x244>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0310 	and.w	r3, r3, #16
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d010      	beq.n	8003bea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	699a      	ldr	r2, [r3, #24]
 8003bcc:	4b64      	ldr	r3, [pc, #400]	; (8003d60 <HAL_RCC_ClockConfig+0x244>)
 8003bce:	69db      	ldr	r3, [r3, #28]
 8003bd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d908      	bls.n	8003bea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003bd8:	4b61      	ldr	r3, [pc, #388]	; (8003d60 <HAL_RCC_ClockConfig+0x244>)
 8003bda:	69db      	ldr	r3, [r3, #28]
 8003bdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	495e      	ldr	r1, [pc, #376]	; (8003d60 <HAL_RCC_ClockConfig+0x244>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0320 	and.w	r3, r3, #32
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d010      	beq.n	8003c18 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	69da      	ldr	r2, [r3, #28]
 8003bfa:	4b59      	ldr	r3, [pc, #356]	; (8003d60 <HAL_RCC_ClockConfig+0x244>)
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d908      	bls.n	8003c18 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003c06:	4b56      	ldr	r3, [pc, #344]	; (8003d60 <HAL_RCC_ClockConfig+0x244>)
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	4953      	ldr	r1, [pc, #332]	; (8003d60 <HAL_RCC_ClockConfig+0x244>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d010      	beq.n	8003c46 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68da      	ldr	r2, [r3, #12]
 8003c28:	4b4d      	ldr	r3, [pc, #308]	; (8003d60 <HAL_RCC_ClockConfig+0x244>)
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	f003 030f 	and.w	r3, r3, #15
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d908      	bls.n	8003c46 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c34:	4b4a      	ldr	r3, [pc, #296]	; (8003d60 <HAL_RCC_ClockConfig+0x244>)
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	f023 020f 	bic.w	r2, r3, #15
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	4947      	ldr	r1, [pc, #284]	; (8003d60 <HAL_RCC_ClockConfig+0x244>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d055      	beq.n	8003cfe <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003c52:	4b43      	ldr	r3, [pc, #268]	; (8003d60 <HAL_RCC_ClockConfig+0x244>)
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	4940      	ldr	r1, [pc, #256]	; (8003d60 <HAL_RCC_ClockConfig+0x244>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d107      	bne.n	8003c7c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c6c:	4b3c      	ldr	r3, [pc, #240]	; (8003d60 <HAL_RCC_ClockConfig+0x244>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d121      	bne.n	8003cbc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e0f6      	b.n	8003e6a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	2b03      	cmp	r3, #3
 8003c82:	d107      	bne.n	8003c94 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c84:	4b36      	ldr	r3, [pc, #216]	; (8003d60 <HAL_RCC_ClockConfig+0x244>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d115      	bne.n	8003cbc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e0ea      	b.n	8003e6a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d107      	bne.n	8003cac <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c9c:	4b30      	ldr	r3, [pc, #192]	; (8003d60 <HAL_RCC_ClockConfig+0x244>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d109      	bne.n	8003cbc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e0de      	b.n	8003e6a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003cac:	4b2c      	ldr	r3, [pc, #176]	; (8003d60 <HAL_RCC_ClockConfig+0x244>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0304 	and.w	r3, r3, #4
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d101      	bne.n	8003cbc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e0d6      	b.n	8003e6a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003cbc:	4b28      	ldr	r3, [pc, #160]	; (8003d60 <HAL_RCC_ClockConfig+0x244>)
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	f023 0207 	bic.w	r2, r3, #7
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	4925      	ldr	r1, [pc, #148]	; (8003d60 <HAL_RCC_ClockConfig+0x244>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cce:	f7fd f845 	bl	8000d5c <HAL_GetTick>
 8003cd2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cd4:	e00a      	b.n	8003cec <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cd6:	f7fd f841 	bl	8000d5c <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d901      	bls.n	8003cec <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e0be      	b.n	8003e6a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cec:	4b1c      	ldr	r3, [pc, #112]	; (8003d60 <HAL_RCC_ClockConfig+0x244>)
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	00db      	lsls	r3, r3, #3
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d1eb      	bne.n	8003cd6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d010      	beq.n	8003d2c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68da      	ldr	r2, [r3, #12]
 8003d0e:	4b14      	ldr	r3, [pc, #80]	; (8003d60 <HAL_RCC_ClockConfig+0x244>)
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	f003 030f 	and.w	r3, r3, #15
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d208      	bcs.n	8003d2c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d1a:	4b11      	ldr	r3, [pc, #68]	; (8003d60 <HAL_RCC_ClockConfig+0x244>)
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	f023 020f 	bic.w	r2, r3, #15
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	490e      	ldr	r1, [pc, #56]	; (8003d60 <HAL_RCC_ClockConfig+0x244>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d2c:	4b0b      	ldr	r3, [pc, #44]	; (8003d5c <HAL_RCC_ClockConfig+0x240>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 030f 	and.w	r3, r3, #15
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d214      	bcs.n	8003d64 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d3a:	4b08      	ldr	r3, [pc, #32]	; (8003d5c <HAL_RCC_ClockConfig+0x240>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f023 020f 	bic.w	r2, r3, #15
 8003d42:	4906      	ldr	r1, [pc, #24]	; (8003d5c <HAL_RCC_ClockConfig+0x240>)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d4a:	4b04      	ldr	r3, [pc, #16]	; (8003d5c <HAL_RCC_ClockConfig+0x240>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 030f 	and.w	r3, r3, #15
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d005      	beq.n	8003d64 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e086      	b.n	8003e6a <HAL_RCC_ClockConfig+0x34e>
 8003d5c:	52002000 	.word	0x52002000
 8003d60:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d010      	beq.n	8003d92 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	691a      	ldr	r2, [r3, #16]
 8003d74:	4b3f      	ldr	r3, [pc, #252]	; (8003e74 <HAL_RCC_ClockConfig+0x358>)
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d208      	bcs.n	8003d92 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003d80:	4b3c      	ldr	r3, [pc, #240]	; (8003e74 <HAL_RCC_ClockConfig+0x358>)
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	4939      	ldr	r1, [pc, #228]	; (8003e74 <HAL_RCC_ClockConfig+0x358>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d010      	beq.n	8003dc0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	695a      	ldr	r2, [r3, #20]
 8003da2:	4b34      	ldr	r3, [pc, #208]	; (8003e74 <HAL_RCC_ClockConfig+0x358>)
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d208      	bcs.n	8003dc0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003dae:	4b31      	ldr	r3, [pc, #196]	; (8003e74 <HAL_RCC_ClockConfig+0x358>)
 8003db0:	69db      	ldr	r3, [r3, #28]
 8003db2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	492e      	ldr	r1, [pc, #184]	; (8003e74 <HAL_RCC_ClockConfig+0x358>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0310 	and.w	r3, r3, #16
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d010      	beq.n	8003dee <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	699a      	ldr	r2, [r3, #24]
 8003dd0:	4b28      	ldr	r3, [pc, #160]	; (8003e74 <HAL_RCC_ClockConfig+0x358>)
 8003dd2:	69db      	ldr	r3, [r3, #28]
 8003dd4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d208      	bcs.n	8003dee <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003ddc:	4b25      	ldr	r3, [pc, #148]	; (8003e74 <HAL_RCC_ClockConfig+0x358>)
 8003dde:	69db      	ldr	r3, [r3, #28]
 8003de0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	4922      	ldr	r1, [pc, #136]	; (8003e74 <HAL_RCC_ClockConfig+0x358>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0320 	and.w	r3, r3, #32
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d010      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	69da      	ldr	r2, [r3, #28]
 8003dfe:	4b1d      	ldr	r3, [pc, #116]	; (8003e74 <HAL_RCC_ClockConfig+0x358>)
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d208      	bcs.n	8003e1c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003e0a:	4b1a      	ldr	r3, [pc, #104]	; (8003e74 <HAL_RCC_ClockConfig+0x358>)
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	4917      	ldr	r1, [pc, #92]	; (8003e74 <HAL_RCC_ClockConfig+0x358>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003e1c:	f000 f834 	bl	8003e88 <HAL_RCC_GetSysClockFreq>
 8003e20:	4601      	mov	r1, r0
 8003e22:	4b14      	ldr	r3, [pc, #80]	; (8003e74 <HAL_RCC_ClockConfig+0x358>)
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	0a1b      	lsrs	r3, r3, #8
 8003e28:	f003 030f 	and.w	r3, r3, #15
 8003e2c:	4a12      	ldr	r2, [pc, #72]	; (8003e78 <HAL_RCC_ClockConfig+0x35c>)
 8003e2e:	5cd3      	ldrb	r3, [r2, r3]
 8003e30:	f003 031f 	and.w	r3, r3, #31
 8003e34:	fa21 f303 	lsr.w	r3, r1, r3
 8003e38:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e3a:	4b0e      	ldr	r3, [pc, #56]	; (8003e74 <HAL_RCC_ClockConfig+0x358>)
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	f003 030f 	and.w	r3, r3, #15
 8003e42:	4a0d      	ldr	r2, [pc, #52]	; (8003e78 <HAL_RCC_ClockConfig+0x35c>)
 8003e44:	5cd3      	ldrb	r3, [r2, r3]
 8003e46:	f003 031f 	and.w	r3, r3, #31
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e50:	4a0a      	ldr	r2, [pc, #40]	; (8003e7c <HAL_RCC_ClockConfig+0x360>)
 8003e52:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003e54:	4a0a      	ldr	r2, [pc, #40]	; (8003e80 <HAL_RCC_ClockConfig+0x364>)
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003e5a:	4b0a      	ldr	r3, [pc, #40]	; (8003e84 <HAL_RCC_ClockConfig+0x368>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7fc ff32 	bl	8000cc8 <HAL_InitTick>
 8003e64:	4603      	mov	r3, r0
 8003e66:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3718      	adds	r7, #24
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	58024400 	.word	0x58024400
 8003e78:	08009638 	.word	0x08009638
 8003e7c:	20000004 	.word	0x20000004
 8003e80:	20000000 	.word	0x20000000
 8003e84:	20000008 	.word	0x20000008

08003e88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b089      	sub	sp, #36	; 0x24
 8003e8c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e8e:	4baf      	ldr	r3, [pc, #700]	; (800414c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e96:	2b18      	cmp	r3, #24
 8003e98:	f200 814e 	bhi.w	8004138 <HAL_RCC_GetSysClockFreq+0x2b0>
 8003e9c:	a201      	add	r2, pc, #4	; (adr r2, 8003ea4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea2:	bf00      	nop
 8003ea4:	08003f09 	.word	0x08003f09
 8003ea8:	08004139 	.word	0x08004139
 8003eac:	08004139 	.word	0x08004139
 8003eb0:	08004139 	.word	0x08004139
 8003eb4:	08004139 	.word	0x08004139
 8003eb8:	08004139 	.word	0x08004139
 8003ebc:	08004139 	.word	0x08004139
 8003ec0:	08004139 	.word	0x08004139
 8003ec4:	08003f2f 	.word	0x08003f2f
 8003ec8:	08004139 	.word	0x08004139
 8003ecc:	08004139 	.word	0x08004139
 8003ed0:	08004139 	.word	0x08004139
 8003ed4:	08004139 	.word	0x08004139
 8003ed8:	08004139 	.word	0x08004139
 8003edc:	08004139 	.word	0x08004139
 8003ee0:	08004139 	.word	0x08004139
 8003ee4:	08003f35 	.word	0x08003f35
 8003ee8:	08004139 	.word	0x08004139
 8003eec:	08004139 	.word	0x08004139
 8003ef0:	08004139 	.word	0x08004139
 8003ef4:	08004139 	.word	0x08004139
 8003ef8:	08004139 	.word	0x08004139
 8003efc:	08004139 	.word	0x08004139
 8003f00:	08004139 	.word	0x08004139
 8003f04:	08003f3b 	.word	0x08003f3b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f08:	4b90      	ldr	r3, [pc, #576]	; (800414c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0320 	and.w	r3, r3, #32
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d009      	beq.n	8003f28 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003f14:	4b8d      	ldr	r3, [pc, #564]	; (800414c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	08db      	lsrs	r3, r3, #3
 8003f1a:	f003 0303 	and.w	r3, r3, #3
 8003f1e:	4a8c      	ldr	r2, [pc, #560]	; (8004150 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003f20:	fa22 f303 	lsr.w	r3, r2, r3
 8003f24:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003f26:	e10a      	b.n	800413e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003f28:	4b89      	ldr	r3, [pc, #548]	; (8004150 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003f2a:	61bb      	str	r3, [r7, #24]
    break;
 8003f2c:	e107      	b.n	800413e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003f2e:	4b89      	ldr	r3, [pc, #548]	; (8004154 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003f30:	61bb      	str	r3, [r7, #24]
    break;
 8003f32:	e104      	b.n	800413e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003f34:	4b88      	ldr	r3, [pc, #544]	; (8004158 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8003f36:	61bb      	str	r3, [r7, #24]
    break;
 8003f38:	e101      	b.n	800413e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f3a:	4b84      	ldr	r3, [pc, #528]	; (800414c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3e:	f003 0303 	and.w	r3, r3, #3
 8003f42:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003f44:	4b81      	ldr	r3, [pc, #516]	; (800414c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f48:	091b      	lsrs	r3, r3, #4
 8003f4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f4e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003f50:	4b7e      	ldr	r3, [pc, #504]	; (800414c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003f5a:	4b7c      	ldr	r3, [pc, #496]	; (800414c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f5e:	08db      	lsrs	r3, r3, #3
 8003f60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	fb02 f303 	mul.w	r3, r2, r3
 8003f6a:	ee07 3a90 	vmov	s15, r3
 8003f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f72:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f000 80da 	beq.w	8004132 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d05a      	beq.n	800403a <HAL_RCC_GetSysClockFreq+0x1b2>
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d302      	bcc.n	8003f8e <HAL_RCC_GetSysClockFreq+0x106>
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d078      	beq.n	800407e <HAL_RCC_GetSysClockFreq+0x1f6>
 8003f8c:	e099      	b.n	80040c2 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f8e:	4b6f      	ldr	r3, [pc, #444]	; (800414c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0320 	and.w	r3, r3, #32
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d02d      	beq.n	8003ff6 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003f9a:	4b6c      	ldr	r3, [pc, #432]	; (800414c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	08db      	lsrs	r3, r3, #3
 8003fa0:	f003 0303 	and.w	r3, r3, #3
 8003fa4:	4a6a      	ldr	r2, [pc, #424]	; (8004150 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8003faa:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	ee07 3a90 	vmov	s15, r3
 8003fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	ee07 3a90 	vmov	s15, r3
 8003fbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fc4:	4b61      	ldr	r3, [pc, #388]	; (800414c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fcc:	ee07 3a90 	vmov	s15, r3
 8003fd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fd4:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fd8:	eddf 5a60 	vldr	s11, [pc, #384]	; 800415c <HAL_RCC_GetSysClockFreq+0x2d4>
 8003fdc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fe0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fe4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fe8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ff0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003ff4:	e087      	b.n	8004106 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	ee07 3a90 	vmov	s15, r3
 8003ffc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004000:	eddf 6a57 	vldr	s13, [pc, #348]	; 8004160 <HAL_RCC_GetSysClockFreq+0x2d8>
 8004004:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004008:	4b50      	ldr	r3, [pc, #320]	; (800414c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800400a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004010:	ee07 3a90 	vmov	s15, r3
 8004014:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004018:	ed97 6a02 	vldr	s12, [r7, #8]
 800401c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800415c <HAL_RCC_GetSysClockFreq+0x2d4>
 8004020:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004024:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004028:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800402c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004030:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004034:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004038:	e065      	b.n	8004106 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	ee07 3a90 	vmov	s15, r3
 8004040:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004044:	eddf 6a47 	vldr	s13, [pc, #284]	; 8004164 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004048:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800404c:	4b3f      	ldr	r3, [pc, #252]	; (800414c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800404e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004050:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004054:	ee07 3a90 	vmov	s15, r3
 8004058:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800405c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004060:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800415c <HAL_RCC_GetSysClockFreq+0x2d4>
 8004064:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004068:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800406c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004070:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004078:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800407c:	e043      	b.n	8004106 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	ee07 3a90 	vmov	s15, r3
 8004084:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004088:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004168 <HAL_RCC_GetSysClockFreq+0x2e0>
 800408c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004090:	4b2e      	ldr	r3, [pc, #184]	; (800414c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004094:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004098:	ee07 3a90 	vmov	s15, r3
 800409c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040a0:	ed97 6a02 	vldr	s12, [r7, #8]
 80040a4:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800415c <HAL_RCC_GetSysClockFreq+0x2d4>
 80040a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040c0:	e021      	b.n	8004106 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	ee07 3a90 	vmov	s15, r3
 80040c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040cc:	eddf 6a25 	vldr	s13, [pc, #148]	; 8004164 <HAL_RCC_GetSysClockFreq+0x2dc>
 80040d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040d4:	4b1d      	ldr	r3, [pc, #116]	; (800414c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80040d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040dc:	ee07 3a90 	vmov	s15, r3
 80040e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040e4:	ed97 6a02 	vldr	s12, [r7, #8]
 80040e8:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800415c <HAL_RCC_GetSysClockFreq+0x2d4>
 80040ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004100:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004104:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004106:	4b11      	ldr	r3, [pc, #68]	; (800414c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410a:	0a5b      	lsrs	r3, r3, #9
 800410c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004110:	3301      	adds	r3, #1
 8004112:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	ee07 3a90 	vmov	s15, r3
 800411a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800411e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004122:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004126:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800412a:	ee17 3a90 	vmov	r3, s15
 800412e:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004130:	e005      	b.n	800413e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8004132:	2300      	movs	r3, #0
 8004134:	61bb      	str	r3, [r7, #24]
    break;
 8004136:	e002      	b.n	800413e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8004138:	4b06      	ldr	r3, [pc, #24]	; (8004154 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800413a:	61bb      	str	r3, [r7, #24]
    break;
 800413c:	bf00      	nop
  }

  return sysclockfreq;
 800413e:	69bb      	ldr	r3, [r7, #24]
}
 8004140:	4618      	mov	r0, r3
 8004142:	3724      	adds	r7, #36	; 0x24
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr
 800414c:	58024400 	.word	0x58024400
 8004150:	03d09000 	.word	0x03d09000
 8004154:	003d0900 	.word	0x003d0900
 8004158:	017d7840 	.word	0x017d7840
 800415c:	46000000 	.word	0x46000000
 8004160:	4c742400 	.word	0x4c742400
 8004164:	4a742400 	.word	0x4a742400
 8004168:	4bbebc20 	.word	0x4bbebc20

0800416c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004172:	f7ff fe89 	bl	8003e88 <HAL_RCC_GetSysClockFreq>
 8004176:	4601      	mov	r1, r0
 8004178:	4b10      	ldr	r3, [pc, #64]	; (80041bc <HAL_RCC_GetHCLKFreq+0x50>)
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	0a1b      	lsrs	r3, r3, #8
 800417e:	f003 030f 	and.w	r3, r3, #15
 8004182:	4a0f      	ldr	r2, [pc, #60]	; (80041c0 <HAL_RCC_GetHCLKFreq+0x54>)
 8004184:	5cd3      	ldrb	r3, [r2, r3]
 8004186:	f003 031f 	and.w	r3, r3, #31
 800418a:	fa21 f303 	lsr.w	r3, r1, r3
 800418e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004190:	4b0a      	ldr	r3, [pc, #40]	; (80041bc <HAL_RCC_GetHCLKFreq+0x50>)
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	f003 030f 	and.w	r3, r3, #15
 8004198:	4a09      	ldr	r2, [pc, #36]	; (80041c0 <HAL_RCC_GetHCLKFreq+0x54>)
 800419a:	5cd3      	ldrb	r3, [r2, r3]
 800419c:	f003 031f 	and.w	r3, r3, #31
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	fa22 f303 	lsr.w	r3, r2, r3
 80041a6:	4a07      	ldr	r2, [pc, #28]	; (80041c4 <HAL_RCC_GetHCLKFreq+0x58>)
 80041a8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80041aa:	4a07      	ldr	r2, [pc, #28]	; (80041c8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80041b0:	4b04      	ldr	r3, [pc, #16]	; (80041c4 <HAL_RCC_GetHCLKFreq+0x58>)
 80041b2:	681b      	ldr	r3, [r3, #0]
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3708      	adds	r7, #8
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	58024400 	.word	0x58024400
 80041c0:	08009638 	.word	0x08009638
 80041c4:	20000004 	.word	0x20000004
 80041c8:	20000000 	.word	0x20000000

080041cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80041d0:	f7ff ffcc 	bl	800416c <HAL_RCC_GetHCLKFreq>
 80041d4:	4601      	mov	r1, r0
 80041d6:	4b06      	ldr	r3, [pc, #24]	; (80041f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041d8:	69db      	ldr	r3, [r3, #28]
 80041da:	091b      	lsrs	r3, r3, #4
 80041dc:	f003 0307 	and.w	r3, r3, #7
 80041e0:	4a04      	ldr	r2, [pc, #16]	; (80041f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80041e2:	5cd3      	ldrb	r3, [r2, r3]
 80041e4:	f003 031f 	and.w	r3, r3, #31
 80041e8:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	58024400 	.word	0x58024400
 80041f4:	08009638 	.word	0x08009638

080041f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80041fc:	f7ff ffb6 	bl	800416c <HAL_RCC_GetHCLKFreq>
 8004200:	4601      	mov	r1, r0
 8004202:	4b06      	ldr	r3, [pc, #24]	; (800421c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004204:	69db      	ldr	r3, [r3, #28]
 8004206:	0a1b      	lsrs	r3, r3, #8
 8004208:	f003 0307 	and.w	r3, r3, #7
 800420c:	4a04      	ldr	r2, [pc, #16]	; (8004220 <HAL_RCC_GetPCLK2Freq+0x28>)
 800420e:	5cd3      	ldrb	r3, [r2, r3]
 8004210:	f003 031f 	and.w	r3, r3, #31
 8004214:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004218:	4618      	mov	r0, r3
 800421a:	bd80      	pop	{r7, pc}
 800421c:	58024400 	.word	0x58024400
 8004220:	08009638 	.word	0x08009638

08004224 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004228:	f7ff ffa0 	bl	800416c <HAL_RCC_GetHCLKFreq>
 800422c:	4601      	mov	r1, r0
 800422e:	4b06      	ldr	r3, [pc, #24]	; (8004248 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	091b      	lsrs	r3, r3, #4
 8004234:	f003 0307 	and.w	r3, r3, #7
 8004238:	4a04      	ldr	r2, [pc, #16]	; (800424c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800423a:	5cd3      	ldrb	r3, [r2, r3]
 800423c:	f003 031f 	and.w	r3, r3, #31
 8004240:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004244:	4618      	mov	r0, r3
 8004246:	bd80      	pop	{r7, pc}
 8004248:	58024400 	.word	0x58024400
 800424c:	08009638 	.word	0x08009638

08004250 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004250:	b480      	push	{r7}
 8004252:	b089      	sub	sp, #36	; 0x24
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004258:	4b9d      	ldr	r3, [pc, #628]	; (80044d0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800425a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425c:	f003 0303 	and.w	r3, r3, #3
 8004260:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004262:	4b9b      	ldr	r3, [pc, #620]	; (80044d0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004266:	0b1b      	lsrs	r3, r3, #12
 8004268:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800426c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800426e:	4b98      	ldr	r3, [pc, #608]	; (80044d0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004272:	091b      	lsrs	r3, r3, #4
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800427a:	4b95      	ldr	r3, [pc, #596]	; (80044d0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800427c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800427e:	08db      	lsrs	r3, r3, #3
 8004280:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	fb02 f303 	mul.w	r3, r2, r3
 800428a:	ee07 3a90 	vmov	s15, r3
 800428e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004292:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	2b00      	cmp	r3, #0
 800429a:	f000 810a 	beq.w	80044b2 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d05a      	beq.n	800435a <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d302      	bcc.n	80042ae <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d078      	beq.n	800439e <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80042ac:	e099      	b.n	80043e2 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042ae:	4b88      	ldr	r3, [pc, #544]	; (80044d0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0320 	and.w	r3, r3, #32
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d02d      	beq.n	8004316 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80042ba:	4b85      	ldr	r3, [pc, #532]	; (80044d0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	08db      	lsrs	r3, r3, #3
 80042c0:	f003 0303 	and.w	r3, r3, #3
 80042c4:	4a83      	ldr	r2, [pc, #524]	; (80044d4 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80042c6:	fa22 f303 	lsr.w	r3, r2, r3
 80042ca:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	ee07 3a90 	vmov	s15, r3
 80042d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	ee07 3a90 	vmov	s15, r3
 80042dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042e4:	4b7a      	ldr	r3, [pc, #488]	; (80044d0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80042e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042ec:	ee07 3a90 	vmov	s15, r3
 80042f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80042f8:	eddf 5a77 	vldr	s11, [pc, #476]	; 80044d8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80042fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004300:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004304:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004308:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800430c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004310:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004314:	e087      	b.n	8004426 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	ee07 3a90 	vmov	s15, r3
 800431c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004320:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80044dc <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8004324:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004328:	4b69      	ldr	r3, [pc, #420]	; (80044d0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800432a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004330:	ee07 3a90 	vmov	s15, r3
 8004334:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004338:	ed97 6a03 	vldr	s12, [r7, #12]
 800433c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80044d8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004340:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004344:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004348:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800434c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004350:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004354:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004358:	e065      	b.n	8004426 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	ee07 3a90 	vmov	s15, r3
 8004360:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004364:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80044e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004368:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800436c:	4b58      	ldr	r3, [pc, #352]	; (80044d0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800436e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004370:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004374:	ee07 3a90 	vmov	s15, r3
 8004378:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800437c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004380:	eddf 5a55 	vldr	s11, [pc, #340]	; 80044d8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004384:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004388:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800438c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004390:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004394:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004398:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800439c:	e043      	b.n	8004426 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	ee07 3a90 	vmov	s15, r3
 80043a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043a8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80044e4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80043ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043b0:	4b47      	ldr	r3, [pc, #284]	; (80044d0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80043b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043b8:	ee07 3a90 	vmov	s15, r3
 80043bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80043c4:	eddf 5a44 	vldr	s11, [pc, #272]	; 80044d8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80043c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80043e0:	e021      	b.n	8004426 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	ee07 3a90 	vmov	s15, r3
 80043e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ec:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80044e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80043f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043f4:	4b36      	ldr	r3, [pc, #216]	; (80044d0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80043f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043fc:	ee07 3a90 	vmov	s15, r3
 8004400:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004404:	ed97 6a03 	vldr	s12, [r7, #12]
 8004408:	eddf 5a33 	vldr	s11, [pc, #204]	; 80044d8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800440c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004410:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004414:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004418:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800441c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004420:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004424:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004426:	4b2a      	ldr	r3, [pc, #168]	; (80044d0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442a:	0a5b      	lsrs	r3, r3, #9
 800442c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004430:	ee07 3a90 	vmov	s15, r3
 8004434:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004438:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800443c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004440:	edd7 6a07 	vldr	s13, [r7, #28]
 8004444:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004448:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800444c:	ee17 2a90 	vmov	r2, s15
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004454:	4b1e      	ldr	r3, [pc, #120]	; (80044d0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004458:	0c1b      	lsrs	r3, r3, #16
 800445a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800445e:	ee07 3a90 	vmov	s15, r3
 8004462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004466:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800446a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800446e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004472:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004476:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800447a:	ee17 2a90 	vmov	r2, s15
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004482:	4b13      	ldr	r3, [pc, #76]	; (80044d0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004486:	0e1b      	lsrs	r3, r3, #24
 8004488:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800448c:	ee07 3a90 	vmov	s15, r3
 8004490:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004494:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004498:	ee37 7a87 	vadd.f32	s14, s15, s14
 800449c:	edd7 6a07 	vldr	s13, [r7, #28]
 80044a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044a8:	ee17 2a90 	vmov	r2, s15
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80044b0:	e008      	b.n	80044c4 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	609a      	str	r2, [r3, #8]
}
 80044c4:	bf00      	nop
 80044c6:	3724      	adds	r7, #36	; 0x24
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	58024400 	.word	0x58024400
 80044d4:	03d09000 	.word	0x03d09000
 80044d8:	46000000 	.word	0x46000000
 80044dc:	4c742400 	.word	0x4c742400
 80044e0:	4a742400 	.word	0x4a742400
 80044e4:	4bbebc20 	.word	0x4bbebc20

080044e8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b089      	sub	sp, #36	; 0x24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044f0:	4b9d      	ldr	r3, [pc, #628]	; (8004768 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80044f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f4:	f003 0303 	and.w	r3, r3, #3
 80044f8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80044fa:	4b9b      	ldr	r3, [pc, #620]	; (8004768 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80044fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fe:	0d1b      	lsrs	r3, r3, #20
 8004500:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004504:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004506:	4b98      	ldr	r3, [pc, #608]	; (8004768 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450a:	0a1b      	lsrs	r3, r3, #8
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004512:	4b95      	ldr	r3, [pc, #596]	; (8004768 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004516:	08db      	lsrs	r3, r3, #3
 8004518:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	fb02 f303 	mul.w	r3, r2, r3
 8004522:	ee07 3a90 	vmov	s15, r3
 8004526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800452a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 810a 	beq.w	800474a <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d05a      	beq.n	80045f2 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 800453c:	2b01      	cmp	r3, #1
 800453e:	d302      	bcc.n	8004546 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8004540:	2b02      	cmp	r3, #2
 8004542:	d078      	beq.n	8004636 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8004544:	e099      	b.n	800467a <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004546:	4b88      	ldr	r3, [pc, #544]	; (8004768 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0320 	and.w	r3, r3, #32
 800454e:	2b00      	cmp	r3, #0
 8004550:	d02d      	beq.n	80045ae <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004552:	4b85      	ldr	r3, [pc, #532]	; (8004768 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	08db      	lsrs	r3, r3, #3
 8004558:	f003 0303 	and.w	r3, r3, #3
 800455c:	4a83      	ldr	r2, [pc, #524]	; (800476c <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800455e:	fa22 f303 	lsr.w	r3, r2, r3
 8004562:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	ee07 3a90 	vmov	s15, r3
 800456a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	ee07 3a90 	vmov	s15, r3
 8004574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004578:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800457c:	4b7a      	ldr	r3, [pc, #488]	; (8004768 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800457e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004584:	ee07 3a90 	vmov	s15, r3
 8004588:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800458c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004590:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004770 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004594:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004598:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800459c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045a8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80045ac:	e087      	b.n	80046be <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	ee07 3a90 	vmov	s15, r3
 80045b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045b8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004774 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80045bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045c0:	4b69      	ldr	r3, [pc, #420]	; (8004768 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80045c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045c8:	ee07 3a90 	vmov	s15, r3
 80045cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80045d4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004770 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80045d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80045f0:	e065      	b.n	80046be <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	ee07 3a90 	vmov	s15, r3
 80045f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045fc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004778 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004600:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004604:	4b58      	ldr	r3, [pc, #352]	; (8004768 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004608:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800460c:	ee07 3a90 	vmov	s15, r3
 8004610:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004614:	ed97 6a03 	vldr	s12, [r7, #12]
 8004618:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004770 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800461c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004620:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004624:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004628:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800462c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004630:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004634:	e043      	b.n	80046be <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	ee07 3a90 	vmov	s15, r3
 800463c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004640:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800477c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8004644:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004648:	4b47      	ldr	r3, [pc, #284]	; (8004768 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800464a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004650:	ee07 3a90 	vmov	s15, r3
 8004654:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004658:	ed97 6a03 	vldr	s12, [r7, #12]
 800465c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004770 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004660:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004664:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004668:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800466c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004670:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004674:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004678:	e021      	b.n	80046be <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	ee07 3a90 	vmov	s15, r3
 8004680:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004684:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004778 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004688:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800468c:	4b36      	ldr	r3, [pc, #216]	; (8004768 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800468e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004694:	ee07 3a90 	vmov	s15, r3
 8004698:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800469c:	ed97 6a03 	vldr	s12, [r7, #12]
 80046a0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004770 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80046a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80046bc:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80046be:	4b2a      	ldr	r3, [pc, #168]	; (8004768 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80046c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c2:	0a5b      	lsrs	r3, r3, #9
 80046c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046c8:	ee07 3a90 	vmov	s15, r3
 80046cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80046dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046e4:	ee17 2a90 	vmov	r2, s15
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80046ec:	4b1e      	ldr	r3, [pc, #120]	; (8004768 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80046ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f0:	0c1b      	lsrs	r3, r3, #16
 80046f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046f6:	ee07 3a90 	vmov	s15, r3
 80046fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004702:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004706:	edd7 6a07 	vldr	s13, [r7, #28]
 800470a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800470e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004712:	ee17 2a90 	vmov	r2, s15
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800471a:	4b13      	ldr	r3, [pc, #76]	; (8004768 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800471c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471e:	0e1b      	lsrs	r3, r3, #24
 8004720:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004724:	ee07 3a90 	vmov	s15, r3
 8004728:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800472c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004730:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004734:	edd7 6a07 	vldr	s13, [r7, #28]
 8004738:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800473c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004740:	ee17 2a90 	vmov	r2, s15
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004748:	e008      	b.n	800475c <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	609a      	str	r2, [r3, #8]
}
 800475c:	bf00      	nop
 800475e:	3724      	adds	r7, #36	; 0x24
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr
 8004768:	58024400 	.word	0x58024400
 800476c:	03d09000 	.word	0x03d09000
 8004770:	46000000 	.word	0x46000000
 8004774:	4c742400 	.word	0x4c742400
 8004778:	4a742400 	.word	0x4a742400
 800477c:	4bbebc20 	.word	0x4bbebc20

08004780 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e042      	b.n	8004818 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004798:	2b00      	cmp	r3, #0
 800479a:	d106      	bne.n	80047aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f7fc f963 	bl	8000a70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2224      	movs	r2, #36	; 0x24
 80047ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 0201 	bic.w	r2, r2, #1
 80047c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f9c0 	bl	8004b48 <UART_SetConfig>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d101      	bne.n	80047d2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e022      	b.n	8004818 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d002      	beq.n	80047e0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 ff64 	bl	80056a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	685a      	ldr	r2, [r3, #4]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689a      	ldr	r2, [r3, #8]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f042 0201 	orr.w	r2, r2, #1
 800480e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 ffeb 	bl	80057ec <UART_CheckIdleState>
 8004816:	4603      	mov	r3, r0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3708      	adds	r7, #8
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b088      	sub	sp, #32
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	69db      	ldr	r3, [r3, #28]
 800482e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004840:	69fa      	ldr	r2, [r7, #28]
 8004842:	f640 030f 	movw	r3, #2063	; 0x80f
 8004846:	4013      	ands	r3, r2
 8004848:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d118      	bne.n	8004882 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	f003 0320 	and.w	r3, r3, #32
 8004856:	2b00      	cmp	r3, #0
 8004858:	d013      	beq.n	8004882 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	f003 0320 	and.w	r3, r3, #32
 8004860:	2b00      	cmp	r3, #0
 8004862:	d104      	bne.n	800486e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d009      	beq.n	8004882 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004872:	2b00      	cmp	r3, #0
 8004874:	f000 8145 	beq.w	8004b02 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	4798      	blx	r3
      }
      return;
 8004880:	e13f      	b.n	8004b02 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	2b00      	cmp	r3, #0
 8004886:	f000 80e8 	beq.w	8004a5a <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800488a:	697a      	ldr	r2, [r7, #20]
 800488c:	4ba1      	ldr	r3, [pc, #644]	; (8004b14 <HAL_UART_IRQHandler+0x2f4>)
 800488e:	4013      	ands	r3, r2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d105      	bne.n	80048a0 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	4ba0      	ldr	r3, [pc, #640]	; (8004b18 <HAL_UART_IRQHandler+0x2f8>)
 8004898:	4013      	ands	r3, r2
 800489a:	2b00      	cmp	r3, #0
 800489c:	f000 80dd 	beq.w	8004a5a <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d010      	beq.n	80048cc <HAL_UART_IRQHandler+0xac>
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00b      	beq.n	80048cc <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2201      	movs	r2, #1
 80048ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c2:	f043 0201 	orr.w	r2, r3, #1
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d010      	beq.n	80048f8 <HAL_UART_IRQHandler+0xd8>
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	f003 0301 	and.w	r3, r3, #1
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00b      	beq.n	80048f8 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2202      	movs	r2, #2
 80048e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ee:	f043 0204 	orr.w	r2, r3, #4
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	f003 0304 	and.w	r3, r3, #4
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d010      	beq.n	8004924 <HAL_UART_IRQHandler+0x104>
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f003 0301 	and.w	r3, r3, #1
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00b      	beq.n	8004924 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2204      	movs	r2, #4
 8004912:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800491a:	f043 0202 	orr.w	r2, r3, #2
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	f003 0308 	and.w	r3, r3, #8
 800492a:	2b00      	cmp	r3, #0
 800492c:	d015      	beq.n	800495a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	f003 0320 	and.w	r3, r3, #32
 8004934:	2b00      	cmp	r3, #0
 8004936:	d104      	bne.n	8004942 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004938:	697a      	ldr	r2, [r7, #20]
 800493a:	4b76      	ldr	r3, [pc, #472]	; (8004b14 <HAL_UART_IRQHandler+0x2f4>)
 800493c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00b      	beq.n	800495a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2208      	movs	r2, #8
 8004948:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004950:	f043 0208 	orr.w	r2, r3, #8
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004960:	2b00      	cmp	r3, #0
 8004962:	d011      	beq.n	8004988 <HAL_UART_IRQHandler+0x168>
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00c      	beq.n	8004988 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004976:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800497e:	f043 0220 	orr.w	r2, r3, #32
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800498e:	2b00      	cmp	r3, #0
 8004990:	f000 80b9 	beq.w	8004b06 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	f003 0320 	and.w	r3, r3, #32
 800499a:	2b00      	cmp	r3, #0
 800499c:	d011      	beq.n	80049c2 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	f003 0320 	and.w	r3, r3, #32
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d104      	bne.n	80049b2 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d007      	beq.n	80049c2 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d003      	beq.n	80049c2 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d4:	2b40      	cmp	r3, #64	; 0x40
 80049d6:	d004      	beq.n	80049e2 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d031      	beq.n	8004a46 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 ffca 	bl	800597c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f2:	2b40      	cmp	r3, #64	; 0x40
 80049f4:	d123      	bne.n	8004a3e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	689a      	ldr	r2, [r3, #8]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a04:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d013      	beq.n	8004a36 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a12:	4a42      	ldr	r2, [pc, #264]	; (8004b1c <HAL_UART_IRQHandler+0x2fc>)
 8004a14:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7fc fae8 	bl	8000ff0 <HAL_DMA_Abort_IT>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d017      	beq.n	8004a56 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8004a30:	4610      	mov	r0, r2
 8004a32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a34:	e00f      	b.n	8004a56 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 f87c 	bl	8004b34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a3c:	e00b      	b.n	8004a56 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 f878 	bl	8004b34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a44:	e007      	b.n	8004a56 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 f874 	bl	8004b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8004a54:	e057      	b.n	8004b06 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a56:	bf00      	nop
    return;
 8004a58:	e055      	b.n	8004b06 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00d      	beq.n	8004a80 <HAL_UART_IRQHandler+0x260>
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d008      	beq.n	8004a80 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004a76:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 ffd3 	bl	8005a24 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a7e:	e045      	b.n	8004b0c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d012      	beq.n	8004ab0 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d104      	bne.n	8004a9e <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d008      	beq.n	8004ab0 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d031      	beq.n	8004b0a <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	4798      	blx	r3
    }
    return;
 8004aae:	e02c      	b.n	8004b0a <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d008      	beq.n	8004acc <HAL_UART_IRQHandler+0x2ac>
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d003      	beq.n	8004acc <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 ff93 	bl	80059f0 <UART_EndTransmit_IT>
    return;
 8004aca:	e01f      	b.n	8004b0c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d008      	beq.n	8004ae8 <HAL_UART_IRQHandler+0x2c8>
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d003      	beq.n	8004ae8 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 ffb3 	bl	8005a4c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ae6:	e011      	b.n	8004b0c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00c      	beq.n	8004b0c <HAL_UART_IRQHandler+0x2ec>
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	da09      	bge.n	8004b0c <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 ff9d 	bl	8005a38 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004afe:	bf00      	nop
 8004b00:	e004      	b.n	8004b0c <HAL_UART_IRQHandler+0x2ec>
      return;
 8004b02:	bf00      	nop
 8004b04:	e002      	b.n	8004b0c <HAL_UART_IRQHandler+0x2ec>
    return;
 8004b06:	bf00      	nop
 8004b08:	e000      	b.n	8004b0c <HAL_UART_IRQHandler+0x2ec>
    return;
 8004b0a:	bf00      	nop
  }
}
 8004b0c:	3720      	adds	r7, #32
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	10000001 	.word	0x10000001
 8004b18:	04000120 	.word	0x04000120
 8004b1c:	080059c5 	.word	0x080059c5

08004b20 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b48:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004b4c:	b08e      	sub	sp, #56	; 0x38
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b52:	2300      	movs	r3, #0
 8004b54:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689a      	ldr	r2, [r3, #8]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	431a      	orrs	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	431a      	orrs	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	69db      	ldr	r3, [r3, #28]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b76:	4313      	orrs	r3, r2
 8004b78:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	4bc1      	ldr	r3, [pc, #772]	; (8004e88 <UART_SetConfig+0x340>)
 8004b82:	4013      	ands	r3, r2
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	6812      	ldr	r2, [r2, #0]
 8004b88:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004b8a:	430b      	orrs	r3, r1
 8004b8c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	68da      	ldr	r2, [r3, #12]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4ab7      	ldr	r2, [pc, #732]	; (8004e8c <UART_SetConfig+0x344>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d004      	beq.n	8004bbe <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a1b      	ldr	r3, [r3, #32]
 8004bb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	689a      	ldr	r2, [r3, #8]
 8004bc4:	4bb2      	ldr	r3, [pc, #712]	; (8004e90 <UART_SetConfig+0x348>)
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	6812      	ldr	r2, [r2, #0]
 8004bcc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004bce:	430b      	orrs	r3, r1
 8004bd0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd8:	f023 010f 	bic.w	r1, r3, #15
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	430a      	orrs	r2, r1
 8004be6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4aa9      	ldr	r2, [pc, #676]	; (8004e94 <UART_SetConfig+0x34c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d177      	bne.n	8004ce2 <UART_SetConfig+0x19a>
 8004bf2:	4ba9      	ldr	r3, [pc, #676]	; (8004e98 <UART_SetConfig+0x350>)
 8004bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bfa:	2b28      	cmp	r3, #40	; 0x28
 8004bfc:	d86c      	bhi.n	8004cd8 <UART_SetConfig+0x190>
 8004bfe:	a201      	add	r2, pc, #4	; (adr r2, 8004c04 <UART_SetConfig+0xbc>)
 8004c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c04:	08004ca9 	.word	0x08004ca9
 8004c08:	08004cd9 	.word	0x08004cd9
 8004c0c:	08004cd9 	.word	0x08004cd9
 8004c10:	08004cd9 	.word	0x08004cd9
 8004c14:	08004cd9 	.word	0x08004cd9
 8004c18:	08004cd9 	.word	0x08004cd9
 8004c1c:	08004cd9 	.word	0x08004cd9
 8004c20:	08004cd9 	.word	0x08004cd9
 8004c24:	08004cb1 	.word	0x08004cb1
 8004c28:	08004cd9 	.word	0x08004cd9
 8004c2c:	08004cd9 	.word	0x08004cd9
 8004c30:	08004cd9 	.word	0x08004cd9
 8004c34:	08004cd9 	.word	0x08004cd9
 8004c38:	08004cd9 	.word	0x08004cd9
 8004c3c:	08004cd9 	.word	0x08004cd9
 8004c40:	08004cd9 	.word	0x08004cd9
 8004c44:	08004cb9 	.word	0x08004cb9
 8004c48:	08004cd9 	.word	0x08004cd9
 8004c4c:	08004cd9 	.word	0x08004cd9
 8004c50:	08004cd9 	.word	0x08004cd9
 8004c54:	08004cd9 	.word	0x08004cd9
 8004c58:	08004cd9 	.word	0x08004cd9
 8004c5c:	08004cd9 	.word	0x08004cd9
 8004c60:	08004cd9 	.word	0x08004cd9
 8004c64:	08004cc1 	.word	0x08004cc1
 8004c68:	08004cd9 	.word	0x08004cd9
 8004c6c:	08004cd9 	.word	0x08004cd9
 8004c70:	08004cd9 	.word	0x08004cd9
 8004c74:	08004cd9 	.word	0x08004cd9
 8004c78:	08004cd9 	.word	0x08004cd9
 8004c7c:	08004cd9 	.word	0x08004cd9
 8004c80:	08004cd9 	.word	0x08004cd9
 8004c84:	08004cc9 	.word	0x08004cc9
 8004c88:	08004cd9 	.word	0x08004cd9
 8004c8c:	08004cd9 	.word	0x08004cd9
 8004c90:	08004cd9 	.word	0x08004cd9
 8004c94:	08004cd9 	.word	0x08004cd9
 8004c98:	08004cd9 	.word	0x08004cd9
 8004c9c:	08004cd9 	.word	0x08004cd9
 8004ca0:	08004cd9 	.word	0x08004cd9
 8004ca4:	08004cd1 	.word	0x08004cd1
 8004ca8:	2301      	movs	r3, #1
 8004caa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cae:	e233      	b.n	8005118 <UART_SetConfig+0x5d0>
 8004cb0:	2304      	movs	r3, #4
 8004cb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cb6:	e22f      	b.n	8005118 <UART_SetConfig+0x5d0>
 8004cb8:	2308      	movs	r3, #8
 8004cba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cbe:	e22b      	b.n	8005118 <UART_SetConfig+0x5d0>
 8004cc0:	2310      	movs	r3, #16
 8004cc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cc6:	e227      	b.n	8005118 <UART_SetConfig+0x5d0>
 8004cc8:	2320      	movs	r3, #32
 8004cca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cce:	e223      	b.n	8005118 <UART_SetConfig+0x5d0>
 8004cd0:	2340      	movs	r3, #64	; 0x40
 8004cd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cd6:	e21f      	b.n	8005118 <UART_SetConfig+0x5d0>
 8004cd8:	2380      	movs	r3, #128	; 0x80
 8004cda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cde:	bf00      	nop
 8004ce0:	e21a      	b.n	8005118 <UART_SetConfig+0x5d0>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a6d      	ldr	r2, [pc, #436]	; (8004e9c <UART_SetConfig+0x354>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d132      	bne.n	8004d52 <UART_SetConfig+0x20a>
 8004cec:	4b6a      	ldr	r3, [pc, #424]	; (8004e98 <UART_SetConfig+0x350>)
 8004cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf0:	f003 0307 	and.w	r3, r3, #7
 8004cf4:	2b05      	cmp	r3, #5
 8004cf6:	d827      	bhi.n	8004d48 <UART_SetConfig+0x200>
 8004cf8:	a201      	add	r2, pc, #4	; (adr r2, 8004d00 <UART_SetConfig+0x1b8>)
 8004cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfe:	bf00      	nop
 8004d00:	08004d19 	.word	0x08004d19
 8004d04:	08004d21 	.word	0x08004d21
 8004d08:	08004d29 	.word	0x08004d29
 8004d0c:	08004d31 	.word	0x08004d31
 8004d10:	08004d39 	.word	0x08004d39
 8004d14:	08004d41 	.word	0x08004d41
 8004d18:	2300      	movs	r3, #0
 8004d1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d1e:	e1fb      	b.n	8005118 <UART_SetConfig+0x5d0>
 8004d20:	2304      	movs	r3, #4
 8004d22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d26:	e1f7      	b.n	8005118 <UART_SetConfig+0x5d0>
 8004d28:	2308      	movs	r3, #8
 8004d2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d2e:	e1f3      	b.n	8005118 <UART_SetConfig+0x5d0>
 8004d30:	2310      	movs	r3, #16
 8004d32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d36:	e1ef      	b.n	8005118 <UART_SetConfig+0x5d0>
 8004d38:	2320      	movs	r3, #32
 8004d3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d3e:	e1eb      	b.n	8005118 <UART_SetConfig+0x5d0>
 8004d40:	2340      	movs	r3, #64	; 0x40
 8004d42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d46:	e1e7      	b.n	8005118 <UART_SetConfig+0x5d0>
 8004d48:	2380      	movs	r3, #128	; 0x80
 8004d4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d4e:	bf00      	nop
 8004d50:	e1e2      	b.n	8005118 <UART_SetConfig+0x5d0>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a52      	ldr	r2, [pc, #328]	; (8004ea0 <UART_SetConfig+0x358>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d132      	bne.n	8004dc2 <UART_SetConfig+0x27a>
 8004d5c:	4b4e      	ldr	r3, [pc, #312]	; (8004e98 <UART_SetConfig+0x350>)
 8004d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d60:	f003 0307 	and.w	r3, r3, #7
 8004d64:	2b05      	cmp	r3, #5
 8004d66:	d827      	bhi.n	8004db8 <UART_SetConfig+0x270>
 8004d68:	a201      	add	r2, pc, #4	; (adr r2, 8004d70 <UART_SetConfig+0x228>)
 8004d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d6e:	bf00      	nop
 8004d70:	08004d89 	.word	0x08004d89
 8004d74:	08004d91 	.word	0x08004d91
 8004d78:	08004d99 	.word	0x08004d99
 8004d7c:	08004da1 	.word	0x08004da1
 8004d80:	08004da9 	.word	0x08004da9
 8004d84:	08004db1 	.word	0x08004db1
 8004d88:	2300      	movs	r3, #0
 8004d8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d8e:	e1c3      	b.n	8005118 <UART_SetConfig+0x5d0>
 8004d90:	2304      	movs	r3, #4
 8004d92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d96:	e1bf      	b.n	8005118 <UART_SetConfig+0x5d0>
 8004d98:	2308      	movs	r3, #8
 8004d9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d9e:	e1bb      	b.n	8005118 <UART_SetConfig+0x5d0>
 8004da0:	2310      	movs	r3, #16
 8004da2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004da6:	e1b7      	b.n	8005118 <UART_SetConfig+0x5d0>
 8004da8:	2320      	movs	r3, #32
 8004daa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004dae:	e1b3      	b.n	8005118 <UART_SetConfig+0x5d0>
 8004db0:	2340      	movs	r3, #64	; 0x40
 8004db2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004db6:	e1af      	b.n	8005118 <UART_SetConfig+0x5d0>
 8004db8:	2380      	movs	r3, #128	; 0x80
 8004dba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004dbe:	bf00      	nop
 8004dc0:	e1aa      	b.n	8005118 <UART_SetConfig+0x5d0>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a37      	ldr	r2, [pc, #220]	; (8004ea4 <UART_SetConfig+0x35c>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d132      	bne.n	8004e32 <UART_SetConfig+0x2ea>
 8004dcc:	4b32      	ldr	r3, [pc, #200]	; (8004e98 <UART_SetConfig+0x350>)
 8004dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dd0:	f003 0307 	and.w	r3, r3, #7
 8004dd4:	2b05      	cmp	r3, #5
 8004dd6:	d827      	bhi.n	8004e28 <UART_SetConfig+0x2e0>
 8004dd8:	a201      	add	r2, pc, #4	; (adr r2, 8004de0 <UART_SetConfig+0x298>)
 8004dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dde:	bf00      	nop
 8004de0:	08004df9 	.word	0x08004df9
 8004de4:	08004e01 	.word	0x08004e01
 8004de8:	08004e09 	.word	0x08004e09
 8004dec:	08004e11 	.word	0x08004e11
 8004df0:	08004e19 	.word	0x08004e19
 8004df4:	08004e21 	.word	0x08004e21
 8004df8:	2300      	movs	r3, #0
 8004dfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004dfe:	e18b      	b.n	8005118 <UART_SetConfig+0x5d0>
 8004e00:	2304      	movs	r3, #4
 8004e02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e06:	e187      	b.n	8005118 <UART_SetConfig+0x5d0>
 8004e08:	2308      	movs	r3, #8
 8004e0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e0e:	e183      	b.n	8005118 <UART_SetConfig+0x5d0>
 8004e10:	2310      	movs	r3, #16
 8004e12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e16:	e17f      	b.n	8005118 <UART_SetConfig+0x5d0>
 8004e18:	2320      	movs	r3, #32
 8004e1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e1e:	e17b      	b.n	8005118 <UART_SetConfig+0x5d0>
 8004e20:	2340      	movs	r3, #64	; 0x40
 8004e22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e26:	e177      	b.n	8005118 <UART_SetConfig+0x5d0>
 8004e28:	2380      	movs	r3, #128	; 0x80
 8004e2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e2e:	bf00      	nop
 8004e30:	e172      	b.n	8005118 <UART_SetConfig+0x5d0>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a1c      	ldr	r2, [pc, #112]	; (8004ea8 <UART_SetConfig+0x360>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d144      	bne.n	8004ec6 <UART_SetConfig+0x37e>
 8004e3c:	4b16      	ldr	r3, [pc, #88]	; (8004e98 <UART_SetConfig+0x350>)
 8004e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e40:	f003 0307 	and.w	r3, r3, #7
 8004e44:	2b05      	cmp	r3, #5
 8004e46:	d839      	bhi.n	8004ebc <UART_SetConfig+0x374>
 8004e48:	a201      	add	r2, pc, #4	; (adr r2, 8004e50 <UART_SetConfig+0x308>)
 8004e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e4e:	bf00      	nop
 8004e50:	08004e69 	.word	0x08004e69
 8004e54:	08004e71 	.word	0x08004e71
 8004e58:	08004e79 	.word	0x08004e79
 8004e5c:	08004e81 	.word	0x08004e81
 8004e60:	08004ead 	.word	0x08004ead
 8004e64:	08004eb5 	.word	0x08004eb5
 8004e68:	2300      	movs	r3, #0
 8004e6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e6e:	e153      	b.n	8005118 <UART_SetConfig+0x5d0>
 8004e70:	2304      	movs	r3, #4
 8004e72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e76:	e14f      	b.n	8005118 <UART_SetConfig+0x5d0>
 8004e78:	2308      	movs	r3, #8
 8004e7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e7e:	e14b      	b.n	8005118 <UART_SetConfig+0x5d0>
 8004e80:	2310      	movs	r3, #16
 8004e82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e86:	e147      	b.n	8005118 <UART_SetConfig+0x5d0>
 8004e88:	cfff69f3 	.word	0xcfff69f3
 8004e8c:	58000c00 	.word	0x58000c00
 8004e90:	11fff4ff 	.word	0x11fff4ff
 8004e94:	40011000 	.word	0x40011000
 8004e98:	58024400 	.word	0x58024400
 8004e9c:	40004400 	.word	0x40004400
 8004ea0:	40004800 	.word	0x40004800
 8004ea4:	40004c00 	.word	0x40004c00
 8004ea8:	40005000 	.word	0x40005000
 8004eac:	2320      	movs	r3, #32
 8004eae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004eb2:	e131      	b.n	8005118 <UART_SetConfig+0x5d0>
 8004eb4:	2340      	movs	r3, #64	; 0x40
 8004eb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004eba:	e12d      	b.n	8005118 <UART_SetConfig+0x5d0>
 8004ebc:	2380      	movs	r3, #128	; 0x80
 8004ebe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ec2:	bf00      	nop
 8004ec4:	e128      	b.n	8005118 <UART_SetConfig+0x5d0>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4ab6      	ldr	r2, [pc, #728]	; (80051a4 <UART_SetConfig+0x65c>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d178      	bne.n	8004fc2 <UART_SetConfig+0x47a>
 8004ed0:	4bb5      	ldr	r3, [pc, #724]	; (80051a8 <UART_SetConfig+0x660>)
 8004ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ed8:	2b28      	cmp	r3, #40	; 0x28
 8004eda:	d86d      	bhi.n	8004fb8 <UART_SetConfig+0x470>
 8004edc:	a201      	add	r2, pc, #4	; (adr r2, 8004ee4 <UART_SetConfig+0x39c>)
 8004ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee2:	bf00      	nop
 8004ee4:	08004f89 	.word	0x08004f89
 8004ee8:	08004fb9 	.word	0x08004fb9
 8004eec:	08004fb9 	.word	0x08004fb9
 8004ef0:	08004fb9 	.word	0x08004fb9
 8004ef4:	08004fb9 	.word	0x08004fb9
 8004ef8:	08004fb9 	.word	0x08004fb9
 8004efc:	08004fb9 	.word	0x08004fb9
 8004f00:	08004fb9 	.word	0x08004fb9
 8004f04:	08004f91 	.word	0x08004f91
 8004f08:	08004fb9 	.word	0x08004fb9
 8004f0c:	08004fb9 	.word	0x08004fb9
 8004f10:	08004fb9 	.word	0x08004fb9
 8004f14:	08004fb9 	.word	0x08004fb9
 8004f18:	08004fb9 	.word	0x08004fb9
 8004f1c:	08004fb9 	.word	0x08004fb9
 8004f20:	08004fb9 	.word	0x08004fb9
 8004f24:	08004f99 	.word	0x08004f99
 8004f28:	08004fb9 	.word	0x08004fb9
 8004f2c:	08004fb9 	.word	0x08004fb9
 8004f30:	08004fb9 	.word	0x08004fb9
 8004f34:	08004fb9 	.word	0x08004fb9
 8004f38:	08004fb9 	.word	0x08004fb9
 8004f3c:	08004fb9 	.word	0x08004fb9
 8004f40:	08004fb9 	.word	0x08004fb9
 8004f44:	08004fa1 	.word	0x08004fa1
 8004f48:	08004fb9 	.word	0x08004fb9
 8004f4c:	08004fb9 	.word	0x08004fb9
 8004f50:	08004fb9 	.word	0x08004fb9
 8004f54:	08004fb9 	.word	0x08004fb9
 8004f58:	08004fb9 	.word	0x08004fb9
 8004f5c:	08004fb9 	.word	0x08004fb9
 8004f60:	08004fb9 	.word	0x08004fb9
 8004f64:	08004fa9 	.word	0x08004fa9
 8004f68:	08004fb9 	.word	0x08004fb9
 8004f6c:	08004fb9 	.word	0x08004fb9
 8004f70:	08004fb9 	.word	0x08004fb9
 8004f74:	08004fb9 	.word	0x08004fb9
 8004f78:	08004fb9 	.word	0x08004fb9
 8004f7c:	08004fb9 	.word	0x08004fb9
 8004f80:	08004fb9 	.word	0x08004fb9
 8004f84:	08004fb1 	.word	0x08004fb1
 8004f88:	2301      	movs	r3, #1
 8004f8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f8e:	e0c3      	b.n	8005118 <UART_SetConfig+0x5d0>
 8004f90:	2304      	movs	r3, #4
 8004f92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f96:	e0bf      	b.n	8005118 <UART_SetConfig+0x5d0>
 8004f98:	2308      	movs	r3, #8
 8004f9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f9e:	e0bb      	b.n	8005118 <UART_SetConfig+0x5d0>
 8004fa0:	2310      	movs	r3, #16
 8004fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fa6:	e0b7      	b.n	8005118 <UART_SetConfig+0x5d0>
 8004fa8:	2320      	movs	r3, #32
 8004faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fae:	e0b3      	b.n	8005118 <UART_SetConfig+0x5d0>
 8004fb0:	2340      	movs	r3, #64	; 0x40
 8004fb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fb6:	e0af      	b.n	8005118 <UART_SetConfig+0x5d0>
 8004fb8:	2380      	movs	r3, #128	; 0x80
 8004fba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fbe:	bf00      	nop
 8004fc0:	e0aa      	b.n	8005118 <UART_SetConfig+0x5d0>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a79      	ldr	r2, [pc, #484]	; (80051ac <UART_SetConfig+0x664>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d132      	bne.n	8005032 <UART_SetConfig+0x4ea>
 8004fcc:	4b76      	ldr	r3, [pc, #472]	; (80051a8 <UART_SetConfig+0x660>)
 8004fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd0:	f003 0307 	and.w	r3, r3, #7
 8004fd4:	2b05      	cmp	r3, #5
 8004fd6:	d827      	bhi.n	8005028 <UART_SetConfig+0x4e0>
 8004fd8:	a201      	add	r2, pc, #4	; (adr r2, 8004fe0 <UART_SetConfig+0x498>)
 8004fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fde:	bf00      	nop
 8004fe0:	08004ff9 	.word	0x08004ff9
 8004fe4:	08005001 	.word	0x08005001
 8004fe8:	08005009 	.word	0x08005009
 8004fec:	08005011 	.word	0x08005011
 8004ff0:	08005019 	.word	0x08005019
 8004ff4:	08005021 	.word	0x08005021
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ffe:	e08b      	b.n	8005118 <UART_SetConfig+0x5d0>
 8005000:	2304      	movs	r3, #4
 8005002:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005006:	e087      	b.n	8005118 <UART_SetConfig+0x5d0>
 8005008:	2308      	movs	r3, #8
 800500a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800500e:	e083      	b.n	8005118 <UART_SetConfig+0x5d0>
 8005010:	2310      	movs	r3, #16
 8005012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005016:	e07f      	b.n	8005118 <UART_SetConfig+0x5d0>
 8005018:	2320      	movs	r3, #32
 800501a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800501e:	e07b      	b.n	8005118 <UART_SetConfig+0x5d0>
 8005020:	2340      	movs	r3, #64	; 0x40
 8005022:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005026:	e077      	b.n	8005118 <UART_SetConfig+0x5d0>
 8005028:	2380      	movs	r3, #128	; 0x80
 800502a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800502e:	bf00      	nop
 8005030:	e072      	b.n	8005118 <UART_SetConfig+0x5d0>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a5e      	ldr	r2, [pc, #376]	; (80051b0 <UART_SetConfig+0x668>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d132      	bne.n	80050a2 <UART_SetConfig+0x55a>
 800503c:	4b5a      	ldr	r3, [pc, #360]	; (80051a8 <UART_SetConfig+0x660>)
 800503e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005040:	f003 0307 	and.w	r3, r3, #7
 8005044:	2b05      	cmp	r3, #5
 8005046:	d827      	bhi.n	8005098 <UART_SetConfig+0x550>
 8005048:	a201      	add	r2, pc, #4	; (adr r2, 8005050 <UART_SetConfig+0x508>)
 800504a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800504e:	bf00      	nop
 8005050:	08005069 	.word	0x08005069
 8005054:	08005071 	.word	0x08005071
 8005058:	08005079 	.word	0x08005079
 800505c:	08005081 	.word	0x08005081
 8005060:	08005089 	.word	0x08005089
 8005064:	08005091 	.word	0x08005091
 8005068:	2300      	movs	r3, #0
 800506a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800506e:	e053      	b.n	8005118 <UART_SetConfig+0x5d0>
 8005070:	2304      	movs	r3, #4
 8005072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005076:	e04f      	b.n	8005118 <UART_SetConfig+0x5d0>
 8005078:	2308      	movs	r3, #8
 800507a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800507e:	e04b      	b.n	8005118 <UART_SetConfig+0x5d0>
 8005080:	2310      	movs	r3, #16
 8005082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005086:	e047      	b.n	8005118 <UART_SetConfig+0x5d0>
 8005088:	2320      	movs	r3, #32
 800508a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800508e:	e043      	b.n	8005118 <UART_SetConfig+0x5d0>
 8005090:	2340      	movs	r3, #64	; 0x40
 8005092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005096:	e03f      	b.n	8005118 <UART_SetConfig+0x5d0>
 8005098:	2380      	movs	r3, #128	; 0x80
 800509a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800509e:	bf00      	nop
 80050a0:	e03a      	b.n	8005118 <UART_SetConfig+0x5d0>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a43      	ldr	r2, [pc, #268]	; (80051b4 <UART_SetConfig+0x66c>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d132      	bne.n	8005112 <UART_SetConfig+0x5ca>
 80050ac:	4b3e      	ldr	r3, [pc, #248]	; (80051a8 <UART_SetConfig+0x660>)
 80050ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b0:	f003 0307 	and.w	r3, r3, #7
 80050b4:	2b05      	cmp	r3, #5
 80050b6:	d827      	bhi.n	8005108 <UART_SetConfig+0x5c0>
 80050b8:	a201      	add	r2, pc, #4	; (adr r2, 80050c0 <UART_SetConfig+0x578>)
 80050ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050be:	bf00      	nop
 80050c0:	080050d9 	.word	0x080050d9
 80050c4:	080050e1 	.word	0x080050e1
 80050c8:	080050e9 	.word	0x080050e9
 80050cc:	080050f1 	.word	0x080050f1
 80050d0:	080050f9 	.word	0x080050f9
 80050d4:	08005101 	.word	0x08005101
 80050d8:	2302      	movs	r3, #2
 80050da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050de:	e01b      	b.n	8005118 <UART_SetConfig+0x5d0>
 80050e0:	2304      	movs	r3, #4
 80050e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050e6:	e017      	b.n	8005118 <UART_SetConfig+0x5d0>
 80050e8:	2308      	movs	r3, #8
 80050ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050ee:	e013      	b.n	8005118 <UART_SetConfig+0x5d0>
 80050f0:	2310      	movs	r3, #16
 80050f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050f6:	e00f      	b.n	8005118 <UART_SetConfig+0x5d0>
 80050f8:	2320      	movs	r3, #32
 80050fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050fe:	e00b      	b.n	8005118 <UART_SetConfig+0x5d0>
 8005100:	2340      	movs	r3, #64	; 0x40
 8005102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005106:	e007      	b.n	8005118 <UART_SetConfig+0x5d0>
 8005108:	2380      	movs	r3, #128	; 0x80
 800510a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800510e:	bf00      	nop
 8005110:	e002      	b.n	8005118 <UART_SetConfig+0x5d0>
 8005112:	2380      	movs	r3, #128	; 0x80
 8005114:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a25      	ldr	r2, [pc, #148]	; (80051b4 <UART_SetConfig+0x66c>)
 800511e:	4293      	cmp	r3, r2
 8005120:	f040 80b8 	bne.w	8005294 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005124:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005128:	2b08      	cmp	r3, #8
 800512a:	d019      	beq.n	8005160 <UART_SetConfig+0x618>
 800512c:	2b08      	cmp	r3, #8
 800512e:	dc04      	bgt.n	800513a <UART_SetConfig+0x5f2>
 8005130:	2b02      	cmp	r3, #2
 8005132:	d009      	beq.n	8005148 <UART_SetConfig+0x600>
 8005134:	2b04      	cmp	r3, #4
 8005136:	d00b      	beq.n	8005150 <UART_SetConfig+0x608>
 8005138:	e042      	b.n	80051c0 <UART_SetConfig+0x678>
 800513a:	2b20      	cmp	r3, #32
 800513c:	d02b      	beq.n	8005196 <UART_SetConfig+0x64e>
 800513e:	2b40      	cmp	r3, #64	; 0x40
 8005140:	d02c      	beq.n	800519c <UART_SetConfig+0x654>
 8005142:	2b10      	cmp	r3, #16
 8005144:	d014      	beq.n	8005170 <UART_SetConfig+0x628>
 8005146:	e03b      	b.n	80051c0 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005148:	f7ff f86c 	bl	8004224 <HAL_RCCEx_GetD3PCLK1Freq>
 800514c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800514e:	e03d      	b.n	80051cc <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005150:	f107 0314 	add.w	r3, r7, #20
 8005154:	4618      	mov	r0, r3
 8005156:	f7ff f87b 	bl	8004250 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800515e:	e035      	b.n	80051cc <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005160:	f107 0308 	add.w	r3, r7, #8
 8005164:	4618      	mov	r0, r3
 8005166:	f7ff f9bf 	bl	80044e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800516e:	e02d      	b.n	80051cc <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005170:	4b0d      	ldr	r3, [pc, #52]	; (80051a8 <UART_SetConfig+0x660>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0320 	and.w	r3, r3, #32
 8005178:	2b00      	cmp	r3, #0
 800517a:	d009      	beq.n	8005190 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800517c:	4b0a      	ldr	r3, [pc, #40]	; (80051a8 <UART_SetConfig+0x660>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	08db      	lsrs	r3, r3, #3
 8005182:	f003 0303 	and.w	r3, r3, #3
 8005186:	4a0c      	ldr	r2, [pc, #48]	; (80051b8 <UART_SetConfig+0x670>)
 8005188:	fa22 f303 	lsr.w	r3, r2, r3
 800518c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800518e:	e01d      	b.n	80051cc <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8005190:	4b09      	ldr	r3, [pc, #36]	; (80051b8 <UART_SetConfig+0x670>)
 8005192:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005194:	e01a      	b.n	80051cc <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005196:	4b09      	ldr	r3, [pc, #36]	; (80051bc <UART_SetConfig+0x674>)
 8005198:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800519a:	e017      	b.n	80051cc <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800519c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80051a2:	e013      	b.n	80051cc <UART_SetConfig+0x684>
 80051a4:	40011400 	.word	0x40011400
 80051a8:	58024400 	.word	0x58024400
 80051ac:	40007800 	.word	0x40007800
 80051b0:	40007c00 	.word	0x40007c00
 80051b4:	58000c00 	.word	0x58000c00
 80051b8:	03d09000 	.word	0x03d09000
 80051bc:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80051c0:	2300      	movs	r3, #0
 80051c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80051ca:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	f000 824d 	beq.w	800566e <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d8:	4aad      	ldr	r2, [pc, #692]	; (8005490 <UART_SetConfig+0x948>)
 80051da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051de:	461a      	mov	r2, r3
 80051e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80051e6:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685a      	ldr	r2, [r3, #4]
 80051ec:	4613      	mov	r3, r2
 80051ee:	005b      	lsls	r3, r3, #1
 80051f0:	4413      	add	r3, r2
 80051f2:	6a3a      	ldr	r2, [r7, #32]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d305      	bcc.n	8005204 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051fe:	6a3a      	ldr	r2, [r7, #32]
 8005200:	429a      	cmp	r2, r3
 8005202:	d903      	bls.n	800520c <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800520a:	e230      	b.n	800566e <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800520c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800520e:	4618      	mov	r0, r3
 8005210:	f04f 0100 	mov.w	r1, #0
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	4a9d      	ldr	r2, [pc, #628]	; (8005490 <UART_SetConfig+0x948>)
 800521a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800521e:	b29b      	uxth	r3, r3
 8005220:	f04f 0400 	mov.w	r4, #0
 8005224:	461a      	mov	r2, r3
 8005226:	4623      	mov	r3, r4
 8005228:	f7fb f856 	bl	80002d8 <__aeabi_uldivmod>
 800522c:	4603      	mov	r3, r0
 800522e:	460c      	mov	r4, r1
 8005230:	4619      	mov	r1, r3
 8005232:	4622      	mov	r2, r4
 8005234:	f04f 0300 	mov.w	r3, #0
 8005238:	f04f 0400 	mov.w	r4, #0
 800523c:	0214      	lsls	r4, r2, #8
 800523e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005242:	020b      	lsls	r3, r1, #8
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	6852      	ldr	r2, [r2, #4]
 8005248:	0852      	lsrs	r2, r2, #1
 800524a:	4611      	mov	r1, r2
 800524c:	f04f 0200 	mov.w	r2, #0
 8005250:	eb13 0b01 	adds.w	fp, r3, r1
 8005254:	eb44 0c02 	adc.w	ip, r4, r2
 8005258:	4658      	mov	r0, fp
 800525a:	4661      	mov	r1, ip
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f04f 0400 	mov.w	r4, #0
 8005264:	461a      	mov	r2, r3
 8005266:	4623      	mov	r3, r4
 8005268:	f7fb f836 	bl	80002d8 <__aeabi_uldivmod>
 800526c:	4603      	mov	r3, r0
 800526e:	460c      	mov	r4, r1
 8005270:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005274:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005278:	d308      	bcc.n	800528c <UART_SetConfig+0x744>
 800527a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005280:	d204      	bcs.n	800528c <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005288:	60da      	str	r2, [r3, #12]
 800528a:	e1f0      	b.n	800566e <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005292:	e1ec      	b.n	800566e <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	69db      	ldr	r3, [r3, #28]
 8005298:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800529c:	f040 8100 	bne.w	80054a0 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 80052a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80052a4:	2b40      	cmp	r3, #64	; 0x40
 80052a6:	f200 80b7 	bhi.w	8005418 <UART_SetConfig+0x8d0>
 80052aa:	a201      	add	r2, pc, #4	; (adr r2, 80052b0 <UART_SetConfig+0x768>)
 80052ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b0:	080053b5 	.word	0x080053b5
 80052b4:	080053bd 	.word	0x080053bd
 80052b8:	08005419 	.word	0x08005419
 80052bc:	08005419 	.word	0x08005419
 80052c0:	080053c5 	.word	0x080053c5
 80052c4:	08005419 	.word	0x08005419
 80052c8:	08005419 	.word	0x08005419
 80052cc:	08005419 	.word	0x08005419
 80052d0:	080053d5 	.word	0x080053d5
 80052d4:	08005419 	.word	0x08005419
 80052d8:	08005419 	.word	0x08005419
 80052dc:	08005419 	.word	0x08005419
 80052e0:	08005419 	.word	0x08005419
 80052e4:	08005419 	.word	0x08005419
 80052e8:	08005419 	.word	0x08005419
 80052ec:	08005419 	.word	0x08005419
 80052f0:	080053e5 	.word	0x080053e5
 80052f4:	08005419 	.word	0x08005419
 80052f8:	08005419 	.word	0x08005419
 80052fc:	08005419 	.word	0x08005419
 8005300:	08005419 	.word	0x08005419
 8005304:	08005419 	.word	0x08005419
 8005308:	08005419 	.word	0x08005419
 800530c:	08005419 	.word	0x08005419
 8005310:	08005419 	.word	0x08005419
 8005314:	08005419 	.word	0x08005419
 8005318:	08005419 	.word	0x08005419
 800531c:	08005419 	.word	0x08005419
 8005320:	08005419 	.word	0x08005419
 8005324:	08005419 	.word	0x08005419
 8005328:	08005419 	.word	0x08005419
 800532c:	08005419 	.word	0x08005419
 8005330:	0800540b 	.word	0x0800540b
 8005334:	08005419 	.word	0x08005419
 8005338:	08005419 	.word	0x08005419
 800533c:	08005419 	.word	0x08005419
 8005340:	08005419 	.word	0x08005419
 8005344:	08005419 	.word	0x08005419
 8005348:	08005419 	.word	0x08005419
 800534c:	08005419 	.word	0x08005419
 8005350:	08005419 	.word	0x08005419
 8005354:	08005419 	.word	0x08005419
 8005358:	08005419 	.word	0x08005419
 800535c:	08005419 	.word	0x08005419
 8005360:	08005419 	.word	0x08005419
 8005364:	08005419 	.word	0x08005419
 8005368:	08005419 	.word	0x08005419
 800536c:	08005419 	.word	0x08005419
 8005370:	08005419 	.word	0x08005419
 8005374:	08005419 	.word	0x08005419
 8005378:	08005419 	.word	0x08005419
 800537c:	08005419 	.word	0x08005419
 8005380:	08005419 	.word	0x08005419
 8005384:	08005419 	.word	0x08005419
 8005388:	08005419 	.word	0x08005419
 800538c:	08005419 	.word	0x08005419
 8005390:	08005419 	.word	0x08005419
 8005394:	08005419 	.word	0x08005419
 8005398:	08005419 	.word	0x08005419
 800539c:	08005419 	.word	0x08005419
 80053a0:	08005419 	.word	0x08005419
 80053a4:	08005419 	.word	0x08005419
 80053a8:	08005419 	.word	0x08005419
 80053ac:	08005419 	.word	0x08005419
 80053b0:	08005411 	.word	0x08005411
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053b4:	f7fe ff0a 	bl	80041cc <HAL_RCC_GetPCLK1Freq>
 80053b8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80053ba:	e033      	b.n	8005424 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053bc:	f7fe ff1c 	bl	80041f8 <HAL_RCC_GetPCLK2Freq>
 80053c0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80053c2:	e02f      	b.n	8005424 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053c4:	f107 0314 	add.w	r3, r7, #20
 80053c8:	4618      	mov	r0, r3
 80053ca:	f7fe ff41 	bl	8004250 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80053d2:	e027      	b.n	8005424 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053d4:	f107 0308 	add.w	r3, r7, #8
 80053d8:	4618      	mov	r0, r3
 80053da:	f7ff f885 	bl	80044e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80053e2:	e01f      	b.n	8005424 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053e4:	4b2b      	ldr	r3, [pc, #172]	; (8005494 <UART_SetConfig+0x94c>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0320 	and.w	r3, r3, #32
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d009      	beq.n	8005404 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80053f0:	4b28      	ldr	r3, [pc, #160]	; (8005494 <UART_SetConfig+0x94c>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	08db      	lsrs	r3, r3, #3
 80053f6:	f003 0303 	and.w	r3, r3, #3
 80053fa:	4a27      	ldr	r2, [pc, #156]	; (8005498 <UART_SetConfig+0x950>)
 80053fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005400:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005402:	e00f      	b.n	8005424 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8005404:	4b24      	ldr	r3, [pc, #144]	; (8005498 <UART_SetConfig+0x950>)
 8005406:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005408:	e00c      	b.n	8005424 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800540a:	4b24      	ldr	r3, [pc, #144]	; (800549c <UART_SetConfig+0x954>)
 800540c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800540e:	e009      	b.n	8005424 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005410:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005414:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005416:	e005      	b.n	8005424 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8005418:	2300      	movs	r3, #0
 800541a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005422:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005426:	2b00      	cmp	r3, #0
 8005428:	f000 8121 	beq.w	800566e <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005430:	4a17      	ldr	r2, [pc, #92]	; (8005490 <UART_SetConfig+0x948>)
 8005432:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005436:	461a      	mov	r2, r3
 8005438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543a:	fbb3 f3f2 	udiv	r3, r3, r2
 800543e:	005a      	lsls	r2, r3, #1
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	085b      	lsrs	r3, r3, #1
 8005446:	441a      	add	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005450:	b29b      	uxth	r3, r3
 8005452:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005456:	2b0f      	cmp	r3, #15
 8005458:	d916      	bls.n	8005488 <UART_SetConfig+0x940>
 800545a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005460:	d212      	bcs.n	8005488 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005464:	b29b      	uxth	r3, r3
 8005466:	f023 030f 	bic.w	r3, r3, #15
 800546a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800546c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546e:	085b      	lsrs	r3, r3, #1
 8005470:	b29b      	uxth	r3, r3
 8005472:	f003 0307 	and.w	r3, r3, #7
 8005476:	b29a      	uxth	r2, r3
 8005478:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800547a:	4313      	orrs	r3, r2
 800547c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005484:	60da      	str	r2, [r3, #12]
 8005486:	e0f2      	b.n	800566e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800548e:	e0ee      	b.n	800566e <UART_SetConfig+0xb26>
 8005490:	08009648 	.word	0x08009648
 8005494:	58024400 	.word	0x58024400
 8005498:	03d09000 	.word	0x03d09000
 800549c:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 80054a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80054a4:	2b40      	cmp	r3, #64	; 0x40
 80054a6:	f200 80b7 	bhi.w	8005618 <UART_SetConfig+0xad0>
 80054aa:	a201      	add	r2, pc, #4	; (adr r2, 80054b0 <UART_SetConfig+0x968>)
 80054ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b0:	080055b5 	.word	0x080055b5
 80054b4:	080055bd 	.word	0x080055bd
 80054b8:	08005619 	.word	0x08005619
 80054bc:	08005619 	.word	0x08005619
 80054c0:	080055c5 	.word	0x080055c5
 80054c4:	08005619 	.word	0x08005619
 80054c8:	08005619 	.word	0x08005619
 80054cc:	08005619 	.word	0x08005619
 80054d0:	080055d5 	.word	0x080055d5
 80054d4:	08005619 	.word	0x08005619
 80054d8:	08005619 	.word	0x08005619
 80054dc:	08005619 	.word	0x08005619
 80054e0:	08005619 	.word	0x08005619
 80054e4:	08005619 	.word	0x08005619
 80054e8:	08005619 	.word	0x08005619
 80054ec:	08005619 	.word	0x08005619
 80054f0:	080055e5 	.word	0x080055e5
 80054f4:	08005619 	.word	0x08005619
 80054f8:	08005619 	.word	0x08005619
 80054fc:	08005619 	.word	0x08005619
 8005500:	08005619 	.word	0x08005619
 8005504:	08005619 	.word	0x08005619
 8005508:	08005619 	.word	0x08005619
 800550c:	08005619 	.word	0x08005619
 8005510:	08005619 	.word	0x08005619
 8005514:	08005619 	.word	0x08005619
 8005518:	08005619 	.word	0x08005619
 800551c:	08005619 	.word	0x08005619
 8005520:	08005619 	.word	0x08005619
 8005524:	08005619 	.word	0x08005619
 8005528:	08005619 	.word	0x08005619
 800552c:	08005619 	.word	0x08005619
 8005530:	0800560b 	.word	0x0800560b
 8005534:	08005619 	.word	0x08005619
 8005538:	08005619 	.word	0x08005619
 800553c:	08005619 	.word	0x08005619
 8005540:	08005619 	.word	0x08005619
 8005544:	08005619 	.word	0x08005619
 8005548:	08005619 	.word	0x08005619
 800554c:	08005619 	.word	0x08005619
 8005550:	08005619 	.word	0x08005619
 8005554:	08005619 	.word	0x08005619
 8005558:	08005619 	.word	0x08005619
 800555c:	08005619 	.word	0x08005619
 8005560:	08005619 	.word	0x08005619
 8005564:	08005619 	.word	0x08005619
 8005568:	08005619 	.word	0x08005619
 800556c:	08005619 	.word	0x08005619
 8005570:	08005619 	.word	0x08005619
 8005574:	08005619 	.word	0x08005619
 8005578:	08005619 	.word	0x08005619
 800557c:	08005619 	.word	0x08005619
 8005580:	08005619 	.word	0x08005619
 8005584:	08005619 	.word	0x08005619
 8005588:	08005619 	.word	0x08005619
 800558c:	08005619 	.word	0x08005619
 8005590:	08005619 	.word	0x08005619
 8005594:	08005619 	.word	0x08005619
 8005598:	08005619 	.word	0x08005619
 800559c:	08005619 	.word	0x08005619
 80055a0:	08005619 	.word	0x08005619
 80055a4:	08005619 	.word	0x08005619
 80055a8:	08005619 	.word	0x08005619
 80055ac:	08005619 	.word	0x08005619
 80055b0:	08005611 	.word	0x08005611
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055b4:	f7fe fe0a 	bl	80041cc <HAL_RCC_GetPCLK1Freq>
 80055b8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80055ba:	e033      	b.n	8005624 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055bc:	f7fe fe1c 	bl	80041f8 <HAL_RCC_GetPCLK2Freq>
 80055c0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80055c2:	e02f      	b.n	8005624 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055c4:	f107 0314 	add.w	r3, r7, #20
 80055c8:	4618      	mov	r0, r3
 80055ca:	f7fe fe41 	bl	8004250 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80055d2:	e027      	b.n	8005624 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055d4:	f107 0308 	add.w	r3, r7, #8
 80055d8:	4618      	mov	r0, r3
 80055da:	f7fe ff85 	bl	80044e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80055e2:	e01f      	b.n	8005624 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055e4:	4b2c      	ldr	r3, [pc, #176]	; (8005698 <UART_SetConfig+0xb50>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0320 	and.w	r3, r3, #32
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d009      	beq.n	8005604 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80055f0:	4b29      	ldr	r3, [pc, #164]	; (8005698 <UART_SetConfig+0xb50>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	08db      	lsrs	r3, r3, #3
 80055f6:	f003 0303 	and.w	r3, r3, #3
 80055fa:	4a28      	ldr	r2, [pc, #160]	; (800569c <UART_SetConfig+0xb54>)
 80055fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005600:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005602:	e00f      	b.n	8005624 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8005604:	4b25      	ldr	r3, [pc, #148]	; (800569c <UART_SetConfig+0xb54>)
 8005606:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005608:	e00c      	b.n	8005624 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800560a:	4b25      	ldr	r3, [pc, #148]	; (80056a0 <UART_SetConfig+0xb58>)
 800560c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800560e:	e009      	b.n	8005624 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005610:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005614:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005616:	e005      	b.n	8005624 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8005618:	2300      	movs	r3, #0
 800561a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005622:	bf00      	nop
    }

    if (pclk != 0U)
 8005624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005626:	2b00      	cmp	r3, #0
 8005628:	d021      	beq.n	800566e <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562e:	4a1d      	ldr	r2, [pc, #116]	; (80056a4 <UART_SetConfig+0xb5c>)
 8005630:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005634:	461a      	mov	r2, r3
 8005636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005638:	fbb3 f2f2 	udiv	r2, r3, r2
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	085b      	lsrs	r3, r3, #1
 8005642:	441a      	add	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	fbb2 f3f3 	udiv	r3, r2, r3
 800564c:	b29b      	uxth	r3, r3
 800564e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005652:	2b0f      	cmp	r3, #15
 8005654:	d908      	bls.n	8005668 <UART_SetConfig+0xb20>
 8005656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800565c:	d204      	bcs.n	8005668 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005664:	60da      	str	r2, [r3, #12]
 8005666:	e002      	b.n	800566e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2201      	movs	r2, #1
 8005672:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2201      	movs	r2, #1
 800567a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800568a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800568e:	4618      	mov	r0, r3
 8005690:	3738      	adds	r7, #56	; 0x38
 8005692:	46bd      	mov	sp, r7
 8005694:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005698:	58024400 	.word	0x58024400
 800569c:	03d09000 	.word	0x03d09000
 80056a0:	003d0900 	.word	0x003d0900
 80056a4:	08009648 	.word	0x08009648

080056a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b4:	f003 0301 	and.w	r3, r3, #1
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00a      	beq.n	80056d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	430a      	orrs	r2, r1
 80056d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d6:	f003 0302 	and.w	r3, r3, #2
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00a      	beq.n	80056f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	430a      	orrs	r2, r1
 80056f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f8:	f003 0304 	and.w	r3, r3, #4
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00a      	beq.n	8005716 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	430a      	orrs	r2, r1
 8005714:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571a:	f003 0308 	and.w	r3, r3, #8
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00a      	beq.n	8005738 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	430a      	orrs	r2, r1
 8005736:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800573c:	f003 0310 	and.w	r3, r3, #16
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00a      	beq.n	800575a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	430a      	orrs	r2, r1
 8005758:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575e:	f003 0320 	and.w	r3, r3, #32
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00a      	beq.n	800577c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	430a      	orrs	r2, r1
 800577a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005784:	2b00      	cmp	r3, #0
 8005786:	d01a      	beq.n	80057be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	430a      	orrs	r2, r1
 800579c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057a6:	d10a      	bne.n	80057be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	430a      	orrs	r2, r1
 80057bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00a      	beq.n	80057e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	430a      	orrs	r2, r1
 80057de:	605a      	str	r2, [r3, #4]
  }
}
 80057e0:	bf00      	nop
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af02      	add	r7, sp, #8
 80057f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80057fc:	f7fb faae 	bl	8000d5c <HAL_GetTick>
 8005800:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0308 	and.w	r3, r3, #8
 800580c:	2b08      	cmp	r3, #8
 800580e:	d10e      	bne.n	800582e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005810:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005814:	9300      	str	r3, [sp, #0]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 f82c 	bl	800587c <UART_WaitOnFlagUntilTimeout>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d001      	beq.n	800582e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e022      	b.n	8005874 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0304 	and.w	r3, r3, #4
 8005838:	2b04      	cmp	r3, #4
 800583a:	d10e      	bne.n	800585a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800583c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 f816 	bl	800587c <UART_WaitOnFlagUntilTimeout>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d001      	beq.n	800585a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e00c      	b.n	8005874 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2220      	movs	r2, #32
 800585e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2220      	movs	r2, #32
 8005866:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	603b      	str	r3, [r7, #0]
 8005888:	4613      	mov	r3, r2
 800588a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800588c:	e062      	b.n	8005954 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005894:	d05e      	beq.n	8005954 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005896:	f7fb fa61 	bl	8000d5c <HAL_GetTick>
 800589a:	4602      	mov	r2, r0
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	69ba      	ldr	r2, [r7, #24]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d302      	bcc.n	80058ac <UART_WaitOnFlagUntilTimeout+0x30>
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d11d      	bne.n	80058e8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80058ba:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689a      	ldr	r2, [r3, #8]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f022 0201 	bic.w	r2, r2, #1
 80058ca:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2220      	movs	r2, #32
 80058d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2220      	movs	r2, #32
 80058d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e045      	b.n	8005974 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0304 	and.w	r3, r3, #4
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d02e      	beq.n	8005954 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	69db      	ldr	r3, [r3, #28]
 80058fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005900:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005904:	d126      	bne.n	8005954 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800590e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800591e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	689a      	ldr	r2, [r3, #8]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f022 0201 	bic.w	r2, r2, #1
 800592e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2220      	movs	r2, #32
 8005934:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2220      	movs	r2, #32
 800593c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2220      	movs	r2, #32
 8005944:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e00f      	b.n	8005974 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	69da      	ldr	r2, [r3, #28]
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	4013      	ands	r3, r2
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	429a      	cmp	r2, r3
 8005962:	bf0c      	ite	eq
 8005964:	2301      	moveq	r3, #1
 8005966:	2300      	movne	r3, #0
 8005968:	b2db      	uxtb	r3, r3
 800596a:	461a      	mov	r2, r3
 800596c:	79fb      	ldrb	r3, [r7, #7]
 800596e:	429a      	cmp	r2, r3
 8005970:	d08d      	beq.n	800588e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3710      	adds	r7, #16
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005992:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	6899      	ldr	r1, [r3, #8]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	4b08      	ldr	r3, [pc, #32]	; (80059c0 <UART_EndRxTransfer+0x44>)
 80059a0:	400b      	ands	r3, r1
 80059a2:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2220      	movs	r2, #32
 80059a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80059b2:	bf00      	nop
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	effffffe 	.word	0xeffffffe

080059c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f7ff f8a6 	bl	8004b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059e8:	bf00      	nop
 80059ea:	3710      	adds	r7, #16
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a06:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2220      	movs	r2, #32
 8005a0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f7ff f882 	bl	8004b20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a1c:	bf00      	nop
 8005a1e:	3708      	adds	r7, #8
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005a2c:	bf00      	nop
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005a40:	bf00      	nop
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005a54:	bf00      	nop
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d101      	bne.n	8005a76 <HAL_UARTEx_DisableFifoMode+0x16>
 8005a72:	2302      	movs	r3, #2
 8005a74:	e027      	b.n	8005ac6 <HAL_UARTEx_DisableFifoMode+0x66>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2224      	movs	r2, #36	; 0x24
 8005a82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f022 0201 	bic.w	r2, r2, #1
 8005a9c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005aa4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2220      	movs	r2, #32
 8005ab8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3714      	adds	r7, #20
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b084      	sub	sp, #16
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
 8005ada:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d101      	bne.n	8005aea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005ae6:	2302      	movs	r3, #2
 8005ae8:	e02d      	b.n	8005b46 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2224      	movs	r2, #36	; 0x24
 8005af6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f022 0201 	bic.w	r2, r2, #1
 8005b10:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	683a      	ldr	r2, [r7, #0]
 8005b22:	430a      	orrs	r2, r1
 8005b24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 f850 	bl	8005bcc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2220      	movs	r2, #32
 8005b38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3710      	adds	r7, #16
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b084      	sub	sp, #16
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
 8005b56:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d101      	bne.n	8005b66 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005b62:	2302      	movs	r3, #2
 8005b64:	e02d      	b.n	8005bc2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2224      	movs	r2, #36	; 0x24
 8005b72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f022 0201 	bic.w	r2, r2, #1
 8005b8c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	683a      	ldr	r2, [r7, #0]
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 f812 	bl	8005bcc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2220      	movs	r2, #32
 8005bb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3710      	adds	r7, #16
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
	...

08005bcc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b089      	sub	sp, #36	; 0x24
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005bd4:	4a2f      	ldr	r2, [pc, #188]	; (8005c94 <UARTEx_SetNbDataToProcess+0xc8>)
 8005bd6:	f107 0314 	add.w	r3, r7, #20
 8005bda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005bde:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005be2:	4a2d      	ldr	r2, [pc, #180]	; (8005c98 <UARTEx_SetNbDataToProcess+0xcc>)
 8005be4:	f107 030c 	add.w	r3, r7, #12
 8005be8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005bec:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d108      	bne.n	8005c0a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005c08:	e03d      	b.n	8005c86 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005c0a:	2310      	movs	r3, #16
 8005c0c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005c0e:	2310      	movs	r3, #16
 8005c10:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	0e5b      	lsrs	r3, r3, #25
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	f003 0307 	and.w	r3, r3, #7
 8005c20:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	0f5b      	lsrs	r3, r3, #29
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	f003 0307 	and.w	r3, r3, #7
 8005c30:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005c32:	7fbb      	ldrb	r3, [r7, #30]
 8005c34:	7f3a      	ldrb	r2, [r7, #28]
 8005c36:	f107 0120 	add.w	r1, r7, #32
 8005c3a:	440a      	add	r2, r1
 8005c3c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005c40:	fb02 f303 	mul.w	r3, r2, r3
 8005c44:	7f3a      	ldrb	r2, [r7, #28]
 8005c46:	f107 0120 	add.w	r1, r7, #32
 8005c4a:	440a      	add	r2, r1
 8005c4c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005c50:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c54:	b29a      	uxth	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005c5c:	7ffb      	ldrb	r3, [r7, #31]
 8005c5e:	7f7a      	ldrb	r2, [r7, #29]
 8005c60:	f107 0120 	add.w	r1, r7, #32
 8005c64:	440a      	add	r2, r1
 8005c66:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005c6a:	fb02 f303 	mul.w	r3, r2, r3
 8005c6e:	7f7a      	ldrb	r2, [r7, #29]
 8005c70:	f107 0120 	add.w	r1, r7, #32
 8005c74:	440a      	add	r2, r1
 8005c76:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005c7a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005c86:	bf00      	nop
 8005c88:	3724      	adds	r7, #36	; 0x24
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
 8005c92:	bf00      	nop
 8005c94:	08009624 	.word	0x08009624
 8005c98:	0800962c 	.word	0x0800962c

08005c9c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c9c:	b084      	sub	sp, #16
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b084      	sub	sp, #16
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
 8005ca6:	f107 001c 	add.w	r0, r7, #28
 8005caa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d120      	bne.n	8005cf6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	68da      	ldr	r2, [r3, #12]
 8005cc4:	4b25      	ldr	r3, [pc, #148]	; (8005d5c <USB_CoreInit+0xc0>)
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005cd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d105      	bne.n	8005cea <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 f94c 	bl	8005f88 <USB_CoreReset>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	73fb      	strb	r3, [r7, #15]
 8005cf4:	e01a      	b.n	8005d2c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 f940 	bl	8005f88 <USB_CoreReset>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005d0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d106      	bne.n	8005d20 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d16:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	639a      	str	r2, [r3, #56]	; 0x38
 8005d1e:	e005      	b.n	8005d2c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d10b      	bne.n	8005d4a <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	f043 0206 	orr.w	r2, r3, #6
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	f043 0220 	orr.w	r2, r3, #32
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d56:	b004      	add	sp, #16
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	ffbdffbf 	.word	0xffbdffbf

08005d60 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	f043 0201 	orr.w	r2, r3, #1
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	370c      	adds	r7, #12
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr

08005d82 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d82:	b480      	push	{r7}
 8005d84:	b083      	sub	sp, #12
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f023 0201 	bic.w	r2, r3, #1
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	460b      	mov	r3, r1
 8005dae:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005dbc:	78fb      	ldrb	r3, [r7, #3]
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d106      	bne.n	8005dd0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	60da      	str	r2, [r3, #12]
 8005dce:	e00b      	b.n	8005de8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005dd0:	78fb      	ldrb	r3, [r7, #3]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d106      	bne.n	8005de4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	60da      	str	r2, [r3, #12]
 8005de2:	e001      	b.n	8005de8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e003      	b.n	8005df0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005de8:	2032      	movs	r0, #50	; 0x32
 8005dea:	f7fa ffc3 	bl	8000d74 <HAL_Delay>

  return HAL_OK;
 8005dee:	2300      	movs	r3, #0
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3708      	adds	r7, #8
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005e02:	2300      	movs	r3, #0
 8005e04:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	019b      	lsls	r3, r3, #6
 8005e0a:	f043 0220 	orr.w	r2, r3, #32
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	3301      	adds	r3, #1
 8005e16:	60fb      	str	r3, [r7, #12]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	4a09      	ldr	r2, [pc, #36]	; (8005e40 <USB_FlushTxFifo+0x48>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d901      	bls.n	8005e24 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e006      	b.n	8005e32 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	691b      	ldr	r3, [r3, #16]
 8005e28:	f003 0320 	and.w	r3, r3, #32
 8005e2c:	2b20      	cmp	r3, #32
 8005e2e:	d0f0      	beq.n	8005e12 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3714      	adds	r7, #20
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	00030d40 	.word	0x00030d40

08005e44 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2210      	movs	r2, #16
 8005e54:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	60fb      	str	r3, [r7, #12]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	4a09      	ldr	r2, [pc, #36]	; (8005e84 <USB_FlushRxFifo+0x40>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d901      	bls.n	8005e68 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005e64:	2303      	movs	r3, #3
 8005e66:	e006      	b.n	8005e76 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	f003 0310 	and.w	r3, r3, #16
 8005e70:	2b10      	cmp	r3, #16
 8005e72:	d0f0      	beq.n	8005e56 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3714      	adds	r7, #20
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	00030d40 	.word	0x00030d40

08005e88 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b089      	sub	sp, #36	; 0x24
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	4611      	mov	r1, r2
 8005e94:	461a      	mov	r2, r3
 8005e96:	460b      	mov	r3, r1
 8005e98:	71fb      	strb	r3, [r7, #7]
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005ea6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d11a      	bne.n	8005ee4 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005eae:	88bb      	ldrh	r3, [r7, #4]
 8005eb0:	3303      	adds	r3, #3
 8005eb2:	089b      	lsrs	r3, r3, #2
 8005eb4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	61bb      	str	r3, [r7, #24]
 8005eba:	e00f      	b.n	8005edc <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005ebc:	79fb      	ldrb	r3, [r7, #7]
 8005ebe:	031a      	lsls	r2, r3, #12
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ec8:	461a      	mov	r2, r3
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	3304      	adds	r3, #4
 8005ed4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	3301      	adds	r3, #1
 8005eda:	61bb      	str	r3, [r7, #24]
 8005edc:	69ba      	ldr	r2, [r7, #24]
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d3eb      	bcc.n	8005ebc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3724      	adds	r7, #36	; 0x24
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr

08005ef2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005ef2:	b480      	push	{r7}
 8005ef4:	b089      	sub	sp, #36	; 0x24
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	60f8      	str	r0, [r7, #12]
 8005efa:	60b9      	str	r1, [r7, #8]
 8005efc:	4613      	mov	r3, r2
 8005efe:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005f08:	88fb      	ldrh	r3, [r7, #6]
 8005f0a:	3303      	adds	r3, #3
 8005f0c:	089b      	lsrs	r3, r3, #2
 8005f0e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005f10:	2300      	movs	r3, #0
 8005f12:	61bb      	str	r3, [r7, #24]
 8005f14:	e00b      	b.n	8005f2e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	601a      	str	r2, [r3, #0]
    pDest++;
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	3304      	adds	r3, #4
 8005f26:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	61bb      	str	r3, [r7, #24]
 8005f2e:	69ba      	ldr	r2, [r7, #24]
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d3ef      	bcc.n	8005f16 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005f36:	69fb      	ldr	r3, [r7, #28]
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3724      	adds	r7, #36	; 0x24
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	695b      	ldr	r3, [r3, #20]
 8005f50:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	4013      	ands	r3, r2
 8005f5a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3714      	adds	r7, #20
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr

08005f6a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	b083      	sub	sp, #12
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	695b      	ldr	r3, [r3, #20]
 8005f76:	f003 0301 	and.w	r3, r3, #1
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	370c      	adds	r7, #12
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
	...

08005f88 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005f90:	2300      	movs	r3, #0
 8005f92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	3301      	adds	r3, #1
 8005f98:	60fb      	str	r3, [r7, #12]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	4a13      	ldr	r2, [pc, #76]	; (8005fec <USB_CoreReset+0x64>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d901      	bls.n	8005fa6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e01b      	b.n	8005fde <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	daf2      	bge.n	8005f94 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	f043 0201 	orr.w	r2, r3, #1
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	60fb      	str	r3, [r7, #12]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	4a09      	ldr	r2, [pc, #36]	; (8005fec <USB_CoreReset+0x64>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d901      	bls.n	8005fd0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e006      	b.n	8005fde <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	f003 0301 	and.w	r3, r3, #1
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d0f0      	beq.n	8005fbe <USB_CoreReset+0x36>

  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3714      	adds	r7, #20
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	00030d40 	.word	0x00030d40

08005ff0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ff0:	b084      	sub	sp, #16
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b084      	sub	sp, #16
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
 8005ffa:	f107 001c 	add.w	r0, r7, #28
 8005ffe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800600c:	461a      	mov	r2, r3
 800600e:	2300      	movs	r3, #0
 8006010:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006016:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006022:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800602e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006032:	2b00      	cmp	r3, #0
 8006034:	d018      	beq.n	8006068 <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006038:	2b01      	cmp	r3, #1
 800603a:	d10a      	bne.n	8006052 <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68ba      	ldr	r2, [r7, #8]
 8006046:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800604a:	f043 0304 	orr.w	r3, r3, #4
 800604e:	6013      	str	r3, [r2, #0]
 8006050:	e014      	b.n	800607c <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68ba      	ldr	r2, [r7, #8]
 800605c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006060:	f023 0304 	bic.w	r3, r3, #4
 8006064:	6013      	str	r3, [r2, #0]
 8006066:	e009      	b.n	800607c <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68ba      	ldr	r2, [r7, #8]
 8006072:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006076:	f023 0304 	bic.w	r3, r3, #4
 800607a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800607c:	2110      	movs	r1, #16
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f7ff feba 	bl	8005df8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f7ff fedd 	bl	8005e44 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800608a:	2300      	movs	r3, #0
 800608c:	60fb      	str	r3, [r7, #12]
 800608e:	e015      	b.n	80060bc <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	015a      	lsls	r2, r3, #5
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	4413      	add	r3, r2
 8006098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800609c:	461a      	mov	r2, r3
 800609e:	f04f 33ff 	mov.w	r3, #4294967295
 80060a2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	015a      	lsls	r2, r3, #5
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	4413      	add	r3, r2
 80060ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060b0:	461a      	mov	r2, r3
 80060b2:	2300      	movs	r3, #0
 80060b4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	3301      	adds	r3, #1
 80060ba:	60fb      	str	r3, [r7, #12]
 80060bc:	6a3b      	ldr	r3, [r7, #32]
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d3e5      	bcc.n	8006090 <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80060c4:	2101      	movs	r1, #1
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 f882 	bl	80061d0 <USB_DriveVbus>

  HAL_Delay(200U);
 80060cc:	20c8      	movs	r0, #200	; 0xc8
 80060ce:	f7fa fe51 	bl	8000d74 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f04f 32ff 	mov.w	r2, #4294967295
 80060de:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00b      	beq.n	8006104 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060f2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a14      	ldr	r2, [pc, #80]	; (8006148 <USB_HostInit+0x158>)
 80060f8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a13      	ldr	r2, [pc, #76]	; (800614c <USB_HostInit+0x15c>)
 80060fe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006102:	e009      	b.n	8006118 <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2280      	movs	r2, #128	; 0x80
 8006108:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a10      	ldr	r2, [pc, #64]	; (8006150 <USB_HostInit+0x160>)
 800610e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a10      	ldr	r2, [pc, #64]	; (8006154 <USB_HostInit+0x164>)
 8006114:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611a:	2b00      	cmp	r3, #0
 800611c:	d105      	bne.n	800612a <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	f043 0210 	orr.w	r2, r3, #16
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	699a      	ldr	r2, [r3, #24]
 800612e:	4b0a      	ldr	r3, [pc, #40]	; (8006158 <USB_HostInit+0x168>)
 8006130:	4313      	orrs	r3, r2
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	3710      	adds	r7, #16
 800613c:	46bd      	mov	sp, r7
 800613e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006142:	b004      	add	sp, #16
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	01000200 	.word	0x01000200
 800614c:	00e00300 	.word	0x00e00300
 8006150:	00600080 	.word	0x00600080
 8006154:	004000e0 	.word	0x004000e0
 8006158:	a3200008 	.word	0xa3200008

0800615c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800615c:	b480      	push	{r7}
 800615e:	b085      	sub	sp, #20
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	460b      	mov	r3, r1
 8006166:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800617a:	f023 0303 	bic.w	r3, r3, #3
 800617e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	78fb      	ldrb	r3, [r7, #3]
 800618a:	f003 0303 	and.w	r3, r3, #3
 800618e:	68f9      	ldr	r1, [r7, #12]
 8006190:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006194:	4313      	orrs	r3, r2
 8006196:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006198:	78fb      	ldrb	r3, [r7, #3]
 800619a:	2b01      	cmp	r3, #1
 800619c:	d107      	bne.n	80061ae <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061a4:	461a      	mov	r2, r3
 80061a6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80061aa:	6053      	str	r3, [r2, #4]
 80061ac:	e009      	b.n	80061c2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80061ae:	78fb      	ldrb	r3, [r7, #3]
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d106      	bne.n	80061c2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061ba:	461a      	mov	r2, r3
 80061bc:	f241 7370 	movw	r3, #6000	; 0x1770
 80061c0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3714      	adds	r7, #20
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	460b      	mov	r3, r1
 80061da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80061e0:	2300      	movs	r3, #0
 80061e2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80061f4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d109      	bne.n	8006214 <USB_DriveVbus+0x44>
 8006200:	78fb      	ldrb	r3, [r7, #3]
 8006202:	2b01      	cmp	r3, #1
 8006204:	d106      	bne.n	8006214 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800620e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006212:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800621a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800621e:	d109      	bne.n	8006234 <USB_DriveVbus+0x64>
 8006220:	78fb      	ldrb	r3, [r7, #3]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d106      	bne.n	8006234 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800622e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006232:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3714      	adds	r7, #20
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr

08006242 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006242:	b480      	push	{r7}
 8006244:	b085      	sub	sp, #20
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	b29b      	uxth	r3, r3
}
 8006258:	4618      	mov	r0, r3
 800625a:	3714      	adds	r7, #20
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8006264:	b480      	push	{r7}
 8006266:	b087      	sub	sp, #28
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	4608      	mov	r0, r1
 800626e:	4611      	mov	r1, r2
 8006270:	461a      	mov	r2, r3
 8006272:	4603      	mov	r3, r0
 8006274:	70fb      	strb	r3, [r7, #3]
 8006276:	460b      	mov	r3, r1
 8006278:	70bb      	strb	r3, [r7, #2]
 800627a:	4613      	mov	r3, r2
 800627c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800627e:	2300      	movs	r3, #0
 8006280:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006286:	78fb      	ldrb	r3, [r7, #3]
 8006288:	015a      	lsls	r2, r3, #5
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	4413      	add	r3, r2
 800628e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006292:	461a      	mov	r2, r3
 8006294:	f04f 33ff 	mov.w	r3, #4294967295
 8006298:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800629a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800629e:	2b03      	cmp	r3, #3
 80062a0:	d87e      	bhi.n	80063a0 <USB_HC_Init+0x13c>
 80062a2:	a201      	add	r2, pc, #4	; (adr r2, 80062a8 <USB_HC_Init+0x44>)
 80062a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a8:	080062b9 	.word	0x080062b9
 80062ac:	08006363 	.word	0x08006363
 80062b0:	080062b9 	.word	0x080062b9
 80062b4:	08006325 	.word	0x08006325
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80062b8:	78fb      	ldrb	r3, [r7, #3]
 80062ba:	015a      	lsls	r2, r3, #5
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	4413      	add	r3, r2
 80062c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062c4:	461a      	mov	r2, r3
 80062c6:	f240 439d 	movw	r3, #1181	; 0x49d
 80062ca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80062cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	da10      	bge.n	80062f6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80062d4:	78fb      	ldrb	r3, [r7, #3]
 80062d6:	015a      	lsls	r2, r3, #5
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	4413      	add	r3, r2
 80062dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	78fa      	ldrb	r2, [r7, #3]
 80062e4:	0151      	lsls	r1, r2, #5
 80062e6:	68ba      	ldr	r2, [r7, #8]
 80062e8:	440a      	add	r2, r1
 80062ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062f2:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80062f4:	e057      	b.n	80063a6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d051      	beq.n	80063a6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006302:	78fb      	ldrb	r3, [r7, #3]
 8006304:	015a      	lsls	r2, r3, #5
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	4413      	add	r3, r2
 800630a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	78fa      	ldrb	r2, [r7, #3]
 8006312:	0151      	lsls	r1, r2, #5
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	440a      	add	r2, r1
 8006318:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800631c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006320:	60d3      	str	r3, [r2, #12]
      break;
 8006322:	e040      	b.n	80063a6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006324:	78fb      	ldrb	r3, [r7, #3]
 8006326:	015a      	lsls	r2, r3, #5
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	4413      	add	r3, r2
 800632c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006330:	461a      	mov	r2, r3
 8006332:	f240 639d 	movw	r3, #1693	; 0x69d
 8006336:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006338:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800633c:	2b00      	cmp	r3, #0
 800633e:	da34      	bge.n	80063aa <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006340:	78fb      	ldrb	r3, [r7, #3]
 8006342:	015a      	lsls	r2, r3, #5
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	4413      	add	r3, r2
 8006348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	78fa      	ldrb	r2, [r7, #3]
 8006350:	0151      	lsls	r1, r2, #5
 8006352:	68ba      	ldr	r2, [r7, #8]
 8006354:	440a      	add	r2, r1
 8006356:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800635a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800635e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006360:	e023      	b.n	80063aa <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006362:	78fb      	ldrb	r3, [r7, #3]
 8006364:	015a      	lsls	r2, r3, #5
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	4413      	add	r3, r2
 800636a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800636e:	461a      	mov	r2, r3
 8006370:	f240 2325 	movw	r3, #549	; 0x225
 8006374:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006376:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800637a:	2b00      	cmp	r3, #0
 800637c:	da17      	bge.n	80063ae <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800637e:	78fb      	ldrb	r3, [r7, #3]
 8006380:	015a      	lsls	r2, r3, #5
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	4413      	add	r3, r2
 8006386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	78fa      	ldrb	r2, [r7, #3]
 800638e:	0151      	lsls	r1, r2, #5
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	440a      	add	r2, r1
 8006394:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006398:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800639c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800639e:	e006      	b.n	80063ae <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	75fb      	strb	r3, [r7, #23]
      break;
 80063a4:	e004      	b.n	80063b0 <USB_HC_Init+0x14c>
      break;
 80063a6:	bf00      	nop
 80063a8:	e002      	b.n	80063b0 <USB_HC_Init+0x14c>
      break;
 80063aa:	bf00      	nop
 80063ac:	e000      	b.n	80063b0 <USB_HC_Init+0x14c>
      break;
 80063ae:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063b6:	699a      	ldr	r2, [r3, #24]
 80063b8:	78fb      	ldrb	r3, [r7, #3]
 80063ba:	f003 030f 	and.w	r3, r3, #15
 80063be:	2101      	movs	r1, #1
 80063c0:	fa01 f303 	lsl.w	r3, r1, r3
 80063c4:	68b9      	ldr	r1, [r7, #8]
 80063c6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80063ca:	4313      	orrs	r3, r2
 80063cc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	699b      	ldr	r3, [r3, #24]
 80063d2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80063da:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	da03      	bge.n	80063ea <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80063e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063e6:	613b      	str	r3, [r7, #16]
 80063e8:	e001      	b.n	80063ee <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80063ea:	2300      	movs	r3, #0
 80063ec:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80063ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d103      	bne.n	80063fe <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80063f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80063fa:	60fb      	str	r3, [r7, #12]
 80063fc:	e001      	b.n	8006402 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80063fe:	2300      	movs	r3, #0
 8006400:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006402:	787b      	ldrb	r3, [r7, #1]
 8006404:	059b      	lsls	r3, r3, #22
 8006406:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800640a:	78bb      	ldrb	r3, [r7, #2]
 800640c:	02db      	lsls	r3, r3, #11
 800640e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006412:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006414:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006418:	049b      	lsls	r3, r3, #18
 800641a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800641e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006420:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006422:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006426:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800642c:	78fb      	ldrb	r3, [r7, #3]
 800642e:	0159      	lsls	r1, r3, #5
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	440b      	add	r3, r1
 8006434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006438:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800643e:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006440:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006444:	2b03      	cmp	r3, #3
 8006446:	d10f      	bne.n	8006468 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006448:	78fb      	ldrb	r3, [r7, #3]
 800644a:	015a      	lsls	r2, r3, #5
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	4413      	add	r3, r2
 8006450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	78fa      	ldrb	r2, [r7, #3]
 8006458:	0151      	lsls	r1, r2, #5
 800645a:	68ba      	ldr	r2, [r7, #8]
 800645c:	440a      	add	r2, r1
 800645e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006462:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006466:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006468:	7dfb      	ldrb	r3, [r7, #23]
}
 800646a:	4618      	mov	r0, r3
 800646c:	371c      	adds	r7, #28
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr
 8006476:	bf00      	nop

08006478 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b08c      	sub	sp, #48	; 0x30
 800647c:	af02      	add	r7, sp, #8
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	4613      	mov	r3, r2
 8006484:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	785b      	ldrb	r3, [r3, #1]
 800648e:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006490:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006494:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800649a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d028      	beq.n	80064f4 <USB_HC_StartXfer+0x7c>
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	791b      	ldrb	r3, [r3, #4]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d124      	bne.n	80064f4 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80064aa:	79fb      	ldrb	r3, [r7, #7]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d10b      	bne.n	80064c8 <USB_HC_StartXfer+0x50>
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	795b      	ldrb	r3, [r3, #5]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d107      	bne.n	80064c8 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	785b      	ldrb	r3, [r3, #1]
 80064bc:	4619      	mov	r1, r3
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	f000 fa2e 	bl	8006920 <USB_DoPing>
      return HAL_OK;
 80064c4:	2300      	movs	r3, #0
 80064c6:	e112      	b.n	80066ee <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 80064c8:	79fb      	ldrb	r3, [r7, #7]
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d112      	bne.n	80064f4 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	015a      	lsls	r2, r3, #5
 80064d2:	6a3b      	ldr	r3, [r7, #32]
 80064d4:	4413      	add	r3, r2
 80064d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	69fa      	ldr	r2, [r7, #28]
 80064de:	0151      	lsls	r1, r2, #5
 80064e0:	6a3a      	ldr	r2, [r7, #32]
 80064e2:	440a      	add	r2, r1
 80064e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064e8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80064ec:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	2200      	movs	r2, #0
 80064f2:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d018      	beq.n	800652e <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	68ba      	ldr	r2, [r7, #8]
 8006502:	8912      	ldrh	r2, [r2, #8]
 8006504:	4413      	add	r3, r2
 8006506:	3b01      	subs	r3, #1
 8006508:	68ba      	ldr	r2, [r7, #8]
 800650a:	8912      	ldrh	r2, [r2, #8]
 800650c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006510:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006512:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006514:	8b7b      	ldrh	r3, [r7, #26]
 8006516:	429a      	cmp	r2, r3
 8006518:	d90b      	bls.n	8006532 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800651a:	8b7b      	ldrh	r3, [r7, #26]
 800651c:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800651e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006520:	68ba      	ldr	r2, [r7, #8]
 8006522:	8912      	ldrh	r2, [r2, #8]
 8006524:	fb02 f203 	mul.w	r2, r2, r3
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	611a      	str	r2, [r3, #16]
 800652c:	e001      	b.n	8006532 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800652e:	2301      	movs	r3, #1
 8006530:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	78db      	ldrb	r3, [r3, #3]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d006      	beq.n	8006548 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800653a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800653c:	68ba      	ldr	r2, [r7, #8]
 800653e:	8912      	ldrh	r2, [r2, #8]
 8006540:	fb02 f203 	mul.w	r2, r2, r3
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006550:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006552:	04d9      	lsls	r1, r3, #19
 8006554:	4b68      	ldr	r3, [pc, #416]	; (80066f8 <USB_HC_StartXfer+0x280>)
 8006556:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006558:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	7a9b      	ldrb	r3, [r3, #10]
 800655e:	075b      	lsls	r3, r3, #29
 8006560:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006564:	69f9      	ldr	r1, [r7, #28]
 8006566:	0148      	lsls	r0, r1, #5
 8006568:	6a39      	ldr	r1, [r7, #32]
 800656a:	4401      	add	r1, r0
 800656c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006570:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006572:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006574:	79fb      	ldrb	r3, [r7, #7]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d009      	beq.n	800658e <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	68d9      	ldr	r1, [r3, #12]
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	015a      	lsls	r2, r3, #5
 8006582:	6a3b      	ldr	r3, [r7, #32]
 8006584:	4413      	add	r3, r2
 8006586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800658a:	460a      	mov	r2, r1
 800658c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800658e:	6a3b      	ldr	r3, [r7, #32]
 8006590:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	f003 0301 	and.w	r3, r3, #1
 800659a:	2b00      	cmp	r3, #0
 800659c:	bf0c      	ite	eq
 800659e:	2301      	moveq	r3, #1
 80065a0:	2300      	movne	r3, #0
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	015a      	lsls	r2, r3, #5
 80065aa:	6a3b      	ldr	r3, [r7, #32]
 80065ac:	4413      	add	r3, r2
 80065ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	69fa      	ldr	r2, [r7, #28]
 80065b6:	0151      	lsls	r1, r2, #5
 80065b8:	6a3a      	ldr	r2, [r7, #32]
 80065ba:	440a      	add	r2, r1
 80065bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065c0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80065c4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	015a      	lsls	r2, r3, #5
 80065ca:	6a3b      	ldr	r3, [r7, #32]
 80065cc:	4413      	add	r3, r2
 80065ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	7e7b      	ldrb	r3, [r7, #25]
 80065d6:	075b      	lsls	r3, r3, #29
 80065d8:	69f9      	ldr	r1, [r7, #28]
 80065da:	0148      	lsls	r0, r1, #5
 80065dc:	6a39      	ldr	r1, [r7, #32]
 80065de:	4401      	add	r1, r0
 80065e0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80065e4:	4313      	orrs	r3, r2
 80065e6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	015a      	lsls	r2, r3, #5
 80065ec:	6a3b      	ldr	r3, [r7, #32]
 80065ee:	4413      	add	r3, r2
 80065f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a41      	ldr	r2, [pc, #260]	; (80066fc <USB_HC_StartXfer+0x284>)
 80065f8:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80065fa:	4b40      	ldr	r3, [pc, #256]	; (80066fc <USB_HC_StartXfer+0x284>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006602:	4a3e      	ldr	r2, [pc, #248]	; (80066fc <USB_HC_StartXfer+0x284>)
 8006604:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	78db      	ldrb	r3, [r3, #3]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d006      	beq.n	800661c <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800660e:	4b3b      	ldr	r3, [pc, #236]	; (80066fc <USB_HC_StartXfer+0x284>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006616:	4a39      	ldr	r2, [pc, #228]	; (80066fc <USB_HC_StartXfer+0x284>)
 8006618:	6013      	str	r3, [r2, #0]
 800661a:	e005      	b.n	8006628 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800661c:	4b37      	ldr	r3, [pc, #220]	; (80066fc <USB_HC_StartXfer+0x284>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006624:	4a35      	ldr	r2, [pc, #212]	; (80066fc <USB_HC_StartXfer+0x284>)
 8006626:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006628:	4b34      	ldr	r3, [pc, #208]	; (80066fc <USB_HC_StartXfer+0x284>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006630:	4a32      	ldr	r2, [pc, #200]	; (80066fc <USB_HC_StartXfer+0x284>)
 8006632:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	015a      	lsls	r2, r3, #5
 8006638:	6a3b      	ldr	r3, [r7, #32]
 800663a:	4413      	add	r3, r2
 800663c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006640:	461a      	mov	r2, r3
 8006642:	4b2e      	ldr	r3, [pc, #184]	; (80066fc <USB_HC_StartXfer+0x284>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8006648:	79fb      	ldrb	r3, [r7, #7]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d14e      	bne.n	80066ec <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	78db      	ldrb	r3, [r3, #3]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d14a      	bne.n	80066ec <USB_HC_StartXfer+0x274>
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d046      	beq.n	80066ec <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	79db      	ldrb	r3, [r3, #7]
 8006662:	2b03      	cmp	r3, #3
 8006664:	d830      	bhi.n	80066c8 <USB_HC_StartXfer+0x250>
 8006666:	a201      	add	r2, pc, #4	; (adr r2, 800666c <USB_HC_StartXfer+0x1f4>)
 8006668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800666c:	0800667d 	.word	0x0800667d
 8006670:	080066a1 	.word	0x080066a1
 8006674:	0800667d 	.word	0x0800667d
 8006678:	080066a1 	.word	0x080066a1
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	3303      	adds	r3, #3
 8006682:	089b      	lsrs	r3, r3, #2
 8006684:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006686:	8afa      	ldrh	r2, [r7, #22]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668c:	b29b      	uxth	r3, r3
 800668e:	429a      	cmp	r2, r3
 8006690:	d91c      	bls.n	80066cc <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	699b      	ldr	r3, [r3, #24]
 8006696:	f043 0220 	orr.w	r2, r3, #32
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	619a      	str	r2, [r3, #24]
          }
          break;
 800669e:	e015      	b.n	80066cc <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	3303      	adds	r3, #3
 80066a6:	089b      	lsrs	r3, r3, #2
 80066a8:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80066aa:	8afa      	ldrh	r2, [r7, #22]
 80066ac:	6a3b      	ldr	r3, [r7, #32]
 80066ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d90a      	bls.n	80066d0 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	619a      	str	r2, [r3, #24]
          }
          break;
 80066c6:	e003      	b.n	80066d0 <USB_HC_StartXfer+0x258>

        default:
          break;
 80066c8:	bf00      	nop
 80066ca:	e002      	b.n	80066d2 <USB_HC_StartXfer+0x25a>
          break;
 80066cc:	bf00      	nop
 80066ce:	e000      	b.n	80066d2 <USB_HC_StartXfer+0x25a>
          break;
 80066d0:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	68d9      	ldr	r1, [r3, #12]
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	785a      	ldrb	r2, [r3, #1]
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	b298      	uxth	r0, r3
 80066e0:	2300      	movs	r3, #0
 80066e2:	9300      	str	r3, [sp, #0]
 80066e4:	4603      	mov	r3, r0
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	f7ff fbce 	bl	8005e88 <USB_WritePacket>
    }
  }

  return HAL_OK;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3728      	adds	r7, #40	; 0x28
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	1ff80000 	.word	0x1ff80000
 80066fc:	200000b8 	.word	0x200000b8

08006700 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006700:	b480      	push	{r7}
 8006702:	b085      	sub	sp, #20
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006712:	695b      	ldr	r3, [r3, #20]
 8006714:	b29b      	uxth	r3, r3
}
 8006716:	4618      	mov	r0, r3
 8006718:	3714      	adds	r7, #20
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr

08006722 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006722:	b480      	push	{r7}
 8006724:	b087      	sub	sp, #28
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
 800672a:	460b      	mov	r3, r1
 800672c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8006732:	78fb      	ldrb	r3, [r7, #3]
 8006734:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006736:	2300      	movs	r3, #0
 8006738:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	015a      	lsls	r2, r3, #5
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	4413      	add	r3, r2
 8006742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	0c9b      	lsrs	r3, r3, #18
 800674a:	f003 0303 	and.w	r3, r3, #3
 800674e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d002      	beq.n	800675c <USB_HC_Halt+0x3a>
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	2b02      	cmp	r3, #2
 800675a:	d16c      	bne.n	8006836 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	015a      	lsls	r2, r3, #5
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	4413      	add	r3, r2
 8006764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	0151      	lsls	r1, r2, #5
 800676e:	693a      	ldr	r2, [r7, #16]
 8006770:	440a      	add	r2, r1
 8006772:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006776:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800677a:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006780:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006784:	2b00      	cmp	r3, #0
 8006786:	d143      	bne.n	8006810 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	015a      	lsls	r2, r3, #5
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	4413      	add	r3, r2
 8006790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	0151      	lsls	r1, r2, #5
 800679a:	693a      	ldr	r2, [r7, #16]
 800679c:	440a      	add	r2, r1
 800679e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067a6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	015a      	lsls	r2, r3, #5
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	4413      	add	r3, r2
 80067b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	0151      	lsls	r1, r2, #5
 80067ba:	693a      	ldr	r2, [r7, #16]
 80067bc:	440a      	add	r2, r1
 80067be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067c6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	015a      	lsls	r2, r3, #5
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	4413      	add	r3, r2
 80067d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	0151      	lsls	r1, r2, #5
 80067da:	693a      	ldr	r2, [r7, #16]
 80067dc:	440a      	add	r2, r1
 80067de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067e6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	3301      	adds	r3, #1
 80067ec:	617b      	str	r3, [r7, #20]
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067f4:	d81d      	bhi.n	8006832 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	015a      	lsls	r2, r3, #5
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	4413      	add	r3, r2
 80067fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006808:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800680c:	d0ec      	beq.n	80067e8 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800680e:	e080      	b.n	8006912 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	015a      	lsls	r2, r3, #5
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	4413      	add	r3, r2
 8006818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	0151      	lsls	r1, r2, #5
 8006822:	693a      	ldr	r2, [r7, #16]
 8006824:	440a      	add	r2, r1
 8006826:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800682a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800682e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006830:	e06f      	b.n	8006912 <USB_HC_Halt+0x1f0>
          break;
 8006832:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006834:	e06d      	b.n	8006912 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	015a      	lsls	r2, r3, #5
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	4413      	add	r3, r2
 800683e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	0151      	lsls	r1, r2, #5
 8006848:	693a      	ldr	r2, [r7, #16]
 800684a:	440a      	add	r2, r1
 800684c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006850:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006854:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006862:	2b00      	cmp	r3, #0
 8006864:	d143      	bne.n	80068ee <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	015a      	lsls	r2, r3, #5
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	4413      	add	r3, r2
 800686e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	0151      	lsls	r1, r2, #5
 8006878:	693a      	ldr	r2, [r7, #16]
 800687a:	440a      	add	r2, r1
 800687c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006880:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006884:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	015a      	lsls	r2, r3, #5
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	4413      	add	r3, r2
 800688e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	0151      	lsls	r1, r2, #5
 8006898:	693a      	ldr	r2, [r7, #16]
 800689a:	440a      	add	r2, r1
 800689c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068a4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	015a      	lsls	r2, r3, #5
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	4413      	add	r3, r2
 80068ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	0151      	lsls	r1, r2, #5
 80068b8:	693a      	ldr	r2, [r7, #16]
 80068ba:	440a      	add	r2, r1
 80068bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80068c4:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	3301      	adds	r3, #1
 80068ca:	617b      	str	r3, [r7, #20]
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068d2:	d81d      	bhi.n	8006910 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	015a      	lsls	r2, r3, #5
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	4413      	add	r3, r2
 80068dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068ea:	d0ec      	beq.n	80068c6 <USB_HC_Halt+0x1a4>
 80068ec:	e011      	b.n	8006912 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	015a      	lsls	r2, r3, #5
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	4413      	add	r3, r2
 80068f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	0151      	lsls	r1, r2, #5
 8006900:	693a      	ldr	r2, [r7, #16]
 8006902:	440a      	add	r2, r1
 8006904:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006908:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800690c:	6013      	str	r3, [r2, #0]
 800690e:	e000      	b.n	8006912 <USB_HC_Halt+0x1f0>
          break;
 8006910:	bf00      	nop
    }
  }

  return HAL_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	371c      	adds	r7, #28
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006920:	b480      	push	{r7}
 8006922:	b087      	sub	sp, #28
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	460b      	mov	r3, r1
 800692a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006930:	78fb      	ldrb	r3, [r7, #3]
 8006932:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006934:	2301      	movs	r3, #1
 8006936:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	04da      	lsls	r2, r3, #19
 800693c:	4b15      	ldr	r3, [pc, #84]	; (8006994 <USB_DoPing+0x74>)
 800693e:	4013      	ands	r3, r2
 8006940:	693a      	ldr	r2, [r7, #16]
 8006942:	0151      	lsls	r1, r2, #5
 8006944:	697a      	ldr	r2, [r7, #20]
 8006946:	440a      	add	r2, r1
 8006948:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800694c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006950:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	015a      	lsls	r2, r3, #5
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	4413      	add	r3, r2
 800695a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006968:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006970:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	015a      	lsls	r2, r3, #5
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	4413      	add	r3, r2
 800697a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800697e:	461a      	mov	r2, r3
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	371c      	adds	r7, #28
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
 8006992:	bf00      	nop
 8006994:	1ff80000 	.word	0x1ff80000

08006998 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b086      	sub	sp, #24
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80069a4:	2300      	movs	r3, #0
 80069a6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f7ff f9ea 	bl	8005d82 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80069ae:	2110      	movs	r1, #16
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f7ff fa21 	bl	8005df8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f7ff fa44 	bl	8005e44 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80069bc:	2300      	movs	r3, #0
 80069be:	613b      	str	r3, [r7, #16]
 80069c0:	e01f      	b.n	8006a02 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	015a      	lsls	r2, r3, #5
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	4413      	add	r3, r2
 80069ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069d8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069e0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069e8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	015a      	lsls	r2, r3, #5
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	4413      	add	r3, r2
 80069f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069f6:	461a      	mov	r2, r3
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	3301      	adds	r3, #1
 8006a00:	613b      	str	r3, [r7, #16]
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	2b0f      	cmp	r3, #15
 8006a06:	d9dc      	bls.n	80069c2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006a08:	2300      	movs	r3, #0
 8006a0a:	613b      	str	r3, [r7, #16]
 8006a0c:	e034      	b.n	8006a78 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	015a      	lsls	r2, r3, #5
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	4413      	add	r3, r2
 8006a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a24:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a2c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a34:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	015a      	lsls	r2, r3, #5
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a42:	461a      	mov	r2, r3
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	617b      	str	r3, [r7, #20]
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a54:	d80c      	bhi.n	8006a70 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	015a      	lsls	r2, r3, #5
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a6c:	d0ec      	beq.n	8006a48 <USB_StopHost+0xb0>
 8006a6e:	e000      	b.n	8006a72 <USB_StopHost+0xda>
        break;
 8006a70:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	3301      	adds	r3, #1
 8006a76:	613b      	str	r3, [r7, #16]
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	2b0f      	cmp	r3, #15
 8006a7c:	d9c7      	bls.n	8006a0e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a84:	461a      	mov	r2, r3
 8006a86:	f04f 33ff 	mov.w	r3, #4294967295
 8006a8a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8006a92:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f7ff f963 	bl	8005d60 <USB_EnableGlobalInt>

  return HAL_OK;
 8006a9a:	2300      	movs	r3, #0
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3718      	adds	r7, #24
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8006aa8:	4904      	ldr	r1, [pc, #16]	; (8006abc <MX_FATFS_Init+0x18>)
 8006aaa:	4805      	ldr	r0, [pc, #20]	; (8006ac0 <MX_FATFS_Init+0x1c>)
 8006aac:	f002 f9b2 	bl	8008e14 <FATFS_LinkDriver>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	4b03      	ldr	r3, [pc, #12]	; (8006ac4 <MX_FATFS_Init+0x20>)
 8006ab6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006ab8:	bf00      	nop
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	20000168 	.word	0x20000168
 8006ac0:	08009660 	.word	0x08009660
 8006ac4:	20002204 	.word	0x20002204

08006ac8 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	4603      	mov	r3, r0
 8006ad0:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	370c      	adds	r7, #12
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8006aee:	79fb      	ldrb	r3, [r7, #7]
 8006af0:	4619      	mov	r1, r3
 8006af2:	4808      	ldr	r0, [pc, #32]	; (8006b14 <USBH_status+0x34>)
 8006af4:	f001 fa43 	bl	8007f7e <USBH_MSC_UnitIsReady>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d002      	beq.n	8006b04 <USBH_status+0x24>
  {
    res = RES_OK;
 8006afe:	2300      	movs	r3, #0
 8006b00:	73fb      	strb	r3, [r7, #15]
 8006b02:	e001      	b.n	8006b08 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8006b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3710      	adds	r7, #16
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	20002208 	.word	0x20002208

08006b18 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b094      	sub	sp, #80	; 0x50
 8006b1c:	af02      	add	r7, sp, #8
 8006b1e:	60b9      	str	r1, [r7, #8]
 8006b20:	607a      	str	r2, [r7, #4]
 8006b22:	603b      	str	r3, [r7, #0]
 8006b24:	4603      	mov	r3, r0
 8006b26:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8006b2e:	7bf9      	ldrb	r1, [r7, #15]
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	9300      	str	r3, [sp, #0]
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	4812      	ldr	r0, [pc, #72]	; (8006b84 <USBH_read+0x6c>)
 8006b3a:	f001 fa6a 	bl	8008012 <USBH_MSC_Read>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d103      	bne.n	8006b4c <USBH_read+0x34>
  {
    res = RES_OK;
 8006b44:	2300      	movs	r3, #0
 8006b46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006b4a:	e015      	b.n	8006b78 <USBH_read+0x60>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8006b4c:	f107 0210 	add.w	r2, r7, #16
 8006b50:	7bfb      	ldrb	r3, [r7, #15]
 8006b52:	4619      	mov	r1, r3
 8006b54:	480b      	ldr	r0, [pc, #44]	; (8006b84 <USBH_read+0x6c>)
 8006b56:	f001 fa38 	bl	8007fca <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8006b5a:	7f7b      	ldrb	r3, [r7, #29]
 8006b5c:	2b28      	cmp	r3, #40	; 0x28
 8006b5e:	d003      	beq.n	8006b68 <USBH_read+0x50>
 8006b60:	2b3a      	cmp	r3, #58	; 0x3a
 8006b62:	d001      	beq.n	8006b68 <USBH_read+0x50>
 8006b64:	2b04      	cmp	r3, #4
 8006b66:	d103      	bne.n	8006b70 <USBH_read+0x58>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8006b68:	2303      	movs	r3, #3
 8006b6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006b6e:	e003      	b.n	8006b78 <USBH_read+0x60>

    default:
      res = RES_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006b76:	bf00      	nop
    }
  }

  return res;
 8006b78:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3748      	adds	r7, #72	; 0x48
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	20002208 	.word	0x20002208

08006b88 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b094      	sub	sp, #80	; 0x50
 8006b8c:	af02      	add	r7, sp, #8
 8006b8e:	60b9      	str	r1, [r7, #8]
 8006b90:	607a      	str	r2, [r7, #4]
 8006b92:	603b      	str	r3, [r7, #0]
 8006b94:	4603      	mov	r3, r0
 8006b96:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8006b9e:	7bf9      	ldrb	r1, [r7, #15]
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	9300      	str	r3, [sp, #0]
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	4817      	ldr	r0, [pc, #92]	; (8006c08 <USBH_write+0x80>)
 8006baa:	f001 fa9b 	bl	80080e4 <USBH_MSC_Write>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d103      	bne.n	8006bbc <USBH_write+0x34>
  {
    res = RES_OK;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006bba:	e01f      	b.n	8006bfc <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8006bbc:	f107 0210 	add.w	r2, r7, #16
 8006bc0:	7bfb      	ldrb	r3, [r7, #15]
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	4810      	ldr	r0, [pc, #64]	; (8006c08 <USBH_write+0x80>)
 8006bc6:	f001 fa00 	bl	8007fca <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8006bca:	7f7b      	ldrb	r3, [r7, #29]
 8006bcc:	2b27      	cmp	r3, #39	; 0x27
 8006bce:	d009      	beq.n	8006be4 <USBH_write+0x5c>
 8006bd0:	2b27      	cmp	r3, #39	; 0x27
 8006bd2:	dc02      	bgt.n	8006bda <USBH_write+0x52>
 8006bd4:	2b04      	cmp	r3, #4
 8006bd6:	d009      	beq.n	8006bec <USBH_write+0x64>
 8006bd8:	e00c      	b.n	8006bf4 <USBH_write+0x6c>
 8006bda:	2b28      	cmp	r3, #40	; 0x28
 8006bdc:	d006      	beq.n	8006bec <USBH_write+0x64>
 8006bde:	2b3a      	cmp	r3, #58	; 0x3a
 8006be0:	d004      	beq.n	8006bec <USBH_write+0x64>
 8006be2:	e007      	b.n	8006bf4 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8006be4:	2302      	movs	r3, #2
 8006be6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006bea:	e007      	b.n	8006bfc <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8006bec:	2303      	movs	r3, #3
 8006bee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006bf2:	e003      	b.n	8006bfc <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006bfa:	bf00      	nop
    }
  }

  return res;
 8006bfc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3748      	adds	r7, #72	; 0x48
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	20002208 	.word	0x20002208

08006c0c <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b090      	sub	sp, #64	; 0x40
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	4603      	mov	r3, r0
 8006c14:	603a      	str	r2, [r7, #0]
 8006c16:	71fb      	strb	r3, [r7, #7]
 8006c18:	460b      	mov	r3, r1
 8006c1a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8006c22:	79bb      	ldrb	r3, [r7, #6]
 8006c24:	2b03      	cmp	r3, #3
 8006c26:	d852      	bhi.n	8006cce <USBH_ioctl+0xc2>
 8006c28:	a201      	add	r2, pc, #4	; (adr r2, 8006c30 <USBH_ioctl+0x24>)
 8006c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c2e:	bf00      	nop
 8006c30:	08006c41 	.word	0x08006c41
 8006c34:	08006c49 	.word	0x08006c49
 8006c38:	08006c73 	.word	0x08006c73
 8006c3c:	08006c9f 	.word	0x08006c9f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8006c40:	2300      	movs	r3, #0
 8006c42:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006c46:	e045      	b.n	8006cd4 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8006c48:	f107 0208 	add.w	r2, r7, #8
 8006c4c:	79fb      	ldrb	r3, [r7, #7]
 8006c4e:	4619      	mov	r1, r3
 8006c50:	4823      	ldr	r0, [pc, #140]	; (8006ce0 <USBH_ioctl+0xd4>)
 8006c52:	f001 f9ba 	bl	8007fca <USBH_MSC_GetLUNInfo>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d106      	bne.n	8006c6a <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8006c5c:	68fa      	ldr	r2, [r7, #12]
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8006c62:	2300      	movs	r3, #0
 8006c64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8006c68:	e034      	b.n	8006cd4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006c70:	e030      	b.n	8006cd4 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8006c72:	f107 0208 	add.w	r2, r7, #8
 8006c76:	79fb      	ldrb	r3, [r7, #7]
 8006c78:	4619      	mov	r1, r3
 8006c7a:	4819      	ldr	r0, [pc, #100]	; (8006ce0 <USBH_ioctl+0xd4>)
 8006c7c:	f001 f9a5 	bl	8007fca <USBH_MSC_GetLUNInfo>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d107      	bne.n	8006c96 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8006c86:	8a3b      	ldrh	r3, [r7, #16]
 8006c88:	461a      	mov	r2, r3
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8006c94:	e01e      	b.n	8006cd4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006c9c:	e01a      	b.n	8006cd4 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8006c9e:	f107 0208 	add.w	r2, r7, #8
 8006ca2:	79fb      	ldrb	r3, [r7, #7]
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	480e      	ldr	r0, [pc, #56]	; (8006ce0 <USBH_ioctl+0xd4>)
 8006ca8:	f001 f98f 	bl	8007fca <USBH_MSC_GetLUNInfo>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d109      	bne.n	8006cc6 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8006cb2:	8a3b      	ldrh	r3, [r7, #16]
 8006cb4:	0a5b      	lsrs	r3, r3, #9
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	461a      	mov	r2, r3
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8006cc4:	e006      	b.n	8006cd4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006ccc:	e002      	b.n	8006cd4 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8006cce:	2304      	movs	r3, #4
 8006cd0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8006cd4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3740      	adds	r7, #64	; 0x40
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}
 8006ce0:	20002208 	.word	0x20002208

08006ce4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	4613      	mov	r3, r2
 8006cf0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d101      	bne.n	8006cfc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	e029      	b.n	8006d50 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	79fa      	ldrb	r2, [r7, #7]
 8006d00:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f000 f81f 	bl	8006d58 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d003      	beq.n	8006d48 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	68ba      	ldr	r2, [r7, #8]
 8006d44:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006d48:	68f8      	ldr	r0, [r7, #12]
 8006d4a:	f002 f97b 	bl	8009044 <USBH_LL_Init>

  return USBH_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3710      	adds	r7, #16
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006d60:	2300      	movs	r3, #0
 8006d62:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006d64:	2300      	movs	r3, #0
 8006d66:	60fb      	str	r3, [r7, #12]
 8006d68:	e009      	b.n	8006d7e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	33e0      	adds	r3, #224	; 0xe0
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	4413      	add	r3, r2
 8006d74:	2200      	movs	r2, #0
 8006d76:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	60fb      	str	r3, [r7, #12]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2b0e      	cmp	r3, #14
 8006d82:	d9f2      	bls.n	8006d6a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006d84:	2300      	movs	r3, #0
 8006d86:	60fb      	str	r3, [r7, #12]
 8006d88:	e009      	b.n	8006d9e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	4413      	add	r3, r2
 8006d90:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006d94:	2200      	movs	r2, #0
 8006d96:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	60fb      	str	r3, [r7, #12]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006da4:	d3f1      	bcc.n	8006d8a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2201      	movs	r2, #1
 8006db6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2240      	movs	r2, #64	; 0x40
 8006dca:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3714      	adds	r7, #20
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d016      	beq.n	8006e42 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d10e      	bne.n	8006e3c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006e24:	1c59      	adds	r1, r3, #1
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	33de      	adds	r3, #222	; 0xde
 8006e30:	6839      	ldr	r1, [r7, #0]
 8006e32:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006e36:	2300      	movs	r3, #0
 8006e38:	73fb      	strb	r3, [r7, #15]
 8006e3a:	e004      	b.n	8006e46 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006e3c:	2302      	movs	r3, #2
 8006e3e:	73fb      	strb	r3, [r7, #15]
 8006e40:	e001      	b.n	8006e46 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006e42:	2302      	movs	r3, #2
 8006e44:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3714      	adds	r7, #20
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006e60:	2300      	movs	r3, #0
 8006e62:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006e6a:	78fa      	ldrb	r2, [r7, #3]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d204      	bcs.n	8006e7a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	78fa      	ldrb	r2, [r7, #3]
 8006e74:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006e78:	e001      	b.n	8006e7e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006e7a:	2302      	movs	r3, #2
 8006e7c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3714      	adds	r7, #20
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b087      	sub	sp, #28
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	4608      	mov	r0, r1
 8006e96:	4611      	mov	r1, r2
 8006e98:	461a      	mov	r2, r3
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	70fb      	strb	r3, [r7, #3]
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	70bb      	strb	r3, [r7, #2]
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006eb4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006eb6:	e025      	b.n	8006f04 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006eb8:	7dfb      	ldrb	r3, [r7, #23]
 8006eba:	221a      	movs	r2, #26
 8006ebc:	fb02 f303 	mul.w	r3, r2, r3
 8006ec0:	3308      	adds	r3, #8
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	3302      	adds	r3, #2
 8006ec8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	795b      	ldrb	r3, [r3, #5]
 8006ece:	78fa      	ldrb	r2, [r7, #3]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d002      	beq.n	8006eda <USBH_FindInterface+0x4e>
 8006ed4:	78fb      	ldrb	r3, [r7, #3]
 8006ed6:	2bff      	cmp	r3, #255	; 0xff
 8006ed8:	d111      	bne.n	8006efe <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006ede:	78ba      	ldrb	r2, [r7, #2]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d002      	beq.n	8006eea <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006ee4:	78bb      	ldrb	r3, [r7, #2]
 8006ee6:	2bff      	cmp	r3, #255	; 0xff
 8006ee8:	d109      	bne.n	8006efe <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006eee:	787a      	ldrb	r2, [r7, #1]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d002      	beq.n	8006efa <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006ef4:	787b      	ldrb	r3, [r7, #1]
 8006ef6:	2bff      	cmp	r3, #255	; 0xff
 8006ef8:	d101      	bne.n	8006efe <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006efa:	7dfb      	ldrb	r3, [r7, #23]
 8006efc:	e006      	b.n	8006f0c <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006efe:	7dfb      	ldrb	r3, [r7, #23]
 8006f00:	3301      	adds	r3, #1
 8006f02:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006f04:	7dfb      	ldrb	r3, [r7, #23]
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d9d6      	bls.n	8006eb8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006f0a:	23ff      	movs	r3, #255	; 0xff
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	371c      	adds	r7, #28
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f002 f8cb 	bl	80090bc <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006f26:	2101      	movs	r1, #1
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f002 f9a2 	bl	8009272 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006f2e:	2300      	movs	r3, #0
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3708      	adds	r7, #8
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	683a      	ldr	r2, [r7, #0]
 8006f46:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006f4a:	bf00      	nop
 8006f4c:	370c      	adds	r7, #12
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr

08006f56 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b082      	sub	sp, #8
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006f64:	1c5a      	adds	r2, r3, #1
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 f804 	bl	8006f7a <USBH_HandleSof>
}
 8006f72:	bf00      	nop
 8006f74:	3708      	adds	r7, #8
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b082      	sub	sp, #8
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	2b0b      	cmp	r3, #11
 8006f8a:	d10a      	bne.n	8006fa2 <USBH_HandleSof+0x28>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d005      	beq.n	8006fa2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f9c:	699b      	ldr	r3, [r3, #24]
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	4798      	blx	r3
  }
}
 8006fa2:	bf00      	nop
 8006fa4:	3708      	adds	r7, #8
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006faa:	b480      	push	{r7}
 8006fac:	b083      	sub	sp, #12
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8006fba:	bf00      	nop
}
 8006fbc:	370c      	adds	r7, #12
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr

08006fc6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006fc6:	b480      	push	{r7}
 8006fc8:	b083      	sub	sp, #12
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006fd6:	bf00      	nop
}
 8006fd8:	370c      	adds	r7, #12
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr

08006fe2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006fe2:	b480      	push	{r7}
 8006fe4:	b083      	sub	sp, #12
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2201      	movs	r2, #1
 8006fee:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007002:	2300      	movs	r3, #0
}
 8007004:	4618      	mov	r0, r3
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f002 f85e 	bl	80090f2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	791b      	ldrb	r3, [r3, #4]
 800703a:	4619      	mov	r1, r3
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f001 fe5b 	bl	8008cf8 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	795b      	ldrb	r3, [r3, #5]
 8007046:	4619      	mov	r1, r3
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f001 fe55 	bl	8008cf8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	3708      	adds	r7, #8
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	460b      	mov	r3, r1
 8007062:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	789b      	ldrb	r3, [r3, #2]
 8007068:	2b01      	cmp	r3, #1
 800706a:	d10f      	bne.n	800708c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2202      	movs	r2, #2
 8007070:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2201      	movs	r2, #1
 8007076:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800707e:	78fb      	ldrb	r3, [r7, #3]
 8007080:	b29a      	uxth	r2, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800708c:	2200      	movs	r2, #0
 800708e:	2100      	movs	r1, #0
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 f805 	bl	80070a0 <USBH_CtlReq>
 8007096:	4603      	mov	r3, r0
}
 8007098:	4618      	mov	r0, r3
 800709a:	3708      	adds	r7, #8
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b086      	sub	sp, #24
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	4613      	mov	r3, r2
 80070ac:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80070ae:	2301      	movs	r3, #1
 80070b0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	789b      	ldrb	r3, [r3, #2]
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d002      	beq.n	80070c0 <USBH_CtlReq+0x20>
 80070ba:	2b02      	cmp	r3, #2
 80070bc:	d00f      	beq.n	80070de <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80070be:	e027      	b.n	8007110 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	68ba      	ldr	r2, [r7, #8]
 80070c4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	88fa      	ldrh	r2, [r7, #6]
 80070ca:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2201      	movs	r2, #1
 80070d0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2202      	movs	r2, #2
 80070d6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80070d8:	2301      	movs	r3, #1
 80070da:	75fb      	strb	r3, [r7, #23]
      break;
 80070dc:	e018      	b.n	8007110 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80070de:	68f8      	ldr	r0, [r7, #12]
 80070e0:	f000 f81c 	bl	800711c <USBH_HandleControl>
 80070e4:	4603      	mov	r3, r0
 80070e6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80070e8:	7dfb      	ldrb	r3, [r7, #23]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d002      	beq.n	80070f4 <USBH_CtlReq+0x54>
 80070ee:	7dfb      	ldrb	r3, [r7, #23]
 80070f0:	2b03      	cmp	r3, #3
 80070f2:	d106      	bne.n	8007102 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2201      	movs	r2, #1
 80070f8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2200      	movs	r2, #0
 80070fe:	761a      	strb	r2, [r3, #24]
      break;
 8007100:	e005      	b.n	800710e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007102:	7dfb      	ldrb	r3, [r7, #23]
 8007104:	2b02      	cmp	r3, #2
 8007106:	d102      	bne.n	800710e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2201      	movs	r2, #1
 800710c:	709a      	strb	r2, [r3, #2]
      break;
 800710e:	bf00      	nop
  }
  return status;
 8007110:	7dfb      	ldrb	r3, [r7, #23]
}
 8007112:	4618      	mov	r0, r3
 8007114:	3718      	adds	r7, #24
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
	...

0800711c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b086      	sub	sp, #24
 8007120:	af02      	add	r7, sp, #8
 8007122:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007124:	2301      	movs	r3, #1
 8007126:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007128:	2300      	movs	r3, #0
 800712a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	7e1b      	ldrb	r3, [r3, #24]
 8007130:	3b01      	subs	r3, #1
 8007132:	2b0a      	cmp	r3, #10
 8007134:	f200 8158 	bhi.w	80073e8 <USBH_HandleControl+0x2cc>
 8007138:	a201      	add	r2, pc, #4	; (adr r2, 8007140 <USBH_HandleControl+0x24>)
 800713a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800713e:	bf00      	nop
 8007140:	0800716d 	.word	0x0800716d
 8007144:	08007187 	.word	0x08007187
 8007148:	080071f1 	.word	0x080071f1
 800714c:	08007217 	.word	0x08007217
 8007150:	0800724f 	.word	0x0800724f
 8007154:	0800727b 	.word	0x0800727b
 8007158:	080072cd 	.word	0x080072cd
 800715c:	080072ef 	.word	0x080072ef
 8007160:	0800732b 	.word	0x0800732b
 8007164:	08007353 	.word	0x08007353
 8007168:	08007391 	.word	0x08007391
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f103 0110 	add.w	r1, r3, #16
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	795b      	ldrb	r3, [r3, #5]
 8007176:	461a      	mov	r2, r3
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 f945 	bl	8007408 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2202      	movs	r2, #2
 8007182:	761a      	strb	r2, [r3, #24]
      break;
 8007184:	e13b      	b.n	80073fe <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	795b      	ldrb	r3, [r3, #5]
 800718a:	4619      	mov	r1, r3
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f002 f85d 	bl	800924c <USBH_LL_GetURBState>
 8007192:	4603      	mov	r3, r0
 8007194:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007196:	7bbb      	ldrb	r3, [r7, #14]
 8007198:	2b01      	cmp	r3, #1
 800719a:	d11e      	bne.n	80071da <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	7c1b      	ldrb	r3, [r3, #16]
 80071a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80071a4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	8adb      	ldrh	r3, [r3, #22]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00a      	beq.n	80071c4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80071ae:	7b7b      	ldrb	r3, [r7, #13]
 80071b0:	2b80      	cmp	r3, #128	; 0x80
 80071b2:	d103      	bne.n	80071bc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2203      	movs	r2, #3
 80071b8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80071ba:	e117      	b.n	80073ec <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2205      	movs	r2, #5
 80071c0:	761a      	strb	r2, [r3, #24]
      break;
 80071c2:	e113      	b.n	80073ec <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 80071c4:	7b7b      	ldrb	r3, [r7, #13]
 80071c6:	2b80      	cmp	r3, #128	; 0x80
 80071c8:	d103      	bne.n	80071d2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2209      	movs	r2, #9
 80071ce:	761a      	strb	r2, [r3, #24]
      break;
 80071d0:	e10c      	b.n	80073ec <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2207      	movs	r2, #7
 80071d6:	761a      	strb	r2, [r3, #24]
      break;
 80071d8:	e108      	b.n	80073ec <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80071da:	7bbb      	ldrb	r3, [r7, #14]
 80071dc:	2b04      	cmp	r3, #4
 80071de:	d003      	beq.n	80071e8 <USBH_HandleControl+0xcc>
 80071e0:	7bbb      	ldrb	r3, [r7, #14]
 80071e2:	2b02      	cmp	r3, #2
 80071e4:	f040 8102 	bne.w	80073ec <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	220b      	movs	r2, #11
 80071ec:	761a      	strb	r2, [r3, #24]
      break;
 80071ee:	e0fd      	b.n	80073ec <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80071f6:	b29a      	uxth	r2, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6899      	ldr	r1, [r3, #8]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	899a      	ldrh	r2, [r3, #12]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	791b      	ldrb	r3, [r3, #4]
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 f93c 	bl	8007486 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2204      	movs	r2, #4
 8007212:	761a      	strb	r2, [r3, #24]
      break;
 8007214:	e0f3      	b.n	80073fe <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	791b      	ldrb	r3, [r3, #4]
 800721a:	4619      	mov	r1, r3
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f002 f815 	bl	800924c <USBH_LL_GetURBState>
 8007222:	4603      	mov	r3, r0
 8007224:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007226:	7bbb      	ldrb	r3, [r7, #14]
 8007228:	2b01      	cmp	r3, #1
 800722a:	d102      	bne.n	8007232 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2209      	movs	r2, #9
 8007230:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007232:	7bbb      	ldrb	r3, [r7, #14]
 8007234:	2b05      	cmp	r3, #5
 8007236:	d102      	bne.n	800723e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007238:	2303      	movs	r3, #3
 800723a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800723c:	e0d8      	b.n	80073f0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800723e:	7bbb      	ldrb	r3, [r7, #14]
 8007240:	2b04      	cmp	r3, #4
 8007242:	f040 80d5 	bne.w	80073f0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	220b      	movs	r2, #11
 800724a:	761a      	strb	r2, [r3, #24]
      break;
 800724c:	e0d0      	b.n	80073f0 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6899      	ldr	r1, [r3, #8]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	899a      	ldrh	r2, [r3, #12]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	7958      	ldrb	r0, [r3, #5]
 800725a:	2301      	movs	r3, #1
 800725c:	9300      	str	r3, [sp, #0]
 800725e:	4603      	mov	r3, r0
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 f8eb 	bl	800743c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800726c:	b29a      	uxth	r2, r3
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2206      	movs	r2, #6
 8007276:	761a      	strb	r2, [r3, #24]
      break;
 8007278:	e0c1      	b.n	80073fe <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	795b      	ldrb	r3, [r3, #5]
 800727e:	4619      	mov	r1, r3
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f001 ffe3 	bl	800924c <USBH_LL_GetURBState>
 8007286:	4603      	mov	r3, r0
 8007288:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800728a:	7bbb      	ldrb	r3, [r7, #14]
 800728c:	2b01      	cmp	r3, #1
 800728e:	d103      	bne.n	8007298 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2207      	movs	r2, #7
 8007294:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007296:	e0ad      	b.n	80073f4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8007298:	7bbb      	ldrb	r3, [r7, #14]
 800729a:	2b05      	cmp	r3, #5
 800729c:	d105      	bne.n	80072aa <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	220c      	movs	r2, #12
 80072a2:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80072a4:	2303      	movs	r3, #3
 80072a6:	73fb      	strb	r3, [r7, #15]
      break;
 80072a8:	e0a4      	b.n	80073f4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 80072aa:	7bbb      	ldrb	r3, [r7, #14]
 80072ac:	2b02      	cmp	r3, #2
 80072ae:	d103      	bne.n	80072b8 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2205      	movs	r2, #5
 80072b4:	761a      	strb	r2, [r3, #24]
      break;
 80072b6:	e09d      	b.n	80073f4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 80072b8:	7bbb      	ldrb	r3, [r7, #14]
 80072ba:	2b04      	cmp	r3, #4
 80072bc:	f040 809a 	bne.w	80073f4 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	220b      	movs	r2, #11
 80072c4:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80072c6:	2302      	movs	r3, #2
 80072c8:	73fb      	strb	r3, [r7, #15]
      break;
 80072ca:	e093      	b.n	80073f4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	791b      	ldrb	r3, [r3, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	2100      	movs	r1, #0
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 f8d6 	bl	8007486 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80072e0:	b29a      	uxth	r2, r3
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2208      	movs	r2, #8
 80072ea:	761a      	strb	r2, [r3, #24]

      break;
 80072ec:	e087      	b.n	80073fe <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	791b      	ldrb	r3, [r3, #4]
 80072f2:	4619      	mov	r1, r3
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f001 ffa9 	bl	800924c <USBH_LL_GetURBState>
 80072fa:	4603      	mov	r3, r0
 80072fc:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80072fe:	7bbb      	ldrb	r3, [r7, #14]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d105      	bne.n	8007310 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	220d      	movs	r2, #13
 8007308:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800730a:	2300      	movs	r3, #0
 800730c:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800730e:	e073      	b.n	80073f8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8007310:	7bbb      	ldrb	r3, [r7, #14]
 8007312:	2b04      	cmp	r3, #4
 8007314:	d103      	bne.n	800731e <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	220b      	movs	r2, #11
 800731a:	761a      	strb	r2, [r3, #24]
      break;
 800731c:	e06c      	b.n	80073f8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800731e:	7bbb      	ldrb	r3, [r7, #14]
 8007320:	2b05      	cmp	r3, #5
 8007322:	d169      	bne.n	80073f8 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8007324:	2303      	movs	r3, #3
 8007326:	73fb      	strb	r3, [r7, #15]
      break;
 8007328:	e066      	b.n	80073f8 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	795a      	ldrb	r2, [r3, #5]
 800732e:	2301      	movs	r3, #1
 8007330:	9300      	str	r3, [sp, #0]
 8007332:	4613      	mov	r3, r2
 8007334:	2200      	movs	r2, #0
 8007336:	2100      	movs	r1, #0
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 f87f 	bl	800743c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007344:	b29a      	uxth	r2, r3
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	220a      	movs	r2, #10
 800734e:	761a      	strb	r2, [r3, #24]
      break;
 8007350:	e055      	b.n	80073fe <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	795b      	ldrb	r3, [r3, #5]
 8007356:	4619      	mov	r1, r3
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f001 ff77 	bl	800924c <USBH_LL_GetURBState>
 800735e:	4603      	mov	r3, r0
 8007360:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007362:	7bbb      	ldrb	r3, [r7, #14]
 8007364:	2b01      	cmp	r3, #1
 8007366:	d105      	bne.n	8007374 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8007368:	2300      	movs	r3, #0
 800736a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	220d      	movs	r2, #13
 8007370:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007372:	e043      	b.n	80073fc <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007374:	7bbb      	ldrb	r3, [r7, #14]
 8007376:	2b02      	cmp	r3, #2
 8007378:	d103      	bne.n	8007382 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2209      	movs	r2, #9
 800737e:	761a      	strb	r2, [r3, #24]
      break;
 8007380:	e03c      	b.n	80073fc <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8007382:	7bbb      	ldrb	r3, [r7, #14]
 8007384:	2b04      	cmp	r3, #4
 8007386:	d139      	bne.n	80073fc <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	220b      	movs	r2, #11
 800738c:	761a      	strb	r2, [r3, #24]
      break;
 800738e:	e035      	b.n	80073fc <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	7e5b      	ldrb	r3, [r3, #25]
 8007394:	3301      	adds	r3, #1
 8007396:	b2da      	uxtb	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	765a      	strb	r2, [r3, #25]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	7e5b      	ldrb	r3, [r3, #25]
 80073a0:	2b02      	cmp	r3, #2
 80073a2:	d806      	bhi.n	80073b2 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2201      	movs	r2, #1
 80073a8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2201      	movs	r2, #1
 80073ae:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80073b0:	e025      	b.n	80073fe <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073b8:	2106      	movs	r1, #6
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	795b      	ldrb	r3, [r3, #5]
 80073c8:	4619      	mov	r1, r3
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f001 fc94 	bl	8008cf8 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	791b      	ldrb	r3, [r3, #4]
 80073d4:	4619      	mov	r1, r3
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f001 fc8e 	bl	8008cf8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80073e2:	2302      	movs	r3, #2
 80073e4:	73fb      	strb	r3, [r7, #15]
      break;
 80073e6:	e00a      	b.n	80073fe <USBH_HandleControl+0x2e2>

    default:
      break;
 80073e8:	bf00      	nop
 80073ea:	e008      	b.n	80073fe <USBH_HandleControl+0x2e2>
      break;
 80073ec:	bf00      	nop
 80073ee:	e006      	b.n	80073fe <USBH_HandleControl+0x2e2>
      break;
 80073f0:	bf00      	nop
 80073f2:	e004      	b.n	80073fe <USBH_HandleControl+0x2e2>
      break;
 80073f4:	bf00      	nop
 80073f6:	e002      	b.n	80073fe <USBH_HandleControl+0x2e2>
      break;
 80073f8:	bf00      	nop
 80073fa:	e000      	b.n	80073fe <USBH_HandleControl+0x2e2>
      break;
 80073fc:	bf00      	nop
  }

  return status;
 80073fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007400:	4618      	mov	r0, r3
 8007402:	3710      	adds	r7, #16
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b088      	sub	sp, #32
 800740c:	af04      	add	r7, sp, #16
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	60b9      	str	r1, [r7, #8]
 8007412:	4613      	mov	r3, r2
 8007414:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007416:	79f9      	ldrb	r1, [r7, #7]
 8007418:	2300      	movs	r3, #0
 800741a:	9303      	str	r3, [sp, #12]
 800741c:	2308      	movs	r3, #8
 800741e:	9302      	str	r3, [sp, #8]
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	9301      	str	r3, [sp, #4]
 8007424:	2300      	movs	r3, #0
 8007426:	9300      	str	r3, [sp, #0]
 8007428:	2300      	movs	r3, #0
 800742a:	2200      	movs	r2, #0
 800742c:	68f8      	ldr	r0, [r7, #12]
 800742e:	f001 fedc 	bl	80091ea <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007432:	2300      	movs	r3, #0
}
 8007434:	4618      	mov	r0, r3
 8007436:	3710      	adds	r7, #16
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b088      	sub	sp, #32
 8007440:	af04      	add	r7, sp, #16
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	4611      	mov	r1, r2
 8007448:	461a      	mov	r2, r3
 800744a:	460b      	mov	r3, r1
 800744c:	80fb      	strh	r3, [r7, #6]
 800744e:	4613      	mov	r3, r2
 8007450:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007458:	2b00      	cmp	r3, #0
 800745a:	d001      	beq.n	8007460 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800745c:	2300      	movs	r3, #0
 800745e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007460:	7979      	ldrb	r1, [r7, #5]
 8007462:	7e3b      	ldrb	r3, [r7, #24]
 8007464:	9303      	str	r3, [sp, #12]
 8007466:	88fb      	ldrh	r3, [r7, #6]
 8007468:	9302      	str	r3, [sp, #8]
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	9301      	str	r3, [sp, #4]
 800746e:	2301      	movs	r3, #1
 8007470:	9300      	str	r3, [sp, #0]
 8007472:	2300      	movs	r3, #0
 8007474:	2200      	movs	r2, #0
 8007476:	68f8      	ldr	r0, [r7, #12]
 8007478:	f001 feb7 	bl	80091ea <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3710      	adds	r7, #16
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007486:	b580      	push	{r7, lr}
 8007488:	b088      	sub	sp, #32
 800748a:	af04      	add	r7, sp, #16
 800748c:	60f8      	str	r0, [r7, #12]
 800748e:	60b9      	str	r1, [r7, #8]
 8007490:	4611      	mov	r1, r2
 8007492:	461a      	mov	r2, r3
 8007494:	460b      	mov	r3, r1
 8007496:	80fb      	strh	r3, [r7, #6]
 8007498:	4613      	mov	r3, r2
 800749a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800749c:	7979      	ldrb	r1, [r7, #5]
 800749e:	2300      	movs	r3, #0
 80074a0:	9303      	str	r3, [sp, #12]
 80074a2:	88fb      	ldrh	r3, [r7, #6]
 80074a4:	9302      	str	r3, [sp, #8]
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	9301      	str	r3, [sp, #4]
 80074aa:	2301      	movs	r3, #1
 80074ac:	9300      	str	r3, [sp, #0]
 80074ae:	2300      	movs	r3, #0
 80074b0:	2201      	movs	r2, #1
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f001 fe99 	bl	80091ea <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80074b8:	2300      	movs	r3, #0

}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3710      	adds	r7, #16
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}

080074c2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80074c2:	b580      	push	{r7, lr}
 80074c4:	b088      	sub	sp, #32
 80074c6:	af04      	add	r7, sp, #16
 80074c8:	60f8      	str	r0, [r7, #12]
 80074ca:	60b9      	str	r1, [r7, #8]
 80074cc:	4611      	mov	r1, r2
 80074ce:	461a      	mov	r2, r3
 80074d0:	460b      	mov	r3, r1
 80074d2:	80fb      	strh	r3, [r7, #6]
 80074d4:	4613      	mov	r3, r2
 80074d6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d001      	beq.n	80074e6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80074e2:	2300      	movs	r3, #0
 80074e4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80074e6:	7979      	ldrb	r1, [r7, #5]
 80074e8:	7e3b      	ldrb	r3, [r7, #24]
 80074ea:	9303      	str	r3, [sp, #12]
 80074ec:	88fb      	ldrh	r3, [r7, #6]
 80074ee:	9302      	str	r3, [sp, #8]
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	9301      	str	r3, [sp, #4]
 80074f4:	2301      	movs	r3, #1
 80074f6:	9300      	str	r3, [sp, #0]
 80074f8:	2302      	movs	r3, #2
 80074fa:	2200      	movs	r2, #0
 80074fc:	68f8      	ldr	r0, [r7, #12]
 80074fe:	f001 fe74 	bl	80091ea <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007502:	2300      	movs	r3, #0
}
 8007504:	4618      	mov	r0, r3
 8007506:	3710      	adds	r7, #16
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b088      	sub	sp, #32
 8007510:	af04      	add	r7, sp, #16
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	4611      	mov	r1, r2
 8007518:	461a      	mov	r2, r3
 800751a:	460b      	mov	r3, r1
 800751c:	80fb      	strh	r3, [r7, #6]
 800751e:	4613      	mov	r3, r2
 8007520:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007522:	7979      	ldrb	r1, [r7, #5]
 8007524:	2300      	movs	r3, #0
 8007526:	9303      	str	r3, [sp, #12]
 8007528:	88fb      	ldrh	r3, [r7, #6]
 800752a:	9302      	str	r3, [sp, #8]
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	9301      	str	r3, [sp, #4]
 8007530:	2301      	movs	r3, #1
 8007532:	9300      	str	r3, [sp, #0]
 8007534:	2302      	movs	r3, #2
 8007536:	2201      	movs	r2, #1
 8007538:	68f8      	ldr	r0, [r7, #12]
 800753a:	f001 fe56 	bl	80091ea <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800753e:	2300      	movs	r3, #0
}
 8007540:	4618      	mov	r0, r3
 8007542:	3710      	adds	r7, #16
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007548:	b590      	push	{r4, r7, lr}
 800754a:	b089      	sub	sp, #36	; 0x24
 800754c:	af04      	add	r7, sp, #16
 800754e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007556:	7919      	ldrb	r1, [r3, #4]
 8007558:	2350      	movs	r3, #80	; 0x50
 800755a:	2206      	movs	r2, #6
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f7ff fc95 	bl	8006e8c <USBH_FindInterface>
 8007562:	4603      	mov	r3, r0
 8007564:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8007566:	7bfb      	ldrb	r3, [r7, #15]
 8007568:	2bff      	cmp	r3, #255	; 0xff
 800756a:	d002      	beq.n	8007572 <USBH_MSC_InterfaceInit+0x2a>
 800756c:	7bfb      	ldrb	r3, [r7, #15]
 800756e:	2b01      	cmp	r3, #1
 8007570:	d901      	bls.n	8007576 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007572:	2302      	movs	r3, #2
 8007574:	e0ef      	b.n	8007756 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8007576:	7bfb      	ldrb	r3, [r7, #15]
 8007578:	4619      	mov	r1, r3
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f7ff fc6a 	bl	8006e54 <USBH_SelectInterface>
 8007580:	4603      	mov	r3, r0
 8007582:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007584:	7bbb      	ldrb	r3, [r7, #14]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d001      	beq.n	800758e <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800758a:	2302      	movs	r3, #2
 800758c:	e0e3      	b.n	8007756 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007594:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007598:	f001 ff5a 	bl	8009450 <malloc>
 800759c:	4603      	mov	r3, r0
 800759e:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075a6:	69db      	ldr	r3, [r3, #28]
 80075a8:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d101      	bne.n	80075b4 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 80075b0:	2302      	movs	r3, #2
 80075b2:	e0d0      	b.n	8007756 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 80075b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075b8:	2100      	movs	r1, #0
 80075ba:	68b8      	ldr	r0, [r7, #8]
 80075bc:	f001 ff63 	bl	8009486 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80075c0:	7bfb      	ldrb	r3, [r7, #15]
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	211a      	movs	r1, #26
 80075c6:	fb01 f303 	mul.w	r3, r1, r3
 80075ca:	4413      	add	r3, r2
 80075cc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	b25b      	sxtb	r3, r3
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	da16      	bge.n	8007606 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80075d8:	7bfb      	ldrb	r3, [r7, #15]
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	211a      	movs	r1, #26
 80075de:	fb01 f303 	mul.w	r3, r1, r3
 80075e2:	4413      	add	r3, r2
 80075e4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80075e8:	781a      	ldrb	r2, [r3, #0]
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80075ee:	7bfb      	ldrb	r3, [r7, #15]
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	211a      	movs	r1, #26
 80075f4:	fb01 f303 	mul.w	r3, r1, r3
 80075f8:	4413      	add	r3, r2
 80075fa:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80075fe:	881a      	ldrh	r2, [r3, #0]
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	815a      	strh	r2, [r3, #10]
 8007604:	e015      	b.n	8007632 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8007606:	7bfb      	ldrb	r3, [r7, #15]
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	211a      	movs	r1, #26
 800760c:	fb01 f303 	mul.w	r3, r1, r3
 8007610:	4413      	add	r3, r2
 8007612:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007616:	781a      	ldrb	r2, [r3, #0]
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800761c:	7bfb      	ldrb	r3, [r7, #15]
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	211a      	movs	r1, #26
 8007622:	fb01 f303 	mul.w	r3, r1, r3
 8007626:	4413      	add	r3, r2
 8007628:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800762c:	881a      	ldrh	r2, [r3, #0]
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007632:	7bfb      	ldrb	r3, [r7, #15]
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	211a      	movs	r1, #26
 8007638:	fb01 f303 	mul.w	r3, r1, r3
 800763c:	4413      	add	r3, r2
 800763e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	b25b      	sxtb	r3, r3
 8007646:	2b00      	cmp	r3, #0
 8007648:	da16      	bge.n	8007678 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800764a:	7bfb      	ldrb	r3, [r7, #15]
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	211a      	movs	r1, #26
 8007650:	fb01 f303 	mul.w	r3, r1, r3
 8007654:	4413      	add	r3, r2
 8007656:	f203 3356 	addw	r3, r3, #854	; 0x356
 800765a:	781a      	ldrb	r2, [r3, #0]
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007660:	7bfb      	ldrb	r3, [r7, #15]
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	211a      	movs	r1, #26
 8007666:	fb01 f303 	mul.w	r3, r1, r3
 800766a:	4413      	add	r3, r2
 800766c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007670:	881a      	ldrh	r2, [r3, #0]
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	815a      	strh	r2, [r3, #10]
 8007676:	e015      	b.n	80076a4 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8007678:	7bfb      	ldrb	r3, [r7, #15]
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	211a      	movs	r1, #26
 800767e:	fb01 f303 	mul.w	r3, r1, r3
 8007682:	4413      	add	r3, r2
 8007684:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007688:	781a      	ldrb	r2, [r3, #0]
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800768e:	7bfb      	ldrb	r3, [r7, #15]
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	211a      	movs	r1, #26
 8007694:	fb01 f303 	mul.w	r3, r1, r3
 8007698:	4413      	add	r3, r2
 800769a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800769e:	881a      	ldrh	r2, [r3, #0]
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	2200      	movs	r2, #0
 80076a8:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	2200      	movs	r2, #0
 80076ae:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	2200      	movs	r2, #0
 80076b4:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	799b      	ldrb	r3, [r3, #6]
 80076ba:	4619      	mov	r1, r3
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f001 fafa 	bl	8008cb6 <USBH_AllocPipe>
 80076c2:	4603      	mov	r3, r0
 80076c4:	461a      	mov	r2, r3
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	79db      	ldrb	r3, [r3, #7]
 80076ce:	4619      	mov	r1, r3
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f001 faf0 	bl	8008cb6 <USBH_AllocPipe>
 80076d6:	4603      	mov	r3, r0
 80076d8:	461a      	mov	r2, r3
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 fda4 	bl	800822c <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	7959      	ldrb	r1, [r3, #5]
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	7998      	ldrb	r0, [r3, #6]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80076f8:	68ba      	ldr	r2, [r7, #8]
 80076fa:	8912      	ldrh	r2, [r2, #8]
 80076fc:	9202      	str	r2, [sp, #8]
 80076fe:	2202      	movs	r2, #2
 8007700:	9201      	str	r2, [sp, #4]
 8007702:	9300      	str	r3, [sp, #0]
 8007704:	4623      	mov	r3, r4
 8007706:	4602      	mov	r2, r0
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f001 faa5 	bl	8008c58 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	7919      	ldrb	r1, [r3, #4]
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	79d8      	ldrb	r0, [r3, #7]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007722:	68ba      	ldr	r2, [r7, #8]
 8007724:	8952      	ldrh	r2, [r2, #10]
 8007726:	9202      	str	r2, [sp, #8]
 8007728:	2202      	movs	r2, #2
 800772a:	9201      	str	r2, [sp, #4]
 800772c:	9300      	str	r3, [sp, #0]
 800772e:	4623      	mov	r3, r4
 8007730:	4602      	mov	r2, r0
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f001 fa90 	bl	8008c58 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	791b      	ldrb	r3, [r3, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	4619      	mov	r1, r3
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f001 fdad 	bl	80092a0 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	795b      	ldrb	r3, [r3, #5]
 800774a:	2200      	movs	r2, #0
 800774c:	4619      	mov	r1, r3
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f001 fda6 	bl	80092a0 <USBH_LL_SetToggle>

  return USBH_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3714      	adds	r7, #20
 800775a:	46bd      	mov	sp, r7
 800775c:	bd90      	pop	{r4, r7, pc}

0800775e <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800775e:	b580      	push	{r7, lr}
 8007760:	b084      	sub	sp, #16
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800776c:	69db      	ldr	r3, [r3, #28]
 800776e:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	795b      	ldrb	r3, [r3, #5]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d00e      	beq.n	8007796 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	795b      	ldrb	r3, [r3, #5]
 800777c:	4619      	mov	r1, r3
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f001 fa89 	bl	8008c96 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	795b      	ldrb	r3, [r3, #5]
 8007788:	4619      	mov	r1, r3
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f001 fab4 	bl	8008cf8 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2200      	movs	r2, #0
 8007794:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	791b      	ldrb	r3, [r3, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d00e      	beq.n	80077bc <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	791b      	ldrb	r3, [r3, #4]
 80077a2:	4619      	mov	r1, r3
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f001 fa76 	bl	8008c96 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	791b      	ldrb	r3, [r3, #4]
 80077ae:	4619      	mov	r1, r3
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f001 faa1 	bl	8008cf8 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2200      	movs	r2, #0
 80077ba:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077c2:	69db      	ldr	r3, [r3, #28]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d00b      	beq.n	80077e0 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077ce:	69db      	ldr	r3, [r3, #28]
 80077d0:	4618      	mov	r0, r3
 80077d2:	f001 fe45 	bl	8009460 <free>
    phost->pActiveClass->pData = 0U;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077dc:	2200      	movs	r2, #0
 80077de:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b084      	sub	sp, #16
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077f8:	69db      	ldr	r3, [r3, #28]
 80077fa:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 80077fc:	2301      	movs	r3, #1
 80077fe:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	7b9b      	ldrb	r3, [r3, #14]
 8007804:	2b02      	cmp	r3, #2
 8007806:	d004      	beq.n	8007812 <USBH_MSC_ClassRequest+0x28>
 8007808:	2b03      	cmp	r3, #3
 800780a:	d03e      	beq.n	800788a <USBH_MSC_ClassRequest+0xa0>
 800780c:	2b00      	cmp	r3, #0
 800780e:	d000      	beq.n	8007812 <USBH_MSC_ClassRequest+0x28>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
      }
      break;

    default:
      break;
 8007810:	e04a      	b.n	80078a8 <USBH_MSC_ClassRequest+0xbe>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	4619      	mov	r1, r3
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 fcea 	bl	80081f0 <USBH_MSC_BOT_REQ_GetMaxLUN>
 800781c:	4603      	mov	r3, r0
 800781e:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_NOT_SUPPORTED)
 8007820:	7bfb      	ldrb	r3, [r7, #15]
 8007822:	2b03      	cmp	r3, #3
 8007824:	d104      	bne.n	8007830 <USBH_MSC_ClassRequest+0x46>
        MSC_Handle->max_lun = 0U;
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	2200      	movs	r2, #0
 800782a:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800782c:	2300      	movs	r3, #0
 800782e:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_OK)
 8007830:	7bfb      	ldrb	r3, [r7, #15]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d135      	bne.n	80078a2 <USBH_MSC_ClassRequest+0xb8>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	2b02      	cmp	r3, #2
 800783c:	d804      	bhi.n	8007848 <USBH_MSC_ClassRequest+0x5e>
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	3301      	adds	r3, #1
 8007844:	b2da      	uxtb	r2, r3
 8007846:	e000      	b.n	800784a <USBH_MSC_ClassRequest+0x60>
 8007848:	2202      	movs	r2, #2
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800784e:	2300      	movs	r3, #0
 8007850:	73bb      	strb	r3, [r7, #14]
 8007852:	e014      	b.n	800787e <USBH_MSC_ClassRequest+0x94>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8007854:	7bbb      	ldrb	r3, [r7, #14]
 8007856:	68ba      	ldr	r2, [r7, #8]
 8007858:	2134      	movs	r1, #52	; 0x34
 800785a:	fb01 f303 	mul.w	r3, r1, r3
 800785e:	4413      	add	r3, r2
 8007860:	3392      	adds	r3, #146	; 0x92
 8007862:	2202      	movs	r2, #2
 8007864:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8007866:	7bbb      	ldrb	r3, [r7, #14]
 8007868:	68ba      	ldr	r2, [r7, #8]
 800786a:	2134      	movs	r1, #52	; 0x34
 800786c:	fb01 f303 	mul.w	r3, r1, r3
 8007870:	4413      	add	r3, r2
 8007872:	33c1      	adds	r3, #193	; 0xc1
 8007874:	2200      	movs	r2, #0
 8007876:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8007878:	7bbb      	ldrb	r3, [r7, #14]
 800787a:	3301      	adds	r3, #1
 800787c:	73bb      	strb	r3, [r7, #14]
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	7bba      	ldrb	r2, [r7, #14]
 8007884:	429a      	cmp	r2, r3
 8007886:	d3e5      	bcc.n	8007854 <USBH_MSC_ClassRequest+0x6a>
      break;
 8007888:	e00b      	b.n	80078a2 <USBH_MSC_ClassRequest+0xb8>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800788a:	2100      	movs	r1, #0
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f7ff fbe3 	bl	8007058 <USBH_ClrFeature>
 8007892:	4603      	mov	r3, r0
 8007894:	2b00      	cmp	r3, #0
 8007896:	d106      	bne.n	80078a6 <USBH_MSC_ClassRequest+0xbc>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	7bda      	ldrb	r2, [r3, #15]
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	739a      	strb	r2, [r3, #14]
      break;
 80078a0:	e001      	b.n	80078a6 <USBH_MSC_ClassRequest+0xbc>
      break;
 80078a2:	bf00      	nop
 80078a4:	e000      	b.n	80078a8 <USBH_MSC_ClassRequest+0xbe>
      break;
 80078a6:	bf00      	nop
  }

  return status;
 80078a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
	...

080078b4 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b086      	sub	sp, #24
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078c2:	69db      	ldr	r3, [r3, #28]
 80078c4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 80078c6:	2301      	movs	r3, #1
 80078c8:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 80078ca:	2301      	movs	r3, #1
 80078cc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 80078ce:	2301      	movs	r3, #1
 80078d0:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	7b1b      	ldrb	r3, [r3, #12]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d003      	beq.n	80078e2 <USBH_MSC_Process+0x2e>
 80078da:	2b01      	cmp	r3, #1
 80078dc:	f000 8271 	beq.w	8007dc2 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 80078e0:	e272      	b.n	8007dc8 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	429a      	cmp	r2, r3
 80078f0:	f080 824f 	bcs.w	8007d92 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80078fa:	4619      	mov	r1, r3
 80078fc:	693a      	ldr	r2, [r7, #16]
 80078fe:	2334      	movs	r3, #52	; 0x34
 8007900:	fb03 f301 	mul.w	r3, r3, r1
 8007904:	4413      	add	r3, r2
 8007906:	3391      	adds	r3, #145	; 0x91
 8007908:	2201      	movs	r2, #1
 800790a:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007912:	4619      	mov	r1, r3
 8007914:	693a      	ldr	r2, [r7, #16]
 8007916:	2334      	movs	r3, #52	; 0x34
 8007918:	fb03 f301 	mul.w	r3, r3, r1
 800791c:	4413      	add	r3, r2
 800791e:	3390      	adds	r3, #144	; 0x90
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	2b08      	cmp	r3, #8
 8007924:	f200 8243 	bhi.w	8007dae <USBH_MSC_Process+0x4fa>
 8007928:	a201      	add	r2, pc, #4	; (adr r2, 8007930 <USBH_MSC_Process+0x7c>)
 800792a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800792e:	bf00      	nop
 8007930:	08007955 	.word	0x08007955
 8007934:	08007daf 	.word	0x08007daf
 8007938:	08007a1d 	.word	0x08007a1d
 800793c:	08007ba1 	.word	0x08007ba1
 8007940:	0800797b 	.word	0x0800797b
 8007944:	08007c6d 	.word	0x08007c6d
 8007948:	08007daf 	.word	0x08007daf
 800794c:	08007daf 	.word	0x08007daf
 8007950:	08007d81 	.word	0x08007d81
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800795a:	4619      	mov	r1, r3
 800795c:	693a      	ldr	r2, [r7, #16]
 800795e:	2334      	movs	r3, #52	; 0x34
 8007960:	fb03 f301 	mul.w	r3, r3, r1
 8007964:	4413      	add	r3, r2
 8007966:	3390      	adds	r3, #144	; 0x90
 8007968:	2204      	movs	r2, #4
 800796a:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8007978:	e222      	b.n	8007dc0 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007980:	b2d9      	uxtb	r1, r3
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007988:	461a      	mov	r2, r3
 800798a:	2334      	movs	r3, #52	; 0x34
 800798c:	fb03 f302 	mul.w	r3, r3, r2
 8007990:	3398      	adds	r3, #152	; 0x98
 8007992:	693a      	ldr	r2, [r7, #16]
 8007994:	4413      	add	r3, r2
 8007996:	3307      	adds	r3, #7
 8007998:	461a      	mov	r2, r3
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 ff68 	bl	8008870 <USBH_MSC_SCSI_Inquiry>
 80079a0:	4603      	mov	r3, r0
 80079a2:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80079a4:	7bfb      	ldrb	r3, [r7, #15]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d10b      	bne.n	80079c2 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80079b0:	4619      	mov	r1, r3
 80079b2:	693a      	ldr	r2, [r7, #16]
 80079b4:	2334      	movs	r3, #52	; 0x34
 80079b6:	fb03 f301 	mul.w	r3, r3, r1
 80079ba:	4413      	add	r3, r2
 80079bc:	3390      	adds	r3, #144	; 0x90
 80079be:	2202      	movs	r2, #2
 80079c0:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 80079c2:	7bfb      	ldrb	r3, [r7, #15]
 80079c4:	2b02      	cmp	r3, #2
 80079c6:	d10c      	bne.n	80079e2 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80079ce:	4619      	mov	r1, r3
 80079d0:	693a      	ldr	r2, [r7, #16]
 80079d2:	2334      	movs	r3, #52	; 0x34
 80079d4:	fb03 f301 	mul.w	r3, r3, r1
 80079d8:	4413      	add	r3, r2
 80079da:	3390      	adds	r3, #144	; 0x90
 80079dc:	2205      	movs	r2, #5
 80079de:	701a      	strb	r2, [r3, #0]
            break;
 80079e0:	e1e7      	b.n	8007db2 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80079e2:	7bfb      	ldrb	r3, [r7, #15]
 80079e4:	2b04      	cmp	r3, #4
 80079e6:	f040 81e4 	bne.w	8007db2 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80079f0:	4619      	mov	r1, r3
 80079f2:	693a      	ldr	r2, [r7, #16]
 80079f4:	2334      	movs	r3, #52	; 0x34
 80079f6:	fb03 f301 	mul.w	r3, r3, r1
 80079fa:	4413      	add	r3, r2
 80079fc:	3390      	adds	r3, #144	; 0x90
 80079fe:	2201      	movs	r2, #1
 8007a00:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007a08:	4619      	mov	r1, r3
 8007a0a:	693a      	ldr	r2, [r7, #16]
 8007a0c:	2334      	movs	r3, #52	; 0x34
 8007a0e:	fb03 f301 	mul.w	r3, r3, r1
 8007a12:	4413      	add	r3, r2
 8007a14:	3391      	adds	r3, #145	; 0x91
 8007a16:	2202      	movs	r2, #2
 8007a18:	701a      	strb	r2, [r3, #0]
            break;
 8007a1a:	e1ca      	b.n	8007db2 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	4619      	mov	r1, r3
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 fe64 	bl	80086f4 <USBH_MSC_SCSI_TestUnitReady>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8007a30:	7bbb      	ldrb	r3, [r7, #14]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d149      	bne.n	8007aca <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	693a      	ldr	r2, [r7, #16]
 8007a40:	2334      	movs	r3, #52	; 0x34
 8007a42:	fb03 f301 	mul.w	r3, r3, r1
 8007a46:	4413      	add	r3, r2
 8007a48:	3392      	adds	r3, #146	; 0x92
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d00c      	beq.n	8007a6a <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007a56:	4619      	mov	r1, r3
 8007a58:	693a      	ldr	r2, [r7, #16]
 8007a5a:	2334      	movs	r3, #52	; 0x34
 8007a5c:	fb03 f301 	mul.w	r3, r3, r1
 8007a60:	4413      	add	r3, r2
 8007a62:	33c1      	adds	r3, #193	; 0xc1
 8007a64:	2201      	movs	r2, #1
 8007a66:	701a      	strb	r2, [r3, #0]
 8007a68:	e00b      	b.n	8007a82 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007a70:	4619      	mov	r1, r3
 8007a72:	693a      	ldr	r2, [r7, #16]
 8007a74:	2334      	movs	r3, #52	; 0x34
 8007a76:	fb03 f301 	mul.w	r3, r3, r1
 8007a7a:	4413      	add	r3, r2
 8007a7c:	33c1      	adds	r3, #193	; 0xc1
 8007a7e:	2200      	movs	r2, #0
 8007a80:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007a88:	4619      	mov	r1, r3
 8007a8a:	693a      	ldr	r2, [r7, #16]
 8007a8c:	2334      	movs	r3, #52	; 0x34
 8007a8e:	fb03 f301 	mul.w	r3, r3, r1
 8007a92:	4413      	add	r3, r2
 8007a94:	3390      	adds	r3, #144	; 0x90
 8007a96:	2203      	movs	r2, #3
 8007a98:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	693a      	ldr	r2, [r7, #16]
 8007aa4:	2334      	movs	r3, #52	; 0x34
 8007aa6:	fb03 f301 	mul.w	r3, r3, r1
 8007aaa:	4413      	add	r3, r2
 8007aac:	3391      	adds	r3, #145	; 0x91
 8007aae:	2200      	movs	r2, #0
 8007ab0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007ab8:	4619      	mov	r1, r3
 8007aba:	693a      	ldr	r2, [r7, #16]
 8007abc:	2334      	movs	r3, #52	; 0x34
 8007abe:	fb03 f301 	mul.w	r3, r3, r1
 8007ac2:	4413      	add	r3, r2
 8007ac4:	3392      	adds	r3, #146	; 0x92
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8007aca:	7bbb      	ldrb	r3, [r7, #14]
 8007acc:	2b02      	cmp	r3, #2
 8007ace:	d14a      	bne.n	8007b66 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	693a      	ldr	r2, [r7, #16]
 8007ada:	2334      	movs	r3, #52	; 0x34
 8007adc:	fb03 f301 	mul.w	r3, r3, r1
 8007ae0:	4413      	add	r3, r2
 8007ae2:	3392      	adds	r3, #146	; 0x92
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	d00c      	beq.n	8007b04 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007af0:	4619      	mov	r1, r3
 8007af2:	693a      	ldr	r2, [r7, #16]
 8007af4:	2334      	movs	r3, #52	; 0x34
 8007af6:	fb03 f301 	mul.w	r3, r3, r1
 8007afa:	4413      	add	r3, r2
 8007afc:	33c1      	adds	r3, #193	; 0xc1
 8007afe:	2201      	movs	r2, #1
 8007b00:	701a      	strb	r2, [r3, #0]
 8007b02:	e00b      	b.n	8007b1c <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007b0a:	4619      	mov	r1, r3
 8007b0c:	693a      	ldr	r2, [r7, #16]
 8007b0e:	2334      	movs	r3, #52	; 0x34
 8007b10:	fb03 f301 	mul.w	r3, r3, r1
 8007b14:	4413      	add	r3, r2
 8007b16:	33c1      	adds	r3, #193	; 0xc1
 8007b18:	2200      	movs	r2, #0
 8007b1a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007b22:	4619      	mov	r1, r3
 8007b24:	693a      	ldr	r2, [r7, #16]
 8007b26:	2334      	movs	r3, #52	; 0x34
 8007b28:	fb03 f301 	mul.w	r3, r3, r1
 8007b2c:	4413      	add	r3, r2
 8007b2e:	3390      	adds	r3, #144	; 0x90
 8007b30:	2205      	movs	r2, #5
 8007b32:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	693a      	ldr	r2, [r7, #16]
 8007b3e:	2334      	movs	r3, #52	; 0x34
 8007b40:	fb03 f301 	mul.w	r3, r3, r1
 8007b44:	4413      	add	r3, r2
 8007b46:	3391      	adds	r3, #145	; 0x91
 8007b48:	2201      	movs	r2, #1
 8007b4a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007b52:	4619      	mov	r1, r3
 8007b54:	693a      	ldr	r2, [r7, #16]
 8007b56:	2334      	movs	r3, #52	; 0x34
 8007b58:	fb03 f301 	mul.w	r3, r3, r1
 8007b5c:	4413      	add	r3, r2
 8007b5e:	3392      	adds	r3, #146	; 0x92
 8007b60:	2202      	movs	r2, #2
 8007b62:	701a      	strb	r2, [r3, #0]
            break;
 8007b64:	e127      	b.n	8007db6 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8007b66:	7bbb      	ldrb	r3, [r7, #14]
 8007b68:	2b04      	cmp	r3, #4
 8007b6a:	f040 8124 	bne.w	8007db6 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007b74:	4619      	mov	r1, r3
 8007b76:	693a      	ldr	r2, [r7, #16]
 8007b78:	2334      	movs	r3, #52	; 0x34
 8007b7a:	fb03 f301 	mul.w	r3, r3, r1
 8007b7e:	4413      	add	r3, r2
 8007b80:	3390      	adds	r3, #144	; 0x90
 8007b82:	2201      	movs	r2, #1
 8007b84:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	693a      	ldr	r2, [r7, #16]
 8007b90:	2334      	movs	r3, #52	; 0x34
 8007b92:	fb03 f301 	mul.w	r3, r3, r1
 8007b96:	4413      	add	r3, r2
 8007b98:	3391      	adds	r3, #145	; 0x91
 8007b9a:	2202      	movs	r2, #2
 8007b9c:	701a      	strb	r2, [r3, #0]
            break;
 8007b9e:	e10a      	b.n	8007db6 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007ba6:	b2d9      	uxtb	r1, r3
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007bae:	461a      	mov	r2, r3
 8007bb0:	2334      	movs	r3, #52	; 0x34
 8007bb2:	fb03 f302 	mul.w	r3, r3, r2
 8007bb6:	3390      	adds	r3, #144	; 0x90
 8007bb8:	693a      	ldr	r2, [r7, #16]
 8007bba:	4413      	add	r3, r2
 8007bbc:	3304      	adds	r3, #4
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 fdda 	bl	800877a <USBH_MSC_SCSI_ReadCapacity>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8007bca:	7bfb      	ldrb	r3, [r7, #15]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d120      	bne.n	8007c12 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	693a      	ldr	r2, [r7, #16]
 8007bda:	2334      	movs	r3, #52	; 0x34
 8007bdc:	fb03 f301 	mul.w	r3, r3, r1
 8007be0:	4413      	add	r3, r2
 8007be2:	3390      	adds	r3, #144	; 0x90
 8007be4:	2201      	movs	r2, #1
 8007be6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007bee:	4619      	mov	r1, r3
 8007bf0:	693a      	ldr	r2, [r7, #16]
 8007bf2:	2334      	movs	r3, #52	; 0x34
 8007bf4:	fb03 f301 	mul.w	r3, r3, r1
 8007bf8:	4413      	add	r3, r2
 8007bfa:	3391      	adds	r3, #145	; 0x91
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007c06:	3301      	adds	r3, #1
 8007c08:	b29a      	uxth	r2, r3
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8007c10:	e0d3      	b.n	8007dba <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8007c12:	7bfb      	ldrb	r3, [r7, #15]
 8007c14:	2b02      	cmp	r3, #2
 8007c16:	d10c      	bne.n	8007c32 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007c1e:	4619      	mov	r1, r3
 8007c20:	693a      	ldr	r2, [r7, #16]
 8007c22:	2334      	movs	r3, #52	; 0x34
 8007c24:	fb03 f301 	mul.w	r3, r3, r1
 8007c28:	4413      	add	r3, r2
 8007c2a:	3390      	adds	r3, #144	; 0x90
 8007c2c:	2205      	movs	r2, #5
 8007c2e:	701a      	strb	r2, [r3, #0]
            break;
 8007c30:	e0c3      	b.n	8007dba <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007c32:	7bfb      	ldrb	r3, [r7, #15]
 8007c34:	2b04      	cmp	r3, #4
 8007c36:	f040 80c0 	bne.w	8007dba <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007c40:	4619      	mov	r1, r3
 8007c42:	693a      	ldr	r2, [r7, #16]
 8007c44:	2334      	movs	r3, #52	; 0x34
 8007c46:	fb03 f301 	mul.w	r3, r3, r1
 8007c4a:	4413      	add	r3, r2
 8007c4c:	3390      	adds	r3, #144	; 0x90
 8007c4e:	2201      	movs	r2, #1
 8007c50:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007c58:	4619      	mov	r1, r3
 8007c5a:	693a      	ldr	r2, [r7, #16]
 8007c5c:	2334      	movs	r3, #52	; 0x34
 8007c5e:	fb03 f301 	mul.w	r3, r3, r1
 8007c62:	4413      	add	r3, r2
 8007c64:	3391      	adds	r3, #145	; 0x91
 8007c66:	2202      	movs	r2, #2
 8007c68:	701a      	strb	r2, [r3, #0]
            break;
 8007c6a:	e0a6      	b.n	8007dba <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007c72:	b2d9      	uxtb	r1, r3
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	2334      	movs	r3, #52	; 0x34
 8007c7e:	fb03 f302 	mul.w	r3, r3, r2
 8007c82:	3398      	adds	r3, #152	; 0x98
 8007c84:	693a      	ldr	r2, [r7, #16]
 8007c86:	4413      	add	r3, r2
 8007c88:	3304      	adds	r3, #4
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 fe94 	bl	80089ba <USBH_MSC_SCSI_RequestSense>
 8007c92:	4603      	mov	r3, r0
 8007c94:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8007c96:	7bfb      	ldrb	r3, [r7, #15]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d145      	bne.n	8007d28 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	693a      	ldr	r2, [r7, #16]
 8007ca6:	2334      	movs	r3, #52	; 0x34
 8007ca8:	fb03 f301 	mul.w	r3, r3, r1
 8007cac:	4413      	add	r3, r2
 8007cae:	339c      	adds	r3, #156	; 0x9c
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	2b06      	cmp	r3, #6
 8007cb4:	d00c      	beq.n	8007cd0 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	693a      	ldr	r2, [r7, #16]
 8007cc0:	2334      	movs	r3, #52	; 0x34
 8007cc2:	fb03 f301 	mul.w	r3, r3, r1
 8007cc6:	4413      	add	r3, r2
 8007cc8:	339c      	adds	r3, #156	; 0x9c
 8007cca:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8007ccc:	2b02      	cmp	r3, #2
 8007cce:	d117      	bne.n	8007d00 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8007cdc:	1ad3      	subs	r3, r2, r3
 8007cde:	f242 720f 	movw	r2, #9999	; 0x270f
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d80c      	bhi.n	8007d00 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007cec:	4619      	mov	r1, r3
 8007cee:	693a      	ldr	r2, [r7, #16]
 8007cf0:	2334      	movs	r3, #52	; 0x34
 8007cf2:	fb03 f301 	mul.w	r3, r3, r1
 8007cf6:	4413      	add	r3, r2
 8007cf8:	3390      	adds	r3, #144	; 0x90
 8007cfa:	2202      	movs	r2, #2
 8007cfc:	701a      	strb	r2, [r3, #0]
                  break;
 8007cfe:	e05f      	b.n	8007dc0 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007d06:	4619      	mov	r1, r3
 8007d08:	693a      	ldr	r2, [r7, #16]
 8007d0a:	2334      	movs	r3, #52	; 0x34
 8007d0c:	fb03 f301 	mul.w	r3, r3, r1
 8007d10:	4413      	add	r3, r2
 8007d12:	3390      	adds	r3, #144	; 0x90
 8007d14:	2201      	movs	r2, #1
 8007d16:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007d1e:	3301      	adds	r3, #1
 8007d20:	b29a      	uxth	r2, r3
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8007d28:	7bfb      	ldrb	r3, [r7, #15]
 8007d2a:	2b02      	cmp	r3, #2
 8007d2c:	d10c      	bne.n	8007d48 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007d34:	4619      	mov	r1, r3
 8007d36:	693a      	ldr	r2, [r7, #16]
 8007d38:	2334      	movs	r3, #52	; 0x34
 8007d3a:	fb03 f301 	mul.w	r3, r3, r1
 8007d3e:	4413      	add	r3, r2
 8007d40:	3390      	adds	r3, #144	; 0x90
 8007d42:	2208      	movs	r2, #8
 8007d44:	701a      	strb	r2, [r3, #0]
            break;
 8007d46:	e03a      	b.n	8007dbe <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007d48:	7bfb      	ldrb	r3, [r7, #15]
 8007d4a:	2b04      	cmp	r3, #4
 8007d4c:	d137      	bne.n	8007dbe <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007d54:	4619      	mov	r1, r3
 8007d56:	693a      	ldr	r2, [r7, #16]
 8007d58:	2334      	movs	r3, #52	; 0x34
 8007d5a:	fb03 f301 	mul.w	r3, r3, r1
 8007d5e:	4413      	add	r3, r2
 8007d60:	3390      	adds	r3, #144	; 0x90
 8007d62:	2201      	movs	r2, #1
 8007d64:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	693a      	ldr	r2, [r7, #16]
 8007d70:	2334      	movs	r3, #52	; 0x34
 8007d72:	fb03 f301 	mul.w	r3, r3, r1
 8007d76:	4413      	add	r3, r2
 8007d78:	3391      	adds	r3, #145	; 0x91
 8007d7a:	2202      	movs	r2, #2
 8007d7c:	701a      	strb	r2, [r3, #0]
            break;
 8007d7e:	e01e      	b.n	8007dbe <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007d86:	3301      	adds	r3, #1
 8007d88:	b29a      	uxth	r2, r3
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8007d90:	e016      	b.n	8007dc0 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007da6:	2102      	movs	r1, #2
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	4798      	blx	r3
      break;
 8007dac:	e00c      	b.n	8007dc8 <USBH_MSC_Process+0x514>
            break;
 8007dae:	bf00      	nop
 8007db0:	e00a      	b.n	8007dc8 <USBH_MSC_Process+0x514>
            break;
 8007db2:	bf00      	nop
 8007db4:	e008      	b.n	8007dc8 <USBH_MSC_Process+0x514>
            break;
 8007db6:	bf00      	nop
 8007db8:	e006      	b.n	8007dc8 <USBH_MSC_Process+0x514>
            break;
 8007dba:	bf00      	nop
 8007dbc:	e004      	b.n	8007dc8 <USBH_MSC_Process+0x514>
            break;
 8007dbe:	bf00      	nop
      break;
 8007dc0:	e002      	b.n	8007dc8 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	75fb      	strb	r3, [r7, #23]
      break;
 8007dc6:	bf00      	nop
  }
  return error;
 8007dc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3718      	adds	r7, #24
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
 8007dd2:	bf00      	nop

08007dd4 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	370c      	adds	r7, #12
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr

08007dea <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007dea:	b580      	push	{r7, lr}
 8007dec:	b088      	sub	sp, #32
 8007dee:	af02      	add	r7, sp, #8
 8007df0:	6078      	str	r0, [r7, #4]
 8007df2:	460b      	mov	r3, r1
 8007df4:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007dfc:	69db      	ldr	r3, [r3, #28]
 8007dfe:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8007e00:	2301      	movs	r3, #1
 8007e02:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8007e04:	2301      	movs	r3, #1
 8007e06:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8007e08:	78fb      	ldrb	r3, [r7, #3]
 8007e0a:	693a      	ldr	r2, [r7, #16]
 8007e0c:	2134      	movs	r1, #52	; 0x34
 8007e0e:	fb01 f303 	mul.w	r3, r1, r3
 8007e12:	4413      	add	r3, r2
 8007e14:	3390      	adds	r3, #144	; 0x90
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	2b06      	cmp	r3, #6
 8007e1a:	d004      	beq.n	8007e26 <USBH_MSC_RdWrProcess+0x3c>
 8007e1c:	2b07      	cmp	r3, #7
 8007e1e:	d037      	beq.n	8007e90 <USBH_MSC_RdWrProcess+0xa6>
 8007e20:	2b05      	cmp	r3, #5
 8007e22:	d06a      	beq.n	8007efa <USBH_MSC_RdWrProcess+0x110>
#endif
#endif
      break;

    default:
      break;
 8007e24:	e0a6      	b.n	8007f74 <USBH_MSC_RdWrProcess+0x18a>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8007e26:	78f9      	ldrb	r1, [r7, #3]
 8007e28:	2300      	movs	r3, #0
 8007e2a:	9300      	str	r3, [sp, #0]
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	2200      	movs	r2, #0
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 fea6 	bl	8008b82 <USBH_MSC_SCSI_Read>
 8007e36:	4603      	mov	r3, r0
 8007e38:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8007e3a:	7bfb      	ldrb	r3, [r7, #15]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d10b      	bne.n	8007e58 <USBH_MSC_RdWrProcess+0x6e>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007e40:	78fb      	ldrb	r3, [r7, #3]
 8007e42:	693a      	ldr	r2, [r7, #16]
 8007e44:	2134      	movs	r1, #52	; 0x34
 8007e46:	fb01 f303 	mul.w	r3, r1, r3
 8007e4a:	4413      	add	r3, r2
 8007e4c:	3390      	adds	r3, #144	; 0x90
 8007e4e:	2201      	movs	r2, #1
 8007e50:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8007e52:	2300      	movs	r3, #0
 8007e54:	75fb      	strb	r3, [r7, #23]
      break;
 8007e56:	e088      	b.n	8007f6a <USBH_MSC_RdWrProcess+0x180>
      else if (scsi_status == USBH_FAIL)
 8007e58:	7bfb      	ldrb	r3, [r7, #15]
 8007e5a:	2b02      	cmp	r3, #2
 8007e5c:	d109      	bne.n	8007e72 <USBH_MSC_RdWrProcess+0x88>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8007e5e:	78fb      	ldrb	r3, [r7, #3]
 8007e60:	693a      	ldr	r2, [r7, #16]
 8007e62:	2134      	movs	r1, #52	; 0x34
 8007e64:	fb01 f303 	mul.w	r3, r1, r3
 8007e68:	4413      	add	r3, r2
 8007e6a:	3390      	adds	r3, #144	; 0x90
 8007e6c:	2205      	movs	r2, #5
 8007e6e:	701a      	strb	r2, [r3, #0]
      break;
 8007e70:	e07b      	b.n	8007f6a <USBH_MSC_RdWrProcess+0x180>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007e72:	7bfb      	ldrb	r3, [r7, #15]
 8007e74:	2b04      	cmp	r3, #4
 8007e76:	d178      	bne.n	8007f6a <USBH_MSC_RdWrProcess+0x180>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8007e78:	78fb      	ldrb	r3, [r7, #3]
 8007e7a:	693a      	ldr	r2, [r7, #16]
 8007e7c:	2134      	movs	r1, #52	; 0x34
 8007e7e:	fb01 f303 	mul.w	r3, r1, r3
 8007e82:	4413      	add	r3, r2
 8007e84:	3390      	adds	r3, #144	; 0x90
 8007e86:	2208      	movs	r2, #8
 8007e88:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8007e8a:	2302      	movs	r3, #2
 8007e8c:	75fb      	strb	r3, [r7, #23]
      break;
 8007e8e:	e06c      	b.n	8007f6a <USBH_MSC_RdWrProcess+0x180>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8007e90:	78f9      	ldrb	r1, [r7, #3]
 8007e92:	2300      	movs	r3, #0
 8007e94:	9300      	str	r3, [sp, #0]
 8007e96:	2300      	movs	r3, #0
 8007e98:	2200      	movs	r2, #0
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 fe06 	bl	8008aac <USBH_MSC_SCSI_Write>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8007ea4:	7bfb      	ldrb	r3, [r7, #15]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d10b      	bne.n	8007ec2 <USBH_MSC_RdWrProcess+0xd8>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007eaa:	78fb      	ldrb	r3, [r7, #3]
 8007eac:	693a      	ldr	r2, [r7, #16]
 8007eae:	2134      	movs	r1, #52	; 0x34
 8007eb0:	fb01 f303 	mul.w	r3, r1, r3
 8007eb4:	4413      	add	r3, r2
 8007eb6:	3390      	adds	r3, #144	; 0x90
 8007eb8:	2201      	movs	r2, #1
 8007eba:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	75fb      	strb	r3, [r7, #23]
      break;
 8007ec0:	e055      	b.n	8007f6e <USBH_MSC_RdWrProcess+0x184>
      else if (scsi_status == USBH_FAIL)
 8007ec2:	7bfb      	ldrb	r3, [r7, #15]
 8007ec4:	2b02      	cmp	r3, #2
 8007ec6:	d109      	bne.n	8007edc <USBH_MSC_RdWrProcess+0xf2>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8007ec8:	78fb      	ldrb	r3, [r7, #3]
 8007eca:	693a      	ldr	r2, [r7, #16]
 8007ecc:	2134      	movs	r1, #52	; 0x34
 8007ece:	fb01 f303 	mul.w	r3, r1, r3
 8007ed2:	4413      	add	r3, r2
 8007ed4:	3390      	adds	r3, #144	; 0x90
 8007ed6:	2205      	movs	r2, #5
 8007ed8:	701a      	strb	r2, [r3, #0]
      break;
 8007eda:	e048      	b.n	8007f6e <USBH_MSC_RdWrProcess+0x184>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007edc:	7bfb      	ldrb	r3, [r7, #15]
 8007ede:	2b04      	cmp	r3, #4
 8007ee0:	d145      	bne.n	8007f6e <USBH_MSC_RdWrProcess+0x184>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8007ee2:	78fb      	ldrb	r3, [r7, #3]
 8007ee4:	693a      	ldr	r2, [r7, #16]
 8007ee6:	2134      	movs	r1, #52	; 0x34
 8007ee8:	fb01 f303 	mul.w	r3, r1, r3
 8007eec:	4413      	add	r3, r2
 8007eee:	3390      	adds	r3, #144	; 0x90
 8007ef0:	2208      	movs	r2, #8
 8007ef2:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8007ef4:	2302      	movs	r3, #2
 8007ef6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ef8:	e039      	b.n	8007f6e <USBH_MSC_RdWrProcess+0x184>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8007efa:	78fb      	ldrb	r3, [r7, #3]
 8007efc:	2234      	movs	r2, #52	; 0x34
 8007efe:	fb02 f303 	mul.w	r3, r2, r3
 8007f02:	3398      	adds	r3, #152	; 0x98
 8007f04:	693a      	ldr	r2, [r7, #16]
 8007f06:	4413      	add	r3, r2
 8007f08:	1d1a      	adds	r2, r3, #4
 8007f0a:	78fb      	ldrb	r3, [r7, #3]
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 fd53 	bl	80089ba <USBH_MSC_SCSI_RequestSense>
 8007f14:	4603      	mov	r3, r0
 8007f16:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8007f18:	7bfb      	ldrb	r3, [r7, #15]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d113      	bne.n	8007f46 <USBH_MSC_RdWrProcess+0x15c>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007f1e:	78fb      	ldrb	r3, [r7, #3]
 8007f20:	693a      	ldr	r2, [r7, #16]
 8007f22:	2134      	movs	r1, #52	; 0x34
 8007f24:	fb01 f303 	mul.w	r3, r1, r3
 8007f28:	4413      	add	r3, r2
 8007f2a:	3390      	adds	r3, #144	; 0x90
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8007f30:	78fb      	ldrb	r3, [r7, #3]
 8007f32:	693a      	ldr	r2, [r7, #16]
 8007f34:	2134      	movs	r1, #52	; 0x34
 8007f36:	fb01 f303 	mul.w	r3, r1, r3
 8007f3a:	4413      	add	r3, r2
 8007f3c:	3391      	adds	r3, #145	; 0x91
 8007f3e:	2202      	movs	r2, #2
 8007f40:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 8007f42:	2302      	movs	r3, #2
 8007f44:	75fb      	strb	r3, [r7, #23]
      if (scsi_status == USBH_FAIL)
 8007f46:	7bfb      	ldrb	r3, [r7, #15]
 8007f48:	2b02      	cmp	r3, #2
 8007f4a:	d012      	beq.n	8007f72 <USBH_MSC_RdWrProcess+0x188>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007f4c:	7bfb      	ldrb	r3, [r7, #15]
 8007f4e:	2b04      	cmp	r3, #4
 8007f50:	d10f      	bne.n	8007f72 <USBH_MSC_RdWrProcess+0x188>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8007f52:	78fb      	ldrb	r3, [r7, #3]
 8007f54:	693a      	ldr	r2, [r7, #16]
 8007f56:	2134      	movs	r1, #52	; 0x34
 8007f58:	fb01 f303 	mul.w	r3, r1, r3
 8007f5c:	4413      	add	r3, r2
 8007f5e:	3390      	adds	r3, #144	; 0x90
 8007f60:	2208      	movs	r2, #8
 8007f62:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8007f64:	2302      	movs	r3, #2
 8007f66:	75fb      	strb	r3, [r7, #23]
      break;
 8007f68:	e003      	b.n	8007f72 <USBH_MSC_RdWrProcess+0x188>
      break;
 8007f6a:	bf00      	nop
 8007f6c:	e002      	b.n	8007f74 <USBH_MSC_RdWrProcess+0x18a>
      break;
 8007f6e:	bf00      	nop
 8007f70:	e000      	b.n	8007f74 <USBH_MSC_RdWrProcess+0x18a>
      break;
 8007f72:	bf00      	nop

  }
  return error;
 8007f74:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3718      	adds	r7, #24
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}

08007f7e <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007f7e:	b480      	push	{r7}
 8007f80:	b085      	sub	sp, #20
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
 8007f86:	460b      	mov	r3, r1
 8007f88:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f90:	69db      	ldr	r3, [r3, #28]
 8007f92:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	2b0b      	cmp	r3, #11
 8007f9c:	d10c      	bne.n	8007fb8 <USBH_MSC_UnitIsReady+0x3a>
 8007f9e:	78fb      	ldrb	r3, [r7, #3]
 8007fa0:	68ba      	ldr	r2, [r7, #8]
 8007fa2:	2134      	movs	r1, #52	; 0x34
 8007fa4:	fb01 f303 	mul.w	r3, r1, r3
 8007fa8:	4413      	add	r3, r2
 8007faa:	3391      	adds	r3, #145	; 0x91
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d102      	bne.n	8007fb8 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	73fb      	strb	r3, [r7, #15]
 8007fb6:	e001      	b.n	8007fbc <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8007fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3714      	adds	r7, #20
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr

08007fca <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8007fca:	b580      	push	{r7, lr}
 8007fcc:	b086      	sub	sp, #24
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	60f8      	str	r0, [r7, #12]
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	607a      	str	r2, [r7, #4]
 8007fd6:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007fde:	69db      	ldr	r3, [r3, #28]
 8007fe0:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	2b0b      	cmp	r3, #11
 8007fea:	d10d      	bne.n	8008008 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8007fec:	7afb      	ldrb	r3, [r7, #11]
 8007fee:	2234      	movs	r2, #52	; 0x34
 8007ff0:	fb02 f303 	mul.w	r3, r2, r3
 8007ff4:	3390      	adds	r3, #144	; 0x90
 8007ff6:	697a      	ldr	r2, [r7, #20]
 8007ff8:	4413      	add	r3, r2
 8007ffa:	2234      	movs	r2, #52	; 0x34
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f001 fa36 	bl	8009470 <memcpy>
    return USBH_OK;
 8008004:	2300      	movs	r3, #0
 8008006:	e000      	b.n	800800a <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8008008:	2302      	movs	r3, #2
  }
}
 800800a:	4618      	mov	r0, r3
 800800c:	3718      	adds	r7, #24
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}

08008012 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8008012:	b580      	push	{r7, lr}
 8008014:	b088      	sub	sp, #32
 8008016:	af02      	add	r7, sp, #8
 8008018:	60f8      	str	r0, [r7, #12]
 800801a:	607a      	str	r2, [r7, #4]
 800801c:	603b      	str	r3, [r7, #0]
 800801e:	460b      	mov	r3, r1
 8008020:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008028:	69db      	ldr	r3, [r3, #28]
 800802a:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008032:	b2db      	uxtb	r3, r3
 8008034:	2b00      	cmp	r3, #0
 8008036:	d00e      	beq.n	8008056 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800803e:	2b0b      	cmp	r3, #11
 8008040:	d109      	bne.n	8008056 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8008042:	7afb      	ldrb	r3, [r7, #11]
 8008044:	697a      	ldr	r2, [r7, #20]
 8008046:	2134      	movs	r1, #52	; 0x34
 8008048:	fb01 f303 	mul.w	r3, r1, r3
 800804c:	4413      	add	r3, r2
 800804e:	3390      	adds	r3, #144	; 0x90
 8008050:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8008052:	2b01      	cmp	r3, #1
 8008054:	d001      	beq.n	800805a <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8008056:	2302      	movs	r3, #2
 8008058:	e040      	b.n	80080dc <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	2206      	movs	r2, #6
 800805e:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8008060:	7afb      	ldrb	r3, [r7, #11]
 8008062:	697a      	ldr	r2, [r7, #20]
 8008064:	2134      	movs	r1, #52	; 0x34
 8008066:	fb01 f303 	mul.w	r3, r1, r3
 800806a:	4413      	add	r3, r2
 800806c:	3390      	adds	r3, #144	; 0x90
 800806e:	2206      	movs	r2, #6
 8008070:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8008072:	7afb      	ldrb	r3, [r7, #11]
 8008074:	b29a      	uxth	r2, r3
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800807c:	7af9      	ldrb	r1, [r7, #11]
 800807e:	6a3b      	ldr	r3, [r7, #32]
 8008080:	9300      	str	r3, [sp, #0]
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	68f8      	ldr	r0, [r7, #12]
 8008088:	f000 fd7b 	bl	8008b82 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008092:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008094:	e016      	b.n	80080c4 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	1ad2      	subs	r2, r2, r3
 80080a0:	6a3b      	ldr	r3, [r7, #32]
 80080a2:	f242 7110 	movw	r1, #10000	; 0x2710
 80080a6:	fb01 f303 	mul.w	r3, r1, r3
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d805      	bhi.n	80080ba <USBH_MSC_Read+0xa8>
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d104      	bne.n	80080c4 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	2201      	movs	r2, #1
 80080be:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80080c0:	2302      	movs	r3, #2
 80080c2:	e00b      	b.n	80080dc <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80080c4:	7afb      	ldrb	r3, [r7, #11]
 80080c6:	4619      	mov	r1, r3
 80080c8:	68f8      	ldr	r0, [r7, #12]
 80080ca:	f7ff fe8e 	bl	8007dea <USBH_MSC_RdWrProcess>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d0e0      	beq.n	8008096 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	2201      	movs	r2, #1
 80080d8:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 80080da:	2300      	movs	r3, #0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3718      	adds	r7, #24
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b088      	sub	sp, #32
 80080e8:	af02      	add	r7, sp, #8
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	607a      	str	r2, [r7, #4]
 80080ee:	603b      	str	r3, [r7, #0]
 80080f0:	460b      	mov	r3, r1
 80080f2:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080fa:	69db      	ldr	r3, [r3, #28]
 80080fc:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008104:	b2db      	uxtb	r3, r3
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00e      	beq.n	8008128 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8008110:	2b0b      	cmp	r3, #11
 8008112:	d109      	bne.n	8008128 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8008114:	7afb      	ldrb	r3, [r7, #11]
 8008116:	697a      	ldr	r2, [r7, #20]
 8008118:	2134      	movs	r1, #52	; 0x34
 800811a:	fb01 f303 	mul.w	r3, r1, r3
 800811e:	4413      	add	r3, r2
 8008120:	3390      	adds	r3, #144	; 0x90
 8008122:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8008124:	2b01      	cmp	r3, #1
 8008126:	d001      	beq.n	800812c <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8008128:	2302      	movs	r3, #2
 800812a:	e040      	b.n	80081ae <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	2207      	movs	r2, #7
 8008130:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8008132:	7afb      	ldrb	r3, [r7, #11]
 8008134:	697a      	ldr	r2, [r7, #20]
 8008136:	2134      	movs	r1, #52	; 0x34
 8008138:	fb01 f303 	mul.w	r3, r1, r3
 800813c:	4413      	add	r3, r2
 800813e:	3390      	adds	r3, #144	; 0x90
 8008140:	2207      	movs	r2, #7
 8008142:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8008144:	7afb      	ldrb	r3, [r7, #11]
 8008146:	b29a      	uxth	r2, r3
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800814e:	7af9      	ldrb	r1, [r7, #11]
 8008150:	6a3b      	ldr	r3, [r7, #32]
 8008152:	9300      	str	r3, [sp, #0]
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	68f8      	ldr	r0, [r7, #12]
 800815a:	f000 fca7 	bl	8008aac <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008164:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008166:	e016      	b.n	8008196 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	1ad2      	subs	r2, r2, r3
 8008172:	6a3b      	ldr	r3, [r7, #32]
 8008174:	f242 7110 	movw	r1, #10000	; 0x2710
 8008178:	fb01 f303 	mul.w	r3, r1, r3
 800817c:	429a      	cmp	r2, r3
 800817e:	d805      	bhi.n	800818c <USBH_MSC_Write+0xa8>
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008186:	b2db      	uxtb	r3, r3
 8008188:	2b00      	cmp	r3, #0
 800818a:	d104      	bne.n	8008196 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	2201      	movs	r2, #1
 8008190:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8008192:	2302      	movs	r3, #2
 8008194:	e00b      	b.n	80081ae <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008196:	7afb      	ldrb	r3, [r7, #11]
 8008198:	4619      	mov	r1, r3
 800819a:	68f8      	ldr	r0, [r7, #12]
 800819c:	f7ff fe25 	bl	8007dea <USBH_MSC_RdWrProcess>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d0e0      	beq.n	8008168 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	2201      	movs	r2, #1
 80081aa:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 80081ac:	2300      	movs	r3, #0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3718      	adds	r7, #24
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 80081b6:	b580      	push	{r7, lr}
 80081b8:	b082      	sub	sp, #8
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2221      	movs	r2, #33	; 0x21
 80081c2:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	22ff      	movs	r2, #255	; 0xff
 80081c8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 80081dc:	2200      	movs	r2, #0
 80081de:	2100      	movs	r1, #0
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f7fe ff5d 	bl	80070a0 <USBH_CtlReq>
 80081e6:	4603      	mov	r3, r0
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3708      	adds	r7, #8
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	22a1      	movs	r2, #161	; 0xa1
 80081fe:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	22fe      	movs	r2, #254	; 0xfe
 8008204:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2201      	movs	r2, #1
 8008216:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8008218:	2201      	movs	r2, #1
 800821a:	6839      	ldr	r1, [r7, #0]
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f7fe ff3f 	bl	80070a0 <USBH_CtlReq>
 8008222:	4603      	mov	r3, r0
}
 8008224:	4618      	mov	r0, r3
 8008226:	3708      	adds	r7, #8
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800822c:	b480      	push	{r7}
 800822e:	b085      	sub	sp, #20
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800823a:	69db      	ldr	r3, [r3, #28]
 800823c:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	4a09      	ldr	r2, [pc, #36]	; (8008268 <USBH_MSC_BOT_Init+0x3c>)
 8008242:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	4a09      	ldr	r2, [pc, #36]	; (800826c <USBH_MSC_BOT_Init+0x40>)
 8008248:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2201      	movs	r2, #1
 800824e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2201      	movs	r2, #1
 8008256:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800825a:	2300      	movs	r3, #0
}
 800825c:	4618      	mov	r0, r3
 800825e:	3714      	adds	r7, #20
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr
 8008268:	43425355 	.word	0x43425355
 800826c:	20304050 	.word	0x20304050

08008270 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b088      	sub	sp, #32
 8008274:	af02      	add	r7, sp, #8
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	460b      	mov	r3, r1
 800827a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800827c:	2301      	movs	r3, #1
 800827e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8008280:	2301      	movs	r3, #1
 8008282:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8008284:	2301      	movs	r3, #1
 8008286:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008288:	2300      	movs	r3, #0
 800828a:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008292:	69db      	ldr	r3, [r3, #28]
 8008294:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8008296:	2300      	movs	r3, #0
 8008298:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80082a0:	3b01      	subs	r3, #1
 80082a2:	2b0a      	cmp	r3, #10
 80082a4:	f200 81a1 	bhi.w	80085ea <USBH_MSC_BOT_Process+0x37a>
 80082a8:	a201      	add	r2, pc, #4	; (adr r2, 80082b0 <USBH_MSC_BOT_Process+0x40>)
 80082aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ae:	bf00      	nop
 80082b0:	080082dd 	.word	0x080082dd
 80082b4:	08008307 	.word	0x08008307
 80082b8:	08008371 	.word	0x08008371
 80082bc:	0800838f 	.word	0x0800838f
 80082c0:	08008413 	.word	0x08008413
 80082c4:	08008437 	.word	0x08008437
 80082c8:	080084d1 	.word	0x080084d1
 80082cc:	080084ed 	.word	0x080084ed
 80082d0:	0800853f 	.word	0x0800853f
 80082d4:	0800856f 	.word	0x0800856f
 80082d8:	080085d1 	.word	0x080085d1
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	78fa      	ldrb	r2, [r7, #3]
 80082e0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	2202      	movs	r2, #2
 80082e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	795a      	ldrb	r2, [r3, #5]
 80082f6:	2301      	movs	r3, #1
 80082f8:	9300      	str	r3, [sp, #0]
 80082fa:	4613      	mov	r3, r2
 80082fc:	221f      	movs	r2, #31
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f7ff f8df 	bl	80074c2 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8008304:	e180      	b.n	8008608 <USBH_MSC_BOT_Process+0x398>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	795b      	ldrb	r3, [r3, #5]
 800830a:	4619      	mov	r1, r3
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 ff9d 	bl	800924c <USBH_LL_GetURBState>
 8008312:	4603      	mov	r3, r0
 8008314:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008316:	7d3b      	ldrb	r3, [r7, #20]
 8008318:	2b01      	cmp	r3, #1
 800831a:	d118      	bne.n	800834e <USBH_MSC_BOT_Process+0xde>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008320:	2b00      	cmp	r3, #0
 8008322:	d00f      	beq.n	8008344 <USBH_MSC_BOT_Process+0xd4>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800832a:	b25b      	sxtb	r3, r3
 800832c:	2b00      	cmp	r3, #0
 800832e:	da04      	bge.n	800833a <USBH_MSC_BOT_Process+0xca>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	2203      	movs	r2, #3
 8008334:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008338:	e159      	b.n	80085ee <USBH_MSC_BOT_Process+0x37e>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	2205      	movs	r2, #5
 800833e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008342:	e154      	b.n	80085ee <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	2207      	movs	r2, #7
 8008348:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800834c:	e14f      	b.n	80085ee <USBH_MSC_BOT_Process+0x37e>
      else if (URB_Status == USBH_URB_NOTREADY)
 800834e:	7d3b      	ldrb	r3, [r7, #20]
 8008350:	2b02      	cmp	r3, #2
 8008352:	d104      	bne.n	800835e <USBH_MSC_BOT_Process+0xee>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	2201      	movs	r2, #1
 8008358:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800835c:	e147      	b.n	80085ee <USBH_MSC_BOT_Process+0x37e>
        if (URB_Status == USBH_URB_STALL)
 800835e:	7d3b      	ldrb	r3, [r7, #20]
 8008360:	2b05      	cmp	r3, #5
 8008362:	f040 8144 	bne.w	80085ee <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	220a      	movs	r2, #10
 800836a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800836e:	e13e      	b.n	80085ee <USBH_MSC_BOT_Process+0x37e>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	895a      	ldrh	r2, [r3, #10]
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	791b      	ldrb	r3, [r3, #4]
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f7ff f8c4 	bl	800750c <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	2204      	movs	r2, #4
 8008388:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800838c:	e13c      	b.n	8008608 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	791b      	ldrb	r3, [r3, #4]
 8008392:	4619      	mov	r1, r3
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 ff59 	bl	800924c <USBH_LL_GetURBState>
 800839a:	4603      	mov	r3, r0
 800839c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800839e:	7d3b      	ldrb	r3, [r7, #20]
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d12d      	bne.n	8008400 <USBH_MSC_BOT_Process+0x190>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083a8:	693a      	ldr	r2, [r7, #16]
 80083aa:	8952      	ldrh	r2, [r2, #10]
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d910      	bls.n	80083d2 <USBH_MSC_BOT_Process+0x162>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083b6:	693a      	ldr	r2, [r7, #16]
 80083b8:	8952      	ldrh	r2, [r2, #10]
 80083ba:	441a      	add	r2, r3
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083c6:	693a      	ldr	r2, [r7, #16]
 80083c8:	8952      	ldrh	r2, [r2, #10]
 80083ca:	1a9a      	subs	r2, r3, r2
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	65da      	str	r2, [r3, #92]	; 0x5c
 80083d0:	e002      	b.n	80083d8 <USBH_MSC_BOT_Process+0x168>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	2200      	movs	r2, #0
 80083d6:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d00a      	beq.n	80083f6 <USBH_MSC_BOT_Process+0x186>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	895a      	ldrh	r2, [r3, #10]
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	791b      	ldrb	r3, [r3, #4]
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f7ff f88c 	bl	800750c <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 80083f4:	e0fd      	b.n	80085f2 <USBH_MSC_BOT_Process+0x382>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	2207      	movs	r2, #7
 80083fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80083fe:	e0f8      	b.n	80085f2 <USBH_MSC_BOT_Process+0x382>
      else if (URB_Status == USBH_URB_STALL)
 8008400:	7d3b      	ldrb	r3, [r7, #20]
 8008402:	2b05      	cmp	r3, #5
 8008404:	f040 80f5 	bne.w	80085f2 <USBH_MSC_BOT_Process+0x382>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	2209      	movs	r2, #9
 800840c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008410:	e0ef      	b.n	80085f2 <USBH_MSC_BOT_Process+0x382>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	891a      	ldrh	r2, [r3, #8]
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	7958      	ldrb	r0, [r3, #5]
 8008420:	2301      	movs	r3, #1
 8008422:	9300      	str	r3, [sp, #0]
 8008424:	4603      	mov	r3, r0
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f7ff f84b 	bl	80074c2 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	2206      	movs	r2, #6
 8008430:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008434:	e0e8      	b.n	8008608 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	795b      	ldrb	r3, [r3, #5]
 800843a:	4619      	mov	r1, r3
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 ff05 	bl	800924c <USBH_LL_GetURBState>
 8008442:	4603      	mov	r3, r0
 8008444:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008446:	7d3b      	ldrb	r3, [r7, #20]
 8008448:	2b01      	cmp	r3, #1
 800844a:	d130      	bne.n	80084ae <USBH_MSC_BOT_Process+0x23e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008450:	693a      	ldr	r2, [r7, #16]
 8008452:	8912      	ldrh	r2, [r2, #8]
 8008454:	4293      	cmp	r3, r2
 8008456:	d910      	bls.n	800847a <USBH_MSC_BOT_Process+0x20a>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800845e:	693a      	ldr	r2, [r7, #16]
 8008460:	8912      	ldrh	r2, [r2, #8]
 8008462:	441a      	add	r2, r3
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800846e:	693a      	ldr	r2, [r7, #16]
 8008470:	8912      	ldrh	r2, [r2, #8]
 8008472:	1a9a      	subs	r2, r3, r2
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	65da      	str	r2, [r3, #92]	; 0x5c
 8008478:	e002      	b.n	8008480 <USBH_MSC_BOT_Process+0x210>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	2200      	movs	r2, #0
 800847e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008484:	2b00      	cmp	r3, #0
 8008486:	d00d      	beq.n	80084a4 <USBH_MSC_BOT_Process+0x234>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	891a      	ldrh	r2, [r3, #8]
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	7958      	ldrb	r0, [r3, #5]
 8008496:	2301      	movs	r3, #1
 8008498:	9300      	str	r3, [sp, #0]
 800849a:	4603      	mov	r3, r0
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f7ff f810 	bl	80074c2 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 80084a2:	e0a8      	b.n	80085f6 <USBH_MSC_BOT_Process+0x386>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	2207      	movs	r2, #7
 80084a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80084ac:	e0a3      	b.n	80085f6 <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_NOTREADY)
 80084ae:	7d3b      	ldrb	r3, [r7, #20]
 80084b0:	2b02      	cmp	r3, #2
 80084b2:	d104      	bne.n	80084be <USBH_MSC_BOT_Process+0x24e>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	2205      	movs	r2, #5
 80084b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80084bc:	e09b      	b.n	80085f6 <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_STALL)
 80084be:	7d3b      	ldrb	r3, [r7, #20]
 80084c0:	2b05      	cmp	r3, #5
 80084c2:	f040 8098 	bne.w	80085f6 <USBH_MSC_BOT_Process+0x386>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	220a      	movs	r2, #10
 80084ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80084ce:	e092      	b.n	80085f6 <USBH_MSC_BOT_Process+0x386>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	f103 0178 	add.w	r1, r3, #120	; 0x78
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	791b      	ldrb	r3, [r3, #4]
 80084da:	220d      	movs	r2, #13
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f7ff f815 	bl	800750c <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	2208      	movs	r2, #8
 80084e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80084ea:	e08d      	b.n	8008608 <USBH_MSC_BOT_Process+0x398>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	791b      	ldrb	r3, [r3, #4]
 80084f0:	4619      	mov	r1, r3
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 feaa 	bl	800924c <USBH_LL_GetURBState>
 80084f8:	4603      	mov	r3, r0
 80084fa:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 80084fc:	7d3b      	ldrb	r3, [r7, #20]
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d115      	bne.n	800852e <USBH_MSC_BOT_Process+0x2be>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	2201      	movs	r2, #1
 8008506:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	2201      	movs	r2, #1
 800850e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 f8aa 	bl	800866c <USBH_MSC_DecodeCSW>
 8008518:	4603      	mov	r3, r0
 800851a:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800851c:	7d7b      	ldrb	r3, [r7, #21]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d102      	bne.n	8008528 <USBH_MSC_BOT_Process+0x2b8>
        {
          status = USBH_OK;
 8008522:	2300      	movs	r3, #0
 8008524:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8008526:	e068      	b.n	80085fa <USBH_MSC_BOT_Process+0x38a>
          status = USBH_FAIL;
 8008528:	2302      	movs	r3, #2
 800852a:	75fb      	strb	r3, [r7, #23]
      break;
 800852c:	e065      	b.n	80085fa <USBH_MSC_BOT_Process+0x38a>
      else if (URB_Status == USBH_URB_STALL)
 800852e:	7d3b      	ldrb	r3, [r7, #20]
 8008530:	2b05      	cmp	r3, #5
 8008532:	d162      	bne.n	80085fa <USBH_MSC_BOT_Process+0x38a>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	2209      	movs	r2, #9
 8008538:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800853c:	e05d      	b.n	80085fa <USBH_MSC_BOT_Process+0x38a>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800853e:	78fb      	ldrb	r3, [r7, #3]
 8008540:	2200      	movs	r2, #0
 8008542:	4619      	mov	r1, r3
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 f865 	bl	8008614 <USBH_MSC_BOT_Abort>
 800854a:	4603      	mov	r3, r0
 800854c:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800854e:	7dbb      	ldrb	r3, [r7, #22]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d104      	bne.n	800855e <USBH_MSC_BOT_Process+0x2ee>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	2207      	movs	r2, #7
 8008558:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800855c:	e04f      	b.n	80085fe <USBH_MSC_BOT_Process+0x38e>
      else if (error == USBH_UNRECOVERED_ERROR)
 800855e:	7dbb      	ldrb	r3, [r7, #22]
 8008560:	2b04      	cmp	r3, #4
 8008562:	d14c      	bne.n	80085fe <USBH_MSC_BOT_Process+0x38e>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	220b      	movs	r2, #11
 8008568:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800856c:	e047      	b.n	80085fe <USBH_MSC_BOT_Process+0x38e>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800856e:	78fb      	ldrb	r3, [r7, #3]
 8008570:	2201      	movs	r2, #1
 8008572:	4619      	mov	r1, r3
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 f84d 	bl	8008614 <USBH_MSC_BOT_Abort>
 800857a:	4603      	mov	r3, r0
 800857c:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800857e:	7dbb      	ldrb	r3, [r7, #22]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d11d      	bne.n	80085c0 <USBH_MSC_BOT_Process+0x350>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	795b      	ldrb	r3, [r3, #5]
 8008588:	4619      	mov	r1, r3
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 febb 	bl	8009306 <USBH_LL_GetToggle>
 8008590:	4603      	mov	r3, r0
 8008592:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	7959      	ldrb	r1, [r3, #5]
 8008598:	7bfb      	ldrb	r3, [r7, #15]
 800859a:	f1c3 0301 	rsb	r3, r3, #1
 800859e:	b2db      	uxtb	r3, r3
 80085a0:	461a      	mov	r2, r3
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 fe7c 	bl	80092a0 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	791b      	ldrb	r3, [r3, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	4619      	mov	r1, r3
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 fe75 	bl	80092a0 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	2209      	movs	r2, #9
 80085ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 80085be:	e020      	b.n	8008602 <USBH_MSC_BOT_Process+0x392>
        if (error == USBH_UNRECOVERED_ERROR)
 80085c0:	7dbb      	ldrb	r3, [r7, #22]
 80085c2:	2b04      	cmp	r3, #4
 80085c4:	d11d      	bne.n	8008602 <USBH_MSC_BOT_Process+0x392>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	220b      	movs	r2, #11
 80085ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80085ce:	e018      	b.n	8008602 <USBH_MSC_BOT_Process+0x392>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f7ff fdf0 	bl	80081b6 <USBH_MSC_BOT_REQ_Reset>
 80085d6:	4603      	mov	r3, r0
 80085d8:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80085da:	7dfb      	ldrb	r3, [r7, #23]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d112      	bne.n	8008606 <USBH_MSC_BOT_Process+0x396>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 80085e8:	e00d      	b.n	8008606 <USBH_MSC_BOT_Process+0x396>

    default:
      break;
 80085ea:	bf00      	nop
 80085ec:	e00c      	b.n	8008608 <USBH_MSC_BOT_Process+0x398>
      break;
 80085ee:	bf00      	nop
 80085f0:	e00a      	b.n	8008608 <USBH_MSC_BOT_Process+0x398>
      break;
 80085f2:	bf00      	nop
 80085f4:	e008      	b.n	8008608 <USBH_MSC_BOT_Process+0x398>
      break;
 80085f6:	bf00      	nop
 80085f8:	e006      	b.n	8008608 <USBH_MSC_BOT_Process+0x398>
      break;
 80085fa:	bf00      	nop
 80085fc:	e004      	b.n	8008608 <USBH_MSC_BOT_Process+0x398>
      break;
 80085fe:	bf00      	nop
 8008600:	e002      	b.n	8008608 <USBH_MSC_BOT_Process+0x398>
      break;
 8008602:	bf00      	nop
 8008604:	e000      	b.n	8008608 <USBH_MSC_BOT_Process+0x398>
      break;
 8008606:	bf00      	nop
  }
  return status;
 8008608:	7dfb      	ldrb	r3, [r7, #23]
}
 800860a:	4618      	mov	r0, r3
 800860c:	3718      	adds	r7, #24
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop

08008614 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b084      	sub	sp, #16
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	460b      	mov	r3, r1
 800861e:	70fb      	strb	r3, [r7, #3]
 8008620:	4613      	mov	r3, r2
 8008622:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8008624:	2302      	movs	r3, #2
 8008626:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800862e:	69db      	ldr	r3, [r3, #28]
 8008630:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8008632:	78bb      	ldrb	r3, [r7, #2]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d002      	beq.n	800863e <USBH_MSC_BOT_Abort+0x2a>
 8008638:	2b01      	cmp	r3, #1
 800863a:	d009      	beq.n	8008650 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800863c:	e011      	b.n	8008662 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	79db      	ldrb	r3, [r3, #7]
 8008642:	4619      	mov	r1, r3
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f7fe fd07 	bl	8007058 <USBH_ClrFeature>
 800864a:	4603      	mov	r3, r0
 800864c:	73fb      	strb	r3, [r7, #15]
      break;
 800864e:	e008      	b.n	8008662 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	799b      	ldrb	r3, [r3, #6]
 8008654:	4619      	mov	r1, r3
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f7fe fcfe 	bl	8007058 <USBH_ClrFeature>
 800865c:	4603      	mov	r3, r0
 800865e:	73fb      	strb	r3, [r7, #15]
      break;
 8008660:	bf00      	nop
  }
  return status;
 8008662:	7bfb      	ldrb	r3, [r7, #15]
}
 8008664:	4618      	mov	r0, r3
 8008666:	3710      	adds	r7, #16
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800867a:	69db      	ldr	r3, [r3, #28]
 800867c:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800867e:	2301      	movs	r3, #1
 8008680:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	791b      	ldrb	r3, [r3, #4]
 8008686:	4619      	mov	r1, r3
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f000 fd4d 	bl	8009128 <USBH_LL_GetLastXferSize>
 800868e:	4603      	mov	r3, r0
 8008690:	2b0d      	cmp	r3, #13
 8008692:	d002      	beq.n	800869a <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8008694:	2302      	movs	r3, #2
 8008696:	73fb      	strb	r3, [r7, #15]
 8008698:	e024      	b.n	80086e4 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800869e:	4a14      	ldr	r2, [pc, #80]	; (80086f0 <USBH_MSC_DecodeCSW+0x84>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d11d      	bne.n	80086e0 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d119      	bne.n	80086e4 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d102      	bne.n	80086c0 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 80086ba:	2300      	movs	r3, #0
 80086bc:	73fb      	strb	r3, [r7, #15]
 80086be:	e011      	b.n	80086e4 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d102      	bne.n	80086d0 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 80086ca:	2301      	movs	r3, #1
 80086cc:	73fb      	strb	r3, [r7, #15]
 80086ce:	e009      	b.n	80086e4 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80086d6:	2b02      	cmp	r3, #2
 80086d8:	d104      	bne.n	80086e4 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 80086da:	2302      	movs	r3, #2
 80086dc:	73fb      	strb	r3, [r7, #15]
 80086de:	e001      	b.n	80086e4 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 80086e0:	2302      	movs	r3, #2
 80086e2:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 80086e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3710      	adds	r7, #16
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	53425355 	.word	0x53425355

080086f4 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b084      	sub	sp, #16
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	460b      	mov	r3, r1
 80086fe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008700:	2302      	movs	r3, #2
 8008702:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800870a:	69db      	ldr	r3, [r3, #28]
 800870c:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008714:	2b01      	cmp	r3, #1
 8008716:	d002      	beq.n	800871e <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8008718:	2b02      	cmp	r3, #2
 800871a:	d021      	beq.n	8008760 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800871c:	e028      	b.n	8008770 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	2200      	movs	r2, #0
 8008722:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	2200      	movs	r2, #0
 8008728:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	220a      	movs	r2, #10
 8008730:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	3363      	adds	r3, #99	; 0x63
 8008738:	2210      	movs	r2, #16
 800873a:	2100      	movs	r1, #0
 800873c:	4618      	mov	r0, r3
 800873e:	f000 fea2 	bl	8009486 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	2200      	movs	r2, #0
 8008746:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	2201      	movs	r2, #1
 800874e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	2202      	movs	r2, #2
 8008756:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800875a:	2301      	movs	r3, #1
 800875c:	73fb      	strb	r3, [r7, #15]
      break;
 800875e:	e007      	b.n	8008770 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008760:	78fb      	ldrb	r3, [r7, #3]
 8008762:	4619      	mov	r1, r3
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f7ff fd83 	bl	8008270 <USBH_MSC_BOT_Process>
 800876a:	4603      	mov	r3, r0
 800876c:	73fb      	strb	r3, [r7, #15]
      break;
 800876e:	bf00      	nop
  }

  return error;
 8008770:	7bfb      	ldrb	r3, [r7, #15]
}
 8008772:	4618      	mov	r0, r3
 8008774:	3710      	adds	r7, #16
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}

0800877a <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800877a:	b580      	push	{r7, lr}
 800877c:	b086      	sub	sp, #24
 800877e:	af00      	add	r7, sp, #0
 8008780:	60f8      	str	r0, [r7, #12]
 8008782:	460b      	mov	r3, r1
 8008784:	607a      	str	r2, [r7, #4]
 8008786:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8008788:	2301      	movs	r3, #1
 800878a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008792:	69db      	ldr	r3, [r3, #28]
 8008794:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800879c:	2b01      	cmp	r3, #1
 800879e:	d002      	beq.n	80087a6 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 80087a0:	2b02      	cmp	r3, #2
 80087a2:	d027      	beq.n	80087f4 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 80087a4:	e05f      	b.n	8008866 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	2208      	movs	r2, #8
 80087aa:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	2280      	movs	r2, #128	; 0x80
 80087b0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	220a      	movs	r2, #10
 80087b8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	3363      	adds	r3, #99	; 0x63
 80087c0:	2210      	movs	r2, #16
 80087c2:	2100      	movs	r1, #0
 80087c4:	4618      	mov	r0, r3
 80087c6:	f000 fe5e 	bl	8009486 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	2225      	movs	r2, #37	; 0x25
 80087ce:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	2201      	movs	r2, #1
 80087d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	2202      	movs	r2, #2
 80087de:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	f103 0210 	add.w	r2, r3, #16
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80087ee:	2301      	movs	r3, #1
 80087f0:	75fb      	strb	r3, [r7, #23]
      break;
 80087f2:	e038      	b.n	8008866 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 80087f4:	7afb      	ldrb	r3, [r7, #11]
 80087f6:	4619      	mov	r1, r3
 80087f8:	68f8      	ldr	r0, [r7, #12]
 80087fa:	f7ff fd39 	bl	8008270 <USBH_MSC_BOT_Process>
 80087fe:	4603      	mov	r3, r0
 8008800:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8008802:	7dfb      	ldrb	r3, [r7, #23]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d12d      	bne.n	8008864 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800880e:	3303      	adds	r3, #3
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	461a      	mov	r2, r3
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800881a:	3302      	adds	r3, #2
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	021b      	lsls	r3, r3, #8
 8008820:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008828:	3301      	adds	r3, #1
 800882a:	781b      	ldrb	r3, [r3, #0]
 800882c:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800882e:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	061b      	lsls	r3, r3, #24
 800883a:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008846:	3307      	adds	r3, #7
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	b29a      	uxth	r2, r3
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008852:	3306      	adds	r3, #6
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	b29b      	uxth	r3, r3
 8008858:	021b      	lsls	r3, r3, #8
 800885a:	b29b      	uxth	r3, r3
 800885c:	4313      	orrs	r3, r2
 800885e:	b29a      	uxth	r2, r3
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	809a      	strh	r2, [r3, #4]
      break;
 8008864:	bf00      	nop
  }

  return error;
 8008866:	7dfb      	ldrb	r3, [r7, #23]
}
 8008868:	4618      	mov	r0, r3
 800886a:	3718      	adds	r7, #24
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b086      	sub	sp, #24
 8008874:	af00      	add	r7, sp, #0
 8008876:	60f8      	str	r0, [r7, #12]
 8008878:	460b      	mov	r3, r1
 800887a:	607a      	str	r2, [r7, #4]
 800887c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800887e:	2302      	movs	r3, #2
 8008880:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008888:	69db      	ldr	r3, [r3, #28]
 800888a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008892:	2b01      	cmp	r3, #1
 8008894:	d002      	beq.n	800889c <USBH_MSC_SCSI_Inquiry+0x2c>
 8008896:	2b02      	cmp	r3, #2
 8008898:	d03d      	beq.n	8008916 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800889a:	e089      	b.n	80089b0 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	2224      	movs	r2, #36	; 0x24
 80088a0:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	2280      	movs	r2, #128	; 0x80
 80088a6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	220a      	movs	r2, #10
 80088ae:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	3363      	adds	r3, #99	; 0x63
 80088b6:	220a      	movs	r2, #10
 80088b8:	2100      	movs	r1, #0
 80088ba:	4618      	mov	r0, r3
 80088bc:	f000 fde3 	bl	8009486 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	2212      	movs	r2, #18
 80088c4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80088c8:	7afb      	ldrb	r3, [r7, #11]
 80088ca:	015b      	lsls	r3, r3, #5
 80088cc:	b2da      	uxtb	r2, r3
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	2200      	movs	r2, #0
 80088d8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	2200      	movs	r2, #0
 80088e0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	2224      	movs	r2, #36	; 0x24
 80088e8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	2200      	movs	r2, #0
 80088f0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	2202      	movs	r2, #2
 8008900:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	f103 0210 	add.w	r2, r3, #16
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8008910:	2301      	movs	r3, #1
 8008912:	75fb      	strb	r3, [r7, #23]
      break;
 8008914:	e04c      	b.n	80089b0 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008916:	7afb      	ldrb	r3, [r7, #11]
 8008918:	4619      	mov	r1, r3
 800891a:	68f8      	ldr	r0, [r7, #12]
 800891c:	f7ff fca8 	bl	8008270 <USBH_MSC_BOT_Process>
 8008920:	4603      	mov	r3, r0
 8008922:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8008924:	7dfb      	ldrb	r3, [r7, #23]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d141      	bne.n	80089ae <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800892a:	2222      	movs	r2, #34	; 0x22
 800892c:	2100      	movs	r1, #0
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 fda9 	bl	8009486 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	f003 031f 	and.w	r3, r3, #31
 8008940:	b2da      	uxtb	r2, r3
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	095b      	lsrs	r3, r3, #5
 8008950:	b2da      	uxtb	r2, r3
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800895c:	3301      	adds	r3, #1
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	b25b      	sxtb	r3, r3
 8008962:	2b00      	cmp	r3, #0
 8008964:	da03      	bge.n	800896e <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2201      	movs	r2, #1
 800896a:	709a      	strb	r2, [r3, #2]
 800896c:	e002      	b.n	8008974 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2200      	movs	r2, #0
 8008972:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	1cd8      	adds	r0, r3, #3
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800897e:	3308      	adds	r3, #8
 8008980:	2208      	movs	r2, #8
 8008982:	4619      	mov	r1, r3
 8008984:	f000 fd74 	bl	8009470 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f103 000c 	add.w	r0, r3, #12
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008994:	3310      	adds	r3, #16
 8008996:	2210      	movs	r2, #16
 8008998:	4619      	mov	r1, r3
 800899a:	f000 fd69 	bl	8009470 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	331d      	adds	r3, #29
 80089a2:	693a      	ldr	r2, [r7, #16]
 80089a4:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80089a8:	3220      	adds	r2, #32
 80089aa:	6812      	ldr	r2, [r2, #0]
 80089ac:	601a      	str	r2, [r3, #0]
      break;
 80089ae:	bf00      	nop
  }

  return error;
 80089b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3718      	adds	r7, #24
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b086      	sub	sp, #24
 80089be:	af00      	add	r7, sp, #0
 80089c0:	60f8      	str	r0, [r7, #12]
 80089c2:	460b      	mov	r3, r1
 80089c4:	607a      	str	r2, [r7, #4]
 80089c6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80089c8:	2302      	movs	r3, #2
 80089ca:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80089d2:	69db      	ldr	r3, [r3, #28]
 80089d4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d002      	beq.n	80089e6 <USBH_MSC_SCSI_RequestSense+0x2c>
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	d03d      	beq.n	8008a60 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 80089e4:	e05d      	b.n	8008aa2 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	220e      	movs	r2, #14
 80089ea:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	2280      	movs	r2, #128	; 0x80
 80089f0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	220a      	movs	r2, #10
 80089f8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	3363      	adds	r3, #99	; 0x63
 8008a00:	2210      	movs	r2, #16
 8008a02:	2100      	movs	r1, #0
 8008a04:	4618      	mov	r0, r3
 8008a06:	f000 fd3e 	bl	8009486 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	2203      	movs	r2, #3
 8008a0e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8008a12:	7afb      	ldrb	r3, [r7, #11]
 8008a14:	015b      	lsls	r3, r3, #5
 8008a16:	b2da      	uxtb	r2, r3
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	2200      	movs	r2, #0
 8008a22:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	220e      	movs	r2, #14
 8008a32:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	2201      	movs	r2, #1
 8008a42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	2202      	movs	r2, #2
 8008a4a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	f103 0210 	add.w	r2, r3, #16
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	75fb      	strb	r3, [r7, #23]
      break;
 8008a5e:	e020      	b.n	8008aa2 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008a60:	7afb      	ldrb	r3, [r7, #11]
 8008a62:	4619      	mov	r1, r3
 8008a64:	68f8      	ldr	r0, [r7, #12]
 8008a66:	f7ff fc03 	bl	8008270 <USBH_MSC_BOT_Process>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8008a6e:	7dfb      	ldrb	r3, [r7, #23]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d115      	bne.n	8008aa0 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a7a:	3302      	adds	r3, #2
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	f003 030f 	and.w	r3, r3, #15
 8008a82:	b2da      	uxtb	r2, r3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a8e:	7b1a      	ldrb	r2, [r3, #12]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a9a:	7b5a      	ldrb	r2, [r3, #13]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	709a      	strb	r2, [r3, #2]
      break;
 8008aa0:	bf00      	nop
  }

  return error;
 8008aa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3718      	adds	r7, #24
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b086      	sub	sp, #24
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	607a      	str	r2, [r7, #4]
 8008ab6:	603b      	str	r3, [r7, #0]
 8008ab8:	460b      	mov	r3, r1
 8008aba:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008abc:	2302      	movs	r3, #2
 8008abe:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ac6:	69db      	ldr	r3, [r3, #28]
 8008ac8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d002      	beq.n	8008ada <USBH_MSC_SCSI_Write+0x2e>
 8008ad4:	2b02      	cmp	r3, #2
 8008ad6:	d047      	beq.n	8008b68 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8008ad8:	e04e      	b.n	8008b78 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	6a3b      	ldr	r3, [r7, #32]
 8008ae4:	fb03 f202 	mul.w	r2, r3, r2
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	2200      	movs	r2, #0
 8008af0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	220a      	movs	r2, #10
 8008af8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	3363      	adds	r3, #99	; 0x63
 8008b00:	2210      	movs	r2, #16
 8008b02:	2100      	movs	r1, #0
 8008b04:	4618      	mov	r0, r3
 8008b06:	f000 fcbe 	bl	8009486 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	222a      	movs	r2, #42	; 0x2a
 8008b0e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8008b12:	79fa      	ldrb	r2, [r7, #7]
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8008b1a:	79ba      	ldrb	r2, [r7, #6]
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8008b22:	797a      	ldrb	r2, [r7, #5]
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8008b2a:	1d3b      	adds	r3, r7, #4
 8008b2c:	781a      	ldrb	r2, [r3, #0]
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8008b34:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8008b3e:	f107 0320 	add.w	r3, r7, #32
 8008b42:	781a      	ldrb	r2, [r3, #0]
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	2201      	movs	r2, #1
 8008b4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	2202      	movs	r2, #2
 8008b56:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	683a      	ldr	r2, [r7, #0]
 8008b5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8008b62:	2301      	movs	r3, #1
 8008b64:	75fb      	strb	r3, [r7, #23]
      break;
 8008b66:	e007      	b.n	8008b78 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008b68:	7afb      	ldrb	r3, [r7, #11]
 8008b6a:	4619      	mov	r1, r3
 8008b6c:	68f8      	ldr	r0, [r7, #12]
 8008b6e:	f7ff fb7f 	bl	8008270 <USBH_MSC_BOT_Process>
 8008b72:	4603      	mov	r3, r0
 8008b74:	75fb      	strb	r3, [r7, #23]
      break;
 8008b76:	bf00      	nop
  }

  return error;
 8008b78:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3718      	adds	r7, #24
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}

08008b82 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8008b82:	b580      	push	{r7, lr}
 8008b84:	b086      	sub	sp, #24
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	60f8      	str	r0, [r7, #12]
 8008b8a:	607a      	str	r2, [r7, #4]
 8008b8c:	603b      	str	r3, [r7, #0]
 8008b8e:	460b      	mov	r3, r1
 8008b90:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008b92:	2302      	movs	r3, #2
 8008b94:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b9c:	69db      	ldr	r3, [r3, #28]
 8008b9e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d002      	beq.n	8008bb0 <USBH_MSC_SCSI_Read+0x2e>
 8008baa:	2b02      	cmp	r3, #2
 8008bac:	d047      	beq.n	8008c3e <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8008bae:	e04e      	b.n	8008c4e <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	6a3b      	ldr	r3, [r7, #32]
 8008bba:	fb03 f202 	mul.w	r2, r3, r2
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	2280      	movs	r2, #128	; 0x80
 8008bc6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	220a      	movs	r2, #10
 8008bce:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	3363      	adds	r3, #99	; 0x63
 8008bd6:	2210      	movs	r2, #16
 8008bd8:	2100      	movs	r1, #0
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f000 fc53 	bl	8009486 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	2228      	movs	r2, #40	; 0x28
 8008be4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8008be8:	79fa      	ldrb	r2, [r7, #7]
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8008bf0:	79ba      	ldrb	r2, [r7, #6]
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8008bf8:	797a      	ldrb	r2, [r7, #5]
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8008c00:	1d3b      	adds	r3, r7, #4
 8008c02:	781a      	ldrb	r2, [r3, #0]
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8008c0a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8008c14:	f107 0320 	add.w	r3, r7, #32
 8008c18:	781a      	ldrb	r2, [r3, #0]
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	2201      	movs	r2, #1
 8008c24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	2202      	movs	r2, #2
 8008c2c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	683a      	ldr	r2, [r7, #0]
 8008c34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	75fb      	strb	r3, [r7, #23]
      break;
 8008c3c:	e007      	b.n	8008c4e <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008c3e:	7afb      	ldrb	r3, [r7, #11]
 8008c40:	4619      	mov	r1, r3
 8008c42:	68f8      	ldr	r0, [r7, #12]
 8008c44:	f7ff fb14 	bl	8008270 <USBH_MSC_BOT_Process>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	75fb      	strb	r3, [r7, #23]
      break;
 8008c4c:	bf00      	nop
  }

  return error;
 8008c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3718      	adds	r7, #24
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b086      	sub	sp, #24
 8008c5c:	af04      	add	r7, sp, #16
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	4608      	mov	r0, r1
 8008c62:	4611      	mov	r1, r2
 8008c64:	461a      	mov	r2, r3
 8008c66:	4603      	mov	r3, r0
 8008c68:	70fb      	strb	r3, [r7, #3]
 8008c6a:	460b      	mov	r3, r1
 8008c6c:	70bb      	strb	r3, [r7, #2]
 8008c6e:	4613      	mov	r3, r2
 8008c70:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008c72:	7878      	ldrb	r0, [r7, #1]
 8008c74:	78ba      	ldrb	r2, [r7, #2]
 8008c76:	78f9      	ldrb	r1, [r7, #3]
 8008c78:	8b3b      	ldrh	r3, [r7, #24]
 8008c7a:	9302      	str	r3, [sp, #8]
 8008c7c:	7d3b      	ldrb	r3, [r7, #20]
 8008c7e:	9301      	str	r3, [sp, #4]
 8008c80:	7c3b      	ldrb	r3, [r7, #16]
 8008c82:	9300      	str	r3, [sp, #0]
 8008c84:	4603      	mov	r3, r0
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 fa61 	bl	800914e <USBH_LL_OpenPipe>

  return USBH_OK;
 8008c8c:	2300      	movs	r3, #0
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3708      	adds	r7, #8
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}

08008c96 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008c96:	b580      	push	{r7, lr}
 8008c98:	b082      	sub	sp, #8
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	6078      	str	r0, [r7, #4]
 8008c9e:	460b      	mov	r3, r1
 8008ca0:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008ca2:	78fb      	ldrb	r3, [r7, #3]
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 fa80 	bl	80091ac <USBH_LL_ClosePipe>

  return USBH_OK;
 8008cac:	2300      	movs	r3, #0
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3708      	adds	r7, #8
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}

08008cb6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008cb6:	b580      	push	{r7, lr}
 8008cb8:	b084      	sub	sp, #16
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
 8008cbe:	460b      	mov	r3, r1
 8008cc0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 f836 	bl	8008d34 <USBH_GetFreePipe>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008ccc:	89fb      	ldrh	r3, [r7, #14]
 8008cce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d00a      	beq.n	8008cec <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8008cd6:	78fa      	ldrb	r2, [r7, #3]
 8008cd8:	89fb      	ldrh	r3, [r7, #14]
 8008cda:	f003 030f 	and.w	r3, r3, #15
 8008cde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ce2:	6879      	ldr	r1, [r7, #4]
 8008ce4:	33e0      	adds	r3, #224	; 0xe0
 8008ce6:	009b      	lsls	r3, r3, #2
 8008ce8:	440b      	add	r3, r1
 8008cea:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008cec:	89fb      	ldrh	r3, [r7, #14]
 8008cee:	b2db      	uxtb	r3, r3
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3710      	adds	r7, #16
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b083      	sub	sp, #12
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	460b      	mov	r3, r1
 8008d02:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008d04:	78fb      	ldrb	r3, [r7, #3]
 8008d06:	2b0a      	cmp	r3, #10
 8008d08:	d80d      	bhi.n	8008d26 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008d0a:	78fb      	ldrb	r3, [r7, #3]
 8008d0c:	687a      	ldr	r2, [r7, #4]
 8008d0e:	33e0      	adds	r3, #224	; 0xe0
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	4413      	add	r3, r2
 8008d14:	685a      	ldr	r2, [r3, #4]
 8008d16:	78fb      	ldrb	r3, [r7, #3]
 8008d18:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008d1c:	6879      	ldr	r1, [r7, #4]
 8008d1e:	33e0      	adds	r3, #224	; 0xe0
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	440b      	add	r3, r1
 8008d24:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008d26:	2300      	movs	r3, #0
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	370c      	adds	r7, #12
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr

08008d34 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b085      	sub	sp, #20
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008d40:	2300      	movs	r3, #0
 8008d42:	73fb      	strb	r3, [r7, #15]
 8008d44:	e00f      	b.n	8008d66 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008d46:	7bfb      	ldrb	r3, [r7, #15]
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	33e0      	adds	r3, #224	; 0xe0
 8008d4c:	009b      	lsls	r3, r3, #2
 8008d4e:	4413      	add	r3, r2
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d102      	bne.n	8008d60 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008d5a:	7bfb      	ldrb	r3, [r7, #15]
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	e007      	b.n	8008d70 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008d60:	7bfb      	ldrb	r3, [r7, #15]
 8008d62:	3301      	adds	r3, #1
 8008d64:	73fb      	strb	r3, [r7, #15]
 8008d66:	7bfb      	ldrb	r3, [r7, #15]
 8008d68:	2b0a      	cmp	r3, #10
 8008d6a:	d9ec      	bls.n	8008d46 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008d6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3714      	adds	r7, #20
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr

08008d7c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b087      	sub	sp, #28
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	60f8      	str	r0, [r7, #12]
 8008d84:	60b9      	str	r1, [r7, #8]
 8008d86:	4613      	mov	r3, r2
 8008d88:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008d92:	4b1f      	ldr	r3, [pc, #124]	; (8008e10 <FATFS_LinkDriverEx+0x94>)
 8008d94:	7a5b      	ldrb	r3, [r3, #9]
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d131      	bne.n	8008e00 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008d9c:	4b1c      	ldr	r3, [pc, #112]	; (8008e10 <FATFS_LinkDriverEx+0x94>)
 8008d9e:	7a5b      	ldrb	r3, [r3, #9]
 8008da0:	b2db      	uxtb	r3, r3
 8008da2:	461a      	mov	r2, r3
 8008da4:	4b1a      	ldr	r3, [pc, #104]	; (8008e10 <FATFS_LinkDriverEx+0x94>)
 8008da6:	2100      	movs	r1, #0
 8008da8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008daa:	4b19      	ldr	r3, [pc, #100]	; (8008e10 <FATFS_LinkDriverEx+0x94>)
 8008dac:	7a5b      	ldrb	r3, [r3, #9]
 8008dae:	b2db      	uxtb	r3, r3
 8008db0:	4a17      	ldr	r2, [pc, #92]	; (8008e10 <FATFS_LinkDriverEx+0x94>)
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	4413      	add	r3, r2
 8008db6:	68fa      	ldr	r2, [r7, #12]
 8008db8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008dba:	4b15      	ldr	r3, [pc, #84]	; (8008e10 <FATFS_LinkDriverEx+0x94>)
 8008dbc:	7a5b      	ldrb	r3, [r3, #9]
 8008dbe:	b2db      	uxtb	r3, r3
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	4b13      	ldr	r3, [pc, #76]	; (8008e10 <FATFS_LinkDriverEx+0x94>)
 8008dc4:	4413      	add	r3, r2
 8008dc6:	79fa      	ldrb	r2, [r7, #7]
 8008dc8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008dca:	4b11      	ldr	r3, [pc, #68]	; (8008e10 <FATFS_LinkDriverEx+0x94>)
 8008dcc:	7a5b      	ldrb	r3, [r3, #9]
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	1c5a      	adds	r2, r3, #1
 8008dd2:	b2d1      	uxtb	r1, r2
 8008dd4:	4a0e      	ldr	r2, [pc, #56]	; (8008e10 <FATFS_LinkDriverEx+0x94>)
 8008dd6:	7251      	strb	r1, [r2, #9]
 8008dd8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008dda:	7dbb      	ldrb	r3, [r7, #22]
 8008ddc:	3330      	adds	r3, #48	; 0x30
 8008dde:	b2da      	uxtb	r2, r3
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	3301      	adds	r3, #1
 8008de8:	223a      	movs	r2, #58	; 0x3a
 8008dea:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	3302      	adds	r3, #2
 8008df0:	222f      	movs	r2, #47	; 0x2f
 8008df2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	3303      	adds	r3, #3
 8008df8:	2200      	movs	r2, #0
 8008dfa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008e00:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	371c      	adds	r7, #28
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr
 8008e0e:	bf00      	nop
 8008e10:	200000bc 	.word	0x200000bc

08008e14 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b082      	sub	sp, #8
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008e1e:	2200      	movs	r2, #0
 8008e20:	6839      	ldr	r1, [r7, #0]
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f7ff ffaa 	bl	8008d7c <FATFS_LinkDriverEx>
 8008e28:	4603      	mov	r3, r0
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3708      	adds	r7, #8
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
	...

08008e34 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008e38:	2201      	movs	r2, #1
 8008e3a:	490e      	ldr	r1, [pc, #56]	; (8008e74 <MX_USB_HOST_Init+0x40>)
 8008e3c:	480e      	ldr	r0, [pc, #56]	; (8008e78 <MX_USB_HOST_Init+0x44>)
 8008e3e:	f7fd ff51 	bl	8006ce4 <USBH_Init>
 8008e42:	4603      	mov	r3, r0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d001      	beq.n	8008e4c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008e48:	f7f7 fdf4 	bl	8000a34 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 8008e4c:	490b      	ldr	r1, [pc, #44]	; (8008e7c <MX_USB_HOST_Init+0x48>)
 8008e4e:	480a      	ldr	r0, [pc, #40]	; (8008e78 <MX_USB_HOST_Init+0x44>)
 8008e50:	f7fd ffd6 	bl	8006e00 <USBH_RegisterClass>
 8008e54:	4603      	mov	r3, r0
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d001      	beq.n	8008e5e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008e5a:	f7f7 fdeb 	bl	8000a34 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008e5e:	4806      	ldr	r0, [pc, #24]	; (8008e78 <MX_USB_HOST_Init+0x44>)
 8008e60:	f7fe f85a 	bl	8006f18 <USBH_Start>
 8008e64:	4603      	mov	r3, r0
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d001      	beq.n	8008e6e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008e6a:	f7f7 fde3 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008e6e:	bf00      	nop
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	08008e81 	.word	0x08008e81
 8008e78:	20002208 	.word	0x20002208
 8008e7c:	20000010 	.word	0x20000010

08008e80 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b083      	sub	sp, #12
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	460b      	mov	r3, r1
 8008e8a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008e8c:	78fb      	ldrb	r3, [r7, #3]
 8008e8e:	3b01      	subs	r3, #1
 8008e90:	2b04      	cmp	r3, #4
 8008e92:	d819      	bhi.n	8008ec8 <USBH_UserProcess+0x48>
 8008e94:	a201      	add	r2, pc, #4	; (adr r2, 8008e9c <USBH_UserProcess+0x1c>)
 8008e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e9a:	bf00      	nop
 8008e9c:	08008ec9 	.word	0x08008ec9
 8008ea0:	08008eb9 	.word	0x08008eb9
 8008ea4:	08008ec9 	.word	0x08008ec9
 8008ea8:	08008ec1 	.word	0x08008ec1
 8008eac:	08008eb1 	.word	0x08008eb1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008eb0:	4b09      	ldr	r3, [pc, #36]	; (8008ed8 <USBH_UserProcess+0x58>)
 8008eb2:	2203      	movs	r2, #3
 8008eb4:	701a      	strb	r2, [r3, #0]
  break;
 8008eb6:	e008      	b.n	8008eca <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008eb8:	4b07      	ldr	r3, [pc, #28]	; (8008ed8 <USBH_UserProcess+0x58>)
 8008eba:	2202      	movs	r2, #2
 8008ebc:	701a      	strb	r2, [r3, #0]
  break;
 8008ebe:	e004      	b.n	8008eca <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008ec0:	4b05      	ldr	r3, [pc, #20]	; (8008ed8 <USBH_UserProcess+0x58>)
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	701a      	strb	r2, [r3, #0]
  break;
 8008ec6:	e000      	b.n	8008eca <USBH_UserProcess+0x4a>

  default:
  break;
 8008ec8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008eca:	bf00      	nop
 8008ecc:	370c      	adds	r7, #12
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed4:	4770      	bx	lr
 8008ed6:	bf00      	nop
 8008ed8:	200000c8 	.word	0x200000c8

08008edc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b08a      	sub	sp, #40	; 0x28
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ee4:	f107 0314 	add.w	r3, r7, #20
 8008ee8:	2200      	movs	r2, #0
 8008eea:	601a      	str	r2, [r3, #0]
 8008eec:	605a      	str	r2, [r3, #4]
 8008eee:	609a      	str	r2, [r3, #8]
 8008ef0:	60da      	str	r2, [r3, #12]
 8008ef2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a25      	ldr	r2, [pc, #148]	; (8008f90 <HAL_HCD_MspInit+0xb4>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d143      	bne.n	8008f86 <HAL_HCD_MspInit+0xaa>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008efe:	4b25      	ldr	r3, [pc, #148]	; (8008f94 <HAL_HCD_MspInit+0xb8>)
 8008f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008f04:	4a23      	ldr	r2, [pc, #140]	; (8008f94 <HAL_HCD_MspInit+0xb8>)
 8008f06:	f043 0301 	orr.w	r3, r3, #1
 8008f0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008f0e:	4b21      	ldr	r3, [pc, #132]	; (8008f94 <HAL_HCD_MspInit+0xb8>)
 8008f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008f14:	f003 0301 	and.w	r3, r3, #1
 8008f18:	613b      	str	r3, [r7, #16]
 8008f1a:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008f1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f22:	2300      	movs	r3, #0
 8008f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f26:	2300      	movs	r3, #0
 8008f28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f2a:	f107 0314 	add.w	r3, r7, #20
 8008f2e:	4619      	mov	r1, r3
 8008f30:	4819      	ldr	r0, [pc, #100]	; (8008f98 <HAL_HCD_MspInit+0xbc>)
 8008f32:	f7f8 faa1 	bl	8001478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8008f36:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008f3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f3c:	2302      	movs	r3, #2
 8008f3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f40:	2300      	movs	r3, #0
 8008f42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f44:	2300      	movs	r3, #0
 8008f46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8008f48:	230a      	movs	r3, #10
 8008f4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f4c:	f107 0314 	add.w	r3, r7, #20
 8008f50:	4619      	mov	r1, r3
 8008f52:	4811      	ldr	r0, [pc, #68]	; (8008f98 <HAL_HCD_MspInit+0xbc>)
 8008f54:	f7f8 fa90 	bl	8001478 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008f58:	4b0e      	ldr	r3, [pc, #56]	; (8008f94 <HAL_HCD_MspInit+0xb8>)
 8008f5a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008f5e:	4a0d      	ldr	r2, [pc, #52]	; (8008f94 <HAL_HCD_MspInit+0xb8>)
 8008f60:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008f64:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008f68:	4b0a      	ldr	r3, [pc, #40]	; (8008f94 <HAL_HCD_MspInit+0xb8>)
 8008f6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008f6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f72:	60fb      	str	r3, [r7, #12]
 8008f74:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008f76:	2200      	movs	r2, #0
 8008f78:	2100      	movs	r1, #0
 8008f7a:	2065      	movs	r0, #101	; 0x65
 8008f7c:	f7f8 f803 	bl	8000f86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008f80:	2065      	movs	r0, #101	; 0x65
 8008f82:	f7f8 f81a 	bl	8000fba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008f86:	bf00      	nop
 8008f88:	3728      	adds	r7, #40	; 0x28
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	40080000 	.word	0x40080000
 8008f94:	58024400 	.word	0x58024400
 8008f98:	58020000 	.word	0x58020000

08008f9c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b082      	sub	sp, #8
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7fd ffd3 	bl	8006f56 <USBH_LL_IncTimer>
}
 8008fb0:	bf00      	nop
 8008fb2:	3708      	adds	r7, #8
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b082      	sub	sp, #8
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f7fe f80b 	bl	8006fe2 <USBH_LL_Connect>
}
 8008fcc:	bf00      	nop
 8008fce:	3708      	adds	r7, #8
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}

08008fd4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b082      	sub	sp, #8
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f7fe f814 	bl	8007010 <USBH_LL_Disconnect>
}
 8008fe8:	bf00      	nop
 8008fea:	3708      	adds	r7, #8
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b083      	sub	sp, #12
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	70fb      	strb	r3, [r7, #3]
 8008ffc:	4613      	mov	r3, r2
 8008ffe:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009000:	bf00      	nop
 8009002:	370c      	adds	r7, #12
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr

0800900c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b082      	sub	sp, #8
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800901a:	4618      	mov	r0, r3
 800901c:	f7fd ffc5 	bl	8006faa <USBH_LL_PortEnabled>
}
 8009020:	bf00      	nop
 8009022:	3708      	adds	r7, #8
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b082      	sub	sp, #8
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009036:	4618      	mov	r0, r3
 8009038:	f7fd ffc5 	bl	8006fc6 <USBH_LL_PortDisabled>
}
 800903c:	bf00      	nop
 800903e:	3708      	adds	r7, #8
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b082      	sub	sp, #8
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009052:	2b01      	cmp	r3, #1
 8009054:	d129      	bne.n	80090aa <USBH_LL_Init+0x66>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009056:	4a17      	ldr	r2, [pc, #92]	; (80090b4 <USBH_LL_Init+0x70>)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	4a14      	ldr	r2, [pc, #80]	; (80090b4 <USBH_LL_Init+0x70>)
 8009062:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009066:	4b13      	ldr	r3, [pc, #76]	; (80090b4 <USBH_LL_Init+0x70>)
 8009068:	4a13      	ldr	r2, [pc, #76]	; (80090b8 <USBH_LL_Init+0x74>)
 800906a:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 16;
 800906c:	4b11      	ldr	r3, [pc, #68]	; (80090b4 <USBH_LL_Init+0x70>)
 800906e:	2210      	movs	r2, #16
 8009070:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009072:	4b10      	ldr	r3, [pc, #64]	; (80090b4 <USBH_LL_Init+0x70>)
 8009074:	2201      	movs	r2, #1
 8009076:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009078:	4b0e      	ldr	r3, [pc, #56]	; (80090b4 <USBH_LL_Init+0x70>)
 800907a:	2200      	movs	r2, #0
 800907c:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800907e:	4b0d      	ldr	r3, [pc, #52]	; (80090b4 <USBH_LL_Init+0x70>)
 8009080:	2202      	movs	r2, #2
 8009082:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009084:	4b0b      	ldr	r3, [pc, #44]	; (80090b4 <USBH_LL_Init+0x70>)
 8009086:	2200      	movs	r2, #0
 8009088:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800908a:	480a      	ldr	r0, [pc, #40]	; (80090b4 <USBH_LL_Init+0x70>)
 800908c:	f7f8 fbd8 	bl	8001840 <HAL_HCD_Init>
 8009090:	4603      	mov	r3, r0
 8009092:	2b00      	cmp	r3, #0
 8009094:	d001      	beq.n	800909a <USBH_LL_Init+0x56>
  {
    Error_Handler( );
 8009096:	f7f7 fccd 	bl	8000a34 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800909a:	4806      	ldr	r0, [pc, #24]	; (80090b4 <USBH_LL_Init+0x70>)
 800909c:	f7f8 ffce 	bl	800203c <HAL_HCD_GetCurrentFrame>
 80090a0:	4603      	mov	r3, r0
 80090a2:	4619      	mov	r1, r3
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f7fd ff47 	bl	8006f38 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80090aa:	2300      	movs	r3, #0
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3708      	adds	r7, #8
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}
 80090b4:	200025e0 	.word	0x200025e0
 80090b8:	40080000 	.word	0x40080000

080090bc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b084      	sub	sp, #16
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090c4:	2300      	movs	r3, #0
 80090c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090c8:	2300      	movs	r3, #0
 80090ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80090d2:	4618      	mov	r0, r3
 80090d4:	f7f8 ff48 	bl	8001f68 <HAL_HCD_Start>
 80090d8:	4603      	mov	r3, r0
 80090da:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80090dc:	7bfb      	ldrb	r3, [r7, #15]
 80090de:	4618      	mov	r0, r3
 80090e0:	f000 f944 	bl	800936c <USBH_Get_USB_Status>
 80090e4:	4603      	mov	r3, r0
 80090e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3710      	adds	r7, #16
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}

080090f2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80090f2:	b580      	push	{r7, lr}
 80090f4:	b084      	sub	sp, #16
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090fa:	2300      	movs	r3, #0
 80090fc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090fe:	2300      	movs	r3, #0
 8009100:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009108:	4618      	mov	r0, r3
 800910a:	f7f8 ff50 	bl	8001fae <HAL_HCD_Stop>
 800910e:	4603      	mov	r3, r0
 8009110:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009112:	7bfb      	ldrb	r3, [r7, #15]
 8009114:	4618      	mov	r0, r3
 8009116:	f000 f929 	bl	800936c <USBH_Get_USB_Status>
 800911a:	4603      	mov	r3, r0
 800911c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800911e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009120:	4618      	mov	r0, r3
 8009122:	3710      	adds	r7, #16
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	460b      	mov	r3, r1
 8009132:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800913a:	78fa      	ldrb	r2, [r7, #3]
 800913c:	4611      	mov	r1, r2
 800913e:	4618      	mov	r0, r3
 8009140:	f7f8 ff67 	bl	8002012 <HAL_HCD_HC_GetXferCount>
 8009144:	4603      	mov	r3, r0
}
 8009146:	4618      	mov	r0, r3
 8009148:	3708      	adds	r7, #8
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}

0800914e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800914e:	b590      	push	{r4, r7, lr}
 8009150:	b089      	sub	sp, #36	; 0x24
 8009152:	af04      	add	r7, sp, #16
 8009154:	6078      	str	r0, [r7, #4]
 8009156:	4608      	mov	r0, r1
 8009158:	4611      	mov	r1, r2
 800915a:	461a      	mov	r2, r3
 800915c:	4603      	mov	r3, r0
 800915e:	70fb      	strb	r3, [r7, #3]
 8009160:	460b      	mov	r3, r1
 8009162:	70bb      	strb	r3, [r7, #2]
 8009164:	4613      	mov	r3, r2
 8009166:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009168:	2300      	movs	r3, #0
 800916a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800916c:	2300      	movs	r3, #0
 800916e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009176:	787c      	ldrb	r4, [r7, #1]
 8009178:	78ba      	ldrb	r2, [r7, #2]
 800917a:	78f9      	ldrb	r1, [r7, #3]
 800917c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800917e:	9302      	str	r3, [sp, #8]
 8009180:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009184:	9301      	str	r3, [sp, #4]
 8009186:	f897 3020 	ldrb.w	r3, [r7, #32]
 800918a:	9300      	str	r3, [sp, #0]
 800918c:	4623      	mov	r3, r4
 800918e:	f7f8 fbb9 	bl	8001904 <HAL_HCD_HC_Init>
 8009192:	4603      	mov	r3, r0
 8009194:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009196:	7bfb      	ldrb	r3, [r7, #15]
 8009198:	4618      	mov	r0, r3
 800919a:	f000 f8e7 	bl	800936c <USBH_Get_USB_Status>
 800919e:	4603      	mov	r3, r0
 80091a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3714      	adds	r7, #20
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd90      	pop	{r4, r7, pc}

080091ac <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	460b      	mov	r3, r1
 80091b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091b8:	2300      	movs	r3, #0
 80091ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80091bc:	2300      	movs	r3, #0
 80091be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80091c6:	78fa      	ldrb	r2, [r7, #3]
 80091c8:	4611      	mov	r1, r2
 80091ca:	4618      	mov	r0, r3
 80091cc:	f7f8 fc32 	bl	8001a34 <HAL_HCD_HC_Halt>
 80091d0:	4603      	mov	r3, r0
 80091d2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80091d4:	7bfb      	ldrb	r3, [r7, #15]
 80091d6:	4618      	mov	r0, r3
 80091d8:	f000 f8c8 	bl	800936c <USBH_Get_USB_Status>
 80091dc:	4603      	mov	r3, r0
 80091de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3710      	adds	r7, #16
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80091ea:	b590      	push	{r4, r7, lr}
 80091ec:	b089      	sub	sp, #36	; 0x24
 80091ee:	af04      	add	r7, sp, #16
 80091f0:	6078      	str	r0, [r7, #4]
 80091f2:	4608      	mov	r0, r1
 80091f4:	4611      	mov	r1, r2
 80091f6:	461a      	mov	r2, r3
 80091f8:	4603      	mov	r3, r0
 80091fa:	70fb      	strb	r3, [r7, #3]
 80091fc:	460b      	mov	r3, r1
 80091fe:	70bb      	strb	r3, [r7, #2]
 8009200:	4613      	mov	r3, r2
 8009202:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009204:	2300      	movs	r3, #0
 8009206:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009208:	2300      	movs	r3, #0
 800920a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009212:	787c      	ldrb	r4, [r7, #1]
 8009214:	78ba      	ldrb	r2, [r7, #2]
 8009216:	78f9      	ldrb	r1, [r7, #3]
 8009218:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800921c:	9303      	str	r3, [sp, #12]
 800921e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009220:	9302      	str	r3, [sp, #8]
 8009222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009224:	9301      	str	r3, [sp, #4]
 8009226:	f897 3020 	ldrb.w	r3, [r7, #32]
 800922a:	9300      	str	r3, [sp, #0]
 800922c:	4623      	mov	r3, r4
 800922e:	f7f8 fc25 	bl	8001a7c <HAL_HCD_HC_SubmitRequest>
 8009232:	4603      	mov	r3, r0
 8009234:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009236:	7bfb      	ldrb	r3, [r7, #15]
 8009238:	4618      	mov	r0, r3
 800923a:	f000 f897 	bl	800936c <USBH_Get_USB_Status>
 800923e:	4603      	mov	r3, r0
 8009240:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009242:	7bbb      	ldrb	r3, [r7, #14]
}
 8009244:	4618      	mov	r0, r3
 8009246:	3714      	adds	r7, #20
 8009248:	46bd      	mov	sp, r7
 800924a:	bd90      	pop	{r4, r7, pc}

0800924c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b082      	sub	sp, #8
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	460b      	mov	r3, r1
 8009256:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800925e:	78fa      	ldrb	r2, [r7, #3]
 8009260:	4611      	mov	r1, r2
 8009262:	4618      	mov	r0, r3
 8009264:	f7f8 fec0 	bl	8001fe8 <HAL_HCD_HC_GetURBState>
 8009268:	4603      	mov	r3, r0
}
 800926a:	4618      	mov	r0, r3
 800926c:	3708      	adds	r7, #8
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}

08009272 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009272:	b580      	push	{r7, lr}
 8009274:	b082      	sub	sp, #8
 8009276:	af00      	add	r7, sp, #0
 8009278:	6078      	str	r0, [r7, #4]
 800927a:	460b      	mov	r3, r1
 800927c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009284:	2b01      	cmp	r3, #1
 8009286:	d103      	bne.n	8009290 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009288:	78fb      	ldrb	r3, [r7, #3]
 800928a:	4618      	mov	r0, r3
 800928c:	f000 f89a 	bl	80093c4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009290:	20c8      	movs	r0, #200	; 0xc8
 8009292:	f7f7 fd6f 	bl	8000d74 <HAL_Delay>
  return USBH_OK;
 8009296:	2300      	movs	r3, #0
}
 8009298:	4618      	mov	r0, r3
 800929a:	3708      	adds	r7, #8
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b085      	sub	sp, #20
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	460b      	mov	r3, r1
 80092aa:	70fb      	strb	r3, [r7, #3]
 80092ac:	4613      	mov	r3, r2
 80092ae:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80092b6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80092b8:	78fa      	ldrb	r2, [r7, #3]
 80092ba:	68f9      	ldr	r1, [r7, #12]
 80092bc:	4613      	mov	r3, r2
 80092be:	009b      	lsls	r3, r3, #2
 80092c0:	4413      	add	r3, r2
 80092c2:	00db      	lsls	r3, r3, #3
 80092c4:	440b      	add	r3, r1
 80092c6:	333b      	adds	r3, #59	; 0x3b
 80092c8:	781b      	ldrb	r3, [r3, #0]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d00a      	beq.n	80092e4 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80092ce:	78fa      	ldrb	r2, [r7, #3]
 80092d0:	68f9      	ldr	r1, [r7, #12]
 80092d2:	4613      	mov	r3, r2
 80092d4:	009b      	lsls	r3, r3, #2
 80092d6:	4413      	add	r3, r2
 80092d8:	00db      	lsls	r3, r3, #3
 80092da:	440b      	add	r3, r1
 80092dc:	3350      	adds	r3, #80	; 0x50
 80092de:	78ba      	ldrb	r2, [r7, #2]
 80092e0:	701a      	strb	r2, [r3, #0]
 80092e2:	e009      	b.n	80092f8 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80092e4:	78fa      	ldrb	r2, [r7, #3]
 80092e6:	68f9      	ldr	r1, [r7, #12]
 80092e8:	4613      	mov	r3, r2
 80092ea:	009b      	lsls	r3, r3, #2
 80092ec:	4413      	add	r3, r2
 80092ee:	00db      	lsls	r3, r3, #3
 80092f0:	440b      	add	r3, r1
 80092f2:	3351      	adds	r3, #81	; 0x51
 80092f4:	78ba      	ldrb	r2, [r7, #2]
 80092f6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80092f8:	2300      	movs	r3, #0
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3714      	adds	r7, #20
 80092fe:	46bd      	mov	sp, r7
 8009300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009304:	4770      	bx	lr

08009306 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009306:	b480      	push	{r7}
 8009308:	b085      	sub	sp, #20
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
 800930e:	460b      	mov	r3, r1
 8009310:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8009312:	2300      	movs	r3, #0
 8009314:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800931c:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800931e:	78fa      	ldrb	r2, [r7, #3]
 8009320:	68b9      	ldr	r1, [r7, #8]
 8009322:	4613      	mov	r3, r2
 8009324:	009b      	lsls	r3, r3, #2
 8009326:	4413      	add	r3, r2
 8009328:	00db      	lsls	r3, r3, #3
 800932a:	440b      	add	r3, r1
 800932c:	333b      	adds	r3, #59	; 0x3b
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d00a      	beq.n	800934a <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8009334:	78fa      	ldrb	r2, [r7, #3]
 8009336:	68b9      	ldr	r1, [r7, #8]
 8009338:	4613      	mov	r3, r2
 800933a:	009b      	lsls	r3, r3, #2
 800933c:	4413      	add	r3, r2
 800933e:	00db      	lsls	r3, r3, #3
 8009340:	440b      	add	r3, r1
 8009342:	3350      	adds	r3, #80	; 0x50
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	73fb      	strb	r3, [r7, #15]
 8009348:	e009      	b.n	800935e <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800934a:	78fa      	ldrb	r2, [r7, #3]
 800934c:	68b9      	ldr	r1, [r7, #8]
 800934e:	4613      	mov	r3, r2
 8009350:	009b      	lsls	r3, r3, #2
 8009352:	4413      	add	r3, r2
 8009354:	00db      	lsls	r3, r3, #3
 8009356:	440b      	add	r3, r1
 8009358:	3351      	adds	r3, #81	; 0x51
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800935e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009360:	4618      	mov	r0, r3
 8009362:	3714      	adds	r7, #20
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr

0800936c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800936c:	b480      	push	{r7}
 800936e:	b085      	sub	sp, #20
 8009370:	af00      	add	r7, sp, #0
 8009372:	4603      	mov	r3, r0
 8009374:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009376:	2300      	movs	r3, #0
 8009378:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800937a:	79fb      	ldrb	r3, [r7, #7]
 800937c:	2b03      	cmp	r3, #3
 800937e:	d817      	bhi.n	80093b0 <USBH_Get_USB_Status+0x44>
 8009380:	a201      	add	r2, pc, #4	; (adr r2, 8009388 <USBH_Get_USB_Status+0x1c>)
 8009382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009386:	bf00      	nop
 8009388:	08009399 	.word	0x08009399
 800938c:	0800939f 	.word	0x0800939f
 8009390:	080093a5 	.word	0x080093a5
 8009394:	080093ab 	.word	0x080093ab
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009398:	2300      	movs	r3, #0
 800939a:	73fb      	strb	r3, [r7, #15]
    break;
 800939c:	e00b      	b.n	80093b6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800939e:	2302      	movs	r3, #2
 80093a0:	73fb      	strb	r3, [r7, #15]
    break;
 80093a2:	e008      	b.n	80093b6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80093a4:	2301      	movs	r3, #1
 80093a6:	73fb      	strb	r3, [r7, #15]
    break;
 80093a8:	e005      	b.n	80093b6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80093aa:	2302      	movs	r3, #2
 80093ac:	73fb      	strb	r3, [r7, #15]
    break;
 80093ae:	e002      	b.n	80093b6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80093b0:	2302      	movs	r3, #2
 80093b2:	73fb      	strb	r3, [r7, #15]
    break;
 80093b4:	bf00      	nop
  }
  return usb_status;
 80093b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3714      	adds	r7, #20
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr

080093c4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b084      	sub	sp, #16
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	4603      	mov	r3, r0
 80093cc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80093ce:	79fb      	ldrb	r3, [r7, #7]
 80093d0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80093d2:	79fb      	ldrb	r3, [r7, #7]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d102      	bne.n	80093de <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80093d8:	2301      	movs	r3, #1
 80093da:	73fb      	strb	r3, [r7, #15]
 80093dc:	e001      	b.n	80093e2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80093de:	2300      	movs	r3, #0
 80093e0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOI,GPIO_PIN_12,(GPIO_PinState)data);
 80093e2:	7bfb      	ldrb	r3, [r7, #15]
 80093e4:	461a      	mov	r2, r3
 80093e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80093ea:	4803      	ldr	r0, [pc, #12]	; (80093f8 <MX_DriverVbusFS+0x34>)
 80093ec:	f7f8 f9f4 	bl	80017d8 <HAL_GPIO_WritePin>
}
 80093f0:	bf00      	nop
 80093f2:	3710      	adds	r7, #16
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	58022000 	.word	0x58022000

080093fc <__errno>:
 80093fc:	4b01      	ldr	r3, [pc, #4]	; (8009404 <__errno+0x8>)
 80093fe:	6818      	ldr	r0, [r3, #0]
 8009400:	4770      	bx	lr
 8009402:	bf00      	nop
 8009404:	20000030 	.word	0x20000030

08009408 <__libc_init_array>:
 8009408:	b570      	push	{r4, r5, r6, lr}
 800940a:	4e0d      	ldr	r6, [pc, #52]	; (8009440 <__libc_init_array+0x38>)
 800940c:	4c0d      	ldr	r4, [pc, #52]	; (8009444 <__libc_init_array+0x3c>)
 800940e:	1ba4      	subs	r4, r4, r6
 8009410:	10a4      	asrs	r4, r4, #2
 8009412:	2500      	movs	r5, #0
 8009414:	42a5      	cmp	r5, r4
 8009416:	d109      	bne.n	800942c <__libc_init_array+0x24>
 8009418:	4e0b      	ldr	r6, [pc, #44]	; (8009448 <__libc_init_array+0x40>)
 800941a:	4c0c      	ldr	r4, [pc, #48]	; (800944c <__libc_init_array+0x44>)
 800941c:	f000 f8f6 	bl	800960c <_init>
 8009420:	1ba4      	subs	r4, r4, r6
 8009422:	10a4      	asrs	r4, r4, #2
 8009424:	2500      	movs	r5, #0
 8009426:	42a5      	cmp	r5, r4
 8009428:	d105      	bne.n	8009436 <__libc_init_array+0x2e>
 800942a:	bd70      	pop	{r4, r5, r6, pc}
 800942c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009430:	4798      	blx	r3
 8009432:	3501      	adds	r5, #1
 8009434:	e7ee      	b.n	8009414 <__libc_init_array+0xc>
 8009436:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800943a:	4798      	blx	r3
 800943c:	3501      	adds	r5, #1
 800943e:	e7f2      	b.n	8009426 <__libc_init_array+0x1e>
 8009440:	0800967c 	.word	0x0800967c
 8009444:	0800967c 	.word	0x0800967c
 8009448:	0800967c 	.word	0x0800967c
 800944c:	08009680 	.word	0x08009680

08009450 <malloc>:
 8009450:	4b02      	ldr	r3, [pc, #8]	; (800945c <malloc+0xc>)
 8009452:	4601      	mov	r1, r0
 8009454:	6818      	ldr	r0, [r3, #0]
 8009456:	f000 b86d 	b.w	8009534 <_malloc_r>
 800945a:	bf00      	nop
 800945c:	20000030 	.word	0x20000030

08009460 <free>:
 8009460:	4b02      	ldr	r3, [pc, #8]	; (800946c <free+0xc>)
 8009462:	4601      	mov	r1, r0
 8009464:	6818      	ldr	r0, [r3, #0]
 8009466:	f000 b817 	b.w	8009498 <_free_r>
 800946a:	bf00      	nop
 800946c:	20000030 	.word	0x20000030

08009470 <memcpy>:
 8009470:	b510      	push	{r4, lr}
 8009472:	1e43      	subs	r3, r0, #1
 8009474:	440a      	add	r2, r1
 8009476:	4291      	cmp	r1, r2
 8009478:	d100      	bne.n	800947c <memcpy+0xc>
 800947a:	bd10      	pop	{r4, pc}
 800947c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009480:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009484:	e7f7      	b.n	8009476 <memcpy+0x6>

08009486 <memset>:
 8009486:	4402      	add	r2, r0
 8009488:	4603      	mov	r3, r0
 800948a:	4293      	cmp	r3, r2
 800948c:	d100      	bne.n	8009490 <memset+0xa>
 800948e:	4770      	bx	lr
 8009490:	f803 1b01 	strb.w	r1, [r3], #1
 8009494:	e7f9      	b.n	800948a <memset+0x4>
	...

08009498 <_free_r>:
 8009498:	b538      	push	{r3, r4, r5, lr}
 800949a:	4605      	mov	r5, r0
 800949c:	2900      	cmp	r1, #0
 800949e:	d045      	beq.n	800952c <_free_r+0x94>
 80094a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094a4:	1f0c      	subs	r4, r1, #4
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	bfb8      	it	lt
 80094aa:	18e4      	addlt	r4, r4, r3
 80094ac:	f000 f8ac 	bl	8009608 <__malloc_lock>
 80094b0:	4a1f      	ldr	r2, [pc, #124]	; (8009530 <_free_r+0x98>)
 80094b2:	6813      	ldr	r3, [r2, #0]
 80094b4:	4610      	mov	r0, r2
 80094b6:	b933      	cbnz	r3, 80094c6 <_free_r+0x2e>
 80094b8:	6063      	str	r3, [r4, #4]
 80094ba:	6014      	str	r4, [r2, #0]
 80094bc:	4628      	mov	r0, r5
 80094be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094c2:	f000 b8a2 	b.w	800960a <__malloc_unlock>
 80094c6:	42a3      	cmp	r3, r4
 80094c8:	d90c      	bls.n	80094e4 <_free_r+0x4c>
 80094ca:	6821      	ldr	r1, [r4, #0]
 80094cc:	1862      	adds	r2, r4, r1
 80094ce:	4293      	cmp	r3, r2
 80094d0:	bf04      	itt	eq
 80094d2:	681a      	ldreq	r2, [r3, #0]
 80094d4:	685b      	ldreq	r3, [r3, #4]
 80094d6:	6063      	str	r3, [r4, #4]
 80094d8:	bf04      	itt	eq
 80094da:	1852      	addeq	r2, r2, r1
 80094dc:	6022      	streq	r2, [r4, #0]
 80094de:	6004      	str	r4, [r0, #0]
 80094e0:	e7ec      	b.n	80094bc <_free_r+0x24>
 80094e2:	4613      	mov	r3, r2
 80094e4:	685a      	ldr	r2, [r3, #4]
 80094e6:	b10a      	cbz	r2, 80094ec <_free_r+0x54>
 80094e8:	42a2      	cmp	r2, r4
 80094ea:	d9fa      	bls.n	80094e2 <_free_r+0x4a>
 80094ec:	6819      	ldr	r1, [r3, #0]
 80094ee:	1858      	adds	r0, r3, r1
 80094f0:	42a0      	cmp	r0, r4
 80094f2:	d10b      	bne.n	800950c <_free_r+0x74>
 80094f4:	6820      	ldr	r0, [r4, #0]
 80094f6:	4401      	add	r1, r0
 80094f8:	1858      	adds	r0, r3, r1
 80094fa:	4282      	cmp	r2, r0
 80094fc:	6019      	str	r1, [r3, #0]
 80094fe:	d1dd      	bne.n	80094bc <_free_r+0x24>
 8009500:	6810      	ldr	r0, [r2, #0]
 8009502:	6852      	ldr	r2, [r2, #4]
 8009504:	605a      	str	r2, [r3, #4]
 8009506:	4401      	add	r1, r0
 8009508:	6019      	str	r1, [r3, #0]
 800950a:	e7d7      	b.n	80094bc <_free_r+0x24>
 800950c:	d902      	bls.n	8009514 <_free_r+0x7c>
 800950e:	230c      	movs	r3, #12
 8009510:	602b      	str	r3, [r5, #0]
 8009512:	e7d3      	b.n	80094bc <_free_r+0x24>
 8009514:	6820      	ldr	r0, [r4, #0]
 8009516:	1821      	adds	r1, r4, r0
 8009518:	428a      	cmp	r2, r1
 800951a:	bf04      	itt	eq
 800951c:	6811      	ldreq	r1, [r2, #0]
 800951e:	6852      	ldreq	r2, [r2, #4]
 8009520:	6062      	str	r2, [r4, #4]
 8009522:	bf04      	itt	eq
 8009524:	1809      	addeq	r1, r1, r0
 8009526:	6021      	streq	r1, [r4, #0]
 8009528:	605c      	str	r4, [r3, #4]
 800952a:	e7c7      	b.n	80094bc <_free_r+0x24>
 800952c:	bd38      	pop	{r3, r4, r5, pc}
 800952e:	bf00      	nop
 8009530:	200000cc 	.word	0x200000cc

08009534 <_malloc_r>:
 8009534:	b570      	push	{r4, r5, r6, lr}
 8009536:	1ccd      	adds	r5, r1, #3
 8009538:	f025 0503 	bic.w	r5, r5, #3
 800953c:	3508      	adds	r5, #8
 800953e:	2d0c      	cmp	r5, #12
 8009540:	bf38      	it	cc
 8009542:	250c      	movcc	r5, #12
 8009544:	2d00      	cmp	r5, #0
 8009546:	4606      	mov	r6, r0
 8009548:	db01      	blt.n	800954e <_malloc_r+0x1a>
 800954a:	42a9      	cmp	r1, r5
 800954c:	d903      	bls.n	8009556 <_malloc_r+0x22>
 800954e:	230c      	movs	r3, #12
 8009550:	6033      	str	r3, [r6, #0]
 8009552:	2000      	movs	r0, #0
 8009554:	bd70      	pop	{r4, r5, r6, pc}
 8009556:	f000 f857 	bl	8009608 <__malloc_lock>
 800955a:	4a21      	ldr	r2, [pc, #132]	; (80095e0 <_malloc_r+0xac>)
 800955c:	6814      	ldr	r4, [r2, #0]
 800955e:	4621      	mov	r1, r4
 8009560:	b991      	cbnz	r1, 8009588 <_malloc_r+0x54>
 8009562:	4c20      	ldr	r4, [pc, #128]	; (80095e4 <_malloc_r+0xb0>)
 8009564:	6823      	ldr	r3, [r4, #0]
 8009566:	b91b      	cbnz	r3, 8009570 <_malloc_r+0x3c>
 8009568:	4630      	mov	r0, r6
 800956a:	f000 f83d 	bl	80095e8 <_sbrk_r>
 800956e:	6020      	str	r0, [r4, #0]
 8009570:	4629      	mov	r1, r5
 8009572:	4630      	mov	r0, r6
 8009574:	f000 f838 	bl	80095e8 <_sbrk_r>
 8009578:	1c43      	adds	r3, r0, #1
 800957a:	d124      	bne.n	80095c6 <_malloc_r+0x92>
 800957c:	230c      	movs	r3, #12
 800957e:	6033      	str	r3, [r6, #0]
 8009580:	4630      	mov	r0, r6
 8009582:	f000 f842 	bl	800960a <__malloc_unlock>
 8009586:	e7e4      	b.n	8009552 <_malloc_r+0x1e>
 8009588:	680b      	ldr	r3, [r1, #0]
 800958a:	1b5b      	subs	r3, r3, r5
 800958c:	d418      	bmi.n	80095c0 <_malloc_r+0x8c>
 800958e:	2b0b      	cmp	r3, #11
 8009590:	d90f      	bls.n	80095b2 <_malloc_r+0x7e>
 8009592:	600b      	str	r3, [r1, #0]
 8009594:	50cd      	str	r5, [r1, r3]
 8009596:	18cc      	adds	r4, r1, r3
 8009598:	4630      	mov	r0, r6
 800959a:	f000 f836 	bl	800960a <__malloc_unlock>
 800959e:	f104 000b 	add.w	r0, r4, #11
 80095a2:	1d23      	adds	r3, r4, #4
 80095a4:	f020 0007 	bic.w	r0, r0, #7
 80095a8:	1ac3      	subs	r3, r0, r3
 80095aa:	d0d3      	beq.n	8009554 <_malloc_r+0x20>
 80095ac:	425a      	negs	r2, r3
 80095ae:	50e2      	str	r2, [r4, r3]
 80095b0:	e7d0      	b.n	8009554 <_malloc_r+0x20>
 80095b2:	428c      	cmp	r4, r1
 80095b4:	684b      	ldr	r3, [r1, #4]
 80095b6:	bf16      	itet	ne
 80095b8:	6063      	strne	r3, [r4, #4]
 80095ba:	6013      	streq	r3, [r2, #0]
 80095bc:	460c      	movne	r4, r1
 80095be:	e7eb      	b.n	8009598 <_malloc_r+0x64>
 80095c0:	460c      	mov	r4, r1
 80095c2:	6849      	ldr	r1, [r1, #4]
 80095c4:	e7cc      	b.n	8009560 <_malloc_r+0x2c>
 80095c6:	1cc4      	adds	r4, r0, #3
 80095c8:	f024 0403 	bic.w	r4, r4, #3
 80095cc:	42a0      	cmp	r0, r4
 80095ce:	d005      	beq.n	80095dc <_malloc_r+0xa8>
 80095d0:	1a21      	subs	r1, r4, r0
 80095d2:	4630      	mov	r0, r6
 80095d4:	f000 f808 	bl	80095e8 <_sbrk_r>
 80095d8:	3001      	adds	r0, #1
 80095da:	d0cf      	beq.n	800957c <_malloc_r+0x48>
 80095dc:	6025      	str	r5, [r4, #0]
 80095de:	e7db      	b.n	8009598 <_malloc_r+0x64>
 80095e0:	200000cc 	.word	0x200000cc
 80095e4:	200000d0 	.word	0x200000d0

080095e8 <_sbrk_r>:
 80095e8:	b538      	push	{r3, r4, r5, lr}
 80095ea:	4c06      	ldr	r4, [pc, #24]	; (8009604 <_sbrk_r+0x1c>)
 80095ec:	2300      	movs	r3, #0
 80095ee:	4605      	mov	r5, r0
 80095f0:	4608      	mov	r0, r1
 80095f2:	6023      	str	r3, [r4, #0]
 80095f4:	f7f7 facc 	bl	8000b90 <_sbrk>
 80095f8:	1c43      	adds	r3, r0, #1
 80095fa:	d102      	bne.n	8009602 <_sbrk_r+0x1a>
 80095fc:	6823      	ldr	r3, [r4, #0]
 80095fe:	b103      	cbz	r3, 8009602 <_sbrk_r+0x1a>
 8009600:	602b      	str	r3, [r5, #0]
 8009602:	bd38      	pop	{r3, r4, r5, pc}
 8009604:	200028a4 	.word	0x200028a4

08009608 <__malloc_lock>:
 8009608:	4770      	bx	lr

0800960a <__malloc_unlock>:
 800960a:	4770      	bx	lr

0800960c <_init>:
 800960c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800960e:	bf00      	nop
 8009610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009612:	bc08      	pop	{r3}
 8009614:	469e      	mov	lr, r3
 8009616:	4770      	bx	lr

08009618 <_fini>:
 8009618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800961a:	bf00      	nop
 800961c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800961e:	bc08      	pop	{r3}
 8009620:	469e      	mov	lr, r3
 8009622:	4770      	bx	lr
