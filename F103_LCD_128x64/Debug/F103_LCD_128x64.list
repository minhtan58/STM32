
F103_LCD_128x64.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002774  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  08002880  08002880  00012880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d48  08002d48  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08002d48  08002d48  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d48  08002d48  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d48  08002d48  00012d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d4c  08002d4c  00012d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08002d50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000494  20000024  08002d74  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  08002d74  000204b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007464  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001525  00000000  00000000  000274b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000738  00000000  00000000  000289d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006a8  00000000  00000000  00029110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170ed  00000000  00000000  000297b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007eea  00000000  00000000  000408a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082348  00000000  00000000  0004878f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000caad7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ca0  00000000  00000000  000cab2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	08002868 	.word	0x08002868

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	08002868 	.word	0x08002868

0800014c <spi_wb>:
uint8_t invertCh;
uint8_t spacing = 1;

// ----------------------------------------------------------------
void spi_wb(uint8_t b)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &b, 1, 0xFFFFFFFF);
 8000156:	1df9      	adds	r1, r7, #7
 8000158:	f04f 33ff 	mov.w	r3, #4294967295
 800015c:	2201      	movs	r2, #1
 800015e:	4803      	ldr	r0, [pc, #12]	; (800016c <spi_wb+0x20>)
 8000160:	f002 f974 	bl	800244c <HAL_SPI_Transmit>
}
 8000164:	bf00      	nop
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}
 800016c:	2000045c 	.word	0x2000045c

08000170 <init>:

// ----------------------------------------------------------------
void init()
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	scrWd = SCR_WD/8;
 8000174:	4b1a      	ldr	r3, [pc, #104]	; (80001e0 <init+0x70>)
 8000176:	2210      	movs	r2, #16
 8000178:	701a      	strb	r2, [r3, #0]
	scrHt = SCR_HT;
 800017a:	4b1a      	ldr	r3, [pc, #104]	; (80001e4 <init+0x74>)
 800017c:	2240      	movs	r2, #64	; 0x40
 800017e:	701a      	strb	r2, [r3, #0]

	isNumberFun = &isNumber;
 8000180:	4b19      	ldr	r3, [pc, #100]	; (80001e8 <init+0x78>)
 8000182:	4a1a      	ldr	r2, [pc, #104]	; (80001ec <init+0x7c>)
 8000184:	601a      	str	r2, [r3, #0]
	cr = 0;
 8000186:	4b1a      	ldr	r3, [pc, #104]	; (80001f0 <init+0x80>)
 8000188:	2200      	movs	r2, #0
 800018a:	701a      	strb	r2, [r3, #0]
	cfont.font = NULL;
 800018c:	4b19      	ldr	r3, [pc, #100]	; (80001f4 <init+0x84>)
 800018e:	2200      	movs	r2, #0
 8000190:	601a      	str	r2, [r3, #0]
	dualChar = 0;
 8000192:	4b19      	ldr	r3, [pc, #100]	; (80001f8 <init+0x88>)
 8000194:	2200      	movs	r2, #0
 8000196:	701a      	strb	r2, [r3, #0]

	//pinMode(csPin, OUTPUT);
	//digitalWrite(csPin, LOW);
	//SPI.begin();

	sendCmd(LCD_BASIC);
 8000198:	2030      	movs	r0, #48	; 0x30
 800019a:	f000 f82f 	bl	80001fc <sendCmd>
	HAL_Delay(2);
 800019e:	2002      	movs	r0, #2
 80001a0:	f001 fa44 	bl	800162c <HAL_Delay>
	sendCmd(LCD_BASIC);
 80001a4:	2030      	movs	r0, #48	; 0x30
 80001a6:	f000 f829 	bl	80001fc <sendCmd>
	HAL_Delay(2);
 80001aa:	2002      	movs	r0, #2
 80001ac:	f001 fa3e 	bl	800162c <HAL_Delay>
	sendCmd(LCD_CLS);
 80001b0:	2001      	movs	r0, #1
 80001b2:	f000 f823 	bl	80001fc <sendCmd>
	HAL_Delay(2);
 80001b6:	2002      	movs	r0, #2
 80001b8:	f001 fa38 	bl	800162c <HAL_Delay>
	sendCmd(LCD_ADDRINC);
 80001bc:	2006      	movs	r0, #6
 80001be:	f000 f81d 	bl	80001fc <sendCmd>
	HAL_Delay(2);
 80001c2:	2002      	movs	r0, #2
 80001c4:	f001 fa32 	bl	800162c <HAL_Delay>
	sendCmd(LCD_DISPLAYON);
 80001c8:	200c      	movs	r0, #12
 80001ca:	f000 f817 	bl	80001fc <sendCmd>
	HAL_Delay(2);
 80001ce:	2002      	movs	r0, #2
 80001d0:	f001 fa2c 	bl	800162c <HAL_Delay>
	setGfxMode(true);
 80001d4:	2001      	movs	r0, #1
 80001d6:	f000 f837 	bl	8000248 <setGfxMode>
}
 80001da:	bf00      	nop
 80001dc:	bd80      	pop	{r7, pc}
 80001de:	bf00      	nop
 80001e0:	20000000 	.word	0x20000000
 80001e4:	20000001 	.word	0x20000001
 80001e8:	20000448 	.word	0x20000448
 80001ec:	08000da5 	.word	0x08000da5
 80001f0:	20000444 	.word	0x20000444
 80001f4:	2000044c 	.word	0x2000044c
 80001f8:	20000040 	.word	0x20000040

080001fc <sendCmd>:
// ----------------------------------------------------------------
void sendCmd(uint8_t b)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
 8000202:	4603      	mov	r3, r0
 8000204:	71fb      	strb	r3, [r7, #7]
	//SPI.beginTransaction(SPISettings(SPI_SPEED, MSBFIRST, SPI_MODE3));
	//digitalWrite(csPin, HIGH);

	spi_enable;
 8000206:	2200      	movs	r2, #0
 8000208:	2110      	movs	r1, #16
 800020a:	480e      	ldr	r0, [pc, #56]	; (8000244 <sendCmd+0x48>)
 800020c:	f001 fc9a 	bl	8001b44 <HAL_GPIO_WritePin>
	spi_wb(0xF8);
 8000210:	20f8      	movs	r0, #248	; 0xf8
 8000212:	f7ff ff9b 	bl	800014c <spi_wb>
	spi_wb(b & 0xF0);
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	f023 030f 	bic.w	r3, r3, #15
 800021c:	b2db      	uxtb	r3, r3
 800021e:	4618      	mov	r0, r3
 8000220:	f7ff ff94 	bl	800014c <spi_wb>
	spi_wb(b << 4);
 8000224:	79fb      	ldrb	r3, [r7, #7]
 8000226:	011b      	lsls	r3, r3, #4
 8000228:	b2db      	uxtb	r3, r3
 800022a:	4618      	mov	r0, r3
 800022c:	f7ff ff8e 	bl	800014c <spi_wb>
	spi_disable;
 8000230:	2201      	movs	r2, #1
 8000232:	2110      	movs	r1, #16
 8000234:	4803      	ldr	r0, [pc, #12]	; (8000244 <sendCmd+0x48>)
 8000236:	f001 fc85 	bl	8001b44 <HAL_GPIO_WritePin>

	//digitalWrite(csPin, LOW);
	//SPI.endTransaction();
}
 800023a:	bf00      	nop
 800023c:	3708      	adds	r7, #8
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	40010800 	.word	0x40010800

08000248 <setGfxMode>:
}
// ----------------------------------------------------------------
// true - graphics mode
// false - text mode
void setGfxMode(bool mode)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	4603      	mov	r3, r0
 8000250:	71fb      	strb	r3, [r7, #7]
  if(mode) {
 8000252:	79fb      	ldrb	r3, [r7, #7]
 8000254:	2b00      	cmp	r3, #0
 8000256:	d009      	beq.n	800026c <setGfxMode+0x24>
    sendCmd(LCD_EXTEND);
 8000258:	2034      	movs	r0, #52	; 0x34
 800025a:	f7ff ffcf 	bl	80001fc <sendCmd>
    HAL_Delay(2);
 800025e:	2002      	movs	r0, #2
 8000260:	f001 f9e4 	bl	800162c <HAL_Delay>
    sendCmd(LCD_GFXMODE);
 8000264:	2036      	movs	r0, #54	; 0x36
 8000266:	f7ff ffc9 	bl	80001fc <sendCmd>
  } else {
    sendCmd(LCD_EXTEND);
    HAL_Delay(2);
    sendCmd(LCD_TXTMODE);
  }
}
 800026a:	e008      	b.n	800027e <setGfxMode+0x36>
    sendCmd(LCD_EXTEND);
 800026c:	2034      	movs	r0, #52	; 0x34
 800026e:	f7ff ffc5 	bl	80001fc <sendCmd>
    HAL_Delay(2);
 8000272:	2002      	movs	r0, #2
 8000274:	f001 f9da 	bl	800162c <HAL_Delay>
    sendCmd(LCD_TXTMODE);
 8000278:	2034      	movs	r0, #52	; 0x34
 800027a:	f7ff ffbf 	bl	80001fc <sendCmd>
}
 800027e:	bf00      	nop
 8000280:	3708      	adds	r7, #8
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
	...

08000288 <cls>:
		//SPI.endTransaction();
	}
}
// ----------------------------------------------------------------
void cls()
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	//for(int i=0;i<scrWd*scrHt;i++) scr[i]=0;
	//memset(scr,0,scrWd*scrHt);
	memset(scr,0,SCR_WD*SCR_HT/8);
 800028c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000290:	2100      	movs	r1, #0
 8000292:	4802      	ldr	r0, [pc, #8]	; (800029c <cls+0x14>)
 8000294:	f002 fae0 	bl	8002858 <memset>
}
 8000298:	bf00      	nop
 800029a:	bd80      	pop	{r7, pc}
 800029c:	20000044 	.word	0x20000044

080002a0 <drawLineVfast>:
	else      for(uint8_t y=y1; y<=y0; y++) drawPixel(x,y,col);
}
// ----------------------------------------------------------------
// about 4x faster than regular drawLineV
void drawLineVfast(uint8_t x, uint8_t y0, uint8_t y1, uint8_t col)
{
 80002a0:	b490      	push	{r4, r7}
 80002a2:	b086      	sub	sp, #24
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	4604      	mov	r4, r0
 80002a8:	4608      	mov	r0, r1
 80002aa:	4611      	mov	r1, r2
 80002ac:	461a      	mov	r2, r3
 80002ae:	4623      	mov	r3, r4
 80002b0:	71fb      	strb	r3, [r7, #7]
 80002b2:	4603      	mov	r3, r0
 80002b4:	71bb      	strb	r3, [r7, #6]
 80002b6:	460b      	mov	r3, r1
 80002b8:	717b      	strb	r3, [r7, #5]
 80002ba:	4613      	mov	r3, r2
 80002bc:	713b      	strb	r3, [r7, #4]
	uint8_t mask = 0x80 >> (x&7);
 80002be:	79fb      	ldrb	r3, [r7, #7]
 80002c0:	f003 0307 	and.w	r3, r3, #7
 80002c4:	2280      	movs	r2, #128	; 0x80
 80002c6:	fa42 f303 	asr.w	r3, r2, r3
 80002ca:	72fb      	strb	r3, [r7, #11]
	if(y1<y0) {
 80002cc:	797a      	ldrb	r2, [r7, #5]
 80002ce:	79bb      	ldrb	r3, [r7, #6]
 80002d0:	429a      	cmp	r2, r3
 80002d2:	d205      	bcs.n	80002e0 <drawLineVfast+0x40>
		mask=y0; y0=y1; y1=mask; // swap
 80002d4:	79bb      	ldrb	r3, [r7, #6]
 80002d6:	72fb      	strb	r3, [r7, #11]
 80002d8:	797b      	ldrb	r3, [r7, #5]
 80002da:	71bb      	strb	r3, [r7, #6]
 80002dc:	7afb      	ldrb	r3, [r7, #11]
 80002de:	717b      	strb	r3, [r7, #5]
	}
	mask = 0x80 >> (x&7);
 80002e0:	79fb      	ldrb	r3, [r7, #7]
 80002e2:	f003 0307 	and.w	r3, r3, #7
 80002e6:	2280      	movs	r2, #128	; 0x80
 80002e8:	fa42 f303 	asr.w	r3, r2, r3
 80002ec:	72fb      	strb	r3, [r7, #11]
	switch(col) {
 80002ee:	793b      	ldrb	r3, [r7, #4]
 80002f0:	2b02      	cmp	r3, #2
 80002f2:	d053      	beq.n	800039c <drawLineVfast+0xfc>
 80002f4:	2b02      	cmp	r3, #2
 80002f6:	dc76      	bgt.n	80003e6 <drawLineVfast+0x146>
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d026      	beq.n	800034a <drawLineVfast+0xaa>
 80002fc:	2b01      	cmp	r3, #1
 80002fe:	d172      	bne.n	80003e6 <drawLineVfast+0x146>
		case 1: for(int y=y0; y<=y1; y++) scr[y*scrWd+x/8] |= mask;   break;
 8000300:	79bb      	ldrb	r3, [r7, #6]
 8000302:	617b      	str	r3, [r7, #20]
 8000304:	e01c      	b.n	8000340 <drawLineVfast+0xa0>
 8000306:	4b3a      	ldr	r3, [pc, #232]	; (80003f0 <drawLineVfast+0x150>)
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	461a      	mov	r2, r3
 800030c:	697b      	ldr	r3, [r7, #20]
 800030e:	fb03 f302 	mul.w	r3, r3, r2
 8000312:	79fa      	ldrb	r2, [r7, #7]
 8000314:	08d2      	lsrs	r2, r2, #3
 8000316:	b2d0      	uxtb	r0, r2
 8000318:	4602      	mov	r2, r0
 800031a:	4413      	add	r3, r2
 800031c:	4a35      	ldr	r2, [pc, #212]	; (80003f4 <drawLineVfast+0x154>)
 800031e:	5cd1      	ldrb	r1, [r2, r3]
 8000320:	4b33      	ldr	r3, [pc, #204]	; (80003f0 <drawLineVfast+0x150>)
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	461a      	mov	r2, r3
 8000326:	697b      	ldr	r3, [r7, #20]
 8000328:	fb03 f302 	mul.w	r3, r3, r2
 800032c:	4602      	mov	r2, r0
 800032e:	4413      	add	r3, r2
 8000330:	7afa      	ldrb	r2, [r7, #11]
 8000332:	430a      	orrs	r2, r1
 8000334:	b2d1      	uxtb	r1, r2
 8000336:	4a2f      	ldr	r2, [pc, #188]	; (80003f4 <drawLineVfast+0x154>)
 8000338:	54d1      	strb	r1, [r2, r3]
 800033a:	697b      	ldr	r3, [r7, #20]
 800033c:	3301      	adds	r3, #1
 800033e:	617b      	str	r3, [r7, #20]
 8000340:	797b      	ldrb	r3, [r7, #5]
 8000342:	697a      	ldr	r2, [r7, #20]
 8000344:	429a      	cmp	r2, r3
 8000346:	ddde      	ble.n	8000306 <drawLineVfast+0x66>
 8000348:	e04d      	b.n	80003e6 <drawLineVfast+0x146>
		case 0: for(int y=y0; y<=y1; y++) scr[y*scrWd+x/8] &= ~mask;  break;
 800034a:	79bb      	ldrb	r3, [r7, #6]
 800034c:	613b      	str	r3, [r7, #16]
 800034e:	e020      	b.n	8000392 <drawLineVfast+0xf2>
 8000350:	4b27      	ldr	r3, [pc, #156]	; (80003f0 <drawLineVfast+0x150>)
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	461a      	mov	r2, r3
 8000356:	693b      	ldr	r3, [r7, #16]
 8000358:	fb03 f302 	mul.w	r3, r3, r2
 800035c:	79fa      	ldrb	r2, [r7, #7]
 800035e:	08d2      	lsrs	r2, r2, #3
 8000360:	b2d1      	uxtb	r1, r2
 8000362:	460a      	mov	r2, r1
 8000364:	4413      	add	r3, r2
 8000366:	4a23      	ldr	r2, [pc, #140]	; (80003f4 <drawLineVfast+0x154>)
 8000368:	5cd3      	ldrb	r3, [r2, r3]
 800036a:	b25a      	sxtb	r2, r3
 800036c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000370:	43db      	mvns	r3, r3
 8000372:	b25b      	sxtb	r3, r3
 8000374:	4013      	ands	r3, r2
 8000376:	b25a      	sxtb	r2, r3
 8000378:	4b1d      	ldr	r3, [pc, #116]	; (80003f0 <drawLineVfast+0x150>)
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	4618      	mov	r0, r3
 800037e:	693b      	ldr	r3, [r7, #16]
 8000380:	fb03 f300 	mul.w	r3, r3, r0
 8000384:	440b      	add	r3, r1
 8000386:	b2d1      	uxtb	r1, r2
 8000388:	4a1a      	ldr	r2, [pc, #104]	; (80003f4 <drawLineVfast+0x154>)
 800038a:	54d1      	strb	r1, [r2, r3]
 800038c:	693b      	ldr	r3, [r7, #16]
 800038e:	3301      	adds	r3, #1
 8000390:	613b      	str	r3, [r7, #16]
 8000392:	797b      	ldrb	r3, [r7, #5]
 8000394:	693a      	ldr	r2, [r7, #16]
 8000396:	429a      	cmp	r2, r3
 8000398:	ddda      	ble.n	8000350 <drawLineVfast+0xb0>
 800039a:	e024      	b.n	80003e6 <drawLineVfast+0x146>
		case 2: for(int y=y0; y<=y1; y++) scr[y*scrWd+x/8] ^= mask;   break;
 800039c:	79bb      	ldrb	r3, [r7, #6]
 800039e:	60fb      	str	r3, [r7, #12]
 80003a0:	e01c      	b.n	80003dc <drawLineVfast+0x13c>
 80003a2:	4b13      	ldr	r3, [pc, #76]	; (80003f0 <drawLineVfast+0x150>)
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	461a      	mov	r2, r3
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	fb03 f302 	mul.w	r3, r3, r2
 80003ae:	79fa      	ldrb	r2, [r7, #7]
 80003b0:	08d2      	lsrs	r2, r2, #3
 80003b2:	b2d0      	uxtb	r0, r2
 80003b4:	4602      	mov	r2, r0
 80003b6:	4413      	add	r3, r2
 80003b8:	4a0e      	ldr	r2, [pc, #56]	; (80003f4 <drawLineVfast+0x154>)
 80003ba:	5cd1      	ldrb	r1, [r2, r3]
 80003bc:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <drawLineVfast+0x150>)
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	461a      	mov	r2, r3
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	fb03 f302 	mul.w	r3, r3, r2
 80003c8:	4602      	mov	r2, r0
 80003ca:	4413      	add	r3, r2
 80003cc:	7afa      	ldrb	r2, [r7, #11]
 80003ce:	404a      	eors	r2, r1
 80003d0:	b2d1      	uxtb	r1, r2
 80003d2:	4a08      	ldr	r2, [pc, #32]	; (80003f4 <drawLineVfast+0x154>)
 80003d4:	54d1      	strb	r1, [r2, r3]
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	3301      	adds	r3, #1
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	797b      	ldrb	r3, [r7, #5]
 80003de:	68fa      	ldr	r2, [r7, #12]
 80003e0:	429a      	cmp	r2, r3
 80003e2:	ddde      	ble.n	80003a2 <drawLineVfast+0x102>
 80003e4:	bf00      	nop
	}
}
 80003e6:	bf00      	nop
 80003e8:	3718      	adds	r7, #24
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bc90      	pop	{r4, r7}
 80003ee:	4770      	bx	lr
 80003f0:	20000000 	.word	0x20000000
 80003f4:	20000044 	.word	0x20000044

080003f8 <drawLineHfast>:
	}
}
// ----------------------------------------------------------------
// about 40x faster than regular drawLineH
void drawLineHfast(uint8_t x0, uint8_t x1, uint8_t y, uint8_t col)
{
 80003f8:	b490      	push	{r4, r7}
 80003fa:	b088      	sub	sp, #32
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	4604      	mov	r4, r0
 8000400:	4608      	mov	r0, r1
 8000402:	4611      	mov	r1, r2
 8000404:	461a      	mov	r2, r3
 8000406:	4623      	mov	r3, r4
 8000408:	71fb      	strb	r3, [r7, #7]
 800040a:	4603      	mov	r3, r0
 800040c:	71bb      	strb	r3, [r7, #6]
 800040e:	460b      	mov	r3, r1
 8000410:	717b      	strb	r3, [r7, #5]
 8000412:	4613      	mov	r3, r2
 8000414:	713b      	strb	r3, [r7, #4]
  int yadd=y*scrWd;
 8000416:	797b      	ldrb	r3, [r7, #5]
 8000418:	4a8f      	ldr	r2, [pc, #572]	; (8000658 <drawLineHfast+0x260>)
 800041a:	7812      	ldrb	r2, [r2, #0]
 800041c:	fb02 f303 	mul.w	r3, r2, r3
 8000420:	60bb      	str	r3, [r7, #8]
  int x8s,x8e;
  if(x1>=x0) {
 8000422:	79ba      	ldrb	r2, [r7, #6]
 8000424:	79fb      	ldrb	r3, [r7, #7]
 8000426:	429a      	cmp	r2, r3
 8000428:	d308      	bcc.n	800043c <drawLineHfast+0x44>
    x8s=x0/8;
 800042a:	79fb      	ldrb	r3, [r7, #7]
 800042c:	08db      	lsrs	r3, r3, #3
 800042e:	b2db      	uxtb	r3, r3
 8000430:	61fb      	str	r3, [r7, #28]
    x8e=x1/8;
 8000432:	79bb      	ldrb	r3, [r7, #6]
 8000434:	08db      	lsrs	r3, r3, #3
 8000436:	b2db      	uxtb	r3, r3
 8000438:	61bb      	str	r3, [r7, #24]
 800043a:	e00d      	b.n	8000458 <drawLineHfast+0x60>
  } else {
    x8s=x1; x1=x0; x0=x8s; // swap
 800043c:	79bb      	ldrb	r3, [r7, #6]
 800043e:	61fb      	str	r3, [r7, #28]
 8000440:	79fb      	ldrb	r3, [r7, #7]
 8000442:	71bb      	strb	r3, [r7, #6]
 8000444:	69fb      	ldr	r3, [r7, #28]
 8000446:	71fb      	strb	r3, [r7, #7]
    x8s=x1/8;
 8000448:	79bb      	ldrb	r3, [r7, #6]
 800044a:	08db      	lsrs	r3, r3, #3
 800044c:	b2db      	uxtb	r3, r3
 800044e:	61fb      	str	r3, [r7, #28]
    x8e=x0/8;
 8000450:	79fb      	ldrb	r3, [r7, #7]
 8000452:	08db      	lsrs	r3, r3, #3
 8000454:	b2db      	uxtb	r3, r3
 8000456:	61bb      	str	r3, [r7, #24]
  }
  switch(col) {
 8000458:	793b      	ldrb	r3, [r7, #4]
 800045a:	2b02      	cmp	r3, #2
 800045c:	f000 80b9 	beq.w	80005d2 <drawLineHfast+0x1da>
 8000460:	2b02      	cmp	r3, #2
 8000462:	f300 8115 	bgt.w	8000690 <drawLineHfast+0x298>
 8000466:	2b00      	cmp	r3, #0
 8000468:	d053      	beq.n	8000512 <drawLineHfast+0x11a>
 800046a:	2b01      	cmp	r3, #1
 800046c:	f040 8110 	bne.w	8000690 <drawLineHfast+0x298>
    case 1:
      if(x8s==x8e) scr[yadd+x8s]|=(xstab[x0&7] & xetab[x1&7]);
 8000470:	69fa      	ldr	r2, [r7, #28]
 8000472:	69bb      	ldr	r3, [r7, #24]
 8000474:	429a      	cmp	r2, r3
 8000476:	d118      	bne.n	80004aa <drawLineHfast+0xb2>
 8000478:	68ba      	ldr	r2, [r7, #8]
 800047a:	69fb      	ldr	r3, [r7, #28]
 800047c:	4413      	add	r3, r2
 800047e:	4a77      	ldr	r2, [pc, #476]	; (800065c <drawLineHfast+0x264>)
 8000480:	5cd1      	ldrb	r1, [r2, r3]
 8000482:	79fb      	ldrb	r3, [r7, #7]
 8000484:	f003 0307 	and.w	r3, r3, #7
 8000488:	4a75      	ldr	r2, [pc, #468]	; (8000660 <drawLineHfast+0x268>)
 800048a:	5cd2      	ldrb	r2, [r2, r3]
 800048c:	79bb      	ldrb	r3, [r7, #6]
 800048e:	f003 0307 	and.w	r3, r3, #7
 8000492:	4874      	ldr	r0, [pc, #464]	; (8000664 <drawLineHfast+0x26c>)
 8000494:	5cc3      	ldrb	r3, [r0, r3]
 8000496:	4013      	ands	r3, r2
 8000498:	b2da      	uxtb	r2, r3
 800049a:	68b8      	ldr	r0, [r7, #8]
 800049c:	69fb      	ldr	r3, [r7, #28]
 800049e:	4403      	add	r3, r0
 80004a0:	430a      	orrs	r2, r1
 80004a2:	b2d1      	uxtb	r1, r2
 80004a4:	4a6d      	ldr	r2, [pc, #436]	; (800065c <drawLineHfast+0x264>)
 80004a6:	54d1      	strb	r1, [r2, r3]
 80004a8:	e021      	b.n	80004ee <drawLineHfast+0xf6>
      else { scr[yadd+x8s]|=xstab[x0&7]; scr[yadd+x8e]|=xetab[x1&7]; }
 80004aa:	68ba      	ldr	r2, [r7, #8]
 80004ac:	69fb      	ldr	r3, [r7, #28]
 80004ae:	4413      	add	r3, r2
 80004b0:	4a6a      	ldr	r2, [pc, #424]	; (800065c <drawLineHfast+0x264>)
 80004b2:	5cd1      	ldrb	r1, [r2, r3]
 80004b4:	79fb      	ldrb	r3, [r7, #7]
 80004b6:	f003 0307 	and.w	r3, r3, #7
 80004ba:	4a69      	ldr	r2, [pc, #420]	; (8000660 <drawLineHfast+0x268>)
 80004bc:	5cd2      	ldrb	r2, [r2, r3]
 80004be:	68b8      	ldr	r0, [r7, #8]
 80004c0:	69fb      	ldr	r3, [r7, #28]
 80004c2:	4403      	add	r3, r0
 80004c4:	430a      	orrs	r2, r1
 80004c6:	b2d1      	uxtb	r1, r2
 80004c8:	4a64      	ldr	r2, [pc, #400]	; (800065c <drawLineHfast+0x264>)
 80004ca:	54d1      	strb	r1, [r2, r3]
 80004cc:	68ba      	ldr	r2, [r7, #8]
 80004ce:	69bb      	ldr	r3, [r7, #24]
 80004d0:	4413      	add	r3, r2
 80004d2:	4a62      	ldr	r2, [pc, #392]	; (800065c <drawLineHfast+0x264>)
 80004d4:	5cd1      	ldrb	r1, [r2, r3]
 80004d6:	79bb      	ldrb	r3, [r7, #6]
 80004d8:	f003 0307 	and.w	r3, r3, #7
 80004dc:	4a61      	ldr	r2, [pc, #388]	; (8000664 <drawLineHfast+0x26c>)
 80004de:	5cd2      	ldrb	r2, [r2, r3]
 80004e0:	68b8      	ldr	r0, [r7, #8]
 80004e2:	69bb      	ldr	r3, [r7, #24]
 80004e4:	4403      	add	r3, r0
 80004e6:	430a      	orrs	r2, r1
 80004e8:	b2d1      	uxtb	r1, r2
 80004ea:	4a5c      	ldr	r2, [pc, #368]	; (800065c <drawLineHfast+0x264>)
 80004ec:	54d1      	strb	r1, [r2, r3]
      for(int x=x8s+1; x<x8e; x++) scr[yadd+x]=0xff;
 80004ee:	69fb      	ldr	r3, [r7, #28]
 80004f0:	3301      	adds	r3, #1
 80004f2:	617b      	str	r3, [r7, #20]
 80004f4:	e008      	b.n	8000508 <drawLineHfast+0x110>
 80004f6:	68ba      	ldr	r2, [r7, #8]
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	4413      	add	r3, r2
 80004fc:	4a57      	ldr	r2, [pc, #348]	; (800065c <drawLineHfast+0x264>)
 80004fe:	21ff      	movs	r1, #255	; 0xff
 8000500:	54d1      	strb	r1, [r2, r3]
 8000502:	697b      	ldr	r3, [r7, #20]
 8000504:	3301      	adds	r3, #1
 8000506:	617b      	str	r3, [r7, #20]
 8000508:	697a      	ldr	r2, [r7, #20]
 800050a:	69bb      	ldr	r3, [r7, #24]
 800050c:	429a      	cmp	r2, r3
 800050e:	dbf2      	blt.n	80004f6 <drawLineHfast+0xfe>
      break;
 8000510:	e0be      	b.n	8000690 <drawLineHfast+0x298>
    case 0:
      if(x8s==x8e) scr[yadd+x8s]&=~(xstab[x0&7] & xetab[x1&7]);
 8000512:	69fa      	ldr	r2, [r7, #28]
 8000514:	69bb      	ldr	r3, [r7, #24]
 8000516:	429a      	cmp	r2, r3
 8000518:	d11d      	bne.n	8000556 <drawLineHfast+0x15e>
 800051a:	68ba      	ldr	r2, [r7, #8]
 800051c:	69fb      	ldr	r3, [r7, #28]
 800051e:	4413      	add	r3, r2
 8000520:	4a4e      	ldr	r2, [pc, #312]	; (800065c <drawLineHfast+0x264>)
 8000522:	5cd3      	ldrb	r3, [r2, r3]
 8000524:	b25a      	sxtb	r2, r3
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	f003 0307 	and.w	r3, r3, #7
 800052c:	494c      	ldr	r1, [pc, #304]	; (8000660 <drawLineHfast+0x268>)
 800052e:	5cc9      	ldrb	r1, [r1, r3]
 8000530:	79bb      	ldrb	r3, [r7, #6]
 8000532:	f003 0307 	and.w	r3, r3, #7
 8000536:	484b      	ldr	r0, [pc, #300]	; (8000664 <drawLineHfast+0x26c>)
 8000538:	5cc3      	ldrb	r3, [r0, r3]
 800053a:	400b      	ands	r3, r1
 800053c:	b2db      	uxtb	r3, r3
 800053e:	b25b      	sxtb	r3, r3
 8000540:	43db      	mvns	r3, r3
 8000542:	b25b      	sxtb	r3, r3
 8000544:	4013      	ands	r3, r2
 8000546:	b259      	sxtb	r1, r3
 8000548:	68ba      	ldr	r2, [r7, #8]
 800054a:	69fb      	ldr	r3, [r7, #28]
 800054c:	4413      	add	r3, r2
 800054e:	b2c9      	uxtb	r1, r1
 8000550:	4a42      	ldr	r2, [pc, #264]	; (800065c <drawLineHfast+0x264>)
 8000552:	54d1      	strb	r1, [r2, r3]
 8000554:	e02b      	b.n	80005ae <drawLineHfast+0x1b6>
      else { scr[yadd+x8s]&=~xstab[x0&7]; scr[yadd+x8e]&=~xetab[x1&7]; }
 8000556:	68ba      	ldr	r2, [r7, #8]
 8000558:	69fb      	ldr	r3, [r7, #28]
 800055a:	4413      	add	r3, r2
 800055c:	4a3f      	ldr	r2, [pc, #252]	; (800065c <drawLineHfast+0x264>)
 800055e:	5cd3      	ldrb	r3, [r2, r3]
 8000560:	b25a      	sxtb	r2, r3
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	f003 0307 	and.w	r3, r3, #7
 8000568:	493d      	ldr	r1, [pc, #244]	; (8000660 <drawLineHfast+0x268>)
 800056a:	5ccb      	ldrb	r3, [r1, r3]
 800056c:	b25b      	sxtb	r3, r3
 800056e:	43db      	mvns	r3, r3
 8000570:	b25b      	sxtb	r3, r3
 8000572:	4013      	ands	r3, r2
 8000574:	b259      	sxtb	r1, r3
 8000576:	68ba      	ldr	r2, [r7, #8]
 8000578:	69fb      	ldr	r3, [r7, #28]
 800057a:	4413      	add	r3, r2
 800057c:	b2c9      	uxtb	r1, r1
 800057e:	4a37      	ldr	r2, [pc, #220]	; (800065c <drawLineHfast+0x264>)
 8000580:	54d1      	strb	r1, [r2, r3]
 8000582:	68ba      	ldr	r2, [r7, #8]
 8000584:	69bb      	ldr	r3, [r7, #24]
 8000586:	4413      	add	r3, r2
 8000588:	4a34      	ldr	r2, [pc, #208]	; (800065c <drawLineHfast+0x264>)
 800058a:	5cd3      	ldrb	r3, [r2, r3]
 800058c:	b25a      	sxtb	r2, r3
 800058e:	79bb      	ldrb	r3, [r7, #6]
 8000590:	f003 0307 	and.w	r3, r3, #7
 8000594:	4933      	ldr	r1, [pc, #204]	; (8000664 <drawLineHfast+0x26c>)
 8000596:	5ccb      	ldrb	r3, [r1, r3]
 8000598:	b25b      	sxtb	r3, r3
 800059a:	43db      	mvns	r3, r3
 800059c:	b25b      	sxtb	r3, r3
 800059e:	4013      	ands	r3, r2
 80005a0:	b259      	sxtb	r1, r3
 80005a2:	68ba      	ldr	r2, [r7, #8]
 80005a4:	69bb      	ldr	r3, [r7, #24]
 80005a6:	4413      	add	r3, r2
 80005a8:	b2c9      	uxtb	r1, r1
 80005aa:	4a2c      	ldr	r2, [pc, #176]	; (800065c <drawLineHfast+0x264>)
 80005ac:	54d1      	strb	r1, [r2, r3]
      for(int x=x8s+1; x<x8e; x++) scr[yadd+x]=0x00;
 80005ae:	69fb      	ldr	r3, [r7, #28]
 80005b0:	3301      	adds	r3, #1
 80005b2:	613b      	str	r3, [r7, #16]
 80005b4:	e008      	b.n	80005c8 <drawLineHfast+0x1d0>
 80005b6:	68ba      	ldr	r2, [r7, #8]
 80005b8:	693b      	ldr	r3, [r7, #16]
 80005ba:	4413      	add	r3, r2
 80005bc:	4a27      	ldr	r2, [pc, #156]	; (800065c <drawLineHfast+0x264>)
 80005be:	2100      	movs	r1, #0
 80005c0:	54d1      	strb	r1, [r2, r3]
 80005c2:	693b      	ldr	r3, [r7, #16]
 80005c4:	3301      	adds	r3, #1
 80005c6:	613b      	str	r3, [r7, #16]
 80005c8:	693a      	ldr	r2, [r7, #16]
 80005ca:	69bb      	ldr	r3, [r7, #24]
 80005cc:	429a      	cmp	r2, r3
 80005ce:	dbf2      	blt.n	80005b6 <drawLineHfast+0x1be>
      break;
 80005d0:	e05e      	b.n	8000690 <drawLineHfast+0x298>
    case 2:
      if(x8s==x8e) scr[yadd+x8s]^=(xstab[x0&7] & xetab[x1&7]);
 80005d2:	69fa      	ldr	r2, [r7, #28]
 80005d4:	69bb      	ldr	r3, [r7, #24]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d118      	bne.n	800060c <drawLineHfast+0x214>
 80005da:	68ba      	ldr	r2, [r7, #8]
 80005dc:	69fb      	ldr	r3, [r7, #28]
 80005de:	4413      	add	r3, r2
 80005e0:	4a1e      	ldr	r2, [pc, #120]	; (800065c <drawLineHfast+0x264>)
 80005e2:	5cd1      	ldrb	r1, [r2, r3]
 80005e4:	79fb      	ldrb	r3, [r7, #7]
 80005e6:	f003 0307 	and.w	r3, r3, #7
 80005ea:	4a1d      	ldr	r2, [pc, #116]	; (8000660 <drawLineHfast+0x268>)
 80005ec:	5cd2      	ldrb	r2, [r2, r3]
 80005ee:	79bb      	ldrb	r3, [r7, #6]
 80005f0:	f003 0307 	and.w	r3, r3, #7
 80005f4:	481b      	ldr	r0, [pc, #108]	; (8000664 <drawLineHfast+0x26c>)
 80005f6:	5cc3      	ldrb	r3, [r0, r3]
 80005f8:	4013      	ands	r3, r2
 80005fa:	b2da      	uxtb	r2, r3
 80005fc:	68b8      	ldr	r0, [r7, #8]
 80005fe:	69fb      	ldr	r3, [r7, #28]
 8000600:	4403      	add	r3, r0
 8000602:	404a      	eors	r2, r1
 8000604:	b2d1      	uxtb	r1, r2
 8000606:	4a15      	ldr	r2, [pc, #84]	; (800065c <drawLineHfast+0x264>)
 8000608:	54d1      	strb	r1, [r2, r3]
 800060a:	e021      	b.n	8000650 <drawLineHfast+0x258>
      else { scr[yadd+x8s]^=xstab[x0&7]; scr[yadd+x8e]^=xetab[x1&7]; }
 800060c:	68ba      	ldr	r2, [r7, #8]
 800060e:	69fb      	ldr	r3, [r7, #28]
 8000610:	4413      	add	r3, r2
 8000612:	4a12      	ldr	r2, [pc, #72]	; (800065c <drawLineHfast+0x264>)
 8000614:	5cd1      	ldrb	r1, [r2, r3]
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	f003 0307 	and.w	r3, r3, #7
 800061c:	4a10      	ldr	r2, [pc, #64]	; (8000660 <drawLineHfast+0x268>)
 800061e:	5cd2      	ldrb	r2, [r2, r3]
 8000620:	68b8      	ldr	r0, [r7, #8]
 8000622:	69fb      	ldr	r3, [r7, #28]
 8000624:	4403      	add	r3, r0
 8000626:	404a      	eors	r2, r1
 8000628:	b2d1      	uxtb	r1, r2
 800062a:	4a0c      	ldr	r2, [pc, #48]	; (800065c <drawLineHfast+0x264>)
 800062c:	54d1      	strb	r1, [r2, r3]
 800062e:	68ba      	ldr	r2, [r7, #8]
 8000630:	69bb      	ldr	r3, [r7, #24]
 8000632:	4413      	add	r3, r2
 8000634:	4a09      	ldr	r2, [pc, #36]	; (800065c <drawLineHfast+0x264>)
 8000636:	5cd1      	ldrb	r1, [r2, r3]
 8000638:	79bb      	ldrb	r3, [r7, #6]
 800063a:	f003 0307 	and.w	r3, r3, #7
 800063e:	4a09      	ldr	r2, [pc, #36]	; (8000664 <drawLineHfast+0x26c>)
 8000640:	5cd2      	ldrb	r2, [r2, r3]
 8000642:	68b8      	ldr	r0, [r7, #8]
 8000644:	69bb      	ldr	r3, [r7, #24]
 8000646:	4403      	add	r3, r0
 8000648:	404a      	eors	r2, r1
 800064a:	b2d1      	uxtb	r1, r2
 800064c:	4a03      	ldr	r2, [pc, #12]	; (800065c <drawLineHfast+0x264>)
 800064e:	54d1      	strb	r1, [r2, r3]
      for(int x=x8s+1; x<x8e; x++) scr[yadd+x]^=0xff;
 8000650:	69fb      	ldr	r3, [r7, #28]
 8000652:	3301      	adds	r3, #1
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	e016      	b.n	8000686 <drawLineHfast+0x28e>
 8000658:	20000000 	.word	0x20000000
 800065c:	20000044 	.word	0x20000044
 8000660:	20000004 	.word	0x20000004
 8000664:	2000000c 	.word	0x2000000c
 8000668:	68ba      	ldr	r2, [r7, #8]
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	4413      	add	r3, r2
 800066e:	4a0b      	ldr	r2, [pc, #44]	; (800069c <drawLineHfast+0x2a4>)
 8000670:	5cd2      	ldrb	r2, [r2, r3]
 8000672:	68b9      	ldr	r1, [r7, #8]
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	440b      	add	r3, r1
 8000678:	43d2      	mvns	r2, r2
 800067a:	b2d1      	uxtb	r1, r2
 800067c:	4a07      	ldr	r2, [pc, #28]	; (800069c <drawLineHfast+0x2a4>)
 800067e:	54d1      	strb	r1, [r2, r3]
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	3301      	adds	r3, #1
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	68fa      	ldr	r2, [r7, #12]
 8000688:	69bb      	ldr	r3, [r7, #24]
 800068a:	429a      	cmp	r2, r3
 800068c:	dbec      	blt.n	8000668 <drawLineHfast+0x270>
      break;
 800068e:	bf00      	nop
  }
}
 8000690:	bf00      	nop
 8000692:	3720      	adds	r7, #32
 8000694:	46bd      	mov	sp, r7
 8000696:	bc90      	pop	{r4, r7}
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	20000044 	.word	0x20000044

080006a0 <drawRect>:
      break;
  }
}
// ----------------------------------------------------------------
void drawRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t col)
{
 80006a0:	b590      	push	{r4, r7, lr}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4604      	mov	r4, r0
 80006a8:	4608      	mov	r0, r1
 80006aa:	4611      	mov	r1, r2
 80006ac:	461a      	mov	r2, r3
 80006ae:	4623      	mov	r3, r4
 80006b0:	71fb      	strb	r3, [r7, #7]
 80006b2:	4603      	mov	r3, r0
 80006b4:	71bb      	strb	r3, [r7, #6]
 80006b6:	460b      	mov	r3, r1
 80006b8:	717b      	strb	r3, [r7, #5]
 80006ba:	4613      	mov	r3, r2
 80006bc:	713b      	strb	r3, [r7, #4]
  if(x>=SCR_WD || y>=SCR_HT) return;
 80006be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	db5e      	blt.n	8000784 <drawRect+0xe4>
 80006c6:	79bb      	ldrb	r3, [r7, #6]
 80006c8:	2b3f      	cmp	r3, #63	; 0x3f
 80006ca:	d85b      	bhi.n	8000784 <drawRect+0xe4>
  uint8_t drawVright=1;
 80006cc:	2301      	movs	r3, #1
 80006ce:	73fb      	strb	r3, [r7, #15]
  if(x+w>SCR_WD) { w=SCR_WD-x; drawVright=0; }
 80006d0:	79fa      	ldrb	r2, [r7, #7]
 80006d2:	797b      	ldrb	r3, [r7, #5]
 80006d4:	4413      	add	r3, r2
 80006d6:	2b80      	cmp	r3, #128	; 0x80
 80006d8:	dd08      	ble.n	80006ec <drawRect+0x4c>
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 80006e0:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80006e4:	3380      	adds	r3, #128	; 0x80
 80006e6:	717b      	strb	r3, [r7, #5]
 80006e8:	2300      	movs	r3, #0
 80006ea:	73fb      	strb	r3, [r7, #15]
  if(y+h>SCR_HT) h=SCR_HT-y; else drawLineHfast(x, x+w-1, y+h-1,col);
 80006ec:	79ba      	ldrb	r2, [r7, #6]
 80006ee:	793b      	ldrb	r3, [r7, #4]
 80006f0:	4413      	add	r3, r2
 80006f2:	2b40      	cmp	r3, #64	; 0x40
 80006f4:	dd04      	ble.n	8000700 <drawRect+0x60>
 80006f6:	79bb      	ldrb	r3, [r7, #6]
 80006f8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80006fc:	713b      	strb	r3, [r7, #4]
 80006fe:	e010      	b.n	8000722 <drawRect+0x82>
 8000700:	79fa      	ldrb	r2, [r7, #7]
 8000702:	797b      	ldrb	r3, [r7, #5]
 8000704:	4413      	add	r3, r2
 8000706:	b2db      	uxtb	r3, r3
 8000708:	3b01      	subs	r3, #1
 800070a:	b2d9      	uxtb	r1, r3
 800070c:	79ba      	ldrb	r2, [r7, #6]
 800070e:	793b      	ldrb	r3, [r7, #4]
 8000710:	4413      	add	r3, r2
 8000712:	b2db      	uxtb	r3, r3
 8000714:	3b01      	subs	r3, #1
 8000716:	b2da      	uxtb	r2, r3
 8000718:	f897 3020 	ldrb.w	r3, [r7, #32]
 800071c:	79f8      	ldrb	r0, [r7, #7]
 800071e:	f7ff fe6b 	bl	80003f8 <drawLineHfast>
  drawLineHfast(x, x+w-1, y,col);
 8000722:	79fa      	ldrb	r2, [r7, #7]
 8000724:	797b      	ldrb	r3, [r7, #5]
 8000726:	4413      	add	r3, r2
 8000728:	b2db      	uxtb	r3, r3
 800072a:	3b01      	subs	r3, #1
 800072c:	b2d9      	uxtb	r1, r3
 800072e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000732:	79ba      	ldrb	r2, [r7, #6]
 8000734:	79f8      	ldrb	r0, [r7, #7]
 8000736:	f7ff fe5f 	bl	80003f8 <drawLineHfast>
  drawLineVfast(x,    y+1, y+h-2,col);
 800073a:	79bb      	ldrb	r3, [r7, #6]
 800073c:	3301      	adds	r3, #1
 800073e:	b2d9      	uxtb	r1, r3
 8000740:	79ba      	ldrb	r2, [r7, #6]
 8000742:	793b      	ldrb	r3, [r7, #4]
 8000744:	4413      	add	r3, r2
 8000746:	b2db      	uxtb	r3, r3
 8000748:	3b02      	subs	r3, #2
 800074a:	b2da      	uxtb	r2, r3
 800074c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000750:	79f8      	ldrb	r0, [r7, #7]
 8000752:	f7ff fda5 	bl	80002a0 <drawLineVfast>
  if(drawVright) drawLineVfast(x+w-1,y+1, y+h-2,col);
 8000756:	7bfb      	ldrb	r3, [r7, #15]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d014      	beq.n	8000786 <drawRect+0xe6>
 800075c:	79fa      	ldrb	r2, [r7, #7]
 800075e:	797b      	ldrb	r3, [r7, #5]
 8000760:	4413      	add	r3, r2
 8000762:	b2db      	uxtb	r3, r3
 8000764:	3b01      	subs	r3, #1
 8000766:	b2d8      	uxtb	r0, r3
 8000768:	79bb      	ldrb	r3, [r7, #6]
 800076a:	3301      	adds	r3, #1
 800076c:	b2d9      	uxtb	r1, r3
 800076e:	79ba      	ldrb	r2, [r7, #6]
 8000770:	793b      	ldrb	r3, [r7, #4]
 8000772:	4413      	add	r3, r2
 8000774:	b2db      	uxtb	r3, r3
 8000776:	3b02      	subs	r3, #2
 8000778:	b2da      	uxtb	r2, r3
 800077a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800077e:	f7ff fd8f 	bl	80002a0 <drawLineVfast>
 8000782:	e000      	b.n	8000786 <drawRect+0xe6>
  if(x>=SCR_WD || y>=SCR_HT) return;
 8000784:	bf00      	nop
}
 8000786:	3714      	adds	r7, #20
 8000788:	46bd      	mov	sp, r7
 800078a:	bd90      	pop	{r4, r7, pc}

0800078c <fillRect>:
  drawLineVfastD(x,    y+1, y+h-2,col);
  if(drawVright) drawLineVfastD(x+w-1,y+1, y+h-2,col);
}
// ----------------------------------------------------------------
void fillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t col)
{
 800078c:	b590      	push	{r4, r7, lr}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
 8000792:	4604      	mov	r4, r0
 8000794:	4608      	mov	r0, r1
 8000796:	4611      	mov	r1, r2
 8000798:	461a      	mov	r2, r3
 800079a:	4623      	mov	r3, r4
 800079c:	71fb      	strb	r3, [r7, #7]
 800079e:	4603      	mov	r3, r0
 80007a0:	71bb      	strb	r3, [r7, #6]
 80007a2:	460b      	mov	r3, r1
 80007a4:	717b      	strb	r3, [r7, #5]
 80007a6:	4613      	mov	r3, r2
 80007a8:	713b      	strb	r3, [r7, #4]
  if(x>=SCR_WD || y>=SCR_HT) return;
 80007aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	db31      	blt.n	8000816 <fillRect+0x8a>
 80007b2:	79bb      	ldrb	r3, [r7, #6]
 80007b4:	2b3f      	cmp	r3, #63	; 0x3f
 80007b6:	d82e      	bhi.n	8000816 <fillRect+0x8a>
  if(x+w>SCR_WD) w=SCR_WD-x;
 80007b8:	79fa      	ldrb	r2, [r7, #7]
 80007ba:	797b      	ldrb	r3, [r7, #5]
 80007bc:	4413      	add	r3, r2
 80007be:	2b80      	cmp	r3, #128	; 0x80
 80007c0:	dd06      	ble.n	80007d0 <fillRect+0x44>
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 80007c8:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80007cc:	3380      	adds	r3, #128	; 0x80
 80007ce:	717b      	strb	r3, [r7, #5]
  if(y+h>SCR_HT) h=SCR_HT-y;
 80007d0:	79ba      	ldrb	r2, [r7, #6]
 80007d2:	793b      	ldrb	r3, [r7, #4]
 80007d4:	4413      	add	r3, r2
 80007d6:	2b40      	cmp	r3, #64	; 0x40
 80007d8:	dd03      	ble.n	80007e2 <fillRect+0x56>
 80007da:	79bb      	ldrb	r3, [r7, #6]
 80007dc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80007e0:	713b      	strb	r3, [r7, #4]
  for(int i=y;i<y+h;i++) drawLineHfast(x,x+w-1,i,col);
 80007e2:	79bb      	ldrb	r3, [r7, #6]
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	e00f      	b.n	8000808 <fillRect+0x7c>
 80007e8:	79fa      	ldrb	r2, [r7, #7]
 80007ea:	797b      	ldrb	r3, [r7, #5]
 80007ec:	4413      	add	r3, r2
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	3b01      	subs	r3, #1
 80007f2:	b2d9      	uxtb	r1, r3
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	b2da      	uxtb	r2, r3
 80007f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80007fc:	79f8      	ldrb	r0, [r7, #7]
 80007fe:	f7ff fdfb 	bl	80003f8 <drawLineHfast>
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	3301      	adds	r3, #1
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	79ba      	ldrb	r2, [r7, #6]
 800080a:	793b      	ldrb	r3, [r7, #4]
 800080c:	4413      	add	r3, r2
 800080e:	68fa      	ldr	r2, [r7, #12]
 8000810:	429a      	cmp	r2, r3
 8000812:	dbe9      	blt.n	80007e8 <fillRect+0x5c>
 8000814:	e000      	b.n	8000818 <fillRect+0x8c>
  if(x>=SCR_WD || y>=SCR_HT) return;
 8000816:	bf00      	nop
}
 8000818:	3714      	adds	r7, #20
 800081a:	46bd      	mov	sp, r7
 800081c:	bd90      	pop	{r4, r7, pc}
	...

08000820 <setFont>:
}
// ----------------------------------------------------------------
// text rendering
// ----------------------------------------------------------------
void setFont(const uint8_t* font)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  cfont.font = font;
 8000828:	4a17      	ldr	r2, [pc, #92]	; (8000888 <setFont+0x68>)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	6013      	str	r3, [r2, #0]
  cfont.xSize = fontbyte(0);
 800082e:	4b16      	ldr	r3, [pc, #88]	; (8000888 <setFont+0x68>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	b25a      	sxtb	r2, r3
 8000836:	4b14      	ldr	r3, [pc, #80]	; (8000888 <setFont+0x68>)
 8000838:	711a      	strb	r2, [r3, #4]
  cfont.ySize = fontbyte(1);
 800083a:	4b13      	ldr	r3, [pc, #76]	; (8000888 <setFont+0x68>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	785a      	ldrb	r2, [r3, #1]
 8000840:	4b11      	ldr	r3, [pc, #68]	; (8000888 <setFont+0x68>)
 8000842:	715a      	strb	r2, [r3, #5]
  cfont.firstCh = fontbyte(2);
 8000844:	4b10      	ldr	r3, [pc, #64]	; (8000888 <setFont+0x68>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	789a      	ldrb	r2, [r3, #2]
 800084a:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <setFont+0x68>)
 800084c:	719a      	strb	r2, [r3, #6]
  cfont.lastCh  = fontbyte(3);
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <setFont+0x68>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	78da      	ldrb	r2, [r3, #3]
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <setFont+0x68>)
 8000856:	71da      	strb	r2, [r3, #7]
  cfont.minDigitWd = 0;
 8000858:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <setFont+0x68>)
 800085a:	2200      	movs	r2, #0
 800085c:	725a      	strb	r2, [r3, #9]
  cfont.minCharWd = 0;
 800085e:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <setFont+0x68>)
 8000860:	2200      	movs	r2, #0
 8000862:	721a      	strb	r2, [r3, #8]
  isNumberFun = &isNumber;
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <setFont+0x6c>)
 8000866:	4a0a      	ldr	r2, [pc, #40]	; (8000890 <setFont+0x70>)
 8000868:	601a      	str	r2, [r3, #0]
  spacing = 1;
 800086a:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <setFont+0x74>)
 800086c:	2201      	movs	r2, #1
 800086e:	701a      	strb	r2, [r3, #0]
  cr = 0;
 8000870:	4b09      	ldr	r3, [pc, #36]	; (8000898 <setFont+0x78>)
 8000872:	2200      	movs	r2, #0
 8000874:	701a      	strb	r2, [r3, #0]
  invertCh = 0;
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <setFont+0x7c>)
 8000878:	2200      	movs	r2, #0
 800087a:	701a      	strb	r2, [r3, #0]
}
 800087c:	bf00      	nop
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	2000044c 	.word	0x2000044c
 800088c:	20000448 	.word	0x20000448
 8000890:	08000da5 	.word	0x08000da5
 8000894:	20000014 	.word	0x20000014
 8000898:	20000444 	.word	0x20000444
 800089c:	20000458 	.word	0x20000458

080008a0 <charWidth>:
// ----------------------------------------------------------------
int charWidth(uint8_t c, bool last)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	460a      	mov	r2, r1
 80008aa:	71fb      	strb	r3, [r7, #7]
 80008ac:	4613      	mov	r3, r2
 80008ae:	71bb      	strb	r3, [r7, #6]
  c = convertPolish(c);
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 fa94 	bl	8000de0 <convertPolish>
 80008b8:	4603      	mov	r3, r0
 80008ba:	71fb      	strb	r3, [r7, #7]
  if (c < cfont.firstCh || c > cfont.lastCh)
 80008bc:	4b49      	ldr	r3, [pc, #292]	; (80009e4 <charWidth+0x144>)
 80008be:	799b      	ldrb	r3, [r3, #6]
 80008c0:	79fa      	ldrb	r2, [r7, #7]
 80008c2:	429a      	cmp	r2, r3
 80008c4:	d304      	bcc.n	80008d0 <charWidth+0x30>
 80008c6:	4b47      	ldr	r3, [pc, #284]	; (80009e4 <charWidth+0x144>)
 80008c8:	79db      	ldrb	r3, [r3, #7]
 80008ca:	79fa      	ldrb	r2, [r7, #7]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d90d      	bls.n	80008ec <charWidth+0x4c>
      return c==' ' ?  1 + cfont.xSize/2 : 0;
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	2b20      	cmp	r3, #32
 80008d4:	d108      	bne.n	80008e8 <charWidth+0x48>
 80008d6:	4b43      	ldr	r3, [pc, #268]	; (80009e4 <charWidth+0x144>)
 80008d8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80008dc:	0fda      	lsrs	r2, r3, #31
 80008de:	4413      	add	r3, r2
 80008e0:	105b      	asrs	r3, r3, #1
 80008e2:	b25b      	sxtb	r3, r3
 80008e4:	3301      	adds	r3, #1
 80008e6:	e079      	b.n	80009dc <charWidth+0x13c>
 80008e8:	2300      	movs	r3, #0
 80008ea:	e077      	b.n	80009dc <charWidth+0x13c>
  if (cfont.xSize > 0) return cfont.xSize;
 80008ec:	4b3d      	ldr	r3, [pc, #244]	; (80009e4 <charWidth+0x144>)
 80008ee:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	dd03      	ble.n	80008fe <charWidth+0x5e>
 80008f6:	4b3b      	ldr	r3, [pc, #236]	; (80009e4 <charWidth+0x144>)
 80008f8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80008fc:	e06e      	b.n	80009dc <charWidth+0x13c>
  int ys8=(cfont.ySize+7)/8;
 80008fe:	4b39      	ldr	r3, [pc, #228]	; (80009e4 <charWidth+0x144>)
 8000900:	795b      	ldrb	r3, [r3, #5]
 8000902:	3307      	adds	r3, #7
 8000904:	2b00      	cmp	r3, #0
 8000906:	da00      	bge.n	800090a <charWidth+0x6a>
 8000908:	3307      	adds	r3, #7
 800090a:	10db      	asrs	r3, r3, #3
 800090c:	617b      	str	r3, [r7, #20]
  int idx = 4 + (c-cfont.firstCh)*(-cfont.xSize*ys8+1);
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	4a34      	ldr	r2, [pc, #208]	; (80009e4 <charWidth+0x144>)
 8000912:	7992      	ldrb	r2, [r2, #6]
 8000914:	1a9b      	subs	r3, r3, r2
 8000916:	4a33      	ldr	r2, [pc, #204]	; (80009e4 <charWidth+0x144>)
 8000918:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800091c:	4252      	negs	r2, r2
 800091e:	6979      	ldr	r1, [r7, #20]
 8000920:	fb01 f202 	mul.w	r2, r1, r2
 8000924:	3201      	adds	r2, #1
 8000926:	fb02 f303 	mul.w	r3, r2, r3
 800092a:	3304      	adds	r3, #4
 800092c:	613b      	str	r3, [r7, #16]
  int wd = pgm_read_byte(cfont.font + idx);
 800092e:	4b2d      	ldr	r3, [pc, #180]	; (80009e4 <charWidth+0x144>)
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	693b      	ldr	r3, [r7, #16]
 8000934:	4413      	add	r3, r2
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	60fb      	str	r3, [r7, #12]
  int wdL = 0, wdR = spacing; // default spacing before and behind char
 800093a:	2300      	movs	r3, #0
 800093c:	61fb      	str	r3, [r7, #28]
 800093e:	4b2a      	ldr	r3, [pc, #168]	; (80009e8 <charWidth+0x148>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	61bb      	str	r3, [r7, #24]
  if((*isNumberFun)(c)) {
 8000944:	4b29      	ldr	r3, [pc, #164]	; (80009ec <charWidth+0x14c>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	79fa      	ldrb	r2, [r7, #7]
 800094a:	4610      	mov	r0, r2
 800094c:	4798      	blx	r3
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d019      	beq.n	8000988 <charWidth+0xe8>
    if(cfont.minDigitWd>wd) {
 8000954:	4b23      	ldr	r3, [pc, #140]	; (80009e4 <charWidth+0x144>)
 8000956:	7a5b      	ldrb	r3, [r3, #9]
 8000958:	461a      	mov	r2, r3
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	4293      	cmp	r3, r2
 800095e:	da2c      	bge.n	80009ba <charWidth+0x11a>
      wdL = (cfont.minDigitWd-wd)/2;
 8000960:	4b20      	ldr	r3, [pc, #128]	; (80009e4 <charWidth+0x144>)
 8000962:	7a5b      	ldrb	r3, [r3, #9]
 8000964:	461a      	mov	r2, r3
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	1ad3      	subs	r3, r2, r3
 800096a:	0fda      	lsrs	r2, r3, #31
 800096c:	4413      	add	r3, r2
 800096e:	105b      	asrs	r3, r3, #1
 8000970:	61fb      	str	r3, [r7, #28]
      wdR += (cfont.minDigitWd-wd-wdL);
 8000972:	4b1c      	ldr	r3, [pc, #112]	; (80009e4 <charWidth+0x144>)
 8000974:	7a5b      	ldrb	r3, [r3, #9]
 8000976:	461a      	mov	r2, r3
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	1ad2      	subs	r2, r2, r3
 800097c:	69fb      	ldr	r3, [r7, #28]
 800097e:	1ad3      	subs	r3, r2, r3
 8000980:	69ba      	ldr	r2, [r7, #24]
 8000982:	4413      	add	r3, r2
 8000984:	61bb      	str	r3, [r7, #24]
 8000986:	e018      	b.n	80009ba <charWidth+0x11a>
    }
  } else
  if(cfont.minCharWd>wd) {
 8000988:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <charWidth+0x144>)
 800098a:	7a1b      	ldrb	r3, [r3, #8]
 800098c:	461a      	mov	r2, r3
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	4293      	cmp	r3, r2
 8000992:	da12      	bge.n	80009ba <charWidth+0x11a>
    wdL = (cfont.minCharWd-wd)/2;
 8000994:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <charWidth+0x144>)
 8000996:	7a1b      	ldrb	r3, [r3, #8]
 8000998:	461a      	mov	r2, r3
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	1ad3      	subs	r3, r2, r3
 800099e:	0fda      	lsrs	r2, r3, #31
 80009a0:	4413      	add	r3, r2
 80009a2:	105b      	asrs	r3, r3, #1
 80009a4:	61fb      	str	r3, [r7, #28]
    wdR += (cfont.minCharWd-wd-wdL);
 80009a6:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <charWidth+0x144>)
 80009a8:	7a1b      	ldrb	r3, [r3, #8]
 80009aa:	461a      	mov	r2, r3
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	1ad2      	subs	r2, r2, r3
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	1ad3      	subs	r3, r2, r3
 80009b4:	69ba      	ldr	r2, [r7, #24]
 80009b6:	4413      	add	r3, r2
 80009b8:	61bb      	str	r3, [r7, #24]
  }
  return last ? wd+wdL+wdR : wd+wdL+wdR-spacing;  // last!=0 -> get rid of last empty columns
 80009ba:	79bb      	ldrb	r3, [r7, #6]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d005      	beq.n	80009cc <charWidth+0x12c>
 80009c0:	68fa      	ldr	r2, [r7, #12]
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	441a      	add	r2, r3
 80009c6:	69bb      	ldr	r3, [r7, #24]
 80009c8:	4413      	add	r3, r2
 80009ca:	e007      	b.n	80009dc <charWidth+0x13c>
 80009cc:	68fa      	ldr	r2, [r7, #12]
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	441a      	add	r2, r3
 80009d2:	69bb      	ldr	r3, [r7, #24]
 80009d4:	4413      	add	r3, r2
 80009d6:	4a04      	ldr	r2, [pc, #16]	; (80009e8 <charWidth+0x148>)
 80009d8:	7812      	ldrb	r2, [r2, #0]
 80009da:	1a9b      	subs	r3, r3, r2
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3720      	adds	r7, #32
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	2000044c 	.word	0x2000044c
 80009e8:	20000014 	.word	0x20000014
 80009ec:	20000448 	.word	0x20000448

080009f0 <strWidth>:
// ----------------------------------------------------------------
int strWidth(char *str)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  int wd = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	60fb      	str	r3, [r7, #12]
  while (*str) wd += charWidth(*str++,true);
 80009fc:	e00b      	b.n	8000a16 <strWidth+0x26>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	1c5a      	adds	r2, r3, #1
 8000a02:	607a      	str	r2, [r7, #4]
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	2101      	movs	r1, #1
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff ff49 	bl	80008a0 <charWidth>
 8000a0e:	4602      	mov	r2, r0
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	4413      	add	r3, r2
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d1ef      	bne.n	80009fe <strWidth+0xe>
  return wd;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3710      	adds	r7, #16
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <printChar>:
// ----------------------------------------------------------------
int printChar(int xpos, int ypos, unsigned char c)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b090      	sub	sp, #64	; 0x40
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	4613      	mov	r3, r2
 8000a34:	71fb      	strb	r3, [r7, #7]
  if(xpos >= SCR_WD || ypos >= SCR_HT)  return 0;
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	2b7f      	cmp	r3, #127	; 0x7f
 8000a3a:	dc02      	bgt.n	8000a42 <printChar+0x1a>
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	2b3f      	cmp	r3, #63	; 0x3f
 8000a40:	dd01      	ble.n	8000a46 <printChar+0x1e>
 8000a42:	2300      	movs	r3, #0
 8000a44:	e12d      	b.n	8000ca2 <printChar+0x27a>
  int fht8 = (cfont.ySize + 7) / 8, wd, fwd = cfont.xSize;
 8000a46:	4b99      	ldr	r3, [pc, #612]	; (8000cac <printChar+0x284>)
 8000a48:	795b      	ldrb	r3, [r3, #5]
 8000a4a:	3307      	adds	r3, #7
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	da00      	bge.n	8000a52 <printChar+0x2a>
 8000a50:	3307      	adds	r3, #7
 8000a52:	10db      	asrs	r3, r3, #3
 8000a54:	61bb      	str	r3, [r7, #24]
 8000a56:	4b95      	ldr	r3, [pc, #596]	; (8000cac <printChar+0x284>)
 8000a58:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8000a5c:	63bb      	str	r3, [r7, #56]	; 0x38
  if(fwd < 0)  fwd = -fwd;
 8000a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	da02      	bge.n	8000a6a <printChar+0x42>
 8000a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a66:	425b      	negs	r3, r3
 8000a68:	63bb      	str	r3, [r7, #56]	; 0x38

  c = convertPolish(c);
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f000 f9b7 	bl	8000de0 <convertPolish>
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
  if(c < cfont.firstCh || c > cfont.lastCh)  return c==' ' ?  1 + fwd/2 : 0;
 8000a76:	4b8d      	ldr	r3, [pc, #564]	; (8000cac <printChar+0x284>)
 8000a78:	799b      	ldrb	r3, [r3, #6]
 8000a7a:	79fa      	ldrb	r2, [r7, #7]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d304      	bcc.n	8000a8a <printChar+0x62>
 8000a80:	4b8a      	ldr	r3, [pc, #552]	; (8000cac <printChar+0x284>)
 8000a82:	79db      	ldrb	r3, [r3, #7]
 8000a84:	79fa      	ldrb	r2, [r7, #7]
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d90a      	bls.n	8000aa0 <printChar+0x78>
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	2b20      	cmp	r3, #32
 8000a8e:	d105      	bne.n	8000a9c <printChar+0x74>
 8000a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a92:	0fda      	lsrs	r2, r3, #31
 8000a94:	4413      	add	r3, r2
 8000a96:	105b      	asrs	r3, r3, #1
 8000a98:	3301      	adds	r3, #1
 8000a9a:	e102      	b.n	8000ca2 <printChar+0x27a>
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	e100      	b.n	8000ca2 <printChar+0x27a>

  int x,y8,b,cdata = (c - cfont.firstCh) * (fwd*fht8+1) + 4;
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	4a82      	ldr	r2, [pc, #520]	; (8000cac <printChar+0x284>)
 8000aa4:	7992      	ldrb	r2, [r2, #6]
 8000aa6:	1a9b      	subs	r3, r3, r2
 8000aa8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000aaa:	69b9      	ldr	r1, [r7, #24]
 8000aac:	fb01 f202 	mul.w	r2, r1, r2
 8000ab0:	3201      	adds	r2, #1
 8000ab2:	fb02 f303 	mul.w	r3, r2, r3
 8000ab6:	3304      	adds	r3, #4
 8000ab8:	617b      	str	r3, [r7, #20]
  uint8_t d;
  wd = fontbyte(cdata++);
 8000aba:	4b7c      	ldr	r3, [pc, #496]	; (8000cac <printChar+0x284>)
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	1c59      	adds	r1, r3, #1
 8000ac2:	6179      	str	r1, [r7, #20]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
  int wdL = 0, wdR = spacing;
 8000aca:	2300      	movs	r3, #0
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
 8000ace:	4b78      	ldr	r3, [pc, #480]	; (8000cb0 <printChar+0x288>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	623b      	str	r3, [r7, #32]
  if((*isNumberFun)(c)) {
 8000ad4:	4b77      	ldr	r3, [pc, #476]	; (8000cb4 <printChar+0x28c>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	79fa      	ldrb	r2, [r7, #7]
 8000ada:	4610      	mov	r0, r2
 8000adc:	4798      	blx	r3
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d019      	beq.n	8000b18 <printChar+0xf0>
    if(cfont.minDigitWd>wd) {
 8000ae4:	4b71      	ldr	r3, [pc, #452]	; (8000cac <printChar+0x284>)
 8000ae6:	7a5b      	ldrb	r3, [r3, #9]
 8000ae8:	461a      	mov	r2, r3
 8000aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000aec:	4293      	cmp	r3, r2
 8000aee:	da2c      	bge.n	8000b4a <printChar+0x122>
      wdL = (cfont.minDigitWd-wd)/2;
 8000af0:	4b6e      	ldr	r3, [pc, #440]	; (8000cac <printChar+0x284>)
 8000af2:	7a5b      	ldrb	r3, [r3, #9]
 8000af4:	461a      	mov	r2, r3
 8000af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	0fda      	lsrs	r2, r3, #31
 8000afc:	4413      	add	r3, r2
 8000afe:	105b      	asrs	r3, r3, #1
 8000b00:	627b      	str	r3, [r7, #36]	; 0x24
      wdR += (cfont.minDigitWd-wd-wdL);
 8000b02:	4b6a      	ldr	r3, [pc, #424]	; (8000cac <printChar+0x284>)
 8000b04:	7a5b      	ldrb	r3, [r3, #9]
 8000b06:	461a      	mov	r2, r3
 8000b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b0a:	1ad2      	subs	r2, r2, r3
 8000b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0e:	1ad3      	subs	r3, r2, r3
 8000b10:	6a3a      	ldr	r2, [r7, #32]
 8000b12:	4413      	add	r3, r2
 8000b14:	623b      	str	r3, [r7, #32]
 8000b16:	e018      	b.n	8000b4a <printChar+0x122>
    }
  } else
  if(cfont.minCharWd>wd) {
 8000b18:	4b64      	ldr	r3, [pc, #400]	; (8000cac <printChar+0x284>)
 8000b1a:	7a1b      	ldrb	r3, [r3, #8]
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b20:	4293      	cmp	r3, r2
 8000b22:	da12      	bge.n	8000b4a <printChar+0x122>
    wdL = (cfont.minCharWd-wd)/2;
 8000b24:	4b61      	ldr	r3, [pc, #388]	; (8000cac <printChar+0x284>)
 8000b26:	7a1b      	ldrb	r3, [r3, #8]
 8000b28:	461a      	mov	r2, r3
 8000b2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	0fda      	lsrs	r2, r3, #31
 8000b30:	4413      	add	r3, r2
 8000b32:	105b      	asrs	r3, r3, #1
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
    wdR += (cfont.minCharWd-wd-wdL);
 8000b36:	4b5d      	ldr	r3, [pc, #372]	; (8000cac <printChar+0x284>)
 8000b38:	7a1b      	ldrb	r3, [r3, #8]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b3e:	1ad2      	subs	r2, r2, r3
 8000b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b42:	1ad3      	subs	r3, r2, r3
 8000b44:	6a3a      	ldr	r2, [r7, #32]
 8000b46:	4413      	add	r3, r2
 8000b48:	623b      	str	r3, [r7, #32]
  }
  if(xpos+wd+wdL+wdR>SCR_WD) wdR = MAX(SCR_WD-xpos-wdL-wd, 0);
 8000b4a:	68fa      	ldr	r2, [r7, #12]
 8000b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b4e:	441a      	add	r2, r3
 8000b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b52:	441a      	add	r2, r3
 8000b54:	6a3b      	ldr	r3, [r7, #32]
 8000b56:	4413      	add	r3, r2
 8000b58:	2b80      	cmp	r3, #128	; 0x80
 8000b5a:	dd09      	ble.n	8000b70 <printChar+0x148>
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	f1c3 0280 	rsb	r2, r3, #128	; 0x80
 8000b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b64:	1ad2      	subs	r2, r2, r3
 8000b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8000b6e:	623b      	str	r3, [r7, #32]
  if(xpos+wd+wdL+wdR>SCR_WD) wd  = MAX(SCR_WD-xpos-wdL, 0);
 8000b70:	68fa      	ldr	r2, [r7, #12]
 8000b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b74:	441a      	add	r2, r3
 8000b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b78:	441a      	add	r2, r3
 8000b7a:	6a3b      	ldr	r3, [r7, #32]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	2b80      	cmp	r3, #128	; 0x80
 8000b80:	dd07      	ble.n	8000b92 <printChar+0x16a>
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	f1c3 0280 	rsb	r2, r3, #128	; 0x80
 8000b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8a:	1ad3      	subs	r3, r2, r3
 8000b8c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8000b90:	63fb      	str	r3, [r7, #60]	; 0x3c
  if(xpos+wd+wdL+wdR>SCR_WD) wdL = MAX(SCR_WD-xpos, 0);
 8000b92:	68fa      	ldr	r2, [r7, #12]
 8000b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b96:	441a      	add	r2, r3
 8000b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9a:	441a      	add	r2, r3
 8000b9c:	6a3b      	ldr	r3, [r7, #32]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	2b80      	cmp	r3, #128	; 0x80
 8000ba2:	dd05      	ble.n	8000bb0 <printChar+0x188>
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000baa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24

  for(x=0; x<wd; x++) {
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	637b      	str	r3, [r7, #52]	; 0x34
 8000bb4:	e06c      	b.n	8000c90 <printChar+0x268>
	  uint8_t mask = 0x80 >> ((xpos+x+wdL)&7);
 8000bb6:	68fa      	ldr	r2, [r7, #12]
 8000bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bba:	441a      	add	r2, r3
 8000bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bbe:	4413      	add	r3, r2
 8000bc0:	f003 0307 	and.w	r3, r3, #7
 8000bc4:	2280      	movs	r2, #128	; 0x80
 8000bc6:	fa42 f303 	asr.w	r3, r2, r3
 8000bca:	74fb      	strb	r3, [r7, #19]
	  for(y8=0; y8<fht8; y8++) {
 8000bcc:	2300      	movs	r3, #0
 8000bce:	633b      	str	r3, [r7, #48]	; 0x30
 8000bd0:	e057      	b.n	8000c82 <printChar+0x25a>
      d = fontbyte(cdata+x*fht8+y8);
 8000bd2:	4b36      	ldr	r3, [pc, #216]	; (8000cac <printChar+0x284>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000bd8:	69b9      	ldr	r1, [r7, #24]
 8000bda:	fb01 f102 	mul.w	r1, r1, r2
 8000bde:	697a      	ldr	r2, [r7, #20]
 8000be0:	4411      	add	r1, r2
 8000be2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000be4:	440a      	add	r2, r1
 8000be6:	4413      	add	r3, r2
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      int lastbit = cfont.ySize - y8 * 8;
 8000bee:	4b2f      	ldr	r3, [pc, #188]	; (8000cac <printChar+0x284>)
 8000bf0:	795b      	ldrb	r3, [r3, #5]
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bf6:	00db      	lsls	r3, r3, #3
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	61fb      	str	r3, [r7, #28]
      if (lastbit > 8) lastbit = 8;
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	2b08      	cmp	r3, #8
 8000c00:	dd01      	ble.n	8000c06 <printChar+0x1de>
 8000c02:	2308      	movs	r3, #8
 8000c04:	61fb      	str	r3, [r7, #28]
      for(b=0; b<lastbit; b++) {
 8000c06:	2300      	movs	r3, #0
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c0a:	e033      	b.n	8000c74 <printChar+0x24c>
         if(d & 1) scr[(ypos+y8*8+b)*scrWd+(xpos+x+wdL)/8] |= mask;  //drawPixel(xpos+x, ypos+y8*8+b, 1);
 8000c0c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000c10:	f003 0301 	and.w	r3, r3, #1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d025      	beq.n	8000c64 <printChar+0x23c>
 8000c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c1a:	00da      	lsls	r2, r3, #3
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	441a      	add	r2, r3
 8000c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c22:	4413      	add	r3, r2
 8000c24:	4a24      	ldr	r2, [pc, #144]	; (8000cb8 <printChar+0x290>)
 8000c26:	7812      	ldrb	r2, [r2, #0]
 8000c28:	fb02 f203 	mul.w	r2, r2, r3
 8000c2c:	68f9      	ldr	r1, [r7, #12]
 8000c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c30:	4419      	add	r1, r3
 8000c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c34:	440b      	add	r3, r1
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	da00      	bge.n	8000c3c <printChar+0x214>
 8000c3a:	3307      	adds	r3, #7
 8000c3c:	10db      	asrs	r3, r3, #3
 8000c3e:	441a      	add	r2, r3
 8000c40:	491e      	ldr	r1, [pc, #120]	; (8000cbc <printChar+0x294>)
 8000c42:	5c89      	ldrb	r1, [r1, r2]
 8000c44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c46:	00d0      	lsls	r0, r2, #3
 8000c48:	68ba      	ldr	r2, [r7, #8]
 8000c4a:	4410      	add	r0, r2
 8000c4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c4e:	4402      	add	r2, r0
 8000c50:	4819      	ldr	r0, [pc, #100]	; (8000cb8 <printChar+0x290>)
 8000c52:	7800      	ldrb	r0, [r0, #0]
 8000c54:	fb00 f202 	mul.w	r2, r0, r2
 8000c58:	4413      	add	r3, r2
 8000c5a:	7cfa      	ldrb	r2, [r7, #19]
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	b2d1      	uxtb	r1, r2
 8000c60:	4a16      	ldr	r2, [pc, #88]	; (8000cbc <printChar+0x294>)
 8000c62:	54d1      	strb	r1, [r2, r3]
         d>>=1;
 8000c64:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000c68:	085b      	lsrs	r3, r3, #1
 8000c6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      for(b=0; b<lastbit; b++) {
 8000c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c70:	3301      	adds	r3, #1
 8000c72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	dbc7      	blt.n	8000c0c <printChar+0x1e4>
	  for(y8=0; y8<fht8; y8++) {
 8000c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c7e:	3301      	adds	r3, #1
 8000c80:	633b      	str	r3, [r7, #48]	; 0x30
 8000c82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	429a      	cmp	r2, r3
 8000c88:	dba3      	blt.n	8000bd2 <printChar+0x1aa>
  for(x=0; x<wd; x++) {
 8000c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	637b      	str	r3, [r7, #52]	; 0x34
 8000c90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c94:	429a      	cmp	r2, r3
 8000c96:	db8e      	blt.n	8000bb6 <printChar+0x18e>
      }
    }
  }
  return wd+wdR+wdL;
 8000c98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000c9a:	6a3b      	ldr	r3, [r7, #32]
 8000c9c:	441a      	add	r2, r3
 8000c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca0:	4413      	add	r3, r2
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3740      	adds	r7, #64	; 0x40
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	2000044c 	.word	0x2000044c
 8000cb0:	20000014 	.word	0x20000014
 8000cb4:	20000448 	.word	0x20000448
 8000cb8:	20000000 	.word	0x20000000
 8000cbc:	20000044 	.word	0x20000044

08000cc0 <printStr>:
// ----------------------------------------------------------------
int printStr(int xpos, int ypos, char *str)
{
 8000cc0:	b590      	push	{r4, r7, lr}
 8000cc2:	b08b      	sub	sp, #44	; 0x2c
 8000cc4:	af02      	add	r7, sp, #8
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
  //unsigned char ch;
  //int stl, row;
  int x = xpos;
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	61fb      	str	r3, [r7, #28]
  int y = ypos;
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	61bb      	str	r3, [r7, #24]
  int wd = strWidth(str);
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f7ff fe8b 	bl	80009f0 <strWidth>
 8000cda:	6178      	str	r0, [r7, #20]

  if(x==-1) // right = -1
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ce2:	d104      	bne.n	8000cee <printStr+0x2e>
    x = SCR_WD - wd;
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000cea:	61fb      	str	r3, [r7, #28]
 8000cec:	e009      	b.n	8000d02 <printStr+0x42>
  else if(x<0) // center = -2
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	da06      	bge.n	8000d02 <printStr+0x42>
    x = (SCR_WD - wd) / 2;
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000cfa:	0fda      	lsrs	r2, r3, #31
 8000cfc:	4413      	add	r3, r2
 8000cfe:	105b      	asrs	r3, r3, #1
 8000d00:	61fb      	str	r3, [r7, #28]
  if(x<0) x = 0; // left
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	da24      	bge.n	8000d52 <printStr+0x92>
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61fb      	str	r3, [r7, #28]

  while(*str) {
 8000d0c:	e021      	b.n	8000d52 <printStr+0x92>
    int wd = printChar(x,y,*str++);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	1c5a      	adds	r2, r3, #1
 8000d12:	607a      	str	r2, [r7, #4]
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	461a      	mov	r2, r3
 8000d18:	69b9      	ldr	r1, [r7, #24]
 8000d1a:	69f8      	ldr	r0, [r7, #28]
 8000d1c:	f7ff fe84 	bl	8000a28 <printChar>
 8000d20:	6138      	str	r0, [r7, #16]
    x+=wd;
 8000d22:	69fa      	ldr	r2, [r7, #28]
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	4413      	add	r3, r2
 8000d28:	61fb      	str	r3, [r7, #28]
    if(cr && x>=SCR_WD) {
 8000d2a:	4b1b      	ldr	r3, [pc, #108]	; (8000d98 <printStr+0xd8>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d00f      	beq.n	8000d52 <printStr+0x92>
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	2b7f      	cmp	r3, #127	; 0x7f
 8000d36:	dd0c      	ble.n	8000d52 <printStr+0x92>
      x=0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61fb      	str	r3, [r7, #28]
      y+=cfont.ySize;
 8000d3c:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <printStr+0xdc>)
 8000d3e:	795b      	ldrb	r3, [r3, #5]
 8000d40:	461a      	mov	r2, r3
 8000d42:	69bb      	ldr	r3, [r7, #24]
 8000d44:	4413      	add	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]
      if(y>SCR_HT) y = 0;
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	2b40      	cmp	r3, #64	; 0x40
 8000d4c:	dd01      	ble.n	8000d52 <printStr+0x92>
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61bb      	str	r3, [r7, #24]
  while(*str) {
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d1d9      	bne.n	8000d0e <printStr+0x4e>
    }
  }
  if(invertCh) fillRect(xpos,x-1,y,y+cfont.ySize+1,2);
 8000d5a:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <printStr+0xe0>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d014      	beq.n	8000d8c <printStr+0xcc>
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	b2d8      	uxtb	r0, r3
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	b2d9      	uxtb	r1, r3
 8000d6e:	69bb      	ldr	r3, [r7, #24]
 8000d70:	b2dc      	uxtb	r4, r3
 8000d72:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <printStr+0xdc>)
 8000d74:	795a      	ldrb	r2, [r3, #5]
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	4413      	add	r3, r2
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	3301      	adds	r3, #1
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	2202      	movs	r2, #2
 8000d84:	9200      	str	r2, [sp, #0]
 8000d86:	4622      	mov	r2, r4
 8000d88:	f7ff fd00 	bl	800078c <fillRect>
  return x;
 8000d8c:	69fb      	ldr	r3, [r7, #28]
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3724      	adds	r7, #36	; 0x24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd90      	pop	{r4, r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000444 	.word	0x20000444
 8000d9c:	2000044c 	.word	0x2000044c
 8000da0:	20000458 	.word	0x20000458

08000da4 <isNumber>:
  sendCmd(pos);
  while(*signs) {  sendData(*signs>>8); sendData(*signs&0xff); signs++; }
}
// ----------------------------------------------------------------
bool isNumber(uint8_t ch)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
  return isdigit(ch) || ch==' ';
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	3301      	adds	r3, #1
 8000db2:	4a0a      	ldr	r2, [pc, #40]	; (8000ddc <isNumber+0x38>)
 8000db4:	4413      	add	r3, r2
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	f003 0304 	and.w	r3, r3, #4
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d102      	bne.n	8000dc6 <isNumber+0x22>
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	2b20      	cmp	r3, #32
 8000dc4:	d101      	bne.n	8000dca <isNumber+0x26>
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e000      	b.n	8000dcc <isNumber+0x28>
 8000dca:	2300      	movs	r3, #0
 8000dcc:	f003 0301 	and.w	r3, r3, #1
 8000dd0:	b2db      	uxtb	r3, r3
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr
 8000ddc:	08002c44 	.word	0x08002c44

08000de0 <convertPolish>:
{
  return isdigit(ch) || ch=='-' || ch=='+' || ch=='.' || ch==' ';
}
// ----------------------------------------------------------------
unsigned char convertPolish(unsigned char _c)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
  unsigned char pl, c = _c;
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	73bb      	strb	r3, [r7, #14]
  if(c==196 || c==197 || c==195) {
 8000dee:	7bbb      	ldrb	r3, [r7, #14]
 8000df0:	2bc4      	cmp	r3, #196	; 0xc4
 8000df2:	d005      	beq.n	8000e00 <convertPolish+0x20>
 8000df4:	7bbb      	ldrb	r3, [r7, #14]
 8000df6:	2bc5      	cmp	r3, #197	; 0xc5
 8000df8:	d002      	beq.n	8000e00 <convertPolish+0x20>
 8000dfa:	7bbb      	ldrb	r3, [r7, #14]
 8000dfc:	2bc3      	cmp	r3, #195	; 0xc3
 8000dfe:	d104      	bne.n	8000e0a <convertPolish+0x2a>
	  dualChar = c;
 8000e00:	4ae4      	ldr	r2, [pc, #912]	; (8001194 <convertPolish+0x3b4>)
 8000e02:	7bbb      	ldrb	r3, [r7, #14]
 8000e04:	7013      	strb	r3, [r2, #0]
    return 0;
 8000e06:	2300      	movs	r3, #0
 8000e08:	e1da      	b.n	80011c0 <convertPolish+0x3e0>
  }
  if(dualChar) { // UTF8 coding
 8000e0a:	4be2      	ldr	r3, [pc, #904]	; (8001194 <convertPolish+0x3b4>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f000 80bf 	beq.w	8000f92 <convertPolish+0x1b2>
    switch(_c) {
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	3b81      	subs	r3, #129	; 0x81
 8000e18:	2b3b      	cmp	r3, #59	; 0x3b
 8000e1a:	f200 80b4 	bhi.w	8000f86 <convertPolish+0x1a6>
 8000e1e:	a201      	add	r2, pc, #4	; (adr r2, 8000e24 <convertPolish+0x44>)
 8000e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e24:	08000f63 	.word	0x08000f63
 8000e28:	08000f27 	.word	0x08000f27
 8000e2c:	08000f69 	.word	0x08000f69
 8000e30:	08000f2d 	.word	0x08000f2d
 8000e34:	08000f15 	.word	0x08000f15
 8000e38:	08000f57 	.word	0x08000f57
 8000e3c:	08000f1b 	.word	0x08000f1b
 8000e40:	08000f87 	.word	0x08000f87
 8000e44:	08000f87 	.word	0x08000f87
 8000e48:	08000f87 	.word	0x08000f87
 8000e4c:	08000f87 	.word	0x08000f87
 8000e50:	08000f87 	.word	0x08000f87
 8000e54:	08000f87 	.word	0x08000f87
 8000e58:	08000f87 	.word	0x08000f87
 8000e5c:	08000f87 	.word	0x08000f87
 8000e60:	08000f87 	.word	0x08000f87
 8000e64:	08000f87 	.word	0x08000f87
 8000e68:	08000f87 	.word	0x08000f87
 8000e6c:	08000f6f 	.word	0x08000f6f
 8000e70:	08000f87 	.word	0x08000f87
 8000e74:	08000f87 	.word	0x08000f87
 8000e78:	08000f87 	.word	0x08000f87
 8000e7c:	08000f87 	.word	0x08000f87
 8000e80:	08000f5d 	.word	0x08000f5d
 8000e84:	08000f21 	.word	0x08000f21
 8000e88:	08000f75 	.word	0x08000f75
 8000e8c:	08000f45 	.word	0x08000f45
 8000e90:	08000f87 	.word	0x08000f87
 8000e94:	08000f87 	.word	0x08000f87
 8000e98:	08000f87 	.word	0x08000f87
 8000e9c:	08000f87 	.word	0x08000f87
 8000ea0:	08000f87 	.word	0x08000f87
 8000ea4:	08000f87 	.word	0x08000f87
 8000ea8:	08000f87 	.word	0x08000f87
 8000eac:	08000f87 	.word	0x08000f87
 8000eb0:	08000f87 	.word	0x08000f87
 8000eb4:	08000f87 	.word	0x08000f87
 8000eb8:	08000f87 	.word	0x08000f87
 8000ebc:	08000f87 	.word	0x08000f87
 8000ec0:	08000f87 	.word	0x08000f87
 8000ec4:	08000f87 	.word	0x08000f87
 8000ec8:	08000f87 	.word	0x08000f87
 8000ecc:	08000f87 	.word	0x08000f87
 8000ed0:	08000f87 	.word	0x08000f87
 8000ed4:	08000f87 	.word	0x08000f87
 8000ed8:	08000f87 	.word	0x08000f87
 8000edc:	08000f87 	.word	0x08000f87
 8000ee0:	08000f87 	.word	0x08000f87
 8000ee4:	08000f87 	.word	0x08000f87
 8000ee8:	08000f87 	.word	0x08000f87
 8000eec:	08000f3f 	.word	0x08000f3f
 8000ef0:	08000f87 	.word	0x08000f87
 8000ef4:	08000f87 	.word	0x08000f87
 8000ef8:	08000f87 	.word	0x08000f87
 8000efc:	08000f87 	.word	0x08000f87
 8000f00:	08000f87 	.word	0x08000f87
 8000f04:	08000f7b 	.word	0x08000f7b
 8000f08:	08000f4b 	.word	0x08000f4b
 8000f0c:	08000f81 	.word	0x08000f81
 8000f10:	08000f51 	.word	0x08000f51
      case 133: pl = 1+9; break; // '�'
 8000f14:	230a      	movs	r3, #10
 8000f16:	73fb      	strb	r3, [r7, #15]
 8000f18:	e037      	b.n	8000f8a <convertPolish+0x1aa>
      case 135: pl = 2+9; break; // '�'
 8000f1a:	230b      	movs	r3, #11
 8000f1c:	73fb      	strb	r3, [r7, #15]
 8000f1e:	e034      	b.n	8000f8a <convertPolish+0x1aa>
      case 153: pl = 3+9; break; // '�'
 8000f20:	230c      	movs	r3, #12
 8000f22:	73fb      	strb	r3, [r7, #15]
 8000f24:	e031      	b.n	8000f8a <convertPolish+0x1aa>
      case 130: pl = 4+9; break; // '�'
 8000f26:	230d      	movs	r3, #13
 8000f28:	73fb      	strb	r3, [r7, #15]
 8000f2a:	e02e      	b.n	8000f8a <convertPolish+0x1aa>
      case 132: pl = dualChar==197 ? 5+9 : 1; break; // '�' and '�'
 8000f2c:	4b99      	ldr	r3, [pc, #612]	; (8001194 <convertPolish+0x3b4>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2bc5      	cmp	r3, #197	; 0xc5
 8000f32:	d101      	bne.n	8000f38 <convertPolish+0x158>
 8000f34:	230e      	movs	r3, #14
 8000f36:	e000      	b.n	8000f3a <convertPolish+0x15a>
 8000f38:	2301      	movs	r3, #1
 8000f3a:	73fb      	strb	r3, [r7, #15]
 8000f3c:	e025      	b.n	8000f8a <convertPolish+0x1aa>
      case 179: pl = 6+9; break; // '�'
 8000f3e:	230f      	movs	r3, #15
 8000f40:	73fb      	strb	r3, [r7, #15]
 8000f42:	e022      	b.n	8000f8a <convertPolish+0x1aa>
      case 155: pl = 7+9; break; // '�'
 8000f44:	2310      	movs	r3, #16
 8000f46:	73fb      	strb	r3, [r7, #15]
 8000f48:	e01f      	b.n	8000f8a <convertPolish+0x1aa>
      case 186: pl = 8+9; break; // '�'
 8000f4a:	2311      	movs	r3, #17
 8000f4c:	73fb      	strb	r3, [r7, #15]
 8000f4e:	e01c      	b.n	8000f8a <convertPolish+0x1aa>
      case 188: pl = 9+9; break; // '�'
 8000f50:	2312      	movs	r3, #18
 8000f52:	73fb      	strb	r3, [r7, #15]
 8000f54:	e019      	b.n	8000f8a <convertPolish+0x1aa>
      //case 132: pl = 1; break; // '�'
      case 134: pl = 2; break; // '�'
 8000f56:	2302      	movs	r3, #2
 8000f58:	73fb      	strb	r3, [r7, #15]
 8000f5a:	e016      	b.n	8000f8a <convertPolish+0x1aa>
      case 152: pl = 3; break; // '�'
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	73fb      	strb	r3, [r7, #15]
 8000f60:	e013      	b.n	8000f8a <convertPolish+0x1aa>
      case 129: pl = 4; break; // '�'
 8000f62:	2304      	movs	r3, #4
 8000f64:	73fb      	strb	r3, [r7, #15]
 8000f66:	e010      	b.n	8000f8a <convertPolish+0x1aa>
      case 131: pl = 5; break; // '�'
 8000f68:	2305      	movs	r3, #5
 8000f6a:	73fb      	strb	r3, [r7, #15]
 8000f6c:	e00d      	b.n	8000f8a <convertPolish+0x1aa>
      case 147: pl = 6; break; // '�'
 8000f6e:	2306      	movs	r3, #6
 8000f70:	73fb      	strb	r3, [r7, #15]
 8000f72:	e00a      	b.n	8000f8a <convertPolish+0x1aa>
      case 154: pl = 7; break; // '�'
 8000f74:	2307      	movs	r3, #7
 8000f76:	73fb      	strb	r3, [r7, #15]
 8000f78:	e007      	b.n	8000f8a <convertPolish+0x1aa>
      case 185: pl = 8; break; // '�'
 8000f7a:	2308      	movs	r3, #8
 8000f7c:	73fb      	strb	r3, [r7, #15]
 8000f7e:	e004      	b.n	8000f8a <convertPolish+0x1aa>
      case 187: pl = 9; break; // '�'
 8000f80:	2309      	movs	r3, #9
 8000f82:	73fb      	strb	r3, [r7, #15]
 8000f84:	e001      	b.n	8000f8a <convertPolish+0x1aa>
      default:  return c; break;
 8000f86:	7bbb      	ldrb	r3, [r7, #14]
 8000f88:	e11a      	b.n	80011c0 <convertPolish+0x3e0>
    }
    dualChar = 0;
 8000f8a:	4b82      	ldr	r3, [pc, #520]	; (8001194 <convertPolish+0x3b4>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	701a      	strb	r2, [r3, #0]
 8000f90:	e113      	b.n	80011ba <convertPolish+0x3da>
  } else
  switch(_c) {  // Windows coding
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	3b8c      	subs	r3, #140	; 0x8c
 8000f96:	2b67      	cmp	r3, #103	; 0x67
 8000f98:	f200 810d 	bhi.w	80011b6 <convertPolish+0x3d6>
 8000f9c:	a201      	add	r2, pc, #4	; (adr r2, 8000fa4 <convertPolish+0x1c4>)
 8000f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa2:	bf00      	nop
 8000fa4:	08001169 	.word	0x08001169
 8000fa8:	080011b7 	.word	0x080011b7
 8000fac:	080011b7 	.word	0x080011b7
 8000fb0:	0800116f 	.word	0x0800116f
 8000fb4:	080011b7 	.word	0x080011b7
 8000fb8:	080011b7 	.word	0x080011b7
 8000fbc:	080011b7 	.word	0x080011b7
 8000fc0:	080011b7 	.word	0x080011b7
 8000fc4:	080011b7 	.word	0x080011b7
 8000fc8:	080011b7 	.word	0x080011b7
 8000fcc:	080011b7 	.word	0x080011b7
 8000fd0:	080011b7 	.word	0x080011b7
 8000fd4:	080011b7 	.word	0x080011b7
 8000fd8:	080011b7 	.word	0x080011b7
 8000fdc:	080011b7 	.word	0x080011b7
 8000fe0:	080011b7 	.word	0x080011b7
 8000fe4:	080011a5 	.word	0x080011a5
 8000fe8:	080011b7 	.word	0x080011b7
 8000fec:	080011b7 	.word	0x080011b7
 8000ff0:	080011ab 	.word	0x080011ab
 8000ff4:	080011b7 	.word	0x080011b7
 8000ff8:	080011b7 	.word	0x080011b7
 8000ffc:	080011b7 	.word	0x080011b7
 8001000:	08001157 	.word	0x08001157
 8001004:	080011b7 	.word	0x080011b7
 8001008:	08001145 	.word	0x08001145
 800100c:	080011b7 	.word	0x080011b7
 8001010:	080011b7 	.word	0x080011b7
 8001014:	080011b7 	.word	0x080011b7
 8001018:	080011b7 	.word	0x080011b7
 800101c:	080011b7 	.word	0x080011b7
 8001020:	080011b7 	.word	0x080011b7
 8001024:	080011b7 	.word	0x080011b7
 8001028:	080011b7 	.word	0x080011b7
 800102c:	080011b7 	.word	0x080011b7
 8001030:	08001175 	.word	0x08001175
 8001034:	080011b7 	.word	0x080011b7
 8001038:	080011b7 	.word	0x080011b7
 800103c:	080011b7 	.word	0x080011b7
 8001040:	0800118d 	.word	0x0800118d
 8001044:	080011b7 	.word	0x080011b7
 8001048:	080011b7 	.word	0x080011b7
 800104c:	080011b7 	.word	0x080011b7
 8001050:	080011b7 	.word	0x080011b7
 8001054:	080011b7 	.word	0x080011b7
 8001058:	0800117b 	.word	0x0800117b
 800105c:	080011b7 	.word	0x080011b7
 8001060:	080011b7 	.word	0x080011b7
 8001064:	080011b7 	.word	0x080011b7
 8001068:	080011b7 	.word	0x080011b7
 800106c:	080011b7 	.word	0x080011b7
 8001070:	080011b1 	.word	0x080011b1
 8001074:	080011b7 	.word	0x080011b7
 8001078:	080011b7 	.word	0x080011b7
 800107c:	080011b7 	.word	0x080011b7
 8001080:	080011b7 	.word	0x080011b7
 8001084:	080011b7 	.word	0x080011b7
 8001088:	080011b7 	.word	0x080011b7
 800108c:	0800114b 	.word	0x0800114b
 8001090:	080011b7 	.word	0x080011b7
 8001094:	080011b7 	.word	0x080011b7
 8001098:	080011b7 	.word	0x080011b7
 800109c:	08001151 	.word	0x08001151
 80010a0:	080011b7 	.word	0x080011b7
 80010a4:	080011b7 	.word	0x080011b7
 80010a8:	080011b7 	.word	0x080011b7
 80010ac:	080011b7 	.word	0x080011b7
 80010b0:	080011b7 	.word	0x080011b7
 80010b4:	080011b7 	.word	0x080011b7
 80010b8:	0800115d 	.word	0x0800115d
 80010bc:	080011b7 	.word	0x080011b7
 80010c0:	08001163 	.word	0x08001163
 80010c4:	080011b7 	.word	0x080011b7
 80010c8:	080011b7 	.word	0x080011b7
 80010cc:	080011b7 	.word	0x080011b7
 80010d0:	080011b7 	.word	0x080011b7
 80010d4:	080011b7 	.word	0x080011b7
 80010d8:	080011b7 	.word	0x080011b7
 80010dc:	080011b7 	.word	0x080011b7
 80010e0:	080011b7 	.word	0x080011b7
 80010e4:	080011b7 	.word	0x080011b7
 80010e8:	080011b7 	.word	0x080011b7
 80010ec:	080011b7 	.word	0x080011b7
 80010f0:	080011b7 	.word	0x080011b7
 80010f4:	080011b7 	.word	0x080011b7
 80010f8:	080011b7 	.word	0x080011b7
 80010fc:	080011b7 	.word	0x080011b7
 8001100:	080011b7 	.word	0x080011b7
 8001104:	080011b7 	.word	0x080011b7
 8001108:	080011b7 	.word	0x080011b7
 800110c:	08001181 	.word	0x08001181
 8001110:	080011b7 	.word	0x080011b7
 8001114:	080011b7 	.word	0x080011b7
 8001118:	080011b7 	.word	0x080011b7
 800111c:	08001187 	.word	0x08001187
 8001120:	080011b7 	.word	0x080011b7
 8001124:	080011b7 	.word	0x080011b7
 8001128:	080011b7 	.word	0x080011b7
 800112c:	080011b7 	.word	0x080011b7
 8001130:	080011b7 	.word	0x080011b7
 8001134:	080011b7 	.word	0x080011b7
 8001138:	08001199 	.word	0x08001199
 800113c:	080011b7 	.word	0x080011b7
 8001140:	0800119f 	.word	0x0800119f
    case 165: pl = 1; break; // �
 8001144:	2301      	movs	r3, #1
 8001146:	73fb      	strb	r3, [r7, #15]
 8001148:	e037      	b.n	80011ba <convertPolish+0x3da>
    case 198: pl = 2; break; // �
 800114a:	2302      	movs	r3, #2
 800114c:	73fb      	strb	r3, [r7, #15]
 800114e:	e034      	b.n	80011ba <convertPolish+0x3da>
    case 202: pl = 3; break; // �
 8001150:	2303      	movs	r3, #3
 8001152:	73fb      	strb	r3, [r7, #15]
 8001154:	e031      	b.n	80011ba <convertPolish+0x3da>
    case 163: pl = 4; break; // �
 8001156:	2304      	movs	r3, #4
 8001158:	73fb      	strb	r3, [r7, #15]
 800115a:	e02e      	b.n	80011ba <convertPolish+0x3da>
    case 209: pl = 5; break; // �
 800115c:	2305      	movs	r3, #5
 800115e:	73fb      	strb	r3, [r7, #15]
 8001160:	e02b      	b.n	80011ba <convertPolish+0x3da>
    case 211: pl = 6; break; // �
 8001162:	2306      	movs	r3, #6
 8001164:	73fb      	strb	r3, [r7, #15]
 8001166:	e028      	b.n	80011ba <convertPolish+0x3da>
    case 140: pl = 7; break; // �
 8001168:	2307      	movs	r3, #7
 800116a:	73fb      	strb	r3, [r7, #15]
 800116c:	e025      	b.n	80011ba <convertPolish+0x3da>
    case 143: pl = 8; break; // �
 800116e:	2308      	movs	r3, #8
 8001170:	73fb      	strb	r3, [r7, #15]
 8001172:	e022      	b.n	80011ba <convertPolish+0x3da>
    case 175: pl = 9; break; // �
 8001174:	2309      	movs	r3, #9
 8001176:	73fb      	strb	r3, [r7, #15]
 8001178:	e01f      	b.n	80011ba <convertPolish+0x3da>
    case 185: pl = 10; break; // �
 800117a:	230a      	movs	r3, #10
 800117c:	73fb      	strb	r3, [r7, #15]
 800117e:	e01c      	b.n	80011ba <convertPolish+0x3da>
    case 230: pl = 11; break; // �
 8001180:	230b      	movs	r3, #11
 8001182:	73fb      	strb	r3, [r7, #15]
 8001184:	e019      	b.n	80011ba <convertPolish+0x3da>
    case 234: pl = 12; break; // �
 8001186:	230c      	movs	r3, #12
 8001188:	73fb      	strb	r3, [r7, #15]
 800118a:	e016      	b.n	80011ba <convertPolish+0x3da>
    case 179: pl = 13; break; // �
 800118c:	230d      	movs	r3, #13
 800118e:	73fb      	strb	r3, [r7, #15]
 8001190:	e013      	b.n	80011ba <convertPolish+0x3da>
 8001192:	bf00      	nop
 8001194:	20000040 	.word	0x20000040
    case 241: pl = 14; break; // �
 8001198:	230e      	movs	r3, #14
 800119a:	73fb      	strb	r3, [r7, #15]
 800119c:	e00d      	b.n	80011ba <convertPolish+0x3da>
    case 243: pl = 15; break; // �
 800119e:	230f      	movs	r3, #15
 80011a0:	73fb      	strb	r3, [r7, #15]
 80011a2:	e00a      	b.n	80011ba <convertPolish+0x3da>
    case 156: pl = 16; break; // �
 80011a4:	2310      	movs	r3, #16
 80011a6:	73fb      	strb	r3, [r7, #15]
 80011a8:	e007      	b.n	80011ba <convertPolish+0x3da>
    case 159: pl = 17; break; // �
 80011aa:	2311      	movs	r3, #17
 80011ac:	73fb      	strb	r3, [r7, #15]
 80011ae:	e004      	b.n	80011ba <convertPolish+0x3da>
    case 191: pl = 18; break; // �
 80011b0:	2312      	movs	r3, #18
 80011b2:	73fb      	strb	r3, [r7, #15]
 80011b4:	e001      	b.n	80011ba <convertPolish+0x3da>
    default:  return c; break;
 80011b6:	7bbb      	ldrb	r3, [r7, #14]
 80011b8:	e002      	b.n	80011c0 <convertPolish+0x3e0>
  }
  return pl+'~'+1;
 80011ba:	7bfb      	ldrb	r3, [r7, #15]
 80011bc:	337f      	adds	r3, #127	; 0x7f
 80011be:	b2db      	uxtb	r3, r3
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop

080011cc <main>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);

int main(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af02      	add	r7, sp, #8
	HAL_Init();
 80011d2:	f000 f9c9 	bl	8001568 <HAL_Init>
	SystemClock_Config();
 80011d6:	f000 f81f 	bl	8001218 <SystemClock_Config>
	MX_GPIO_Init();
 80011da:	f000 f88f 	bl	80012fc <MX_GPIO_Init>
	MX_SPI1_Init();
 80011de:	f000 f857 	bl	8001290 <MX_SPI1_Init>

	init();
 80011e2:	f7fe ffc5 	bl	8000170 <init>
	cls();
 80011e6:	f7ff f84f 	bl	8000288 <cls>
	setFont(c64enh);
 80011ea:	4809      	ldr	r0, [pc, #36]	; (8001210 <main+0x44>)
 80011ec:	f7ff fb18 	bl	8000820 <setFont>
	printStr(ALIGN_CENTER, 28, "Hello World!");
 80011f0:	4a08      	ldr	r2, [pc, #32]	; (8001214 <main+0x48>)
 80011f2:	211c      	movs	r1, #28
 80011f4:	f06f 0001 	mvn.w	r0, #1
 80011f8:	f7ff fd62 	bl	8000cc0 <printStr>
	drawRect(18,20,127-18*2,63-20*2,1);
 80011fc:	2301      	movs	r3, #1
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	2317      	movs	r3, #23
 8001202:	225b      	movs	r2, #91	; 0x5b
 8001204:	2114      	movs	r1, #20
 8001206:	2012      	movs	r0, #18
 8001208:	f7ff fa4a 	bl	80006a0 <drawRect>

	while (1)
 800120c:	e7fe      	b.n	800120c <main+0x40>
 800120e:	bf00      	nop
 8001210:	080028a0 	.word	0x080028a0
 8001214:	08002880 	.word	0x08002880

08001218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b090      	sub	sp, #64	; 0x40
 800121c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800121e:	f107 0318 	add.w	r3, r7, #24
 8001222:	2228      	movs	r2, #40	; 0x28
 8001224:	2100      	movs	r1, #0
 8001226:	4618      	mov	r0, r3
 8001228:	f001 fb16 	bl	8002858 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800122c:	1d3b      	adds	r3, r7, #4
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]
 8001238:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800123a:	2302      	movs	r3, #2
 800123c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800123e:	2301      	movs	r3, #1
 8001240:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001242:	2310      	movs	r3, #16
 8001244:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001246:	2300      	movs	r3, #0
 8001248:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800124a:	f107 0318 	add.w	r3, r7, #24
 800124e:	4618      	mov	r0, r3
 8001250:	f000 fc90 	bl	8001b74 <HAL_RCC_OscConfig>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800125a:	f000 f8af 	bl	80013bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800125e:	230f      	movs	r3, #15
 8001260:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001262:	2300      	movs	r3, #0
 8001264:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	2100      	movs	r1, #0
 8001276:	4618      	mov	r0, r3
 8001278:	f000 fefc 	bl	8002074 <HAL_RCC_ClockConfig>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001282:	f000 f89b 	bl	80013bc <Error_Handler>
  }
}
 8001286:	bf00      	nop
 8001288:	3740      	adds	r7, #64	; 0x40
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001294:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <MX_SPI1_Init+0x64>)
 8001296:	4a18      	ldr	r2, [pc, #96]	; (80012f8 <MX_SPI1_Init+0x68>)
 8001298:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800129a:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <MX_SPI1_Init+0x64>)
 800129c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012a2:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <MX_SPI1_Init+0x64>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012a8:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <MX_SPI1_Init+0x64>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012ae:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <MX_SPI1_Init+0x64>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012b4:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <MX_SPI1_Init+0x64>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <MX_SPI1_Init+0x64>)
 80012bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80012c2:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <MX_SPI1_Init+0x64>)
 80012c4:	2238      	movs	r2, #56	; 0x38
 80012c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012c8:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <MX_SPI1_Init+0x64>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012ce:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <MX_SPI1_Init+0x64>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012d4:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <MX_SPI1_Init+0x64>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012da:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <MX_SPI1_Init+0x64>)
 80012dc:	220a      	movs	r2, #10
 80012de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012e0:	4804      	ldr	r0, [pc, #16]	; (80012f4 <MX_SPI1_Init+0x64>)
 80012e2:	f001 f82f 	bl	8002344 <HAL_SPI_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012ec:	f000 f866 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	2000045c 	.word	0x2000045c
 80012f8:	40013000 	.word	0x40013000

080012fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b088      	sub	sp, #32
 8001300:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001302:	f107 0310 	add.w	r3, r7, #16
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001310:	4b27      	ldr	r3, [pc, #156]	; (80013b0 <MX_GPIO_Init+0xb4>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	4a26      	ldr	r2, [pc, #152]	; (80013b0 <MX_GPIO_Init+0xb4>)
 8001316:	f043 0310 	orr.w	r3, r3, #16
 800131a:	6193      	str	r3, [r2, #24]
 800131c:	4b24      	ldr	r3, [pc, #144]	; (80013b0 <MX_GPIO_Init+0xb4>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	f003 0310 	and.w	r3, r3, #16
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001328:	4b21      	ldr	r3, [pc, #132]	; (80013b0 <MX_GPIO_Init+0xb4>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	4a20      	ldr	r2, [pc, #128]	; (80013b0 <MX_GPIO_Init+0xb4>)
 800132e:	f043 0320 	orr.w	r3, r3, #32
 8001332:	6193      	str	r3, [r2, #24]
 8001334:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <MX_GPIO_Init+0xb4>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	f003 0320 	and.w	r3, r3, #32
 800133c:	60bb      	str	r3, [r7, #8]
 800133e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001340:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <MX_GPIO_Init+0xb4>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	4a1a      	ldr	r2, [pc, #104]	; (80013b0 <MX_GPIO_Init+0xb4>)
 8001346:	f043 0304 	orr.w	r3, r3, #4
 800134a:	6193      	str	r3, [r2, #24]
 800134c:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <MX_GPIO_Init+0xb4>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	f003 0304 	and.w	r3, r3, #4
 8001354:	607b      	str	r3, [r7, #4]
 8001356:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001358:	2200      	movs	r2, #0
 800135a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800135e:	4815      	ldr	r0, [pc, #84]	; (80013b4 <MX_GPIO_Init+0xb8>)
 8001360:	f000 fbf0 	bl	8001b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001364:	2201      	movs	r2, #1
 8001366:	2110      	movs	r1, #16
 8001368:	4813      	ldr	r0, [pc, #76]	; (80013b8 <MX_GPIO_Init+0xbc>)
 800136a:	f000 fbeb 	bl	8001b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800136e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001372:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001374:	2301      	movs	r3, #1
 8001376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137c:	2302      	movs	r3, #2
 800137e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001380:	f107 0310 	add.w	r3, r7, #16
 8001384:	4619      	mov	r1, r3
 8001386:	480b      	ldr	r0, [pc, #44]	; (80013b4 <MX_GPIO_Init+0xb8>)
 8001388:	f000 fa58 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800138c:	2310      	movs	r3, #16
 800138e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001390:	2301      	movs	r3, #1
 8001392:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001398:	2303      	movs	r3, #3
 800139a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139c:	f107 0310 	add.w	r3, r7, #16
 80013a0:	4619      	mov	r1, r3
 80013a2:	4805      	ldr	r0, [pc, #20]	; (80013b8 <MX_GPIO_Init+0xbc>)
 80013a4:	f000 fa4a 	bl	800183c <HAL_GPIO_Init>

}
 80013a8:	bf00      	nop
 80013aa:	3720      	adds	r7, #32
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40021000 	.word	0x40021000
 80013b4:	40011000 	.word	0x40011000
 80013b8:	40010800 	.word	0x40010800

080013bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0

}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr

080013c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <HAL_MspInit+0x5c>)
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	4a14      	ldr	r2, [pc, #80]	; (8001424 <HAL_MspInit+0x5c>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	6193      	str	r3, [r2, #24]
 80013da:	4b12      	ldr	r3, [pc, #72]	; (8001424 <HAL_MspInit+0x5c>)
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e6:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <HAL_MspInit+0x5c>)
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	4a0e      	ldr	r2, [pc, #56]	; (8001424 <HAL_MspInit+0x5c>)
 80013ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f0:	61d3      	str	r3, [r2, #28]
 80013f2:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <HAL_MspInit+0x5c>)
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013fe:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <HAL_MspInit+0x60>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	4a04      	ldr	r2, [pc, #16]	; (8001428 <HAL_MspInit+0x60>)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800141a:	bf00      	nop
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr
 8001424:	40021000 	.word	0x40021000
 8001428:	40010000 	.word	0x40010000

0800142c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b088      	sub	sp, #32
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	f107 0310 	add.w	r3, r7, #16
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a1b      	ldr	r2, [pc, #108]	; (80014b4 <HAL_SPI_MspInit+0x88>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d12f      	bne.n	80014ac <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800144c:	4b1a      	ldr	r3, [pc, #104]	; (80014b8 <HAL_SPI_MspInit+0x8c>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	4a19      	ldr	r2, [pc, #100]	; (80014b8 <HAL_SPI_MspInit+0x8c>)
 8001452:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001456:	6193      	str	r3, [r2, #24]
 8001458:	4b17      	ldr	r3, [pc, #92]	; (80014b8 <HAL_SPI_MspInit+0x8c>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001464:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <HAL_SPI_MspInit+0x8c>)
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	4a13      	ldr	r2, [pc, #76]	; (80014b8 <HAL_SPI_MspInit+0x8c>)
 800146a:	f043 0304 	orr.w	r3, r3, #4
 800146e:	6193      	str	r3, [r2, #24]
 8001470:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <HAL_SPI_MspInit+0x8c>)
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	f003 0304 	and.w	r3, r3, #4
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800147c:	23a0      	movs	r3, #160	; 0xa0
 800147e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001480:	2302      	movs	r3, #2
 8001482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001484:	2303      	movs	r3, #3
 8001486:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001488:	f107 0310 	add.w	r3, r7, #16
 800148c:	4619      	mov	r1, r3
 800148e:	480b      	ldr	r0, [pc, #44]	; (80014bc <HAL_SPI_MspInit+0x90>)
 8001490:	f000 f9d4 	bl	800183c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001494:	2340      	movs	r3, #64	; 0x40
 8001496:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a0:	f107 0310 	add.w	r3, r7, #16
 80014a4:	4619      	mov	r1, r3
 80014a6:	4805      	ldr	r0, [pc, #20]	; (80014bc <HAL_SPI_MspInit+0x90>)
 80014a8:	f000 f9c8 	bl	800183c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014ac:	bf00      	nop
 80014ae:	3720      	adds	r7, #32
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40013000 	.word	0x40013000
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40010800 	.word	0x40010800

080014c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <NMI_Handler+0x4>

080014c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ca:	e7fe      	b.n	80014ca <HardFault_Handler+0x4>

080014cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <MemManage_Handler+0x4>

080014d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014d6:	e7fe      	b.n	80014d6 <BusFault_Handler+0x4>

080014d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014dc:	e7fe      	b.n	80014dc <UsageFault_Handler+0x4>

080014de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bc80      	pop	{r7}
 80014e8:	4770      	bx	lr

080014ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr

080014f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bc80      	pop	{r7}
 8001500:	4770      	bx	lr

08001502 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001506:	f000 f875 	bl	80015f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}

0800150e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001512:	bf00      	nop
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr
	...

0800151c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800151c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800151e:	e003      	b.n	8001528 <LoopCopyDataInit>

08001520 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001520:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001522:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001524:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001526:	3104      	adds	r1, #4

08001528 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001528:	480a      	ldr	r0, [pc, #40]	; (8001554 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800152a:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800152c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800152e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001530:	d3f6      	bcc.n	8001520 <CopyDataInit>
  ldr r2, =_sbss
 8001532:	4a0a      	ldr	r2, [pc, #40]	; (800155c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001534:	e002      	b.n	800153c <LoopFillZerobss>

08001536 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001536:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001538:	f842 3b04 	str.w	r3, [r2], #4

0800153c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800153c:	4b08      	ldr	r3, [pc, #32]	; (8001560 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800153e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001540:	d3f9      	bcc.n	8001536 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001542:	f7ff ffe4 	bl	800150e <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001546:	f001 f963 	bl	8002810 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800154a:	f7ff fe3f 	bl	80011cc <main>
  bx lr
 800154e:	4770      	bx	lr
  ldr r3, =_sidata
 8001550:	08002d50 	.word	0x08002d50
  ldr r0, =_sdata
 8001554:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001558:	20000024 	.word	0x20000024
  ldr r2, =_sbss
 800155c:	20000024 	.word	0x20000024
  ldr r3, = _ebss
 8001560:	200004b8 	.word	0x200004b8

08001564 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001564:	e7fe      	b.n	8001564 <ADC1_2_IRQHandler>
	...

08001568 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800156c:	4b08      	ldr	r3, [pc, #32]	; (8001590 <HAL_Init+0x28>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a07      	ldr	r2, [pc, #28]	; (8001590 <HAL_Init+0x28>)
 8001572:	f043 0310 	orr.w	r3, r3, #16
 8001576:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001578:	2003      	movs	r0, #3
 800157a:	f000 f92b 	bl	80017d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800157e:	2000      	movs	r0, #0
 8001580:	f000 f808 	bl	8001594 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001584:	f7ff ff20 	bl	80013c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40022000 	.word	0x40022000

08001594 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <HAL_InitTick+0x54>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	4b12      	ldr	r3, [pc, #72]	; (80015ec <HAL_InitTick+0x58>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	4619      	mov	r1, r3
 80015a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 f935 	bl	8001822 <HAL_SYSTICK_Config>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e00e      	b.n	80015e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2b0f      	cmp	r3, #15
 80015c6:	d80a      	bhi.n	80015de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c8:	2200      	movs	r2, #0
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	f04f 30ff 	mov.w	r0, #4294967295
 80015d0:	f000 f90b 	bl	80017ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015d4:	4a06      	ldr	r2, [pc, #24]	; (80015f0 <HAL_InitTick+0x5c>)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015da:	2300      	movs	r3, #0
 80015dc:	e000      	b.n	80015e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20000018 	.word	0x20000018
 80015ec:	20000020 	.word	0x20000020
 80015f0:	2000001c 	.word	0x2000001c

080015f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015f8:	4b05      	ldr	r3, [pc, #20]	; (8001610 <HAL_IncTick+0x1c>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	461a      	mov	r2, r3
 80015fe:	4b05      	ldr	r3, [pc, #20]	; (8001614 <HAL_IncTick+0x20>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4413      	add	r3, r2
 8001604:	4a03      	ldr	r2, [pc, #12]	; (8001614 <HAL_IncTick+0x20>)
 8001606:	6013      	str	r3, [r2, #0]
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr
 8001610:	20000020 	.word	0x20000020
 8001614:	200004b4 	.word	0x200004b4

08001618 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return uwTick;
 800161c:	4b02      	ldr	r3, [pc, #8]	; (8001628 <HAL_GetTick+0x10>)
 800161e:	681b      	ldr	r3, [r3, #0]
}
 8001620:	4618      	mov	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr
 8001628:	200004b4 	.word	0x200004b4

0800162c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001634:	f7ff fff0 	bl	8001618 <HAL_GetTick>
 8001638:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001644:	d005      	beq.n	8001652 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001646:	4b0a      	ldr	r3, [pc, #40]	; (8001670 <HAL_Delay+0x44>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	461a      	mov	r2, r3
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4413      	add	r3, r2
 8001650:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001652:	bf00      	nop
 8001654:	f7ff ffe0 	bl	8001618 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	429a      	cmp	r2, r3
 8001662:	d8f7      	bhi.n	8001654 <HAL_Delay+0x28>
  {
  }
}
 8001664:	bf00      	nop
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000020 	.word	0x20000020

08001674 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800168a:	68ba      	ldr	r2, [r7, #8]
 800168c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001690:	4013      	ands	r3, r2
 8001692:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800169c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016a6:	4a04      	ldr	r2, [pc, #16]	; (80016b8 <__NVIC_SetPriorityGrouping+0x44>)
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	60d3      	str	r3, [r2, #12]
}
 80016ac:	bf00      	nop
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c0:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <__NVIC_GetPriorityGrouping+0x18>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	0a1b      	lsrs	r3, r3, #8
 80016c6:	f003 0307 	and.w	r3, r3, #7
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	6039      	str	r1, [r7, #0]
 80016e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	db0a      	blt.n	8001702 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	490c      	ldr	r1, [pc, #48]	; (8001724 <__NVIC_SetPriority+0x4c>)
 80016f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	0112      	lsls	r2, r2, #4
 80016f8:	b2d2      	uxtb	r2, r2
 80016fa:	440b      	add	r3, r1
 80016fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001700:	e00a      	b.n	8001718 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	b2da      	uxtb	r2, r3
 8001706:	4908      	ldr	r1, [pc, #32]	; (8001728 <__NVIC_SetPriority+0x50>)
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	f003 030f 	and.w	r3, r3, #15
 800170e:	3b04      	subs	r3, #4
 8001710:	0112      	lsls	r2, r2, #4
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	440b      	add	r3, r1
 8001716:	761a      	strb	r2, [r3, #24]
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000e100 	.word	0xe000e100
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800172c:	b480      	push	{r7}
 800172e:	b089      	sub	sp, #36	; 0x24
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	f1c3 0307 	rsb	r3, r3, #7
 8001746:	2b04      	cmp	r3, #4
 8001748:	bf28      	it	cs
 800174a:	2304      	movcs	r3, #4
 800174c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	3304      	adds	r3, #4
 8001752:	2b06      	cmp	r3, #6
 8001754:	d902      	bls.n	800175c <NVIC_EncodePriority+0x30>
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	3b03      	subs	r3, #3
 800175a:	e000      	b.n	800175e <NVIC_EncodePriority+0x32>
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001760:	f04f 32ff 	mov.w	r2, #4294967295
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	43da      	mvns	r2, r3
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	401a      	ands	r2, r3
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001774:	f04f 31ff 	mov.w	r1, #4294967295
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	fa01 f303 	lsl.w	r3, r1, r3
 800177e:	43d9      	mvns	r1, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001784:	4313      	orrs	r3, r2
         );
}
 8001786:	4618      	mov	r0, r3
 8001788:	3724      	adds	r7, #36	; 0x24
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr

08001790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3b01      	subs	r3, #1
 800179c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017a0:	d301      	bcc.n	80017a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017a2:	2301      	movs	r3, #1
 80017a4:	e00f      	b.n	80017c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017a6:	4a0a      	ldr	r2, [pc, #40]	; (80017d0 <SysTick_Config+0x40>)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ae:	210f      	movs	r1, #15
 80017b0:	f04f 30ff 	mov.w	r0, #4294967295
 80017b4:	f7ff ff90 	bl	80016d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b8:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <SysTick_Config+0x40>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017be:	4b04      	ldr	r3, [pc, #16]	; (80017d0 <SysTick_Config+0x40>)
 80017c0:	2207      	movs	r2, #7
 80017c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	e000e010 	.word	0xe000e010

080017d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7ff ff49 	bl	8001674 <__NVIC_SetPriorityGrouping>
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b086      	sub	sp, #24
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	4603      	mov	r3, r0
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
 80017f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017fc:	f7ff ff5e 	bl	80016bc <__NVIC_GetPriorityGrouping>
 8001800:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	68b9      	ldr	r1, [r7, #8]
 8001806:	6978      	ldr	r0, [r7, #20]
 8001808:	f7ff ff90 	bl	800172c <NVIC_EncodePriority>
 800180c:	4602      	mov	r2, r0
 800180e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001812:	4611      	mov	r1, r2
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff ff5f 	bl	80016d8 <__NVIC_SetPriority>
}
 800181a:	bf00      	nop
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff ffb0 	bl	8001790 <SysTick_Config>
 8001830:	4603      	mov	r3, r0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800183c:	b480      	push	{r7}
 800183e:	b08b      	sub	sp, #44	; 0x2c
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001846:	2300      	movs	r3, #0
 8001848:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800184a:	2300      	movs	r3, #0
 800184c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800184e:	e169      	b.n	8001b24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001850:	2201      	movs	r2, #1
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	69fa      	ldr	r2, [r7, #28]
 8001860:	4013      	ands	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	429a      	cmp	r2, r3
 800186a:	f040 8158 	bne.w	8001b1e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	4a9a      	ldr	r2, [pc, #616]	; (8001adc <HAL_GPIO_Init+0x2a0>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d05e      	beq.n	8001936 <HAL_GPIO_Init+0xfa>
 8001878:	4a98      	ldr	r2, [pc, #608]	; (8001adc <HAL_GPIO_Init+0x2a0>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d875      	bhi.n	800196a <HAL_GPIO_Init+0x12e>
 800187e:	4a98      	ldr	r2, [pc, #608]	; (8001ae0 <HAL_GPIO_Init+0x2a4>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d058      	beq.n	8001936 <HAL_GPIO_Init+0xfa>
 8001884:	4a96      	ldr	r2, [pc, #600]	; (8001ae0 <HAL_GPIO_Init+0x2a4>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d86f      	bhi.n	800196a <HAL_GPIO_Init+0x12e>
 800188a:	4a96      	ldr	r2, [pc, #600]	; (8001ae4 <HAL_GPIO_Init+0x2a8>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d052      	beq.n	8001936 <HAL_GPIO_Init+0xfa>
 8001890:	4a94      	ldr	r2, [pc, #592]	; (8001ae4 <HAL_GPIO_Init+0x2a8>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d869      	bhi.n	800196a <HAL_GPIO_Init+0x12e>
 8001896:	4a94      	ldr	r2, [pc, #592]	; (8001ae8 <HAL_GPIO_Init+0x2ac>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d04c      	beq.n	8001936 <HAL_GPIO_Init+0xfa>
 800189c:	4a92      	ldr	r2, [pc, #584]	; (8001ae8 <HAL_GPIO_Init+0x2ac>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d863      	bhi.n	800196a <HAL_GPIO_Init+0x12e>
 80018a2:	4a92      	ldr	r2, [pc, #584]	; (8001aec <HAL_GPIO_Init+0x2b0>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d046      	beq.n	8001936 <HAL_GPIO_Init+0xfa>
 80018a8:	4a90      	ldr	r2, [pc, #576]	; (8001aec <HAL_GPIO_Init+0x2b0>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d85d      	bhi.n	800196a <HAL_GPIO_Init+0x12e>
 80018ae:	2b12      	cmp	r3, #18
 80018b0:	d82a      	bhi.n	8001908 <HAL_GPIO_Init+0xcc>
 80018b2:	2b12      	cmp	r3, #18
 80018b4:	d859      	bhi.n	800196a <HAL_GPIO_Init+0x12e>
 80018b6:	a201      	add	r2, pc, #4	; (adr r2, 80018bc <HAL_GPIO_Init+0x80>)
 80018b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018bc:	08001937 	.word	0x08001937
 80018c0:	08001911 	.word	0x08001911
 80018c4:	08001923 	.word	0x08001923
 80018c8:	08001965 	.word	0x08001965
 80018cc:	0800196b 	.word	0x0800196b
 80018d0:	0800196b 	.word	0x0800196b
 80018d4:	0800196b 	.word	0x0800196b
 80018d8:	0800196b 	.word	0x0800196b
 80018dc:	0800196b 	.word	0x0800196b
 80018e0:	0800196b 	.word	0x0800196b
 80018e4:	0800196b 	.word	0x0800196b
 80018e8:	0800196b 	.word	0x0800196b
 80018ec:	0800196b 	.word	0x0800196b
 80018f0:	0800196b 	.word	0x0800196b
 80018f4:	0800196b 	.word	0x0800196b
 80018f8:	0800196b 	.word	0x0800196b
 80018fc:	0800196b 	.word	0x0800196b
 8001900:	08001919 	.word	0x08001919
 8001904:	0800192d 	.word	0x0800192d
 8001908:	4a79      	ldr	r2, [pc, #484]	; (8001af0 <HAL_GPIO_Init+0x2b4>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d013      	beq.n	8001936 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800190e:	e02c      	b.n	800196a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	623b      	str	r3, [r7, #32]
          break;
 8001916:	e029      	b.n	800196c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	3304      	adds	r3, #4
 800191e:	623b      	str	r3, [r7, #32]
          break;
 8001920:	e024      	b.n	800196c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	3308      	adds	r3, #8
 8001928:	623b      	str	r3, [r7, #32]
          break;
 800192a:	e01f      	b.n	800196c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	330c      	adds	r3, #12
 8001932:	623b      	str	r3, [r7, #32]
          break;
 8001934:	e01a      	b.n	800196c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d102      	bne.n	8001944 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800193e:	2304      	movs	r3, #4
 8001940:	623b      	str	r3, [r7, #32]
          break;
 8001942:	e013      	b.n	800196c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d105      	bne.n	8001958 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800194c:	2308      	movs	r3, #8
 800194e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	69fa      	ldr	r2, [r7, #28]
 8001954:	611a      	str	r2, [r3, #16]
          break;
 8001956:	e009      	b.n	800196c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001958:	2308      	movs	r3, #8
 800195a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	69fa      	ldr	r2, [r7, #28]
 8001960:	615a      	str	r2, [r3, #20]
          break;
 8001962:	e003      	b.n	800196c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001964:	2300      	movs	r3, #0
 8001966:	623b      	str	r3, [r7, #32]
          break;
 8001968:	e000      	b.n	800196c <HAL_GPIO_Init+0x130>
          break;
 800196a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	2bff      	cmp	r3, #255	; 0xff
 8001970:	d801      	bhi.n	8001976 <HAL_GPIO_Init+0x13a>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	e001      	b.n	800197a <HAL_GPIO_Init+0x13e>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	3304      	adds	r3, #4
 800197a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	2bff      	cmp	r3, #255	; 0xff
 8001980:	d802      	bhi.n	8001988 <HAL_GPIO_Init+0x14c>
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	e002      	b.n	800198e <HAL_GPIO_Init+0x152>
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	3b08      	subs	r3, #8
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	210f      	movs	r1, #15
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	fa01 f303 	lsl.w	r3, r1, r3
 800199c:	43db      	mvns	r3, r3
 800199e:	401a      	ands	r2, r3
 80019a0:	6a39      	ldr	r1, [r7, #32]
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	fa01 f303 	lsl.w	r3, r1, r3
 80019a8:	431a      	orrs	r2, r3
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 80b1 	beq.w	8001b1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019bc:	4b4d      	ldr	r3, [pc, #308]	; (8001af4 <HAL_GPIO_Init+0x2b8>)
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	4a4c      	ldr	r2, [pc, #304]	; (8001af4 <HAL_GPIO_Init+0x2b8>)
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	6193      	str	r3, [r2, #24]
 80019c8:	4b4a      	ldr	r3, [pc, #296]	; (8001af4 <HAL_GPIO_Init+0x2b8>)
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019d4:	4a48      	ldr	r2, [pc, #288]	; (8001af8 <HAL_GPIO_Init+0x2bc>)
 80019d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d8:	089b      	lsrs	r3, r3, #2
 80019da:	3302      	adds	r3, #2
 80019dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	f003 0303 	and.w	r3, r3, #3
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	220f      	movs	r2, #15
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	43db      	mvns	r3, r3
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	4013      	ands	r3, r2
 80019f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a40      	ldr	r2, [pc, #256]	; (8001afc <HAL_GPIO_Init+0x2c0>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d013      	beq.n	8001a28 <HAL_GPIO_Init+0x1ec>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a3f      	ldr	r2, [pc, #252]	; (8001b00 <HAL_GPIO_Init+0x2c4>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d00d      	beq.n	8001a24 <HAL_GPIO_Init+0x1e8>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a3e      	ldr	r2, [pc, #248]	; (8001b04 <HAL_GPIO_Init+0x2c8>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d007      	beq.n	8001a20 <HAL_GPIO_Init+0x1e4>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a3d      	ldr	r2, [pc, #244]	; (8001b08 <HAL_GPIO_Init+0x2cc>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d101      	bne.n	8001a1c <HAL_GPIO_Init+0x1e0>
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e006      	b.n	8001a2a <HAL_GPIO_Init+0x1ee>
 8001a1c:	2304      	movs	r3, #4
 8001a1e:	e004      	b.n	8001a2a <HAL_GPIO_Init+0x1ee>
 8001a20:	2302      	movs	r3, #2
 8001a22:	e002      	b.n	8001a2a <HAL_GPIO_Init+0x1ee>
 8001a24:	2301      	movs	r3, #1
 8001a26:	e000      	b.n	8001a2a <HAL_GPIO_Init+0x1ee>
 8001a28:	2300      	movs	r3, #0
 8001a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a2c:	f002 0203 	and.w	r2, r2, #3
 8001a30:	0092      	lsls	r2, r2, #2
 8001a32:	4093      	lsls	r3, r2
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a3a:	492f      	ldr	r1, [pc, #188]	; (8001af8 <HAL_GPIO_Init+0x2bc>)
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3e:	089b      	lsrs	r3, r3, #2
 8001a40:	3302      	adds	r3, #2
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d006      	beq.n	8001a62 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a54:	4b2d      	ldr	r3, [pc, #180]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	492c      	ldr	r1, [pc, #176]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	600b      	str	r3, [r1, #0]
 8001a60:	e006      	b.n	8001a70 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a62:	4b2a      	ldr	r3, [pc, #168]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	4928      	ldr	r1, [pc, #160]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d006      	beq.n	8001a8a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a7c:	4b23      	ldr	r3, [pc, #140]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001a7e:	685a      	ldr	r2, [r3, #4]
 8001a80:	4922      	ldr	r1, [pc, #136]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	604b      	str	r3, [r1, #4]
 8001a88:	e006      	b.n	8001a98 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a8a:	4b20      	ldr	r3, [pc, #128]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	43db      	mvns	r3, r3
 8001a92:	491e      	ldr	r1, [pc, #120]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001a94:	4013      	ands	r3, r2
 8001a96:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d006      	beq.n	8001ab2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001aa4:	4b19      	ldr	r3, [pc, #100]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	4918      	ldr	r1, [pc, #96]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	608b      	str	r3, [r1, #8]
 8001ab0:	e006      	b.n	8001ac0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ab2:	4b16      	ldr	r3, [pc, #88]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001ab4:	689a      	ldr	r2, [r3, #8]
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	4914      	ldr	r1, [pc, #80]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001abc:	4013      	ands	r3, r2
 8001abe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d021      	beq.n	8001b10 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001acc:	4b0f      	ldr	r3, [pc, #60]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001ace:	68da      	ldr	r2, [r3, #12]
 8001ad0:	490e      	ldr	r1, [pc, #56]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	60cb      	str	r3, [r1, #12]
 8001ad8:	e021      	b.n	8001b1e <HAL_GPIO_Init+0x2e2>
 8001ada:	bf00      	nop
 8001adc:	10320000 	.word	0x10320000
 8001ae0:	10310000 	.word	0x10310000
 8001ae4:	10220000 	.word	0x10220000
 8001ae8:	10210000 	.word	0x10210000
 8001aec:	10120000 	.word	0x10120000
 8001af0:	10110000 	.word	0x10110000
 8001af4:	40021000 	.word	0x40021000
 8001af8:	40010000 	.word	0x40010000
 8001afc:	40010800 	.word	0x40010800
 8001b00:	40010c00 	.word	0x40010c00
 8001b04:	40011000 	.word	0x40011000
 8001b08:	40011400 	.word	0x40011400
 8001b0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b10:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <HAL_GPIO_Init+0x304>)
 8001b12:	68da      	ldr	r2, [r3, #12]
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	43db      	mvns	r3, r3
 8001b18:	4909      	ldr	r1, [pc, #36]	; (8001b40 <HAL_GPIO_Init+0x304>)
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	3301      	adds	r3, #1
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f47f ae8e 	bne.w	8001850 <HAL_GPIO_Init+0x14>
  }
}
 8001b34:	bf00      	nop
 8001b36:	bf00      	nop
 8001b38:	372c      	adds	r7, #44	; 0x2c
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr
 8001b40:	40010400 	.word	0x40010400

08001b44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	807b      	strh	r3, [r7, #2]
 8001b50:	4613      	mov	r3, r2
 8001b52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b54:	787b      	ldrb	r3, [r7, #1]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b5a:	887a      	ldrh	r2, [r7, #2]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b60:	e003      	b.n	8001b6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b62:	887b      	ldrh	r3, [r7, #2]
 8001b64:	041a      	lsls	r2, r3, #16
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	611a      	str	r2, [r3, #16]
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr

08001b74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e26c      	b.n	8002060 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f000 8087 	beq.w	8001ca2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b94:	4b92      	ldr	r3, [pc, #584]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 030c 	and.w	r3, r3, #12
 8001b9c:	2b04      	cmp	r3, #4
 8001b9e:	d00c      	beq.n	8001bba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ba0:	4b8f      	ldr	r3, [pc, #572]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 030c 	and.w	r3, r3, #12
 8001ba8:	2b08      	cmp	r3, #8
 8001baa:	d112      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x5e>
 8001bac:	4b8c      	ldr	r3, [pc, #560]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bb8:	d10b      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bba:	4b89      	ldr	r3, [pc, #548]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d06c      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x12c>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d168      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e246      	b.n	8002060 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bda:	d106      	bne.n	8001bea <HAL_RCC_OscConfig+0x76>
 8001bdc:	4b80      	ldr	r3, [pc, #512]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a7f      	ldr	r2, [pc, #508]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001be2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be6:	6013      	str	r3, [r2, #0]
 8001be8:	e02e      	b.n	8001c48 <HAL_RCC_OscConfig+0xd4>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d10c      	bne.n	8001c0c <HAL_RCC_OscConfig+0x98>
 8001bf2:	4b7b      	ldr	r3, [pc, #492]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a7a      	ldr	r2, [pc, #488]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bfc:	6013      	str	r3, [r2, #0]
 8001bfe:	4b78      	ldr	r3, [pc, #480]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a77      	ldr	r2, [pc, #476]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	e01d      	b.n	8001c48 <HAL_RCC_OscConfig+0xd4>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c14:	d10c      	bne.n	8001c30 <HAL_RCC_OscConfig+0xbc>
 8001c16:	4b72      	ldr	r3, [pc, #456]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a71      	ldr	r2, [pc, #452]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c20:	6013      	str	r3, [r2, #0]
 8001c22:	4b6f      	ldr	r3, [pc, #444]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a6e      	ldr	r2, [pc, #440]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c2c:	6013      	str	r3, [r2, #0]
 8001c2e:	e00b      	b.n	8001c48 <HAL_RCC_OscConfig+0xd4>
 8001c30:	4b6b      	ldr	r3, [pc, #428]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a6a      	ldr	r2, [pc, #424]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c3a:	6013      	str	r3, [r2, #0]
 8001c3c:	4b68      	ldr	r3, [pc, #416]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a67      	ldr	r2, [pc, #412]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c46:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d013      	beq.n	8001c78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c50:	f7ff fce2 	bl	8001618 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c58:	f7ff fcde 	bl	8001618 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b64      	cmp	r3, #100	; 0x64
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e1fa      	b.n	8002060 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c6a:	4b5d      	ldr	r3, [pc, #372]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d0f0      	beq.n	8001c58 <HAL_RCC_OscConfig+0xe4>
 8001c76:	e014      	b.n	8001ca2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c78:	f7ff fcce 	bl	8001618 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c80:	f7ff fcca 	bl	8001618 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b64      	cmp	r3, #100	; 0x64
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e1e6      	b.n	8002060 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c92:	4b53      	ldr	r3, [pc, #332]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f0      	bne.n	8001c80 <HAL_RCC_OscConfig+0x10c>
 8001c9e:	e000      	b.n	8001ca2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d063      	beq.n	8001d76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cae:	4b4c      	ldr	r3, [pc, #304]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f003 030c 	and.w	r3, r3, #12
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00b      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cba:	4b49      	ldr	r3, [pc, #292]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f003 030c 	and.w	r3, r3, #12
 8001cc2:	2b08      	cmp	r3, #8
 8001cc4:	d11c      	bne.n	8001d00 <HAL_RCC_OscConfig+0x18c>
 8001cc6:	4b46      	ldr	r3, [pc, #280]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d116      	bne.n	8001d00 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cd2:	4b43      	ldr	r3, [pc, #268]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d005      	beq.n	8001cea <HAL_RCC_OscConfig+0x176>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d001      	beq.n	8001cea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e1ba      	b.n	8002060 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cea:	4b3d      	ldr	r3, [pc, #244]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	4939      	ldr	r1, [pc, #228]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cfe:	e03a      	b.n	8001d76 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d020      	beq.n	8001d4a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d08:	4b36      	ldr	r3, [pc, #216]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0e:	f7ff fc83 	bl	8001618 <HAL_GetTick>
 8001d12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d16:	f7ff fc7f 	bl	8001618 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e19b      	b.n	8002060 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d28:	4b2d      	ldr	r3, [pc, #180]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d0f0      	beq.n	8001d16 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d34:	4b2a      	ldr	r3, [pc, #168]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	4927      	ldr	r1, [pc, #156]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	600b      	str	r3, [r1, #0]
 8001d48:	e015      	b.n	8001d76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d4a:	4b26      	ldr	r3, [pc, #152]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d50:	f7ff fc62 	bl	8001618 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d58:	f7ff fc5e 	bl	8001618 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e17a      	b.n	8002060 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d6a:	4b1d      	ldr	r3, [pc, #116]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f0      	bne.n	8001d58 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d03a      	beq.n	8001df8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d019      	beq.n	8001dbe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d8a:	4b17      	ldr	r3, [pc, #92]	; (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d90:	f7ff fc42 	bl	8001618 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d98:	f7ff fc3e 	bl	8001618 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e15a      	b.n	8002060 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001daa:	4b0d      	ldr	r3, [pc, #52]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0f0      	beq.n	8001d98 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001db6:	2001      	movs	r0, #1
 8001db8:	f000 faa6 	bl	8002308 <RCC_Delay>
 8001dbc:	e01c      	b.n	8001df8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dbe:	4b0a      	ldr	r3, [pc, #40]	; (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc4:	f7ff fc28 	bl	8001618 <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dca:	e00f      	b.n	8001dec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dcc:	f7ff fc24 	bl	8001618 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d908      	bls.n	8001dec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e140      	b.n	8002060 <HAL_RCC_OscConfig+0x4ec>
 8001dde:	bf00      	nop
 8001de0:	40021000 	.word	0x40021000
 8001de4:	42420000 	.word	0x42420000
 8001de8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dec:	4b9e      	ldr	r3, [pc, #632]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1e9      	bne.n	8001dcc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f000 80a6 	beq.w	8001f52 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e06:	2300      	movs	r3, #0
 8001e08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e0a:	4b97      	ldr	r3, [pc, #604]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d10d      	bne.n	8001e32 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e16:	4b94      	ldr	r3, [pc, #592]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	4a93      	ldr	r2, [pc, #588]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e20:	61d3      	str	r3, [r2, #28]
 8001e22:	4b91      	ldr	r3, [pc, #580]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2a:	60bb      	str	r3, [r7, #8]
 8001e2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e32:	4b8e      	ldr	r3, [pc, #568]	; (800206c <HAL_RCC_OscConfig+0x4f8>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d118      	bne.n	8001e70 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e3e:	4b8b      	ldr	r3, [pc, #556]	; (800206c <HAL_RCC_OscConfig+0x4f8>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a8a      	ldr	r2, [pc, #552]	; (800206c <HAL_RCC_OscConfig+0x4f8>)
 8001e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e4a:	f7ff fbe5 	bl	8001618 <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e52:	f7ff fbe1 	bl	8001618 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b64      	cmp	r3, #100	; 0x64
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e0fd      	b.n	8002060 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e64:	4b81      	ldr	r3, [pc, #516]	; (800206c <HAL_RCC_OscConfig+0x4f8>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0f0      	beq.n	8001e52 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d106      	bne.n	8001e86 <HAL_RCC_OscConfig+0x312>
 8001e78:	4b7b      	ldr	r3, [pc, #492]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	4a7a      	ldr	r2, [pc, #488]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	6213      	str	r3, [r2, #32]
 8001e84:	e02d      	b.n	8001ee2 <HAL_RCC_OscConfig+0x36e>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10c      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x334>
 8001e8e:	4b76      	ldr	r3, [pc, #472]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001e90:	6a1b      	ldr	r3, [r3, #32]
 8001e92:	4a75      	ldr	r2, [pc, #468]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001e94:	f023 0301 	bic.w	r3, r3, #1
 8001e98:	6213      	str	r3, [r2, #32]
 8001e9a:	4b73      	ldr	r3, [pc, #460]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	4a72      	ldr	r2, [pc, #456]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001ea0:	f023 0304 	bic.w	r3, r3, #4
 8001ea4:	6213      	str	r3, [r2, #32]
 8001ea6:	e01c      	b.n	8001ee2 <HAL_RCC_OscConfig+0x36e>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	2b05      	cmp	r3, #5
 8001eae:	d10c      	bne.n	8001eca <HAL_RCC_OscConfig+0x356>
 8001eb0:	4b6d      	ldr	r3, [pc, #436]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	4a6c      	ldr	r2, [pc, #432]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001eb6:	f043 0304 	orr.w	r3, r3, #4
 8001eba:	6213      	str	r3, [r2, #32]
 8001ebc:	4b6a      	ldr	r3, [pc, #424]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	4a69      	ldr	r2, [pc, #420]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001ec2:	f043 0301 	orr.w	r3, r3, #1
 8001ec6:	6213      	str	r3, [r2, #32]
 8001ec8:	e00b      	b.n	8001ee2 <HAL_RCC_OscConfig+0x36e>
 8001eca:	4b67      	ldr	r3, [pc, #412]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
 8001ece:	4a66      	ldr	r2, [pc, #408]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001ed0:	f023 0301 	bic.w	r3, r3, #1
 8001ed4:	6213      	str	r3, [r2, #32]
 8001ed6:	4b64      	ldr	r3, [pc, #400]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	4a63      	ldr	r2, [pc, #396]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001edc:	f023 0304 	bic.w	r3, r3, #4
 8001ee0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d015      	beq.n	8001f16 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eea:	f7ff fb95 	bl	8001618 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef0:	e00a      	b.n	8001f08 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ef2:	f7ff fb91 	bl	8001618 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e0ab      	b.n	8002060 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f08:	4b57      	ldr	r3, [pc, #348]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d0ee      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x37e>
 8001f14:	e014      	b.n	8001f40 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f16:	f7ff fb7f 	bl	8001618 <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f1c:	e00a      	b.n	8001f34 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f1e:	f7ff fb7b 	bl	8001618 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e095      	b.n	8002060 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f34:	4b4c      	ldr	r3, [pc, #304]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1ee      	bne.n	8001f1e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f40:	7dfb      	ldrb	r3, [r7, #23]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d105      	bne.n	8001f52 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f46:	4b48      	ldr	r3, [pc, #288]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	4a47      	ldr	r2, [pc, #284]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001f4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f50:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f000 8081 	beq.w	800205e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f5c:	4b42      	ldr	r3, [pc, #264]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 030c 	and.w	r3, r3, #12
 8001f64:	2b08      	cmp	r3, #8
 8001f66:	d061      	beq.n	800202c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69db      	ldr	r3, [r3, #28]
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d146      	bne.n	8001ffe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f70:	4b3f      	ldr	r3, [pc, #252]	; (8002070 <HAL_RCC_OscConfig+0x4fc>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f76:	f7ff fb4f 	bl	8001618 <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f7e:	f7ff fb4b 	bl	8001618 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e067      	b.n	8002060 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f90:	4b35      	ldr	r3, [pc, #212]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1f0      	bne.n	8001f7e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fa4:	d108      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fa6:	4b30      	ldr	r3, [pc, #192]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	492d      	ldr	r1, [pc, #180]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fb8:	4b2b      	ldr	r3, [pc, #172]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a19      	ldr	r1, [r3, #32]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc8:	430b      	orrs	r3, r1
 8001fca:	4927      	ldr	r1, [pc, #156]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fd0:	4b27      	ldr	r3, [pc, #156]	; (8002070 <HAL_RCC_OscConfig+0x4fc>)
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd6:	f7ff fb1f 	bl	8001618 <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fde:	f7ff fb1b 	bl	8001618 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e037      	b.n	8002060 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ff0:	4b1d      	ldr	r3, [pc, #116]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d0f0      	beq.n	8001fde <HAL_RCC_OscConfig+0x46a>
 8001ffc:	e02f      	b.n	800205e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ffe:	4b1c      	ldr	r3, [pc, #112]	; (8002070 <HAL_RCC_OscConfig+0x4fc>)
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002004:	f7ff fb08 	bl	8001618 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800200c:	f7ff fb04 	bl	8001618 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e020      	b.n	8002060 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800201e:	4b12      	ldr	r3, [pc, #72]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1f0      	bne.n	800200c <HAL_RCC_OscConfig+0x498>
 800202a:	e018      	b.n	800205e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	69db      	ldr	r3, [r3, #28]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d101      	bne.n	8002038 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e013      	b.n	8002060 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002038:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <HAL_RCC_OscConfig+0x4f4>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	429a      	cmp	r2, r3
 800204a:	d106      	bne.n	800205a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002056:	429a      	cmp	r2, r3
 8002058:	d001      	beq.n	800205e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e000      	b.n	8002060 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40021000 	.word	0x40021000
 800206c:	40007000 	.word	0x40007000
 8002070:	42420060 	.word	0x42420060

08002074 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e0d0      	b.n	800222a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002088:	4b6a      	ldr	r3, [pc, #424]	; (8002234 <HAL_RCC_ClockConfig+0x1c0>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	429a      	cmp	r2, r3
 8002094:	d910      	bls.n	80020b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002096:	4b67      	ldr	r3, [pc, #412]	; (8002234 <HAL_RCC_ClockConfig+0x1c0>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f023 0207 	bic.w	r2, r3, #7
 800209e:	4965      	ldr	r1, [pc, #404]	; (8002234 <HAL_RCC_ClockConfig+0x1c0>)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a6:	4b63      	ldr	r3, [pc, #396]	; (8002234 <HAL_RCC_ClockConfig+0x1c0>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d001      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e0b8      	b.n	800222a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d020      	beq.n	8002106 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020d0:	4b59      	ldr	r3, [pc, #356]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	4a58      	ldr	r2, [pc, #352]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 80020d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d005      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020e8:	4b53      	ldr	r3, [pc, #332]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	4a52      	ldr	r2, [pc, #328]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 80020ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f4:	4b50      	ldr	r3, [pc, #320]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	494d      	ldr	r1, [pc, #308]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 8002102:	4313      	orrs	r3, r2
 8002104:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b00      	cmp	r3, #0
 8002110:	d040      	beq.n	8002194 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d107      	bne.n	800212a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800211a:	4b47      	ldr	r3, [pc, #284]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d115      	bne.n	8002152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e07f      	b.n	800222a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b02      	cmp	r3, #2
 8002130:	d107      	bne.n	8002142 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002132:	4b41      	ldr	r3, [pc, #260]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d109      	bne.n	8002152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e073      	b.n	800222a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002142:	4b3d      	ldr	r3, [pc, #244]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e06b      	b.n	800222a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002152:	4b39      	ldr	r3, [pc, #228]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f023 0203 	bic.w	r2, r3, #3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	4936      	ldr	r1, [pc, #216]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 8002160:	4313      	orrs	r3, r2
 8002162:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002164:	f7ff fa58 	bl	8001618 <HAL_GetTick>
 8002168:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800216a:	e00a      	b.n	8002182 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800216c:	f7ff fa54 	bl	8001618 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	f241 3288 	movw	r2, #5000	; 0x1388
 800217a:	4293      	cmp	r3, r2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e053      	b.n	800222a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002182:	4b2d      	ldr	r3, [pc, #180]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f003 020c 	and.w	r2, r3, #12
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	429a      	cmp	r2, r3
 8002192:	d1eb      	bne.n	800216c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002194:	4b27      	ldr	r3, [pc, #156]	; (8002234 <HAL_RCC_ClockConfig+0x1c0>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0307 	and.w	r3, r3, #7
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d210      	bcs.n	80021c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021a2:	4b24      	ldr	r3, [pc, #144]	; (8002234 <HAL_RCC_ClockConfig+0x1c0>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f023 0207 	bic.w	r2, r3, #7
 80021aa:	4922      	ldr	r1, [pc, #136]	; (8002234 <HAL_RCC_ClockConfig+0x1c0>)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021b2:	4b20      	ldr	r3, [pc, #128]	; (8002234 <HAL_RCC_ClockConfig+0x1c0>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d001      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e032      	b.n	800222a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0304 	and.w	r3, r3, #4
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d008      	beq.n	80021e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021d0:	4b19      	ldr	r3, [pc, #100]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	4916      	ldr	r1, [pc, #88]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0308 	and.w	r3, r3, #8
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d009      	beq.n	8002202 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021ee:	4b12      	ldr	r3, [pc, #72]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	490e      	ldr	r1, [pc, #56]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002202:	f000 f821 	bl	8002248 <HAL_RCC_GetSysClockFreq>
 8002206:	4602      	mov	r2, r0
 8002208:	4b0b      	ldr	r3, [pc, #44]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	091b      	lsrs	r3, r3, #4
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	490a      	ldr	r1, [pc, #40]	; (800223c <HAL_RCC_ClockConfig+0x1c8>)
 8002214:	5ccb      	ldrb	r3, [r1, r3]
 8002216:	fa22 f303 	lsr.w	r3, r2, r3
 800221a:	4a09      	ldr	r2, [pc, #36]	; (8002240 <HAL_RCC_ClockConfig+0x1cc>)
 800221c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800221e:	4b09      	ldr	r3, [pc, #36]	; (8002244 <HAL_RCC_ClockConfig+0x1d0>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff f9b6 	bl	8001594 <HAL_InitTick>

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40022000 	.word	0x40022000
 8002238:	40021000 	.word	0x40021000
 800223c:	08002c34 	.word	0x08002c34
 8002240:	20000018 	.word	0x20000018
 8002244:	2000001c 	.word	0x2000001c

08002248 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002248:	b490      	push	{r4, r7}
 800224a:	b08a      	sub	sp, #40	; 0x28
 800224c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800224e:	4b2a      	ldr	r3, [pc, #168]	; (80022f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002250:	1d3c      	adds	r4, r7, #4
 8002252:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002254:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002258:	f240 2301 	movw	r3, #513	; 0x201
 800225c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800225e:	2300      	movs	r3, #0
 8002260:	61fb      	str	r3, [r7, #28]
 8002262:	2300      	movs	r3, #0
 8002264:	61bb      	str	r3, [r7, #24]
 8002266:	2300      	movs	r3, #0
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
 800226a:	2300      	movs	r3, #0
 800226c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800226e:	2300      	movs	r3, #0
 8002270:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002272:	4b22      	ldr	r3, [pc, #136]	; (80022fc <HAL_RCC_GetSysClockFreq+0xb4>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	f003 030c 	and.w	r3, r3, #12
 800227e:	2b04      	cmp	r3, #4
 8002280:	d002      	beq.n	8002288 <HAL_RCC_GetSysClockFreq+0x40>
 8002282:	2b08      	cmp	r3, #8
 8002284:	d003      	beq.n	800228e <HAL_RCC_GetSysClockFreq+0x46>
 8002286:	e02d      	b.n	80022e4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002288:	4b1d      	ldr	r3, [pc, #116]	; (8002300 <HAL_RCC_GetSysClockFreq+0xb8>)
 800228a:	623b      	str	r3, [r7, #32]
      break;
 800228c:	e02d      	b.n	80022ea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	0c9b      	lsrs	r3, r3, #18
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800229a:	4413      	add	r3, r2
 800229c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80022a0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d013      	beq.n	80022d4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022ac:	4b13      	ldr	r3, [pc, #76]	; (80022fc <HAL_RCC_GetSysClockFreq+0xb4>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	0c5b      	lsrs	r3, r3, #17
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022ba:	4413      	add	r3, r2
 80022bc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80022c0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	4a0e      	ldr	r2, [pc, #56]	; (8002300 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022c6:	fb02 f203 	mul.w	r2, r2, r3
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
 80022d2:	e004      	b.n	80022de <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	4a0b      	ldr	r2, [pc, #44]	; (8002304 <HAL_RCC_GetSysClockFreq+0xbc>)
 80022d8:	fb02 f303 	mul.w	r3, r2, r3
 80022dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80022de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e0:	623b      	str	r3, [r7, #32]
      break;
 80022e2:	e002      	b.n	80022ea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022e4:	4b06      	ldr	r3, [pc, #24]	; (8002300 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022e6:	623b      	str	r3, [r7, #32]
      break;
 80022e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022ea:	6a3b      	ldr	r3, [r7, #32]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3728      	adds	r7, #40	; 0x28
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc90      	pop	{r4, r7}
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	08002890 	.word	0x08002890
 80022fc:	40021000 	.word	0x40021000
 8002300:	007a1200 	.word	0x007a1200
 8002304:	003d0900 	.word	0x003d0900

08002308 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002310:	4b0a      	ldr	r3, [pc, #40]	; (800233c <RCC_Delay+0x34>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a0a      	ldr	r2, [pc, #40]	; (8002340 <RCC_Delay+0x38>)
 8002316:	fba2 2303 	umull	r2, r3, r2, r3
 800231a:	0a5b      	lsrs	r3, r3, #9
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	fb02 f303 	mul.w	r3, r2, r3
 8002322:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002324:	bf00      	nop
  }
  while (Delay --);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	1e5a      	subs	r2, r3, #1
 800232a:	60fa      	str	r2, [r7, #12]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1f9      	bne.n	8002324 <RCC_Delay+0x1c>
}
 8002330:	bf00      	nop
 8002332:	bf00      	nop
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr
 800233c:	20000018 	.word	0x20000018
 8002340:	10624dd3 	.word	0x10624dd3

08002344 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e076      	b.n	8002444 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	2b00      	cmp	r3, #0
 800235c:	d108      	bne.n	8002370 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002366:	d009      	beq.n	800237c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	61da      	str	r2, [r3, #28]
 800236e:	e005      	b.n	800237c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d106      	bne.n	800239c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7ff f848 	bl	800142c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2202      	movs	r2, #2
 80023a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80023c4:	431a      	orrs	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023ce:	431a      	orrs	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	431a      	orrs	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	431a      	orrs	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023ec:	431a      	orrs	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002400:	ea42 0103 	orr.w	r1, r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002408:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	430a      	orrs	r2, r1
 8002412:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	0c1a      	lsrs	r2, r3, #16
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f002 0204 	and.w	r2, r2, #4
 8002422:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	69da      	ldr	r2, [r3, #28]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002432:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b088      	sub	sp, #32
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	603b      	str	r3, [r7, #0]
 8002458:	4613      	mov	r3, r2
 800245a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800245c:	2300      	movs	r3, #0
 800245e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002466:	2b01      	cmp	r3, #1
 8002468:	d101      	bne.n	800246e <HAL_SPI_Transmit+0x22>
 800246a:	2302      	movs	r3, #2
 800246c:	e126      	b.n	80026bc <HAL_SPI_Transmit+0x270>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2201      	movs	r2, #1
 8002472:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002476:	f7ff f8cf 	bl	8001618 <HAL_GetTick>
 800247a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800247c:	88fb      	ldrh	r3, [r7, #6]
 800247e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002486:	b2db      	uxtb	r3, r3
 8002488:	2b01      	cmp	r3, #1
 800248a:	d002      	beq.n	8002492 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800248c:	2302      	movs	r3, #2
 800248e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002490:	e10b      	b.n	80026aa <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d002      	beq.n	800249e <HAL_SPI_Transmit+0x52>
 8002498:	88fb      	ldrh	r3, [r7, #6]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d102      	bne.n	80024a4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80024a2:	e102      	b.n	80026aa <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2203      	movs	r2, #3
 80024a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	68ba      	ldr	r2, [r7, #8]
 80024b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	88fa      	ldrh	r2, [r7, #6]
 80024bc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	88fa      	ldrh	r2, [r7, #6]
 80024c2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2200      	movs	r2, #0
 80024da:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024ea:	d10f      	bne.n	800250c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024fa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800250a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002516:	2b40      	cmp	r3, #64	; 0x40
 8002518:	d007      	beq.n	800252a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002528:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002532:	d14b      	bne.n	80025cc <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d002      	beq.n	8002542 <HAL_SPI_Transmit+0xf6>
 800253c:	8afb      	ldrh	r3, [r7, #22]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d13e      	bne.n	80025c0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	881a      	ldrh	r2, [r3, #0]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	1c9a      	adds	r2, r3, #2
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800255c:	b29b      	uxth	r3, r3
 800255e:	3b01      	subs	r3, #1
 8002560:	b29a      	uxth	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002566:	e02b      	b.n	80025c0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b02      	cmp	r3, #2
 8002574:	d112      	bne.n	800259c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	881a      	ldrh	r2, [r3, #0]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	1c9a      	adds	r2, r3, #2
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002590:	b29b      	uxth	r3, r3
 8002592:	3b01      	subs	r3, #1
 8002594:	b29a      	uxth	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	86da      	strh	r2, [r3, #54]	; 0x36
 800259a:	e011      	b.n	80025c0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800259c:	f7ff f83c 	bl	8001618 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d803      	bhi.n	80025b4 <HAL_SPI_Transmit+0x168>
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b2:	d102      	bne.n	80025ba <HAL_SPI_Transmit+0x16e>
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d102      	bne.n	80025c0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80025be:	e074      	b.n	80026aa <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1ce      	bne.n	8002568 <HAL_SPI_Transmit+0x11c>
 80025ca:	e04c      	b.n	8002666 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d002      	beq.n	80025da <HAL_SPI_Transmit+0x18e>
 80025d4:	8afb      	ldrh	r3, [r7, #22]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d140      	bne.n	800265c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	330c      	adds	r3, #12
 80025e4:	7812      	ldrb	r2, [r2, #0]
 80025e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ec:	1c5a      	adds	r2, r3, #1
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002600:	e02c      	b.n	800265c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b02      	cmp	r3, #2
 800260e:	d113      	bne.n	8002638 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	330c      	adds	r3, #12
 800261a:	7812      	ldrb	r2, [r2, #0]
 800261c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002622:	1c5a      	adds	r2, r3, #1
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800262c:	b29b      	uxth	r3, r3
 800262e:	3b01      	subs	r3, #1
 8002630:	b29a      	uxth	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	86da      	strh	r2, [r3, #54]	; 0x36
 8002636:	e011      	b.n	800265c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002638:	f7fe ffee 	bl	8001618 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	429a      	cmp	r2, r3
 8002646:	d803      	bhi.n	8002650 <HAL_SPI_Transmit+0x204>
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800264e:	d102      	bne.n	8002656 <HAL_SPI_Transmit+0x20a>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d102      	bne.n	800265c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	77fb      	strb	r3, [r7, #31]
          goto error;
 800265a:	e026      	b.n	80026aa <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002660:	b29b      	uxth	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1cd      	bne.n	8002602 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	6839      	ldr	r1, [r7, #0]
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f000 f8b2 	bl	80027d4 <SPI_EndRxTxTransaction>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d002      	beq.n	800267c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2220      	movs	r2, #32
 800267a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10a      	bne.n	800269a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002684:	2300      	movs	r3, #0
 8002686:	613b      	str	r3, [r7, #16]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	613b      	str	r3, [r7, #16]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	613b      	str	r3, [r7, #16]
 8002698:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d002      	beq.n	80026a8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	77fb      	strb	r3, [r7, #31]
 80026a6:	e000      	b.n	80026aa <HAL_SPI_Transmit+0x25e>
  }

error:
 80026a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2201      	movs	r2, #1
 80026ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80026ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3720      	adds	r7, #32
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b088      	sub	sp, #32
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	603b      	str	r3, [r7, #0]
 80026d0:	4613      	mov	r3, r2
 80026d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80026d4:	f7fe ffa0 	bl	8001618 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026dc:	1a9b      	subs	r3, r3, r2
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	4413      	add	r3, r2
 80026e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80026e4:	f7fe ff98 	bl	8001618 <HAL_GetTick>
 80026e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80026ea:	4b39      	ldr	r3, [pc, #228]	; (80027d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	015b      	lsls	r3, r3, #5
 80026f0:	0d1b      	lsrs	r3, r3, #20
 80026f2:	69fa      	ldr	r2, [r7, #28]
 80026f4:	fb02 f303 	mul.w	r3, r2, r3
 80026f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026fa:	e054      	b.n	80027a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002702:	d050      	beq.n	80027a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002704:	f7fe ff88 	bl	8001618 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	69fa      	ldr	r2, [r7, #28]
 8002710:	429a      	cmp	r2, r3
 8002712:	d902      	bls.n	800271a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d13d      	bne.n	8002796 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002728:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002732:	d111      	bne.n	8002758 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800273c:	d004      	beq.n	8002748 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002746:	d107      	bne.n	8002758 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002756:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002760:	d10f      	bne.n	8002782 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002780:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e017      	b.n	80027c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800279c:	2300      	movs	r3, #0
 800279e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	3b01      	subs	r3, #1
 80027a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	4013      	ands	r3, r2
 80027b0:	68ba      	ldr	r2, [r7, #8]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	bf0c      	ite	eq
 80027b6:	2301      	moveq	r3, #1
 80027b8:	2300      	movne	r3, #0
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	461a      	mov	r2, r3
 80027be:	79fb      	ldrb	r3, [r7, #7]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d19b      	bne.n	80026fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3720      	adds	r7, #32
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20000018 	.word	0x20000018

080027d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af02      	add	r7, sp, #8
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	2200      	movs	r2, #0
 80027e8:	2180      	movs	r1, #128	; 0x80
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f7ff ff6a 	bl	80026c4 <SPI_WaitFlagStateUntilTimeout>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d007      	beq.n	8002806 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fa:	f043 0220 	orr.w	r2, r3, #32
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e000      	b.n	8002808 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <__libc_init_array>:
 8002810:	b570      	push	{r4, r5, r6, lr}
 8002812:	2600      	movs	r6, #0
 8002814:	4d0c      	ldr	r5, [pc, #48]	; (8002848 <__libc_init_array+0x38>)
 8002816:	4c0d      	ldr	r4, [pc, #52]	; (800284c <__libc_init_array+0x3c>)
 8002818:	1b64      	subs	r4, r4, r5
 800281a:	10a4      	asrs	r4, r4, #2
 800281c:	42a6      	cmp	r6, r4
 800281e:	d109      	bne.n	8002834 <__libc_init_array+0x24>
 8002820:	f000 f822 	bl	8002868 <_init>
 8002824:	2600      	movs	r6, #0
 8002826:	4d0a      	ldr	r5, [pc, #40]	; (8002850 <__libc_init_array+0x40>)
 8002828:	4c0a      	ldr	r4, [pc, #40]	; (8002854 <__libc_init_array+0x44>)
 800282a:	1b64      	subs	r4, r4, r5
 800282c:	10a4      	asrs	r4, r4, #2
 800282e:	42a6      	cmp	r6, r4
 8002830:	d105      	bne.n	800283e <__libc_init_array+0x2e>
 8002832:	bd70      	pop	{r4, r5, r6, pc}
 8002834:	f855 3b04 	ldr.w	r3, [r5], #4
 8002838:	4798      	blx	r3
 800283a:	3601      	adds	r6, #1
 800283c:	e7ee      	b.n	800281c <__libc_init_array+0xc>
 800283e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002842:	4798      	blx	r3
 8002844:	3601      	adds	r6, #1
 8002846:	e7f2      	b.n	800282e <__libc_init_array+0x1e>
 8002848:	08002d48 	.word	0x08002d48
 800284c:	08002d48 	.word	0x08002d48
 8002850:	08002d48 	.word	0x08002d48
 8002854:	08002d4c 	.word	0x08002d4c

08002858 <memset>:
 8002858:	4603      	mov	r3, r0
 800285a:	4402      	add	r2, r0
 800285c:	4293      	cmp	r3, r2
 800285e:	d100      	bne.n	8002862 <memset+0xa>
 8002860:	4770      	bx	lr
 8002862:	f803 1b01 	strb.w	r1, [r3], #1
 8002866:	e7f9      	b.n	800285c <memset+0x4>

08002868 <_init>:
 8002868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800286a:	bf00      	nop
 800286c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800286e:	bc08      	pop	{r3}
 8002870:	469e      	mov	lr, r3
 8002872:	4770      	bx	lr

08002874 <_fini>:
 8002874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002876:	bf00      	nop
 8002878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800287a:	bc08      	pop	{r3}
 800287c:	469e      	mov	lr, r3
 800287e:	4770      	bx	lr
