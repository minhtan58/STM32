
SPI2_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002aec  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002d84  08002d84  00012d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002d94  08002d94  00012d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002d98  08002d98  00012d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08002d9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000130  20000010  08002dac  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000140  08002dac  00020140  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00012387  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002024  00000000  00000000  000323c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000978  00000000  00000000  000343f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008b0  00000000  00000000  00034d68  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003d520  00000000  00000000  00035618  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00009746  00000000  00000000  00072b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0018e4f8  00000000  00000000  0007c27e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  0020a776  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000025b4  00000000  00000000  0020a7f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000010 	.word	0x20000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08002d6c 	.word	0x08002d6c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000014 	.word	0x20000014
 80002d4:	08002d6c 	.word	0x08002d6c

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3f      	ldr	r3, [pc, #252]	; (80003dc <SystemInit+0x104>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3e      	ldr	r2, [pc, #248]	; (80003dc <SystemInit+0x104>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b3b      	ldr	r3, [pc, #236]	; (80003dc <SystemInit+0x104>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a3a      	ldr	r2, [pc, #232]	; (80003dc <SystemInit+0x104>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b39      	ldr	r3, [pc, #228]	; (80003e0 <SystemInit+0x108>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b36      	ldr	r3, [pc, #216]	; (80003e0 <SystemInit+0x108>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a34      	ldr	r2, [pc, #208]	; (80003e0 <SystemInit+0x108>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b33      	ldr	r3, [pc, #204]	; (80003e4 <SystemInit+0x10c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a32      	ldr	r2, [pc, #200]	; (80003e4 <SystemInit+0x10c>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b30      	ldr	r3, [pc, #192]	; (80003e4 <SystemInit+0x10c>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2f      	ldr	r3, [pc, #188]	; (80003e4 <SystemInit+0x10c>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492e      	ldr	r1, [pc, #184]	; (80003e4 <SystemInit+0x10c>)
 800032c:	4b2e      	ldr	r3, [pc, #184]	; (80003e8 <SystemInit+0x110>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b2b      	ldr	r3, [pc, #172]	; (80003e0 <SystemInit+0x108>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 030f 	and.w	r3, r3, #15
 800033a:	2b07      	cmp	r3, #7
 800033c:	d907      	bls.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <SystemInit+0x108>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a26      	ldr	r2, [pc, #152]	; (80003e0 <SystemInit+0x108>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b25      	ldr	r3, [pc, #148]	; (80003e4 <SystemInit+0x10c>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b23      	ldr	r3, [pc, #140]	; (80003e4 <SystemInit+0x10c>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b22      	ldr	r3, [pc, #136]	; (80003e4 <SystemInit+0x10c>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b20      	ldr	r3, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000362:	4a22      	ldr	r2, [pc, #136]	; (80003ec <SystemInit+0x114>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1f      	ldr	r3, [pc, #124]	; (80003e4 <SystemInit+0x10c>)
 8000368:	4a21      	ldr	r2, [pc, #132]	; (80003f0 <SystemInit+0x118>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <SystemInit+0x10c>)
 800036e:	4a21      	ldr	r2, [pc, #132]	; (80003f4 <SystemInit+0x11c>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1c      	ldr	r3, [pc, #112]	; (80003e4 <SystemInit+0x10c>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <SystemInit+0x10c>)
 800037a:	4a1e      	ldr	r2, [pc, #120]	; (80003f4 <SystemInit+0x11c>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b19      	ldr	r3, [pc, #100]	; (80003e4 <SystemInit+0x10c>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <SystemInit+0x10c>)
 8000386:	4a1b      	ldr	r2, [pc, #108]	; (80003f4 <SystemInit+0x11c>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b16      	ldr	r3, [pc, #88]	; (80003e4 <SystemInit+0x10c>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <SystemInit+0x10c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a13      	ldr	r2, [pc, #76]	; (80003e4 <SystemInit+0x10c>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <SystemInit+0x10c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <SystemInit+0x120>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a14      	ldr	r2, [pc, #80]	; (80003f8 <SystemInit+0x120>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b13      	ldr	r3, [pc, #76]	; (80003fc <SystemInit+0x124>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b13      	ldr	r3, [pc, #76]	; (8000400 <SystemInit+0x128>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <SystemInit+0x12c>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <SystemInit+0x130>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80003ca:	4b04      	ldr	r3, [pc, #16]	; (80003dc <SystemInit+0x104>)
 80003cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003d0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	e000ed00 	.word	0xe000ed00
 80003e0:	52002000 	.word	0x52002000
 80003e4:	58024400 	.word	0x58024400
 80003e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80003ec:	02020200 	.word	0x02020200
 80003f0:	01ff0000 	.word	0x01ff0000
 80003f4:	01010280 	.word	0x01010280
 80003f8:	580000c0 	.word	0x580000c0
 80003fc:	5c001000 	.word	0x5c001000
 8000400:	ffff0000 	.word	0xffff0000
 8000404:	51008108 	.word	0x51008108
 8000408:	52004000 	.word	0x52004000

0800040c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000412:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000416:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000418:	bf00      	nop
 800041a:	4b22      	ldr	r3, [pc, #136]	; (80004a4 <main+0x98>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000422:	2b00      	cmp	r3, #0
 8000424:	d004      	beq.n	8000430 <main+0x24>
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	1e5a      	subs	r2, r3, #1
 800042a:	607a      	str	r2, [r7, #4]
 800042c:	2b00      	cmp	r3, #0
 800042e:	dcf4      	bgt.n	800041a <main+0xe>
  if ( timeout < 0 )
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	2b00      	cmp	r3, #0
 8000434:	da01      	bge.n	800043a <main+0x2e>
  {
  Error_Handler();
 8000436:	f000 f9bd 	bl	80007b4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800043a:	f000 fb1f 	bl	8000a7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800043e:	f000 f833 	bl	80004a8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000442:	4b18      	ldr	r3, [pc, #96]	; (80004a4 <main+0x98>)
 8000444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000448:	4a16      	ldr	r2, [pc, #88]	; (80004a4 <main+0x98>)
 800044a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800044e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000452:	4b14      	ldr	r3, [pc, #80]	; (80004a4 <main+0x98>)
 8000454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800045c:	603b      	str	r3, [r7, #0]
 800045e:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000460:	2000      	movs	r0, #0
 8000462:	f001 f8c7 	bl	80015f4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000466:	2100      	movs	r1, #0
 8000468:	2000      	movs	r0, #0
 800046a:	f001 f8dd 	bl	8001628 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800046e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000472:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000474:	bf00      	nop
 8000476:	4b0b      	ldr	r3, [pc, #44]	; (80004a4 <main+0x98>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800047e:	2b00      	cmp	r3, #0
 8000480:	d104      	bne.n	800048c <main+0x80>
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	1e5a      	subs	r2, r3, #1
 8000486:	607a      	str	r2, [r7, #4]
 8000488:	2b00      	cmp	r3, #0
 800048a:	dcf4      	bgt.n	8000476 <main+0x6a>
if ( timeout < 0 )
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	2b00      	cmp	r3, #0
 8000490:	da01      	bge.n	8000496 <main+0x8a>
{
Error_Handler();
 8000492:	f000 f98f 	bl	80007b4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000496:	f000 f92b 	bl	80006f0 <MX_GPIO_Init>
  MX_SPI2_Init();
 800049a:	f000 f883 	bl	80005a4 <MX_SPI2_Init>
  MX_SPI5_Init();
 800049e:	f000 f8d7 	bl	8000650 <MX_SPI5_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004a2:	e7fe      	b.n	80004a2 <main+0x96>
 80004a4:	58024400 	.word	0x58024400

080004a8 <SystemClock_Config>:
//    Error_Handler();
//  }
//}

void SystemClock_Config(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b09e      	sub	sp, #120	; 0x78
 80004ac:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 80004ae:	2300      	movs	r3, #0
 80004b0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80004b4:	2004      	movs	r0, #4
 80004b6:	f001 f8cb 	bl	8001650 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004ba:	2300      	movs	r3, #0
 80004bc:	607b      	str	r3, [r7, #4]
 80004be:	4b37      	ldr	r3, [pc, #220]	; (800059c <SystemClock_Config+0xf4>)
 80004c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004c2:	4a36      	ldr	r2, [pc, #216]	; (800059c <SystemClock_Config+0xf4>)
 80004c4:	f023 0301 	bic.w	r3, r3, #1
 80004c8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80004ca:	4b34      	ldr	r3, [pc, #208]	; (800059c <SystemClock_Config+0xf4>)
 80004cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004ce:	f003 0301 	and.w	r3, r3, #1
 80004d2:	607b      	str	r3, [r7, #4]
 80004d4:	4b32      	ldr	r3, [pc, #200]	; (80005a0 <SystemClock_Config+0xf8>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	4a31      	ldr	r2, [pc, #196]	; (80005a0 <SystemClock_Config+0xf8>)
 80004da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80004de:	6193      	str	r3, [r2, #24]
 80004e0:	4b2f      	ldr	r3, [pc, #188]	; (80005a0 <SystemClock_Config+0xf8>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80004e8:	607b      	str	r3, [r7, #4]
 80004ea:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004ec:	bf00      	nop
 80004ee:	4b2c      	ldr	r3, [pc, #176]	; (80005a0 <SystemClock_Config+0xf8>)
 80004f0:	699b      	ldr	r3, [r3, #24]
 80004f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004fa:	d1f8      	bne.n	80004ee <SystemClock_Config+0x46>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004fc:	2301      	movs	r3, #1
 80004fe:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000500:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000504:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000506:	2300      	movs	r3, #0
 8000508:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 800050a:	2300      	movs	r3, #0
 800050c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800050e:	2302      	movs	r3, #2
 8000510:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000512:	2302      	movs	r3, #2
 8000514:	633b      	str	r3, [r7, #48]	; 0x30

  RCC_OscInitStruct.PLL.PLLM = 5;
 8000516:	2305      	movs	r3, #5
 8000518:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 160;
 800051a:	23a0      	movs	r3, #160	; 0xa0
 800051c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800051e:	2300      	movs	r3, #0
 8000520:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000522:	2302      	movs	r3, #2
 8000524:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000526:	2302      	movs	r3, #2
 8000528:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800052a:	2304      	movs	r3, #4
 800052c:	643b      	str	r3, [r7, #64]	; 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800052e:	2300      	movs	r3, #0
 8000530:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000532:	2308      	movs	r3, #8
 8000534:	64bb      	str	r3, [r7, #72]	; 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000536:	f107 0308 	add.w	r3, r7, #8
 800053a:	4618      	mov	r0, r3
 800053c:	f001 f8e2 	bl	8001704 <HAL_RCC_OscConfig>
 8000540:	4603      	mov	r3, r0
 8000542:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 8000546:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800054e:	f000 f931 	bl	80007b4 <Error_Handler>
  }

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8000552:	233f      	movs	r3, #63	; 0x3f
 8000554:	657b      	str	r3, [r7, #84]	; 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000556:	2303      	movs	r3, #3
 8000558:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800055a:	2300      	movs	r3, #0
 800055c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800055e:	2308      	movs	r3, #8
 8000560:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000562:	2340      	movs	r3, #64	; 0x40
 8000564:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000566:	2340      	movs	r3, #64	; 0x40
 8000568:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800056a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800056e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000570:	2340      	movs	r3, #64	; 0x40
 8000572:	673b      	str	r3, [r7, #112]	; 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8000574:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000578:	2104      	movs	r1, #4
 800057a:	4618      	mov	r0, r3
 800057c:	f001 fcd2 	bl	8001f24 <HAL_RCC_ClockConfig>
 8000580:	4603      	mov	r3, r0
 8000582:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 8000586:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0xea>
  {
    Error_Handler();
 800058e:	f000 f911 	bl	80007b4 <Error_Handler>
  }
}
 8000592:	bf00      	nop
 8000594:	3778      	adds	r7, #120	; 0x78
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	58000400 	.word	0x58000400
 80005a0:	58024800 	.word	0x58024800

080005a4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  hspi2.Instance = SPI2;
 80005a8:	4b27      	ldr	r3, [pc, #156]	; (8000648 <MX_SPI2_Init+0xa4>)
 80005aa:	4a28      	ldr	r2, [pc, #160]	; (800064c <MX_SPI2_Init+0xa8>)
 80005ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80005ae:	4b26      	ldr	r3, [pc, #152]	; (8000648 <MX_SPI2_Init+0xa4>)
 80005b0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80005b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80005b6:	4b24      	ldr	r3, [pc, #144]	; (8000648 <MX_SPI2_Init+0xa4>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80005bc:	4b22      	ldr	r3, [pc, #136]	; (8000648 <MX_SPI2_Init+0xa4>)
 80005be:	2203      	movs	r2, #3
 80005c0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005c2:	4b21      	ldr	r3, [pc, #132]	; (8000648 <MX_SPI2_Init+0xa4>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005c8:	4b1f      	ldr	r3, [pc, #124]	; (8000648 <MX_SPI2_Init+0xa4>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80005ce:	4b1e      	ldr	r3, [pc, #120]	; (8000648 <MX_SPI2_Init+0xa4>)
 80005d0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80005d4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80005d6:	4b1c      	ldr	r3, [pc, #112]	; (8000648 <MX_SPI2_Init+0xa4>)
 80005d8:	2200      	movs	r2, #0
 80005da:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005dc:	4b1a      	ldr	r3, [pc, #104]	; (8000648 <MX_SPI2_Init+0xa4>)
 80005de:	2200      	movs	r2, #0
 80005e0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80005e2:	4b19      	ldr	r3, [pc, #100]	; (8000648 <MX_SPI2_Init+0xa4>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005e8:	4b17      	ldr	r3, [pc, #92]	; (8000648 <MX_SPI2_Init+0xa4>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80005ee:	4b16      	ldr	r3, [pc, #88]	; (8000648 <MX_SPI2_Init+0xa4>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80005f4:	4b14      	ldr	r3, [pc, #80]	; (8000648 <MX_SPI2_Init+0xa4>)
 80005f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005fa:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <MX_SPI2_Init+0xa4>)
 80005fe:	2200      	movs	r2, #0
 8000600:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000602:	4b11      	ldr	r3, [pc, #68]	; (8000648 <MX_SPI2_Init+0xa4>)
 8000604:	2200      	movs	r2, #0
 8000606:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000608:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <MX_SPI2_Init+0xa4>)
 800060a:	2200      	movs	r2, #0
 800060c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <MX_SPI2_Init+0xa4>)
 8000610:	2200      	movs	r2, #0
 8000612:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <MX_SPI2_Init+0xa4>)
 8000616:	2200      	movs	r2, #0
 8000618:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800061a:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <MX_SPI2_Init+0xa4>)
 800061c:	2200      	movs	r2, #0
 800061e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000620:	4b09      	ldr	r3, [pc, #36]	; (8000648 <MX_SPI2_Init+0xa4>)
 8000622:	2200      	movs	r2, #0
 8000624:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000626:	4b08      	ldr	r3, [pc, #32]	; (8000648 <MX_SPI2_Init+0xa4>)
 8000628:	2200      	movs	r2, #0
 800062a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <MX_SPI2_Init+0xa4>)
 800062e:	2200      	movs	r2, #0
 8000630:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000632:	4805      	ldr	r0, [pc, #20]	; (8000648 <MX_SPI2_Init+0xa4>)
 8000634:	f001 ff9e 	bl	8002574 <HAL_SPI_Init>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 800063e:	f000 f8b9 	bl	80007b4 <Error_Handler>
  }
}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	2000002c 	.word	0x2000002c
 800064c:	40003800 	.word	0x40003800

08000650 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  hspi5.Instance = SPI5;
 8000654:	4b24      	ldr	r3, [pc, #144]	; (80006e8 <MX_SPI5_Init+0x98>)
 8000656:	4a25      	ldr	r2, [pc, #148]	; (80006ec <MX_SPI5_Init+0x9c>)
 8000658:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_SLAVE;
 800065a:	4b23      	ldr	r3, [pc, #140]	; (80006e8 <MX_SPI5_Init+0x98>)
 800065c:	2200      	movs	r2, #0
 800065e:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000660:	4b21      	ldr	r3, [pc, #132]	; (80006e8 <MX_SPI5_Init+0x98>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 8000666:	4b20      	ldr	r3, [pc, #128]	; (80006e8 <MX_SPI5_Init+0x98>)
 8000668:	2203      	movs	r2, #3
 800066a:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800066c:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <MX_SPI5_Init+0x98>)
 800066e:	2200      	movs	r2, #0
 8000670:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000672:	4b1d      	ldr	r3, [pc, #116]	; (80006e8 <MX_SPI5_Init+0x98>)
 8000674:	2200      	movs	r2, #0
 8000676:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_INPUT;
 8000678:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <MX_SPI5_Init+0x98>)
 800067a:	2200      	movs	r2, #0
 800067c:	619a      	str	r2, [r3, #24]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800067e:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <MX_SPI5_Init+0x98>)
 8000680:	2200      	movs	r2, #0
 8000682:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000684:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <MX_SPI5_Init+0x98>)
 8000686:	2200      	movs	r2, #0
 8000688:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800068a:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <MX_SPI5_Init+0x98>)
 800068c:	2200      	movs	r2, #0
 800068e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8000690:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <MX_SPI5_Init+0x98>)
 8000692:	2200      	movs	r2, #0
 8000694:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000696:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <MX_SPI5_Init+0x98>)
 8000698:	2200      	movs	r2, #0
 800069a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <MX_SPI5_Init+0x98>)
 800069e:	2200      	movs	r2, #0
 80006a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80006a2:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <MX_SPI5_Init+0x98>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <MX_SPI5_Init+0x98>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <MX_SPI5_Init+0x98>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <MX_SPI5_Init+0x98>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80006ba:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <MX_SPI5_Init+0x98>)
 80006bc:	2200      	movs	r2, #0
 80006be:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80006c0:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_SPI5_Init+0x98>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80006c6:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <MX_SPI5_Init+0x98>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <MX_SPI5_Init+0x98>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80006d2:	4805      	ldr	r0, [pc, #20]	; (80006e8 <MX_SPI5_Init+0x98>)
 80006d4:	f001 ff4e 	bl	8002574 <HAL_SPI_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_SPI5_Init+0x92>
  {
    Error_Handler();
 80006de:	f000 f869 	bl	80007b4 <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	200000b4 	.word	0x200000b4
 80006ec:	40015000 	.word	0x40015000

080006f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08a      	sub	sp, #40	; 0x28
 80006f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	4b29      	ldr	r3, [pc, #164]	; (80007ac <MX_GPIO_Init+0xbc>)
 8000708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800070c:	4a27      	ldr	r2, [pc, #156]	; (80007ac <MX_GPIO_Init+0xbc>)
 800070e:	f043 0301 	orr.w	r3, r3, #1
 8000712:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000716:	4b25      	ldr	r3, [pc, #148]	; (80007ac <MX_GPIO_Init+0xbc>)
 8000718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800071c:	f003 0301 	and.w	r3, r3, #1
 8000720:	613b      	str	r3, [r7, #16]
 8000722:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000724:	4b21      	ldr	r3, [pc, #132]	; (80007ac <MX_GPIO_Init+0xbc>)
 8000726:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800072a:	4a20      	ldr	r2, [pc, #128]	; (80007ac <MX_GPIO_Init+0xbc>)
 800072c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000730:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000734:	4b1d      	ldr	r3, [pc, #116]	; (80007ac <MX_GPIO_Init+0xbc>)
 8000736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000742:	4b1a      	ldr	r3, [pc, #104]	; (80007ac <MX_GPIO_Init+0xbc>)
 8000744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000748:	4a18      	ldr	r2, [pc, #96]	; (80007ac <MX_GPIO_Init+0xbc>)
 800074a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800074e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000752:	4b16      	ldr	r3, [pc, #88]	; (80007ac <MX_GPIO_Init+0xbc>)
 8000754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000758:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000760:	4b12      	ldr	r3, [pc, #72]	; (80007ac <MX_GPIO_Init+0xbc>)
 8000762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000766:	4a11      	ldr	r2, [pc, #68]	; (80007ac <MX_GPIO_Init+0xbc>)
 8000768:	f043 0304 	orr.w	r3, r3, #4
 800076c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000770:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <MX_GPIO_Init+0xbc>)
 8000772:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000776:	f003 0304 	and.w	r3, r3, #4
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800077e:	2201      	movs	r2, #1
 8000780:	2102      	movs	r1, #2
 8000782:	480b      	ldr	r0, [pc, #44]	; (80007b0 <MX_GPIO_Init+0xc0>)
 8000784:	f000 ff1c 	bl	80015c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000788:	2302      	movs	r3, #2
 800078a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078c:	2301      	movs	r3, #1
 800078e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000794:	2303      	movs	r3, #3
 8000796:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	4619      	mov	r1, r3
 800079e:	4804      	ldr	r0, [pc, #16]	; (80007b0 <MX_GPIO_Init+0xc0>)
 80007a0:	f000 fd5e 	bl	8001260 <HAL_GPIO_Init>

}
 80007a4:	bf00      	nop
 80007a6:	3728      	adds	r7, #40	; 0x28
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	58024400 	.word	0x58024400
 80007b0:	58020800 	.word	0x58020800

080007b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
	...

080007c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ca:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <HAL_MspInit+0x30>)
 80007cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007d0:	4a08      	ldr	r2, [pc, #32]	; (80007f4 <HAL_MspInit+0x30>)
 80007d2:	f043 0302 	orr.w	r3, r3, #2
 80007d6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80007da:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <HAL_MspInit+0x30>)
 80007dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007e0:	f003 0302 	and.w	r3, r3, #2
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e8:	bf00      	nop
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	58024400 	.word	0x58024400

080007f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08e      	sub	sp, #56	; 0x38
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000800:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
 800080e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a5c      	ldr	r2, [pc, #368]	; (8000988 <HAL_SPI_MspInit+0x190>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d156      	bne.n	80008c8 <HAL_SPI_MspInit+0xd0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800081a:	4b5c      	ldr	r3, [pc, #368]	; (800098c <HAL_SPI_MspInit+0x194>)
 800081c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000820:	4a5a      	ldr	r2, [pc, #360]	; (800098c <HAL_SPI_MspInit+0x194>)
 8000822:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000826:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800082a:	4b58      	ldr	r3, [pc, #352]	; (800098c <HAL_SPI_MspInit+0x194>)
 800082c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000830:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000834:	623b      	str	r3, [r7, #32]
 8000836:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000838:	4b54      	ldr	r3, [pc, #336]	; (800098c <HAL_SPI_MspInit+0x194>)
 800083a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800083e:	4a53      	ldr	r2, [pc, #332]	; (800098c <HAL_SPI_MspInit+0x194>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000848:	4b50      	ldr	r3, [pc, #320]	; (800098c <HAL_SPI_MspInit+0x194>)
 800084a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	61fb      	str	r3, [r7, #28]
 8000854:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000856:	4b4d      	ldr	r3, [pc, #308]	; (800098c <HAL_SPI_MspInit+0x194>)
 8000858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800085c:	4a4b      	ldr	r2, [pc, #300]	; (800098c <HAL_SPI_MspInit+0x194>)
 800085e:	f043 0304 	orr.w	r3, r3, #4
 8000862:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000866:	4b49      	ldr	r3, [pc, #292]	; (800098c <HAL_SPI_MspInit+0x194>)
 8000868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800086c:	f003 0304 	and.w	r3, r3, #4
 8000870:	61bb      	str	r3, [r7, #24]
 8000872:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PA12     ------> SPI2_SCK
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000874:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087a:	2302      	movs	r3, #2
 800087c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000882:	2300      	movs	r3, #0
 8000884:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000886:	2305      	movs	r3, #5
 8000888:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800088e:	4619      	mov	r1, r3
 8000890:	483f      	ldr	r0, [pc, #252]	; (8000990 <HAL_SPI_MspInit+0x198>)
 8000892:	f000 fce5 	bl	8001260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000896:	230c      	movs	r3, #12
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089a:	2302      	movs	r3, #2
 800089c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008a6:	2305      	movs	r3, #5
 80008a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ae:	4619      	mov	r1, r3
 80008b0:	4838      	ldr	r0, [pc, #224]	; (8000994 <HAL_SPI_MspInit+0x19c>)
 80008b2:	f000 fcd5 	bl	8001260 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2100      	movs	r1, #0
 80008ba:	2024      	movs	r0, #36	; 0x24
 80008bc:	f000 fa57 	bl	8000d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80008c0:	2024      	movs	r0, #36	; 0x24
 80008c2:	f000 fa6e 	bl	8000da2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80008c6:	e05a      	b.n	800097e <HAL_SPI_MspInit+0x186>
  else if(hspi->Instance==SPI5)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a32      	ldr	r2, [pc, #200]	; (8000998 <HAL_SPI_MspInit+0x1a0>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d155      	bne.n	800097e <HAL_SPI_MspInit+0x186>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80008d2:	4b2e      	ldr	r3, [pc, #184]	; (800098c <HAL_SPI_MspInit+0x194>)
 80008d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80008d8:	4a2c      	ldr	r2, [pc, #176]	; (800098c <HAL_SPI_MspInit+0x194>)
 80008da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80008de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80008e2:	4b2a      	ldr	r3, [pc, #168]	; (800098c <HAL_SPI_MspInit+0x194>)
 80008e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80008e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80008ec:	617b      	str	r3, [r7, #20]
 80008ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80008f0:	4b26      	ldr	r3, [pc, #152]	; (800098c <HAL_SPI_MspInit+0x194>)
 80008f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f6:	4a25      	ldr	r2, [pc, #148]	; (800098c <HAL_SPI_MspInit+0x194>)
 80008f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000900:	4b22      	ldr	r3, [pc, #136]	; (800098c <HAL_SPI_MspInit+0x194>)
 8000902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800090e:	4b1f      	ldr	r3, [pc, #124]	; (800098c <HAL_SPI_MspInit+0x194>)
 8000910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000914:	4a1d      	ldr	r2, [pc, #116]	; (800098c <HAL_SPI_MspInit+0x194>)
 8000916:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800091a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800091e:	4b1b      	ldr	r3, [pc, #108]	; (800098c <HAL_SPI_MspInit+0x194>)
 8000920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000924:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800092c:	2303      	movs	r3, #3
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000930:	2302      	movs	r3, #2
 8000932:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	2300      	movs	r3, #0
 800093a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800093c:	2305      	movs	r3, #5
 800093e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000940:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000944:	4619      	mov	r1, r3
 8000946:	4815      	ldr	r0, [pc, #84]	; (800099c <HAL_SPI_MspInit+0x1a4>)
 8000948:	f000 fc8a 	bl	8001260 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 800094c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000952:	2302      	movs	r3, #2
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800095e:	2305      	movs	r3, #5
 8000960:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000966:	4619      	mov	r1, r3
 8000968:	480d      	ldr	r0, [pc, #52]	; (80009a0 <HAL_SPI_MspInit+0x1a8>)
 800096a:	f000 fc79 	bl	8001260 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI5_IRQn, 0, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	2100      	movs	r1, #0
 8000972:	2055      	movs	r0, #85	; 0x55
 8000974:	f000 f9fb 	bl	8000d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 8000978:	2055      	movs	r0, #85	; 0x55
 800097a:	f000 fa12 	bl	8000da2 <HAL_NVIC_EnableIRQ>
}
 800097e:	bf00      	nop
 8000980:	3738      	adds	r7, #56	; 0x38
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40003800 	.word	0x40003800
 800098c:	58024400 	.word	0x58024400
 8000990:	58020000 	.word	0x58020000
 8000994:	58020800 	.word	0x58020800
 8000998:	40015000 	.word	0x40015000
 800099c:	58022800 	.word	0x58022800
 80009a0:	58022400 	.word	0x58022400

080009a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <HardFault_Handler+0x4>

080009b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <MemManage_Handler+0x4>

080009be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <BusFault_Handler+0x4>

080009c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <UsageFault_Handler+0x4>

080009ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f8:	f000 f8b2 	bl	8000b60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000a04:	4802      	ldr	r0, [pc, #8]	; (8000a10 <SPI2_IRQHandler+0x10>)
 8000a06:	f001 fead 	bl	8002764 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	2000002c 	.word	0x2000002c

08000a14 <SPI5_IRQHandler>:

/**
  * @brief This function handles SPI5 global interrupt.
  */
void SPI5_IRQHandler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 8000a18:	4802      	ldr	r0, [pc, #8]	; (8000a24 <SPI5_IRQHandler+0x10>)
 8000a1a:	f001 fea3 	bl	8002764 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI5_IRQn 1 */

  /* USER CODE END SPI5_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	200000b4 	.word	0x200000b4

08000a28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a60 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a2c:	f7ff fc54 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a30:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a32:	e003      	b.n	8000a3c <LoopCopyDataInit>

08000a34 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a34:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8000a36:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a38:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a3a:	3104      	adds	r1, #4

08000a3c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a3c:	480a      	ldr	r0, [pc, #40]	; (8000a68 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8000a40:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a42:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a44:	d3f6      	bcc.n	8000a34 <CopyDataInit>
  ldr  r2, =_sbss
 8000a46:	4a0a      	ldr	r2, [pc, #40]	; (8000a70 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8000a48:	e002      	b.n	8000a50 <LoopFillZerobss>

08000a4a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a4a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a4c:	f842 3b04 	str.w	r3, [r2], #4

08000a50 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a50:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8000a52:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a54:	d3f9      	bcc.n	8000a4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a56:	f002 f965 	bl	8002d24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a5a:	f7ff fcd7 	bl	800040c <main>
  bx  lr    
 8000a5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a60:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000a64:	08002d9c 	.word	0x08002d9c
  ldr  r0, =_sdata
 8000a68:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a6c:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000a70:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000a74:	20000140 	.word	0x20000140

08000a78 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a78:	e7fe      	b.n	8000a78 <ADC3_IRQHandler>
	...

08000a7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a82:	2003      	movs	r0, #3
 8000a84:	f000 f968 	bl	8000d58 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000a88:	f001 fc02 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 8000a8c:	4601      	mov	r1, r0
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <HAL_Init+0x68>)
 8000a90:	699b      	ldr	r3, [r3, #24]
 8000a92:	0a1b      	lsrs	r3, r3, #8
 8000a94:	f003 030f 	and.w	r3, r3, #15
 8000a98:	4a13      	ldr	r2, [pc, #76]	; (8000ae8 <HAL_Init+0x6c>)
 8000a9a:	5cd3      	ldrb	r3, [r2, r3]
 8000a9c:	f003 031f 	and.w	r3, r3, #31
 8000aa0:	fa21 f303 	lsr.w	r3, r1, r3
 8000aa4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <HAL_Init+0x68>)
 8000aa8:	699b      	ldr	r3, [r3, #24]
 8000aaa:	f003 030f 	and.w	r3, r3, #15
 8000aae:	4a0e      	ldr	r2, [pc, #56]	; (8000ae8 <HAL_Init+0x6c>)
 8000ab0:	5cd3      	ldrb	r3, [r2, r3]
 8000ab2:	f003 031f 	and.w	r3, r3, #31
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8000abc:	4a0b      	ldr	r2, [pc, #44]	; (8000aec <HAL_Init+0x70>)
 8000abe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000ac0:	4a0b      	ldr	r2, [pc, #44]	; (8000af0 <HAL_Init+0x74>)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	f000 f814 	bl	8000af4 <HAL_InitTick>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e002      	b.n	8000adc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad6:	f7ff fe75 	bl	80007c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ada:	2300      	movs	r3, #0
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	58024400 	.word	0x58024400
 8000ae8:	08002d84 	.word	0x08002d84
 8000aec:	20000004 	.word	0x20000004
 8000af0:	20000000 	.word	0x20000000

08000af4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000afc:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <HAL_InitTick+0x60>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d101      	bne.n	8000b08 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000b04:	2301      	movs	r3, #1
 8000b06:	e021      	b.n	8000b4c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000b08:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <HAL_InitTick+0x64>)
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <HAL_InitTick+0x60>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	4619      	mov	r1, r3
 8000b12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f000 f94d 	bl	8000dbe <HAL_SYSTICK_Config>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e00e      	b.n	8000b4c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2b0f      	cmp	r3, #15
 8000b32:	d80a      	bhi.n	8000b4a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b34:	2200      	movs	r2, #0
 8000b36:	6879      	ldr	r1, [r7, #4]
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	f000 f917 	bl	8000d6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b40:	4a06      	ldr	r2, [pc, #24]	; (8000b5c <HAL_InitTick+0x68>)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b46:	2300      	movs	r3, #0
 8000b48:	e000      	b.n	8000b4c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	2000000c 	.word	0x2000000c
 8000b58:	20000000 	.word	0x20000000
 8000b5c:	20000008 	.word	0x20000008

08000b60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <HAL_IncTick+0x20>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_IncTick+0x24>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4413      	add	r3, r2
 8000b70:	4a04      	ldr	r2, [pc, #16]	; (8000b84 <HAL_IncTick+0x24>)
 8000b72:	6013      	str	r3, [r2, #0]
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	2000000c 	.word	0x2000000c
 8000b84:	2000013c 	.word	0x2000013c

08000b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b8c:	4b03      	ldr	r3, [pc, #12]	; (8000b9c <HAL_GetTick+0x14>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	2000013c 	.word	0x2000013c

08000ba0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000ba4:	4b03      	ldr	r3, [pc, #12]	; (8000bb4 <HAL_GetREVID+0x14>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	0c1b      	lsrs	r3, r3, #16
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	5c001000 	.word	0x5c001000

08000bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <__NVIC_SetPriorityGrouping+0x40>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bce:	68ba      	ldr	r2, [r7, #8]
 8000bd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <__NVIC_SetPriorityGrouping+0x44>)
 8000be2:	4313      	orrs	r3, r2
 8000be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000be6:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <__NVIC_SetPriorityGrouping+0x40>)
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	60d3      	str	r3, [r2, #12]
}
 8000bec:	bf00      	nop
 8000bee:	3714      	adds	r7, #20
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000ed00 	.word	0xe000ed00
 8000bfc:	05fa0000 	.word	0x05fa0000

08000c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c04:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <__NVIC_GetPriorityGrouping+0x18>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	0a1b      	lsrs	r3, r3, #8
 8000c0a:	f003 0307 	and.w	r3, r3, #7
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	db0b      	blt.n	8000c46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c2e:	88fb      	ldrh	r3, [r7, #6]
 8000c30:	f003 021f 	and.w	r2, r3, #31
 8000c34:	4907      	ldr	r1, [pc, #28]	; (8000c54 <__NVIC_EnableIRQ+0x38>)
 8000c36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c3a:	095b      	lsrs	r3, r3, #5
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000e100 	.word	0xe000e100

08000c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	6039      	str	r1, [r7, #0]
 8000c62:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	db0a      	blt.n	8000c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	490c      	ldr	r1, [pc, #48]	; (8000ca4 <__NVIC_SetPriority+0x4c>)
 8000c72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c76:	0112      	lsls	r2, r2, #4
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	440b      	add	r3, r1
 8000c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c80:	e00a      	b.n	8000c98 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4908      	ldr	r1, [pc, #32]	; (8000ca8 <__NVIC_SetPriority+0x50>)
 8000c88:	88fb      	ldrh	r3, [r7, #6]
 8000c8a:	f003 030f 	and.w	r3, r3, #15
 8000c8e:	3b04      	subs	r3, #4
 8000c90:	0112      	lsls	r2, r2, #4
 8000c92:	b2d2      	uxtb	r2, r2
 8000c94:	440b      	add	r3, r1
 8000c96:	761a      	strb	r2, [r3, #24]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000e100 	.word	0xe000e100
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b089      	sub	sp, #36	; 0x24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	f1c3 0307 	rsb	r3, r3, #7
 8000cc6:	2b04      	cmp	r3, #4
 8000cc8:	bf28      	it	cs
 8000cca:	2304      	movcs	r3, #4
 8000ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d902      	bls.n	8000cdc <NVIC_EncodePriority+0x30>
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3b03      	subs	r3, #3
 8000cda:	e000      	b.n	8000cde <NVIC_EncodePriority+0x32>
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43da      	mvns	r2, r3
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	401a      	ands	r2, r3
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfe:	43d9      	mvns	r1, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	4313      	orrs	r3, r2
         );
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3724      	adds	r7, #36	; 0x24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
	...

08000d14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d24:	d301      	bcc.n	8000d2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d26:	2301      	movs	r3, #1
 8000d28:	e00f      	b.n	8000d4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <SysTick_Config+0x40>)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d32:	210f      	movs	r1, #15
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295
 8000d38:	f7ff ff8e 	bl	8000c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d3c:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <SysTick_Config+0x40>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d42:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <SysTick_Config+0x40>)
 8000d44:	2207      	movs	r2, #7
 8000d46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	e000e010 	.word	0xe000e010

08000d58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f7ff ff29 	bl	8000bb8 <__NVIC_SetPriorityGrouping>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b086      	sub	sp, #24
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	4603      	mov	r3, r0
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607a      	str	r2, [r7, #4]
 8000d7a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d7c:	f7ff ff40 	bl	8000c00 <__NVIC_GetPriorityGrouping>
 8000d80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	68b9      	ldr	r1, [r7, #8]
 8000d86:	6978      	ldr	r0, [r7, #20]
 8000d88:	f7ff ff90 	bl	8000cac <NVIC_EncodePriority>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d92:	4611      	mov	r1, r2
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff ff5f 	bl	8000c58 <__NVIC_SetPriority>
}
 8000d9a:	bf00      	nop
 8000d9c:	3718      	adds	r7, #24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b082      	sub	sp, #8
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	4603      	mov	r3, r0
 8000daa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff ff33 	bl	8000c1c <__NVIC_EnableIRQ>
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f7ff ffa4 	bl	8000d14 <SysTick_Config>
 8000dcc:	4603      	mov	r3, r0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
	...

08000dd8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d101      	bne.n	8000dea <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e205      	b.n	80011f6 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d004      	beq.n	8000e00 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2280      	movs	r2, #128	; 0x80
 8000dfa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e1fa      	b.n	80011f6 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a8c      	ldr	r2, [pc, #560]	; (8001038 <HAL_DMA_Abort_IT+0x260>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d04a      	beq.n	8000ea0 <HAL_DMA_Abort_IT+0xc8>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a8b      	ldr	r2, [pc, #556]	; (800103c <HAL_DMA_Abort_IT+0x264>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d045      	beq.n	8000ea0 <HAL_DMA_Abort_IT+0xc8>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a89      	ldr	r2, [pc, #548]	; (8001040 <HAL_DMA_Abort_IT+0x268>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d040      	beq.n	8000ea0 <HAL_DMA_Abort_IT+0xc8>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a88      	ldr	r2, [pc, #544]	; (8001044 <HAL_DMA_Abort_IT+0x26c>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d03b      	beq.n	8000ea0 <HAL_DMA_Abort_IT+0xc8>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a86      	ldr	r2, [pc, #536]	; (8001048 <HAL_DMA_Abort_IT+0x270>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d036      	beq.n	8000ea0 <HAL_DMA_Abort_IT+0xc8>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a85      	ldr	r2, [pc, #532]	; (800104c <HAL_DMA_Abort_IT+0x274>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d031      	beq.n	8000ea0 <HAL_DMA_Abort_IT+0xc8>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a83      	ldr	r2, [pc, #524]	; (8001050 <HAL_DMA_Abort_IT+0x278>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d02c      	beq.n	8000ea0 <HAL_DMA_Abort_IT+0xc8>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a82      	ldr	r2, [pc, #520]	; (8001054 <HAL_DMA_Abort_IT+0x27c>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d027      	beq.n	8000ea0 <HAL_DMA_Abort_IT+0xc8>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a80      	ldr	r2, [pc, #512]	; (8001058 <HAL_DMA_Abort_IT+0x280>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d022      	beq.n	8000ea0 <HAL_DMA_Abort_IT+0xc8>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a7f      	ldr	r2, [pc, #508]	; (800105c <HAL_DMA_Abort_IT+0x284>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d01d      	beq.n	8000ea0 <HAL_DMA_Abort_IT+0xc8>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a7d      	ldr	r2, [pc, #500]	; (8001060 <HAL_DMA_Abort_IT+0x288>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d018      	beq.n	8000ea0 <HAL_DMA_Abort_IT+0xc8>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a7c      	ldr	r2, [pc, #496]	; (8001064 <HAL_DMA_Abort_IT+0x28c>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d013      	beq.n	8000ea0 <HAL_DMA_Abort_IT+0xc8>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a7a      	ldr	r2, [pc, #488]	; (8001068 <HAL_DMA_Abort_IT+0x290>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d00e      	beq.n	8000ea0 <HAL_DMA_Abort_IT+0xc8>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a79      	ldr	r2, [pc, #484]	; (800106c <HAL_DMA_Abort_IT+0x294>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d009      	beq.n	8000ea0 <HAL_DMA_Abort_IT+0xc8>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a77      	ldr	r2, [pc, #476]	; (8001070 <HAL_DMA_Abort_IT+0x298>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d004      	beq.n	8000ea0 <HAL_DMA_Abort_IT+0xc8>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a76      	ldr	r2, [pc, #472]	; (8001074 <HAL_DMA_Abort_IT+0x29c>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d101      	bne.n	8000ea4 <HAL_DMA_Abort_IT+0xcc>
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e000      	b.n	8000ea6 <HAL_DMA_Abort_IT+0xce>
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d065      	beq.n	8000f76 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2204      	movs	r2, #4
 8000eae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a60      	ldr	r2, [pc, #384]	; (8001038 <HAL_DMA_Abort_IT+0x260>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d04a      	beq.n	8000f52 <HAL_DMA_Abort_IT+0x17a>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a5e      	ldr	r2, [pc, #376]	; (800103c <HAL_DMA_Abort_IT+0x264>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d045      	beq.n	8000f52 <HAL_DMA_Abort_IT+0x17a>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a5d      	ldr	r2, [pc, #372]	; (8001040 <HAL_DMA_Abort_IT+0x268>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d040      	beq.n	8000f52 <HAL_DMA_Abort_IT+0x17a>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a5b      	ldr	r2, [pc, #364]	; (8001044 <HAL_DMA_Abort_IT+0x26c>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d03b      	beq.n	8000f52 <HAL_DMA_Abort_IT+0x17a>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a5a      	ldr	r2, [pc, #360]	; (8001048 <HAL_DMA_Abort_IT+0x270>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d036      	beq.n	8000f52 <HAL_DMA_Abort_IT+0x17a>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a58      	ldr	r2, [pc, #352]	; (800104c <HAL_DMA_Abort_IT+0x274>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d031      	beq.n	8000f52 <HAL_DMA_Abort_IT+0x17a>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a57      	ldr	r2, [pc, #348]	; (8001050 <HAL_DMA_Abort_IT+0x278>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d02c      	beq.n	8000f52 <HAL_DMA_Abort_IT+0x17a>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a55      	ldr	r2, [pc, #340]	; (8001054 <HAL_DMA_Abort_IT+0x27c>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d027      	beq.n	8000f52 <HAL_DMA_Abort_IT+0x17a>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a54      	ldr	r2, [pc, #336]	; (8001058 <HAL_DMA_Abort_IT+0x280>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d022      	beq.n	8000f52 <HAL_DMA_Abort_IT+0x17a>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a52      	ldr	r2, [pc, #328]	; (800105c <HAL_DMA_Abort_IT+0x284>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d01d      	beq.n	8000f52 <HAL_DMA_Abort_IT+0x17a>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a51      	ldr	r2, [pc, #324]	; (8001060 <HAL_DMA_Abort_IT+0x288>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d018      	beq.n	8000f52 <HAL_DMA_Abort_IT+0x17a>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a4f      	ldr	r2, [pc, #316]	; (8001064 <HAL_DMA_Abort_IT+0x28c>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d013      	beq.n	8000f52 <HAL_DMA_Abort_IT+0x17a>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a4e      	ldr	r2, [pc, #312]	; (8001068 <HAL_DMA_Abort_IT+0x290>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d00e      	beq.n	8000f52 <HAL_DMA_Abort_IT+0x17a>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a4c      	ldr	r2, [pc, #304]	; (800106c <HAL_DMA_Abort_IT+0x294>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d009      	beq.n	8000f52 <HAL_DMA_Abort_IT+0x17a>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a4b      	ldr	r2, [pc, #300]	; (8001070 <HAL_DMA_Abort_IT+0x298>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d004      	beq.n	8000f52 <HAL_DMA_Abort_IT+0x17a>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a49      	ldr	r2, [pc, #292]	; (8001074 <HAL_DMA_Abort_IT+0x29c>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d108      	bne.n	8000f64 <HAL_DMA_Abort_IT+0x18c>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f022 0201 	bic.w	r2, r2, #1
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	e147      	b.n	80011f4 <HAL_DMA_Abort_IT+0x41c>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f022 0201 	bic.w	r2, r2, #1
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	e13e      	b.n	80011f4 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f022 020e 	bic.w	r2, r2, #14
 8000f84:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a2b      	ldr	r2, [pc, #172]	; (8001038 <HAL_DMA_Abort_IT+0x260>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d04a      	beq.n	8001026 <HAL_DMA_Abort_IT+0x24e>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a29      	ldr	r2, [pc, #164]	; (800103c <HAL_DMA_Abort_IT+0x264>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d045      	beq.n	8001026 <HAL_DMA_Abort_IT+0x24e>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a28      	ldr	r2, [pc, #160]	; (8001040 <HAL_DMA_Abort_IT+0x268>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d040      	beq.n	8001026 <HAL_DMA_Abort_IT+0x24e>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a26      	ldr	r2, [pc, #152]	; (8001044 <HAL_DMA_Abort_IT+0x26c>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d03b      	beq.n	8001026 <HAL_DMA_Abort_IT+0x24e>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a25      	ldr	r2, [pc, #148]	; (8001048 <HAL_DMA_Abort_IT+0x270>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d036      	beq.n	8001026 <HAL_DMA_Abort_IT+0x24e>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a23      	ldr	r2, [pc, #140]	; (800104c <HAL_DMA_Abort_IT+0x274>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d031      	beq.n	8001026 <HAL_DMA_Abort_IT+0x24e>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a22      	ldr	r2, [pc, #136]	; (8001050 <HAL_DMA_Abort_IT+0x278>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d02c      	beq.n	8001026 <HAL_DMA_Abort_IT+0x24e>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a20      	ldr	r2, [pc, #128]	; (8001054 <HAL_DMA_Abort_IT+0x27c>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d027      	beq.n	8001026 <HAL_DMA_Abort_IT+0x24e>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a1f      	ldr	r2, [pc, #124]	; (8001058 <HAL_DMA_Abort_IT+0x280>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d022      	beq.n	8001026 <HAL_DMA_Abort_IT+0x24e>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a1d      	ldr	r2, [pc, #116]	; (800105c <HAL_DMA_Abort_IT+0x284>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d01d      	beq.n	8001026 <HAL_DMA_Abort_IT+0x24e>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a1c      	ldr	r2, [pc, #112]	; (8001060 <HAL_DMA_Abort_IT+0x288>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d018      	beq.n	8001026 <HAL_DMA_Abort_IT+0x24e>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a1a      	ldr	r2, [pc, #104]	; (8001064 <HAL_DMA_Abort_IT+0x28c>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d013      	beq.n	8001026 <HAL_DMA_Abort_IT+0x24e>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a19      	ldr	r2, [pc, #100]	; (8001068 <HAL_DMA_Abort_IT+0x290>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d00e      	beq.n	8001026 <HAL_DMA_Abort_IT+0x24e>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a17      	ldr	r2, [pc, #92]	; (800106c <HAL_DMA_Abort_IT+0x294>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d009      	beq.n	8001026 <HAL_DMA_Abort_IT+0x24e>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a16      	ldr	r2, [pc, #88]	; (8001070 <HAL_DMA_Abort_IT+0x298>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d004      	beq.n	8001026 <HAL_DMA_Abort_IT+0x24e>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a14      	ldr	r2, [pc, #80]	; (8001074 <HAL_DMA_Abort_IT+0x29c>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d128      	bne.n	8001078 <HAL_DMA_Abort_IT+0x2a0>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f022 0201 	bic.w	r2, r2, #1
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	e027      	b.n	8001088 <HAL_DMA_Abort_IT+0x2b0>
 8001038:	40020010 	.word	0x40020010
 800103c:	40020028 	.word	0x40020028
 8001040:	40020040 	.word	0x40020040
 8001044:	40020058 	.word	0x40020058
 8001048:	40020070 	.word	0x40020070
 800104c:	40020088 	.word	0x40020088
 8001050:	400200a0 	.word	0x400200a0
 8001054:	400200b8 	.word	0x400200b8
 8001058:	40020410 	.word	0x40020410
 800105c:	40020428 	.word	0x40020428
 8001060:	40020440 	.word	0x40020440
 8001064:	40020458 	.word	0x40020458
 8001068:	40020470 	.word	0x40020470
 800106c:	40020488 	.word	0x40020488
 8001070:	400204a0 	.word	0x400204a0
 8001074:	400204b8 	.word	0x400204b8
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f022 0201 	bic.w	r2, r2, #1
 8001086:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a5c      	ldr	r2, [pc, #368]	; (8001200 <HAL_DMA_Abort_IT+0x428>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d072      	beq.n	8001178 <HAL_DMA_Abort_IT+0x3a0>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a5b      	ldr	r2, [pc, #364]	; (8001204 <HAL_DMA_Abort_IT+0x42c>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d06d      	beq.n	8001178 <HAL_DMA_Abort_IT+0x3a0>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a59      	ldr	r2, [pc, #356]	; (8001208 <HAL_DMA_Abort_IT+0x430>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d068      	beq.n	8001178 <HAL_DMA_Abort_IT+0x3a0>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a58      	ldr	r2, [pc, #352]	; (800120c <HAL_DMA_Abort_IT+0x434>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d063      	beq.n	8001178 <HAL_DMA_Abort_IT+0x3a0>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a56      	ldr	r2, [pc, #344]	; (8001210 <HAL_DMA_Abort_IT+0x438>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d05e      	beq.n	8001178 <HAL_DMA_Abort_IT+0x3a0>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a55      	ldr	r2, [pc, #340]	; (8001214 <HAL_DMA_Abort_IT+0x43c>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d059      	beq.n	8001178 <HAL_DMA_Abort_IT+0x3a0>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a53      	ldr	r2, [pc, #332]	; (8001218 <HAL_DMA_Abort_IT+0x440>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d054      	beq.n	8001178 <HAL_DMA_Abort_IT+0x3a0>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a52      	ldr	r2, [pc, #328]	; (800121c <HAL_DMA_Abort_IT+0x444>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d04f      	beq.n	8001178 <HAL_DMA_Abort_IT+0x3a0>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a50      	ldr	r2, [pc, #320]	; (8001220 <HAL_DMA_Abort_IT+0x448>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d04a      	beq.n	8001178 <HAL_DMA_Abort_IT+0x3a0>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a4f      	ldr	r2, [pc, #316]	; (8001224 <HAL_DMA_Abort_IT+0x44c>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d045      	beq.n	8001178 <HAL_DMA_Abort_IT+0x3a0>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a4d      	ldr	r2, [pc, #308]	; (8001228 <HAL_DMA_Abort_IT+0x450>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d040      	beq.n	8001178 <HAL_DMA_Abort_IT+0x3a0>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a4c      	ldr	r2, [pc, #304]	; (800122c <HAL_DMA_Abort_IT+0x454>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d03b      	beq.n	8001178 <HAL_DMA_Abort_IT+0x3a0>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a4a      	ldr	r2, [pc, #296]	; (8001230 <HAL_DMA_Abort_IT+0x458>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d036      	beq.n	8001178 <HAL_DMA_Abort_IT+0x3a0>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a49      	ldr	r2, [pc, #292]	; (8001234 <HAL_DMA_Abort_IT+0x45c>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d031      	beq.n	8001178 <HAL_DMA_Abort_IT+0x3a0>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a47      	ldr	r2, [pc, #284]	; (8001238 <HAL_DMA_Abort_IT+0x460>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d02c      	beq.n	8001178 <HAL_DMA_Abort_IT+0x3a0>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a46      	ldr	r2, [pc, #280]	; (800123c <HAL_DMA_Abort_IT+0x464>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d027      	beq.n	8001178 <HAL_DMA_Abort_IT+0x3a0>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a44      	ldr	r2, [pc, #272]	; (8001240 <HAL_DMA_Abort_IT+0x468>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d022      	beq.n	8001178 <HAL_DMA_Abort_IT+0x3a0>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a43      	ldr	r2, [pc, #268]	; (8001244 <HAL_DMA_Abort_IT+0x46c>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d01d      	beq.n	8001178 <HAL_DMA_Abort_IT+0x3a0>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a41      	ldr	r2, [pc, #260]	; (8001248 <HAL_DMA_Abort_IT+0x470>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d018      	beq.n	8001178 <HAL_DMA_Abort_IT+0x3a0>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a40      	ldr	r2, [pc, #256]	; (800124c <HAL_DMA_Abort_IT+0x474>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d013      	beq.n	8001178 <HAL_DMA_Abort_IT+0x3a0>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a3e      	ldr	r2, [pc, #248]	; (8001250 <HAL_DMA_Abort_IT+0x478>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d00e      	beq.n	8001178 <HAL_DMA_Abort_IT+0x3a0>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a3d      	ldr	r2, [pc, #244]	; (8001254 <HAL_DMA_Abort_IT+0x47c>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d009      	beq.n	8001178 <HAL_DMA_Abort_IT+0x3a0>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a3b      	ldr	r2, [pc, #236]	; (8001258 <HAL_DMA_Abort_IT+0x480>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d004      	beq.n	8001178 <HAL_DMA_Abort_IT+0x3a0>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a3a      	ldr	r2, [pc, #232]	; (800125c <HAL_DMA_Abort_IT+0x484>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d101      	bne.n	800117c <HAL_DMA_Abort_IT+0x3a4>
 8001178:	2301      	movs	r3, #1
 800117a:	e000      	b.n	800117e <HAL_DMA_Abort_IT+0x3a6>
 800117c:	2300      	movs	r3, #0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d028      	beq.n	80011d4 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800118c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001190:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001196:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800119c:	f003 031f 	and.w	r3, r3, #31
 80011a0:	2201      	movs	r2, #1
 80011a2:	409a      	lsls	r2, r3
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80011b0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d00c      	beq.n	80011d4 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80011c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011c8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80011d2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2201      	movs	r2, #1
 80011e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d003      	beq.n	80011f4 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40020010 	.word	0x40020010
 8001204:	40020028 	.word	0x40020028
 8001208:	40020040 	.word	0x40020040
 800120c:	40020058 	.word	0x40020058
 8001210:	40020070 	.word	0x40020070
 8001214:	40020088 	.word	0x40020088
 8001218:	400200a0 	.word	0x400200a0
 800121c:	400200b8 	.word	0x400200b8
 8001220:	40020410 	.word	0x40020410
 8001224:	40020428 	.word	0x40020428
 8001228:	40020440 	.word	0x40020440
 800122c:	40020458 	.word	0x40020458
 8001230:	40020470 	.word	0x40020470
 8001234:	40020488 	.word	0x40020488
 8001238:	400204a0 	.word	0x400204a0
 800123c:	400204b8 	.word	0x400204b8
 8001240:	58025408 	.word	0x58025408
 8001244:	5802541c 	.word	0x5802541c
 8001248:	58025430 	.word	0x58025430
 800124c:	58025444 	.word	0x58025444
 8001250:	58025458 	.word	0x58025458
 8001254:	5802546c 	.word	0x5802546c
 8001258:	58025480 	.word	0x58025480
 800125c:	58025494 	.word	0x58025494

08001260 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001260:	b480      	push	{r7}
 8001262:	b089      	sub	sp, #36	; 0x24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800126e:	4b89      	ldr	r3, [pc, #548]	; (8001494 <HAL_GPIO_Init+0x234>)
 8001270:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001272:	e194      	b.n	800159e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	2101      	movs	r1, #1
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	fa01 f303 	lsl.w	r3, r1, r3
 8001280:	4013      	ands	r3, r2
 8001282:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	2b00      	cmp	r3, #0
 8001288:	f000 8186 	beq.w	8001598 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d00b      	beq.n	80012ac <HAL_GPIO_Init+0x4c>
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b02      	cmp	r3, #2
 800129a:	d007      	beq.n	80012ac <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012a0:	2b11      	cmp	r3, #17
 80012a2:	d003      	beq.n	80012ac <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b12      	cmp	r3, #18
 80012aa:	d130      	bne.n	800130e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	2203      	movs	r2, #3
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4013      	ands	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	68da      	ldr	r2, [r3, #12]
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012e2:	2201      	movs	r2, #1
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43db      	mvns	r3, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4013      	ands	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	091b      	lsrs	r3, r3, #4
 80012f8:	f003 0201 	and.w	r2, r3, #1
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4313      	orrs	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	2203      	movs	r2, #3
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43db      	mvns	r3, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4013      	ands	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	689a      	ldr	r2, [r3, #8]
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4313      	orrs	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	2b02      	cmp	r3, #2
 8001344:	d003      	beq.n	800134e <HAL_GPIO_Init+0xee>
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2b12      	cmp	r3, #18
 800134c:	d123      	bne.n	8001396 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	08da      	lsrs	r2, r3, #3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	3208      	adds	r2, #8
 8001356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800135a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	220f      	movs	r2, #15
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43db      	mvns	r3, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4013      	ands	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	691a      	ldr	r2, [r3, #16]
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	f003 0307 	and.w	r3, r3, #7
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4313      	orrs	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	08da      	lsrs	r2, r3, #3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3208      	adds	r2, #8
 8001390:	69b9      	ldr	r1, [r7, #24]
 8001392:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	2203      	movs	r2, #3
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4013      	ands	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f003 0203 	and.w	r2, r3, #3
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f000 80e0 	beq.w	8001598 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d8:	4b2f      	ldr	r3, [pc, #188]	; (8001498 <HAL_GPIO_Init+0x238>)
 80013da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013de:	4a2e      	ldr	r2, [pc, #184]	; (8001498 <HAL_GPIO_Init+0x238>)
 80013e0:	f043 0302 	orr.w	r3, r3, #2
 80013e4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80013e8:	4b2b      	ldr	r3, [pc, #172]	; (8001498 <HAL_GPIO_Init+0x238>)
 80013ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013f6:	4a29      	ldr	r2, [pc, #164]	; (800149c <HAL_GPIO_Init+0x23c>)
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	089b      	lsrs	r3, r3, #2
 80013fc:	3302      	adds	r3, #2
 80013fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001402:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f003 0303 	and.w	r3, r3, #3
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	220f      	movs	r2, #15
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43db      	mvns	r3, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4013      	ands	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a20      	ldr	r2, [pc, #128]	; (80014a0 <HAL_GPIO_Init+0x240>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d052      	beq.n	80014c8 <HAL_GPIO_Init+0x268>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a1f      	ldr	r2, [pc, #124]	; (80014a4 <HAL_GPIO_Init+0x244>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d031      	beq.n	800148e <HAL_GPIO_Init+0x22e>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a1e      	ldr	r2, [pc, #120]	; (80014a8 <HAL_GPIO_Init+0x248>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d02b      	beq.n	800148a <HAL_GPIO_Init+0x22a>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a1d      	ldr	r2, [pc, #116]	; (80014ac <HAL_GPIO_Init+0x24c>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d025      	beq.n	8001486 <HAL_GPIO_Init+0x226>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a1c      	ldr	r2, [pc, #112]	; (80014b0 <HAL_GPIO_Init+0x250>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d01f      	beq.n	8001482 <HAL_GPIO_Init+0x222>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a1b      	ldr	r2, [pc, #108]	; (80014b4 <HAL_GPIO_Init+0x254>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d019      	beq.n	800147e <HAL_GPIO_Init+0x21e>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a1a      	ldr	r2, [pc, #104]	; (80014b8 <HAL_GPIO_Init+0x258>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d013      	beq.n	800147a <HAL_GPIO_Init+0x21a>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a19      	ldr	r2, [pc, #100]	; (80014bc <HAL_GPIO_Init+0x25c>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d00d      	beq.n	8001476 <HAL_GPIO_Init+0x216>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a18      	ldr	r2, [pc, #96]	; (80014c0 <HAL_GPIO_Init+0x260>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d007      	beq.n	8001472 <HAL_GPIO_Init+0x212>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a17      	ldr	r2, [pc, #92]	; (80014c4 <HAL_GPIO_Init+0x264>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d101      	bne.n	800146e <HAL_GPIO_Init+0x20e>
 800146a:	2309      	movs	r3, #9
 800146c:	e02d      	b.n	80014ca <HAL_GPIO_Init+0x26a>
 800146e:	230a      	movs	r3, #10
 8001470:	e02b      	b.n	80014ca <HAL_GPIO_Init+0x26a>
 8001472:	2308      	movs	r3, #8
 8001474:	e029      	b.n	80014ca <HAL_GPIO_Init+0x26a>
 8001476:	2307      	movs	r3, #7
 8001478:	e027      	b.n	80014ca <HAL_GPIO_Init+0x26a>
 800147a:	2306      	movs	r3, #6
 800147c:	e025      	b.n	80014ca <HAL_GPIO_Init+0x26a>
 800147e:	2305      	movs	r3, #5
 8001480:	e023      	b.n	80014ca <HAL_GPIO_Init+0x26a>
 8001482:	2304      	movs	r3, #4
 8001484:	e021      	b.n	80014ca <HAL_GPIO_Init+0x26a>
 8001486:	2303      	movs	r3, #3
 8001488:	e01f      	b.n	80014ca <HAL_GPIO_Init+0x26a>
 800148a:	2302      	movs	r3, #2
 800148c:	e01d      	b.n	80014ca <HAL_GPIO_Init+0x26a>
 800148e:	2301      	movs	r3, #1
 8001490:	e01b      	b.n	80014ca <HAL_GPIO_Init+0x26a>
 8001492:	bf00      	nop
 8001494:	58000080 	.word	0x58000080
 8001498:	58024400 	.word	0x58024400
 800149c:	58000400 	.word	0x58000400
 80014a0:	58020000 	.word	0x58020000
 80014a4:	58020400 	.word	0x58020400
 80014a8:	58020800 	.word	0x58020800
 80014ac:	58020c00 	.word	0x58020c00
 80014b0:	58021000 	.word	0x58021000
 80014b4:	58021400 	.word	0x58021400
 80014b8:	58021800 	.word	0x58021800
 80014bc:	58021c00 	.word	0x58021c00
 80014c0:	58022000 	.word	0x58022000
 80014c4:	58022400 	.word	0x58022400
 80014c8:	2300      	movs	r3, #0
 80014ca:	69fa      	ldr	r2, [r7, #28]
 80014cc:	f002 0203 	and.w	r2, r2, #3
 80014d0:	0092      	lsls	r2, r2, #2
 80014d2:	4093      	lsls	r3, r2
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014da:	4938      	ldr	r1, [pc, #224]	; (80015bc <HAL_GPIO_Init+0x35c>)
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	089b      	lsrs	r3, r3, #2
 80014e0:	3302      	adds	r3, #2
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	43db      	mvns	r3, r3
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4013      	ands	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d003      	beq.n	800150c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	4313      	orrs	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	43db      	mvns	r3, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4013      	ands	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	4313      	orrs	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800153c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	43db      	mvns	r3, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4013      	ands	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	4313      	orrs	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001562:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800156a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	43db      	mvns	r3, r3
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4013      	ands	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d003      	beq.n	8001590 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	4313      	orrs	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001590:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	3301      	adds	r3, #1
 800159c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	fa22 f303 	lsr.w	r3, r2, r3
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	f47f ae63 	bne.w	8001274 <HAL_GPIO_Init+0x14>
  }
}
 80015ae:	bf00      	nop
 80015b0:	3724      	adds	r7, #36	; 0x24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	58000400 	.word	0x58000400

080015c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	460b      	mov	r3, r1
 80015ca:	807b      	strh	r3, [r7, #2]
 80015cc:	4613      	mov	r3, r2
 80015ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015d0:	787b      	ldrb	r3, [r7, #1]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015d6:	887a      	ldrh	r2, [r7, #2]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80015dc:	e003      	b.n	80015e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80015de:	887b      	ldrh	r3, [r7, #2]
 80015e0:	041a      	lsls	r2, r3, #16
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	619a      	str	r2, [r3, #24]
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
	...

080015f4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80015fc:	4a08      	ldr	r2, [pc, #32]	; (8001620 <HAL_HSEM_FastTake+0x2c>)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3320      	adds	r3, #32
 8001602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001606:	4a07      	ldr	r2, [pc, #28]	; (8001624 <HAL_HSEM_FastTake+0x30>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d101      	bne.n	8001610 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800160c:	2300      	movs	r3, #0
 800160e:	e000      	b.n	8001612 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
}
 8001612:	4618      	mov	r0, r3
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	58026400 	.word	0x58026400
 8001624:	80000300 	.word	0x80000300

08001628 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001632:	4906      	ldr	r1, [pc, #24]	; (800164c <HAL_HSEM_Release+0x24>)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	58026400 	.word	0x58026400

08001650 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001658:	4b29      	ldr	r3, [pc, #164]	; (8001700 <HAL_PWREx_ConfigSupply+0xb0>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	f003 0307 	and.w	r3, r3, #7
 8001660:	2b06      	cmp	r3, #6
 8001662:	d00a      	beq.n	800167a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001664:	4b26      	ldr	r3, [pc, #152]	; (8001700 <HAL_PWREx_ConfigSupply+0xb0>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	429a      	cmp	r2, r3
 8001670:	d001      	beq.n	8001676 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e040      	b.n	80016f8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001676:	2300      	movs	r3, #0
 8001678:	e03e      	b.n	80016f8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800167a:	4b21      	ldr	r3, [pc, #132]	; (8001700 <HAL_PWREx_ConfigSupply+0xb0>)
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001682:	491f      	ldr	r1, [pc, #124]	; (8001700 <HAL_PWREx_ConfigSupply+0xb0>)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4313      	orrs	r3, r2
 8001688:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800168a:	f7ff fa7d 	bl	8000b88 <HAL_GetTick>
 800168e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001690:	e009      	b.n	80016a6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001692:	f7ff fa79 	bl	8000b88 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016a0:	d901      	bls.n	80016a6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e028      	b.n	80016f8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80016a6:	4b16      	ldr	r3, [pc, #88]	; (8001700 <HAL_PWREx_ConfigSupply+0xb0>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016b2:	d1ee      	bne.n	8001692 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2b1e      	cmp	r3, #30
 80016b8:	d008      	beq.n	80016cc <HAL_PWREx_ConfigSupply+0x7c>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2b2e      	cmp	r3, #46	; 0x2e
 80016be:	d005      	beq.n	80016cc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2b1d      	cmp	r3, #29
 80016c4:	d002      	beq.n	80016cc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2b2d      	cmp	r3, #45	; 0x2d
 80016ca:	d114      	bne.n	80016f6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80016cc:	f7ff fa5c 	bl	8000b88 <HAL_GetTick>
 80016d0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80016d2:	e009      	b.n	80016e8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80016d4:	f7ff fa58 	bl	8000b88 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016e2:	d901      	bls.n	80016e8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e007      	b.n	80016f8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80016e8:	4b05      	ldr	r3, [pc, #20]	; (8001700 <HAL_PWREx_ConfigSupply+0xb0>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016f4:	d1ee      	bne.n	80016d4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	58024800 	.word	0x58024800

08001704 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08c      	sub	sp, #48	; 0x30
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d101      	bne.n	8001716 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e3ff      	b.n	8001f16 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	2b00      	cmp	r3, #0
 8001720:	f000 8087 	beq.w	8001832 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001724:	4b99      	ldr	r3, [pc, #612]	; (800198c <HAL_RCC_OscConfig+0x288>)
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800172c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800172e:	4b97      	ldr	r3, [pc, #604]	; (800198c <HAL_RCC_OscConfig+0x288>)
 8001730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001732:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001736:	2b10      	cmp	r3, #16
 8001738:	d007      	beq.n	800174a <HAL_RCC_OscConfig+0x46>
 800173a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800173c:	2b18      	cmp	r3, #24
 800173e:	d110      	bne.n	8001762 <HAL_RCC_OscConfig+0x5e>
 8001740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001742:	f003 0303 	and.w	r3, r3, #3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d10b      	bne.n	8001762 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800174a:	4b90      	ldr	r3, [pc, #576]	; (800198c <HAL_RCC_OscConfig+0x288>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d06c      	beq.n	8001830 <HAL_RCC_OscConfig+0x12c>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d168      	bne.n	8001830 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e3d9      	b.n	8001f16 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800176a:	d106      	bne.n	800177a <HAL_RCC_OscConfig+0x76>
 800176c:	4b87      	ldr	r3, [pc, #540]	; (800198c <HAL_RCC_OscConfig+0x288>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a86      	ldr	r2, [pc, #536]	; (800198c <HAL_RCC_OscConfig+0x288>)
 8001772:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001776:	6013      	str	r3, [r2, #0]
 8001778:	e02e      	b.n	80017d8 <HAL_RCC_OscConfig+0xd4>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10c      	bne.n	800179c <HAL_RCC_OscConfig+0x98>
 8001782:	4b82      	ldr	r3, [pc, #520]	; (800198c <HAL_RCC_OscConfig+0x288>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a81      	ldr	r2, [pc, #516]	; (800198c <HAL_RCC_OscConfig+0x288>)
 8001788:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	4b7f      	ldr	r3, [pc, #508]	; (800198c <HAL_RCC_OscConfig+0x288>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a7e      	ldr	r2, [pc, #504]	; (800198c <HAL_RCC_OscConfig+0x288>)
 8001794:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	e01d      	b.n	80017d8 <HAL_RCC_OscConfig+0xd4>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017a4:	d10c      	bne.n	80017c0 <HAL_RCC_OscConfig+0xbc>
 80017a6:	4b79      	ldr	r3, [pc, #484]	; (800198c <HAL_RCC_OscConfig+0x288>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a78      	ldr	r2, [pc, #480]	; (800198c <HAL_RCC_OscConfig+0x288>)
 80017ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	4b76      	ldr	r3, [pc, #472]	; (800198c <HAL_RCC_OscConfig+0x288>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a75      	ldr	r2, [pc, #468]	; (800198c <HAL_RCC_OscConfig+0x288>)
 80017b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	e00b      	b.n	80017d8 <HAL_RCC_OscConfig+0xd4>
 80017c0:	4b72      	ldr	r3, [pc, #456]	; (800198c <HAL_RCC_OscConfig+0x288>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a71      	ldr	r2, [pc, #452]	; (800198c <HAL_RCC_OscConfig+0x288>)
 80017c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ca:	6013      	str	r3, [r2, #0]
 80017cc:	4b6f      	ldr	r3, [pc, #444]	; (800198c <HAL_RCC_OscConfig+0x288>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a6e      	ldr	r2, [pc, #440]	; (800198c <HAL_RCC_OscConfig+0x288>)
 80017d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d013      	beq.n	8001808 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e0:	f7ff f9d2 	bl	8000b88 <HAL_GetTick>
 80017e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017e8:	f7ff f9ce 	bl	8000b88 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b64      	cmp	r3, #100	; 0x64
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e38d      	b.n	8001f16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017fa:	4b64      	ldr	r3, [pc, #400]	; (800198c <HAL_RCC_OscConfig+0x288>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d0f0      	beq.n	80017e8 <HAL_RCC_OscConfig+0xe4>
 8001806:	e014      	b.n	8001832 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001808:	f7ff f9be 	bl	8000b88 <HAL_GetTick>
 800180c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001810:	f7ff f9ba 	bl	8000b88 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b64      	cmp	r3, #100	; 0x64
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e379      	b.n	8001f16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001822:	4b5a      	ldr	r3, [pc, #360]	; (800198c <HAL_RCC_OscConfig+0x288>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1f0      	bne.n	8001810 <HAL_RCC_OscConfig+0x10c>
 800182e:	e000      	b.n	8001832 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	f000 80ae 	beq.w	800199c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001840:	4b52      	ldr	r3, [pc, #328]	; (800198c <HAL_RCC_OscConfig+0x288>)
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001848:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800184a:	4b50      	ldr	r3, [pc, #320]	; (800198c <HAL_RCC_OscConfig+0x288>)
 800184c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001850:	6a3b      	ldr	r3, [r7, #32]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d007      	beq.n	8001866 <HAL_RCC_OscConfig+0x162>
 8001856:	6a3b      	ldr	r3, [r7, #32]
 8001858:	2b18      	cmp	r3, #24
 800185a:	d13a      	bne.n	80018d2 <HAL_RCC_OscConfig+0x1ce>
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	f003 0303 	and.w	r3, r3, #3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d135      	bne.n	80018d2 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001866:	4b49      	ldr	r3, [pc, #292]	; (800198c <HAL_RCC_OscConfig+0x288>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0304 	and.w	r3, r3, #4
 800186e:	2b00      	cmp	r3, #0
 8001870:	d005      	beq.n	800187e <HAL_RCC_OscConfig+0x17a>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d101      	bne.n	800187e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e34b      	b.n	8001f16 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800187e:	f7ff f98f 	bl	8000ba0 <HAL_GetREVID>
 8001882:	4602      	mov	r2, r0
 8001884:	f241 0303 	movw	r3, #4099	; 0x1003
 8001888:	429a      	cmp	r2, r3
 800188a:	d817      	bhi.n	80018bc <HAL_RCC_OscConfig+0x1b8>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	691b      	ldr	r3, [r3, #16]
 8001890:	2b40      	cmp	r3, #64	; 0x40
 8001892:	d108      	bne.n	80018a6 <HAL_RCC_OscConfig+0x1a2>
 8001894:	4b3d      	ldr	r3, [pc, #244]	; (800198c <HAL_RCC_OscConfig+0x288>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800189c:	4a3b      	ldr	r2, [pc, #236]	; (800198c <HAL_RCC_OscConfig+0x288>)
 800189e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018a4:	e07a      	b.n	800199c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a6:	4b39      	ldr	r3, [pc, #228]	; (800198c <HAL_RCC_OscConfig+0x288>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	031b      	lsls	r3, r3, #12
 80018b4:	4935      	ldr	r1, [pc, #212]	; (800198c <HAL_RCC_OscConfig+0x288>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018ba:	e06f      	b.n	800199c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018bc:	4b33      	ldr	r3, [pc, #204]	; (800198c <HAL_RCC_OscConfig+0x288>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	061b      	lsls	r3, r3, #24
 80018ca:	4930      	ldr	r1, [pc, #192]	; (800198c <HAL_RCC_OscConfig+0x288>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018d0:	e064      	b.n	800199c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d045      	beq.n	8001966 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80018da:	4b2c      	ldr	r3, [pc, #176]	; (800198c <HAL_RCC_OscConfig+0x288>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f023 0219 	bic.w	r2, r3, #25
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	4929      	ldr	r1, [pc, #164]	; (800198c <HAL_RCC_OscConfig+0x288>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ec:	f7ff f94c 	bl	8000b88 <HAL_GetTick>
 80018f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018f4:	f7ff f948 	bl	8000b88 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e307      	b.n	8001f16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001906:	4b21      	ldr	r3, [pc, #132]	; (800198c <HAL_RCC_OscConfig+0x288>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0304 	and.w	r3, r3, #4
 800190e:	2b00      	cmp	r3, #0
 8001910:	d0f0      	beq.n	80018f4 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001912:	f7ff f945 	bl	8000ba0 <HAL_GetREVID>
 8001916:	4602      	mov	r2, r0
 8001918:	f241 0303 	movw	r3, #4099	; 0x1003
 800191c:	429a      	cmp	r2, r3
 800191e:	d817      	bhi.n	8001950 <HAL_RCC_OscConfig+0x24c>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	691b      	ldr	r3, [r3, #16]
 8001924:	2b40      	cmp	r3, #64	; 0x40
 8001926:	d108      	bne.n	800193a <HAL_RCC_OscConfig+0x236>
 8001928:	4b18      	ldr	r3, [pc, #96]	; (800198c <HAL_RCC_OscConfig+0x288>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001930:	4a16      	ldr	r2, [pc, #88]	; (800198c <HAL_RCC_OscConfig+0x288>)
 8001932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001936:	6053      	str	r3, [r2, #4]
 8001938:	e030      	b.n	800199c <HAL_RCC_OscConfig+0x298>
 800193a:	4b14      	ldr	r3, [pc, #80]	; (800198c <HAL_RCC_OscConfig+0x288>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	031b      	lsls	r3, r3, #12
 8001948:	4910      	ldr	r1, [pc, #64]	; (800198c <HAL_RCC_OscConfig+0x288>)
 800194a:	4313      	orrs	r3, r2
 800194c:	604b      	str	r3, [r1, #4]
 800194e:	e025      	b.n	800199c <HAL_RCC_OscConfig+0x298>
 8001950:	4b0e      	ldr	r3, [pc, #56]	; (800198c <HAL_RCC_OscConfig+0x288>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	061b      	lsls	r3, r3, #24
 800195e:	490b      	ldr	r1, [pc, #44]	; (800198c <HAL_RCC_OscConfig+0x288>)
 8001960:	4313      	orrs	r3, r2
 8001962:	604b      	str	r3, [r1, #4]
 8001964:	e01a      	b.n	800199c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001966:	4b09      	ldr	r3, [pc, #36]	; (800198c <HAL_RCC_OscConfig+0x288>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a08      	ldr	r2, [pc, #32]	; (800198c <HAL_RCC_OscConfig+0x288>)
 800196c:	f023 0301 	bic.w	r3, r3, #1
 8001970:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001972:	f7ff f909 	bl	8000b88 <HAL_GetTick>
 8001976:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001978:	e00a      	b.n	8001990 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800197a:	f7ff f905 	bl	8000b88 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d903      	bls.n	8001990 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e2c4      	b.n	8001f16 <HAL_RCC_OscConfig+0x812>
 800198c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001990:	4ba4      	ldr	r3, [pc, #656]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	2b00      	cmp	r3, #0
 800199a:	d1ee      	bne.n	800197a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0310 	and.w	r3, r3, #16
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f000 80a9 	beq.w	8001afc <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019aa:	4b9e      	ldr	r3, [pc, #632]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019b2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80019b4:	4b9b      	ldr	r3, [pc, #620]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 80019b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	2b08      	cmp	r3, #8
 80019be:	d007      	beq.n	80019d0 <HAL_RCC_OscConfig+0x2cc>
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	2b18      	cmp	r3, #24
 80019c4:	d13a      	bne.n	8001a3c <HAL_RCC_OscConfig+0x338>
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	f003 0303 	and.w	r3, r3, #3
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d135      	bne.n	8001a3c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80019d0:	4b94      	ldr	r3, [pc, #592]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d005      	beq.n	80019e8 <HAL_RCC_OscConfig+0x2e4>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	69db      	ldr	r3, [r3, #28]
 80019e0:	2b80      	cmp	r3, #128	; 0x80
 80019e2:	d001      	beq.n	80019e8 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e296      	b.n	8001f16 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80019e8:	f7ff f8da 	bl	8000ba0 <HAL_GetREVID>
 80019ec:	4602      	mov	r2, r0
 80019ee:	f241 0303 	movw	r3, #4099	; 0x1003
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d817      	bhi.n	8001a26 <HAL_RCC_OscConfig+0x322>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a1b      	ldr	r3, [r3, #32]
 80019fa:	2b20      	cmp	r3, #32
 80019fc:	d108      	bne.n	8001a10 <HAL_RCC_OscConfig+0x30c>
 80019fe:	4b89      	ldr	r3, [pc, #548]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001a06:	4a87      	ldr	r2, [pc, #540]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001a08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001a0c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a0e:	e075      	b.n	8001afc <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a10:	4b84      	ldr	r3, [pc, #528]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	069b      	lsls	r3, r3, #26
 8001a1e:	4981      	ldr	r1, [pc, #516]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a24:	e06a      	b.n	8001afc <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a26:	4b7f      	ldr	r3, [pc, #508]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a1b      	ldr	r3, [r3, #32]
 8001a32:	061b      	lsls	r3, r3, #24
 8001a34:	497b      	ldr	r1, [pc, #492]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a3a:	e05f      	b.n	8001afc <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	69db      	ldr	r3, [r3, #28]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d042      	beq.n	8001aca <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001a44:	4b77      	ldr	r3, [pc, #476]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a76      	ldr	r2, [pc, #472]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a50:	f7ff f89a 	bl	8000b88 <HAL_GetTick>
 8001a54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001a58:	f7ff f896 	bl	8000b88 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e255      	b.n	8001f16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a6a:	4b6e      	ldr	r3, [pc, #440]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d0f0      	beq.n	8001a58 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a76:	f7ff f893 	bl	8000ba0 <HAL_GetREVID>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	f241 0303 	movw	r3, #4099	; 0x1003
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d817      	bhi.n	8001ab4 <HAL_RCC_OscConfig+0x3b0>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a1b      	ldr	r3, [r3, #32]
 8001a88:	2b20      	cmp	r3, #32
 8001a8a:	d108      	bne.n	8001a9e <HAL_RCC_OscConfig+0x39a>
 8001a8c:	4b65      	ldr	r3, [pc, #404]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001a94:	4a63      	ldr	r2, [pc, #396]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001a96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001a9a:	6053      	str	r3, [r2, #4]
 8001a9c:	e02e      	b.n	8001afc <HAL_RCC_OscConfig+0x3f8>
 8001a9e:	4b61      	ldr	r3, [pc, #388]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a1b      	ldr	r3, [r3, #32]
 8001aaa:	069b      	lsls	r3, r3, #26
 8001aac:	495d      	ldr	r1, [pc, #372]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	604b      	str	r3, [r1, #4]
 8001ab2:	e023      	b.n	8001afc <HAL_RCC_OscConfig+0x3f8>
 8001ab4:	4b5b      	ldr	r3, [pc, #364]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	061b      	lsls	r3, r3, #24
 8001ac2:	4958      	ldr	r1, [pc, #352]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	60cb      	str	r3, [r1, #12]
 8001ac8:	e018      	b.n	8001afc <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001aca:	4b56      	ldr	r3, [pc, #344]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a55      	ldr	r2, [pc, #340]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001ad0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ad4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad6:	f7ff f857 	bl	8000b88 <HAL_GetTick>
 8001ada:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001adc:	e008      	b.n	8001af0 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001ade:	f7ff f853 	bl	8000b88 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e212      	b.n	8001f16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001af0:	4b4c      	ldr	r3, [pc, #304]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1f0      	bne.n	8001ade <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0308 	and.w	r3, r3, #8
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d036      	beq.n	8001b76 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d019      	beq.n	8001b44 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b10:	4b44      	ldr	r3, [pc, #272]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b14:	4a43      	ldr	r2, [pc, #268]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001b16:	f043 0301 	orr.w	r3, r3, #1
 8001b1a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b1c:	f7ff f834 	bl	8000b88 <HAL_GetTick>
 8001b20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b24:	f7ff f830 	bl	8000b88 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e1ef      	b.n	8001f16 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b36:	4b3b      	ldr	r3, [pc, #236]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001b38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0f0      	beq.n	8001b24 <HAL_RCC_OscConfig+0x420>
 8001b42:	e018      	b.n	8001b76 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b44:	4b37      	ldr	r3, [pc, #220]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001b46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b48:	4a36      	ldr	r2, [pc, #216]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001b4a:	f023 0301 	bic.w	r3, r3, #1
 8001b4e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b50:	f7ff f81a 	bl	8000b88 <HAL_GetTick>
 8001b54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b58:	f7ff f816 	bl	8000b88 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e1d5      	b.n	8001f16 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b6a:	4b2e      	ldr	r3, [pc, #184]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001b6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1f0      	bne.n	8001b58 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0320 	and.w	r3, r3, #32
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d036      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d019      	beq.n	8001bbe <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b8a:	4b26      	ldr	r3, [pc, #152]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a25      	ldr	r2, [pc, #148]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001b90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b94:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001b96:	f7fe fff7 	bl	8000b88 <HAL_GetTick>
 8001b9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001b9e:	f7fe fff3 	bl	8000b88 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e1b2      	b.n	8001f16 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001bb0:	4b1c      	ldr	r3, [pc, #112]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d0f0      	beq.n	8001b9e <HAL_RCC_OscConfig+0x49a>
 8001bbc:	e018      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001bbe:	4b19      	ldr	r3, [pc, #100]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a18      	ldr	r2, [pc, #96]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001bc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001bc8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001bca:	f7fe ffdd 	bl	8000b88 <HAL_GetTick>
 8001bce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001bd0:	e008      	b.n	8001be4 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001bd2:	f7fe ffd9 	bl	8000b88 <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e198      	b.n	8001f16 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001be4:	4b0f      	ldr	r3, [pc, #60]	; (8001c24 <HAL_RCC_OscConfig+0x520>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1f0      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f000 8085 	beq.w	8001d08 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001bfe:	4b0a      	ldr	r3, [pc, #40]	; (8001c28 <HAL_RCC_OscConfig+0x524>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a09      	ldr	r2, [pc, #36]	; (8001c28 <HAL_RCC_OscConfig+0x524>)
 8001c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c0a:	f7fe ffbd 	bl	8000b88 <HAL_GetTick>
 8001c0e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c10:	e00c      	b.n	8001c2c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001c12:	f7fe ffb9 	bl	8000b88 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b64      	cmp	r3, #100	; 0x64
 8001c1e:	d905      	bls.n	8001c2c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e178      	b.n	8001f16 <HAL_RCC_OscConfig+0x812>
 8001c24:	58024400 	.word	0x58024400
 8001c28:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c2c:	4b96      	ldr	r3, [pc, #600]	; (8001e88 <HAL_RCC_OscConfig+0x784>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d0ec      	beq.n	8001c12 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d106      	bne.n	8001c4e <HAL_RCC_OscConfig+0x54a>
 8001c40:	4b92      	ldr	r3, [pc, #584]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c44:	4a91      	ldr	r2, [pc, #580]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c4c:	e02d      	b.n	8001caa <HAL_RCC_OscConfig+0x5a6>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d10c      	bne.n	8001c70 <HAL_RCC_OscConfig+0x56c>
 8001c56:	4b8d      	ldr	r3, [pc, #564]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c5a:	4a8c      	ldr	r2, [pc, #560]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001c5c:	f023 0301 	bic.w	r3, r3, #1
 8001c60:	6713      	str	r3, [r2, #112]	; 0x70
 8001c62:	4b8a      	ldr	r3, [pc, #552]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c66:	4a89      	ldr	r2, [pc, #548]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001c68:	f023 0304 	bic.w	r3, r3, #4
 8001c6c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c6e:	e01c      	b.n	8001caa <HAL_RCC_OscConfig+0x5a6>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	2b05      	cmp	r3, #5
 8001c76:	d10c      	bne.n	8001c92 <HAL_RCC_OscConfig+0x58e>
 8001c78:	4b84      	ldr	r3, [pc, #528]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c7c:	4a83      	ldr	r2, [pc, #524]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001c7e:	f043 0304 	orr.w	r3, r3, #4
 8001c82:	6713      	str	r3, [r2, #112]	; 0x70
 8001c84:	4b81      	ldr	r3, [pc, #516]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c88:	4a80      	ldr	r2, [pc, #512]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001c8a:	f043 0301 	orr.w	r3, r3, #1
 8001c8e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c90:	e00b      	b.n	8001caa <HAL_RCC_OscConfig+0x5a6>
 8001c92:	4b7e      	ldr	r3, [pc, #504]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c96:	4a7d      	ldr	r2, [pc, #500]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001c98:	f023 0301 	bic.w	r3, r3, #1
 8001c9c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c9e:	4b7b      	ldr	r3, [pc, #492]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca2:	4a7a      	ldr	r2, [pc, #488]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001ca4:	f023 0304 	bic.w	r3, r3, #4
 8001ca8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d015      	beq.n	8001cde <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb2:	f7fe ff69 	bl	8000b88 <HAL_GetTick>
 8001cb6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cb8:	e00a      	b.n	8001cd0 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cba:	f7fe ff65 	bl	8000b88 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e122      	b.n	8001f16 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cd0:	4b6e      	ldr	r3, [pc, #440]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0ee      	beq.n	8001cba <HAL_RCC_OscConfig+0x5b6>
 8001cdc:	e014      	b.n	8001d08 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cde:	f7fe ff53 	bl	8000b88 <HAL_GetTick>
 8001ce2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ce4:	e00a      	b.n	8001cfc <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ce6:	f7fe ff4f 	bl	8000b88 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e10c      	b.n	8001f16 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001cfc:	4b63      	ldr	r3, [pc, #396]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1ee      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 8101 	beq.w	8001f14 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001d12:	4b5e      	ldr	r3, [pc, #376]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d1a:	2b18      	cmp	r3, #24
 8001d1c:	f000 80bc 	beq.w	8001e98 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	f040 8095 	bne.w	8001e54 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d2a:	4b58      	ldr	r3, [pc, #352]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a57      	ldr	r2, [pc, #348]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001d30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d36:	f7fe ff27 	bl	8000b88 <HAL_GetTick>
 8001d3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d3e:	f7fe ff23 	bl	8000b88 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e0e2      	b.n	8001f16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d50:	4b4e      	ldr	r3, [pc, #312]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1f0      	bne.n	8001d3e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d5c:	4b4b      	ldr	r3, [pc, #300]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001d5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d60:	4b4b      	ldr	r3, [pc, #300]	; (8001e90 <HAL_RCC_OscConfig+0x78c>)
 8001d62:	4013      	ands	r3, r2
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001d6c:	0112      	lsls	r2, r2, #4
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	4946      	ldr	r1, [pc, #280]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	628b      	str	r3, [r1, #40]	; 0x28
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d84:	3b01      	subs	r3, #1
 8001d86:	025b      	lsls	r3, r3, #9
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d90:	3b01      	subs	r3, #1
 8001d92:	041b      	lsls	r3, r3, #16
 8001d94:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	061b      	lsls	r3, r3, #24
 8001da2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001da6:	4939      	ldr	r1, [pc, #228]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001dac:	4b37      	ldr	r3, [pc, #220]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db0:	4a36      	ldr	r2, [pc, #216]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001db2:	f023 0301 	bic.w	r3, r3, #1
 8001db6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001db8:	4b34      	ldr	r3, [pc, #208]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001dba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dbc:	4b35      	ldr	r3, [pc, #212]	; (8001e94 <HAL_RCC_OscConfig+0x790>)
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001dc4:	00d2      	lsls	r2, r2, #3
 8001dc6:	4931      	ldr	r1, [pc, #196]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001dcc:	4b2f      	ldr	r3, [pc, #188]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd0:	f023 020c 	bic.w	r2, r3, #12
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd8:	492c      	ldr	r1, [pc, #176]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001dde:	4b2b      	ldr	r3, [pc, #172]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de2:	f023 0202 	bic.w	r2, r3, #2
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dea:	4928      	ldr	r1, [pc, #160]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001df0:	4b26      	ldr	r3, [pc, #152]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df4:	4a25      	ldr	r2, [pc, #148]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001df6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dfa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001dfc:	4b23      	ldr	r3, [pc, #140]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e00:	4a22      	ldr	r2, [pc, #136]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001e02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001e08:	4b20      	ldr	r3, [pc, #128]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0c:	4a1f      	ldr	r2, [pc, #124]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001e0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001e14:	4b1d      	ldr	r3, [pc, #116]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e18:	4a1c      	ldr	r2, [pc, #112]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001e1a:	f043 0301 	orr.w	r3, r3, #1
 8001e1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e20:	4b1a      	ldr	r3, [pc, #104]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a19      	ldr	r2, [pc, #100]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001e26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2c:	f7fe feac 	bl	8000b88 <HAL_GetTick>
 8001e30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e34:	f7fe fea8 	bl	8000b88 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e067      	b.n	8001f16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e46:	4b11      	ldr	r3, [pc, #68]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0f0      	beq.n	8001e34 <HAL_RCC_OscConfig+0x730>
 8001e52:	e05f      	b.n	8001f14 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e54:	4b0d      	ldr	r3, [pc, #52]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a0c      	ldr	r2, [pc, #48]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001e5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e60:	f7fe fe92 	bl	8000b88 <HAL_GetTick>
 8001e64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e68:	f7fe fe8e 	bl	8000b88 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e04d      	b.n	8001f16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e7a:	4b04      	ldr	r3, [pc, #16]	; (8001e8c <HAL_RCC_OscConfig+0x788>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1f0      	bne.n	8001e68 <HAL_RCC_OscConfig+0x764>
 8001e86:	e045      	b.n	8001f14 <HAL_RCC_OscConfig+0x810>
 8001e88:	58024800 	.word	0x58024800
 8001e8c:	58024400 	.word	0x58024400
 8001e90:	fffffc0c 	.word	0xfffffc0c
 8001e94:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001e98:	4b21      	ldr	r3, [pc, #132]	; (8001f20 <HAL_RCC_OscConfig+0x81c>)
 8001e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e9c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001e9e:	4b20      	ldr	r3, [pc, #128]	; (8001f20 <HAL_RCC_OscConfig+0x81c>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d031      	beq.n	8001f10 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	f003 0203 	and.w	r2, r3, #3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d12a      	bne.n	8001f10 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	091b      	lsrs	r3, r3, #4
 8001ebe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d122      	bne.n	8001f10 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d11a      	bne.n	8001f10 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	0a5b      	lsrs	r3, r3, #9
 8001ede:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ee6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d111      	bne.n	8001f10 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	0c1b      	lsrs	r3, r3, #16
 8001ef0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d108      	bne.n	8001f10 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	0e1b      	lsrs	r3, r3, #24
 8001f02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f0a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d001      	beq.n	8001f14 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e000      	b.n	8001f16 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3730      	adds	r7, #48	; 0x30
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	58024400 	.word	0x58024400

08001f24 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d101      	bne.n	8001f38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e19c      	b.n	8002272 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f38:	4b8a      	ldr	r3, [pc, #552]	; (8002164 <HAL_RCC_ClockConfig+0x240>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 030f 	and.w	r3, r3, #15
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d910      	bls.n	8001f68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f46:	4b87      	ldr	r3, [pc, #540]	; (8002164 <HAL_RCC_ClockConfig+0x240>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f023 020f 	bic.w	r2, r3, #15
 8001f4e:	4985      	ldr	r1, [pc, #532]	; (8002164 <HAL_RCC_ClockConfig+0x240>)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f56:	4b83      	ldr	r3, [pc, #524]	; (8002164 <HAL_RCC_ClockConfig+0x240>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d001      	beq.n	8001f68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e184      	b.n	8002272 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d010      	beq.n	8001f96 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	691a      	ldr	r2, [r3, #16]
 8001f78:	4b7b      	ldr	r3, [pc, #492]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d908      	bls.n	8001f96 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001f84:	4b78      	ldr	r3, [pc, #480]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	4975      	ldr	r1, [pc, #468]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0308 	and.w	r3, r3, #8
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d010      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	695a      	ldr	r2, [r3, #20]
 8001fa6:	4b70      	ldr	r3, [pc, #448]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d908      	bls.n	8001fc4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001fb2:	4b6d      	ldr	r3, [pc, #436]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	496a      	ldr	r1, [pc, #424]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0310 	and.w	r3, r3, #16
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d010      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	699a      	ldr	r2, [r3, #24]
 8001fd4:	4b64      	ldr	r3, [pc, #400]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 8001fd6:	69db      	ldr	r3, [r3, #28]
 8001fd8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d908      	bls.n	8001ff2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001fe0:	4b61      	ldr	r3, [pc, #388]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 8001fe2:	69db      	ldr	r3, [r3, #28]
 8001fe4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	495e      	ldr	r1, [pc, #376]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0320 	and.w	r3, r3, #32
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d010      	beq.n	8002020 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	69da      	ldr	r2, [r3, #28]
 8002002:	4b59      	ldr	r3, [pc, #356]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 8002004:	6a1b      	ldr	r3, [r3, #32]
 8002006:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800200a:	429a      	cmp	r2, r3
 800200c:	d908      	bls.n	8002020 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800200e:	4b56      	ldr	r3, [pc, #344]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 8002010:	6a1b      	ldr	r3, [r3, #32]
 8002012:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	4953      	ldr	r1, [pc, #332]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 800201c:	4313      	orrs	r3, r2
 800201e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d010      	beq.n	800204e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68da      	ldr	r2, [r3, #12]
 8002030:	4b4d      	ldr	r3, [pc, #308]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	f003 030f 	and.w	r3, r3, #15
 8002038:	429a      	cmp	r2, r3
 800203a:	d908      	bls.n	800204e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800203c:	4b4a      	ldr	r3, [pc, #296]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	f023 020f 	bic.w	r2, r3, #15
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	4947      	ldr	r1, [pc, #284]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 800204a:	4313      	orrs	r3, r2
 800204c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	d055      	beq.n	8002106 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800205a:	4b43      	ldr	r3, [pc, #268]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	4940      	ldr	r1, [pc, #256]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 8002068:	4313      	orrs	r3, r2
 800206a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	2b02      	cmp	r3, #2
 8002072:	d107      	bne.n	8002084 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002074:	4b3c      	ldr	r3, [pc, #240]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d121      	bne.n	80020c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e0f6      	b.n	8002272 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2b03      	cmp	r3, #3
 800208a:	d107      	bne.n	800209c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800208c:	4b36      	ldr	r3, [pc, #216]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d115      	bne.n	80020c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e0ea      	b.n	8002272 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d107      	bne.n	80020b4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80020a4:	4b30      	ldr	r3, [pc, #192]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d109      	bne.n	80020c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e0de      	b.n	8002272 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020b4:	4b2c      	ldr	r3, [pc, #176]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e0d6      	b.n	8002272 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020c4:	4b28      	ldr	r3, [pc, #160]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	f023 0207 	bic.w	r2, r3, #7
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	4925      	ldr	r1, [pc, #148]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d6:	f7fe fd57 	bl	8000b88 <HAL_GetTick>
 80020da:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020dc:	e00a      	b.n	80020f4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020de:	f7fe fd53 	bl	8000b88 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e0be      	b.n	8002272 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020f4:	4b1c      	ldr	r3, [pc, #112]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	429a      	cmp	r2, r3
 8002104:	d1eb      	bne.n	80020de <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d010      	beq.n	8002134 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68da      	ldr	r2, [r3, #12]
 8002116:	4b14      	ldr	r3, [pc, #80]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	429a      	cmp	r2, r3
 8002120:	d208      	bcs.n	8002134 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002122:	4b11      	ldr	r3, [pc, #68]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	f023 020f 	bic.w	r2, r3, #15
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	490e      	ldr	r1, [pc, #56]	; (8002168 <HAL_RCC_ClockConfig+0x244>)
 8002130:	4313      	orrs	r3, r2
 8002132:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002134:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <HAL_RCC_ClockConfig+0x240>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 030f 	and.w	r3, r3, #15
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	429a      	cmp	r2, r3
 8002140:	d214      	bcs.n	800216c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002142:	4b08      	ldr	r3, [pc, #32]	; (8002164 <HAL_RCC_ClockConfig+0x240>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f023 020f 	bic.w	r2, r3, #15
 800214a:	4906      	ldr	r1, [pc, #24]	; (8002164 <HAL_RCC_ClockConfig+0x240>)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	4313      	orrs	r3, r2
 8002150:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002152:	4b04      	ldr	r3, [pc, #16]	; (8002164 <HAL_RCC_ClockConfig+0x240>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 030f 	and.w	r3, r3, #15
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	429a      	cmp	r2, r3
 800215e:	d005      	beq.n	800216c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e086      	b.n	8002272 <HAL_RCC_ClockConfig+0x34e>
 8002164:	52002000 	.word	0x52002000
 8002168:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0304 	and.w	r3, r3, #4
 8002174:	2b00      	cmp	r3, #0
 8002176:	d010      	beq.n	800219a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	691a      	ldr	r2, [r3, #16]
 800217c:	4b3f      	ldr	r3, [pc, #252]	; (800227c <HAL_RCC_ClockConfig+0x358>)
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002184:	429a      	cmp	r2, r3
 8002186:	d208      	bcs.n	800219a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002188:	4b3c      	ldr	r3, [pc, #240]	; (800227c <HAL_RCC_ClockConfig+0x358>)
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	4939      	ldr	r1, [pc, #228]	; (800227c <HAL_RCC_ClockConfig+0x358>)
 8002196:	4313      	orrs	r3, r2
 8002198:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0308 	and.w	r3, r3, #8
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d010      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	695a      	ldr	r2, [r3, #20]
 80021aa:	4b34      	ldr	r3, [pc, #208]	; (800227c <HAL_RCC_ClockConfig+0x358>)
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d208      	bcs.n	80021c8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80021b6:	4b31      	ldr	r3, [pc, #196]	; (800227c <HAL_RCC_ClockConfig+0x358>)
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	492e      	ldr	r1, [pc, #184]	; (800227c <HAL_RCC_ClockConfig+0x358>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0310 	and.w	r3, r3, #16
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d010      	beq.n	80021f6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	699a      	ldr	r2, [r3, #24]
 80021d8:	4b28      	ldr	r3, [pc, #160]	; (800227c <HAL_RCC_ClockConfig+0x358>)
 80021da:	69db      	ldr	r3, [r3, #28]
 80021dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d208      	bcs.n	80021f6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80021e4:	4b25      	ldr	r3, [pc, #148]	; (800227c <HAL_RCC_ClockConfig+0x358>)
 80021e6:	69db      	ldr	r3, [r3, #28]
 80021e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	4922      	ldr	r1, [pc, #136]	; (800227c <HAL_RCC_ClockConfig+0x358>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0320 	and.w	r3, r3, #32
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d010      	beq.n	8002224 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69da      	ldr	r2, [r3, #28]
 8002206:	4b1d      	ldr	r3, [pc, #116]	; (800227c <HAL_RCC_ClockConfig+0x358>)
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800220e:	429a      	cmp	r2, r3
 8002210:	d208      	bcs.n	8002224 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002212:	4b1a      	ldr	r3, [pc, #104]	; (800227c <HAL_RCC_ClockConfig+0x358>)
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	4917      	ldr	r1, [pc, #92]	; (800227c <HAL_RCC_ClockConfig+0x358>)
 8002220:	4313      	orrs	r3, r2
 8002222:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002224:	f000 f834 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 8002228:	4601      	mov	r1, r0
 800222a:	4b14      	ldr	r3, [pc, #80]	; (800227c <HAL_RCC_ClockConfig+0x358>)
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	0a1b      	lsrs	r3, r3, #8
 8002230:	f003 030f 	and.w	r3, r3, #15
 8002234:	4a12      	ldr	r2, [pc, #72]	; (8002280 <HAL_RCC_ClockConfig+0x35c>)
 8002236:	5cd3      	ldrb	r3, [r2, r3]
 8002238:	f003 031f 	and.w	r3, r3, #31
 800223c:	fa21 f303 	lsr.w	r3, r1, r3
 8002240:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002242:	4b0e      	ldr	r3, [pc, #56]	; (800227c <HAL_RCC_ClockConfig+0x358>)
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	4a0d      	ldr	r2, [pc, #52]	; (8002280 <HAL_RCC_ClockConfig+0x35c>)
 800224c:	5cd3      	ldrb	r3, [r2, r3]
 800224e:	f003 031f 	and.w	r3, r3, #31
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	fa22 f303 	lsr.w	r3, r2, r3
 8002258:	4a0a      	ldr	r2, [pc, #40]	; (8002284 <HAL_RCC_ClockConfig+0x360>)
 800225a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800225c:	4a0a      	ldr	r2, [pc, #40]	; (8002288 <HAL_RCC_ClockConfig+0x364>)
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002262:	4b0a      	ldr	r3, [pc, #40]	; (800228c <HAL_RCC_ClockConfig+0x368>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f7fe fc44 	bl	8000af4 <HAL_InitTick>
 800226c:	4603      	mov	r3, r0
 800226e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002270:	7bfb      	ldrb	r3, [r7, #15]
}
 8002272:	4618      	mov	r0, r3
 8002274:	3718      	adds	r7, #24
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	58024400 	.word	0x58024400
 8002280:	08002d84 	.word	0x08002d84
 8002284:	20000004 	.word	0x20000004
 8002288:	20000000 	.word	0x20000000
 800228c:	20000008 	.word	0x20000008

08002290 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002290:	b480      	push	{r7}
 8002292:	b089      	sub	sp, #36	; 0x24
 8002294:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002296:	4baf      	ldr	r3, [pc, #700]	; (8002554 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800229e:	2b18      	cmp	r3, #24
 80022a0:	f200 814e 	bhi.w	8002540 <HAL_RCC_GetSysClockFreq+0x2b0>
 80022a4:	a201      	add	r2, pc, #4	; (adr r2, 80022ac <HAL_RCC_GetSysClockFreq+0x1c>)
 80022a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022aa:	bf00      	nop
 80022ac:	08002311 	.word	0x08002311
 80022b0:	08002541 	.word	0x08002541
 80022b4:	08002541 	.word	0x08002541
 80022b8:	08002541 	.word	0x08002541
 80022bc:	08002541 	.word	0x08002541
 80022c0:	08002541 	.word	0x08002541
 80022c4:	08002541 	.word	0x08002541
 80022c8:	08002541 	.word	0x08002541
 80022cc:	08002337 	.word	0x08002337
 80022d0:	08002541 	.word	0x08002541
 80022d4:	08002541 	.word	0x08002541
 80022d8:	08002541 	.word	0x08002541
 80022dc:	08002541 	.word	0x08002541
 80022e0:	08002541 	.word	0x08002541
 80022e4:	08002541 	.word	0x08002541
 80022e8:	08002541 	.word	0x08002541
 80022ec:	0800233d 	.word	0x0800233d
 80022f0:	08002541 	.word	0x08002541
 80022f4:	08002541 	.word	0x08002541
 80022f8:	08002541 	.word	0x08002541
 80022fc:	08002541 	.word	0x08002541
 8002300:	08002541 	.word	0x08002541
 8002304:	08002541 	.word	0x08002541
 8002308:	08002541 	.word	0x08002541
 800230c:	08002343 	.word	0x08002343
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002310:	4b90      	ldr	r3, [pc, #576]	; (8002554 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0320 	and.w	r3, r3, #32
 8002318:	2b00      	cmp	r3, #0
 800231a:	d009      	beq.n	8002330 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800231c:	4b8d      	ldr	r3, [pc, #564]	; (8002554 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	08db      	lsrs	r3, r3, #3
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	4a8c      	ldr	r2, [pc, #560]	; (8002558 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002328:	fa22 f303 	lsr.w	r3, r2, r3
 800232c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800232e:	e10a      	b.n	8002546 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002330:	4b89      	ldr	r3, [pc, #548]	; (8002558 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002332:	61bb      	str	r3, [r7, #24]
    break;
 8002334:	e107      	b.n	8002546 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002336:	4b89      	ldr	r3, [pc, #548]	; (800255c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002338:	61bb      	str	r3, [r7, #24]
    break;
 800233a:	e104      	b.n	8002546 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800233c:	4b88      	ldr	r3, [pc, #544]	; (8002560 <HAL_RCC_GetSysClockFreq+0x2d0>)
 800233e:	61bb      	str	r3, [r7, #24]
    break;
 8002340:	e101      	b.n	8002546 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002342:	4b84      	ldr	r3, [pc, #528]	; (8002554 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002346:	f003 0303 	and.w	r3, r3, #3
 800234a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800234c:	4b81      	ldr	r3, [pc, #516]	; (8002554 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800234e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002350:	091b      	lsrs	r3, r3, #4
 8002352:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002356:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002358:	4b7e      	ldr	r3, [pc, #504]	; (8002554 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800235a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002362:	4b7c      	ldr	r3, [pc, #496]	; (8002554 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002366:	08db      	lsrs	r3, r3, #3
 8002368:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	fb02 f303 	mul.w	r3, r2, r3
 8002372:	ee07 3a90 	vmov	s15, r3
 8002376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800237a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	2b00      	cmp	r3, #0
 8002382:	f000 80da 	beq.w	800253a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d05a      	beq.n	8002442 <HAL_RCC_GetSysClockFreq+0x1b2>
 800238c:	2b01      	cmp	r3, #1
 800238e:	d302      	bcc.n	8002396 <HAL_RCC_GetSysClockFreq+0x106>
 8002390:	2b02      	cmp	r3, #2
 8002392:	d078      	beq.n	8002486 <HAL_RCC_GetSysClockFreq+0x1f6>
 8002394:	e099      	b.n	80024ca <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002396:	4b6f      	ldr	r3, [pc, #444]	; (8002554 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0320 	and.w	r3, r3, #32
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d02d      	beq.n	80023fe <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80023a2:	4b6c      	ldr	r3, [pc, #432]	; (8002554 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	08db      	lsrs	r3, r3, #3
 80023a8:	f003 0303 	and.w	r3, r3, #3
 80023ac:	4a6a      	ldr	r2, [pc, #424]	; (8002558 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80023ae:	fa22 f303 	lsr.w	r3, r2, r3
 80023b2:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	ee07 3a90 	vmov	s15, r3
 80023ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	ee07 3a90 	vmov	s15, r3
 80023c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023cc:	4b61      	ldr	r3, [pc, #388]	; (8002554 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80023ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023d4:	ee07 3a90 	vmov	s15, r3
 80023d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023dc:	ed97 6a02 	vldr	s12, [r7, #8]
 80023e0:	eddf 5a60 	vldr	s11, [pc, #384]	; 8002564 <HAL_RCC_GetSysClockFreq+0x2d4>
 80023e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023f8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80023fc:	e087      	b.n	800250e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	ee07 3a90 	vmov	s15, r3
 8002404:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002408:	eddf 6a57 	vldr	s13, [pc, #348]	; 8002568 <HAL_RCC_GetSysClockFreq+0x2d8>
 800240c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002410:	4b50      	ldr	r3, [pc, #320]	; (8002554 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002414:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002418:	ee07 3a90 	vmov	s15, r3
 800241c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002420:	ed97 6a02 	vldr	s12, [r7, #8]
 8002424:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8002564 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002428:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800242c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002430:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002434:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002438:	ee67 7a27 	vmul.f32	s15, s14, s15
 800243c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002440:	e065      	b.n	800250e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	ee07 3a90 	vmov	s15, r3
 8002448:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800244c:	eddf 6a47 	vldr	s13, [pc, #284]	; 800256c <HAL_RCC_GetSysClockFreq+0x2dc>
 8002450:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002454:	4b3f      	ldr	r3, [pc, #252]	; (8002554 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800245c:	ee07 3a90 	vmov	s15, r3
 8002460:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002464:	ed97 6a02 	vldr	s12, [r7, #8]
 8002468:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002564 <HAL_RCC_GetSysClockFreq+0x2d4>
 800246c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002470:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002474:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002478:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800247c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002480:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002484:	e043      	b.n	800250e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	ee07 3a90 	vmov	s15, r3
 800248c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002490:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002570 <HAL_RCC_GetSysClockFreq+0x2e0>
 8002494:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002498:	4b2e      	ldr	r3, [pc, #184]	; (8002554 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800249a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024a0:	ee07 3a90 	vmov	s15, r3
 80024a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024a8:	ed97 6a02 	vldr	s12, [r7, #8]
 80024ac:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002564 <HAL_RCC_GetSysClockFreq+0x2d4>
 80024b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80024c8:	e021      	b.n	800250e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	ee07 3a90 	vmov	s15, r3
 80024d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024d4:	eddf 6a25 	vldr	s13, [pc, #148]	; 800256c <HAL_RCC_GetSysClockFreq+0x2dc>
 80024d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024dc:	4b1d      	ldr	r3, [pc, #116]	; (8002554 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80024de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024e4:	ee07 3a90 	vmov	s15, r3
 80024e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024ec:	ed97 6a02 	vldr	s12, [r7, #8]
 80024f0:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8002564 <HAL_RCC_GetSysClockFreq+0x2d4>
 80024f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002500:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002504:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002508:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800250c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800250e:	4b11      	ldr	r3, [pc, #68]	; (8002554 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	0a5b      	lsrs	r3, r3, #9
 8002514:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002518:	3301      	adds	r3, #1
 800251a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	ee07 3a90 	vmov	s15, r3
 8002522:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002526:	edd7 6a07 	vldr	s13, [r7, #28]
 800252a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800252e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002532:	ee17 3a90 	vmov	r3, s15
 8002536:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002538:	e005      	b.n	8002546 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800253a:	2300      	movs	r3, #0
 800253c:	61bb      	str	r3, [r7, #24]
    break;
 800253e:	e002      	b.n	8002546 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8002540:	4b06      	ldr	r3, [pc, #24]	; (800255c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002542:	61bb      	str	r3, [r7, #24]
    break;
 8002544:	bf00      	nop
  }

  return sysclockfreq;
 8002546:	69bb      	ldr	r3, [r7, #24]
}
 8002548:	4618      	mov	r0, r3
 800254a:	3724      	adds	r7, #36	; 0x24
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	58024400 	.word	0x58024400
 8002558:	03d09000 	.word	0x03d09000
 800255c:	003d0900 	.word	0x003d0900
 8002560:	017d7840 	.word	0x017d7840
 8002564:	46000000 	.word	0x46000000
 8002568:	4c742400 	.word	0x4c742400
 800256c:	4a742400 	.word	0x4a742400
 8002570:	4bbebc20 	.word	0x4bbebc20

08002574 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 800257c:	2300      	movs	r3, #0
 800257e:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e0e2      	b.n	8002750 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a70      	ldr	r2, [pc, #448]	; (8002758 <HAL_SPI_Init+0x1e4>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d00f      	beq.n	80025ba <HAL_SPI_Init+0x46>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a6f      	ldr	r2, [pc, #444]	; (800275c <HAL_SPI_Init+0x1e8>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d00a      	beq.n	80025ba <HAL_SPI_Init+0x46>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a6d      	ldr	r2, [pc, #436]	; (8002760 <HAL_SPI_Init+0x1ec>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d005      	beq.n	80025ba <HAL_SPI_Init+0x46>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	2b0f      	cmp	r3, #15
 80025b4:	d901      	bls.n	80025ba <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e0ca      	b.n	8002750 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 fb96 	bl	8002cec <SPI_GetPacketSize>
 80025c0:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a64      	ldr	r2, [pc, #400]	; (8002758 <HAL_SPI_Init+0x1e4>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d00c      	beq.n	80025e6 <HAL_SPI_Init+0x72>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a62      	ldr	r2, [pc, #392]	; (800275c <HAL_SPI_Init+0x1e8>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d007      	beq.n	80025e6 <HAL_SPI_Init+0x72>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a61      	ldr	r2, [pc, #388]	; (8002760 <HAL_SPI_Init+0x1ec>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d002      	beq.n	80025e6 <HAL_SPI_Init+0x72>
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	2b08      	cmp	r3, #8
 80025e4:	d811      	bhi.n	800260a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80025ea:	4a5b      	ldr	r2, [pc, #364]	; (8002758 <HAL_SPI_Init+0x1e4>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d009      	beq.n	8002604 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a59      	ldr	r2, [pc, #356]	; (800275c <HAL_SPI_Init+0x1e8>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d004      	beq.n	8002604 <HAL_SPI_Init+0x90>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a58      	ldr	r2, [pc, #352]	; (8002760 <HAL_SPI_Init+0x1ec>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d104      	bne.n	800260e <HAL_SPI_Init+0x9a>
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	2b10      	cmp	r3, #16
 8002608:	d901      	bls.n	800260e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e0a0      	b.n	8002750 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d106      	bne.n	8002628 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7fe f8e8 	bl	80007f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2202      	movs	r2, #2
 800262c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0201 	bic.w	r2, r2, #1
 800263e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002648:	d110      	bne.n	800266c <HAL_SPI_Init+0xf8>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002652:	d10b      	bne.n	800266c <HAL_SPI_Init+0xf8>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002658:	2b00      	cmp	r3, #0
 800265a:	d107      	bne.n	800266c <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800266a:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	69da      	ldr	r2, [r3, #28]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002674:	431a      	orrs	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	431a      	orrs	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267e:	ea42 0103 	orr.w	r1, r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68da      	ldr	r2, [r3, #12]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	430a      	orrs	r2, r1
 800268c:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002696:	431a      	orrs	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800269c:	431a      	orrs	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	431a      	orrs	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	431a      	orrs	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	431a      	orrs	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	431a      	orrs	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	431a      	orrs	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c0:	431a      	orrs	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	431a      	orrs	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026cc:	ea42 0103 	orr.w	r1, r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d113      	bne.n	800270c <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026f6:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800270a:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 0201 	bic.w	r2, r2, #1
 800271a:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00a      	beq.n	800273e <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40013000 	.word	0x40013000
 800275c:	40003800 	.word	0x40003800
 8002760:	40003c00 	.word	0x40003c00

08002764 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b08a      	sub	sp, #40	; 0x28
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800277c:	6a3a      	ldr	r2, [r7, #32]
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800278c:	2300      	movs	r3, #0
 800278e:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002796:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	3330      	adds	r3, #48	; 0x30
 800279e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d113      	bne.n	80027d2 <HAL_SPI_IRQHandler+0x6e>
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	f003 0320 	and.w	r3, r3, #32
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d10e      	bne.n	80027d2 <HAL_SPI_IRQHandler+0x6e>
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	f003 0304 	and.w	r3, r3, #4
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d009      	beq.n	80027d2 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	4798      	blx	r3
    hspi->RxISR(hspi);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	4798      	blx	r3
    handled = 1UL;
 80027ce:	2301      	movs	r3, #1
 80027d0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10f      	bne.n	80027fc <HAL_SPI_IRQHandler+0x98>
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00a      	beq.n	80027fc <HAL_SPI_IRQHandler+0x98>
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	f003 0304 	and.w	r3, r3, #4
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d105      	bne.n	80027fc <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	4798      	blx	r3
    handled = 1UL;
 80027f8:	2301      	movs	r3, #1
 80027fa:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	f003 0320 	and.w	r3, r3, #32
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10f      	bne.n	8002826 <HAL_SPI_IRQHandler+0xc2>
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00a      	beq.n	8002826 <HAL_SPI_IRQHandler+0xc2>
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	f003 0304 	and.w	r3, r3, #4
 8002816:	2b00      	cmp	r3, #0
 8002818:	d105      	bne.n	8002826 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	4798      	blx	r3
    handled = 1UL;
 8002822:	2301      	movs	r3, #1
 8002824:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8002826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002828:	2b00      	cmp	r3, #0
 800282a:	f040 8170 	bne.w	8002b0e <HAL_SPI_IRQHandler+0x3aa>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	f003 0308 	and.w	r3, r3, #8
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 80a0 	beq.w	800297a <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	699a      	ldr	r2, [r3, #24]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f042 0208 	orr.w	r2, r2, #8
 8002848:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	699a      	ldr	r2, [r3, #24]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f042 0210 	orr.w	r2, r2, #16
 8002858:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	699a      	ldr	r2, [r3, #24]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002868:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	691a      	ldr	r2, [r3, #16]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 0208 	bic.w	r2, r2, #8
 8002878:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00f      	beq.n	80028a4 <HAL_SPI_IRQHandler+0x140>
 8002884:	7cfb      	ldrb	r3, [r7, #19]
 8002886:	2b04      	cmp	r3, #4
 8002888:	d004      	beq.n	8002894 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800288e:	69db      	ldr	r3, [r3, #28]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d007      	beq.n	80028a4 <HAL_SPI_IRQHandler+0x140>
 8002894:	7cfb      	ldrb	r3, [r7, #19]
 8002896:	2b03      	cmp	r3, #3
 8002898:	d059      	beq.n	800294e <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800289e:	69db      	ldr	r3, [r3, #28]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d154      	bne.n	800294e <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d13d      	bne.n	800292e <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 80028b2:	e036      	b.n	8002922 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	2b0f      	cmp	r3, #15
 80028ba:	d90b      	bls.n	80028d4 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80028c6:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028cc:	1d1a      	adds	r2, r3, #4
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	665a      	str	r2, [r3, #100]	; 0x64
 80028d2:	e01d      	b.n	8002910 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	2b07      	cmp	r3, #7
 80028da:	d90b      	bls.n	80028f4 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	8812      	ldrh	r2, [r2, #0]
 80028e4:	b292      	uxth	r2, r2
 80028e6:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028ec:	1c9a      	adds	r2, r3, #2
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	665a      	str	r2, [r3, #100]	; 0x64
 80028f2:	e00d      	b.n	8002910 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002900:	7812      	ldrb	r2, [r2, #0]
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800290a:	1c5a      	adds	r2, r3, #1
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8002916:	b29b      	uxth	r3, r3
 8002918:	3b01      	subs	r3, #1
 800291a:	b29a      	uxth	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8002928:	b29b      	uxth	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1c2      	bne.n	80028b4 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f93c 	bl	8002bac <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 f90c 	bl	8002b64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 800294c:	e0e4      	b.n	8002b18 <HAL_SPI_IRQHandler+0x3b4>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800294e:	7cfb      	ldrb	r3, [r7, #19]
 8002950:	2b05      	cmp	r3, #5
 8002952:	d103      	bne.n	800295c <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 f8fb 	bl	8002b50 <HAL_SPI_TxRxCpltCallback>
    {
      /* end of the appropriate call */
    }
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

    return;
 800295a:	e0da      	b.n	8002b12 <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800295c:	7cfb      	ldrb	r3, [r7, #19]
 800295e:	2b04      	cmp	r3, #4
 8002960:	d103      	bne.n	800296a <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 f8ea 	bl	8002b3c <HAL_SPI_RxCpltCallback>
    return;
 8002968:	e0d3      	b.n	8002b12 <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800296a:	7cfb      	ldrb	r3, [r7, #19]
 800296c:	2b03      	cmp	r3, #3
 800296e:	f040 80d0 	bne.w	8002b12 <HAL_SPI_IRQHandler+0x3ae>
      HAL_SPI_TxCpltCallback(hspi);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 f8d8 	bl	8002b28 <HAL_SPI_TxCpltCallback>
    return;
 8002978:	e0cb      	b.n	8002b12 <HAL_SPI_IRQHandler+0x3ae>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00d      	beq.n	80029a0 <HAL_SPI_IRQHandler+0x23c>
 8002984:	6a3b      	ldr	r3, [r7, #32]
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	2b00      	cmp	r3, #0
 800298c:	d008      	beq.n	80029a0 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	699a      	ldr	r2, [r3, #24]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800299c:	619a      	str	r2, [r3, #24]

    return;
 800299e:	e0bb      	b.n	8002b18 <HAL_SPI_IRQHandler+0x3b4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	f403 7358 	and.w	r3, r3, #864	; 0x360
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f000 80b6 	beq.w	8002b18 <HAL_SPI_IRQHandler+0x3b4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00f      	beq.n	80029d6 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029bc:	f043 0204 	orr.w	r2, r3, #4
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	699a      	ldr	r2, [r3, #24]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029d4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00f      	beq.n	8002a00 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029e6:	f043 0201 	orr.w	r2, r3, #1
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	699a      	ldr	r2, [r3, #24]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029fe:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00f      	beq.n	8002a2a <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a10:	f043 0208 	orr.w	r2, r3, #8
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	699a      	ldr	r2, [r3, #24]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a28:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	f003 0320 	and.w	r3, r3, #32
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00f      	beq.n	8002a54 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a3a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	699a      	ldr	r2, [r3, #24]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f042 0220 	orr.w	r2, r2, #32
 8002a52:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d05b      	beq.n	8002b16 <HAL_SPI_IRQHandler+0x3b2>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 0201 	bic.w	r2, r2, #1
 8002a6c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	6919      	ldr	r1, [r3, #16]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	4b29      	ldr	r3, [pc, #164]	; (8002b20 <HAL_SPI_IRQHandler+0x3bc>)
 8002a7a:	400b      	ands	r3, r1
 8002a7c:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a84:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002a88:	d138      	bne.n	8002afc <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002a98:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d013      	beq.n	8002aca <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002aa6:	4a1f      	ldr	r2, [pc, #124]	; (8002b24 <HAL_SPI_IRQHandler+0x3c0>)
 8002aa8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7fe f992 	bl	8000dd8 <HAL_DMA_Abort_IT>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d007      	beq.n	8002aca <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ac0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d021      	beq.n	8002b16 <HAL_SPI_IRQHandler+0x3b2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ad6:	4a13      	ldr	r2, [pc, #76]	; (8002b24 <HAL_SPI_IRQHandler+0x3c0>)
 8002ad8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7fe f97a 	bl	8000dd8 <HAL_DMA_Abort_IT>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d015      	beq.n	8002b16 <HAL_SPI_IRQHandler+0x3b2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002af0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002afa:	e00c      	b.n	8002b16 <HAL_SPI_IRQHandler+0x3b2>
        hspi->State = HAL_SPI_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 f82d 	bl	8002b64 <HAL_SPI_ErrorCallback>
    return;
 8002b0a:	bf00      	nop
 8002b0c:	e003      	b.n	8002b16 <HAL_SPI_IRQHandler+0x3b2>
    return;
 8002b0e:	bf00      	nop
 8002b10:	e002      	b.n	8002b18 <HAL_SPI_IRQHandler+0x3b4>
    return;
 8002b12:	bf00      	nop
 8002b14:	e000      	b.n	8002b18 <HAL_SPI_IRQHandler+0x3b4>
    return;
 8002b16:	bf00      	nop
  }
}
 8002b18:	3728      	adds	r7, #40	; 0x28
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	fffffc94 	.word	0xfffffc94
 8002b24:	08002b79 	.word	0x08002b79

08002b28 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b84:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f7ff ffe0 	bl	8002b64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002ba4:	bf00      	nop
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	699a      	ldr	r2, [r3, #24]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 0208 	orr.w	r2, r2, #8
 8002bca:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	699a      	ldr	r2, [r3, #24]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f042 0210 	orr.w	r2, r2, #16
 8002bda:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 0201 	bic.w	r2, r2, #1
 8002bea:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6919      	ldr	r1, [r3, #16]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	4b3c      	ldr	r3, [pc, #240]	; (8002ce8 <SPI_CloseTransfer+0x13c>)
 8002bf8:	400b      	ands	r3, r1
 8002bfa:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689a      	ldr	r2, [r3, #8]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002c0a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b04      	cmp	r3, #4
 8002c16:	d014      	beq.n	8002c42 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f003 0320 	and.w	r3, r3, #32
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00f      	beq.n	8002c42 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c28:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	699a      	ldr	r2, [r3, #24]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f042 0220 	orr.w	r2, r2, #32
 8002c40:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b03      	cmp	r3, #3
 8002c4c:	d014      	beq.n	8002c78 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00f      	beq.n	8002c78 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c5e:	f043 0204 	orr.w	r2, r3, #4
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	699a      	ldr	r2, [r3, #24]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c76:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00f      	beq.n	8002ca2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c88:	f043 0201 	orr.w	r2, r3, #1
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	699a      	ldr	r2, [r3, #24]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ca0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00f      	beq.n	8002ccc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cb2:	f043 0208 	orr.w	r2, r3, #8
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	699a      	ldr	r2, [r3, #24]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cca:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8002cdc:	bf00      	nop
 8002cde:	3714      	adds	r7, #20
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr
 8002ce8:	fffffc90 	.word	0xfffffc90

08002cec <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf8:	095b      	lsrs	r3, r3, #5
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	3301      	adds	r3, #1
 8002d04:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	3307      	adds	r3, #7
 8002d0a:	08db      	lsrs	r3, r3, #3
 8002d0c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	fb02 f303 	mul.w	r3, r2, r3
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
	...

08002d24 <__libc_init_array>:
 8002d24:	b570      	push	{r4, r5, r6, lr}
 8002d26:	4e0d      	ldr	r6, [pc, #52]	; (8002d5c <__libc_init_array+0x38>)
 8002d28:	4c0d      	ldr	r4, [pc, #52]	; (8002d60 <__libc_init_array+0x3c>)
 8002d2a:	1ba4      	subs	r4, r4, r6
 8002d2c:	10a4      	asrs	r4, r4, #2
 8002d2e:	2500      	movs	r5, #0
 8002d30:	42a5      	cmp	r5, r4
 8002d32:	d109      	bne.n	8002d48 <__libc_init_array+0x24>
 8002d34:	4e0b      	ldr	r6, [pc, #44]	; (8002d64 <__libc_init_array+0x40>)
 8002d36:	4c0c      	ldr	r4, [pc, #48]	; (8002d68 <__libc_init_array+0x44>)
 8002d38:	f000 f818 	bl	8002d6c <_init>
 8002d3c:	1ba4      	subs	r4, r4, r6
 8002d3e:	10a4      	asrs	r4, r4, #2
 8002d40:	2500      	movs	r5, #0
 8002d42:	42a5      	cmp	r5, r4
 8002d44:	d105      	bne.n	8002d52 <__libc_init_array+0x2e>
 8002d46:	bd70      	pop	{r4, r5, r6, pc}
 8002d48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d4c:	4798      	blx	r3
 8002d4e:	3501      	adds	r5, #1
 8002d50:	e7ee      	b.n	8002d30 <__libc_init_array+0xc>
 8002d52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d56:	4798      	blx	r3
 8002d58:	3501      	adds	r5, #1
 8002d5a:	e7f2      	b.n	8002d42 <__libc_init_array+0x1e>
 8002d5c:	08002d94 	.word	0x08002d94
 8002d60:	08002d94 	.word	0x08002d94
 8002d64:	08002d94 	.word	0x08002d94
 8002d68:	08002d98 	.word	0x08002d98

08002d6c <_init>:
 8002d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d6e:	bf00      	nop
 8002d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d72:	bc08      	pop	{r3}
 8002d74:	469e      	mov	lr, r3
 8002d76:	4770      	bx	lr

08002d78 <_fini>:
 8002d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d7a:	bf00      	nop
 8002d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d7e:	bc08      	pop	{r3}
 8002d80:	469e      	mov	lr, r3
 8002d82:	4770      	bx	lr
