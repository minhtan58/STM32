
F103RB_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001808  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08001944  08001944  00011944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001960  08001960  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001960  08001960  00011960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001968  08001968  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001968  08001968  00011968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800196c  0800196c  0001196c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001970  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000000c  0800197c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  0800197c  00020084  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005103  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000107c  00000000  00000000  00025138  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005d0  00000000  00000000  000261b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000538  00000000  00000000  00026788  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000124ed  00000000  00000000  00026cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004f5d  00000000  00000000  000391ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000717eb  00000000  00000000  0003e10a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000af8f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016a8  00000000  00000000  000af970  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	0800192c 	.word	0x0800192c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	0800192c 	.word	0x0800192c

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b974 	b.w	800047c <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	468c      	mov	ip, r1
 80001b2:	4604      	mov	r4, r0
 80001b4:	9e08      	ldr	r6, [sp, #32]
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d14b      	bne.n	8000252 <__udivmoddi4+0xa6>
 80001ba:	428a      	cmp	r2, r1
 80001bc:	4615      	mov	r5, r2
 80001be:	d967      	bls.n	8000290 <__udivmoddi4+0xe4>
 80001c0:	fab2 f282 	clz	r2, r2
 80001c4:	b14a      	cbz	r2, 80001da <__udivmoddi4+0x2e>
 80001c6:	f1c2 0720 	rsb	r7, r2, #32
 80001ca:	fa01 f302 	lsl.w	r3, r1, r2
 80001ce:	fa20 f707 	lsr.w	r7, r0, r7
 80001d2:	4095      	lsls	r5, r2
 80001d4:	ea47 0c03 	orr.w	ip, r7, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001de:	fbbc f7fe 	udiv	r7, ip, lr
 80001e2:	fa1f f885 	uxth.w	r8, r5
 80001e6:	fb0e c317 	mls	r3, lr, r7, ip
 80001ea:	fb07 f908 	mul.w	r9, r7, r8
 80001ee:	0c21      	lsrs	r1, r4, #16
 80001f0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f4:	4599      	cmp	r9, r3
 80001f6:	d909      	bls.n	800020c <__udivmoddi4+0x60>
 80001f8:	18eb      	adds	r3, r5, r3
 80001fa:	f107 31ff 	add.w	r1, r7, #4294967295
 80001fe:	f080 811c 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000202:	4599      	cmp	r9, r3
 8000204:	f240 8119 	bls.w	800043a <__udivmoddi4+0x28e>
 8000208:	3f02      	subs	r7, #2
 800020a:	442b      	add	r3, r5
 800020c:	eba3 0309 	sub.w	r3, r3, r9
 8000210:	fbb3 f0fe 	udiv	r0, r3, lr
 8000214:	fb0e 3310 	mls	r3, lr, r0, r3
 8000218:	fb00 f108 	mul.w	r1, r0, r8
 800021c:	b2a4      	uxth	r4, r4
 800021e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000222:	42a1      	cmp	r1, r4
 8000224:	d909      	bls.n	800023a <__udivmoddi4+0x8e>
 8000226:	192c      	adds	r4, r5, r4
 8000228:	f100 33ff 	add.w	r3, r0, #4294967295
 800022c:	f080 8107 	bcs.w	800043e <__udivmoddi4+0x292>
 8000230:	42a1      	cmp	r1, r4
 8000232:	f240 8104 	bls.w	800043e <__udivmoddi4+0x292>
 8000236:	3802      	subs	r0, #2
 8000238:	442c      	add	r4, r5
 800023a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800023e:	2700      	movs	r7, #0
 8000240:	1a64      	subs	r4, r4, r1
 8000242:	b11e      	cbz	r6, 800024c <__udivmoddi4+0xa0>
 8000244:	2300      	movs	r3, #0
 8000246:	40d4      	lsrs	r4, r2
 8000248:	e9c6 4300 	strd	r4, r3, [r6]
 800024c:	4639      	mov	r1, r7
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	428b      	cmp	r3, r1
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0xbe>
 8000256:	2e00      	cmp	r6, #0
 8000258:	f000 80ec 	beq.w	8000434 <__udivmoddi4+0x288>
 800025c:	2700      	movs	r7, #0
 800025e:	e9c6 0100 	strd	r0, r1, [r6]
 8000262:	4638      	mov	r0, r7
 8000264:	4639      	mov	r1, r7
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f783 	clz	r7, r3
 800026e:	2f00      	cmp	r7, #0
 8000270:	d148      	bne.n	8000304 <__udivmoddi4+0x158>
 8000272:	428b      	cmp	r3, r1
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd0>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80fb 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb61 0303 	sbc.w	r3, r1, r3
 8000282:	2001      	movs	r0, #1
 8000284:	469c      	mov	ip, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e0      	beq.n	800024c <__udivmoddi4+0xa0>
 800028a:	e9c6 4c00 	strd	r4, ip, [r6]
 800028e:	e7dd      	b.n	800024c <__udivmoddi4+0xa0>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xe8>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 808f 	bne.w	80003bc <__udivmoddi4+0x210>
 800029e:	2701      	movs	r7, #1
 80002a0:	1b49      	subs	r1, r1, r5
 80002a2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80002a6:	fa1f f985 	uxth.w	r9, r5
 80002aa:	fbb1 fef8 	udiv	lr, r1, r8
 80002ae:	fb08 111e 	mls	r1, r8, lr, r1
 80002b2:	fb09 f00e 	mul.w	r0, r9, lr
 80002b6:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80002ba:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 80002be:	4298      	cmp	r0, r3
 80002c0:	d907      	bls.n	80002d2 <__udivmoddi4+0x126>
 80002c2:	18eb      	adds	r3, r5, r3
 80002c4:	f10e 31ff 	add.w	r1, lr, #4294967295
 80002c8:	d202      	bcs.n	80002d0 <__udivmoddi4+0x124>
 80002ca:	4298      	cmp	r0, r3
 80002cc:	f200 80cd 	bhi.w	800046a <__udivmoddi4+0x2be>
 80002d0:	468e      	mov	lr, r1
 80002d2:	1a1b      	subs	r3, r3, r0
 80002d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d8:	fb08 3310 	mls	r3, r8, r0, r3
 80002dc:	fb09 f900 	mul.w	r9, r9, r0
 80002e0:	b2a4      	uxth	r4, r4
 80002e2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e6:	45a1      	cmp	r9, r4
 80002e8:	d907      	bls.n	80002fa <__udivmoddi4+0x14e>
 80002ea:	192c      	adds	r4, r5, r4
 80002ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f0:	d202      	bcs.n	80002f8 <__udivmoddi4+0x14c>
 80002f2:	45a1      	cmp	r9, r4
 80002f4:	f200 80b6 	bhi.w	8000464 <__udivmoddi4+0x2b8>
 80002f8:	4618      	mov	r0, r3
 80002fa:	eba4 0409 	sub.w	r4, r4, r9
 80002fe:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000302:	e79e      	b.n	8000242 <__udivmoddi4+0x96>
 8000304:	f1c7 0520 	rsb	r5, r7, #32
 8000308:	40bb      	lsls	r3, r7
 800030a:	fa22 fc05 	lsr.w	ip, r2, r5
 800030e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000312:	fa21 f405 	lsr.w	r4, r1, r5
 8000316:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800031a:	fbb4 f9fe 	udiv	r9, r4, lr
 800031e:	fa1f f88c 	uxth.w	r8, ip
 8000322:	fb0e 4419 	mls	r4, lr, r9, r4
 8000326:	fa20 f305 	lsr.w	r3, r0, r5
 800032a:	40b9      	lsls	r1, r7
 800032c:	fb09 fa08 	mul.w	sl, r9, r8
 8000330:	4319      	orrs	r1, r3
 8000332:	0c0b      	lsrs	r3, r1, #16
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	45a2      	cmp	sl, r4
 800033a:	fa02 f207 	lsl.w	r2, r2, r7
 800033e:	fa00 f307 	lsl.w	r3, r0, r7
 8000342:	d90b      	bls.n	800035c <__udivmoddi4+0x1b0>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f109 30ff 	add.w	r0, r9, #4294967295
 800034c:	f080 8088 	bcs.w	8000460 <__udivmoddi4+0x2b4>
 8000350:	45a2      	cmp	sl, r4
 8000352:	f240 8085 	bls.w	8000460 <__udivmoddi4+0x2b4>
 8000356:	f1a9 0902 	sub.w	r9, r9, #2
 800035a:	4464      	add	r4, ip
 800035c:	eba4 040a 	sub.w	r4, r4, sl
 8000360:	fbb4 f0fe 	udiv	r0, r4, lr
 8000364:	fb0e 4410 	mls	r4, lr, r0, r4
 8000368:	fb00 fa08 	mul.w	sl, r0, r8
 800036c:	b289      	uxth	r1, r1
 800036e:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000372:	45a2      	cmp	sl, r4
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x1dc>
 8000376:	eb1c 0404 	adds.w	r4, ip, r4
 800037a:	f100 31ff 	add.w	r1, r0, #4294967295
 800037e:	d26b      	bcs.n	8000458 <__udivmoddi4+0x2ac>
 8000380:	45a2      	cmp	sl, r4
 8000382:	d969      	bls.n	8000458 <__udivmoddi4+0x2ac>
 8000384:	3802      	subs	r0, #2
 8000386:	4464      	add	r4, ip
 8000388:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800038c:	fba0 8902 	umull	r8, r9, r0, r2
 8000390:	eba4 040a 	sub.w	r4, r4, sl
 8000394:	454c      	cmp	r4, r9
 8000396:	4641      	mov	r1, r8
 8000398:	46ce      	mov	lr, r9
 800039a:	d354      	bcc.n	8000446 <__udivmoddi4+0x29a>
 800039c:	d051      	beq.n	8000442 <__udivmoddi4+0x296>
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d069      	beq.n	8000476 <__udivmoddi4+0x2ca>
 80003a2:	1a5a      	subs	r2, r3, r1
 80003a4:	eb64 040e 	sbc.w	r4, r4, lr
 80003a8:	fa04 f505 	lsl.w	r5, r4, r5
 80003ac:	fa22 f307 	lsr.w	r3, r2, r7
 80003b0:	40fc      	lsrs	r4, r7
 80003b2:	431d      	orrs	r5, r3
 80003b4:	e9c6 5400 	strd	r5, r4, [r6]
 80003b8:	2700      	movs	r7, #0
 80003ba:	e747      	b.n	800024c <__udivmoddi4+0xa0>
 80003bc:	4095      	lsls	r5, r2
 80003be:	f1c2 0320 	rsb	r3, r2, #32
 80003c2:	fa21 f003 	lsr.w	r0, r1, r3
 80003c6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80003ca:	fbb0 f7f8 	udiv	r7, r0, r8
 80003ce:	fa1f f985 	uxth.w	r9, r5
 80003d2:	fb08 0017 	mls	r0, r8, r7, r0
 80003d6:	fa24 f303 	lsr.w	r3, r4, r3
 80003da:	4091      	lsls	r1, r2
 80003dc:	fb07 fc09 	mul.w	ip, r7, r9
 80003e0:	430b      	orrs	r3, r1
 80003e2:	0c19      	lsrs	r1, r3, #16
 80003e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80003e8:	458c      	cmp	ip, r1
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d907      	bls.n	8000400 <__udivmoddi4+0x254>
 80003f0:	1869      	adds	r1, r5, r1
 80003f2:	f107 30ff 	add.w	r0, r7, #4294967295
 80003f6:	d231      	bcs.n	800045c <__udivmoddi4+0x2b0>
 80003f8:	458c      	cmp	ip, r1
 80003fa:	d92f      	bls.n	800045c <__udivmoddi4+0x2b0>
 80003fc:	3f02      	subs	r7, #2
 80003fe:	4429      	add	r1, r5
 8000400:	eba1 010c 	sub.w	r1, r1, ip
 8000404:	fbb1 f0f8 	udiv	r0, r1, r8
 8000408:	fb08 1c10 	mls	ip, r8, r0, r1
 800040c:	fb00 fe09 	mul.w	lr, r0, r9
 8000410:	b299      	uxth	r1, r3
 8000412:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000416:	458e      	cmp	lr, r1
 8000418:	d907      	bls.n	800042a <__udivmoddi4+0x27e>
 800041a:	1869      	adds	r1, r5, r1
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000420:	d218      	bcs.n	8000454 <__udivmoddi4+0x2a8>
 8000422:	458e      	cmp	lr, r1
 8000424:	d916      	bls.n	8000454 <__udivmoddi4+0x2a8>
 8000426:	3802      	subs	r0, #2
 8000428:	4429      	add	r1, r5
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000432:	e73a      	b.n	80002aa <__udivmoddi4+0xfe>
 8000434:	4637      	mov	r7, r6
 8000436:	4630      	mov	r0, r6
 8000438:	e708      	b.n	800024c <__udivmoddi4+0xa0>
 800043a:	460f      	mov	r7, r1
 800043c:	e6e6      	b.n	800020c <__udivmoddi4+0x60>
 800043e:	4618      	mov	r0, r3
 8000440:	e6fb      	b.n	800023a <__udivmoddi4+0x8e>
 8000442:	4543      	cmp	r3, r8
 8000444:	d2ab      	bcs.n	800039e <__udivmoddi4+0x1f2>
 8000446:	ebb8 0102 	subs.w	r1, r8, r2
 800044a:	eb69 020c 	sbc.w	r2, r9, ip
 800044e:	3801      	subs	r0, #1
 8000450:	4696      	mov	lr, r2
 8000452:	e7a4      	b.n	800039e <__udivmoddi4+0x1f2>
 8000454:	4618      	mov	r0, r3
 8000456:	e7e8      	b.n	800042a <__udivmoddi4+0x27e>
 8000458:	4608      	mov	r0, r1
 800045a:	e795      	b.n	8000388 <__udivmoddi4+0x1dc>
 800045c:	4607      	mov	r7, r0
 800045e:	e7cf      	b.n	8000400 <__udivmoddi4+0x254>
 8000460:	4681      	mov	r9, r0
 8000462:	e77b      	b.n	800035c <__udivmoddi4+0x1b0>
 8000464:	3802      	subs	r0, #2
 8000466:	442c      	add	r4, r5
 8000468:	e747      	b.n	80002fa <__udivmoddi4+0x14e>
 800046a:	f1ae 0e02 	sub.w	lr, lr, #2
 800046e:	442b      	add	r3, r5
 8000470:	e72f      	b.n	80002d2 <__udivmoddi4+0x126>
 8000472:	4638      	mov	r0, r7
 8000474:	e707      	b.n	8000286 <__udivmoddi4+0xda>
 8000476:	4637      	mov	r7, r6
 8000478:	e6e8      	b.n	800024c <__udivmoddi4+0xa0>
 800047a:	bf00      	nop

0800047c <__aeabi_idiv0>:
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop

08000480 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000484:	f000 f973 	bl	800076e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000488:	f000 f806 	bl	8000498 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800048c:	f000 f886 	bl	800059c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000490:	f000 f84e 	bl	8000530 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000494:	e7fe      	b.n	8000494 <main+0x14>
	...

08000498 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b092      	sub	sp, #72	; 0x48
 800049c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800049e:	f107 0314 	add.w	r3, r7, #20
 80004a2:	2234      	movs	r2, #52	; 0x34
 80004a4:	2100      	movs	r1, #0
 80004a6:	4618      	mov	r0, r3
 80004a8:	f001 fa38 	bl	800191c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ac:	463b      	mov	r3, r7
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
 80004b2:	605a      	str	r2, [r3, #4]
 80004b4:	609a      	str	r2, [r3, #8]
 80004b6:	60da      	str	r2, [r3, #12]
 80004b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004ba:	4b1c      	ldr	r3, [pc, #112]	; (800052c <SystemClock_Config+0x94>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80004c2:	4a1a      	ldr	r2, [pc, #104]	; (800052c <SystemClock_Config+0x94>)
 80004c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80004c8:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004ca:	2302      	movs	r3, #2
 80004cc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004ce:	2301      	movs	r3, #1
 80004d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004d2:	2310      	movs	r3, #16
 80004d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004d6:	2302      	movs	r3, #2
 80004d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004da:	2300      	movs	r3, #0
 80004dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 80004de:	2300      	movs	r3, #0
 80004e0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 80004e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80004e6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004e8:	f107 0314 	add.w	r3, r7, #20
 80004ec:	4618      	mov	r0, r3
 80004ee:	f000 fc0f 	bl	8000d10 <HAL_RCC_OscConfig>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <SystemClock_Config+0x64>
  {
    Error_Handler();
 80004f8:	f000 f866 	bl	80005c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004fc:	230f      	movs	r3, #15
 80004fe:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000500:	2303      	movs	r3, #3
 8000502:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000504:	2300      	movs	r3, #0
 8000506:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000508:	2300      	movs	r3, #0
 800050a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800050c:	2300      	movs	r3, #0
 800050e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000510:	463b      	mov	r3, r7
 8000512:	2101      	movs	r1, #1
 8000514:	4618      	mov	r0, r3
 8000516:	f000 ff2b 	bl	8001370 <HAL_RCC_ClockConfig>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000520:	f000 f852 	bl	80005c8 <Error_Handler>
  }
}
 8000524:	bf00      	nop
 8000526:	3748      	adds	r7, #72	; 0x48
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40007000 	.word	0x40007000

08000530 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000534:	4b17      	ldr	r3, [pc, #92]	; (8000594 <MX_SPI1_Init+0x64>)
 8000536:	4a18      	ldr	r2, [pc, #96]	; (8000598 <MX_SPI1_Init+0x68>)
 8000538:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800053a:	4b16      	ldr	r3, [pc, #88]	; (8000594 <MX_SPI1_Init+0x64>)
 800053c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000540:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000542:	4b14      	ldr	r3, [pc, #80]	; (8000594 <MX_SPI1_Init+0x64>)
 8000544:	2200      	movs	r2, #0
 8000546:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000548:	4b12      	ldr	r3, [pc, #72]	; (8000594 <MX_SPI1_Init+0x64>)
 800054a:	2200      	movs	r2, #0
 800054c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800054e:	4b11      	ldr	r3, [pc, #68]	; (8000594 <MX_SPI1_Init+0x64>)
 8000550:	2200      	movs	r2, #0
 8000552:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000554:	4b0f      	ldr	r3, [pc, #60]	; (8000594 <MX_SPI1_Init+0x64>)
 8000556:	2200      	movs	r2, #0
 8000558:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800055a:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <MX_SPI1_Init+0x64>)
 800055c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000560:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <MX_SPI1_Init+0x64>)
 8000564:	2200      	movs	r2, #0
 8000566:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000568:	4b0a      	ldr	r3, [pc, #40]	; (8000594 <MX_SPI1_Init+0x64>)
 800056a:	2200      	movs	r2, #0
 800056c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800056e:	4b09      	ldr	r3, [pc, #36]	; (8000594 <MX_SPI1_Init+0x64>)
 8000570:	2200      	movs	r2, #0
 8000572:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000574:	4b07      	ldr	r3, [pc, #28]	; (8000594 <MX_SPI1_Init+0x64>)
 8000576:	2200      	movs	r2, #0
 8000578:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800057a:	4b06      	ldr	r3, [pc, #24]	; (8000594 <MX_SPI1_Init+0x64>)
 800057c:	220a      	movs	r2, #10
 800057e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000580:	4804      	ldr	r0, [pc, #16]	; (8000594 <MX_SPI1_Init+0x64>)
 8000582:	f001 f92b 	bl	80017dc <HAL_SPI_Init>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800058c:	f000 f81c 	bl	80005c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000590:	bf00      	nop
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000028 	.word	0x20000028
 8000598:	40013000 	.word	0x40013000

0800059c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a2:	4b08      	ldr	r3, [pc, #32]	; (80005c4 <MX_GPIO_Init+0x28>)
 80005a4:	69db      	ldr	r3, [r3, #28]
 80005a6:	4a07      	ldr	r2, [pc, #28]	; (80005c4 <MX_GPIO_Init+0x28>)
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	61d3      	str	r3, [r2, #28]
 80005ae:	4b05      	ldr	r3, [pc, #20]	; (80005c4 <MX_GPIO_Init+0x28>)
 80005b0:	69db      	ldr	r3, [r3, #28]
 80005b2:	f003 0301 	and.w	r3, r3, #1
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]

}
 80005ba:	bf00      	nop
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr
 80005c4:	40023800 	.word	0x40023800

080005c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bc80      	pop	{r7}
 80005d2:	4770      	bx	lr

080005d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80005da:	4b14      	ldr	r3, [pc, #80]	; (800062c <HAL_MspInit+0x58>)
 80005dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005de:	4a13      	ldr	r2, [pc, #76]	; (800062c <HAL_MspInit+0x58>)
 80005e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80005e4:	6253      	str	r3, [r2, #36]	; 0x24
 80005e6:	4b11      	ldr	r3, [pc, #68]	; (800062c <HAL_MspInit+0x58>)
 80005e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005f2:	4b0e      	ldr	r3, [pc, #56]	; (800062c <HAL_MspInit+0x58>)
 80005f4:	6a1b      	ldr	r3, [r3, #32]
 80005f6:	4a0d      	ldr	r2, [pc, #52]	; (800062c <HAL_MspInit+0x58>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	6213      	str	r3, [r2, #32]
 80005fe:	4b0b      	ldr	r3, [pc, #44]	; (800062c <HAL_MspInit+0x58>)
 8000600:	6a1b      	ldr	r3, [r3, #32]
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800060a:	4b08      	ldr	r3, [pc, #32]	; (800062c <HAL_MspInit+0x58>)
 800060c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800060e:	4a07      	ldr	r2, [pc, #28]	; (800062c <HAL_MspInit+0x58>)
 8000610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000614:	6253      	str	r3, [r2, #36]	; 0x24
 8000616:	4b05      	ldr	r3, [pc, #20]	; (800062c <HAL_MspInit+0x58>)
 8000618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800061a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000622:	bf00      	nop
 8000624:	3714      	adds	r7, #20
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr
 800062c:	40023800 	.word	0x40023800

08000630 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08a      	sub	sp, #40	; 0x28
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000638:	f107 0314 	add.w	r3, r7, #20
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a17      	ldr	r2, [pc, #92]	; (80006ac <HAL_SPI_MspInit+0x7c>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d128      	bne.n	80006a4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000652:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <HAL_SPI_MspInit+0x80>)
 8000654:	6a1b      	ldr	r3, [r3, #32]
 8000656:	4a16      	ldr	r2, [pc, #88]	; (80006b0 <HAL_SPI_MspInit+0x80>)
 8000658:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800065c:	6213      	str	r3, [r2, #32]
 800065e:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <HAL_SPI_MspInit+0x80>)
 8000660:	6a1b      	ldr	r3, [r3, #32]
 8000662:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000666:	613b      	str	r3, [r7, #16]
 8000668:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <HAL_SPI_MspInit+0x80>)
 800066c:	69db      	ldr	r3, [r3, #28]
 800066e:	4a10      	ldr	r2, [pc, #64]	; (80006b0 <HAL_SPI_MspInit+0x80>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	61d3      	str	r3, [r2, #28]
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <HAL_SPI_MspInit+0x80>)
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12;
 8000682:	f641 0330 	movw	r3, #6192	; 0x1830
 8000686:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000688:	2302      	movs	r3, #2
 800068a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000690:	2303      	movs	r3, #3
 8000692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000694:	2305      	movs	r3, #5
 8000696:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	4619      	mov	r1, r3
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <HAL_SPI_MspInit+0x84>)
 80006a0:	f000 f9b8 	bl	8000a14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80006a4:	bf00      	nop
 80006a6:	3728      	adds	r7, #40	; 0x28
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40013000 	.word	0x40013000
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40020000 	.word	0x40020000

080006b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr

080006c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <HardFault_Handler+0x4>

080006ca <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006ce:	e7fe      	b.n	80006ce <MemManage_Handler+0x4>

080006d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <BusFault_Handler+0x4>

080006d6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006da:	e7fe      	b.n	80006da <UsageFault_Handler+0x4>

080006dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr

080006e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ec:	bf00      	nop
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bc80      	pop	{r7}
 80006f2:	4770      	bx	lr

080006f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr

08000700 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000704:	f000 f886 	bl	8000814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}

0800070c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000710:	4b03      	ldr	r3, [pc, #12]	; (8000720 <SystemInit+0x14>)
 8000712:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000716:	609a      	str	r2, [r3, #8]
#endif
}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr
 8000720:	e000ed00 	.word	0xe000ed00

08000724 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000724:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000726:	e003      	b.n	8000730 <LoopCopyDataInit>

08000728 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000728:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800072a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800072c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800072e:	3104      	adds	r1, #4

08000730 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000730:	480a      	ldr	r0, [pc, #40]	; (800075c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000734:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000736:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000738:	d3f6      	bcc.n	8000728 <CopyDataInit>
  ldr r2, =_sbss
 800073a:	4a0a      	ldr	r2, [pc, #40]	; (8000764 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800073c:	e002      	b.n	8000744 <LoopFillZerobss>

0800073e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800073e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000740:	f842 3b04 	str.w	r3, [r2], #4

08000744 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000744:	4b08      	ldr	r3, [pc, #32]	; (8000768 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000746:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000748:	d3f9      	bcc.n	800073e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800074a:	f7ff ffdf 	bl	800070c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800074e:	f001 f8c1 	bl	80018d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000752:	f7ff fe95 	bl	8000480 <main>
  bx lr
 8000756:	4770      	bx	lr
  ldr r3, =_sidata
 8000758:	08001970 	.word	0x08001970
  ldr r0, =_sdata
 800075c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000760:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000764:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000768:	20000084 	.word	0x20000084

0800076c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800076c:	e7fe      	b.n	800076c <ADC1_IRQHandler>

0800076e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	b082      	sub	sp, #8
 8000772:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000774:	2300      	movs	r3, #0
 8000776:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000778:	2003      	movs	r0, #3
 800077a:	f000 f917 	bl	80009ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800077e:	2000      	movs	r0, #0
 8000780:	f000 f80e 	bl	80007a0 <HAL_InitTick>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d002      	beq.n	8000790 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800078a:	2301      	movs	r3, #1
 800078c:	71fb      	strb	r3, [r7, #7]
 800078e:	e001      	b.n	8000794 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000790:	f7ff ff20 	bl	80005d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000794:	79fb      	ldrb	r3, [r7, #7]
}
 8000796:	4618      	mov	r0, r3
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
	...

080007a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007a8:	2300      	movs	r3, #0
 80007aa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80007ac:	4b16      	ldr	r3, [pc, #88]	; (8000808 <HAL_InitTick+0x68>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d022      	beq.n	80007fa <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80007b4:	4b15      	ldr	r3, [pc, #84]	; (800080c <HAL_InitTick+0x6c>)
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	4b13      	ldr	r3, [pc, #76]	; (8000808 <HAL_InitTick+0x68>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80007c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80007c8:	4618      	mov	r0, r3
 80007ca:	f000 f916 	bl	80009fa <HAL_SYSTICK_Config>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d10f      	bne.n	80007f4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2b0f      	cmp	r3, #15
 80007d8:	d809      	bhi.n	80007ee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007da:	2200      	movs	r2, #0
 80007dc:	6879      	ldr	r1, [r7, #4]
 80007de:	f04f 30ff 	mov.w	r0, #4294967295
 80007e2:	f000 f8ee 	bl	80009c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007e6:	4a0a      	ldr	r2, [pc, #40]	; (8000810 <HAL_InitTick+0x70>)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	6013      	str	r3, [r2, #0]
 80007ec:	e007      	b.n	80007fe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80007ee:	2301      	movs	r3, #1
 80007f0:	73fb      	strb	r3, [r7, #15]
 80007f2:	e004      	b.n	80007fe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007f4:	2301      	movs	r3, #1
 80007f6:	73fb      	strb	r3, [r7, #15]
 80007f8:	e001      	b.n	80007fe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007fa:	2301      	movs	r3, #1
 80007fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000800:	4618      	mov	r0, r3
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000008 	.word	0x20000008
 800080c:	20000000 	.word	0x20000000
 8000810:	20000004 	.word	0x20000004

08000814 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000818:	4b05      	ldr	r3, [pc, #20]	; (8000830 <HAL_IncTick+0x1c>)
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	4b05      	ldr	r3, [pc, #20]	; (8000834 <HAL_IncTick+0x20>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4413      	add	r3, r2
 8000822:	4a03      	ldr	r2, [pc, #12]	; (8000830 <HAL_IncTick+0x1c>)
 8000824:	6013      	str	r3, [r2, #0]
}
 8000826:	bf00      	nop
 8000828:	46bd      	mov	sp, r7
 800082a:	bc80      	pop	{r7}
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	20000080 	.word	0x20000080
 8000834:	20000008 	.word	0x20000008

08000838 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  return uwTick;
 800083c:	4b02      	ldr	r3, [pc, #8]	; (8000848 <HAL_GetTick+0x10>)
 800083e:	681b      	ldr	r3, [r3, #0]
}
 8000840:	4618      	mov	r0, r3
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr
 8000848:	20000080 	.word	0x20000080

0800084c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800084c:	b480      	push	{r7}
 800084e:	b085      	sub	sp, #20
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	f003 0307 	and.w	r3, r3, #7
 800085a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800085c:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <__NVIC_SetPriorityGrouping+0x44>)
 800085e:	68db      	ldr	r3, [r3, #12]
 8000860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000862:	68ba      	ldr	r2, [r7, #8]
 8000864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000868:	4013      	ands	r3, r2
 800086a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000874:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800087c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800087e:	4a04      	ldr	r2, [pc, #16]	; (8000890 <__NVIC_SetPriorityGrouping+0x44>)
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	60d3      	str	r3, [r2, #12]
}
 8000884:	bf00      	nop
 8000886:	3714      	adds	r7, #20
 8000888:	46bd      	mov	sp, r7
 800088a:	bc80      	pop	{r7}
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000898:	4b04      	ldr	r3, [pc, #16]	; (80008ac <__NVIC_GetPriorityGrouping+0x18>)
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	0a1b      	lsrs	r3, r3, #8
 800089e:	f003 0307 	and.w	r3, r3, #7
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	e000ed00 	.word	0xe000ed00

080008b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	6039      	str	r1, [r7, #0]
 80008ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	db0a      	blt.n	80008da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	b2da      	uxtb	r2, r3
 80008c8:	490c      	ldr	r1, [pc, #48]	; (80008fc <__NVIC_SetPriority+0x4c>)
 80008ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ce:	0112      	lsls	r2, r2, #4
 80008d0:	b2d2      	uxtb	r2, r2
 80008d2:	440b      	add	r3, r1
 80008d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008d8:	e00a      	b.n	80008f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	4908      	ldr	r1, [pc, #32]	; (8000900 <__NVIC_SetPriority+0x50>)
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	f003 030f 	and.w	r3, r3, #15
 80008e6:	3b04      	subs	r3, #4
 80008e8:	0112      	lsls	r2, r2, #4
 80008ea:	b2d2      	uxtb	r2, r2
 80008ec:	440b      	add	r3, r1
 80008ee:	761a      	strb	r2, [r3, #24]
}
 80008f0:	bf00      	nop
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	e000e100 	.word	0xe000e100
 8000900:	e000ed00 	.word	0xe000ed00

08000904 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000904:	b480      	push	{r7}
 8000906:	b089      	sub	sp, #36	; 0x24
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	f003 0307 	and.w	r3, r3, #7
 8000916:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000918:	69fb      	ldr	r3, [r7, #28]
 800091a:	f1c3 0307 	rsb	r3, r3, #7
 800091e:	2b04      	cmp	r3, #4
 8000920:	bf28      	it	cs
 8000922:	2304      	movcs	r3, #4
 8000924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	3304      	adds	r3, #4
 800092a:	2b06      	cmp	r3, #6
 800092c:	d902      	bls.n	8000934 <NVIC_EncodePriority+0x30>
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	3b03      	subs	r3, #3
 8000932:	e000      	b.n	8000936 <NVIC_EncodePriority+0x32>
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000938:	f04f 32ff 	mov.w	r2, #4294967295
 800093c:	69bb      	ldr	r3, [r7, #24]
 800093e:	fa02 f303 	lsl.w	r3, r2, r3
 8000942:	43da      	mvns	r2, r3
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	401a      	ands	r2, r3
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800094c:	f04f 31ff 	mov.w	r1, #4294967295
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	fa01 f303 	lsl.w	r3, r1, r3
 8000956:	43d9      	mvns	r1, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800095c:	4313      	orrs	r3, r2
         );
}
 800095e:	4618      	mov	r0, r3
 8000960:	3724      	adds	r7, #36	; 0x24
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr

08000968 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	3b01      	subs	r3, #1
 8000974:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000978:	d301      	bcc.n	800097e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800097a:	2301      	movs	r3, #1
 800097c:	e00f      	b.n	800099e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800097e:	4a0a      	ldr	r2, [pc, #40]	; (80009a8 <SysTick_Config+0x40>)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	3b01      	subs	r3, #1
 8000984:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000986:	210f      	movs	r1, #15
 8000988:	f04f 30ff 	mov.w	r0, #4294967295
 800098c:	f7ff ff90 	bl	80008b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000990:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <SysTick_Config+0x40>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000996:	4b04      	ldr	r3, [pc, #16]	; (80009a8 <SysTick_Config+0x40>)
 8000998:	2207      	movs	r2, #7
 800099a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800099c:	2300      	movs	r3, #0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	e000e010 	.word	0xe000e010

080009ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f7ff ff49 	bl	800084c <__NVIC_SetPriorityGrouping>
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b086      	sub	sp, #24
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	4603      	mov	r3, r0
 80009ca:	60b9      	str	r1, [r7, #8]
 80009cc:	607a      	str	r2, [r7, #4]
 80009ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009d4:	f7ff ff5e 	bl	8000894 <__NVIC_GetPriorityGrouping>
 80009d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	68b9      	ldr	r1, [r7, #8]
 80009de:	6978      	ldr	r0, [r7, #20]
 80009e0:	f7ff ff90 	bl	8000904 <NVIC_EncodePriority>
 80009e4:	4602      	mov	r2, r0
 80009e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ea:	4611      	mov	r1, r2
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff ff5f 	bl	80008b0 <__NVIC_SetPriority>
}
 80009f2:	bf00      	nop
 80009f4:	3718      	adds	r7, #24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b082      	sub	sp, #8
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f7ff ffb0 	bl	8000968 <SysTick_Config>
 8000a08:	4603      	mov	r3, r0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b087      	sub	sp, #28
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000a26:	2300      	movs	r3, #0
 8000a28:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000a2a:	e154      	b.n	8000cd6 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	2101      	movs	r1, #1
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	fa01 f303 	lsl.w	r3, r1, r3
 8000a38:	4013      	ands	r3, r2
 8000a3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	f000 8146 	beq.w	8000cd0 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d00b      	beq.n	8000a64 <HAL_GPIO_Init+0x50>
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	2b02      	cmp	r3, #2
 8000a52:	d007      	beq.n	8000a64 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a58:	2b11      	cmp	r3, #17
 8000a5a:	d003      	beq.n	8000a64 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	2b12      	cmp	r3, #18
 8000a62:	d130      	bne.n	8000ac6 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	689b      	ldr	r3, [r3, #8]
 8000a68:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	2203      	movs	r2, #3
 8000a70:	fa02 f303 	lsl.w	r3, r2, r3
 8000a74:	43db      	mvns	r3, r3
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	4013      	ands	r3, r2
 8000a7a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	68da      	ldr	r2, [r3, #12]
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	fa02 f303 	lsl.w	r3, r2, r3
 8000a88:	693a      	ldr	r2, [r7, #16]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	43db      	mvns	r3, r3
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	091b      	lsrs	r3, r3, #4
 8000ab0:	f003 0201 	and.w	r2, r3, #1
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	68db      	ldr	r3, [r3, #12]
 8000aca:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	2203      	movs	r2, #3
 8000ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad6:	43db      	mvns	r3, r3
 8000ad8:	693a      	ldr	r2, [r7, #16]
 8000ada:	4013      	ands	r3, r2
 8000adc:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	689a      	ldr	r2, [r3, #8]
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	2b02      	cmp	r3, #2
 8000afc:	d003      	beq.n	8000b06 <HAL_GPIO_Init+0xf2>
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	2b12      	cmp	r3, #18
 8000b04:	d123      	bne.n	8000b4e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	08da      	lsrs	r2, r3, #3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	3208      	adds	r2, #8
 8000b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b12:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	f003 0307 	and.w	r3, r3, #7
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	220f      	movs	r2, #15
 8000b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b22:	43db      	mvns	r3, r3
 8000b24:	693a      	ldr	r2, [r7, #16]
 8000b26:	4013      	ands	r3, r2
 8000b28:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	691a      	ldr	r2, [r3, #16]
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	f003 0307 	and.w	r3, r3, #7
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	08da      	lsrs	r2, r3, #3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	3208      	adds	r2, #8
 8000b48:	6939      	ldr	r1, [r7, #16]
 8000b4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	2203      	movs	r2, #3
 8000b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5e:	43db      	mvns	r3, r3
 8000b60:	693a      	ldr	r2, [r7, #16]
 8000b62:	4013      	ands	r3, r2
 8000b64:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f003 0203 	and.w	r2, r3, #3
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	f000 80a0 	beq.w	8000cd0 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b90:	4b57      	ldr	r3, [pc, #348]	; (8000cf0 <HAL_GPIO_Init+0x2dc>)
 8000b92:	6a1b      	ldr	r3, [r3, #32]
 8000b94:	4a56      	ldr	r2, [pc, #344]	; (8000cf0 <HAL_GPIO_Init+0x2dc>)
 8000b96:	f043 0301 	orr.w	r3, r3, #1
 8000b9a:	6213      	str	r3, [r2, #32]
 8000b9c:	4b54      	ldr	r3, [pc, #336]	; (8000cf0 <HAL_GPIO_Init+0x2dc>)
 8000b9e:	6a1b      	ldr	r3, [r3, #32]
 8000ba0:	f003 0301 	and.w	r3, r3, #1
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000ba8:	4a52      	ldr	r2, [pc, #328]	; (8000cf4 <HAL_GPIO_Init+0x2e0>)
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	089b      	lsrs	r3, r3, #2
 8000bae:	3302      	adds	r3, #2
 8000bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bb4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	f003 0303 	and.w	r3, r3, #3
 8000bbc:	009b      	lsls	r3, r3, #2
 8000bbe:	220f      	movs	r2, #15
 8000bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc4:	43db      	mvns	r3, r3
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a4a      	ldr	r2, [pc, #296]	; (8000cf8 <HAL_GPIO_Init+0x2e4>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d019      	beq.n	8000c08 <HAL_GPIO_Init+0x1f4>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a49      	ldr	r2, [pc, #292]	; (8000cfc <HAL_GPIO_Init+0x2e8>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d013      	beq.n	8000c04 <HAL_GPIO_Init+0x1f0>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a48      	ldr	r2, [pc, #288]	; (8000d00 <HAL_GPIO_Init+0x2ec>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d00d      	beq.n	8000c00 <HAL_GPIO_Init+0x1ec>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a47      	ldr	r2, [pc, #284]	; (8000d04 <HAL_GPIO_Init+0x2f0>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d007      	beq.n	8000bfc <HAL_GPIO_Init+0x1e8>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a46      	ldr	r2, [pc, #280]	; (8000d08 <HAL_GPIO_Init+0x2f4>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d101      	bne.n	8000bf8 <HAL_GPIO_Init+0x1e4>
 8000bf4:	2304      	movs	r3, #4
 8000bf6:	e008      	b.n	8000c0a <HAL_GPIO_Init+0x1f6>
 8000bf8:	2305      	movs	r3, #5
 8000bfa:	e006      	b.n	8000c0a <HAL_GPIO_Init+0x1f6>
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	e004      	b.n	8000c0a <HAL_GPIO_Init+0x1f6>
 8000c00:	2302      	movs	r3, #2
 8000c02:	e002      	b.n	8000c0a <HAL_GPIO_Init+0x1f6>
 8000c04:	2301      	movs	r3, #1
 8000c06:	e000      	b.n	8000c0a <HAL_GPIO_Init+0x1f6>
 8000c08:	2300      	movs	r3, #0
 8000c0a:	697a      	ldr	r2, [r7, #20]
 8000c0c:	f002 0203 	and.w	r2, r2, #3
 8000c10:	0092      	lsls	r2, r2, #2
 8000c12:	4093      	lsls	r3, r2
 8000c14:	693a      	ldr	r2, [r7, #16]
 8000c16:	4313      	orrs	r3, r2
 8000c18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000c1a:	4936      	ldr	r1, [pc, #216]	; (8000cf4 <HAL_GPIO_Init+0x2e0>)
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	089b      	lsrs	r3, r3, #2
 8000c20:	3302      	adds	r3, #2
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c28:	4b38      	ldr	r3, [pc, #224]	; (8000d0c <HAL_GPIO_Init+0x2f8>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	43db      	mvns	r3, r3
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	4013      	ands	r3, r2
 8000c36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d003      	beq.n	8000c4c <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c4c:	4a2f      	ldr	r2, [pc, #188]	; (8000d0c <HAL_GPIO_Init+0x2f8>)
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000c52:	4b2e      	ldr	r3, [pc, #184]	; (8000d0c <HAL_GPIO_Init+0x2f8>)
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	4013      	ands	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d003      	beq.n	8000c76 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	4313      	orrs	r3, r2
 8000c74:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c76:	4a25      	ldr	r2, [pc, #148]	; (8000d0c <HAL_GPIO_Init+0x2f8>)
 8000c78:	693b      	ldr	r3, [r7, #16]
 8000c7a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c7c:	4b23      	ldr	r3, [pc, #140]	; (8000d0c <HAL_GPIO_Init+0x2f8>)
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	43db      	mvns	r3, r3
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d003      	beq.n	8000ca0 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ca0:	4a1a      	ldr	r2, [pc, #104]	; (8000d0c <HAL_GPIO_Init+0x2f8>)
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ca6:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <HAL_GPIO_Init+0x2f8>)
 8000ca8:	68db      	ldr	r3, [r3, #12]
 8000caa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d003      	beq.n	8000cca <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cca:	4a10      	ldr	r2, [pc, #64]	; (8000d0c <HAL_GPIO_Init+0x2f8>)
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	f47f aea3 	bne.w	8000a2c <HAL_GPIO_Init+0x18>
  }
}
 8000ce6:	bf00      	nop
 8000ce8:	371c      	adds	r7, #28
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40010000 	.word	0x40010000
 8000cf8:	40020000 	.word	0x40020000
 8000cfc:	40020400 	.word	0x40020400
 8000d00:	40020800 	.word	0x40020800
 8000d04:	40020c00 	.word	0x40020c00
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	40010400 	.word	0x40010400

08000d10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d101      	bne.n	8000d22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e31d      	b.n	800135e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d22:	4b94      	ldr	r3, [pc, #592]	; (8000f74 <HAL_RCC_OscConfig+0x264>)
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	f003 030c 	and.w	r3, r3, #12
 8000d2a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d2c:	4b91      	ldr	r3, [pc, #580]	; (8000f74 <HAL_RCC_OscConfig+0x264>)
 8000d2e:	689b      	ldr	r3, [r3, #8]
 8000d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d34:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d07b      	beq.n	8000e3a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d42:	69bb      	ldr	r3, [r7, #24]
 8000d44:	2b08      	cmp	r3, #8
 8000d46:	d006      	beq.n	8000d56 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	2b0c      	cmp	r3, #12
 8000d4c:	d10f      	bne.n	8000d6e <HAL_RCC_OscConfig+0x5e>
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d54:	d10b      	bne.n	8000d6e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d56:	4b87      	ldr	r3, [pc, #540]	; (8000f74 <HAL_RCC_OscConfig+0x264>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d06a      	beq.n	8000e38 <HAL_RCC_OscConfig+0x128>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d166      	bne.n	8000e38 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e2f7      	b.n	800135e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d106      	bne.n	8000d84 <HAL_RCC_OscConfig+0x74>
 8000d76:	4b7f      	ldr	r3, [pc, #508]	; (8000f74 <HAL_RCC_OscConfig+0x264>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a7e      	ldr	r2, [pc, #504]	; (8000f74 <HAL_RCC_OscConfig+0x264>)
 8000d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d80:	6013      	str	r3, [r2, #0]
 8000d82:	e02d      	b.n	8000de0 <HAL_RCC_OscConfig+0xd0>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d10c      	bne.n	8000da6 <HAL_RCC_OscConfig+0x96>
 8000d8c:	4b79      	ldr	r3, [pc, #484]	; (8000f74 <HAL_RCC_OscConfig+0x264>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a78      	ldr	r2, [pc, #480]	; (8000f74 <HAL_RCC_OscConfig+0x264>)
 8000d92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d96:	6013      	str	r3, [r2, #0]
 8000d98:	4b76      	ldr	r3, [pc, #472]	; (8000f74 <HAL_RCC_OscConfig+0x264>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a75      	ldr	r2, [pc, #468]	; (8000f74 <HAL_RCC_OscConfig+0x264>)
 8000d9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000da2:	6013      	str	r3, [r2, #0]
 8000da4:	e01c      	b.n	8000de0 <HAL_RCC_OscConfig+0xd0>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	2b05      	cmp	r3, #5
 8000dac:	d10c      	bne.n	8000dc8 <HAL_RCC_OscConfig+0xb8>
 8000dae:	4b71      	ldr	r3, [pc, #452]	; (8000f74 <HAL_RCC_OscConfig+0x264>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a70      	ldr	r2, [pc, #448]	; (8000f74 <HAL_RCC_OscConfig+0x264>)
 8000db4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000db8:	6013      	str	r3, [r2, #0]
 8000dba:	4b6e      	ldr	r3, [pc, #440]	; (8000f74 <HAL_RCC_OscConfig+0x264>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a6d      	ldr	r2, [pc, #436]	; (8000f74 <HAL_RCC_OscConfig+0x264>)
 8000dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dc4:	6013      	str	r3, [r2, #0]
 8000dc6:	e00b      	b.n	8000de0 <HAL_RCC_OscConfig+0xd0>
 8000dc8:	4b6a      	ldr	r3, [pc, #424]	; (8000f74 <HAL_RCC_OscConfig+0x264>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a69      	ldr	r2, [pc, #420]	; (8000f74 <HAL_RCC_OscConfig+0x264>)
 8000dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dd2:	6013      	str	r3, [r2, #0]
 8000dd4:	4b67      	ldr	r3, [pc, #412]	; (8000f74 <HAL_RCC_OscConfig+0x264>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a66      	ldr	r2, [pc, #408]	; (8000f74 <HAL_RCC_OscConfig+0x264>)
 8000dda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d013      	beq.n	8000e10 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000de8:	f7ff fd26 	bl	8000838 <HAL_GetTick>
 8000dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000dee:	e008      	b.n	8000e02 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000df0:	f7ff fd22 	bl	8000838 <HAL_GetTick>
 8000df4:	4602      	mov	r2, r0
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	2b64      	cmp	r3, #100	; 0x64
 8000dfc:	d901      	bls.n	8000e02 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	e2ad      	b.n	800135e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000e02:	4b5c      	ldr	r3, [pc, #368]	; (8000f74 <HAL_RCC_OscConfig+0x264>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d0f0      	beq.n	8000df0 <HAL_RCC_OscConfig+0xe0>
 8000e0e:	e014      	b.n	8000e3a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e10:	f7ff fd12 	bl	8000838 <HAL_GetTick>
 8000e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000e16:	e008      	b.n	8000e2a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e18:	f7ff fd0e 	bl	8000838 <HAL_GetTick>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	2b64      	cmp	r3, #100	; 0x64
 8000e24:	d901      	bls.n	8000e2a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8000e26:	2303      	movs	r3, #3
 8000e28:	e299      	b.n	800135e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000e2a:	4b52      	ldr	r3, [pc, #328]	; (8000f74 <HAL_RCC_OscConfig+0x264>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d1f0      	bne.n	8000e18 <HAL_RCC_OscConfig+0x108>
 8000e36:	e000      	b.n	8000e3a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f003 0302 	and.w	r3, r3, #2
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d05a      	beq.n	8000efc <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	2b04      	cmp	r3, #4
 8000e4a:	d005      	beq.n	8000e58 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	2b0c      	cmp	r3, #12
 8000e50:	d119      	bne.n	8000e86 <HAL_RCC_OscConfig+0x176>
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d116      	bne.n	8000e86 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e58:	4b46      	ldr	r3, [pc, #280]	; (8000f74 <HAL_RCC_OscConfig+0x264>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f003 0302 	and.w	r3, r3, #2
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d005      	beq.n	8000e70 <HAL_RCC_OscConfig+0x160>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d001      	beq.n	8000e70 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e276      	b.n	800135e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e70:	4b40      	ldr	r3, [pc, #256]	; (8000f74 <HAL_RCC_OscConfig+0x264>)
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	691b      	ldr	r3, [r3, #16]
 8000e7c:	021b      	lsls	r3, r3, #8
 8000e7e:	493d      	ldr	r1, [pc, #244]	; (8000f74 <HAL_RCC_OscConfig+0x264>)
 8000e80:	4313      	orrs	r3, r2
 8000e82:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e84:	e03a      	b.n	8000efc <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	68db      	ldr	r3, [r3, #12]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d020      	beq.n	8000ed0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e8e:	4b3a      	ldr	r3, [pc, #232]	; (8000f78 <HAL_RCC_OscConfig+0x268>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e94:	f7ff fcd0 	bl	8000838 <HAL_GetTick>
 8000e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000e9a:	e008      	b.n	8000eae <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e9c:	f7ff fccc 	bl	8000838 <HAL_GetTick>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	d901      	bls.n	8000eae <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	e257      	b.n	800135e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000eae:	4b31      	ldr	r3, [pc, #196]	; (8000f74 <HAL_RCC_OscConfig+0x264>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d0f0      	beq.n	8000e9c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eba:	4b2e      	ldr	r3, [pc, #184]	; (8000f74 <HAL_RCC_OscConfig+0x264>)
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	691b      	ldr	r3, [r3, #16]
 8000ec6:	021b      	lsls	r3, r3, #8
 8000ec8:	492a      	ldr	r1, [pc, #168]	; (8000f74 <HAL_RCC_OscConfig+0x264>)
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	604b      	str	r3, [r1, #4]
 8000ece:	e015      	b.n	8000efc <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ed0:	4b29      	ldr	r3, [pc, #164]	; (8000f78 <HAL_RCC_OscConfig+0x268>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ed6:	f7ff fcaf 	bl	8000838 <HAL_GetTick>
 8000eda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000edc:	e008      	b.n	8000ef0 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ede:	f7ff fcab 	bl	8000838 <HAL_GetTick>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	1ad3      	subs	r3, r2, r3
 8000ee8:	2b02      	cmp	r3, #2
 8000eea:	d901      	bls.n	8000ef0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8000eec:	2303      	movs	r3, #3
 8000eee:	e236      	b.n	800135e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000ef0:	4b20      	ldr	r3, [pc, #128]	; (8000f74 <HAL_RCC_OscConfig+0x264>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f003 0302 	and.w	r3, r3, #2
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d1f0      	bne.n	8000ede <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f003 0310 	and.w	r3, r3, #16
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	f000 80b8 	beq.w	800107a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d170      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f10:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <HAL_RCC_OscConfig+0x264>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d005      	beq.n	8000f28 <HAL_RCC_OscConfig+0x218>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d101      	bne.n	8000f28 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	e21a      	b.n	800135e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6a1a      	ldr	r2, [r3, #32]
 8000f2c:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <HAL_RCC_OscConfig+0x264>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d921      	bls.n	8000f7c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6a1b      	ldr	r3, [r3, #32]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f000 fbed 	bl	800171c <RCC_SetFlashLatencyFromMSIRange>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e208      	b.n	800135e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f4c:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <HAL_RCC_OscConfig+0x264>)
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6a1b      	ldr	r3, [r3, #32]
 8000f58:	4906      	ldr	r1, [pc, #24]	; (8000f74 <HAL_RCC_OscConfig+0x264>)
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f5e:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <HAL_RCC_OscConfig+0x264>)
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	061b      	lsls	r3, r3, #24
 8000f6c:	4901      	ldr	r1, [pc, #4]	; (8000f74 <HAL_RCC_OscConfig+0x264>)
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	604b      	str	r3, [r1, #4]
 8000f72:	e020      	b.n	8000fb6 <HAL_RCC_OscConfig+0x2a6>
 8000f74:	40023800 	.word	0x40023800
 8000f78:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f7c:	4ba4      	ldr	r3, [pc, #656]	; (8001210 <HAL_RCC_OscConfig+0x500>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6a1b      	ldr	r3, [r3, #32]
 8000f88:	49a1      	ldr	r1, [pc, #644]	; (8001210 <HAL_RCC_OscConfig+0x500>)
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f8e:	4ba0      	ldr	r3, [pc, #640]	; (8001210 <HAL_RCC_OscConfig+0x500>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	061b      	lsls	r3, r3, #24
 8000f9c:	499c      	ldr	r1, [pc, #624]	; (8001210 <HAL_RCC_OscConfig+0x500>)
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6a1b      	ldr	r3, [r3, #32]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 fbb8 	bl	800171c <RCC_SetFlashLatencyFromMSIRange>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e1d3      	b.n	800135e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6a1b      	ldr	r3, [r3, #32]
 8000fba:	0b5b      	lsrs	r3, r3, #13
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000fc6:	4a92      	ldr	r2, [pc, #584]	; (8001210 <HAL_RCC_OscConfig+0x500>)
 8000fc8:	6892      	ldr	r2, [r2, #8]
 8000fca:	0912      	lsrs	r2, r2, #4
 8000fcc:	f002 020f 	and.w	r2, r2, #15
 8000fd0:	4990      	ldr	r1, [pc, #576]	; (8001214 <HAL_RCC_OscConfig+0x504>)
 8000fd2:	5c8a      	ldrb	r2, [r1, r2]
 8000fd4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000fd6:	4a90      	ldr	r2, [pc, #576]	; (8001218 <HAL_RCC_OscConfig+0x508>)
 8000fd8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000fda:	4b90      	ldr	r3, [pc, #576]	; (800121c <HAL_RCC_OscConfig+0x50c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fbde 	bl	80007a0 <HAL_InitTick>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d045      	beq.n	800107a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	e1b5      	b.n	800135e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d029      	beq.n	800104e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000ffa:	4b89      	ldr	r3, [pc, #548]	; (8001220 <HAL_RCC_OscConfig+0x510>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001000:	f7ff fc1a 	bl	8000838 <HAL_GetTick>
 8001004:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001006:	e008      	b.n	800101a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001008:	f7ff fc16 	bl	8000838 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b02      	cmp	r3, #2
 8001014:	d901      	bls.n	800101a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e1a1      	b.n	800135e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800101a:	4b7d      	ldr	r3, [pc, #500]	; (8001210 <HAL_RCC_OscConfig+0x500>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001022:	2b00      	cmp	r3, #0
 8001024:	d0f0      	beq.n	8001008 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001026:	4b7a      	ldr	r3, [pc, #488]	; (8001210 <HAL_RCC_OscConfig+0x500>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6a1b      	ldr	r3, [r3, #32]
 8001032:	4977      	ldr	r1, [pc, #476]	; (8001210 <HAL_RCC_OscConfig+0x500>)
 8001034:	4313      	orrs	r3, r2
 8001036:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001038:	4b75      	ldr	r3, [pc, #468]	; (8001210 <HAL_RCC_OscConfig+0x500>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	69db      	ldr	r3, [r3, #28]
 8001044:	061b      	lsls	r3, r3, #24
 8001046:	4972      	ldr	r1, [pc, #456]	; (8001210 <HAL_RCC_OscConfig+0x500>)
 8001048:	4313      	orrs	r3, r2
 800104a:	604b      	str	r3, [r1, #4]
 800104c:	e015      	b.n	800107a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800104e:	4b74      	ldr	r3, [pc, #464]	; (8001220 <HAL_RCC_OscConfig+0x510>)
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001054:	f7ff fbf0 	bl	8000838 <HAL_GetTick>
 8001058:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800105a:	e008      	b.n	800106e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800105c:	f7ff fbec 	bl	8000838 <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	2b02      	cmp	r3, #2
 8001068:	d901      	bls.n	800106e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	e177      	b.n	800135e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800106e:	4b68      	ldr	r3, [pc, #416]	; (8001210 <HAL_RCC_OscConfig+0x500>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001076:	2b00      	cmp	r3, #0
 8001078:	d1f0      	bne.n	800105c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0308 	and.w	r3, r3, #8
 8001082:	2b00      	cmp	r3, #0
 8001084:	d030      	beq.n	80010e8 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	695b      	ldr	r3, [r3, #20]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d016      	beq.n	80010bc <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800108e:	4b65      	ldr	r3, [pc, #404]	; (8001224 <HAL_RCC_OscConfig+0x514>)
 8001090:	2201      	movs	r2, #1
 8001092:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001094:	f7ff fbd0 	bl	8000838 <HAL_GetTick>
 8001098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800109a:	e008      	b.n	80010ae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800109c:	f7ff fbcc 	bl	8000838 <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d901      	bls.n	80010ae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	e157      	b.n	800135e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80010ae:	4b58      	ldr	r3, [pc, #352]	; (8001210 <HAL_RCC_OscConfig+0x500>)
 80010b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d0f0      	beq.n	800109c <HAL_RCC_OscConfig+0x38c>
 80010ba:	e015      	b.n	80010e8 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010bc:	4b59      	ldr	r3, [pc, #356]	; (8001224 <HAL_RCC_OscConfig+0x514>)
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010c2:	f7ff fbb9 	bl	8000838 <HAL_GetTick>
 80010c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80010c8:	e008      	b.n	80010dc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010ca:	f7ff fbb5 	bl	8000838 <HAL_GetTick>
 80010ce:	4602      	mov	r2, r0
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d901      	bls.n	80010dc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80010d8:	2303      	movs	r3, #3
 80010da:	e140      	b.n	800135e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80010dc:	4b4c      	ldr	r3, [pc, #304]	; (8001210 <HAL_RCC_OscConfig+0x500>)
 80010de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010e0:	f003 0302 	and.w	r3, r3, #2
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d1f0      	bne.n	80010ca <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 0304 	and.w	r3, r3, #4
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	f000 80b5 	beq.w	8001260 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010f6:	2300      	movs	r3, #0
 80010f8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010fa:	4b45      	ldr	r3, [pc, #276]	; (8001210 <HAL_RCC_OscConfig+0x500>)
 80010fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d10d      	bne.n	8001122 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001106:	4b42      	ldr	r3, [pc, #264]	; (8001210 <HAL_RCC_OscConfig+0x500>)
 8001108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110a:	4a41      	ldr	r2, [pc, #260]	; (8001210 <HAL_RCC_OscConfig+0x500>)
 800110c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001110:	6253      	str	r3, [r2, #36]	; 0x24
 8001112:	4b3f      	ldr	r3, [pc, #252]	; (8001210 <HAL_RCC_OscConfig+0x500>)
 8001114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800111e:	2301      	movs	r3, #1
 8001120:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001122:	4b41      	ldr	r3, [pc, #260]	; (8001228 <HAL_RCC_OscConfig+0x518>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800112a:	2b00      	cmp	r3, #0
 800112c:	d118      	bne.n	8001160 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800112e:	4b3e      	ldr	r3, [pc, #248]	; (8001228 <HAL_RCC_OscConfig+0x518>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a3d      	ldr	r2, [pc, #244]	; (8001228 <HAL_RCC_OscConfig+0x518>)
 8001134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001138:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800113a:	f7ff fb7d 	bl	8000838 <HAL_GetTick>
 800113e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001140:	e008      	b.n	8001154 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001142:	f7ff fb79 	bl	8000838 <HAL_GetTick>
 8001146:	4602      	mov	r2, r0
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	2b64      	cmp	r3, #100	; 0x64
 800114e:	d901      	bls.n	8001154 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001150:	2303      	movs	r3, #3
 8001152:	e104      	b.n	800135e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001154:	4b34      	ldr	r3, [pc, #208]	; (8001228 <HAL_RCC_OscConfig+0x518>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800115c:	2b00      	cmp	r3, #0
 800115e:	d0f0      	beq.n	8001142 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d106      	bne.n	8001176 <HAL_RCC_OscConfig+0x466>
 8001168:	4b29      	ldr	r3, [pc, #164]	; (8001210 <HAL_RCC_OscConfig+0x500>)
 800116a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800116c:	4a28      	ldr	r2, [pc, #160]	; (8001210 <HAL_RCC_OscConfig+0x500>)
 800116e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001172:	6353      	str	r3, [r2, #52]	; 0x34
 8001174:	e02d      	b.n	80011d2 <HAL_RCC_OscConfig+0x4c2>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d10c      	bne.n	8001198 <HAL_RCC_OscConfig+0x488>
 800117e:	4b24      	ldr	r3, [pc, #144]	; (8001210 <HAL_RCC_OscConfig+0x500>)
 8001180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001182:	4a23      	ldr	r2, [pc, #140]	; (8001210 <HAL_RCC_OscConfig+0x500>)
 8001184:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001188:	6353      	str	r3, [r2, #52]	; 0x34
 800118a:	4b21      	ldr	r3, [pc, #132]	; (8001210 <HAL_RCC_OscConfig+0x500>)
 800118c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800118e:	4a20      	ldr	r2, [pc, #128]	; (8001210 <HAL_RCC_OscConfig+0x500>)
 8001190:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001194:	6353      	str	r3, [r2, #52]	; 0x34
 8001196:	e01c      	b.n	80011d2 <HAL_RCC_OscConfig+0x4c2>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	2b05      	cmp	r3, #5
 800119e:	d10c      	bne.n	80011ba <HAL_RCC_OscConfig+0x4aa>
 80011a0:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <HAL_RCC_OscConfig+0x500>)
 80011a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011a4:	4a1a      	ldr	r2, [pc, #104]	; (8001210 <HAL_RCC_OscConfig+0x500>)
 80011a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011aa:	6353      	str	r3, [r2, #52]	; 0x34
 80011ac:	4b18      	ldr	r3, [pc, #96]	; (8001210 <HAL_RCC_OscConfig+0x500>)
 80011ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011b0:	4a17      	ldr	r2, [pc, #92]	; (8001210 <HAL_RCC_OscConfig+0x500>)
 80011b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011b6:	6353      	str	r3, [r2, #52]	; 0x34
 80011b8:	e00b      	b.n	80011d2 <HAL_RCC_OscConfig+0x4c2>
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <HAL_RCC_OscConfig+0x500>)
 80011bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011be:	4a14      	ldr	r2, [pc, #80]	; (8001210 <HAL_RCC_OscConfig+0x500>)
 80011c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011c4:	6353      	str	r3, [r2, #52]	; 0x34
 80011c6:	4b12      	ldr	r3, [pc, #72]	; (8001210 <HAL_RCC_OscConfig+0x500>)
 80011c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011ca:	4a11      	ldr	r2, [pc, #68]	; (8001210 <HAL_RCC_OscConfig+0x500>)
 80011cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80011d0:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d015      	beq.n	8001206 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011da:	f7ff fb2d 	bl	8000838 <HAL_GetTick>
 80011de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80011e0:	e00a      	b.n	80011f8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011e2:	f7ff fb29 	bl	8000838 <HAL_GetTick>
 80011e6:	4602      	mov	r2, r0
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d901      	bls.n	80011f8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80011f4:	2303      	movs	r3, #3
 80011f6:	e0b2      	b.n	800135e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80011f8:	4b05      	ldr	r3, [pc, #20]	; (8001210 <HAL_RCC_OscConfig+0x500>)
 80011fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001200:	2b00      	cmp	r3, #0
 8001202:	d0ee      	beq.n	80011e2 <HAL_RCC_OscConfig+0x4d2>
 8001204:	e023      	b.n	800124e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001206:	f7ff fb17 	bl	8000838 <HAL_GetTick>
 800120a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800120c:	e019      	b.n	8001242 <HAL_RCC_OscConfig+0x532>
 800120e:	bf00      	nop
 8001210:	40023800 	.word	0x40023800
 8001214:	08001950 	.word	0x08001950
 8001218:	20000000 	.word	0x20000000
 800121c:	20000004 	.word	0x20000004
 8001220:	42470020 	.word	0x42470020
 8001224:	42470680 	.word	0x42470680
 8001228:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800122c:	f7ff fb04 	bl	8000838 <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	f241 3288 	movw	r2, #5000	; 0x1388
 800123a:	4293      	cmp	r3, r2
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e08d      	b.n	800135e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001242:	4b49      	ldr	r3, [pc, #292]	; (8001368 <HAL_RCC_OscConfig+0x658>)
 8001244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001246:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1ee      	bne.n	800122c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800124e:	7ffb      	ldrb	r3, [r7, #31]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d105      	bne.n	8001260 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001254:	4b44      	ldr	r3, [pc, #272]	; (8001368 <HAL_RCC_OscConfig+0x658>)
 8001256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001258:	4a43      	ldr	r2, [pc, #268]	; (8001368 <HAL_RCC_OscConfig+0x658>)
 800125a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800125e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001264:	2b00      	cmp	r3, #0
 8001266:	d079      	beq.n	800135c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	2b0c      	cmp	r3, #12
 800126c:	d056      	beq.n	800131c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001272:	2b02      	cmp	r3, #2
 8001274:	d13b      	bne.n	80012ee <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001276:	4b3d      	ldr	r3, [pc, #244]	; (800136c <HAL_RCC_OscConfig+0x65c>)
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127c:	f7ff fadc 	bl	8000838 <HAL_GetTick>
 8001280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001282:	e008      	b.n	8001296 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001284:	f7ff fad8 	bl	8000838 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b02      	cmp	r3, #2
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e063      	b.n	800135e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001296:	4b34      	ldr	r3, [pc, #208]	; (8001368 <HAL_RCC_OscConfig+0x658>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1f0      	bne.n	8001284 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012a2:	4b31      	ldr	r3, [pc, #196]	; (8001368 <HAL_RCC_OscConfig+0x658>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b2:	4319      	orrs	r1, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b8:	430b      	orrs	r3, r1
 80012ba:	492b      	ldr	r1, [pc, #172]	; (8001368 <HAL_RCC_OscConfig+0x658>)
 80012bc:	4313      	orrs	r3, r2
 80012be:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012c0:	4b2a      	ldr	r3, [pc, #168]	; (800136c <HAL_RCC_OscConfig+0x65c>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c6:	f7ff fab7 	bl	8000838 <HAL_GetTick>
 80012ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80012cc:	e008      	b.n	80012e0 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012ce:	f7ff fab3 	bl	8000838 <HAL_GetTick>
 80012d2:	4602      	mov	r2, r0
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d901      	bls.n	80012e0 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e03e      	b.n	800135e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80012e0:	4b21      	ldr	r3, [pc, #132]	; (8001368 <HAL_RCC_OscConfig+0x658>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d0f0      	beq.n	80012ce <HAL_RCC_OscConfig+0x5be>
 80012ec:	e036      	b.n	800135c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012ee:	4b1f      	ldr	r3, [pc, #124]	; (800136c <HAL_RCC_OscConfig+0x65c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f4:	f7ff faa0 	bl	8000838 <HAL_GetTick>
 80012f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012fc:	f7ff fa9c 	bl	8000838 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e027      	b.n	800135e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800130e:	4b16      	ldr	r3, [pc, #88]	; (8001368 <HAL_RCC_OscConfig+0x658>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1f0      	bne.n	80012fc <HAL_RCC_OscConfig+0x5ec>
 800131a:	e01f      	b.n	800135c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001320:	2b01      	cmp	r3, #1
 8001322:	d101      	bne.n	8001328 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e01a      	b.n	800135e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001328:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <HAL_RCC_OscConfig+0x658>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001338:	429a      	cmp	r2, r3
 800133a:	d10d      	bne.n	8001358 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001346:	429a      	cmp	r2, r3
 8001348:	d106      	bne.n	8001358 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001354:	429a      	cmp	r2, r3
 8001356:	d001      	beq.n	800135c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e000      	b.n	800135e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3720      	adds	r7, #32
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40023800 	.word	0x40023800
 800136c:	42470060 	.word	0x42470060

08001370 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d101      	bne.n	8001384 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e11a      	b.n	80015ba <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001384:	4b8f      	ldr	r3, [pc, #572]	; (80015c4 <HAL_RCC_ClockConfig+0x254>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	429a      	cmp	r2, r3
 8001390:	d919      	bls.n	80013c6 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d105      	bne.n	80013a4 <HAL_RCC_ClockConfig+0x34>
 8001398:	4b8a      	ldr	r3, [pc, #552]	; (80015c4 <HAL_RCC_ClockConfig+0x254>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a89      	ldr	r2, [pc, #548]	; (80015c4 <HAL_RCC_ClockConfig+0x254>)
 800139e:	f043 0304 	orr.w	r3, r3, #4
 80013a2:	6013      	str	r3, [r2, #0]
 80013a4:	4b87      	ldr	r3, [pc, #540]	; (80015c4 <HAL_RCC_ClockConfig+0x254>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f023 0201 	bic.w	r2, r3, #1
 80013ac:	4985      	ldr	r1, [pc, #532]	; (80015c4 <HAL_RCC_ClockConfig+0x254>)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013b4:	4b83      	ldr	r3, [pc, #524]	; (80015c4 <HAL_RCC_ClockConfig+0x254>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	683a      	ldr	r2, [r7, #0]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d001      	beq.n	80013c6 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e0f9      	b.n	80015ba <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d008      	beq.n	80013e4 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013d2:	4b7d      	ldr	r3, [pc, #500]	; (80015c8 <HAL_RCC_ClockConfig+0x258>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	497a      	ldr	r1, [pc, #488]	; (80015c8 <HAL_RCC_ClockConfig+0x258>)
 80013e0:	4313      	orrs	r3, r2
 80013e2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0301 	and.w	r3, r3, #1
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f000 808e 	beq.w	800150e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d107      	bne.n	800140a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80013fa:	4b73      	ldr	r3, [pc, #460]	; (80015c8 <HAL_RCC_ClockConfig+0x258>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d121      	bne.n	800144a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e0d7      	b.n	80015ba <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	2b03      	cmp	r3, #3
 8001410:	d107      	bne.n	8001422 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001412:	4b6d      	ldr	r3, [pc, #436]	; (80015c8 <HAL_RCC_ClockConfig+0x258>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d115      	bne.n	800144a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e0cb      	b.n	80015ba <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d107      	bne.n	800143a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800142a:	4b67      	ldr	r3, [pc, #412]	; (80015c8 <HAL_RCC_ClockConfig+0x258>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d109      	bne.n	800144a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e0bf      	b.n	80015ba <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800143a:	4b63      	ldr	r3, [pc, #396]	; (80015c8 <HAL_RCC_ClockConfig+0x258>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e0b7      	b.n	80015ba <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800144a:	4b5f      	ldr	r3, [pc, #380]	; (80015c8 <HAL_RCC_ClockConfig+0x258>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f023 0203 	bic.w	r2, r3, #3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	495c      	ldr	r1, [pc, #368]	; (80015c8 <HAL_RCC_ClockConfig+0x258>)
 8001458:	4313      	orrs	r3, r2
 800145a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800145c:	f7ff f9ec 	bl	8000838 <HAL_GetTick>
 8001460:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	2b02      	cmp	r3, #2
 8001468:	d112      	bne.n	8001490 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800146a:	e00a      	b.n	8001482 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800146c:	f7ff f9e4 	bl	8000838 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	f241 3288 	movw	r2, #5000	; 0x1388
 800147a:	4293      	cmp	r3, r2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e09b      	b.n	80015ba <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001482:	4b51      	ldr	r3, [pc, #324]	; (80015c8 <HAL_RCC_ClockConfig+0x258>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f003 030c 	and.w	r3, r3, #12
 800148a:	2b08      	cmp	r3, #8
 800148c:	d1ee      	bne.n	800146c <HAL_RCC_ClockConfig+0xfc>
 800148e:	e03e      	b.n	800150e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	2b03      	cmp	r3, #3
 8001496:	d112      	bne.n	80014be <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001498:	e00a      	b.n	80014b0 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800149a:	f7ff f9cd 	bl	8000838 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d901      	bls.n	80014b0 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e084      	b.n	80015ba <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014b0:	4b45      	ldr	r3, [pc, #276]	; (80015c8 <HAL_RCC_ClockConfig+0x258>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f003 030c 	and.w	r3, r3, #12
 80014b8:	2b0c      	cmp	r3, #12
 80014ba:	d1ee      	bne.n	800149a <HAL_RCC_ClockConfig+0x12a>
 80014bc:	e027      	b.n	800150e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d11d      	bne.n	8001502 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80014c6:	e00a      	b.n	80014de <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014c8:	f7ff f9b6 	bl	8000838 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e06d      	b.n	80015ba <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80014de:	4b3a      	ldr	r3, [pc, #232]	; (80015c8 <HAL_RCC_ClockConfig+0x258>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f003 030c 	and.w	r3, r3, #12
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	d1ee      	bne.n	80014c8 <HAL_RCC_ClockConfig+0x158>
 80014ea:	e010      	b.n	800150e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014ec:	f7ff f9a4 	bl	8000838 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e05b      	b.n	80015ba <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001502:	4b31      	ldr	r3, [pc, #196]	; (80015c8 <HAL_RCC_ClockConfig+0x258>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f003 030c 	and.w	r3, r3, #12
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1ee      	bne.n	80014ec <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800150e:	4b2d      	ldr	r3, [pc, #180]	; (80015c4 <HAL_RCC_ClockConfig+0x254>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	683a      	ldr	r2, [r7, #0]
 8001518:	429a      	cmp	r2, r3
 800151a:	d219      	bcs.n	8001550 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d105      	bne.n	800152e <HAL_RCC_ClockConfig+0x1be>
 8001522:	4b28      	ldr	r3, [pc, #160]	; (80015c4 <HAL_RCC_ClockConfig+0x254>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a27      	ldr	r2, [pc, #156]	; (80015c4 <HAL_RCC_ClockConfig+0x254>)
 8001528:	f043 0304 	orr.w	r3, r3, #4
 800152c:	6013      	str	r3, [r2, #0]
 800152e:	4b25      	ldr	r3, [pc, #148]	; (80015c4 <HAL_RCC_ClockConfig+0x254>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f023 0201 	bic.w	r2, r3, #1
 8001536:	4923      	ldr	r1, [pc, #140]	; (80015c4 <HAL_RCC_ClockConfig+0x254>)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	4313      	orrs	r3, r2
 800153c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800153e:	4b21      	ldr	r3, [pc, #132]	; (80015c4 <HAL_RCC_ClockConfig+0x254>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	683a      	ldr	r2, [r7, #0]
 8001548:	429a      	cmp	r2, r3
 800154a:	d001      	beq.n	8001550 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e034      	b.n	80015ba <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0304 	and.w	r3, r3, #4
 8001558:	2b00      	cmp	r3, #0
 800155a:	d008      	beq.n	800156e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800155c:	4b1a      	ldr	r3, [pc, #104]	; (80015c8 <HAL_RCC_ClockConfig+0x258>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	4917      	ldr	r1, [pc, #92]	; (80015c8 <HAL_RCC_ClockConfig+0x258>)
 800156a:	4313      	orrs	r3, r2
 800156c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0308 	and.w	r3, r3, #8
 8001576:	2b00      	cmp	r3, #0
 8001578:	d009      	beq.n	800158e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800157a:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <HAL_RCC_ClockConfig+0x258>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	490f      	ldr	r1, [pc, #60]	; (80015c8 <HAL_RCC_ClockConfig+0x258>)
 800158a:	4313      	orrs	r3, r2
 800158c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800158e:	f000 f823 	bl	80015d8 <HAL_RCC_GetSysClockFreq>
 8001592:	4601      	mov	r1, r0
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <HAL_RCC_ClockConfig+0x258>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	091b      	lsrs	r3, r3, #4
 800159a:	f003 030f 	and.w	r3, r3, #15
 800159e:	4a0b      	ldr	r2, [pc, #44]	; (80015cc <HAL_RCC_ClockConfig+0x25c>)
 80015a0:	5cd3      	ldrb	r3, [r2, r3]
 80015a2:	fa21 f303 	lsr.w	r3, r1, r3
 80015a6:	4a0a      	ldr	r2, [pc, #40]	; (80015d0 <HAL_RCC_ClockConfig+0x260>)
 80015a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80015aa:	4b0a      	ldr	r3, [pc, #40]	; (80015d4 <HAL_RCC_ClockConfig+0x264>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff f8f6 	bl	80007a0 <HAL_InitTick>
 80015b4:	4603      	mov	r3, r0
 80015b6:	72fb      	strb	r3, [r7, #11]

  return status;
 80015b8:	7afb      	ldrb	r3, [r7, #11]
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40023c00 	.word	0x40023c00
 80015c8:	40023800 	.word	0x40023800
 80015cc:	08001950 	.word	0x08001950
 80015d0:	20000000 	.word	0x20000000
 80015d4:	20000004 	.word	0x20000004

080015d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015da:	b087      	sub	sp, #28
 80015dc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80015de:	4b4b      	ldr	r3, [pc, #300]	; (800170c <HAL_RCC_GetSysClockFreq+0x134>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f003 030c 	and.w	r3, r3, #12
 80015ea:	2b08      	cmp	r3, #8
 80015ec:	d006      	beq.n	80015fc <HAL_RCC_GetSysClockFreq+0x24>
 80015ee:	2b0c      	cmp	r3, #12
 80015f0:	d007      	beq.n	8001602 <HAL_RCC_GetSysClockFreq+0x2a>
 80015f2:	2b04      	cmp	r3, #4
 80015f4:	d176      	bne.n	80016e4 <HAL_RCC_GetSysClockFreq+0x10c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015f6:	4b46      	ldr	r3, [pc, #280]	; (8001710 <HAL_RCC_GetSysClockFreq+0x138>)
 80015f8:	613b      	str	r3, [r7, #16]
      break;
 80015fa:	e081      	b.n	8001700 <HAL_RCC_GetSysClockFreq+0x128>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015fc:	4b45      	ldr	r3, [pc, #276]	; (8001714 <HAL_RCC_GetSysClockFreq+0x13c>)
 80015fe:	613b      	str	r3, [r7, #16]
      break;
 8001600:	e07e      	b.n	8001700 <HAL_RCC_GetSysClockFreq+0x128>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	0c9b      	lsrs	r3, r3, #18
 8001606:	f003 030f 	and.w	r3, r3, #15
 800160a:	4a43      	ldr	r2, [pc, #268]	; (8001718 <HAL_RCC_GetSysClockFreq+0x140>)
 800160c:	5cd3      	ldrb	r3, [r2, r3]
 800160e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	0d9b      	lsrs	r3, r3, #22
 8001614:	f003 0303 	and.w	r3, r3, #3
 8001618:	3301      	adds	r3, #1
 800161a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800161c:	4b3b      	ldr	r3, [pc, #236]	; (800170c <HAL_RCC_GetSysClockFreq+0x134>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d019      	beq.n	800165c <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	f04f 0400 	mov.w	r4, #0
 800162e:	4a39      	ldr	r2, [pc, #228]	; (8001714 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001630:	fb02 f104 	mul.w	r1, r2, r4
 8001634:	2200      	movs	r2, #0
 8001636:	fb02 f203 	mul.w	r2, r2, r3
 800163a:	440a      	add	r2, r1
 800163c:	4935      	ldr	r1, [pc, #212]	; (8001714 <HAL_RCC_GetSysClockFreq+0x13c>)
 800163e:	fba3 0101 	umull	r0, r1, r3, r1
 8001642:	1853      	adds	r3, r2, r1
 8001644:	4619      	mov	r1, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f04f 0400 	mov.w	r4, #0
 800164c:	461a      	mov	r2, r3
 800164e:	4623      	mov	r3, r4
 8001650:	f7fe fd94 	bl	800017c <__aeabi_uldivmod>
 8001654:	4603      	mov	r3, r0
 8001656:	460c      	mov	r4, r1
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	e040      	b.n	80016de <HAL_RCC_GetSysClockFreq+0x106>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	461d      	mov	r5, r3
 8001660:	f04f 0600 	mov.w	r6, #0
 8001664:	4629      	mov	r1, r5
 8001666:	4632      	mov	r2, r6
 8001668:	f04f 0300 	mov.w	r3, #0
 800166c:	f04f 0400 	mov.w	r4, #0
 8001670:	0154      	lsls	r4, r2, #5
 8001672:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001676:	014b      	lsls	r3, r1, #5
 8001678:	4619      	mov	r1, r3
 800167a:	4622      	mov	r2, r4
 800167c:	1b49      	subs	r1, r1, r5
 800167e:	eb62 0206 	sbc.w	r2, r2, r6
 8001682:	f04f 0300 	mov.w	r3, #0
 8001686:	f04f 0400 	mov.w	r4, #0
 800168a:	0194      	lsls	r4, r2, #6
 800168c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001690:	018b      	lsls	r3, r1, #6
 8001692:	1a5b      	subs	r3, r3, r1
 8001694:	eb64 0402 	sbc.w	r4, r4, r2
 8001698:	f04f 0100 	mov.w	r1, #0
 800169c:	f04f 0200 	mov.w	r2, #0
 80016a0:	00e2      	lsls	r2, r4, #3
 80016a2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80016a6:	00d9      	lsls	r1, r3, #3
 80016a8:	460b      	mov	r3, r1
 80016aa:	4614      	mov	r4, r2
 80016ac:	195b      	adds	r3, r3, r5
 80016ae:	eb44 0406 	adc.w	r4, r4, r6
 80016b2:	f04f 0100 	mov.w	r1, #0
 80016b6:	f04f 0200 	mov.w	r2, #0
 80016ba:	02a2      	lsls	r2, r4, #10
 80016bc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80016c0:	0299      	lsls	r1, r3, #10
 80016c2:	460b      	mov	r3, r1
 80016c4:	4614      	mov	r4, r2
 80016c6:	4618      	mov	r0, r3
 80016c8:	4621      	mov	r1, r4
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f04f 0400 	mov.w	r4, #0
 80016d0:	461a      	mov	r2, r3
 80016d2:	4623      	mov	r3, r4
 80016d4:	f7fe fd52 	bl	800017c <__aeabi_uldivmod>
 80016d8:	4603      	mov	r3, r0
 80016da:	460c      	mov	r4, r1
 80016dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	613b      	str	r3, [r7, #16]
      break;
 80016e2:	e00d      	b.n	8001700 <HAL_RCC_GetSysClockFreq+0x128>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80016e4:	4b09      	ldr	r3, [pc, #36]	; (800170c <HAL_RCC_GetSysClockFreq+0x134>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	0b5b      	lsrs	r3, r3, #13
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	3301      	adds	r3, #1
 80016f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	613b      	str	r3, [r7, #16]
      break;
 80016fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001700:	693b      	ldr	r3, [r7, #16]
}
 8001702:	4618      	mov	r0, r3
 8001704:	371c      	adds	r7, #28
 8001706:	46bd      	mov	sp, r7
 8001708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800170a:	bf00      	nop
 800170c:	40023800 	.word	0x40023800
 8001710:	00f42400 	.word	0x00f42400
 8001714:	016e3600 	.word	0x016e3600
 8001718:	08001944 	.word	0x08001944

0800171c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800171c:	b480      	push	{r7}
 800171e:	b087      	sub	sp, #28
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001724:	2300      	movs	r3, #0
 8001726:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001728:	4b29      	ldr	r3, [pc, #164]	; (80017d0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d12c      	bne.n	800178e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001734:	4b26      	ldr	r3, [pc, #152]	; (80017d0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d005      	beq.n	800174c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001740:	4b24      	ldr	r3, [pc, #144]	; (80017d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001748:	617b      	str	r3, [r7, #20]
 800174a:	e016      	b.n	800177a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800174c:	4b20      	ldr	r3, [pc, #128]	; (80017d0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800174e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001750:	4a1f      	ldr	r2, [pc, #124]	; (80017d0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001756:	6253      	str	r3, [r2, #36]	; 0x24
 8001758:	4b1d      	ldr	r3, [pc, #116]	; (80017d0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800175a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001764:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800176c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800176e:	4b18      	ldr	r3, [pc, #96]	; (80017d0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001772:	4a17      	ldr	r2, [pc, #92]	; (80017d0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001774:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001778:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001780:	d105      	bne.n	800178e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001788:	d101      	bne.n	800178e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800178a:	2301      	movs	r3, #1
 800178c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d105      	bne.n	80017a0 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001794:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a0f      	ldr	r2, [pc, #60]	; (80017d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800179a:	f043 0304 	orr.w	r3, r3, #4
 800179e:	6013      	str	r3, [r2, #0]
 80017a0:	4b0d      	ldr	r3, [pc, #52]	; (80017d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f023 0201 	bic.w	r2, r3, #1
 80017a8:	490b      	ldr	r1, [pc, #44]	; (80017d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80017b0:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d001      	beq.n	80017c2 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e000      	b.n	80017c4 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	371c      	adds	r7, #28
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40007000 	.word	0x40007000
 80017d8:	40023c00 	.word	0x40023c00

080017dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e06e      	b.n	80018cc <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d108      	bne.n	8001808 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80017fe:	d009      	beq.n	8001814 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	61da      	str	r2, [r3, #28]
 8001806:	e005      	b.n	8001814 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	d106      	bne.n	8001834 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7fe fefe 	bl	8000630 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2202      	movs	r2, #2
 8001838:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800184a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800185c:	431a      	orrs	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001866:	431a      	orrs	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	431a      	orrs	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	695b      	ldr	r3, [r3, #20]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	431a      	orrs	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001884:	431a      	orrs	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800188e:	431a      	orrs	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a1b      	ldr	r3, [r3, #32]
 8001894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001898:	ea42 0103 	orr.w	r1, r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	430a      	orrs	r2, r1
 80018aa:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	0c1a      	lsrs	r2, r3, #16
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f002 0204 	and.w	r2, r2, #4
 80018ba:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2201      	movs	r2, #1
 80018c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <__libc_init_array>:
 80018d4:	b570      	push	{r4, r5, r6, lr}
 80018d6:	2500      	movs	r5, #0
 80018d8:	4e0c      	ldr	r6, [pc, #48]	; (800190c <__libc_init_array+0x38>)
 80018da:	4c0d      	ldr	r4, [pc, #52]	; (8001910 <__libc_init_array+0x3c>)
 80018dc:	1ba4      	subs	r4, r4, r6
 80018de:	10a4      	asrs	r4, r4, #2
 80018e0:	42a5      	cmp	r5, r4
 80018e2:	d109      	bne.n	80018f8 <__libc_init_array+0x24>
 80018e4:	f000 f822 	bl	800192c <_init>
 80018e8:	2500      	movs	r5, #0
 80018ea:	4e0a      	ldr	r6, [pc, #40]	; (8001914 <__libc_init_array+0x40>)
 80018ec:	4c0a      	ldr	r4, [pc, #40]	; (8001918 <__libc_init_array+0x44>)
 80018ee:	1ba4      	subs	r4, r4, r6
 80018f0:	10a4      	asrs	r4, r4, #2
 80018f2:	42a5      	cmp	r5, r4
 80018f4:	d105      	bne.n	8001902 <__libc_init_array+0x2e>
 80018f6:	bd70      	pop	{r4, r5, r6, pc}
 80018f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80018fc:	4798      	blx	r3
 80018fe:	3501      	adds	r5, #1
 8001900:	e7ee      	b.n	80018e0 <__libc_init_array+0xc>
 8001902:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001906:	4798      	blx	r3
 8001908:	3501      	adds	r5, #1
 800190a:	e7f2      	b.n	80018f2 <__libc_init_array+0x1e>
 800190c:	08001968 	.word	0x08001968
 8001910:	08001968 	.word	0x08001968
 8001914:	08001968 	.word	0x08001968
 8001918:	0800196c 	.word	0x0800196c

0800191c <memset>:
 800191c:	4603      	mov	r3, r0
 800191e:	4402      	add	r2, r0
 8001920:	4293      	cmp	r3, r2
 8001922:	d100      	bne.n	8001926 <memset+0xa>
 8001924:	4770      	bx	lr
 8001926:	f803 1b01 	strb.w	r1, [r3], #1
 800192a:	e7f9      	b.n	8001920 <memset+0x4>

0800192c <_init>:
 800192c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800192e:	bf00      	nop
 8001930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001932:	bc08      	pop	{r3}
 8001934:	469e      	mov	lr, r3
 8001936:	4770      	bx	lr

08001938 <_fini>:
 8001938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800193a:	bf00      	nop
 800193c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800193e:	bc08      	pop	{r3}
 8001940:	469e      	mov	lr, r3
 8001942:	4770      	bx	lr
