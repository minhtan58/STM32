
H747_SDI12_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067b0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08006a48  08006a48  00016a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b00  08006b00  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006b00  08006b00  00016b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b08  08006b08  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b08  08006b08  00016b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b0c  08006b0c  00016b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  08006b10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  24000074  08006b84  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240001d0  08006b84  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019199  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d21  00000000  00000000  0003923b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c70  00000000  00000000  0003bf60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b98  00000000  00000000  0003cbd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003f272  00000000  00000000  0003d768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000101aa  00000000  00000000  0007c9da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00194ccd  00000000  00000000  0008cb84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00221851  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038ec  00000000  00000000  002218a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000074 	.word	0x24000074
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006a30 	.word	0x08006a30

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000078 	.word	0x24000078
 80002d4:	08006a30 	.word	0x08006a30

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <__io_putchar>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_UART8_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar (int ch) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	uint8_t c = ch;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	b2db      	uxtb	r3, r3
 8000710:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, &c, 1, 1000);
 8000712:	f107 010f 	add.w	r1, r7, #15
 8000716:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800071a:	2201      	movs	r2, #1
 800071c:	4803      	ldr	r0, [pc, #12]	; (800072c <__io_putchar+0x28>)
 800071e:	f004 f8cd 	bl	80048bc <HAL_UART_Transmit>
	return ch;
 8000722:	687b      	ldr	r3, [r7, #4]
}
 8000724:	4618      	mov	r0, r3
 8000726:	3710      	adds	r7, #16
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	2400009c 	.word	0x2400009c

08000730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000736:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800073a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800073c:	bf00      	nop
 800073e:	4b26      	ldr	r3, [pc, #152]	; (80007d8 <main+0xa8>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000746:	2b00      	cmp	r3, #0
 8000748:	d004      	beq.n	8000754 <main+0x24>
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	1e5a      	subs	r2, r3, #1
 800074e:	607a      	str	r2, [r7, #4]
 8000750:	2b00      	cmp	r3, #0
 8000752:	dcf4      	bgt.n	800073e <main+0xe>
  if ( timeout < 0 )
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2b00      	cmp	r3, #0
 8000758:	da01      	bge.n	800075e <main+0x2e>
  {
  Error_Handler();
 800075a:	f000 f97d 	bl	8000a58 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075e:	f000 fb6b 	bl	8000e38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000762:	f000 f83d 	bl	80007e0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000766:	4b1c      	ldr	r3, [pc, #112]	; (80007d8 <main+0xa8>)
 8000768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800076c:	4a1a      	ldr	r2, [pc, #104]	; (80007d8 <main+0xa8>)
 800076e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000772:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000776:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <main+0xa8>)
 8000778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800077c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000780:	603b      	str	r3, [r7, #0]
 8000782:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000784:	2000      	movs	r0, #0
 8000786:	f001 fc3b 	bl	8002000 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800078a:	2100      	movs	r1, #0
 800078c:	2000      	movs	r0, #0
 800078e:	f001 fc51 	bl	8002034 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000792:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000796:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000798:	bf00      	nop
 800079a:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <main+0xa8>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d104      	bne.n	80007b0 <main+0x80>
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	1e5a      	subs	r2, r3, #1
 80007aa:	607a      	str	r2, [r7, #4]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	dcf4      	bgt.n	800079a <main+0x6a>
if ( timeout < 0 )
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	da01      	bge.n	80007ba <main+0x8a>
{
Error_Handler();
 80007b6:	f000 f94f 	bl	8000a58 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ba:	f000 f915 	bl	80009e8 <MX_GPIO_Init>
  MX_UART8_Init();
 80007be:	f000 f87b 	bl	80008b8 <MX_UART8_Init>
  MX_USART1_UART_Init();
 80007c2:	f000 f8c5 	bl	8000950 <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
		printf("=====Tran Minh Tan=====\r\n");
 80007c6:	4805      	ldr	r0, [pc, #20]	; (80007dc <main+0xac>)
 80007c8:	f005 fcda 	bl	8006180 <puts>
		HAL_Delay(1000);
 80007cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007d0:	f000 fbc4 	bl	8000f5c <HAL_Delay>
		printf("=====Tran Minh Tan=====\r\n");
 80007d4:	e7f7      	b.n	80007c6 <main+0x96>
 80007d6:	bf00      	nop
 80007d8:	58024400 	.word	0x58024400
 80007dc:	08006a48 	.word	0x08006a48

080007e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b09c      	sub	sp, #112	; 0x70
 80007e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ea:	224c      	movs	r2, #76	; 0x4c
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f005 fc50 	bl	8006094 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	2220      	movs	r2, #32
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f005 fc4a 	bl	8006094 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000800:	2004      	movs	r0, #4
 8000802:	f001 fc2b 	bl	800205c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000806:	2300      	movs	r3, #0
 8000808:	603b      	str	r3, [r7, #0]
 800080a:	4b29      	ldr	r3, [pc, #164]	; (80008b0 <SystemClock_Config+0xd0>)
 800080c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800080e:	4a28      	ldr	r2, [pc, #160]	; (80008b0 <SystemClock_Config+0xd0>)
 8000810:	f023 0301 	bic.w	r3, r3, #1
 8000814:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000816:	4b26      	ldr	r3, [pc, #152]	; (80008b0 <SystemClock_Config+0xd0>)
 8000818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	4b24      	ldr	r3, [pc, #144]	; (80008b4 <SystemClock_Config+0xd4>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000828:	4a22      	ldr	r2, [pc, #136]	; (80008b4 <SystemClock_Config+0xd4>)
 800082a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800082e:	6193      	str	r3, [r2, #24]
 8000830:	4b20      	ldr	r3, [pc, #128]	; (80008b4 <SystemClock_Config+0xd4>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000838:	603b      	str	r3, [r7, #0]
 800083a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800083c:	bf00      	nop
 800083e:	4b1d      	ldr	r3, [pc, #116]	; (80008b4 <SystemClock_Config+0xd4>)
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000846:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800084a:	d1f8      	bne.n	800083e <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800084c:	2302      	movs	r3, #2
 800084e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000850:	2301      	movs	r3, #1
 8000852:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000854:	2340      	movs	r3, #64	; 0x40
 8000856:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000858:	2300      	movs	r3, #0
 800085a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000860:	4618      	mov	r0, r3
 8000862:	f001 fc55 	bl	8002110 <HAL_RCC_OscConfig>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800086c:	f000 f8f4 	bl	8000a58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000870:	233f      	movs	r3, #63	; 0x3f
 8000872:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000874:	2300      	movs	r3, #0
 8000876:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000878:	2300      	movs	r3, #0
 800087a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800087c:	2300      	movs	r3, #0
 800087e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000884:	2340      	movs	r3, #64	; 0x40
 8000886:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000888:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800088c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800088e:	2300      	movs	r3, #0
 8000890:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	2101      	movs	r1, #1
 8000896:	4618      	mov	r0, r3
 8000898:	f002 f84a 	bl	8002930 <HAL_RCC_ClockConfig>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008a2:	f000 f8d9 	bl	8000a58 <Error_Handler>
  }
}
 80008a6:	bf00      	nop
 80008a8:	3770      	adds	r7, #112	; 0x70
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	58000400 	.word	0x58000400
 80008b4:	58024800 	.word	0x58024800

080008b8 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80008bc:	4b22      	ldr	r3, [pc, #136]	; (8000948 <MX_UART8_Init+0x90>)
 80008be:	4a23      	ldr	r2, [pc, #140]	; (800094c <MX_UART8_Init+0x94>)
 80008c0:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80008c2:	4b21      	ldr	r3, [pc, #132]	; (8000948 <MX_UART8_Init+0x90>)
 80008c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c8:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80008ca:	4b1f      	ldr	r3, [pc, #124]	; (8000948 <MX_UART8_Init+0x90>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80008d0:	4b1d      	ldr	r3, [pc, #116]	; (8000948 <MX_UART8_Init+0x90>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80008d6:	4b1c      	ldr	r3, [pc, #112]	; (8000948 <MX_UART8_Init+0x90>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80008dc:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <MX_UART8_Init+0x90>)
 80008de:	220c      	movs	r2, #12
 80008e0:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e2:	4b19      	ldr	r3, [pc, #100]	; (8000948 <MX_UART8_Init+0x90>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e8:	4b17      	ldr	r3, [pc, #92]	; (8000948 <MX_UART8_Init+0x90>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ee:	4b16      	ldr	r3, [pc, #88]	; (8000948 <MX_UART8_Init+0x90>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008f4:	4b14      	ldr	r3, [pc, #80]	; (8000948 <MX_UART8_Init+0x90>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008fa:	4b13      	ldr	r3, [pc, #76]	; (8000948 <MX_UART8_Init+0x90>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart8) != HAL_OK)
 8000900:	4811      	ldr	r0, [pc, #68]	; (8000948 <MX_UART8_Init+0x90>)
 8000902:	f003 ff83 	bl	800480c <HAL_HalfDuplex_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 800090c:	f000 f8a4 	bl	8000a58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000910:	2100      	movs	r1, #0
 8000912:	480d      	ldr	r0, [pc, #52]	; (8000948 <MX_UART8_Init+0x90>)
 8000914:	f005 fac9 	bl	8005eaa <HAL_UARTEx_SetTxFifoThreshold>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 800091e:	f000 f89b 	bl	8000a58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000922:	2100      	movs	r1, #0
 8000924:	4808      	ldr	r0, [pc, #32]	; (8000948 <MX_UART8_Init+0x90>)
 8000926:	f005 fafe 	bl	8005f26 <HAL_UARTEx_SetRxFifoThreshold>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8000930:	f000 f892 	bl	8000a58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000934:	4804      	ldr	r0, [pc, #16]	; (8000948 <MX_UART8_Init+0x90>)
 8000936:	f005 fa7f 	bl	8005e38 <HAL_UARTEx_DisableFifoMode>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8000940:	f000 f88a 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	2400012c 	.word	0x2400012c
 800094c:	40007c00 	.word	0x40007c00

08000950 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000954:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <MX_USART1_UART_Init+0x90>)
 8000956:	4a23      	ldr	r2, [pc, #140]	; (80009e4 <MX_USART1_UART_Init+0x94>)
 8000958:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800095a:	4b21      	ldr	r3, [pc, #132]	; (80009e0 <MX_USART1_UART_Init+0x90>)
 800095c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000960:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000962:	4b1f      	ldr	r3, [pc, #124]	; (80009e0 <MX_USART1_UART_Init+0x90>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000968:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <MX_USART1_UART_Init+0x90>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800096e:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <MX_USART1_UART_Init+0x90>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000974:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <MX_USART1_UART_Init+0x90>)
 8000976:	220c      	movs	r2, #12
 8000978:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097a:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <MX_USART1_UART_Init+0x90>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000980:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <MX_USART1_UART_Init+0x90>)
 8000982:	2200      	movs	r2, #0
 8000984:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000986:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <MX_USART1_UART_Init+0x90>)
 8000988:	2200      	movs	r2, #0
 800098a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <MX_USART1_UART_Init+0x90>)
 800098e:	2200      	movs	r2, #0
 8000990:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000992:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <MX_USART1_UART_Init+0x90>)
 8000994:	2200      	movs	r2, #0
 8000996:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000998:	4811      	ldr	r0, [pc, #68]	; (80009e0 <MX_USART1_UART_Init+0x90>)
 800099a:	f003 fee7 	bl	800476c <HAL_UART_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80009a4:	f000 f858 	bl	8000a58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a8:	2100      	movs	r1, #0
 80009aa:	480d      	ldr	r0, [pc, #52]	; (80009e0 <MX_USART1_UART_Init+0x90>)
 80009ac:	f005 fa7d 	bl	8005eaa <HAL_UARTEx_SetTxFifoThreshold>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009b6:	f000 f84f 	bl	8000a58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ba:	2100      	movs	r1, #0
 80009bc:	4808      	ldr	r0, [pc, #32]	; (80009e0 <MX_USART1_UART_Init+0x90>)
 80009be:	f005 fab2 	bl	8005f26 <HAL_UARTEx_SetRxFifoThreshold>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80009c8:	f000 f846 	bl	8000a58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009cc:	4804      	ldr	r0, [pc, #16]	; (80009e0 <MX_USART1_UART_Init+0x90>)
 80009ce:	f005 fa33 	bl	8005e38 <HAL_UARTEx_DisableFifoMode>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80009d8:	f000 f83e 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	2400009c 	.word	0x2400009c
 80009e4:	40011000 	.word	0x40011000

080009e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ee:	4b19      	ldr	r3, [pc, #100]	; (8000a54 <MX_GPIO_Init+0x6c>)
 80009f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f4:	4a17      	ldr	r2, [pc, #92]	; (8000a54 <MX_GPIO_Init+0x6c>)
 80009f6:	f043 0301 	orr.w	r3, r3, #1
 80009fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009fe:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <MX_GPIO_Init+0x6c>)
 8000a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a04:	f003 0301 	and.w	r3, r3, #1
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a0c:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <MX_GPIO_Init+0x6c>)
 8000a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a12:	4a10      	ldr	r2, [pc, #64]	; (8000a54 <MX_GPIO_Init+0x6c>)
 8000a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a1c:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <MX_GPIO_Init+0x6c>)
 8000a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000a2a:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <MX_GPIO_Init+0x6c>)
 8000a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a30:	4a08      	ldr	r2, [pc, #32]	; (8000a54 <MX_GPIO_Init+0x6c>)
 8000a32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <MX_GPIO_Init+0x6c>)
 8000a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	687b      	ldr	r3, [r7, #4]

}
 8000a48:	bf00      	nop
 8000a4a:	3714      	adds	r7, #20
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	58024400 	.word	0x58024400

08000a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
	...

08000a68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6e:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <HAL_MspInit+0x30>)
 8000a70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a74:	4a08      	ldr	r2, [pc, #32]	; (8000a98 <HAL_MspInit+0x30>)
 8000a76:	f043 0302 	orr.w	r3, r3, #2
 8000a7a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <HAL_MspInit+0x30>)
 8000a80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a84:	f003 0302 	and.w	r3, r3, #2
 8000a88:	607b      	str	r3, [r7, #4]
 8000a8a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	58024400 	.word	0x58024400

08000a9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b0bc      	sub	sp, #240	; 0xf0
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	22c0      	movs	r2, #192	; 0xc0
 8000aba:	2100      	movs	r1, #0
 8000abc:	4618      	mov	r0, r3
 8000abe:	f005 fae9 	bl	8006094 <memset>
  if(huart->Instance==UART8)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a51      	ldr	r2, [pc, #324]	; (8000c0c <HAL_UART_MspInit+0x170>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d14b      	bne.n	8000b64 <HAL_UART_MspInit+0xc8>
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8000acc:	2302      	movs	r3, #2
 8000ace:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ad6:	f107 031c 	add.w	r3, r7, #28
 8000ada:	4618      	mov	r0, r3
 8000adc:	f002 fab4 	bl	8003048 <HAL_RCCEx_PeriphCLKConfig>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ae6:	f7ff ffb7 	bl	8000a58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8000aea:	4b49      	ldr	r3, [pc, #292]	; (8000c10 <HAL_UART_MspInit+0x174>)
 8000aec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000af0:	4a47      	ldr	r2, [pc, #284]	; (8000c10 <HAL_UART_MspInit+0x174>)
 8000af2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000afa:	4b45      	ldr	r3, [pc, #276]	; (8000c10 <HAL_UART_MspInit+0x174>)
 8000afc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000b04:	61bb      	str	r3, [r7, #24]
 8000b06:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000b08:	4b41      	ldr	r3, [pc, #260]	; (8000c10 <HAL_UART_MspInit+0x174>)
 8000b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b0e:	4a40      	ldr	r2, [pc, #256]	; (8000c10 <HAL_UART_MspInit+0x174>)
 8000b10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b18:	4b3d      	ldr	r3, [pc, #244]	; (8000c10 <HAL_UART_MspInit+0x174>)
 8000b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b22:	617b      	str	r3, [r7, #20]
 8000b24:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PJ8     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b2e:	2312      	movs	r3, #18
 8000b30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8000b40:	2308      	movs	r3, #8
 8000b42:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000b46:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4831      	ldr	r0, [pc, #196]	; (8000c14 <HAL_UART_MspInit+0x178>)
 8000b4e:	f001 f8a7 	bl	8001ca0 <HAL_GPIO_Init>

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2100      	movs	r1, #0
 8000b56:	2053      	movs	r0, #83	; 0x53
 8000b58:	f000 fb0b 	bl	8001172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8000b5c:	2053      	movs	r0, #83	; 0x53
 8000b5e:	f000 fb22 	bl	80011a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b62:	e04f      	b.n	8000c04 <HAL_UART_MspInit+0x168>
  else if(huart->Instance==USART1)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a2b      	ldr	r2, [pc, #172]	; (8000c18 <HAL_UART_MspInit+0x17c>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d14a      	bne.n	8000c04 <HAL_UART_MspInit+0x168>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000b72:	2300      	movs	r3, #0
 8000b74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b78:	f107 031c 	add.w	r3, r7, #28
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f002 fa63 	bl	8003048 <HAL_RCCEx_PeriphCLKConfig>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8000b88:	f7ff ff66 	bl	8000a58 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b8c:	4b20      	ldr	r3, [pc, #128]	; (8000c10 <HAL_UART_MspInit+0x174>)
 8000b8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000b92:	4a1f      	ldr	r2, [pc, #124]	; (8000c10 <HAL_UART_MspInit+0x174>)
 8000b94:	f043 0310 	orr.w	r3, r3, #16
 8000b98:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000b9c:	4b1c      	ldr	r3, [pc, #112]	; (8000c10 <HAL_UART_MspInit+0x174>)
 8000b9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ba2:	f003 0310 	and.w	r3, r3, #16
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	4b19      	ldr	r3, [pc, #100]	; (8000c10 <HAL_UART_MspInit+0x174>)
 8000bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb0:	4a17      	ldr	r2, [pc, #92]	; (8000c10 <HAL_UART_MspInit+0x174>)
 8000bb2:	f043 0301 	orr.w	r3, r3, #1
 8000bb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bba:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <HAL_UART_MspInit+0x174>)
 8000bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc0:	f003 0301 	and.w	r3, r3, #1
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000bc8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bcc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000be2:	2307      	movs	r3, #7
 8000be4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000bec:	4619      	mov	r1, r3
 8000bee:	480b      	ldr	r0, [pc, #44]	; (8000c1c <HAL_UART_MspInit+0x180>)
 8000bf0:	f001 f856 	bl	8001ca0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	2025      	movs	r0, #37	; 0x25
 8000bfa:	f000 faba 	bl	8001172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bfe:	2025      	movs	r0, #37	; 0x25
 8000c00:	f000 fad1 	bl	80011a6 <HAL_NVIC_EnableIRQ>
}
 8000c04:	bf00      	nop
 8000c06:	37f0      	adds	r7, #240	; 0xf0
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40007c00 	.word	0x40007c00
 8000c10:	58024400 	.word	0x58024400
 8000c14:	58022400 	.word	0x58022400
 8000c18:	40011000 	.word	0x40011000
 8000c1c:	58020000 	.word	0x58020000

08000c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <NMI_Handler+0x4>

08000c26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <HardFault_Handler+0x4>

08000c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <MemManage_Handler+0x4>

08000c32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <BusFault_Handler+0x4>

08000c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <UsageFault_Handler+0x4>

08000c3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c6c:	f000 f956 	bl	8000f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c78:	4802      	ldr	r0, [pc, #8]	; (8000c84 <USART1_IRQHandler+0x10>)
 8000c7a:	f003 feb5 	bl	80049e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	2400009c 	.word	0x2400009c

08000c88 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8000c8c:	4802      	ldr	r0, [pc, #8]	; (8000c98 <UART8_IRQHandler+0x10>)
 8000c8e:	f003 feab 	bl	80049e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	2400012c 	.word	0x2400012c

08000c9c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]
 8000cac:	e00a      	b.n	8000cc4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cae:	f3af 8000 	nop.w
 8000cb2:	4601      	mov	r1, r0
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	1c5a      	adds	r2, r3, #1
 8000cb8:	60ba      	str	r2, [r7, #8]
 8000cba:	b2ca      	uxtb	r2, r1
 8000cbc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	617b      	str	r3, [r7, #20]
 8000cc4:	697a      	ldr	r2, [r7, #20]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	dbf0      	blt.n	8000cae <_read+0x12>
	}

return len;
 8000ccc:	687b      	ldr	r3, [r7, #4]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3718      	adds	r7, #24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b086      	sub	sp, #24
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	60f8      	str	r0, [r7, #12]
 8000cde:	60b9      	str	r1, [r7, #8]
 8000ce0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]
 8000ce6:	e009      	b.n	8000cfc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	1c5a      	adds	r2, r3, #1
 8000cec:	60ba      	str	r2, [r7, #8]
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fd07 	bl	8000704 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	617b      	str	r3, [r7, #20]
 8000cfc:	697a      	ldr	r2, [r7, #20]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	dbf1      	blt.n	8000ce8 <_write+0x12>
	}
	return len;
 8000d04:	687b      	ldr	r3, [r7, #4]
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3718      	adds	r7, #24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <_close>:

int _close(int file)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	b083      	sub	sp, #12
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
	return -1;
 8000d16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d26:	b480      	push	{r7}
 8000d28:	b083      	sub	sp, #12
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
 8000d2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d36:	605a      	str	r2, [r3, #4]
	return 0;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <_isatty>:

int _isatty(int file)
{
 8000d46:	b480      	push	{r7}
 8000d48:	b083      	sub	sp, #12
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
	return 1;
 8000d4e:	2301      	movs	r3, #1
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
	return 0;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3714      	adds	r7, #20
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
	...

08000d78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d80:	4a14      	ldr	r2, [pc, #80]	; (8000dd4 <_sbrk+0x5c>)
 8000d82:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <_sbrk+0x60>)
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d8c:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <_sbrk+0x64>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d102      	bne.n	8000d9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d94:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <_sbrk+0x64>)
 8000d96:	4a12      	ldr	r2, [pc, #72]	; (8000de0 <_sbrk+0x68>)
 8000d98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d9a:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <_sbrk+0x64>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4413      	add	r3, r2
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d207      	bcs.n	8000db8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000da8:	f005 f94a 	bl	8006040 <__errno>
 8000dac:	4603      	mov	r3, r0
 8000dae:	220c      	movs	r2, #12
 8000db0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000db2:	f04f 33ff 	mov.w	r3, #4294967295
 8000db6:	e009      	b.n	8000dcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000db8:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <_sbrk+0x64>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dbe:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <_sbrk+0x64>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	4a05      	ldr	r2, [pc, #20]	; (8000ddc <_sbrk+0x64>)
 8000dc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dca:	68fb      	ldr	r3, [r7, #12]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3718      	adds	r7, #24
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	24040000 	.word	0x24040000
 8000dd8:	00000400 	.word	0x00000400
 8000ddc:	24000090 	.word	0x24000090
 8000de0:	240001d0 	.word	0x240001d0

08000de4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000de4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e1c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000de8:	f7ff fbf2 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dec:	480c      	ldr	r0, [pc, #48]	; (8000e20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dee:	490d      	ldr	r1, [pc, #52]	; (8000e24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000df0:	4a0d      	ldr	r2, [pc, #52]	; (8000e28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df4:	e002      	b.n	8000dfc <LoopCopyDataInit>

08000df6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfa:	3304      	adds	r3, #4

08000dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e00:	d3f9      	bcc.n	8000df6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e02:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e04:	4c0a      	ldr	r4, [pc, #40]	; (8000e30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e08:	e001      	b.n	8000e0e <LoopFillZerobss>

08000e0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e0c:	3204      	adds	r2, #4

08000e0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e10:	d3fb      	bcc.n	8000e0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e12:	f005 f91b 	bl	800604c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e16:	f7ff fc8b 	bl	8000730 <main>
  bx  lr
 8000e1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e1c:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8000e20:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e24:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8000e28:	08006b10 	.word	0x08006b10
  ldr r2, =_sbss
 8000e2c:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8000e30:	240001d0 	.word	0x240001d0

08000e34 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e34:	e7fe      	b.n	8000e34 <ADC3_IRQHandler>
	...

08000e38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e3e:	2003      	movs	r0, #3
 8000e40:	f000 f98c 	bl	800115c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e44:	f001 ff2a 	bl	8002c9c <HAL_RCC_GetSysClockFreq>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <HAL_Init+0x68>)
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	0a1b      	lsrs	r3, r3, #8
 8000e50:	f003 030f 	and.w	r3, r3, #15
 8000e54:	4913      	ldr	r1, [pc, #76]	; (8000ea4 <HAL_Init+0x6c>)
 8000e56:	5ccb      	ldrb	r3, [r1, r3]
 8000e58:	f003 031f 	and.w	r3, r3, #31
 8000e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e60:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e62:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <HAL_Init+0x68>)
 8000e64:	699b      	ldr	r3, [r3, #24]
 8000e66:	f003 030f 	and.w	r3, r3, #15
 8000e6a:	4a0e      	ldr	r2, [pc, #56]	; (8000ea4 <HAL_Init+0x6c>)
 8000e6c:	5cd3      	ldrb	r3, [r2, r3]
 8000e6e:	f003 031f 	and.w	r3, r3, #31
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	fa22 f303 	lsr.w	r3, r2, r3
 8000e78:	4a0b      	ldr	r2, [pc, #44]	; (8000ea8 <HAL_Init+0x70>)
 8000e7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e7c:	4a0b      	ldr	r2, [pc, #44]	; (8000eac <HAL_Init+0x74>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e82:	2000      	movs	r0, #0
 8000e84:	f000 f814 	bl	8000eb0 <HAL_InitTick>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e002      	b.n	8000e98 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e92:	f7ff fde9 	bl	8000a68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e96:	2300      	movs	r3, #0
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	58024400 	.word	0x58024400
 8000ea4:	08006a64 	.word	0x08006a64
 8000ea8:	24000004 	.word	0x24000004
 8000eac:	24000000 	.word	0x24000000

08000eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000eb8:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <HAL_InitTick+0x60>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d101      	bne.n	8000ec4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e021      	b.n	8000f08 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ec4:	4b13      	ldr	r3, [pc, #76]	; (8000f14 <HAL_InitTick+0x64>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <HAL_InitTick+0x60>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 f971 	bl	80011c2 <HAL_SYSTICK_Config>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e00e      	b.n	8000f08 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2b0f      	cmp	r3, #15
 8000eee:	d80a      	bhi.n	8000f06 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	6879      	ldr	r1, [r7, #4]
 8000ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef8:	f000 f93b 	bl	8001172 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000efc:	4a06      	ldr	r2, [pc, #24]	; (8000f18 <HAL_InitTick+0x68>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f02:	2300      	movs	r3, #0
 8000f04:	e000      	b.n	8000f08 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	2400000c 	.word	0x2400000c
 8000f14:	24000000 	.word	0x24000000
 8000f18:	24000008 	.word	0x24000008

08000f1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_IncTick+0x20>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	461a      	mov	r2, r3
 8000f26:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HAL_IncTick+0x24>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <HAL_IncTick+0x24>)
 8000f2e:	6013      	str	r3, [r2, #0]
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	2400000c 	.word	0x2400000c
 8000f40:	240001bc 	.word	0x240001bc

08000f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return uwTick;
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <HAL_GetTick+0x14>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	240001bc 	.word	0x240001bc

08000f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f64:	f7ff ffee 	bl	8000f44 <HAL_GetTick>
 8000f68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f74:	d005      	beq.n	8000f82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f76:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <HAL_Delay+0x44>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4413      	add	r3, r2
 8000f80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f82:	bf00      	nop
 8000f84:	f7ff ffde 	bl	8000f44 <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d8f7      	bhi.n	8000f84 <HAL_Delay+0x28>
  {
  }
}
 8000f94:	bf00      	nop
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	2400000c 	.word	0x2400000c

08000fa4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000fa8:	4b03      	ldr	r3, [pc, #12]	; (8000fb8 <HAL_GetREVID+0x14>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	0c1b      	lsrs	r3, r3, #16
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	5c001000 	.word	0x5c001000

08000fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fcc:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <__NVIC_SetPriorityGrouping+0x40>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd2:	68ba      	ldr	r2, [r7, #8]
 8000fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd8:	4013      	ands	r3, r2
 8000fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fea:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <__NVIC_SetPriorityGrouping+0x40>)
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	60d3      	str	r3, [r2, #12]
}
 8000ff0:	bf00      	nop
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000ed00 	.word	0xe000ed00
 8001000:	05fa0000 	.word	0x05fa0000

08001004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <__NVIC_GetPriorityGrouping+0x18>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	0a1b      	lsrs	r3, r3, #8
 800100e:	f003 0307 	and.w	r3, r3, #7
}
 8001012:	4618      	mov	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800102a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800102e:	2b00      	cmp	r3, #0
 8001030:	db0b      	blt.n	800104a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001032:	88fb      	ldrh	r3, [r7, #6]
 8001034:	f003 021f 	and.w	r2, r3, #31
 8001038:	4907      	ldr	r1, [pc, #28]	; (8001058 <__NVIC_EnableIRQ+0x38>)
 800103a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800103e:	095b      	lsrs	r3, r3, #5
 8001040:	2001      	movs	r0, #1
 8001042:	fa00 f202 	lsl.w	r2, r0, r2
 8001046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	e000e100 	.word	0xe000e100

0800105c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	6039      	str	r1, [r7, #0]
 8001066:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001068:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800106c:	2b00      	cmp	r3, #0
 800106e:	db0a      	blt.n	8001086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	b2da      	uxtb	r2, r3
 8001074:	490c      	ldr	r1, [pc, #48]	; (80010a8 <__NVIC_SetPriority+0x4c>)
 8001076:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800107a:	0112      	lsls	r2, r2, #4
 800107c:	b2d2      	uxtb	r2, r2
 800107e:	440b      	add	r3, r1
 8001080:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001084:	e00a      	b.n	800109c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	b2da      	uxtb	r2, r3
 800108a:	4908      	ldr	r1, [pc, #32]	; (80010ac <__NVIC_SetPriority+0x50>)
 800108c:	88fb      	ldrh	r3, [r7, #6]
 800108e:	f003 030f 	and.w	r3, r3, #15
 8001092:	3b04      	subs	r3, #4
 8001094:	0112      	lsls	r2, r2, #4
 8001096:	b2d2      	uxtb	r2, r2
 8001098:	440b      	add	r3, r1
 800109a:	761a      	strb	r2, [r3, #24]
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000e100 	.word	0xe000e100
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b089      	sub	sp, #36	; 0x24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	f1c3 0307 	rsb	r3, r3, #7
 80010ca:	2b04      	cmp	r3, #4
 80010cc:	bf28      	it	cs
 80010ce:	2304      	movcs	r3, #4
 80010d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	3304      	adds	r3, #4
 80010d6:	2b06      	cmp	r3, #6
 80010d8:	d902      	bls.n	80010e0 <NVIC_EncodePriority+0x30>
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	3b03      	subs	r3, #3
 80010de:	e000      	b.n	80010e2 <NVIC_EncodePriority+0x32>
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e4:	f04f 32ff 	mov.w	r2, #4294967295
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43da      	mvns	r2, r3
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	401a      	ands	r2, r3
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f8:	f04f 31ff 	mov.w	r1, #4294967295
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001102:	43d9      	mvns	r1, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001108:	4313      	orrs	r3, r2
         );
}
 800110a:	4618      	mov	r0, r3
 800110c:	3724      	adds	r7, #36	; 0x24
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
	...

08001118 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3b01      	subs	r3, #1
 8001124:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001128:	d301      	bcc.n	800112e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800112a:	2301      	movs	r3, #1
 800112c:	e00f      	b.n	800114e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800112e:	4a0a      	ldr	r2, [pc, #40]	; (8001158 <SysTick_Config+0x40>)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3b01      	subs	r3, #1
 8001134:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001136:	210f      	movs	r1, #15
 8001138:	f04f 30ff 	mov.w	r0, #4294967295
 800113c:	f7ff ff8e 	bl	800105c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001140:	4b05      	ldr	r3, [pc, #20]	; (8001158 <SysTick_Config+0x40>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001146:	4b04      	ldr	r3, [pc, #16]	; (8001158 <SysTick_Config+0x40>)
 8001148:	2207      	movs	r2, #7
 800114a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	e000e010 	.word	0xe000e010

0800115c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff ff29 	bl	8000fbc <__NVIC_SetPriorityGrouping>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b086      	sub	sp, #24
 8001176:	af00      	add	r7, sp, #0
 8001178:	4603      	mov	r3, r0
 800117a:	60b9      	str	r1, [r7, #8]
 800117c:	607a      	str	r2, [r7, #4]
 800117e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001180:	f7ff ff40 	bl	8001004 <__NVIC_GetPriorityGrouping>
 8001184:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	68b9      	ldr	r1, [r7, #8]
 800118a:	6978      	ldr	r0, [r7, #20]
 800118c:	f7ff ff90 	bl	80010b0 <NVIC_EncodePriority>
 8001190:	4602      	mov	r2, r0
 8001192:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001196:	4611      	mov	r1, r2
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff ff5f 	bl	800105c <__NVIC_SetPriority>
}
 800119e:	bf00      	nop
 80011a0:	3718      	adds	r7, #24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	4603      	mov	r3, r0
 80011ae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff33 	bl	8001020 <__NVIC_EnableIRQ>
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff ffa4 	bl	8001118 <SysTick_Config>
 80011d0:	4603      	mov	r3, r0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80011e4:	f7ff feae 	bl	8000f44 <HAL_GetTick>
 80011e8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d101      	bne.n	80011f4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e2dc      	b.n	80017ae <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d008      	beq.n	8001212 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2280      	movs	r2, #128	; 0x80
 8001204:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e2cd      	b.n	80017ae <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a76      	ldr	r2, [pc, #472]	; (80013f0 <HAL_DMA_Abort+0x214>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d04a      	beq.n	80012b2 <HAL_DMA_Abort+0xd6>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a74      	ldr	r2, [pc, #464]	; (80013f4 <HAL_DMA_Abort+0x218>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d045      	beq.n	80012b2 <HAL_DMA_Abort+0xd6>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a73      	ldr	r2, [pc, #460]	; (80013f8 <HAL_DMA_Abort+0x21c>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d040      	beq.n	80012b2 <HAL_DMA_Abort+0xd6>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a71      	ldr	r2, [pc, #452]	; (80013fc <HAL_DMA_Abort+0x220>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d03b      	beq.n	80012b2 <HAL_DMA_Abort+0xd6>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a70      	ldr	r2, [pc, #448]	; (8001400 <HAL_DMA_Abort+0x224>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d036      	beq.n	80012b2 <HAL_DMA_Abort+0xd6>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a6e      	ldr	r2, [pc, #440]	; (8001404 <HAL_DMA_Abort+0x228>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d031      	beq.n	80012b2 <HAL_DMA_Abort+0xd6>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a6d      	ldr	r2, [pc, #436]	; (8001408 <HAL_DMA_Abort+0x22c>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d02c      	beq.n	80012b2 <HAL_DMA_Abort+0xd6>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a6b      	ldr	r2, [pc, #428]	; (800140c <HAL_DMA_Abort+0x230>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d027      	beq.n	80012b2 <HAL_DMA_Abort+0xd6>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a6a      	ldr	r2, [pc, #424]	; (8001410 <HAL_DMA_Abort+0x234>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d022      	beq.n	80012b2 <HAL_DMA_Abort+0xd6>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a68      	ldr	r2, [pc, #416]	; (8001414 <HAL_DMA_Abort+0x238>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d01d      	beq.n	80012b2 <HAL_DMA_Abort+0xd6>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a67      	ldr	r2, [pc, #412]	; (8001418 <HAL_DMA_Abort+0x23c>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d018      	beq.n	80012b2 <HAL_DMA_Abort+0xd6>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a65      	ldr	r2, [pc, #404]	; (800141c <HAL_DMA_Abort+0x240>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d013      	beq.n	80012b2 <HAL_DMA_Abort+0xd6>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a64      	ldr	r2, [pc, #400]	; (8001420 <HAL_DMA_Abort+0x244>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d00e      	beq.n	80012b2 <HAL_DMA_Abort+0xd6>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a62      	ldr	r2, [pc, #392]	; (8001424 <HAL_DMA_Abort+0x248>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d009      	beq.n	80012b2 <HAL_DMA_Abort+0xd6>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a61      	ldr	r2, [pc, #388]	; (8001428 <HAL_DMA_Abort+0x24c>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d004      	beq.n	80012b2 <HAL_DMA_Abort+0xd6>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a5f      	ldr	r2, [pc, #380]	; (800142c <HAL_DMA_Abort+0x250>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d101      	bne.n	80012b6 <HAL_DMA_Abort+0xda>
 80012b2:	2301      	movs	r3, #1
 80012b4:	e000      	b.n	80012b8 <HAL_DMA_Abort+0xdc>
 80012b6:	2300      	movs	r3, #0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d013      	beq.n	80012e4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f022 021e 	bic.w	r2, r2, #30
 80012ca:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	695a      	ldr	r2, [r3, #20]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012da:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	617b      	str	r3, [r7, #20]
 80012e2:	e00a      	b.n	80012fa <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f022 020e 	bic.w	r2, r2, #14
 80012f2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a3c      	ldr	r2, [pc, #240]	; (80013f0 <HAL_DMA_Abort+0x214>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d072      	beq.n	80013ea <HAL_DMA_Abort+0x20e>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a3a      	ldr	r2, [pc, #232]	; (80013f4 <HAL_DMA_Abort+0x218>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d06d      	beq.n	80013ea <HAL_DMA_Abort+0x20e>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a39      	ldr	r2, [pc, #228]	; (80013f8 <HAL_DMA_Abort+0x21c>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d068      	beq.n	80013ea <HAL_DMA_Abort+0x20e>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a37      	ldr	r2, [pc, #220]	; (80013fc <HAL_DMA_Abort+0x220>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d063      	beq.n	80013ea <HAL_DMA_Abort+0x20e>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a36      	ldr	r2, [pc, #216]	; (8001400 <HAL_DMA_Abort+0x224>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d05e      	beq.n	80013ea <HAL_DMA_Abort+0x20e>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a34      	ldr	r2, [pc, #208]	; (8001404 <HAL_DMA_Abort+0x228>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d059      	beq.n	80013ea <HAL_DMA_Abort+0x20e>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a33      	ldr	r2, [pc, #204]	; (8001408 <HAL_DMA_Abort+0x22c>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d054      	beq.n	80013ea <HAL_DMA_Abort+0x20e>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a31      	ldr	r2, [pc, #196]	; (800140c <HAL_DMA_Abort+0x230>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d04f      	beq.n	80013ea <HAL_DMA_Abort+0x20e>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a30      	ldr	r2, [pc, #192]	; (8001410 <HAL_DMA_Abort+0x234>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d04a      	beq.n	80013ea <HAL_DMA_Abort+0x20e>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a2e      	ldr	r2, [pc, #184]	; (8001414 <HAL_DMA_Abort+0x238>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d045      	beq.n	80013ea <HAL_DMA_Abort+0x20e>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a2d      	ldr	r2, [pc, #180]	; (8001418 <HAL_DMA_Abort+0x23c>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d040      	beq.n	80013ea <HAL_DMA_Abort+0x20e>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a2b      	ldr	r2, [pc, #172]	; (800141c <HAL_DMA_Abort+0x240>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d03b      	beq.n	80013ea <HAL_DMA_Abort+0x20e>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a2a      	ldr	r2, [pc, #168]	; (8001420 <HAL_DMA_Abort+0x244>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d036      	beq.n	80013ea <HAL_DMA_Abort+0x20e>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a28      	ldr	r2, [pc, #160]	; (8001424 <HAL_DMA_Abort+0x248>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d031      	beq.n	80013ea <HAL_DMA_Abort+0x20e>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a27      	ldr	r2, [pc, #156]	; (8001428 <HAL_DMA_Abort+0x24c>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d02c      	beq.n	80013ea <HAL_DMA_Abort+0x20e>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a25      	ldr	r2, [pc, #148]	; (800142c <HAL_DMA_Abort+0x250>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d027      	beq.n	80013ea <HAL_DMA_Abort+0x20e>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a24      	ldr	r2, [pc, #144]	; (8001430 <HAL_DMA_Abort+0x254>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d022      	beq.n	80013ea <HAL_DMA_Abort+0x20e>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a22      	ldr	r2, [pc, #136]	; (8001434 <HAL_DMA_Abort+0x258>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d01d      	beq.n	80013ea <HAL_DMA_Abort+0x20e>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a21      	ldr	r2, [pc, #132]	; (8001438 <HAL_DMA_Abort+0x25c>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d018      	beq.n	80013ea <HAL_DMA_Abort+0x20e>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a1f      	ldr	r2, [pc, #124]	; (800143c <HAL_DMA_Abort+0x260>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d013      	beq.n	80013ea <HAL_DMA_Abort+0x20e>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a1e      	ldr	r2, [pc, #120]	; (8001440 <HAL_DMA_Abort+0x264>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d00e      	beq.n	80013ea <HAL_DMA_Abort+0x20e>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a1c      	ldr	r2, [pc, #112]	; (8001444 <HAL_DMA_Abort+0x268>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d009      	beq.n	80013ea <HAL_DMA_Abort+0x20e>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a1b      	ldr	r2, [pc, #108]	; (8001448 <HAL_DMA_Abort+0x26c>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d004      	beq.n	80013ea <HAL_DMA_Abort+0x20e>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a19      	ldr	r2, [pc, #100]	; (800144c <HAL_DMA_Abort+0x270>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d132      	bne.n	8001450 <HAL_DMA_Abort+0x274>
 80013ea:	2301      	movs	r3, #1
 80013ec:	e031      	b.n	8001452 <HAL_DMA_Abort+0x276>
 80013ee:	bf00      	nop
 80013f0:	40020010 	.word	0x40020010
 80013f4:	40020028 	.word	0x40020028
 80013f8:	40020040 	.word	0x40020040
 80013fc:	40020058 	.word	0x40020058
 8001400:	40020070 	.word	0x40020070
 8001404:	40020088 	.word	0x40020088
 8001408:	400200a0 	.word	0x400200a0
 800140c:	400200b8 	.word	0x400200b8
 8001410:	40020410 	.word	0x40020410
 8001414:	40020428 	.word	0x40020428
 8001418:	40020440 	.word	0x40020440
 800141c:	40020458 	.word	0x40020458
 8001420:	40020470 	.word	0x40020470
 8001424:	40020488 	.word	0x40020488
 8001428:	400204a0 	.word	0x400204a0
 800142c:	400204b8 	.word	0x400204b8
 8001430:	58025408 	.word	0x58025408
 8001434:	5802541c 	.word	0x5802541c
 8001438:	58025430 	.word	0x58025430
 800143c:	58025444 	.word	0x58025444
 8001440:	58025458 	.word	0x58025458
 8001444:	5802546c 	.word	0x5802546c
 8001448:	58025480 	.word	0x58025480
 800144c:	58025494 	.word	0x58025494
 8001450:	2300      	movs	r3, #0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d007      	beq.n	8001466 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001460:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001464:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a6d      	ldr	r2, [pc, #436]	; (8001620 <HAL_DMA_Abort+0x444>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d04a      	beq.n	8001506 <HAL_DMA_Abort+0x32a>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a6b      	ldr	r2, [pc, #428]	; (8001624 <HAL_DMA_Abort+0x448>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d045      	beq.n	8001506 <HAL_DMA_Abort+0x32a>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a6a      	ldr	r2, [pc, #424]	; (8001628 <HAL_DMA_Abort+0x44c>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d040      	beq.n	8001506 <HAL_DMA_Abort+0x32a>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a68      	ldr	r2, [pc, #416]	; (800162c <HAL_DMA_Abort+0x450>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d03b      	beq.n	8001506 <HAL_DMA_Abort+0x32a>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a67      	ldr	r2, [pc, #412]	; (8001630 <HAL_DMA_Abort+0x454>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d036      	beq.n	8001506 <HAL_DMA_Abort+0x32a>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a65      	ldr	r2, [pc, #404]	; (8001634 <HAL_DMA_Abort+0x458>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d031      	beq.n	8001506 <HAL_DMA_Abort+0x32a>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a64      	ldr	r2, [pc, #400]	; (8001638 <HAL_DMA_Abort+0x45c>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d02c      	beq.n	8001506 <HAL_DMA_Abort+0x32a>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a62      	ldr	r2, [pc, #392]	; (800163c <HAL_DMA_Abort+0x460>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d027      	beq.n	8001506 <HAL_DMA_Abort+0x32a>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a61      	ldr	r2, [pc, #388]	; (8001640 <HAL_DMA_Abort+0x464>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d022      	beq.n	8001506 <HAL_DMA_Abort+0x32a>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a5f      	ldr	r2, [pc, #380]	; (8001644 <HAL_DMA_Abort+0x468>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d01d      	beq.n	8001506 <HAL_DMA_Abort+0x32a>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a5e      	ldr	r2, [pc, #376]	; (8001648 <HAL_DMA_Abort+0x46c>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d018      	beq.n	8001506 <HAL_DMA_Abort+0x32a>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a5c      	ldr	r2, [pc, #368]	; (800164c <HAL_DMA_Abort+0x470>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d013      	beq.n	8001506 <HAL_DMA_Abort+0x32a>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a5b      	ldr	r2, [pc, #364]	; (8001650 <HAL_DMA_Abort+0x474>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d00e      	beq.n	8001506 <HAL_DMA_Abort+0x32a>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a59      	ldr	r2, [pc, #356]	; (8001654 <HAL_DMA_Abort+0x478>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d009      	beq.n	8001506 <HAL_DMA_Abort+0x32a>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a58      	ldr	r2, [pc, #352]	; (8001658 <HAL_DMA_Abort+0x47c>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d004      	beq.n	8001506 <HAL_DMA_Abort+0x32a>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a56      	ldr	r2, [pc, #344]	; (800165c <HAL_DMA_Abort+0x480>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d108      	bne.n	8001518 <HAL_DMA_Abort+0x33c>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 0201 	bic.w	r2, r2, #1
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	e007      	b.n	8001528 <HAL_DMA_Abort+0x34c>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f022 0201 	bic.w	r2, r2, #1
 8001526:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001528:	e013      	b.n	8001552 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800152a:	f7ff fd0b 	bl	8000f44 <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b05      	cmp	r3, #5
 8001536:	d90c      	bls.n	8001552 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2220      	movs	r2, #32
 800153c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2203      	movs	r2, #3
 800154a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e12d      	b.n	80017ae <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1e5      	bne.n	800152a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a2f      	ldr	r2, [pc, #188]	; (8001620 <HAL_DMA_Abort+0x444>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d04a      	beq.n	80015fe <HAL_DMA_Abort+0x422>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a2d      	ldr	r2, [pc, #180]	; (8001624 <HAL_DMA_Abort+0x448>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d045      	beq.n	80015fe <HAL_DMA_Abort+0x422>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a2c      	ldr	r2, [pc, #176]	; (8001628 <HAL_DMA_Abort+0x44c>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d040      	beq.n	80015fe <HAL_DMA_Abort+0x422>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a2a      	ldr	r2, [pc, #168]	; (800162c <HAL_DMA_Abort+0x450>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d03b      	beq.n	80015fe <HAL_DMA_Abort+0x422>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a29      	ldr	r2, [pc, #164]	; (8001630 <HAL_DMA_Abort+0x454>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d036      	beq.n	80015fe <HAL_DMA_Abort+0x422>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a27      	ldr	r2, [pc, #156]	; (8001634 <HAL_DMA_Abort+0x458>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d031      	beq.n	80015fe <HAL_DMA_Abort+0x422>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a26      	ldr	r2, [pc, #152]	; (8001638 <HAL_DMA_Abort+0x45c>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d02c      	beq.n	80015fe <HAL_DMA_Abort+0x422>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a24      	ldr	r2, [pc, #144]	; (800163c <HAL_DMA_Abort+0x460>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d027      	beq.n	80015fe <HAL_DMA_Abort+0x422>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a23      	ldr	r2, [pc, #140]	; (8001640 <HAL_DMA_Abort+0x464>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d022      	beq.n	80015fe <HAL_DMA_Abort+0x422>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a21      	ldr	r2, [pc, #132]	; (8001644 <HAL_DMA_Abort+0x468>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d01d      	beq.n	80015fe <HAL_DMA_Abort+0x422>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a20      	ldr	r2, [pc, #128]	; (8001648 <HAL_DMA_Abort+0x46c>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d018      	beq.n	80015fe <HAL_DMA_Abort+0x422>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a1e      	ldr	r2, [pc, #120]	; (800164c <HAL_DMA_Abort+0x470>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d013      	beq.n	80015fe <HAL_DMA_Abort+0x422>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a1d      	ldr	r2, [pc, #116]	; (8001650 <HAL_DMA_Abort+0x474>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d00e      	beq.n	80015fe <HAL_DMA_Abort+0x422>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a1b      	ldr	r2, [pc, #108]	; (8001654 <HAL_DMA_Abort+0x478>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d009      	beq.n	80015fe <HAL_DMA_Abort+0x422>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a1a      	ldr	r2, [pc, #104]	; (8001658 <HAL_DMA_Abort+0x47c>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d004      	beq.n	80015fe <HAL_DMA_Abort+0x422>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a18      	ldr	r2, [pc, #96]	; (800165c <HAL_DMA_Abort+0x480>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d101      	bne.n	8001602 <HAL_DMA_Abort+0x426>
 80015fe:	2301      	movs	r3, #1
 8001600:	e000      	b.n	8001604 <HAL_DMA_Abort+0x428>
 8001602:	2300      	movs	r3, #0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d02b      	beq.n	8001660 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800160c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001612:	f003 031f 	and.w	r3, r3, #31
 8001616:	223f      	movs	r2, #63	; 0x3f
 8001618:	409a      	lsls	r2, r3
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	e02a      	b.n	8001676 <HAL_DMA_Abort+0x49a>
 8001620:	40020010 	.word	0x40020010
 8001624:	40020028 	.word	0x40020028
 8001628:	40020040 	.word	0x40020040
 800162c:	40020058 	.word	0x40020058
 8001630:	40020070 	.word	0x40020070
 8001634:	40020088 	.word	0x40020088
 8001638:	400200a0 	.word	0x400200a0
 800163c:	400200b8 	.word	0x400200b8
 8001640:	40020410 	.word	0x40020410
 8001644:	40020428 	.word	0x40020428
 8001648:	40020440 	.word	0x40020440
 800164c:	40020458 	.word	0x40020458
 8001650:	40020470 	.word	0x40020470
 8001654:	40020488 	.word	0x40020488
 8001658:	400204a0 	.word	0x400204a0
 800165c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001664:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800166a:	f003 031f 	and.w	r3, r3, #31
 800166e:	2201      	movs	r2, #1
 8001670:	409a      	lsls	r2, r3
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a4f      	ldr	r2, [pc, #316]	; (80017b8 <HAL_DMA_Abort+0x5dc>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d072      	beq.n	8001766 <HAL_DMA_Abort+0x58a>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a4d      	ldr	r2, [pc, #308]	; (80017bc <HAL_DMA_Abort+0x5e0>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d06d      	beq.n	8001766 <HAL_DMA_Abort+0x58a>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a4c      	ldr	r2, [pc, #304]	; (80017c0 <HAL_DMA_Abort+0x5e4>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d068      	beq.n	8001766 <HAL_DMA_Abort+0x58a>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a4a      	ldr	r2, [pc, #296]	; (80017c4 <HAL_DMA_Abort+0x5e8>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d063      	beq.n	8001766 <HAL_DMA_Abort+0x58a>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a49      	ldr	r2, [pc, #292]	; (80017c8 <HAL_DMA_Abort+0x5ec>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d05e      	beq.n	8001766 <HAL_DMA_Abort+0x58a>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a47      	ldr	r2, [pc, #284]	; (80017cc <HAL_DMA_Abort+0x5f0>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d059      	beq.n	8001766 <HAL_DMA_Abort+0x58a>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a46      	ldr	r2, [pc, #280]	; (80017d0 <HAL_DMA_Abort+0x5f4>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d054      	beq.n	8001766 <HAL_DMA_Abort+0x58a>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a44      	ldr	r2, [pc, #272]	; (80017d4 <HAL_DMA_Abort+0x5f8>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d04f      	beq.n	8001766 <HAL_DMA_Abort+0x58a>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a43      	ldr	r2, [pc, #268]	; (80017d8 <HAL_DMA_Abort+0x5fc>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d04a      	beq.n	8001766 <HAL_DMA_Abort+0x58a>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a41      	ldr	r2, [pc, #260]	; (80017dc <HAL_DMA_Abort+0x600>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d045      	beq.n	8001766 <HAL_DMA_Abort+0x58a>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a40      	ldr	r2, [pc, #256]	; (80017e0 <HAL_DMA_Abort+0x604>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d040      	beq.n	8001766 <HAL_DMA_Abort+0x58a>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a3e      	ldr	r2, [pc, #248]	; (80017e4 <HAL_DMA_Abort+0x608>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d03b      	beq.n	8001766 <HAL_DMA_Abort+0x58a>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a3d      	ldr	r2, [pc, #244]	; (80017e8 <HAL_DMA_Abort+0x60c>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d036      	beq.n	8001766 <HAL_DMA_Abort+0x58a>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a3b      	ldr	r2, [pc, #236]	; (80017ec <HAL_DMA_Abort+0x610>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d031      	beq.n	8001766 <HAL_DMA_Abort+0x58a>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a3a      	ldr	r2, [pc, #232]	; (80017f0 <HAL_DMA_Abort+0x614>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d02c      	beq.n	8001766 <HAL_DMA_Abort+0x58a>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a38      	ldr	r2, [pc, #224]	; (80017f4 <HAL_DMA_Abort+0x618>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d027      	beq.n	8001766 <HAL_DMA_Abort+0x58a>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a37      	ldr	r2, [pc, #220]	; (80017f8 <HAL_DMA_Abort+0x61c>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d022      	beq.n	8001766 <HAL_DMA_Abort+0x58a>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a35      	ldr	r2, [pc, #212]	; (80017fc <HAL_DMA_Abort+0x620>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d01d      	beq.n	8001766 <HAL_DMA_Abort+0x58a>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a34      	ldr	r2, [pc, #208]	; (8001800 <HAL_DMA_Abort+0x624>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d018      	beq.n	8001766 <HAL_DMA_Abort+0x58a>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a32      	ldr	r2, [pc, #200]	; (8001804 <HAL_DMA_Abort+0x628>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d013      	beq.n	8001766 <HAL_DMA_Abort+0x58a>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a31      	ldr	r2, [pc, #196]	; (8001808 <HAL_DMA_Abort+0x62c>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d00e      	beq.n	8001766 <HAL_DMA_Abort+0x58a>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a2f      	ldr	r2, [pc, #188]	; (800180c <HAL_DMA_Abort+0x630>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d009      	beq.n	8001766 <HAL_DMA_Abort+0x58a>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a2e      	ldr	r2, [pc, #184]	; (8001810 <HAL_DMA_Abort+0x634>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d004      	beq.n	8001766 <HAL_DMA_Abort+0x58a>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a2c      	ldr	r2, [pc, #176]	; (8001814 <HAL_DMA_Abort+0x638>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d101      	bne.n	800176a <HAL_DMA_Abort+0x58e>
 8001766:	2301      	movs	r3, #1
 8001768:	e000      	b.n	800176c <HAL_DMA_Abort+0x590>
 800176a:	2300      	movs	r3, #0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d015      	beq.n	800179c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001778:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800177e:	2b00      	cmp	r3, #0
 8001780:	d00c      	beq.n	800179c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800178c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001790:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800179a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2201      	movs	r2, #1
 80017a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3718      	adds	r7, #24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40020010 	.word	0x40020010
 80017bc:	40020028 	.word	0x40020028
 80017c0:	40020040 	.word	0x40020040
 80017c4:	40020058 	.word	0x40020058
 80017c8:	40020070 	.word	0x40020070
 80017cc:	40020088 	.word	0x40020088
 80017d0:	400200a0 	.word	0x400200a0
 80017d4:	400200b8 	.word	0x400200b8
 80017d8:	40020410 	.word	0x40020410
 80017dc:	40020428 	.word	0x40020428
 80017e0:	40020440 	.word	0x40020440
 80017e4:	40020458 	.word	0x40020458
 80017e8:	40020470 	.word	0x40020470
 80017ec:	40020488 	.word	0x40020488
 80017f0:	400204a0 	.word	0x400204a0
 80017f4:	400204b8 	.word	0x400204b8
 80017f8:	58025408 	.word	0x58025408
 80017fc:	5802541c 	.word	0x5802541c
 8001800:	58025430 	.word	0x58025430
 8001804:	58025444 	.word	0x58025444
 8001808:	58025458 	.word	0x58025458
 800180c:	5802546c 	.word	0x5802546c
 8001810:	58025480 	.word	0x58025480
 8001814:	58025494 	.word	0x58025494

08001818 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e205      	b.n	8001c36 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d004      	beq.n	8001840 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2280      	movs	r2, #128	; 0x80
 800183a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e1fa      	b.n	8001c36 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a8c      	ldr	r2, [pc, #560]	; (8001a78 <HAL_DMA_Abort_IT+0x260>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d04a      	beq.n	80018e0 <HAL_DMA_Abort_IT+0xc8>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a8b      	ldr	r2, [pc, #556]	; (8001a7c <HAL_DMA_Abort_IT+0x264>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d045      	beq.n	80018e0 <HAL_DMA_Abort_IT+0xc8>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a89      	ldr	r2, [pc, #548]	; (8001a80 <HAL_DMA_Abort_IT+0x268>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d040      	beq.n	80018e0 <HAL_DMA_Abort_IT+0xc8>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a88      	ldr	r2, [pc, #544]	; (8001a84 <HAL_DMA_Abort_IT+0x26c>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d03b      	beq.n	80018e0 <HAL_DMA_Abort_IT+0xc8>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a86      	ldr	r2, [pc, #536]	; (8001a88 <HAL_DMA_Abort_IT+0x270>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d036      	beq.n	80018e0 <HAL_DMA_Abort_IT+0xc8>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a85      	ldr	r2, [pc, #532]	; (8001a8c <HAL_DMA_Abort_IT+0x274>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d031      	beq.n	80018e0 <HAL_DMA_Abort_IT+0xc8>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a83      	ldr	r2, [pc, #524]	; (8001a90 <HAL_DMA_Abort_IT+0x278>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d02c      	beq.n	80018e0 <HAL_DMA_Abort_IT+0xc8>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a82      	ldr	r2, [pc, #520]	; (8001a94 <HAL_DMA_Abort_IT+0x27c>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d027      	beq.n	80018e0 <HAL_DMA_Abort_IT+0xc8>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a80      	ldr	r2, [pc, #512]	; (8001a98 <HAL_DMA_Abort_IT+0x280>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d022      	beq.n	80018e0 <HAL_DMA_Abort_IT+0xc8>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a7f      	ldr	r2, [pc, #508]	; (8001a9c <HAL_DMA_Abort_IT+0x284>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d01d      	beq.n	80018e0 <HAL_DMA_Abort_IT+0xc8>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a7d      	ldr	r2, [pc, #500]	; (8001aa0 <HAL_DMA_Abort_IT+0x288>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d018      	beq.n	80018e0 <HAL_DMA_Abort_IT+0xc8>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a7c      	ldr	r2, [pc, #496]	; (8001aa4 <HAL_DMA_Abort_IT+0x28c>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d013      	beq.n	80018e0 <HAL_DMA_Abort_IT+0xc8>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a7a      	ldr	r2, [pc, #488]	; (8001aa8 <HAL_DMA_Abort_IT+0x290>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d00e      	beq.n	80018e0 <HAL_DMA_Abort_IT+0xc8>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a79      	ldr	r2, [pc, #484]	; (8001aac <HAL_DMA_Abort_IT+0x294>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d009      	beq.n	80018e0 <HAL_DMA_Abort_IT+0xc8>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a77      	ldr	r2, [pc, #476]	; (8001ab0 <HAL_DMA_Abort_IT+0x298>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d004      	beq.n	80018e0 <HAL_DMA_Abort_IT+0xc8>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a76      	ldr	r2, [pc, #472]	; (8001ab4 <HAL_DMA_Abort_IT+0x29c>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d101      	bne.n	80018e4 <HAL_DMA_Abort_IT+0xcc>
 80018e0:	2301      	movs	r3, #1
 80018e2:	e000      	b.n	80018e6 <HAL_DMA_Abort_IT+0xce>
 80018e4:	2300      	movs	r3, #0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d065      	beq.n	80019b6 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2204      	movs	r2, #4
 80018ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a60      	ldr	r2, [pc, #384]	; (8001a78 <HAL_DMA_Abort_IT+0x260>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d04a      	beq.n	8001992 <HAL_DMA_Abort_IT+0x17a>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a5e      	ldr	r2, [pc, #376]	; (8001a7c <HAL_DMA_Abort_IT+0x264>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d045      	beq.n	8001992 <HAL_DMA_Abort_IT+0x17a>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a5d      	ldr	r2, [pc, #372]	; (8001a80 <HAL_DMA_Abort_IT+0x268>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d040      	beq.n	8001992 <HAL_DMA_Abort_IT+0x17a>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a5b      	ldr	r2, [pc, #364]	; (8001a84 <HAL_DMA_Abort_IT+0x26c>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d03b      	beq.n	8001992 <HAL_DMA_Abort_IT+0x17a>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a5a      	ldr	r2, [pc, #360]	; (8001a88 <HAL_DMA_Abort_IT+0x270>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d036      	beq.n	8001992 <HAL_DMA_Abort_IT+0x17a>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a58      	ldr	r2, [pc, #352]	; (8001a8c <HAL_DMA_Abort_IT+0x274>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d031      	beq.n	8001992 <HAL_DMA_Abort_IT+0x17a>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a57      	ldr	r2, [pc, #348]	; (8001a90 <HAL_DMA_Abort_IT+0x278>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d02c      	beq.n	8001992 <HAL_DMA_Abort_IT+0x17a>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a55      	ldr	r2, [pc, #340]	; (8001a94 <HAL_DMA_Abort_IT+0x27c>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d027      	beq.n	8001992 <HAL_DMA_Abort_IT+0x17a>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a54      	ldr	r2, [pc, #336]	; (8001a98 <HAL_DMA_Abort_IT+0x280>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d022      	beq.n	8001992 <HAL_DMA_Abort_IT+0x17a>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a52      	ldr	r2, [pc, #328]	; (8001a9c <HAL_DMA_Abort_IT+0x284>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d01d      	beq.n	8001992 <HAL_DMA_Abort_IT+0x17a>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a51      	ldr	r2, [pc, #324]	; (8001aa0 <HAL_DMA_Abort_IT+0x288>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d018      	beq.n	8001992 <HAL_DMA_Abort_IT+0x17a>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a4f      	ldr	r2, [pc, #316]	; (8001aa4 <HAL_DMA_Abort_IT+0x28c>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d013      	beq.n	8001992 <HAL_DMA_Abort_IT+0x17a>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a4e      	ldr	r2, [pc, #312]	; (8001aa8 <HAL_DMA_Abort_IT+0x290>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d00e      	beq.n	8001992 <HAL_DMA_Abort_IT+0x17a>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a4c      	ldr	r2, [pc, #304]	; (8001aac <HAL_DMA_Abort_IT+0x294>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d009      	beq.n	8001992 <HAL_DMA_Abort_IT+0x17a>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a4b      	ldr	r2, [pc, #300]	; (8001ab0 <HAL_DMA_Abort_IT+0x298>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d004      	beq.n	8001992 <HAL_DMA_Abort_IT+0x17a>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a49      	ldr	r2, [pc, #292]	; (8001ab4 <HAL_DMA_Abort_IT+0x29c>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d108      	bne.n	80019a4 <HAL_DMA_Abort_IT+0x18c>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f022 0201 	bic.w	r2, r2, #1
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	e147      	b.n	8001c34 <HAL_DMA_Abort_IT+0x41c>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f022 0201 	bic.w	r2, r2, #1
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	e13e      	b.n	8001c34 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f022 020e 	bic.w	r2, r2, #14
 80019c4:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a2b      	ldr	r2, [pc, #172]	; (8001a78 <HAL_DMA_Abort_IT+0x260>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d04a      	beq.n	8001a66 <HAL_DMA_Abort_IT+0x24e>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a29      	ldr	r2, [pc, #164]	; (8001a7c <HAL_DMA_Abort_IT+0x264>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d045      	beq.n	8001a66 <HAL_DMA_Abort_IT+0x24e>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a28      	ldr	r2, [pc, #160]	; (8001a80 <HAL_DMA_Abort_IT+0x268>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d040      	beq.n	8001a66 <HAL_DMA_Abort_IT+0x24e>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a26      	ldr	r2, [pc, #152]	; (8001a84 <HAL_DMA_Abort_IT+0x26c>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d03b      	beq.n	8001a66 <HAL_DMA_Abort_IT+0x24e>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a25      	ldr	r2, [pc, #148]	; (8001a88 <HAL_DMA_Abort_IT+0x270>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d036      	beq.n	8001a66 <HAL_DMA_Abort_IT+0x24e>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a23      	ldr	r2, [pc, #140]	; (8001a8c <HAL_DMA_Abort_IT+0x274>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d031      	beq.n	8001a66 <HAL_DMA_Abort_IT+0x24e>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a22      	ldr	r2, [pc, #136]	; (8001a90 <HAL_DMA_Abort_IT+0x278>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d02c      	beq.n	8001a66 <HAL_DMA_Abort_IT+0x24e>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a20      	ldr	r2, [pc, #128]	; (8001a94 <HAL_DMA_Abort_IT+0x27c>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d027      	beq.n	8001a66 <HAL_DMA_Abort_IT+0x24e>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a1f      	ldr	r2, [pc, #124]	; (8001a98 <HAL_DMA_Abort_IT+0x280>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d022      	beq.n	8001a66 <HAL_DMA_Abort_IT+0x24e>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a1d      	ldr	r2, [pc, #116]	; (8001a9c <HAL_DMA_Abort_IT+0x284>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d01d      	beq.n	8001a66 <HAL_DMA_Abort_IT+0x24e>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a1c      	ldr	r2, [pc, #112]	; (8001aa0 <HAL_DMA_Abort_IT+0x288>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d018      	beq.n	8001a66 <HAL_DMA_Abort_IT+0x24e>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a1a      	ldr	r2, [pc, #104]	; (8001aa4 <HAL_DMA_Abort_IT+0x28c>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d013      	beq.n	8001a66 <HAL_DMA_Abort_IT+0x24e>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a19      	ldr	r2, [pc, #100]	; (8001aa8 <HAL_DMA_Abort_IT+0x290>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d00e      	beq.n	8001a66 <HAL_DMA_Abort_IT+0x24e>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a17      	ldr	r2, [pc, #92]	; (8001aac <HAL_DMA_Abort_IT+0x294>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d009      	beq.n	8001a66 <HAL_DMA_Abort_IT+0x24e>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a16      	ldr	r2, [pc, #88]	; (8001ab0 <HAL_DMA_Abort_IT+0x298>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d004      	beq.n	8001a66 <HAL_DMA_Abort_IT+0x24e>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a14      	ldr	r2, [pc, #80]	; (8001ab4 <HAL_DMA_Abort_IT+0x29c>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d128      	bne.n	8001ab8 <HAL_DMA_Abort_IT+0x2a0>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f022 0201 	bic.w	r2, r2, #1
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	e027      	b.n	8001ac8 <HAL_DMA_Abort_IT+0x2b0>
 8001a78:	40020010 	.word	0x40020010
 8001a7c:	40020028 	.word	0x40020028
 8001a80:	40020040 	.word	0x40020040
 8001a84:	40020058 	.word	0x40020058
 8001a88:	40020070 	.word	0x40020070
 8001a8c:	40020088 	.word	0x40020088
 8001a90:	400200a0 	.word	0x400200a0
 8001a94:	400200b8 	.word	0x400200b8
 8001a98:	40020410 	.word	0x40020410
 8001a9c:	40020428 	.word	0x40020428
 8001aa0:	40020440 	.word	0x40020440
 8001aa4:	40020458 	.word	0x40020458
 8001aa8:	40020470 	.word	0x40020470
 8001aac:	40020488 	.word	0x40020488
 8001ab0:	400204a0 	.word	0x400204a0
 8001ab4:	400204b8 	.word	0x400204b8
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f022 0201 	bic.w	r2, r2, #1
 8001ac6:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a5c      	ldr	r2, [pc, #368]	; (8001c40 <HAL_DMA_Abort_IT+0x428>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d072      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0x3a0>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a5b      	ldr	r2, [pc, #364]	; (8001c44 <HAL_DMA_Abort_IT+0x42c>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d06d      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0x3a0>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a59      	ldr	r2, [pc, #356]	; (8001c48 <HAL_DMA_Abort_IT+0x430>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d068      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0x3a0>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a58      	ldr	r2, [pc, #352]	; (8001c4c <HAL_DMA_Abort_IT+0x434>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d063      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0x3a0>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a56      	ldr	r2, [pc, #344]	; (8001c50 <HAL_DMA_Abort_IT+0x438>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d05e      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0x3a0>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a55      	ldr	r2, [pc, #340]	; (8001c54 <HAL_DMA_Abort_IT+0x43c>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d059      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0x3a0>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a53      	ldr	r2, [pc, #332]	; (8001c58 <HAL_DMA_Abort_IT+0x440>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d054      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0x3a0>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a52      	ldr	r2, [pc, #328]	; (8001c5c <HAL_DMA_Abort_IT+0x444>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d04f      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0x3a0>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a50      	ldr	r2, [pc, #320]	; (8001c60 <HAL_DMA_Abort_IT+0x448>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d04a      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0x3a0>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a4f      	ldr	r2, [pc, #316]	; (8001c64 <HAL_DMA_Abort_IT+0x44c>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d045      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0x3a0>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a4d      	ldr	r2, [pc, #308]	; (8001c68 <HAL_DMA_Abort_IT+0x450>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d040      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0x3a0>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a4c      	ldr	r2, [pc, #304]	; (8001c6c <HAL_DMA_Abort_IT+0x454>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d03b      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0x3a0>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a4a      	ldr	r2, [pc, #296]	; (8001c70 <HAL_DMA_Abort_IT+0x458>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d036      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0x3a0>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a49      	ldr	r2, [pc, #292]	; (8001c74 <HAL_DMA_Abort_IT+0x45c>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d031      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0x3a0>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a47      	ldr	r2, [pc, #284]	; (8001c78 <HAL_DMA_Abort_IT+0x460>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d02c      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0x3a0>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a46      	ldr	r2, [pc, #280]	; (8001c7c <HAL_DMA_Abort_IT+0x464>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d027      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0x3a0>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a44      	ldr	r2, [pc, #272]	; (8001c80 <HAL_DMA_Abort_IT+0x468>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d022      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0x3a0>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a43      	ldr	r2, [pc, #268]	; (8001c84 <HAL_DMA_Abort_IT+0x46c>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d01d      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0x3a0>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a41      	ldr	r2, [pc, #260]	; (8001c88 <HAL_DMA_Abort_IT+0x470>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d018      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0x3a0>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a40      	ldr	r2, [pc, #256]	; (8001c8c <HAL_DMA_Abort_IT+0x474>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d013      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0x3a0>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a3e      	ldr	r2, [pc, #248]	; (8001c90 <HAL_DMA_Abort_IT+0x478>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d00e      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0x3a0>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a3d      	ldr	r2, [pc, #244]	; (8001c94 <HAL_DMA_Abort_IT+0x47c>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d009      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0x3a0>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a3b      	ldr	r2, [pc, #236]	; (8001c98 <HAL_DMA_Abort_IT+0x480>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d004      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0x3a0>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a3a      	ldr	r2, [pc, #232]	; (8001c9c <HAL_DMA_Abort_IT+0x484>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d101      	bne.n	8001bbc <HAL_DMA_Abort_IT+0x3a4>
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e000      	b.n	8001bbe <HAL_DMA_Abort_IT+0x3a6>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d028      	beq.n	8001c14 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bd0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bdc:	f003 031f 	and.w	r3, r3, #31
 8001be0:	2201      	movs	r2, #1
 8001be2:	409a      	lsls	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001bf0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d00c      	beq.n	8001c14 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c08:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001c12:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d003      	beq.n	8001c34 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40020010 	.word	0x40020010
 8001c44:	40020028 	.word	0x40020028
 8001c48:	40020040 	.word	0x40020040
 8001c4c:	40020058 	.word	0x40020058
 8001c50:	40020070 	.word	0x40020070
 8001c54:	40020088 	.word	0x40020088
 8001c58:	400200a0 	.word	0x400200a0
 8001c5c:	400200b8 	.word	0x400200b8
 8001c60:	40020410 	.word	0x40020410
 8001c64:	40020428 	.word	0x40020428
 8001c68:	40020440 	.word	0x40020440
 8001c6c:	40020458 	.word	0x40020458
 8001c70:	40020470 	.word	0x40020470
 8001c74:	40020488 	.word	0x40020488
 8001c78:	400204a0 	.word	0x400204a0
 8001c7c:	400204b8 	.word	0x400204b8
 8001c80:	58025408 	.word	0x58025408
 8001c84:	5802541c 	.word	0x5802541c
 8001c88:	58025430 	.word	0x58025430
 8001c8c:	58025444 	.word	0x58025444
 8001c90:	58025458 	.word	0x58025458
 8001c94:	5802546c 	.word	0x5802546c
 8001c98:	58025480 	.word	0x58025480
 8001c9c:	58025494 	.word	0x58025494

08001ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b089      	sub	sp, #36	; 0x24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001cae:	4b89      	ldr	r3, [pc, #548]	; (8001ed4 <HAL_GPIO_Init+0x234>)
 8001cb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001cb2:	e194      	b.n	8001fde <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	2101      	movs	r1, #1
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f000 8186 	beq.w	8001fd8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d00b      	beq.n	8001cec <HAL_GPIO_Init+0x4c>
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d007      	beq.n	8001cec <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ce0:	2b11      	cmp	r3, #17
 8001ce2:	d003      	beq.n	8001cec <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	2b12      	cmp	r3, #18
 8001cea:	d130      	bne.n	8001d4e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	68da      	ldr	r2, [r3, #12]
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d22:	2201      	movs	r2, #1
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	091b      	lsrs	r3, r3, #4
 8001d38:	f003 0201 	and.w	r2, r3, #1
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	2203      	movs	r2, #3
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4013      	ands	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	689a      	ldr	r2, [r3, #8]
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d003      	beq.n	8001d8e <HAL_GPIO_Init+0xee>
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b12      	cmp	r3, #18
 8001d8c:	d123      	bne.n	8001dd6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	08da      	lsrs	r2, r3, #3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	3208      	adds	r2, #8
 8001d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	220f      	movs	r2, #15
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43db      	mvns	r3, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4013      	ands	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	691a      	ldr	r2, [r3, #16]
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	f003 0307 	and.w	r3, r3, #7
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	08da      	lsrs	r2, r3, #3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3208      	adds	r2, #8
 8001dd0:	69b9      	ldr	r1, [r7, #24]
 8001dd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	2203      	movs	r2, #3
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43db      	mvns	r3, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4013      	ands	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f003 0203 	and.w	r2, r3, #3
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 80e0 	beq.w	8001fd8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e18:	4b2f      	ldr	r3, [pc, #188]	; (8001ed8 <HAL_GPIO_Init+0x238>)
 8001e1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e1e:	4a2e      	ldr	r2, [pc, #184]	; (8001ed8 <HAL_GPIO_Init+0x238>)
 8001e20:	f043 0302 	orr.w	r3, r3, #2
 8001e24:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e28:	4b2b      	ldr	r3, [pc, #172]	; (8001ed8 <HAL_GPIO_Init+0x238>)
 8001e2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e36:	4a29      	ldr	r2, [pc, #164]	; (8001edc <HAL_GPIO_Init+0x23c>)
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	089b      	lsrs	r3, r3, #2
 8001e3c:	3302      	adds	r3, #2
 8001e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	220f      	movs	r2, #15
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43db      	mvns	r3, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4013      	ands	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a20      	ldr	r2, [pc, #128]	; (8001ee0 <HAL_GPIO_Init+0x240>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d052      	beq.n	8001f08 <HAL_GPIO_Init+0x268>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a1f      	ldr	r2, [pc, #124]	; (8001ee4 <HAL_GPIO_Init+0x244>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d031      	beq.n	8001ece <HAL_GPIO_Init+0x22e>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a1e      	ldr	r2, [pc, #120]	; (8001ee8 <HAL_GPIO_Init+0x248>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d02b      	beq.n	8001eca <HAL_GPIO_Init+0x22a>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a1d      	ldr	r2, [pc, #116]	; (8001eec <HAL_GPIO_Init+0x24c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d025      	beq.n	8001ec6 <HAL_GPIO_Init+0x226>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a1c      	ldr	r2, [pc, #112]	; (8001ef0 <HAL_GPIO_Init+0x250>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d01f      	beq.n	8001ec2 <HAL_GPIO_Init+0x222>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a1b      	ldr	r2, [pc, #108]	; (8001ef4 <HAL_GPIO_Init+0x254>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d019      	beq.n	8001ebe <HAL_GPIO_Init+0x21e>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a1a      	ldr	r2, [pc, #104]	; (8001ef8 <HAL_GPIO_Init+0x258>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d013      	beq.n	8001eba <HAL_GPIO_Init+0x21a>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a19      	ldr	r2, [pc, #100]	; (8001efc <HAL_GPIO_Init+0x25c>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d00d      	beq.n	8001eb6 <HAL_GPIO_Init+0x216>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a18      	ldr	r2, [pc, #96]	; (8001f00 <HAL_GPIO_Init+0x260>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d007      	beq.n	8001eb2 <HAL_GPIO_Init+0x212>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a17      	ldr	r2, [pc, #92]	; (8001f04 <HAL_GPIO_Init+0x264>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d101      	bne.n	8001eae <HAL_GPIO_Init+0x20e>
 8001eaa:	2309      	movs	r3, #9
 8001eac:	e02d      	b.n	8001f0a <HAL_GPIO_Init+0x26a>
 8001eae:	230a      	movs	r3, #10
 8001eb0:	e02b      	b.n	8001f0a <HAL_GPIO_Init+0x26a>
 8001eb2:	2308      	movs	r3, #8
 8001eb4:	e029      	b.n	8001f0a <HAL_GPIO_Init+0x26a>
 8001eb6:	2307      	movs	r3, #7
 8001eb8:	e027      	b.n	8001f0a <HAL_GPIO_Init+0x26a>
 8001eba:	2306      	movs	r3, #6
 8001ebc:	e025      	b.n	8001f0a <HAL_GPIO_Init+0x26a>
 8001ebe:	2305      	movs	r3, #5
 8001ec0:	e023      	b.n	8001f0a <HAL_GPIO_Init+0x26a>
 8001ec2:	2304      	movs	r3, #4
 8001ec4:	e021      	b.n	8001f0a <HAL_GPIO_Init+0x26a>
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e01f      	b.n	8001f0a <HAL_GPIO_Init+0x26a>
 8001eca:	2302      	movs	r3, #2
 8001ecc:	e01d      	b.n	8001f0a <HAL_GPIO_Init+0x26a>
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e01b      	b.n	8001f0a <HAL_GPIO_Init+0x26a>
 8001ed2:	bf00      	nop
 8001ed4:	58000080 	.word	0x58000080
 8001ed8:	58024400 	.word	0x58024400
 8001edc:	58000400 	.word	0x58000400
 8001ee0:	58020000 	.word	0x58020000
 8001ee4:	58020400 	.word	0x58020400
 8001ee8:	58020800 	.word	0x58020800
 8001eec:	58020c00 	.word	0x58020c00
 8001ef0:	58021000 	.word	0x58021000
 8001ef4:	58021400 	.word	0x58021400
 8001ef8:	58021800 	.word	0x58021800
 8001efc:	58021c00 	.word	0x58021c00
 8001f00:	58022000 	.word	0x58022000
 8001f04:	58022400 	.word	0x58022400
 8001f08:	2300      	movs	r3, #0
 8001f0a:	69fa      	ldr	r2, [r7, #28]
 8001f0c:	f002 0203 	and.w	r2, r2, #3
 8001f10:	0092      	lsls	r2, r2, #2
 8001f12:	4093      	lsls	r3, r2
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f1a:	4938      	ldr	r1, [pc, #224]	; (8001ffc <HAL_GPIO_Init+0x35c>)
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	089b      	lsrs	r3, r3, #2
 8001f20:	3302      	adds	r3, #2
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	43db      	mvns	r3, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d003      	beq.n	8001f4c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	43db      	mvns	r3, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001fa2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d003      	beq.n	8001fd0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001fd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f47f ae63 	bne.w	8001cb4 <HAL_GPIO_Init+0x14>
  }
}
 8001fee:	bf00      	nop
 8001ff0:	bf00      	nop
 8001ff2:	3724      	adds	r7, #36	; 0x24
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	58000400 	.word	0x58000400

08002000 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002008:	4a08      	ldr	r2, [pc, #32]	; (800202c <HAL_HSEM_FastTake+0x2c>)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	3320      	adds	r3, #32
 800200e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002012:	4a07      	ldr	r2, [pc, #28]	; (8002030 <HAL_HSEM_FastTake+0x30>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d101      	bne.n	800201c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002018:	2300      	movs	r3, #0
 800201a:	e000      	b.n	800201e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
}
 800201e:	4618      	mov	r0, r3
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	58026400 	.word	0x58026400
 8002030:	80000300 	.word	0x80000300

08002034 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800203e:	4906      	ldr	r1, [pc, #24]	; (8002058 <HAL_HSEM_Release+0x24>)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	58026400 	.word	0x58026400

0800205c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002064:	4b29      	ldr	r3, [pc, #164]	; (800210c <HAL_PWREx_ConfigSupply+0xb0>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	f003 0307 	and.w	r3, r3, #7
 800206c:	2b06      	cmp	r3, #6
 800206e:	d00a      	beq.n	8002086 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002070:	4b26      	ldr	r3, [pc, #152]	; (800210c <HAL_PWREx_ConfigSupply+0xb0>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	429a      	cmp	r2, r3
 800207c:	d001      	beq.n	8002082 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e040      	b.n	8002104 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002082:	2300      	movs	r3, #0
 8002084:	e03e      	b.n	8002104 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002086:	4b21      	ldr	r3, [pc, #132]	; (800210c <HAL_PWREx_ConfigSupply+0xb0>)
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800208e:	491f      	ldr	r1, [pc, #124]	; (800210c <HAL_PWREx_ConfigSupply+0xb0>)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4313      	orrs	r3, r2
 8002094:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002096:	f7fe ff55 	bl	8000f44 <HAL_GetTick>
 800209a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800209c:	e009      	b.n	80020b2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800209e:	f7fe ff51 	bl	8000f44 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020ac:	d901      	bls.n	80020b2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e028      	b.n	8002104 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80020b2:	4b16      	ldr	r3, [pc, #88]	; (800210c <HAL_PWREx_ConfigSupply+0xb0>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020be:	d1ee      	bne.n	800209e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b1e      	cmp	r3, #30
 80020c4:	d008      	beq.n	80020d8 <HAL_PWREx_ConfigSupply+0x7c>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b2e      	cmp	r3, #46	; 0x2e
 80020ca:	d005      	beq.n	80020d8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b1d      	cmp	r3, #29
 80020d0:	d002      	beq.n	80020d8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2b2d      	cmp	r3, #45	; 0x2d
 80020d6:	d114      	bne.n	8002102 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80020d8:	f7fe ff34 	bl	8000f44 <HAL_GetTick>
 80020dc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80020de:	e009      	b.n	80020f4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80020e0:	f7fe ff30 	bl	8000f44 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020ee:	d901      	bls.n	80020f4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e007      	b.n	8002104 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80020f4:	4b05      	ldr	r3, [pc, #20]	; (800210c <HAL_PWREx_ConfigSupply+0xb0>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002100:	d1ee      	bne.n	80020e0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	58024800 	.word	0x58024800

08002110 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b08c      	sub	sp, #48	; 0x30
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e3ff      	b.n	8002922 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b00      	cmp	r3, #0
 800212c:	f000 8087 	beq.w	800223e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002130:	4b99      	ldr	r3, [pc, #612]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002138:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800213a:	4b97      	ldr	r3, [pc, #604]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 800213c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002142:	2b10      	cmp	r3, #16
 8002144:	d007      	beq.n	8002156 <HAL_RCC_OscConfig+0x46>
 8002146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002148:	2b18      	cmp	r3, #24
 800214a:	d110      	bne.n	800216e <HAL_RCC_OscConfig+0x5e>
 800214c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800214e:	f003 0303 	and.w	r3, r3, #3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d10b      	bne.n	800216e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002156:	4b90      	ldr	r3, [pc, #576]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d06c      	beq.n	800223c <HAL_RCC_OscConfig+0x12c>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d168      	bne.n	800223c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e3d9      	b.n	8002922 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002176:	d106      	bne.n	8002186 <HAL_RCC_OscConfig+0x76>
 8002178:	4b87      	ldr	r3, [pc, #540]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a86      	ldr	r2, [pc, #536]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 800217e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002182:	6013      	str	r3, [r2, #0]
 8002184:	e02e      	b.n	80021e4 <HAL_RCC_OscConfig+0xd4>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10c      	bne.n	80021a8 <HAL_RCC_OscConfig+0x98>
 800218e:	4b82      	ldr	r3, [pc, #520]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a81      	ldr	r2, [pc, #516]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 8002194:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002198:	6013      	str	r3, [r2, #0]
 800219a:	4b7f      	ldr	r3, [pc, #508]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a7e      	ldr	r2, [pc, #504]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 80021a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021a4:	6013      	str	r3, [r2, #0]
 80021a6:	e01d      	b.n	80021e4 <HAL_RCC_OscConfig+0xd4>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021b0:	d10c      	bne.n	80021cc <HAL_RCC_OscConfig+0xbc>
 80021b2:	4b79      	ldr	r3, [pc, #484]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a78      	ldr	r2, [pc, #480]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 80021b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021bc:	6013      	str	r3, [r2, #0]
 80021be:	4b76      	ldr	r3, [pc, #472]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a75      	ldr	r2, [pc, #468]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 80021c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	e00b      	b.n	80021e4 <HAL_RCC_OscConfig+0xd4>
 80021cc:	4b72      	ldr	r3, [pc, #456]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a71      	ldr	r2, [pc, #452]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 80021d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021d6:	6013      	str	r3, [r2, #0]
 80021d8:	4b6f      	ldr	r3, [pc, #444]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a6e      	ldr	r2, [pc, #440]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 80021de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d013      	beq.n	8002214 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ec:	f7fe feaa 	bl	8000f44 <HAL_GetTick>
 80021f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021f4:	f7fe fea6 	bl	8000f44 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b64      	cmp	r3, #100	; 0x64
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e38d      	b.n	8002922 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002206:	4b64      	ldr	r3, [pc, #400]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d0f0      	beq.n	80021f4 <HAL_RCC_OscConfig+0xe4>
 8002212:	e014      	b.n	800223e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002214:	f7fe fe96 	bl	8000f44 <HAL_GetTick>
 8002218:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800221c:	f7fe fe92 	bl	8000f44 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b64      	cmp	r3, #100	; 0x64
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e379      	b.n	8002922 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800222e:	4b5a      	ldr	r3, [pc, #360]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1f0      	bne.n	800221c <HAL_RCC_OscConfig+0x10c>
 800223a:	e000      	b.n	800223e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800223c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	f000 80ae 	beq.w	80023a8 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800224c:	4b52      	ldr	r3, [pc, #328]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002254:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002256:	4b50      	ldr	r3, [pc, #320]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 8002258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800225c:	6a3b      	ldr	r3, [r7, #32]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d007      	beq.n	8002272 <HAL_RCC_OscConfig+0x162>
 8002262:	6a3b      	ldr	r3, [r7, #32]
 8002264:	2b18      	cmp	r3, #24
 8002266:	d13a      	bne.n	80022de <HAL_RCC_OscConfig+0x1ce>
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d135      	bne.n	80022de <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002272:	4b49      	ldr	r3, [pc, #292]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0304 	and.w	r3, r3, #4
 800227a:	2b00      	cmp	r3, #0
 800227c:	d005      	beq.n	800228a <HAL_RCC_OscConfig+0x17a>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e34b      	b.n	8002922 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800228a:	f7fe fe8b 	bl	8000fa4 <HAL_GetREVID>
 800228e:	4603      	mov	r3, r0
 8002290:	f241 0203 	movw	r2, #4099	; 0x1003
 8002294:	4293      	cmp	r3, r2
 8002296:	d817      	bhi.n	80022c8 <HAL_RCC_OscConfig+0x1b8>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	2b40      	cmp	r3, #64	; 0x40
 800229e:	d108      	bne.n	80022b2 <HAL_RCC_OscConfig+0x1a2>
 80022a0:	4b3d      	ldr	r3, [pc, #244]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80022a8:	4a3b      	ldr	r2, [pc, #236]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 80022aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022ae:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022b0:	e07a      	b.n	80023a8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b2:	4b39      	ldr	r3, [pc, #228]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	031b      	lsls	r3, r3, #12
 80022c0:	4935      	ldr	r1, [pc, #212]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022c6:	e06f      	b.n	80023a8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c8:	4b33      	ldr	r3, [pc, #204]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	061b      	lsls	r3, r3, #24
 80022d6:	4930      	ldr	r1, [pc, #192]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022dc:	e064      	b.n	80023a8 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d045      	beq.n	8002372 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80022e6:	4b2c      	ldr	r3, [pc, #176]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f023 0219 	bic.w	r2, r3, #25
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	4929      	ldr	r1, [pc, #164]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f8:	f7fe fe24 	bl	8000f44 <HAL_GetTick>
 80022fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002300:	f7fe fe20 	bl	8000f44 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e307      	b.n	8002922 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002312:	4b21      	ldr	r3, [pc, #132]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0304 	and.w	r3, r3, #4
 800231a:	2b00      	cmp	r3, #0
 800231c:	d0f0      	beq.n	8002300 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800231e:	f7fe fe41 	bl	8000fa4 <HAL_GetREVID>
 8002322:	4603      	mov	r3, r0
 8002324:	f241 0203 	movw	r2, #4099	; 0x1003
 8002328:	4293      	cmp	r3, r2
 800232a:	d817      	bhi.n	800235c <HAL_RCC_OscConfig+0x24c>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	2b40      	cmp	r3, #64	; 0x40
 8002332:	d108      	bne.n	8002346 <HAL_RCC_OscConfig+0x236>
 8002334:	4b18      	ldr	r3, [pc, #96]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800233c:	4a16      	ldr	r2, [pc, #88]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 800233e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002342:	6053      	str	r3, [r2, #4]
 8002344:	e030      	b.n	80023a8 <HAL_RCC_OscConfig+0x298>
 8002346:	4b14      	ldr	r3, [pc, #80]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	031b      	lsls	r3, r3, #12
 8002354:	4910      	ldr	r1, [pc, #64]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 8002356:	4313      	orrs	r3, r2
 8002358:	604b      	str	r3, [r1, #4]
 800235a:	e025      	b.n	80023a8 <HAL_RCC_OscConfig+0x298>
 800235c:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	061b      	lsls	r3, r3, #24
 800236a:	490b      	ldr	r1, [pc, #44]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 800236c:	4313      	orrs	r3, r2
 800236e:	604b      	str	r3, [r1, #4]
 8002370:	e01a      	b.n	80023a8 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002372:	4b09      	ldr	r3, [pc, #36]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a08      	ldr	r2, [pc, #32]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 8002378:	f023 0301 	bic.w	r3, r3, #1
 800237c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237e:	f7fe fde1 	bl	8000f44 <HAL_GetTick>
 8002382:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002384:	e00a      	b.n	800239c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002386:	f7fe fddd 	bl	8000f44 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d903      	bls.n	800239c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e2c4      	b.n	8002922 <HAL_RCC_OscConfig+0x812>
 8002398:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800239c:	4ba4      	ldr	r3, [pc, #656]	; (8002630 <HAL_RCC_OscConfig+0x520>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1ee      	bne.n	8002386 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0310 	and.w	r3, r3, #16
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f000 80a9 	beq.w	8002508 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023b6:	4b9e      	ldr	r3, [pc, #632]	; (8002630 <HAL_RCC_OscConfig+0x520>)
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023be:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023c0:	4b9b      	ldr	r3, [pc, #620]	; (8002630 <HAL_RCC_OscConfig+0x520>)
 80023c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	2b08      	cmp	r3, #8
 80023ca:	d007      	beq.n	80023dc <HAL_RCC_OscConfig+0x2cc>
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	2b18      	cmp	r3, #24
 80023d0:	d13a      	bne.n	8002448 <HAL_RCC_OscConfig+0x338>
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f003 0303 	and.w	r3, r3, #3
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d135      	bne.n	8002448 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80023dc:	4b94      	ldr	r3, [pc, #592]	; (8002630 <HAL_RCC_OscConfig+0x520>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d005      	beq.n	80023f4 <HAL_RCC_OscConfig+0x2e4>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	69db      	ldr	r3, [r3, #28]
 80023ec:	2b80      	cmp	r3, #128	; 0x80
 80023ee:	d001      	beq.n	80023f4 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e296      	b.n	8002922 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80023f4:	f7fe fdd6 	bl	8000fa4 <HAL_GetREVID>
 80023f8:	4603      	mov	r3, r0
 80023fa:	f241 0203 	movw	r2, #4099	; 0x1003
 80023fe:	4293      	cmp	r3, r2
 8002400:	d817      	bhi.n	8002432 <HAL_RCC_OscConfig+0x322>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	2b20      	cmp	r3, #32
 8002408:	d108      	bne.n	800241c <HAL_RCC_OscConfig+0x30c>
 800240a:	4b89      	ldr	r3, [pc, #548]	; (8002630 <HAL_RCC_OscConfig+0x520>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002412:	4a87      	ldr	r2, [pc, #540]	; (8002630 <HAL_RCC_OscConfig+0x520>)
 8002414:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002418:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800241a:	e075      	b.n	8002508 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800241c:	4b84      	ldr	r3, [pc, #528]	; (8002630 <HAL_RCC_OscConfig+0x520>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	069b      	lsls	r3, r3, #26
 800242a:	4981      	ldr	r1, [pc, #516]	; (8002630 <HAL_RCC_OscConfig+0x520>)
 800242c:	4313      	orrs	r3, r2
 800242e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002430:	e06a      	b.n	8002508 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002432:	4b7f      	ldr	r3, [pc, #508]	; (8002630 <HAL_RCC_OscConfig+0x520>)
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	061b      	lsls	r3, r3, #24
 8002440:	497b      	ldr	r1, [pc, #492]	; (8002630 <HAL_RCC_OscConfig+0x520>)
 8002442:	4313      	orrs	r3, r2
 8002444:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002446:	e05f      	b.n	8002508 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	69db      	ldr	r3, [r3, #28]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d042      	beq.n	80024d6 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002450:	4b77      	ldr	r3, [pc, #476]	; (8002630 <HAL_RCC_OscConfig+0x520>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a76      	ldr	r2, [pc, #472]	; (8002630 <HAL_RCC_OscConfig+0x520>)
 8002456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800245a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245c:	f7fe fd72 	bl	8000f44 <HAL_GetTick>
 8002460:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002464:	f7fe fd6e 	bl	8000f44 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e255      	b.n	8002922 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002476:	4b6e      	ldr	r3, [pc, #440]	; (8002630 <HAL_RCC_OscConfig+0x520>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247e:	2b00      	cmp	r3, #0
 8002480:	d0f0      	beq.n	8002464 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002482:	f7fe fd8f 	bl	8000fa4 <HAL_GetREVID>
 8002486:	4603      	mov	r3, r0
 8002488:	f241 0203 	movw	r2, #4099	; 0x1003
 800248c:	4293      	cmp	r3, r2
 800248e:	d817      	bhi.n	80024c0 <HAL_RCC_OscConfig+0x3b0>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	2b20      	cmp	r3, #32
 8002496:	d108      	bne.n	80024aa <HAL_RCC_OscConfig+0x39a>
 8002498:	4b65      	ldr	r3, [pc, #404]	; (8002630 <HAL_RCC_OscConfig+0x520>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80024a0:	4a63      	ldr	r2, [pc, #396]	; (8002630 <HAL_RCC_OscConfig+0x520>)
 80024a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80024a6:	6053      	str	r3, [r2, #4]
 80024a8:	e02e      	b.n	8002508 <HAL_RCC_OscConfig+0x3f8>
 80024aa:	4b61      	ldr	r3, [pc, #388]	; (8002630 <HAL_RCC_OscConfig+0x520>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a1b      	ldr	r3, [r3, #32]
 80024b6:	069b      	lsls	r3, r3, #26
 80024b8:	495d      	ldr	r1, [pc, #372]	; (8002630 <HAL_RCC_OscConfig+0x520>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	604b      	str	r3, [r1, #4]
 80024be:	e023      	b.n	8002508 <HAL_RCC_OscConfig+0x3f8>
 80024c0:	4b5b      	ldr	r3, [pc, #364]	; (8002630 <HAL_RCC_OscConfig+0x520>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	061b      	lsls	r3, r3, #24
 80024ce:	4958      	ldr	r1, [pc, #352]	; (8002630 <HAL_RCC_OscConfig+0x520>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	60cb      	str	r3, [r1, #12]
 80024d4:	e018      	b.n	8002508 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80024d6:	4b56      	ldr	r3, [pc, #344]	; (8002630 <HAL_RCC_OscConfig+0x520>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a55      	ldr	r2, [pc, #340]	; (8002630 <HAL_RCC_OscConfig+0x520>)
 80024dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e2:	f7fe fd2f 	bl	8000f44 <HAL_GetTick>
 80024e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80024ea:	f7fe fd2b 	bl	8000f44 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e212      	b.n	8002922 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80024fc:	4b4c      	ldr	r3, [pc, #304]	; (8002630 <HAL_RCC_OscConfig+0x520>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1f0      	bne.n	80024ea <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0308 	and.w	r3, r3, #8
 8002510:	2b00      	cmp	r3, #0
 8002512:	d036      	beq.n	8002582 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d019      	beq.n	8002550 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800251c:	4b44      	ldr	r3, [pc, #272]	; (8002630 <HAL_RCC_OscConfig+0x520>)
 800251e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002520:	4a43      	ldr	r2, [pc, #268]	; (8002630 <HAL_RCC_OscConfig+0x520>)
 8002522:	f043 0301 	orr.w	r3, r3, #1
 8002526:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002528:	f7fe fd0c 	bl	8000f44 <HAL_GetTick>
 800252c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002530:	f7fe fd08 	bl	8000f44 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e1ef      	b.n	8002922 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002542:	4b3b      	ldr	r3, [pc, #236]	; (8002630 <HAL_RCC_OscConfig+0x520>)
 8002544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d0f0      	beq.n	8002530 <HAL_RCC_OscConfig+0x420>
 800254e:	e018      	b.n	8002582 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002550:	4b37      	ldr	r3, [pc, #220]	; (8002630 <HAL_RCC_OscConfig+0x520>)
 8002552:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002554:	4a36      	ldr	r2, [pc, #216]	; (8002630 <HAL_RCC_OscConfig+0x520>)
 8002556:	f023 0301 	bic.w	r3, r3, #1
 800255a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800255c:	f7fe fcf2 	bl	8000f44 <HAL_GetTick>
 8002560:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002564:	f7fe fcee 	bl	8000f44 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e1d5      	b.n	8002922 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002576:	4b2e      	ldr	r3, [pc, #184]	; (8002630 <HAL_RCC_OscConfig+0x520>)
 8002578:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f0      	bne.n	8002564 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0320 	and.w	r3, r3, #32
 800258a:	2b00      	cmp	r3, #0
 800258c:	d036      	beq.n	80025fc <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d019      	beq.n	80025ca <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002596:	4b26      	ldr	r3, [pc, #152]	; (8002630 <HAL_RCC_OscConfig+0x520>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a25      	ldr	r2, [pc, #148]	; (8002630 <HAL_RCC_OscConfig+0x520>)
 800259c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025a0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80025a2:	f7fe fccf 	bl	8000f44 <HAL_GetTick>
 80025a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80025a8:	e008      	b.n	80025bc <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80025aa:	f7fe fccb 	bl	8000f44 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e1b2      	b.n	8002922 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80025bc:	4b1c      	ldr	r3, [pc, #112]	; (8002630 <HAL_RCC_OscConfig+0x520>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0f0      	beq.n	80025aa <HAL_RCC_OscConfig+0x49a>
 80025c8:	e018      	b.n	80025fc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025ca:	4b19      	ldr	r3, [pc, #100]	; (8002630 <HAL_RCC_OscConfig+0x520>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a18      	ldr	r2, [pc, #96]	; (8002630 <HAL_RCC_OscConfig+0x520>)
 80025d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025d4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80025d6:	f7fe fcb5 	bl	8000f44 <HAL_GetTick>
 80025da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80025dc:	e008      	b.n	80025f0 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80025de:	f7fe fcb1 	bl	8000f44 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e198      	b.n	8002922 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80025f0:	4b0f      	ldr	r3, [pc, #60]	; (8002630 <HAL_RCC_OscConfig+0x520>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1f0      	bne.n	80025de <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 8085 	beq.w	8002714 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800260a:	4b0a      	ldr	r3, [pc, #40]	; (8002634 <HAL_RCC_OscConfig+0x524>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a09      	ldr	r2, [pc, #36]	; (8002634 <HAL_RCC_OscConfig+0x524>)
 8002610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002614:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002616:	f7fe fc95 	bl	8000f44 <HAL_GetTick>
 800261a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800261c:	e00c      	b.n	8002638 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800261e:	f7fe fc91 	bl	8000f44 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b64      	cmp	r3, #100	; 0x64
 800262a:	d905      	bls.n	8002638 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e178      	b.n	8002922 <HAL_RCC_OscConfig+0x812>
 8002630:	58024400 	.word	0x58024400
 8002634:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002638:	4b96      	ldr	r3, [pc, #600]	; (8002894 <HAL_RCC_OscConfig+0x784>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0ec      	beq.n	800261e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d106      	bne.n	800265a <HAL_RCC_OscConfig+0x54a>
 800264c:	4b92      	ldr	r3, [pc, #584]	; (8002898 <HAL_RCC_OscConfig+0x788>)
 800264e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002650:	4a91      	ldr	r2, [pc, #580]	; (8002898 <HAL_RCC_OscConfig+0x788>)
 8002652:	f043 0301 	orr.w	r3, r3, #1
 8002656:	6713      	str	r3, [r2, #112]	; 0x70
 8002658:	e02d      	b.n	80026b6 <HAL_RCC_OscConfig+0x5a6>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10c      	bne.n	800267c <HAL_RCC_OscConfig+0x56c>
 8002662:	4b8d      	ldr	r3, [pc, #564]	; (8002898 <HAL_RCC_OscConfig+0x788>)
 8002664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002666:	4a8c      	ldr	r2, [pc, #560]	; (8002898 <HAL_RCC_OscConfig+0x788>)
 8002668:	f023 0301 	bic.w	r3, r3, #1
 800266c:	6713      	str	r3, [r2, #112]	; 0x70
 800266e:	4b8a      	ldr	r3, [pc, #552]	; (8002898 <HAL_RCC_OscConfig+0x788>)
 8002670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002672:	4a89      	ldr	r2, [pc, #548]	; (8002898 <HAL_RCC_OscConfig+0x788>)
 8002674:	f023 0304 	bic.w	r3, r3, #4
 8002678:	6713      	str	r3, [r2, #112]	; 0x70
 800267a:	e01c      	b.n	80026b6 <HAL_RCC_OscConfig+0x5a6>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	2b05      	cmp	r3, #5
 8002682:	d10c      	bne.n	800269e <HAL_RCC_OscConfig+0x58e>
 8002684:	4b84      	ldr	r3, [pc, #528]	; (8002898 <HAL_RCC_OscConfig+0x788>)
 8002686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002688:	4a83      	ldr	r2, [pc, #524]	; (8002898 <HAL_RCC_OscConfig+0x788>)
 800268a:	f043 0304 	orr.w	r3, r3, #4
 800268e:	6713      	str	r3, [r2, #112]	; 0x70
 8002690:	4b81      	ldr	r3, [pc, #516]	; (8002898 <HAL_RCC_OscConfig+0x788>)
 8002692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002694:	4a80      	ldr	r2, [pc, #512]	; (8002898 <HAL_RCC_OscConfig+0x788>)
 8002696:	f043 0301 	orr.w	r3, r3, #1
 800269a:	6713      	str	r3, [r2, #112]	; 0x70
 800269c:	e00b      	b.n	80026b6 <HAL_RCC_OscConfig+0x5a6>
 800269e:	4b7e      	ldr	r3, [pc, #504]	; (8002898 <HAL_RCC_OscConfig+0x788>)
 80026a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a2:	4a7d      	ldr	r2, [pc, #500]	; (8002898 <HAL_RCC_OscConfig+0x788>)
 80026a4:	f023 0301 	bic.w	r3, r3, #1
 80026a8:	6713      	str	r3, [r2, #112]	; 0x70
 80026aa:	4b7b      	ldr	r3, [pc, #492]	; (8002898 <HAL_RCC_OscConfig+0x788>)
 80026ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ae:	4a7a      	ldr	r2, [pc, #488]	; (8002898 <HAL_RCC_OscConfig+0x788>)
 80026b0:	f023 0304 	bic.w	r3, r3, #4
 80026b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d015      	beq.n	80026ea <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026be:	f7fe fc41 	bl	8000f44 <HAL_GetTick>
 80026c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026c4:	e00a      	b.n	80026dc <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026c6:	f7fe fc3d 	bl	8000f44 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e122      	b.n	8002922 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026dc:	4b6e      	ldr	r3, [pc, #440]	; (8002898 <HAL_RCC_OscConfig+0x788>)
 80026de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0ee      	beq.n	80026c6 <HAL_RCC_OscConfig+0x5b6>
 80026e8:	e014      	b.n	8002714 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ea:	f7fe fc2b 	bl	8000f44 <HAL_GetTick>
 80026ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80026f0:	e00a      	b.n	8002708 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026f2:	f7fe fc27 	bl	8000f44 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002700:	4293      	cmp	r3, r2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e10c      	b.n	8002922 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002708:	4b63      	ldr	r3, [pc, #396]	; (8002898 <HAL_RCC_OscConfig+0x788>)
 800270a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1ee      	bne.n	80026f2 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002718:	2b00      	cmp	r3, #0
 800271a:	f000 8101 	beq.w	8002920 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800271e:	4b5e      	ldr	r3, [pc, #376]	; (8002898 <HAL_RCC_OscConfig+0x788>)
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002726:	2b18      	cmp	r3, #24
 8002728:	f000 80bc 	beq.w	80028a4 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	2b02      	cmp	r3, #2
 8002732:	f040 8095 	bne.w	8002860 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002736:	4b58      	ldr	r3, [pc, #352]	; (8002898 <HAL_RCC_OscConfig+0x788>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a57      	ldr	r2, [pc, #348]	; (8002898 <HAL_RCC_OscConfig+0x788>)
 800273c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002740:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002742:	f7fe fbff 	bl	8000f44 <HAL_GetTick>
 8002746:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800274a:	f7fe fbfb 	bl	8000f44 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e0e2      	b.n	8002922 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800275c:	4b4e      	ldr	r3, [pc, #312]	; (8002898 <HAL_RCC_OscConfig+0x788>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1f0      	bne.n	800274a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002768:	4b4b      	ldr	r3, [pc, #300]	; (8002898 <HAL_RCC_OscConfig+0x788>)
 800276a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800276c:	4b4b      	ldr	r3, [pc, #300]	; (800289c <HAL_RCC_OscConfig+0x78c>)
 800276e:	4013      	ands	r3, r2
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002778:	0112      	lsls	r2, r2, #4
 800277a:	430a      	orrs	r2, r1
 800277c:	4946      	ldr	r1, [pc, #280]	; (8002898 <HAL_RCC_OscConfig+0x788>)
 800277e:	4313      	orrs	r3, r2
 8002780:	628b      	str	r3, [r1, #40]	; 0x28
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	3b01      	subs	r3, #1
 8002788:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002790:	3b01      	subs	r3, #1
 8002792:	025b      	lsls	r3, r3, #9
 8002794:	b29b      	uxth	r3, r3
 8002796:	431a      	orrs	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800279c:	3b01      	subs	r3, #1
 800279e:	041b      	lsls	r3, r3, #16
 80027a0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80027a4:	431a      	orrs	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027aa:	3b01      	subs	r3, #1
 80027ac:	061b      	lsls	r3, r3, #24
 80027ae:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80027b2:	4939      	ldr	r1, [pc, #228]	; (8002898 <HAL_RCC_OscConfig+0x788>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80027b8:	4b37      	ldr	r3, [pc, #220]	; (8002898 <HAL_RCC_OscConfig+0x788>)
 80027ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027bc:	4a36      	ldr	r2, [pc, #216]	; (8002898 <HAL_RCC_OscConfig+0x788>)
 80027be:	f023 0301 	bic.w	r3, r3, #1
 80027c2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80027c4:	4b34      	ldr	r3, [pc, #208]	; (8002898 <HAL_RCC_OscConfig+0x788>)
 80027c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027c8:	4b35      	ldr	r3, [pc, #212]	; (80028a0 <HAL_RCC_OscConfig+0x790>)
 80027ca:	4013      	ands	r3, r2
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80027d0:	00d2      	lsls	r2, r2, #3
 80027d2:	4931      	ldr	r1, [pc, #196]	; (8002898 <HAL_RCC_OscConfig+0x788>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80027d8:	4b2f      	ldr	r3, [pc, #188]	; (8002898 <HAL_RCC_OscConfig+0x788>)
 80027da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027dc:	f023 020c 	bic.w	r2, r3, #12
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e4:	492c      	ldr	r1, [pc, #176]	; (8002898 <HAL_RCC_OscConfig+0x788>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80027ea:	4b2b      	ldr	r3, [pc, #172]	; (8002898 <HAL_RCC_OscConfig+0x788>)
 80027ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ee:	f023 0202 	bic.w	r2, r3, #2
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f6:	4928      	ldr	r1, [pc, #160]	; (8002898 <HAL_RCC_OscConfig+0x788>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80027fc:	4b26      	ldr	r3, [pc, #152]	; (8002898 <HAL_RCC_OscConfig+0x788>)
 80027fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002800:	4a25      	ldr	r2, [pc, #148]	; (8002898 <HAL_RCC_OscConfig+0x788>)
 8002802:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002806:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002808:	4b23      	ldr	r3, [pc, #140]	; (8002898 <HAL_RCC_OscConfig+0x788>)
 800280a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280c:	4a22      	ldr	r2, [pc, #136]	; (8002898 <HAL_RCC_OscConfig+0x788>)
 800280e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002812:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002814:	4b20      	ldr	r3, [pc, #128]	; (8002898 <HAL_RCC_OscConfig+0x788>)
 8002816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002818:	4a1f      	ldr	r2, [pc, #124]	; (8002898 <HAL_RCC_OscConfig+0x788>)
 800281a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800281e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002820:	4b1d      	ldr	r3, [pc, #116]	; (8002898 <HAL_RCC_OscConfig+0x788>)
 8002822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002824:	4a1c      	ldr	r2, [pc, #112]	; (8002898 <HAL_RCC_OscConfig+0x788>)
 8002826:	f043 0301 	orr.w	r3, r3, #1
 800282a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800282c:	4b1a      	ldr	r3, [pc, #104]	; (8002898 <HAL_RCC_OscConfig+0x788>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a19      	ldr	r2, [pc, #100]	; (8002898 <HAL_RCC_OscConfig+0x788>)
 8002832:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002836:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002838:	f7fe fb84 	bl	8000f44 <HAL_GetTick>
 800283c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002840:	f7fe fb80 	bl	8000f44 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e067      	b.n	8002922 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002852:	4b11      	ldr	r3, [pc, #68]	; (8002898 <HAL_RCC_OscConfig+0x788>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d0f0      	beq.n	8002840 <HAL_RCC_OscConfig+0x730>
 800285e:	e05f      	b.n	8002920 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002860:	4b0d      	ldr	r3, [pc, #52]	; (8002898 <HAL_RCC_OscConfig+0x788>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a0c      	ldr	r2, [pc, #48]	; (8002898 <HAL_RCC_OscConfig+0x788>)
 8002866:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800286a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286c:	f7fe fb6a 	bl	8000f44 <HAL_GetTick>
 8002870:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002874:	f7fe fb66 	bl	8000f44 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e04d      	b.n	8002922 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002886:	4b04      	ldr	r3, [pc, #16]	; (8002898 <HAL_RCC_OscConfig+0x788>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f0      	bne.n	8002874 <HAL_RCC_OscConfig+0x764>
 8002892:	e045      	b.n	8002920 <HAL_RCC_OscConfig+0x810>
 8002894:	58024800 	.word	0x58024800
 8002898:	58024400 	.word	0x58024400
 800289c:	fffffc0c 	.word	0xfffffc0c
 80028a0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80028a4:	4b21      	ldr	r3, [pc, #132]	; (800292c <HAL_RCC_OscConfig+0x81c>)
 80028a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80028aa:	4b20      	ldr	r3, [pc, #128]	; (800292c <HAL_RCC_OscConfig+0x81c>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d031      	beq.n	800291c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	f003 0203 	and.w	r2, r3, #3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d12a      	bne.n	800291c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	091b      	lsrs	r3, r3, #4
 80028ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d122      	bne.n	800291c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d11a      	bne.n	800291c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	0a5b      	lsrs	r3, r3, #9
 80028ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d111      	bne.n	800291c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	0c1b      	lsrs	r3, r3, #16
 80028fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002904:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002906:	429a      	cmp	r2, r3
 8002908:	d108      	bne.n	800291c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	0e1b      	lsrs	r3, r3, #24
 800290e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002916:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002918:	429a      	cmp	r2, r3
 800291a:	d001      	beq.n	8002920 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e000      	b.n	8002922 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3730      	adds	r7, #48	; 0x30
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	58024400 	.word	0x58024400

08002930 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e19c      	b.n	8002c7e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002944:	4b8a      	ldr	r3, [pc, #552]	; (8002b70 <HAL_RCC_ClockConfig+0x240>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 030f 	and.w	r3, r3, #15
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	429a      	cmp	r2, r3
 8002950:	d910      	bls.n	8002974 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002952:	4b87      	ldr	r3, [pc, #540]	; (8002b70 <HAL_RCC_ClockConfig+0x240>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f023 020f 	bic.w	r2, r3, #15
 800295a:	4985      	ldr	r1, [pc, #532]	; (8002b70 <HAL_RCC_ClockConfig+0x240>)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	4313      	orrs	r3, r2
 8002960:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002962:	4b83      	ldr	r3, [pc, #524]	; (8002b70 <HAL_RCC_ClockConfig+0x240>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 030f 	and.w	r3, r3, #15
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	429a      	cmp	r2, r3
 800296e:	d001      	beq.n	8002974 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e184      	b.n	8002c7e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0304 	and.w	r3, r3, #4
 800297c:	2b00      	cmp	r3, #0
 800297e:	d010      	beq.n	80029a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	691a      	ldr	r2, [r3, #16]
 8002984:	4b7b      	ldr	r3, [pc, #492]	; (8002b74 <HAL_RCC_ClockConfig+0x244>)
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800298c:	429a      	cmp	r2, r3
 800298e:	d908      	bls.n	80029a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002990:	4b78      	ldr	r3, [pc, #480]	; (8002b74 <HAL_RCC_ClockConfig+0x244>)
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	4975      	ldr	r1, [pc, #468]	; (8002b74 <HAL_RCC_ClockConfig+0x244>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0308 	and.w	r3, r3, #8
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d010      	beq.n	80029d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	695a      	ldr	r2, [r3, #20]
 80029b2:	4b70      	ldr	r3, [pc, #448]	; (8002b74 <HAL_RCC_ClockConfig+0x244>)
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d908      	bls.n	80029d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80029be:	4b6d      	ldr	r3, [pc, #436]	; (8002b74 <HAL_RCC_ClockConfig+0x244>)
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	496a      	ldr	r1, [pc, #424]	; (8002b74 <HAL_RCC_ClockConfig+0x244>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0310 	and.w	r3, r3, #16
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d010      	beq.n	80029fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	699a      	ldr	r2, [r3, #24]
 80029e0:	4b64      	ldr	r3, [pc, #400]	; (8002b74 <HAL_RCC_ClockConfig+0x244>)
 80029e2:	69db      	ldr	r3, [r3, #28]
 80029e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d908      	bls.n	80029fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80029ec:	4b61      	ldr	r3, [pc, #388]	; (8002b74 <HAL_RCC_ClockConfig+0x244>)
 80029ee:	69db      	ldr	r3, [r3, #28]
 80029f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	495e      	ldr	r1, [pc, #376]	; (8002b74 <HAL_RCC_ClockConfig+0x244>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0320 	and.w	r3, r3, #32
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d010      	beq.n	8002a2c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	69da      	ldr	r2, [r3, #28]
 8002a0e:	4b59      	ldr	r3, [pc, #356]	; (8002b74 <HAL_RCC_ClockConfig+0x244>)
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d908      	bls.n	8002a2c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002a1a:	4b56      	ldr	r3, [pc, #344]	; (8002b74 <HAL_RCC_ClockConfig+0x244>)
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	4953      	ldr	r1, [pc, #332]	; (8002b74 <HAL_RCC_ClockConfig+0x244>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d010      	beq.n	8002a5a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68da      	ldr	r2, [r3, #12]
 8002a3c:	4b4d      	ldr	r3, [pc, #308]	; (8002b74 <HAL_RCC_ClockConfig+0x244>)
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	f003 030f 	and.w	r3, r3, #15
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d908      	bls.n	8002a5a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a48:	4b4a      	ldr	r3, [pc, #296]	; (8002b74 <HAL_RCC_ClockConfig+0x244>)
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	f023 020f 	bic.w	r2, r3, #15
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	4947      	ldr	r1, [pc, #284]	; (8002b74 <HAL_RCC_ClockConfig+0x244>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d055      	beq.n	8002b12 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002a66:	4b43      	ldr	r3, [pc, #268]	; (8002b74 <HAL_RCC_ClockConfig+0x244>)
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	4940      	ldr	r1, [pc, #256]	; (8002b74 <HAL_RCC_ClockConfig+0x244>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d107      	bne.n	8002a90 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a80:	4b3c      	ldr	r3, [pc, #240]	; (8002b74 <HAL_RCC_ClockConfig+0x244>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d121      	bne.n	8002ad0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e0f6      	b.n	8002c7e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	2b03      	cmp	r3, #3
 8002a96:	d107      	bne.n	8002aa8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a98:	4b36      	ldr	r3, [pc, #216]	; (8002b74 <HAL_RCC_ClockConfig+0x244>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d115      	bne.n	8002ad0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e0ea      	b.n	8002c7e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d107      	bne.n	8002ac0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ab0:	4b30      	ldr	r3, [pc, #192]	; (8002b74 <HAL_RCC_ClockConfig+0x244>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d109      	bne.n	8002ad0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e0de      	b.n	8002c7e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ac0:	4b2c      	ldr	r3, [pc, #176]	; (8002b74 <HAL_RCC_ClockConfig+0x244>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d101      	bne.n	8002ad0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e0d6      	b.n	8002c7e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ad0:	4b28      	ldr	r3, [pc, #160]	; (8002b74 <HAL_RCC_ClockConfig+0x244>)
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	f023 0207 	bic.w	r2, r3, #7
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	4925      	ldr	r1, [pc, #148]	; (8002b74 <HAL_RCC_ClockConfig+0x244>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae2:	f7fe fa2f 	bl	8000f44 <HAL_GetTick>
 8002ae6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ae8:	e00a      	b.n	8002b00 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aea:	f7fe fa2b 	bl	8000f44 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d901      	bls.n	8002b00 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e0be      	b.n	8002c7e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b00:	4b1c      	ldr	r3, [pc, #112]	; (8002b74 <HAL_RCC_ClockConfig+0x244>)
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	00db      	lsls	r3, r3, #3
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d1eb      	bne.n	8002aea <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d010      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68da      	ldr	r2, [r3, #12]
 8002b22:	4b14      	ldr	r3, [pc, #80]	; (8002b74 <HAL_RCC_ClockConfig+0x244>)
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d208      	bcs.n	8002b40 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b2e:	4b11      	ldr	r3, [pc, #68]	; (8002b74 <HAL_RCC_ClockConfig+0x244>)
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	f023 020f 	bic.w	r2, r3, #15
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	490e      	ldr	r1, [pc, #56]	; (8002b74 <HAL_RCC_ClockConfig+0x244>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b40:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <HAL_RCC_ClockConfig+0x240>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 030f 	and.w	r3, r3, #15
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d214      	bcs.n	8002b78 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b4e:	4b08      	ldr	r3, [pc, #32]	; (8002b70 <HAL_RCC_ClockConfig+0x240>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f023 020f 	bic.w	r2, r3, #15
 8002b56:	4906      	ldr	r1, [pc, #24]	; (8002b70 <HAL_RCC_ClockConfig+0x240>)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b5e:	4b04      	ldr	r3, [pc, #16]	; (8002b70 <HAL_RCC_ClockConfig+0x240>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 030f 	and.w	r3, r3, #15
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d005      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e086      	b.n	8002c7e <HAL_RCC_ClockConfig+0x34e>
 8002b70:	52002000 	.word	0x52002000
 8002b74:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d010      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	691a      	ldr	r2, [r3, #16]
 8002b88:	4b3f      	ldr	r3, [pc, #252]	; (8002c88 <HAL_RCC_ClockConfig+0x358>)
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d208      	bcs.n	8002ba6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b94:	4b3c      	ldr	r3, [pc, #240]	; (8002c88 <HAL_RCC_ClockConfig+0x358>)
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	4939      	ldr	r1, [pc, #228]	; (8002c88 <HAL_RCC_ClockConfig+0x358>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0308 	and.w	r3, r3, #8
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d010      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	695a      	ldr	r2, [r3, #20]
 8002bb6:	4b34      	ldr	r3, [pc, #208]	; (8002c88 <HAL_RCC_ClockConfig+0x358>)
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d208      	bcs.n	8002bd4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002bc2:	4b31      	ldr	r3, [pc, #196]	; (8002c88 <HAL_RCC_ClockConfig+0x358>)
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	492e      	ldr	r1, [pc, #184]	; (8002c88 <HAL_RCC_ClockConfig+0x358>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0310 	and.w	r3, r3, #16
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d010      	beq.n	8002c02 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	699a      	ldr	r2, [r3, #24]
 8002be4:	4b28      	ldr	r3, [pc, #160]	; (8002c88 <HAL_RCC_ClockConfig+0x358>)
 8002be6:	69db      	ldr	r3, [r3, #28]
 8002be8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d208      	bcs.n	8002c02 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002bf0:	4b25      	ldr	r3, [pc, #148]	; (8002c88 <HAL_RCC_ClockConfig+0x358>)
 8002bf2:	69db      	ldr	r3, [r3, #28]
 8002bf4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	4922      	ldr	r1, [pc, #136]	; (8002c88 <HAL_RCC_ClockConfig+0x358>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0320 	and.w	r3, r3, #32
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d010      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	69da      	ldr	r2, [r3, #28]
 8002c12:	4b1d      	ldr	r3, [pc, #116]	; (8002c88 <HAL_RCC_ClockConfig+0x358>)
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d208      	bcs.n	8002c30 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002c1e:	4b1a      	ldr	r3, [pc, #104]	; (8002c88 <HAL_RCC_ClockConfig+0x358>)
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	69db      	ldr	r3, [r3, #28]
 8002c2a:	4917      	ldr	r1, [pc, #92]	; (8002c88 <HAL_RCC_ClockConfig+0x358>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002c30:	f000 f834 	bl	8002c9c <HAL_RCC_GetSysClockFreq>
 8002c34:	4602      	mov	r2, r0
 8002c36:	4b14      	ldr	r3, [pc, #80]	; (8002c88 <HAL_RCC_ClockConfig+0x358>)
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	0a1b      	lsrs	r3, r3, #8
 8002c3c:	f003 030f 	and.w	r3, r3, #15
 8002c40:	4912      	ldr	r1, [pc, #72]	; (8002c8c <HAL_RCC_ClockConfig+0x35c>)
 8002c42:	5ccb      	ldrb	r3, [r1, r3]
 8002c44:	f003 031f 	and.w	r3, r3, #31
 8002c48:	fa22 f303 	lsr.w	r3, r2, r3
 8002c4c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c4e:	4b0e      	ldr	r3, [pc, #56]	; (8002c88 <HAL_RCC_ClockConfig+0x358>)
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	f003 030f 	and.w	r3, r3, #15
 8002c56:	4a0d      	ldr	r2, [pc, #52]	; (8002c8c <HAL_RCC_ClockConfig+0x35c>)
 8002c58:	5cd3      	ldrb	r3, [r2, r3]
 8002c5a:	f003 031f 	and.w	r3, r3, #31
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	fa22 f303 	lsr.w	r3, r2, r3
 8002c64:	4a0a      	ldr	r2, [pc, #40]	; (8002c90 <HAL_RCC_ClockConfig+0x360>)
 8002c66:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c68:	4a0a      	ldr	r2, [pc, #40]	; (8002c94 <HAL_RCC_ClockConfig+0x364>)
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002c6e:	4b0a      	ldr	r3, [pc, #40]	; (8002c98 <HAL_RCC_ClockConfig+0x368>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fe f91c 	bl	8000eb0 <HAL_InitTick>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3718      	adds	r7, #24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	58024400 	.word	0x58024400
 8002c8c:	08006a64 	.word	0x08006a64
 8002c90:	24000004 	.word	0x24000004
 8002c94:	24000000 	.word	0x24000000
 8002c98:	24000008 	.word	0x24000008

08002c9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b089      	sub	sp, #36	; 0x24
 8002ca0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ca2:	4bb3      	ldr	r3, [pc, #716]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002caa:	2b18      	cmp	r3, #24
 8002cac:	f200 8155 	bhi.w	8002f5a <HAL_RCC_GetSysClockFreq+0x2be>
 8002cb0:	a201      	add	r2, pc, #4	; (adr r2, 8002cb8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb6:	bf00      	nop
 8002cb8:	08002d1d 	.word	0x08002d1d
 8002cbc:	08002f5b 	.word	0x08002f5b
 8002cc0:	08002f5b 	.word	0x08002f5b
 8002cc4:	08002f5b 	.word	0x08002f5b
 8002cc8:	08002f5b 	.word	0x08002f5b
 8002ccc:	08002f5b 	.word	0x08002f5b
 8002cd0:	08002f5b 	.word	0x08002f5b
 8002cd4:	08002f5b 	.word	0x08002f5b
 8002cd8:	08002d43 	.word	0x08002d43
 8002cdc:	08002f5b 	.word	0x08002f5b
 8002ce0:	08002f5b 	.word	0x08002f5b
 8002ce4:	08002f5b 	.word	0x08002f5b
 8002ce8:	08002f5b 	.word	0x08002f5b
 8002cec:	08002f5b 	.word	0x08002f5b
 8002cf0:	08002f5b 	.word	0x08002f5b
 8002cf4:	08002f5b 	.word	0x08002f5b
 8002cf8:	08002d49 	.word	0x08002d49
 8002cfc:	08002f5b 	.word	0x08002f5b
 8002d00:	08002f5b 	.word	0x08002f5b
 8002d04:	08002f5b 	.word	0x08002f5b
 8002d08:	08002f5b 	.word	0x08002f5b
 8002d0c:	08002f5b 	.word	0x08002f5b
 8002d10:	08002f5b 	.word	0x08002f5b
 8002d14:	08002f5b 	.word	0x08002f5b
 8002d18:	08002d4f 	.word	0x08002d4f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d1c:	4b94      	ldr	r3, [pc, #592]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0320 	and.w	r3, r3, #32
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d009      	beq.n	8002d3c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002d28:	4b91      	ldr	r3, [pc, #580]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	08db      	lsrs	r3, r3, #3
 8002d2e:	f003 0303 	and.w	r3, r3, #3
 8002d32:	4a90      	ldr	r2, [pc, #576]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d34:	fa22 f303 	lsr.w	r3, r2, r3
 8002d38:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002d3a:	e111      	b.n	8002f60 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002d3c:	4b8d      	ldr	r3, [pc, #564]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d3e:	61bb      	str	r3, [r7, #24]
    break;
 8002d40:	e10e      	b.n	8002f60 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002d42:	4b8d      	ldr	r3, [pc, #564]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002d44:	61bb      	str	r3, [r7, #24]
    break;
 8002d46:	e10b      	b.n	8002f60 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002d48:	4b8c      	ldr	r3, [pc, #560]	; (8002f7c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002d4a:	61bb      	str	r3, [r7, #24]
    break;
 8002d4c:	e108      	b.n	8002f60 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002d4e:	4b88      	ldr	r3, [pc, #544]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002d58:	4b85      	ldr	r3, [pc, #532]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5c:	091b      	lsrs	r3, r3, #4
 8002d5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d62:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002d64:	4b82      	ldr	r3, [pc, #520]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002d6e:	4b80      	ldr	r3, [pc, #512]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d72:	08db      	lsrs	r3, r3, #3
 8002d74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	fb02 f303 	mul.w	r3, r2, r3
 8002d7e:	ee07 3a90 	vmov	s15, r3
 8002d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d86:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f000 80e1 	beq.w	8002f54 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	f000 8083 	beq.w	8002ea0 <HAL_RCC_GetSysClockFreq+0x204>
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	f200 80a1 	bhi.w	8002ee4 <HAL_RCC_GetSysClockFreq+0x248>
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d003      	beq.n	8002db0 <HAL_RCC_GetSysClockFreq+0x114>
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d056      	beq.n	8002e5c <HAL_RCC_GetSysClockFreq+0x1c0>
 8002dae:	e099      	b.n	8002ee4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002db0:	4b6f      	ldr	r3, [pc, #444]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0320 	and.w	r3, r3, #32
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d02d      	beq.n	8002e18 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002dbc:	4b6c      	ldr	r3, [pc, #432]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	08db      	lsrs	r3, r3, #3
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	4a6b      	ldr	r2, [pc, #428]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dcc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	ee07 3a90 	vmov	s15, r3
 8002dd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	ee07 3a90 	vmov	s15, r3
 8002dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002de2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002de6:	4b62      	ldr	r3, [pc, #392]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dee:	ee07 3a90 	vmov	s15, r3
 8002df2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002df6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002dfa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002f80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002dfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e12:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002e16:	e087      	b.n	8002f28 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	ee07 3a90 	vmov	s15, r3
 8002e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e22:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002f84 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002e26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e2a:	4b51      	ldr	r3, [pc, #324]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e32:	ee07 3a90 	vmov	s15, r3
 8002e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e3e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002f80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002e5a:	e065      	b.n	8002f28 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	ee07 3a90 	vmov	s15, r3
 8002e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e66:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002f88 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002e6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e6e:	4b40      	ldr	r3, [pc, #256]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e76:	ee07 3a90 	vmov	s15, r3
 8002e7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e82:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002f80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002e9e:	e043      	b.n	8002f28 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	ee07 3a90 	vmov	s15, r3
 8002ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eaa:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002f8c <HAL_RCC_GetSysClockFreq+0x2f0>
 8002eae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002eb2:	4b2f      	ldr	r3, [pc, #188]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eba:	ee07 3a90 	vmov	s15, r3
 8002ebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ec2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ec6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002f80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002eca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ece:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ed2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ed6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ede:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002ee2:	e021      	b.n	8002f28 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	ee07 3a90 	vmov	s15, r3
 8002eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eee:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002f88 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002ef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ef6:	4b1e      	ldr	r3, [pc, #120]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002efe:	ee07 3a90 	vmov	s15, r3
 8002f02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f06:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f0a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002f80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002f26:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002f28:	4b11      	ldr	r3, [pc, #68]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2c:	0a5b      	lsrs	r3, r3, #9
 8002f2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f32:	3301      	adds	r3, #1
 8002f34:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	ee07 3a90 	vmov	s15, r3
 8002f3c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f40:	edd7 6a07 	vldr	s13, [r7, #28]
 8002f44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f4c:	ee17 3a90 	vmov	r3, s15
 8002f50:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002f52:	e005      	b.n	8002f60 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002f54:	2300      	movs	r3, #0
 8002f56:	61bb      	str	r3, [r7, #24]
    break;
 8002f58:	e002      	b.n	8002f60 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002f5a:	4b07      	ldr	r3, [pc, #28]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002f5c:	61bb      	str	r3, [r7, #24]
    break;
 8002f5e:	bf00      	nop
  }

  return sysclockfreq;
 8002f60:	69bb      	ldr	r3, [r7, #24]
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3724      	adds	r7, #36	; 0x24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	58024400 	.word	0x58024400
 8002f74:	03d09000 	.word	0x03d09000
 8002f78:	003d0900 	.word	0x003d0900
 8002f7c:	017d7840 	.word	0x017d7840
 8002f80:	46000000 	.word	0x46000000
 8002f84:	4c742400 	.word	0x4c742400
 8002f88:	4a742400 	.word	0x4a742400
 8002f8c:	4bbebc20 	.word	0x4bbebc20

08002f90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002f96:	f7ff fe81 	bl	8002c9c <HAL_RCC_GetSysClockFreq>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	4b10      	ldr	r3, [pc, #64]	; (8002fe0 <HAL_RCC_GetHCLKFreq+0x50>)
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	0a1b      	lsrs	r3, r3, #8
 8002fa2:	f003 030f 	and.w	r3, r3, #15
 8002fa6:	490f      	ldr	r1, [pc, #60]	; (8002fe4 <HAL_RCC_GetHCLKFreq+0x54>)
 8002fa8:	5ccb      	ldrb	r3, [r1, r3]
 8002faa:	f003 031f 	and.w	r3, r3, #31
 8002fae:	fa22 f303 	lsr.w	r3, r2, r3
 8002fb2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002fb4:	4b0a      	ldr	r3, [pc, #40]	; (8002fe0 <HAL_RCC_GetHCLKFreq+0x50>)
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	f003 030f 	and.w	r3, r3, #15
 8002fbc:	4a09      	ldr	r2, [pc, #36]	; (8002fe4 <HAL_RCC_GetHCLKFreq+0x54>)
 8002fbe:	5cd3      	ldrb	r3, [r2, r3]
 8002fc0:	f003 031f 	and.w	r3, r3, #31
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8002fca:	4a07      	ldr	r2, [pc, #28]	; (8002fe8 <HAL_RCC_GetHCLKFreq+0x58>)
 8002fcc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002fce:	4a07      	ldr	r2, [pc, #28]	; (8002fec <HAL_RCC_GetHCLKFreq+0x5c>)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002fd4:	4b04      	ldr	r3, [pc, #16]	; (8002fe8 <HAL_RCC_GetHCLKFreq+0x58>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	58024400 	.word	0x58024400
 8002fe4:	08006a64 	.word	0x08006a64
 8002fe8:	24000004 	.word	0x24000004
 8002fec:	24000000 	.word	0x24000000

08002ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002ff4:	f7ff ffcc 	bl	8002f90 <HAL_RCC_GetHCLKFreq>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	4b06      	ldr	r3, [pc, #24]	; (8003014 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	091b      	lsrs	r3, r3, #4
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	4904      	ldr	r1, [pc, #16]	; (8003018 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003006:	5ccb      	ldrb	r3, [r1, r3]
 8003008:	f003 031f 	and.w	r3, r3, #31
 800300c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003010:	4618      	mov	r0, r3
 8003012:	bd80      	pop	{r7, pc}
 8003014:	58024400 	.word	0x58024400
 8003018:	08006a64 	.word	0x08006a64

0800301c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003020:	f7ff ffb6 	bl	8002f90 <HAL_RCC_GetHCLKFreq>
 8003024:	4602      	mov	r2, r0
 8003026:	4b06      	ldr	r3, [pc, #24]	; (8003040 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003028:	69db      	ldr	r3, [r3, #28]
 800302a:	0a1b      	lsrs	r3, r3, #8
 800302c:	f003 0307 	and.w	r3, r3, #7
 8003030:	4904      	ldr	r1, [pc, #16]	; (8003044 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003032:	5ccb      	ldrb	r3, [r1, r3]
 8003034:	f003 031f 	and.w	r3, r3, #31
 8003038:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800303c:	4618      	mov	r0, r3
 800303e:	bd80      	pop	{r7, pc}
 8003040:	58024400 	.word	0x58024400
 8003044:	08006a64 	.word	0x08006a64

08003048 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003050:	2300      	movs	r3, #0
 8003052:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003054:	2300      	movs	r3, #0
 8003056:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d03f      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003068:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800306c:	d02a      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800306e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003072:	d824      	bhi.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003074:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003078:	d018      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800307a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800307e:	d81e      	bhi.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003080:	2b00      	cmp	r3, #0
 8003082:	d003      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003084:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003088:	d007      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800308a:	e018      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800308c:	4bab      	ldr	r3, [pc, #684]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800308e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003090:	4aaa      	ldr	r2, [pc, #680]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003092:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003096:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003098:	e015      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	3304      	adds	r3, #4
 800309e:	2102      	movs	r1, #2
 80030a0:	4618      	mov	r0, r3
 80030a2:	f001 f9ff 	bl	80044a4 <RCCEx_PLL2_Config>
 80030a6:	4603      	mov	r3, r0
 80030a8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80030aa:	e00c      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3324      	adds	r3, #36	; 0x24
 80030b0:	2102      	movs	r1, #2
 80030b2:	4618      	mov	r0, r3
 80030b4:	f001 faa8 	bl	8004608 <RCCEx_PLL3_Config>
 80030b8:	4603      	mov	r3, r0
 80030ba:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80030bc:	e003      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	75fb      	strb	r3, [r7, #23]
      break;
 80030c2:	e000      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80030c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030c6:	7dfb      	ldrb	r3, [r7, #23]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d109      	bne.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80030cc:	4b9b      	ldr	r3, [pc, #620]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80030ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030d8:	4998      	ldr	r1, [pc, #608]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	650b      	str	r3, [r1, #80]	; 0x50
 80030de:	e001      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e0:	7dfb      	ldrb	r3, [r7, #23]
 80030e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d03d      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f4:	2b04      	cmp	r3, #4
 80030f6:	d826      	bhi.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80030f8:	a201      	add	r2, pc, #4	; (adr r2, 8003100 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80030fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030fe:	bf00      	nop
 8003100:	08003115 	.word	0x08003115
 8003104:	08003123 	.word	0x08003123
 8003108:	08003135 	.word	0x08003135
 800310c:	0800314d 	.word	0x0800314d
 8003110:	0800314d 	.word	0x0800314d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003114:	4b89      	ldr	r3, [pc, #548]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003118:	4a88      	ldr	r2, [pc, #544]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800311a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800311e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003120:	e015      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	3304      	adds	r3, #4
 8003126:	2100      	movs	r1, #0
 8003128:	4618      	mov	r0, r3
 800312a:	f001 f9bb 	bl	80044a4 <RCCEx_PLL2_Config>
 800312e:	4603      	mov	r3, r0
 8003130:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003132:	e00c      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	3324      	adds	r3, #36	; 0x24
 8003138:	2100      	movs	r1, #0
 800313a:	4618      	mov	r0, r3
 800313c:	f001 fa64 	bl	8004608 <RCCEx_PLL3_Config>
 8003140:	4603      	mov	r3, r0
 8003142:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003144:	e003      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	75fb      	strb	r3, [r7, #23]
      break;
 800314a:	e000      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800314c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800314e:	7dfb      	ldrb	r3, [r7, #23]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d109      	bne.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003154:	4b79      	ldr	r3, [pc, #484]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003158:	f023 0207 	bic.w	r2, r3, #7
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003160:	4976      	ldr	r1, [pc, #472]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003162:	4313      	orrs	r3, r2
 8003164:	650b      	str	r3, [r1, #80]	; 0x50
 8003166:	e001      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003168:	7dfb      	ldrb	r3, [r7, #23]
 800316a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003174:	2b00      	cmp	r3, #0
 8003176:	d042      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800317c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003180:	d02b      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003182:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003186:	d825      	bhi.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003188:	2bc0      	cmp	r3, #192	; 0xc0
 800318a:	d028      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x196>
 800318c:	2bc0      	cmp	r3, #192	; 0xc0
 800318e:	d821      	bhi.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003190:	2b80      	cmp	r3, #128	; 0x80
 8003192:	d016      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003194:	2b80      	cmp	r3, #128	; 0x80
 8003196:	d81d      	bhi.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003198:	2b00      	cmp	r3, #0
 800319a:	d002      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800319c:	2b40      	cmp	r3, #64	; 0x40
 800319e:	d007      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80031a0:	e018      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031a2:	4b66      	ldr	r3, [pc, #408]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a6:	4a65      	ldr	r2, [pc, #404]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80031ae:	e017      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3304      	adds	r3, #4
 80031b4:	2100      	movs	r1, #0
 80031b6:	4618      	mov	r0, r3
 80031b8:	f001 f974 	bl	80044a4 <RCCEx_PLL2_Config>
 80031bc:	4603      	mov	r3, r0
 80031be:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80031c0:	e00e      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	3324      	adds	r3, #36	; 0x24
 80031c6:	2100      	movs	r1, #0
 80031c8:	4618      	mov	r0, r3
 80031ca:	f001 fa1d 	bl	8004608 <RCCEx_PLL3_Config>
 80031ce:	4603      	mov	r3, r0
 80031d0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80031d2:	e005      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	75fb      	strb	r3, [r7, #23]
      break;
 80031d8:	e002      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80031da:	bf00      	nop
 80031dc:	e000      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80031de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031e0:	7dfb      	ldrb	r3, [r7, #23]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d109      	bne.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80031e6:	4b55      	ldr	r3, [pc, #340]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031ea:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f2:	4952      	ldr	r1, [pc, #328]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	650b      	str	r3, [r1, #80]	; 0x50
 80031f8:	e001      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031fa:	7dfb      	ldrb	r3, [r7, #23]
 80031fc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003206:	2b00      	cmp	r3, #0
 8003208:	d049      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003210:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003214:	d030      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003216:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800321a:	d82a      	bhi.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800321c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003220:	d02c      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003222:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003226:	d824      	bhi.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003228:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800322c:	d018      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800322e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003232:	d81e      	bhi.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003234:	2b00      	cmp	r3, #0
 8003236:	d003      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003238:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800323c:	d007      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800323e:	e018      	b.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003240:	4b3e      	ldr	r3, [pc, #248]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003244:	4a3d      	ldr	r2, [pc, #244]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003246:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800324a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800324c:	e017      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	3304      	adds	r3, #4
 8003252:	2100      	movs	r1, #0
 8003254:	4618      	mov	r0, r3
 8003256:	f001 f925 	bl	80044a4 <RCCEx_PLL2_Config>
 800325a:	4603      	mov	r3, r0
 800325c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800325e:	e00e      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3324      	adds	r3, #36	; 0x24
 8003264:	2100      	movs	r1, #0
 8003266:	4618      	mov	r0, r3
 8003268:	f001 f9ce 	bl	8004608 <RCCEx_PLL3_Config>
 800326c:	4603      	mov	r3, r0
 800326e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003270:	e005      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	75fb      	strb	r3, [r7, #23]
      break;
 8003276:	e002      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003278:	bf00      	nop
 800327a:	e000      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800327c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800327e:	7dfb      	ldrb	r3, [r7, #23]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10a      	bne.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003284:	4b2d      	ldr	r3, [pc, #180]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003288:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003292:	492a      	ldr	r1, [pc, #168]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003294:	4313      	orrs	r3, r2
 8003296:	658b      	str	r3, [r1, #88]	; 0x58
 8003298:	e001      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800329a:	7dfb      	ldrb	r3, [r7, #23]
 800329c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d04c      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80032b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032b4:	d030      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80032b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032ba:	d82a      	bhi.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80032bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032c0:	d02c      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80032c2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032c6:	d824      	bhi.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80032c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032cc:	d018      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80032ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032d2:	d81e      	bhi.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d003      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80032d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032dc:	d007      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80032de:	e018      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032e0:	4b16      	ldr	r3, [pc, #88]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e4:	4a15      	ldr	r2, [pc, #84]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80032ec:	e017      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	3304      	adds	r3, #4
 80032f2:	2100      	movs	r1, #0
 80032f4:	4618      	mov	r0, r3
 80032f6:	f001 f8d5 	bl	80044a4 <RCCEx_PLL2_Config>
 80032fa:	4603      	mov	r3, r0
 80032fc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80032fe:	e00e      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	3324      	adds	r3, #36	; 0x24
 8003304:	2100      	movs	r1, #0
 8003306:	4618      	mov	r0, r3
 8003308:	f001 f97e 	bl	8004608 <RCCEx_PLL3_Config>
 800330c:	4603      	mov	r3, r0
 800330e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003310:	e005      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	75fb      	strb	r3, [r7, #23]
      break;
 8003316:	e002      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003318:	bf00      	nop
 800331a:	e000      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800331c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800331e:	7dfb      	ldrb	r3, [r7, #23]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d10d      	bne.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003324:	4b05      	ldr	r3, [pc, #20]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003328:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003332:	4902      	ldr	r1, [pc, #8]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003334:	4313      	orrs	r3, r2
 8003336:	658b      	str	r3, [r1, #88]	; 0x58
 8003338:	e004      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800333a:	bf00      	nop
 800333c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003340:	7dfb      	ldrb	r3, [r7, #23]
 8003342:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d032      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003354:	2b30      	cmp	r3, #48	; 0x30
 8003356:	d01c      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003358:	2b30      	cmp	r3, #48	; 0x30
 800335a:	d817      	bhi.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x344>
 800335c:	2b20      	cmp	r3, #32
 800335e:	d00c      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003360:	2b20      	cmp	r3, #32
 8003362:	d813      	bhi.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003364:	2b00      	cmp	r3, #0
 8003366:	d016      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003368:	2b10      	cmp	r3, #16
 800336a:	d10f      	bne.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800336c:	4bb1      	ldr	r3, [pc, #708]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800336e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003370:	4ab0      	ldr	r2, [pc, #704]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003372:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003376:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003378:	e00e      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	3304      	adds	r3, #4
 800337e:	2102      	movs	r1, #2
 8003380:	4618      	mov	r0, r3
 8003382:	f001 f88f 	bl	80044a4 <RCCEx_PLL2_Config>
 8003386:	4603      	mov	r3, r0
 8003388:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800338a:	e005      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	75fb      	strb	r3, [r7, #23]
      break;
 8003390:	e002      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003392:	bf00      	nop
 8003394:	e000      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003396:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003398:	7dfb      	ldrb	r3, [r7, #23]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d109      	bne.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800339e:	4ba5      	ldr	r3, [pc, #660]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80033a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033a2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033aa:	49a2      	ldr	r1, [pc, #648]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	64cb      	str	r3, [r1, #76]	; 0x4c
 80033b0:	e001      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b2:	7dfb      	ldrb	r3, [r7, #23]
 80033b4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d047      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033ca:	d030      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80033cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033d0:	d82a      	bhi.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80033d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80033d6:	d02c      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80033d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80033dc:	d824      	bhi.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80033de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033e2:	d018      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80033e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033e8:	d81e      	bhi.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80033ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033f2:	d007      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80033f4:	e018      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033f6:	4b8f      	ldr	r3, [pc, #572]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80033f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fa:	4a8e      	ldr	r2, [pc, #568]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80033fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003400:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003402:	e017      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	3304      	adds	r3, #4
 8003408:	2100      	movs	r1, #0
 800340a:	4618      	mov	r0, r3
 800340c:	f001 f84a 	bl	80044a4 <RCCEx_PLL2_Config>
 8003410:	4603      	mov	r3, r0
 8003412:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003414:	e00e      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	3324      	adds	r3, #36	; 0x24
 800341a:	2100      	movs	r1, #0
 800341c:	4618      	mov	r0, r3
 800341e:	f001 f8f3 	bl	8004608 <RCCEx_PLL3_Config>
 8003422:	4603      	mov	r3, r0
 8003424:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003426:	e005      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	75fb      	strb	r3, [r7, #23]
      break;
 800342c:	e002      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800342e:	bf00      	nop
 8003430:	e000      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003432:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003434:	7dfb      	ldrb	r3, [r7, #23]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d109      	bne.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800343a:	4b7e      	ldr	r3, [pc, #504]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800343c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800343e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003446:	497b      	ldr	r1, [pc, #492]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003448:	4313      	orrs	r3, r2
 800344a:	650b      	str	r3, [r1, #80]	; 0x50
 800344c:	e001      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800344e:	7dfb      	ldrb	r3, [r7, #23]
 8003450:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d049      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003462:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003466:	d02e      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003468:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800346c:	d828      	bhi.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800346e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003472:	d02a      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003474:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003478:	d822      	bhi.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800347a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800347e:	d026      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003480:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003484:	d81c      	bhi.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003486:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800348a:	d010      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x466>
 800348c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003490:	d816      	bhi.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003492:	2b00      	cmp	r3, #0
 8003494:	d01d      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003496:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800349a:	d111      	bne.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	3304      	adds	r3, #4
 80034a0:	2101      	movs	r1, #1
 80034a2:	4618      	mov	r0, r3
 80034a4:	f000 fffe 	bl	80044a4 <RCCEx_PLL2_Config>
 80034a8:	4603      	mov	r3, r0
 80034aa:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80034ac:	e012      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	3324      	adds	r3, #36	; 0x24
 80034b2:	2101      	movs	r1, #1
 80034b4:	4618      	mov	r0, r3
 80034b6:	f001 f8a7 	bl	8004608 <RCCEx_PLL3_Config>
 80034ba:	4603      	mov	r3, r0
 80034bc:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80034be:	e009      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	75fb      	strb	r3, [r7, #23]
      break;
 80034c4:	e006      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80034c6:	bf00      	nop
 80034c8:	e004      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80034ca:	bf00      	nop
 80034cc:	e002      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80034ce:	bf00      	nop
 80034d0:	e000      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80034d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034d4:	7dfb      	ldrb	r3, [r7, #23]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d109      	bne.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80034da:	4b56      	ldr	r3, [pc, #344]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80034dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034de:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034e6:	4953      	ldr	r1, [pc, #332]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	650b      	str	r3, [r1, #80]	; 0x50
 80034ec:	e001      	b.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ee:	7dfb      	ldrb	r3, [r7, #23]
 80034f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d04b      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003504:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003508:	d02e      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800350a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800350e:	d828      	bhi.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003514:	d02a      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800351a:	d822      	bhi.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800351c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003520:	d026      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003522:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003526:	d81c      	bhi.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003528:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800352c:	d010      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800352e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003532:	d816      	bhi.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003534:	2b00      	cmp	r3, #0
 8003536:	d01d      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003538:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800353c:	d111      	bne.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	3304      	adds	r3, #4
 8003542:	2101      	movs	r1, #1
 8003544:	4618      	mov	r0, r3
 8003546:	f000 ffad 	bl	80044a4 <RCCEx_PLL2_Config>
 800354a:	4603      	mov	r3, r0
 800354c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800354e:	e012      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3324      	adds	r3, #36	; 0x24
 8003554:	2101      	movs	r1, #1
 8003556:	4618      	mov	r0, r3
 8003558:	f001 f856 	bl	8004608 <RCCEx_PLL3_Config>
 800355c:	4603      	mov	r3, r0
 800355e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003560:	e009      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	75fb      	strb	r3, [r7, #23]
      break;
 8003566:	e006      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003568:	bf00      	nop
 800356a:	e004      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800356c:	bf00      	nop
 800356e:	e002      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003570:	bf00      	nop
 8003572:	e000      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003574:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003576:	7dfb      	ldrb	r3, [r7, #23]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d10a      	bne.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800357c:	4b2d      	ldr	r3, [pc, #180]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800357e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003580:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800358a:	492a      	ldr	r1, [pc, #168]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800358c:	4313      	orrs	r3, r2
 800358e:	658b      	str	r3, [r1, #88]	; 0x58
 8003590:	e001      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003592:	7dfb      	ldrb	r3, [r7, #23]
 8003594:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d022      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    switch(PeriphClkInit->DsiClockSelection)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00e      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
 80035aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035ae:	d108      	bne.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	3304      	adds	r3, #4
 80035b4:	2101      	movs	r1, #1
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 ff74 	bl	80044a4 <RCCEx_PLL2_Config>
 80035bc:	4603      	mov	r3, r0
 80035be:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 80035c0:	e003      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x582>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	75fb      	strb	r3, [r7, #23]
      break;
 80035c6:	e000      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x582>
      break;
 80035c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035ca:	7dfb      	ldrb	r3, [r7, #23]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d109      	bne.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80035d0:	4b18      	ldr	r3, [pc, #96]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80035d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035dc:	4915      	ldr	r1, [pc, #84]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80035e2:	e001      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e4:	7dfb      	ldrb	r3, [r7, #23]
 80035e6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d031      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x610>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035fc:	d00e      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80035fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003602:	d814      	bhi.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 8003604:	2b00      	cmp	r3, #0
 8003606:	d017      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 8003608:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800360c:	d10f      	bne.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800360e:	4b09      	ldr	r3, [pc, #36]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003612:	4a08      	ldr	r2, [pc, #32]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003618:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800361a:	e00e      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x5f2>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3304      	adds	r3, #4
 8003620:	2101      	movs	r1, #1
 8003622:	4618      	mov	r0, r3
 8003624:	f000 ff3e 	bl	80044a4 <RCCEx_PLL2_Config>
 8003628:	4603      	mov	r3, r0
 800362a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800362c:	e005      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	75fb      	strb	r3, [r7, #23]
      break;
 8003632:	e002      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8003634:	58024400 	.word	0x58024400
      break;
 8003638:	bf00      	nop
    }

    if(ret == HAL_OK)
 800363a:	7dfb      	ldrb	r3, [r7, #23]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d109      	bne.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003640:	4bbc      	ldr	r3, [pc, #752]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003644:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364c:	49b9      	ldr	r1, [pc, #740]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800364e:	4313      	orrs	r3, r2
 8003650:	650b      	str	r3, [r1, #80]	; 0x50
 8003652:	e001      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003654:	7dfb      	ldrb	r3, [r7, #23]
 8003656:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d032      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003668:	2b03      	cmp	r3, #3
 800366a:	d81b      	bhi.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 800366c:	a201      	add	r2, pc, #4	; (adr r2, 8003674 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 800366e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003672:	bf00      	nop
 8003674:	080036ab 	.word	0x080036ab
 8003678:	08003685 	.word	0x08003685
 800367c:	08003693 	.word	0x08003693
 8003680:	080036ab 	.word	0x080036ab
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003684:	4bab      	ldr	r3, [pc, #684]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003688:	4aaa      	ldr	r2, [pc, #680]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800368a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800368e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003690:	e00c      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x664>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	3304      	adds	r3, #4
 8003696:	2102      	movs	r1, #2
 8003698:	4618      	mov	r0, r3
 800369a:	f000 ff03 	bl	80044a4 <RCCEx_PLL2_Config>
 800369e:	4603      	mov	r3, r0
 80036a0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80036a2:	e003      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x664>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	75fb      	strb	r3, [r7, #23]
      break;
 80036a8:	e000      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x664>
      break;
 80036aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036ac:	7dfb      	ldrb	r3, [r7, #23]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d109      	bne.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80036b2:	4ba0      	ldr	r3, [pc, #640]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80036b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036b6:	f023 0203 	bic.w	r2, r3, #3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036be:	499d      	ldr	r1, [pc, #628]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80036c4:	e001      	b.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x682>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036c6:	7dfb      	ldrb	r3, [r7, #23]
 80036c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f000 8086 	beq.w	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036d8:	4b97      	ldr	r3, [pc, #604]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a96      	ldr	r2, [pc, #600]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80036de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036e4:	f7fd fc2e 	bl	8000f44 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036ea:	e009      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ec:	f7fd fc2a 	bl	8000f44 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b64      	cmp	r3, #100	; 0x64
 80036f8:	d902      	bls.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      {
        ret = HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	75fb      	strb	r3, [r7, #23]
        break;
 80036fe:	e005      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003700:	4b8d      	ldr	r3, [pc, #564]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003708:	2b00      	cmp	r3, #0
 800370a:	d0ef      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      }
    }

    if(ret == HAL_OK)
 800370c:	7dfb      	ldrb	r3, [r7, #23]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d166      	bne.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003712:	4b88      	ldr	r3, [pc, #544]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003714:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800371c:	4053      	eors	r3, r2
 800371e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003722:	2b00      	cmp	r3, #0
 8003724:	d013      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x706>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003726:	4b83      	ldr	r3, [pc, #524]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800372e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003730:	4b80      	ldr	r3, [pc, #512]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003734:	4a7f      	ldr	r2, [pc, #508]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003736:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800373a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800373c:	4b7d      	ldr	r3, [pc, #500]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800373e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003740:	4a7c      	ldr	r2, [pc, #496]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003742:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003746:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003748:	4a7a      	ldr	r2, [pc, #488]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003754:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003758:	d115      	bne.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375a:	f7fd fbf3 	bl	8000f44 <HAL_GetTick>
 800375e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003760:	e00b      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x732>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003762:	f7fd fbef 	bl	8000f44 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003770:	4293      	cmp	r3, r2
 8003772:	d902      	bls.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x732>
          {
            ret = HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	75fb      	strb	r3, [r7, #23]
            break;
 8003778:	e005      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x73e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800377a:	4b6e      	ldr	r3, [pc, #440]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800377c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d0ed      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x71a>
          }
        }
      }

      if(ret == HAL_OK)
 8003786:	7dfb      	ldrb	r3, [r7, #23]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d126      	bne.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x792>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003796:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800379a:	d10d      	bne.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x770>
 800379c:	4b65      	ldr	r3, [pc, #404]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80037aa:	0919      	lsrs	r1, r3, #4
 80037ac:	4b63      	ldr	r3, [pc, #396]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x8f4>)
 80037ae:	400b      	ands	r3, r1
 80037b0:	4960      	ldr	r1, [pc, #384]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	610b      	str	r3, [r1, #16]
 80037b6:	e005      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x77c>
 80037b8:	4b5e      	ldr	r3, [pc, #376]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	4a5d      	ldr	r2, [pc, #372]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80037be:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80037c2:	6113      	str	r3, [r2, #16]
 80037c4:	4b5b      	ldr	r3, [pc, #364]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80037c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80037ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037d2:	4958      	ldr	r1, [pc, #352]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	670b      	str	r3, [r1, #112]	; 0x70
 80037d8:	e004      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037da:	7dfb      	ldrb	r3, [r7, #23]
 80037dc:	75bb      	strb	r3, [r7, #22]
 80037de:	e001      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e0:	7dfb      	ldrb	r3, [r7, #23]
 80037e2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d07e      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x8a6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037f4:	2b28      	cmp	r3, #40	; 0x28
 80037f6:	d867      	bhi.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x880>
 80037f8:	a201      	add	r2, pc, #4	; (adr r2, 8003800 <HAL_RCCEx_PeriphCLKConfig+0x7b8>)
 80037fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037fe:	bf00      	nop
 8003800:	080038cf 	.word	0x080038cf
 8003804:	080038c9 	.word	0x080038c9
 8003808:	080038c9 	.word	0x080038c9
 800380c:	080038c9 	.word	0x080038c9
 8003810:	080038c9 	.word	0x080038c9
 8003814:	080038c9 	.word	0x080038c9
 8003818:	080038c9 	.word	0x080038c9
 800381c:	080038c9 	.word	0x080038c9
 8003820:	080038a5 	.word	0x080038a5
 8003824:	080038c9 	.word	0x080038c9
 8003828:	080038c9 	.word	0x080038c9
 800382c:	080038c9 	.word	0x080038c9
 8003830:	080038c9 	.word	0x080038c9
 8003834:	080038c9 	.word	0x080038c9
 8003838:	080038c9 	.word	0x080038c9
 800383c:	080038c9 	.word	0x080038c9
 8003840:	080038b7 	.word	0x080038b7
 8003844:	080038c9 	.word	0x080038c9
 8003848:	080038c9 	.word	0x080038c9
 800384c:	080038c9 	.word	0x080038c9
 8003850:	080038c9 	.word	0x080038c9
 8003854:	080038c9 	.word	0x080038c9
 8003858:	080038c9 	.word	0x080038c9
 800385c:	080038c9 	.word	0x080038c9
 8003860:	080038cf 	.word	0x080038cf
 8003864:	080038c9 	.word	0x080038c9
 8003868:	080038c9 	.word	0x080038c9
 800386c:	080038c9 	.word	0x080038c9
 8003870:	080038c9 	.word	0x080038c9
 8003874:	080038c9 	.word	0x080038c9
 8003878:	080038c9 	.word	0x080038c9
 800387c:	080038c9 	.word	0x080038c9
 8003880:	080038cf 	.word	0x080038cf
 8003884:	080038c9 	.word	0x080038c9
 8003888:	080038c9 	.word	0x080038c9
 800388c:	080038c9 	.word	0x080038c9
 8003890:	080038c9 	.word	0x080038c9
 8003894:	080038c9 	.word	0x080038c9
 8003898:	080038c9 	.word	0x080038c9
 800389c:	080038c9 	.word	0x080038c9
 80038a0:	080038cf 	.word	0x080038cf
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	3304      	adds	r3, #4
 80038a8:	2101      	movs	r1, #1
 80038aa:	4618      	mov	r0, r3
 80038ac:	f000 fdfa 	bl	80044a4 <RCCEx_PLL2_Config>
 80038b0:	4603      	mov	r3, r0
 80038b2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80038b4:	e00c      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x888>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	3324      	adds	r3, #36	; 0x24
 80038ba:	2101      	movs	r1, #1
 80038bc:	4618      	mov	r0, r3
 80038be:	f000 fea3 	bl	8004608 <RCCEx_PLL3_Config>
 80038c2:	4603      	mov	r3, r0
 80038c4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80038c6:	e003      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x888>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	75fb      	strb	r3, [r7, #23]
      break;
 80038cc:	e000      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x888>
      break;
 80038ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038d0:	7dfb      	ldrb	r3, [r7, #23]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d109      	bne.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x8a2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80038d6:	4b17      	ldr	r3, [pc, #92]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80038d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038da:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038e2:	4914      	ldr	r1, [pc, #80]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	654b      	str	r3, [r1, #84]	; 0x54
 80038e8:	e001      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x8a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ea:	7dfb      	ldrb	r3, [r7, #23]
 80038ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d03e      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038fe:	2b05      	cmp	r3, #5
 8003900:	d827      	bhi.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8003902:	a201      	add	r2, pc, #4	; (adr r2, 8003908 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003908:	08003959 	.word	0x08003959
 800390c:	08003921 	.word	0x08003921
 8003910:	08003941 	.word	0x08003941
 8003914:	08003959 	.word	0x08003959
 8003918:	08003959 	.word	0x08003959
 800391c:	08003959 	.word	0x08003959
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	3304      	adds	r3, #4
 8003924:	2101      	movs	r1, #1
 8003926:	4618      	mov	r0, r3
 8003928:	f000 fdbc 	bl	80044a4 <RCCEx_PLL2_Config>
 800392c:	4603      	mov	r3, r0
 800392e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003930:	e013      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x912>
 8003932:	bf00      	nop
 8003934:	58024400 	.word	0x58024400
 8003938:	58024800 	.word	0x58024800
 800393c:	00ffffcf 	.word	0x00ffffcf

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3324      	adds	r3, #36	; 0x24
 8003944:	2101      	movs	r1, #1
 8003946:	4618      	mov	r0, r3
 8003948:	f000 fe5e 	bl	8004608 <RCCEx_PLL3_Config>
 800394c:	4603      	mov	r3, r0
 800394e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003950:	e003      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x912>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	75fb      	strb	r3, [r7, #23]
      break;
 8003956:	e000      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8003958:	bf00      	nop
    }

    if(ret == HAL_OK)
 800395a:	7dfb      	ldrb	r3, [r7, #23]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d109      	bne.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x92c>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003960:	4b9f      	ldr	r3, [pc, #636]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003964:	f023 0207 	bic.w	r2, r3, #7
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800396c:	499c      	ldr	r1, [pc, #624]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 800396e:	4313      	orrs	r3, r2
 8003970:	654b      	str	r3, [r1, #84]	; 0x54
 8003972:	e001      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003974:	7dfb      	ldrb	r3, [r7, #23]
 8003976:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	2b00      	cmp	r3, #0
 8003982:	d039      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800398a:	2b05      	cmp	r3, #5
 800398c:	d820      	bhi.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800398e:	a201      	add	r2, pc, #4	; (adr r2, 8003994 <HAL_RCCEx_PeriphCLKConfig+0x94c>)
 8003990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003994:	080039d7 	.word	0x080039d7
 8003998:	080039ad 	.word	0x080039ad
 800399c:	080039bf 	.word	0x080039bf
 80039a0:	080039d7 	.word	0x080039d7
 80039a4:	080039d7 	.word	0x080039d7
 80039a8:	080039d7 	.word	0x080039d7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3304      	adds	r3, #4
 80039b0:	2101      	movs	r1, #1
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 fd76 	bl	80044a4 <RCCEx_PLL2_Config>
 80039b8:	4603      	mov	r3, r0
 80039ba:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80039bc:	e00c      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x990>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	3324      	adds	r3, #36	; 0x24
 80039c2:	2101      	movs	r1, #1
 80039c4:	4618      	mov	r0, r3
 80039c6:	f000 fe1f 	bl	8004608 <RCCEx_PLL3_Config>
 80039ca:	4603      	mov	r3, r0
 80039cc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80039ce:	e003      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x990>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	75fb      	strb	r3, [r7, #23]
      break;
 80039d4:	e000      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x990>
      break;
 80039d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039d8:	7dfb      	ldrb	r3, [r7, #23]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10a      	bne.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039de:	4b80      	ldr	r3, [pc, #512]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80039e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e2:	f023 0207 	bic.w	r2, r3, #7
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039ec:	497c      	ldr	r1, [pc, #496]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	658b      	str	r3, [r1, #88]	; 0x58
 80039f2:	e001      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039f4:	7dfb      	ldrb	r3, [r7, #23]
 80039f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0320 	and.w	r3, r3, #32
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d04b      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0xa54>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a0e:	d02e      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0xa26>
 8003a10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a14:	d828      	bhi.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8003a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a1a:	d02a      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 8003a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a20:	d822      	bhi.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8003a22:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a26:	d026      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 8003a28:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a2c:	d81c      	bhi.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8003a2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a32:	d010      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003a34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a38:	d816      	bhi.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d01d      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8003a3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a42:	d111      	bne.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3304      	adds	r3, #4
 8003a48:	2100      	movs	r1, #0
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f000 fd2a 	bl	80044a4 <RCCEx_PLL2_Config>
 8003a50:	4603      	mov	r3, r0
 8003a52:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003a54:	e012      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0xa34>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	3324      	adds	r3, #36	; 0x24
 8003a5a:	2102      	movs	r1, #2
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f000 fdd3 	bl	8004608 <RCCEx_PLL3_Config>
 8003a62:	4603      	mov	r3, r0
 8003a64:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003a66:	e009      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0xa34>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a6c:	e006      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8003a6e:	bf00      	nop
 8003a70:	e004      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8003a72:	bf00      	nop
 8003a74:	e002      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8003a76:	bf00      	nop
 8003a78:	e000      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8003a7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a7c:	7dfb      	ldrb	r3, [r7, #23]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10a      	bne.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a82:	4b57      	ldr	r3, [pc, #348]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a86:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a90:	4953      	ldr	r1, [pc, #332]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	654b      	str	r3, [r1, #84]	; 0x54
 8003a96:	e001      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0xa54>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a98:	7dfb      	ldrb	r3, [r7, #23]
 8003a9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d04b      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003aae:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003ab2:	d02e      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8003ab4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003ab8:	d828      	bhi.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8003aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003abe:	d02a      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0xace>
 8003ac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ac4:	d822      	bhi.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8003ac6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003aca:	d026      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0xad2>
 8003acc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ad0:	d81c      	bhi.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8003ad2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ad6:	d010      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003ad8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003adc:	d816      	bhi.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d01d      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0xad6>
 8003ae2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ae6:	d111      	bne.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0xac4>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	3304      	adds	r3, #4
 8003aec:	2100      	movs	r1, #0
 8003aee:	4618      	mov	r0, r3
 8003af0:	f000 fcd8 	bl	80044a4 <RCCEx_PLL2_Config>
 8003af4:	4603      	mov	r3, r0
 8003af6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003af8:	e012      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xad8>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	3324      	adds	r3, #36	; 0x24
 8003afe:	2102      	movs	r1, #2
 8003b00:	4618      	mov	r0, r3
 8003b02:	f000 fd81 	bl	8004608 <RCCEx_PLL3_Config>
 8003b06:	4603      	mov	r3, r0
 8003b08:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003b0a:	e009      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	75fb      	strb	r3, [r7, #23]
      break;
 8003b10:	e006      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8003b12:	bf00      	nop
 8003b14:	e004      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8003b16:	bf00      	nop
 8003b18:	e002      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8003b1a:	bf00      	nop
 8003b1c:	e000      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8003b1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b20:	7dfb      	ldrb	r3, [r7, #23]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10a      	bne.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b26:	4b2e      	ldr	r3, [pc, #184]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b2a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b34:	492a      	ldr	r1, [pc, #168]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	658b      	str	r3, [r1, #88]	; 0x58
 8003b3a:	e001      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b3c:	7dfb      	ldrb	r3, [r7, #23]
 8003b3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d04d      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003b52:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003b56:	d02e      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 8003b58:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003b5c:	d828      	bhi.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8003b5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b62:	d02a      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0xb72>
 8003b64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b68:	d822      	bhi.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8003b6a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003b6e:	d026      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0xb76>
 8003b70:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003b74:	d81c      	bhi.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8003b76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b7a:	d010      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0xb56>
 8003b7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b80:	d816      	bhi.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d01d      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0xb7a>
 8003b86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b8a:	d111      	bne.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xb68>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	3304      	adds	r3, #4
 8003b90:	2100      	movs	r1, #0
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 fc86 	bl	80044a4 <RCCEx_PLL2_Config>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003b9c:	e012      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	3324      	adds	r3, #36	; 0x24
 8003ba2:	2102      	movs	r1, #2
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f000 fd2f 	bl	8004608 <RCCEx_PLL3_Config>
 8003baa:	4603      	mov	r3, r0
 8003bac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003bae:	e009      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	75fb      	strb	r3, [r7, #23]
      break;
 8003bb4:	e006      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8003bb6:	bf00      	nop
 8003bb8:	e004      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8003bba:	bf00      	nop
 8003bbc:	e002      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8003bbe:	bf00      	nop
 8003bc0:	e000      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8003bc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bc4:	7dfb      	ldrb	r3, [r7, #23]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10c      	bne.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003bca:	4b05      	ldr	r3, [pc, #20]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003bd8:	4901      	ldr	r1, [pc, #4]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	658b      	str	r3, [r1, #88]	; 0x58
 8003bde:	e003      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003be0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be4:	7dfb      	ldrb	r3, [r7, #23]
 8003be6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0308 	and.w	r3, r3, #8
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d01a      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0xbe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bfe:	d10a      	bne.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3324      	adds	r3, #36	; 0x24
 8003c04:	2102      	movs	r1, #2
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 fcfe 	bl	8004608 <RCCEx_PLL3_Config>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0xbce>
        {
          status = HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003c16:	4b8c      	ldr	r3, [pc, #560]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c1a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c24:	4988      	ldr	r1, [pc, #544]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0310 	and.w	r3, r3, #16
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d01a      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xc24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c40:	d10a      	bne.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	3324      	adds	r3, #36	; 0x24
 8003c46:	2102      	movs	r1, #2
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f000 fcdd 	bl	8004608 <RCCEx_PLL3_Config>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d001      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xc10>
      {
        status = HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c58:	4b7b      	ldr	r3, [pc, #492]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c66:	4978      	ldr	r1, [pc, #480]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d034      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c82:	d01d      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003c84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c88:	d817      	bhi.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003c8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c92:	d009      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xc60>
 8003c94:	e011      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xc72>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	3304      	adds	r3, #4
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f000 fc01 	bl	80044a4 <RCCEx_PLL2_Config>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003ca6:	e00c      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	3324      	adds	r3, #36	; 0x24
 8003cac:	2102      	movs	r1, #2
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f000 fcaa 	bl	8004608 <RCCEx_PLL3_Config>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003cb8:	e003      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	75fb      	strb	r3, [r7, #23]
      break;
 8003cbe:	e000      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      break;
 8003cc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cc2:	7dfb      	ldrb	r3, [r7, #23]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d10a      	bne.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cc8:	4b5f      	ldr	r3, [pc, #380]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ccc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003cd6:	495c      	ldr	r1, [pc, #368]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	658b      	str	r3, [r1, #88]	; 0x58
 8003cdc:	e001      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cde:	7dfb      	ldrb	r3, [r7, #23]
 8003ce0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d033      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003cf8:	d01c      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 8003cfa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003cfe:	d816      	bhi.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0xce6>
 8003d00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d04:	d003      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8003d06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d0a:	d007      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 8003d0c:	e00f      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0xce6>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d0e:	4b4e      	ldr	r3, [pc, #312]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d12:	4a4d      	ldr	r2, [pc, #308]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d18:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003d1a:	e00c      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0xcee>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	3324      	adds	r3, #36	; 0x24
 8003d20:	2101      	movs	r1, #1
 8003d22:	4618      	mov	r0, r3
 8003d24:	f000 fc70 	bl	8004608 <RCCEx_PLL3_Config>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003d2c:	e003      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0xcee>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	75fb      	strb	r3, [r7, #23]
      break;
 8003d32:	e000      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0xcee>
      break;
 8003d34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d36:	7dfb      	ldrb	r3, [r7, #23]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10a      	bne.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d3c:	4b42      	ldr	r3, [pc, #264]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d4a:	493f      	ldr	r1, [pc, #252]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	654b      	str	r3, [r1, #84]	; 0x54
 8003d50:	e001      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d52:	7dfb      	ldrb	r3, [r7, #23]
 8003d54:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d029      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
 8003d6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d6e:	d007      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0xd38>
 8003d70:	e00f      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d72:	4b35      	ldr	r3, [pc, #212]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d76:	4a34      	ldr	r2, [pc, #208]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d7c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003d7e:	e00b      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	3304      	adds	r3, #4
 8003d84:	2102      	movs	r1, #2
 8003d86:	4618      	mov	r0, r3
 8003d88:	f000 fb8c 	bl	80044a4 <RCCEx_PLL2_Config>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003d90:	e002      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    default:
      ret = HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	75fb      	strb	r3, [r7, #23]
      break;
 8003d96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d98:	7dfb      	ldrb	r3, [r7, #23]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d109      	bne.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003d9e:	4b2a      	ldr	r3, [pc, #168]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003da2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003daa:	4927      	ldr	r1, [pc, #156]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003db0:	e001      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db2:	7dfb      	ldrb	r3, [r7, #23]
 8003db4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00a      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	3324      	adds	r3, #36	; 0x24
 8003dc6:	2102      	movs	r1, #2
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 fc1d 	bl	8004608 <RCCEx_PLL3_Config>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
    {
      status=HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d035      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xe08>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dee:	d017      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 8003df0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003df4:	d811      	bhi.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003df6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dfa:	d013      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0xddc>
 8003dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e00:	d80b      	bhi.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d010      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0xde0>
 8003e06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e0a:	d106      	bne.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e0c:	4b0e      	ldr	r3, [pc, #56]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e10:	4a0d      	ldr	r2, [pc, #52]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003e12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003e18:	e007      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0xde2>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	75fb      	strb	r3, [r7, #23]
      break;
 8003e1e:	e004      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8003e20:	bf00      	nop
 8003e22:	e002      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8003e24:	bf00      	nop
 8003e26:	e000      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8003e28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e2a:	7dfb      	ldrb	r3, [r7, #23]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d10d      	bne.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0xe04>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e30:	4b05      	ldr	r3, [pc, #20]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e3e:	4902      	ldr	r1, [pc, #8]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	654b      	str	r3, [r1, #84]	; 0x54
 8003e44:	e004      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 8003e46:	bf00      	nop
 8003e48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e4c:	7dfb      	ldrb	r3, [r7, #23]
 8003e4e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d008      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e5c:	4b31      	ldr	r3, [pc, #196]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e60:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e68:	492e      	ldr	r1, [pc, #184]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d009      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0xe46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003e7a:	4b2a      	ldr	r3, [pc, #168]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003e88:	4926      	ldr	r1, [pc, #152]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d008      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xe64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e9a:	4b22      	ldr	r3, [pc, #136]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003e9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e9e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ea6:	491f      	ldr	r1, [pc, #124]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00d      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xe8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003eb8:	4b1a      	ldr	r3, [pc, #104]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	4a19      	ldr	r2, [pc, #100]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003ebe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003ec2:	6113      	str	r3, [r2, #16]
 8003ec4:	4b17      	ldr	r3, [pc, #92]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003ec6:	691a      	ldr	r2, [r3, #16]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003ece:	4915      	ldr	r1, [pc, #84]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	da08      	bge.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0xea6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003edc:	4b11      	ldr	r3, [pc, #68]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ee0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee8:	490e      	ldr	r1, [pc, #56]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d009      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0xec6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003efa:	4b0a      	ldr	r3, [pc, #40]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003efe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f08:	4906      	ldr	r1, [pc, #24]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003f0e:	7dbb      	ldrb	r3, [r7, #22]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d101      	bne.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xed0>
  {
    return HAL_OK;
 8003f14:	2300      	movs	r3, #0
 8003f16:	e000      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0xed2>
  }
  return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3718      	adds	r7, #24
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	58024400 	.word	0x58024400

08003f28 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003f2c:	f7ff f830 	bl	8002f90 <HAL_RCC_GetHCLKFreq>
 8003f30:	4602      	mov	r2, r0
 8003f32:	4b06      	ldr	r3, [pc, #24]	; (8003f4c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	091b      	lsrs	r3, r3, #4
 8003f38:	f003 0307 	and.w	r3, r3, #7
 8003f3c:	4904      	ldr	r1, [pc, #16]	; (8003f50 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003f3e:	5ccb      	ldrb	r3, [r1, r3]
 8003f40:	f003 031f 	and.w	r3, r3, #31
 8003f44:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	58024400 	.word	0x58024400
 8003f50:	08006a64 	.word	0x08006a64

08003f54 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b089      	sub	sp, #36	; 0x24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f5c:	4ba1      	ldr	r3, [pc, #644]	; (80041e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f60:	f003 0303 	and.w	r3, r3, #3
 8003f64:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003f66:	4b9f      	ldr	r3, [pc, #636]	; (80041e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6a:	0b1b      	lsrs	r3, r3, #12
 8003f6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f70:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003f72:	4b9c      	ldr	r3, [pc, #624]	; (80041e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f76:	091b      	lsrs	r3, r3, #4
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003f7e:	4b99      	ldr	r3, [pc, #612]	; (80041e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f82:	08db      	lsrs	r3, r3, #3
 8003f84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	fb02 f303 	mul.w	r3, r2, r3
 8003f8e:	ee07 3a90 	vmov	s15, r3
 8003f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f000 8111 	beq.w	80041c4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	f000 8083 	beq.w	80040b0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	f200 80a1 	bhi.w	80040f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d003      	beq.n	8003fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d056      	beq.n	800406c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003fbe:	e099      	b.n	80040f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003fc0:	4b88      	ldr	r3, [pc, #544]	; (80041e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0320 	and.w	r3, r3, #32
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d02d      	beq.n	8004028 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003fcc:	4b85      	ldr	r3, [pc, #532]	; (80041e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	08db      	lsrs	r3, r3, #3
 8003fd2:	f003 0303 	and.w	r3, r3, #3
 8003fd6:	4a84      	ldr	r2, [pc, #528]	; (80041e8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8003fdc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	ee07 3a90 	vmov	s15, r3
 8003fe4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	ee07 3a90 	vmov	s15, r3
 8003fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ff6:	4b7b      	ldr	r3, [pc, #492]	; (80041e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ffe:	ee07 3a90 	vmov	s15, r3
 8004002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004006:	ed97 6a03 	vldr	s12, [r7, #12]
 800400a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80041ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800400e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004016:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800401a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800401e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004022:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004026:	e087      	b.n	8004138 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	ee07 3a90 	vmov	s15, r3
 800402e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004032:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80041f0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800403a:	4b6a      	ldr	r3, [pc, #424]	; (80041e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800403c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004042:	ee07 3a90 	vmov	s15, r3
 8004046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800404a:	ed97 6a03 	vldr	s12, [r7, #12]
 800404e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80041ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800405a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800405e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004066:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800406a:	e065      	b.n	8004138 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	ee07 3a90 	vmov	s15, r3
 8004072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004076:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80041f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800407a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800407e:	4b59      	ldr	r3, [pc, #356]	; (80041e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004086:	ee07 3a90 	vmov	s15, r3
 800408a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800408e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004092:	eddf 5a56 	vldr	s11, [pc, #344]	; 80041ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800409a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800409e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80040ae:	e043      	b.n	8004138 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	ee07 3a90 	vmov	s15, r3
 80040b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80041f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80040be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040c2:	4b48      	ldr	r3, [pc, #288]	; (80041e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040ca:	ee07 3a90 	vmov	s15, r3
 80040ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80040d6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80041ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80040f2:	e021      	b.n	8004138 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	ee07 3a90 	vmov	s15, r3
 80040fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040fe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80041f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004106:	4b37      	ldr	r3, [pc, #220]	; (80041e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800410e:	ee07 3a90 	vmov	s15, r3
 8004112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004116:	ed97 6a03 	vldr	s12, [r7, #12]
 800411a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80041ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800411e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004126:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800412a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800412e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004132:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004136:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004138:	4b2a      	ldr	r3, [pc, #168]	; (80041e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800413a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413c:	0a5b      	lsrs	r3, r3, #9
 800413e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004142:	ee07 3a90 	vmov	s15, r3
 8004146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800414a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800414e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004152:	edd7 6a07 	vldr	s13, [r7, #28]
 8004156:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800415a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800415e:	ee17 2a90 	vmov	r2, s15
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004166:	4b1f      	ldr	r3, [pc, #124]	; (80041e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416a:	0c1b      	lsrs	r3, r3, #16
 800416c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004170:	ee07 3a90 	vmov	s15, r3
 8004174:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004178:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800417c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004180:	edd7 6a07 	vldr	s13, [r7, #28]
 8004184:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004188:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800418c:	ee17 2a90 	vmov	r2, s15
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004194:	4b13      	ldr	r3, [pc, #76]	; (80041e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004198:	0e1b      	lsrs	r3, r3, #24
 800419a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800419e:	ee07 3a90 	vmov	s15, r3
 80041a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80041aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80041ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80041b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041ba:	ee17 2a90 	vmov	r2, s15
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80041c2:	e008      	b.n	80041d6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	609a      	str	r2, [r3, #8]
}
 80041d6:	bf00      	nop
 80041d8:	3724      	adds	r7, #36	; 0x24
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	58024400 	.word	0x58024400
 80041e8:	03d09000 	.word	0x03d09000
 80041ec:	46000000 	.word	0x46000000
 80041f0:	4c742400 	.word	0x4c742400
 80041f4:	4a742400 	.word	0x4a742400
 80041f8:	4bbebc20 	.word	0x4bbebc20

080041fc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b089      	sub	sp, #36	; 0x24
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004204:	4ba1      	ldr	r3, [pc, #644]	; (800448c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004208:	f003 0303 	and.w	r3, r3, #3
 800420c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800420e:	4b9f      	ldr	r3, [pc, #636]	; (800448c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004212:	0d1b      	lsrs	r3, r3, #20
 8004214:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004218:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800421a:	4b9c      	ldr	r3, [pc, #624]	; (800448c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800421c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421e:	0a1b      	lsrs	r3, r3, #8
 8004220:	f003 0301 	and.w	r3, r3, #1
 8004224:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004226:	4b99      	ldr	r3, [pc, #612]	; (800448c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800422a:	08db      	lsrs	r3, r3, #3
 800422c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	fb02 f303 	mul.w	r3, r2, r3
 8004236:	ee07 3a90 	vmov	s15, r3
 800423a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800423e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	2b00      	cmp	r3, #0
 8004246:	f000 8111 	beq.w	800446c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	2b02      	cmp	r3, #2
 800424e:	f000 8083 	beq.w	8004358 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	2b02      	cmp	r3, #2
 8004256:	f200 80a1 	bhi.w	800439c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d003      	beq.n	8004268 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d056      	beq.n	8004314 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004266:	e099      	b.n	800439c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004268:	4b88      	ldr	r3, [pc, #544]	; (800448c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0320 	and.w	r3, r3, #32
 8004270:	2b00      	cmp	r3, #0
 8004272:	d02d      	beq.n	80042d0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004274:	4b85      	ldr	r3, [pc, #532]	; (800448c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	08db      	lsrs	r3, r3, #3
 800427a:	f003 0303 	and.w	r3, r3, #3
 800427e:	4a84      	ldr	r2, [pc, #528]	; (8004490 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004280:	fa22 f303 	lsr.w	r3, r2, r3
 8004284:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	ee07 3a90 	vmov	s15, r3
 800428c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	ee07 3a90 	vmov	s15, r3
 8004296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800429a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800429e:	4b7b      	ldr	r3, [pc, #492]	; (800448c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042a6:	ee07 3a90 	vmov	s15, r3
 80042aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80042b2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004494 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80042b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042ca:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80042ce:	e087      	b.n	80043e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	ee07 3a90 	vmov	s15, r3
 80042d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042da:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004498 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80042de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042e2:	4b6a      	ldr	r3, [pc, #424]	; (800448c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042ea:	ee07 3a90 	vmov	s15, r3
 80042ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80042f6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004494 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80042fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004302:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004306:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800430a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800430e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004312:	e065      	b.n	80043e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	ee07 3a90 	vmov	s15, r3
 800431a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800431e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800449c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004326:	4b59      	ldr	r3, [pc, #356]	; (800448c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800432e:	ee07 3a90 	vmov	s15, r3
 8004332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004336:	ed97 6a03 	vldr	s12, [r7, #12]
 800433a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004494 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800433e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004342:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004346:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800434a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800434e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004352:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004356:	e043      	b.n	80043e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	ee07 3a90 	vmov	s15, r3
 800435e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004362:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80044a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004366:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800436a:	4b48      	ldr	r3, [pc, #288]	; (800448c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004372:	ee07 3a90 	vmov	s15, r3
 8004376:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800437a:	ed97 6a03 	vldr	s12, [r7, #12]
 800437e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004494 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004382:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004386:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800438a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800438e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004396:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800439a:	e021      	b.n	80043e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	ee07 3a90 	vmov	s15, r3
 80043a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043a6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800449c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80043aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043ae:	4b37      	ldr	r3, [pc, #220]	; (800448c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043b6:	ee07 3a90 	vmov	s15, r3
 80043ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043be:	ed97 6a03 	vldr	s12, [r7, #12]
 80043c2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004494 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80043c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80043de:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80043e0:	4b2a      	ldr	r3, [pc, #168]	; (800448c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e4:	0a5b      	lsrs	r3, r3, #9
 80043e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043ea:	ee07 3a90 	vmov	s15, r3
 80043ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80043fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004402:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004406:	ee17 2a90 	vmov	r2, s15
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800440e:	4b1f      	ldr	r3, [pc, #124]	; (800448c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004412:	0c1b      	lsrs	r3, r3, #16
 8004414:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004418:	ee07 3a90 	vmov	s15, r3
 800441c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004420:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004424:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004428:	edd7 6a07 	vldr	s13, [r7, #28]
 800442c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004430:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004434:	ee17 2a90 	vmov	r2, s15
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800443c:	4b13      	ldr	r3, [pc, #76]	; (800448c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800443e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004440:	0e1b      	lsrs	r3, r3, #24
 8004442:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004446:	ee07 3a90 	vmov	s15, r3
 800444a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800444e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004452:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004456:	edd7 6a07 	vldr	s13, [r7, #28]
 800445a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800445e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004462:	ee17 2a90 	vmov	r2, s15
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800446a:	e008      	b.n	800447e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	609a      	str	r2, [r3, #8]
}
 800447e:	bf00      	nop
 8004480:	3724      	adds	r7, #36	; 0x24
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	58024400 	.word	0x58024400
 8004490:	03d09000 	.word	0x03d09000
 8004494:	46000000 	.word	0x46000000
 8004498:	4c742400 	.word	0x4c742400
 800449c:	4a742400 	.word	0x4a742400
 80044a0:	4bbebc20 	.word	0x4bbebc20

080044a4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044ae:	2300      	movs	r3, #0
 80044b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80044b2:	4b53      	ldr	r3, [pc, #332]	; (8004600 <RCCEx_PLL2_Config+0x15c>)
 80044b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b6:	f003 0303 	and.w	r3, r3, #3
 80044ba:	2b03      	cmp	r3, #3
 80044bc:	d101      	bne.n	80044c2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e099      	b.n	80045f6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80044c2:	4b4f      	ldr	r3, [pc, #316]	; (8004600 <RCCEx_PLL2_Config+0x15c>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a4e      	ldr	r2, [pc, #312]	; (8004600 <RCCEx_PLL2_Config+0x15c>)
 80044c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044ce:	f7fc fd39 	bl	8000f44 <HAL_GetTick>
 80044d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80044d4:	e008      	b.n	80044e8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80044d6:	f7fc fd35 	bl	8000f44 <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d901      	bls.n	80044e8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e086      	b.n	80045f6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80044e8:	4b45      	ldr	r3, [pc, #276]	; (8004600 <RCCEx_PLL2_Config+0x15c>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d1f0      	bne.n	80044d6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80044f4:	4b42      	ldr	r3, [pc, #264]	; (8004600 <RCCEx_PLL2_Config+0x15c>)
 80044f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	031b      	lsls	r3, r3, #12
 8004502:	493f      	ldr	r1, [pc, #252]	; (8004600 <RCCEx_PLL2_Config+0x15c>)
 8004504:	4313      	orrs	r3, r2
 8004506:	628b      	str	r3, [r1, #40]	; 0x28
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	3b01      	subs	r3, #1
 800450e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	3b01      	subs	r3, #1
 8004518:	025b      	lsls	r3, r3, #9
 800451a:	b29b      	uxth	r3, r3
 800451c:	431a      	orrs	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	3b01      	subs	r3, #1
 8004524:	041b      	lsls	r3, r3, #16
 8004526:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800452a:	431a      	orrs	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	3b01      	subs	r3, #1
 8004532:	061b      	lsls	r3, r3, #24
 8004534:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004538:	4931      	ldr	r1, [pc, #196]	; (8004600 <RCCEx_PLL2_Config+0x15c>)
 800453a:	4313      	orrs	r3, r2
 800453c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800453e:	4b30      	ldr	r3, [pc, #192]	; (8004600 <RCCEx_PLL2_Config+0x15c>)
 8004540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004542:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	492d      	ldr	r1, [pc, #180]	; (8004600 <RCCEx_PLL2_Config+0x15c>)
 800454c:	4313      	orrs	r3, r2
 800454e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004550:	4b2b      	ldr	r3, [pc, #172]	; (8004600 <RCCEx_PLL2_Config+0x15c>)
 8004552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004554:	f023 0220 	bic.w	r2, r3, #32
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	4928      	ldr	r1, [pc, #160]	; (8004600 <RCCEx_PLL2_Config+0x15c>)
 800455e:	4313      	orrs	r3, r2
 8004560:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004562:	4b27      	ldr	r3, [pc, #156]	; (8004600 <RCCEx_PLL2_Config+0x15c>)
 8004564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004566:	4a26      	ldr	r2, [pc, #152]	; (8004600 <RCCEx_PLL2_Config+0x15c>)
 8004568:	f023 0310 	bic.w	r3, r3, #16
 800456c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800456e:	4b24      	ldr	r3, [pc, #144]	; (8004600 <RCCEx_PLL2_Config+0x15c>)
 8004570:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004572:	4b24      	ldr	r3, [pc, #144]	; (8004604 <RCCEx_PLL2_Config+0x160>)
 8004574:	4013      	ands	r3, r2
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	69d2      	ldr	r2, [r2, #28]
 800457a:	00d2      	lsls	r2, r2, #3
 800457c:	4920      	ldr	r1, [pc, #128]	; (8004600 <RCCEx_PLL2_Config+0x15c>)
 800457e:	4313      	orrs	r3, r2
 8004580:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004582:	4b1f      	ldr	r3, [pc, #124]	; (8004600 <RCCEx_PLL2_Config+0x15c>)
 8004584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004586:	4a1e      	ldr	r2, [pc, #120]	; (8004600 <RCCEx_PLL2_Config+0x15c>)
 8004588:	f043 0310 	orr.w	r3, r3, #16
 800458c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d106      	bne.n	80045a2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004594:	4b1a      	ldr	r3, [pc, #104]	; (8004600 <RCCEx_PLL2_Config+0x15c>)
 8004596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004598:	4a19      	ldr	r2, [pc, #100]	; (8004600 <RCCEx_PLL2_Config+0x15c>)
 800459a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800459e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80045a0:	e00f      	b.n	80045c2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d106      	bne.n	80045b6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80045a8:	4b15      	ldr	r3, [pc, #84]	; (8004600 <RCCEx_PLL2_Config+0x15c>)
 80045aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ac:	4a14      	ldr	r2, [pc, #80]	; (8004600 <RCCEx_PLL2_Config+0x15c>)
 80045ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80045b4:	e005      	b.n	80045c2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80045b6:	4b12      	ldr	r3, [pc, #72]	; (8004600 <RCCEx_PLL2_Config+0x15c>)
 80045b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ba:	4a11      	ldr	r2, [pc, #68]	; (8004600 <RCCEx_PLL2_Config+0x15c>)
 80045bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80045c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80045c2:	4b0f      	ldr	r3, [pc, #60]	; (8004600 <RCCEx_PLL2_Config+0x15c>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a0e      	ldr	r2, [pc, #56]	; (8004600 <RCCEx_PLL2_Config+0x15c>)
 80045c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045ce:	f7fc fcb9 	bl	8000f44 <HAL_GetTick>
 80045d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80045d4:	e008      	b.n	80045e8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80045d6:	f7fc fcb5 	bl	8000f44 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d901      	bls.n	80045e8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e006      	b.n	80045f6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80045e8:	4b05      	ldr	r3, [pc, #20]	; (8004600 <RCCEx_PLL2_Config+0x15c>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d0f0      	beq.n	80045d6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80045f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	58024400 	.word	0x58024400
 8004604:	ffff0007 	.word	0xffff0007

08004608 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004612:	2300      	movs	r3, #0
 8004614:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004616:	4b53      	ldr	r3, [pc, #332]	; (8004764 <RCCEx_PLL3_Config+0x15c>)
 8004618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461a:	f003 0303 	and.w	r3, r3, #3
 800461e:	2b03      	cmp	r3, #3
 8004620:	d101      	bne.n	8004626 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e099      	b.n	800475a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004626:	4b4f      	ldr	r3, [pc, #316]	; (8004764 <RCCEx_PLL3_Config+0x15c>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a4e      	ldr	r2, [pc, #312]	; (8004764 <RCCEx_PLL3_Config+0x15c>)
 800462c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004630:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004632:	f7fc fc87 	bl	8000f44 <HAL_GetTick>
 8004636:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004638:	e008      	b.n	800464c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800463a:	f7fc fc83 	bl	8000f44 <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d901      	bls.n	800464c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e086      	b.n	800475a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800464c:	4b45      	ldr	r3, [pc, #276]	; (8004764 <RCCEx_PLL3_Config+0x15c>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1f0      	bne.n	800463a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004658:	4b42      	ldr	r3, [pc, #264]	; (8004764 <RCCEx_PLL3_Config+0x15c>)
 800465a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	051b      	lsls	r3, r3, #20
 8004666:	493f      	ldr	r1, [pc, #252]	; (8004764 <RCCEx_PLL3_Config+0x15c>)
 8004668:	4313      	orrs	r3, r2
 800466a:	628b      	str	r3, [r1, #40]	; 0x28
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	3b01      	subs	r3, #1
 8004672:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	3b01      	subs	r3, #1
 800467c:	025b      	lsls	r3, r3, #9
 800467e:	b29b      	uxth	r3, r3
 8004680:	431a      	orrs	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	3b01      	subs	r3, #1
 8004688:	041b      	lsls	r3, r3, #16
 800468a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800468e:	431a      	orrs	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	3b01      	subs	r3, #1
 8004696:	061b      	lsls	r3, r3, #24
 8004698:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800469c:	4931      	ldr	r1, [pc, #196]	; (8004764 <RCCEx_PLL3_Config+0x15c>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80046a2:	4b30      	ldr	r3, [pc, #192]	; (8004764 <RCCEx_PLL3_Config+0x15c>)
 80046a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	492d      	ldr	r1, [pc, #180]	; (8004764 <RCCEx_PLL3_Config+0x15c>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80046b4:	4b2b      	ldr	r3, [pc, #172]	; (8004764 <RCCEx_PLL3_Config+0x15c>)
 80046b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	4928      	ldr	r1, [pc, #160]	; (8004764 <RCCEx_PLL3_Config+0x15c>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80046c6:	4b27      	ldr	r3, [pc, #156]	; (8004764 <RCCEx_PLL3_Config+0x15c>)
 80046c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ca:	4a26      	ldr	r2, [pc, #152]	; (8004764 <RCCEx_PLL3_Config+0x15c>)
 80046cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80046d2:	4b24      	ldr	r3, [pc, #144]	; (8004764 <RCCEx_PLL3_Config+0x15c>)
 80046d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046d6:	4b24      	ldr	r3, [pc, #144]	; (8004768 <RCCEx_PLL3_Config+0x160>)
 80046d8:	4013      	ands	r3, r2
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	69d2      	ldr	r2, [r2, #28]
 80046de:	00d2      	lsls	r2, r2, #3
 80046e0:	4920      	ldr	r1, [pc, #128]	; (8004764 <RCCEx_PLL3_Config+0x15c>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80046e6:	4b1f      	ldr	r3, [pc, #124]	; (8004764 <RCCEx_PLL3_Config+0x15c>)
 80046e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ea:	4a1e      	ldr	r2, [pc, #120]	; (8004764 <RCCEx_PLL3_Config+0x15c>)
 80046ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d106      	bne.n	8004706 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80046f8:	4b1a      	ldr	r3, [pc, #104]	; (8004764 <RCCEx_PLL3_Config+0x15c>)
 80046fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fc:	4a19      	ldr	r2, [pc, #100]	; (8004764 <RCCEx_PLL3_Config+0x15c>)
 80046fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004702:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004704:	e00f      	b.n	8004726 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d106      	bne.n	800471a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800470c:	4b15      	ldr	r3, [pc, #84]	; (8004764 <RCCEx_PLL3_Config+0x15c>)
 800470e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004710:	4a14      	ldr	r2, [pc, #80]	; (8004764 <RCCEx_PLL3_Config+0x15c>)
 8004712:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004716:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004718:	e005      	b.n	8004726 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800471a:	4b12      	ldr	r3, [pc, #72]	; (8004764 <RCCEx_PLL3_Config+0x15c>)
 800471c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471e:	4a11      	ldr	r2, [pc, #68]	; (8004764 <RCCEx_PLL3_Config+0x15c>)
 8004720:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004724:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004726:	4b0f      	ldr	r3, [pc, #60]	; (8004764 <RCCEx_PLL3_Config+0x15c>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a0e      	ldr	r2, [pc, #56]	; (8004764 <RCCEx_PLL3_Config+0x15c>)
 800472c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004730:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004732:	f7fc fc07 	bl	8000f44 <HAL_GetTick>
 8004736:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004738:	e008      	b.n	800474c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800473a:	f7fc fc03 	bl	8000f44 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	2b02      	cmp	r3, #2
 8004746:	d901      	bls.n	800474c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e006      	b.n	800475a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800474c:	4b05      	ldr	r3, [pc, #20]	; (8004764 <RCCEx_PLL3_Config+0x15c>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d0f0      	beq.n	800473a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004758:	7bfb      	ldrb	r3, [r7, #15]
}
 800475a:	4618      	mov	r0, r3
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	58024400 	.word	0x58024400
 8004768:	ffff0007 	.word	0xffff0007

0800476c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e042      	b.n	8004804 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004784:	2b00      	cmp	r3, #0
 8004786:	d106      	bne.n	8004796 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f7fc f983 	bl	8000a9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2224      	movs	r2, #36	; 0x24
 800479a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 0201 	bic.w	r2, r2, #1
 80047ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 fbf4 	bl	8004f9c <UART_SetConfig>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d101      	bne.n	80047be <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e022      	b.n	8004804 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d002      	beq.n	80047cc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f001 f948 	bl	8005a5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	685a      	ldr	r2, [r3, #4]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689a      	ldr	r2, [r3, #8]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0201 	orr.w	r2, r2, #1
 80047fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f001 f9cf 	bl	8005ba0 <UART_CheckIdleState>
 8004802:	4603      	mov	r3, r0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3708      	adds	r7, #8
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e04a      	b.n	80048b4 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004824:	2b00      	cmp	r3, #0
 8004826:	d106      	bne.n	8004836 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f7fc f933 	bl	8000a9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2224      	movs	r2, #36	; 0x24
 800483a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f022 0201 	bic.w	r2, r2, #1
 800484c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 fba4 	bl	8004f9c <UART_SetConfig>
 8004854:	4603      	mov	r3, r0
 8004856:	2b01      	cmp	r3, #1
 8004858:	d101      	bne.n	800485e <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e02a      	b.n	80048b4 <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004862:	2b00      	cmp	r3, #0
 8004864:	d002      	beq.n	800486c <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f001 f8f8 	bl	8005a5c <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800487a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689a      	ldr	r2, [r3, #8]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800488a:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	689a      	ldr	r2, [r3, #8]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f042 0208 	orr.w	r2, r2, #8
 800489a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f042 0201 	orr.w	r2, r2, #1
 80048aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f001 f977 	bl	8005ba0 <UART_CheckIdleState>
 80048b2:	4603      	mov	r3, r0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3708      	adds	r7, #8
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b08a      	sub	sp, #40	; 0x28
 80048c0:	af02      	add	r7, sp, #8
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	603b      	str	r3, [r7, #0]
 80048c8:	4613      	mov	r3, r2
 80048ca:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048d2:	2b20      	cmp	r3, #32
 80048d4:	f040 8083 	bne.w	80049de <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d002      	beq.n	80048e4 <HAL_UART_Transmit+0x28>
 80048de:	88fb      	ldrh	r3, [r7, #6]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d101      	bne.n	80048e8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e07b      	b.n	80049e0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d101      	bne.n	80048f6 <HAL_UART_Transmit+0x3a>
 80048f2:	2302      	movs	r3, #2
 80048f4:	e074      	b.n	80049e0 <HAL_UART_Transmit+0x124>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2221      	movs	r2, #33	; 0x21
 800490a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800490e:	f7fc fb19 	bl	8000f44 <HAL_GetTick>
 8004912:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	88fa      	ldrh	r2, [r7, #6]
 8004918:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	88fa      	ldrh	r2, [r7, #6]
 8004920:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800492c:	d108      	bne.n	8004940 <HAL_UART_Transmit+0x84>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d104      	bne.n	8004940 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004936:	2300      	movs	r3, #0
 8004938:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	61bb      	str	r3, [r7, #24]
 800493e:	e003      	b.n	8004948 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004944:	2300      	movs	r3, #0
 8004946:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004950:	e02c      	b.n	80049ac <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	9300      	str	r3, [sp, #0]
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	2200      	movs	r2, #0
 800495a:	2180      	movs	r1, #128	; 0x80
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f001 f96a 	bl	8005c36 <UART_WaitOnFlagUntilTimeout>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d001      	beq.n	800496c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e039      	b.n	80049e0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10b      	bne.n	800498a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	881b      	ldrh	r3, [r3, #0]
 8004976:	461a      	mov	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004980:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	3302      	adds	r3, #2
 8004986:	61bb      	str	r3, [r7, #24]
 8004988:	e007      	b.n	800499a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	781a      	ldrb	r2, [r3, #0]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	3301      	adds	r3, #1
 8004998:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	3b01      	subs	r3, #1
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1cc      	bne.n	8004952 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	9300      	str	r3, [sp, #0]
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	2200      	movs	r2, #0
 80049c0:	2140      	movs	r1, #64	; 0x40
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f001 f937 	bl	8005c36 <UART_WaitOnFlagUntilTimeout>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d001      	beq.n	80049d2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e006      	b.n	80049e0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2220      	movs	r2, #32
 80049d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80049da:	2300      	movs	r3, #0
 80049dc:	e000      	b.n	80049e0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80049de:	2302      	movs	r3, #2
  }
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3720      	adds	r7, #32
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b088      	sub	sp, #32
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	69db      	ldr	r3, [r3, #28]
 80049f6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004a08:	69fa      	ldr	r2, [r7, #28]
 8004a0a:	f640 030f 	movw	r3, #2063	; 0x80f
 8004a0e:	4013      	ands	r3, r2
 8004a10:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d118      	bne.n	8004a4a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	f003 0320 	and.w	r3, r3, #32
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d013      	beq.n	8004a4a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	f003 0320 	and.w	r3, r3, #32
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d104      	bne.n	8004a36 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d009      	beq.n	8004a4a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f000 8282 	beq.w	8004f44 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	4798      	blx	r3
      }
      return;
 8004a48:	e27c      	b.n	8004f44 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f000 80ef 	beq.w	8004c30 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004a52:	697a      	ldr	r2, [r7, #20]
 8004a54:	4b73      	ldr	r3, [pc, #460]	; (8004c24 <HAL_UART_IRQHandler+0x23c>)
 8004a56:	4013      	ands	r3, r2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d105      	bne.n	8004a68 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	4b72      	ldr	r3, [pc, #456]	; (8004c28 <HAL_UART_IRQHandler+0x240>)
 8004a60:	4013      	ands	r3, r2
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f000 80e4 	beq.w	8004c30 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	f003 0301 	and.w	r3, r3, #1
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d010      	beq.n	8004a94 <HAL_UART_IRQHandler+0xac>
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00b      	beq.n	8004a94 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2201      	movs	r2, #1
 8004a82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a8a:	f043 0201 	orr.w	r2, r3, #1
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d010      	beq.n	8004ac0 <HAL_UART_IRQHandler+0xd8>
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00b      	beq.n	8004ac0 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2202      	movs	r2, #2
 8004aae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ab6:	f043 0204 	orr.w	r2, r3, #4
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	f003 0304 	and.w	r3, r3, #4
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d010      	beq.n	8004aec <HAL_UART_IRQHandler+0x104>
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00b      	beq.n	8004aec <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2204      	movs	r2, #4
 8004ada:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ae2:	f043 0202 	orr.w	r2, r3, #2
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	f003 0308 	and.w	r3, r3, #8
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d015      	beq.n	8004b22 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	f003 0320 	and.w	r3, r3, #32
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d104      	bne.n	8004b0a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	4b48      	ldr	r3, [pc, #288]	; (8004c24 <HAL_UART_IRQHandler+0x23c>)
 8004b04:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00b      	beq.n	8004b22 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2208      	movs	r2, #8
 8004b10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b18:	f043 0208 	orr.w	r2, r3, #8
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d011      	beq.n	8004b50 <HAL_UART_IRQHandler+0x168>
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00c      	beq.n	8004b50 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b46:	f043 0220 	orr.w	r2, r3, #32
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	f000 81f6 	beq.w	8004f48 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	f003 0320 	and.w	r3, r3, #32
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d011      	beq.n	8004b8a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	f003 0320 	and.w	r3, r3, #32
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d104      	bne.n	8004b7a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d007      	beq.n	8004b8a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d003      	beq.n	8004b8a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b90:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9c:	2b40      	cmp	r3, #64	; 0x40
 8004b9e:	d004      	beq.n	8004baa <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d031      	beq.n	8004c0e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f001 f8c4 	bl	8005d38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bba:	2b40      	cmp	r3, #64	; 0x40
 8004bbc:	d123      	bne.n	8004c06 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	689a      	ldr	r2, [r3, #8]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bcc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d013      	beq.n	8004bfe <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bda:	4a14      	ldr	r2, [pc, #80]	; (8004c2c <HAL_UART_IRQHandler+0x244>)
 8004bdc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7fc fe18 	bl	8001818 <HAL_DMA_Abort_IT>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d017      	beq.n	8004c1e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004bf8:	4610      	mov	r0, r2
 8004bfa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bfc:	e00f      	b.n	8004c1e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f9b6 	bl	8004f70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c04:	e00b      	b.n	8004c1e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f9b2 	bl	8004f70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c0c:	e007      	b.n	8004c1e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 f9ae 	bl	8004f70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004c1c:	e194      	b.n	8004f48 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c1e:	bf00      	nop
    return;
 8004c20:	e192      	b.n	8004f48 <HAL_UART_IRQHandler+0x560>
 8004c22:	bf00      	nop
 8004c24:	10000001 	.word	0x10000001
 8004c28:	04000120 	.word	0x04000120
 8004c2c:	08005d9d 	.word	0x08005d9d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	f040 810f 	bne.w	8004e58 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	f003 0310 	and.w	r3, r3, #16
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f000 8109 	beq.w	8004e58 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	f003 0310 	and.w	r3, r3, #16
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 8103 	beq.w	8004e58 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2210      	movs	r2, #16
 8004c58:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c64:	2b40      	cmp	r3, #64	; 0x40
 8004c66:	f040 80bb 	bne.w	8004de0 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a96      	ldr	r2, [pc, #600]	; (8004ecc <HAL_UART_IRQHandler+0x4e4>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d059      	beq.n	8004d2a <HAL_UART_IRQHandler+0x342>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a94      	ldr	r2, [pc, #592]	; (8004ed0 <HAL_UART_IRQHandler+0x4e8>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d053      	beq.n	8004d2a <HAL_UART_IRQHandler+0x342>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a92      	ldr	r2, [pc, #584]	; (8004ed4 <HAL_UART_IRQHandler+0x4ec>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d04d      	beq.n	8004d2a <HAL_UART_IRQHandler+0x342>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a90      	ldr	r2, [pc, #576]	; (8004ed8 <HAL_UART_IRQHandler+0x4f0>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d047      	beq.n	8004d2a <HAL_UART_IRQHandler+0x342>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a8e      	ldr	r2, [pc, #568]	; (8004edc <HAL_UART_IRQHandler+0x4f4>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d041      	beq.n	8004d2a <HAL_UART_IRQHandler+0x342>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a8c      	ldr	r2, [pc, #560]	; (8004ee0 <HAL_UART_IRQHandler+0x4f8>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d03b      	beq.n	8004d2a <HAL_UART_IRQHandler+0x342>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a8a      	ldr	r2, [pc, #552]	; (8004ee4 <HAL_UART_IRQHandler+0x4fc>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d035      	beq.n	8004d2a <HAL_UART_IRQHandler+0x342>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a88      	ldr	r2, [pc, #544]	; (8004ee8 <HAL_UART_IRQHandler+0x500>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d02f      	beq.n	8004d2a <HAL_UART_IRQHandler+0x342>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a86      	ldr	r2, [pc, #536]	; (8004eec <HAL_UART_IRQHandler+0x504>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d029      	beq.n	8004d2a <HAL_UART_IRQHandler+0x342>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a84      	ldr	r2, [pc, #528]	; (8004ef0 <HAL_UART_IRQHandler+0x508>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d023      	beq.n	8004d2a <HAL_UART_IRQHandler+0x342>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a82      	ldr	r2, [pc, #520]	; (8004ef4 <HAL_UART_IRQHandler+0x50c>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d01d      	beq.n	8004d2a <HAL_UART_IRQHandler+0x342>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a80      	ldr	r2, [pc, #512]	; (8004ef8 <HAL_UART_IRQHandler+0x510>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d017      	beq.n	8004d2a <HAL_UART_IRQHandler+0x342>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a7e      	ldr	r2, [pc, #504]	; (8004efc <HAL_UART_IRQHandler+0x514>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d011      	beq.n	8004d2a <HAL_UART_IRQHandler+0x342>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a7c      	ldr	r2, [pc, #496]	; (8004f00 <HAL_UART_IRQHandler+0x518>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d00b      	beq.n	8004d2a <HAL_UART_IRQHandler+0x342>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a7a      	ldr	r2, [pc, #488]	; (8004f04 <HAL_UART_IRQHandler+0x51c>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d005      	beq.n	8004d2a <HAL_UART_IRQHandler+0x342>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a78      	ldr	r2, [pc, #480]	; (8004f08 <HAL_UART_IRQHandler+0x520>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d105      	bne.n	8004d36 <HAL_UART_IRQHandler+0x34e>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	e004      	b.n	8004d40 <HAL_UART_IRQHandler+0x358>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8004d42:	893b      	ldrh	r3, [r7, #8]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f000 8101 	beq.w	8004f4c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004d50:	893a      	ldrh	r2, [r7, #8]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	f080 80fa 	bcs.w	8004f4c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	893a      	ldrh	r2, [r7, #8]
 8004d5c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d64:	69db      	ldr	r3, [r3, #28]
 8004d66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d6a:	d02b      	beq.n	8004dc4 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d7a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	689a      	ldr	r2, [r3, #8]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f022 0201 	bic.w	r2, r2, #1
 8004d8a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	689a      	ldr	r2, [r3, #8]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d9a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2220      	movs	r2, #32
 8004da0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f022 0210 	bic.w	r2, r2, #16
 8004db8:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7fc fa0c 	bl	80011dc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 f8d3 	bl	8004f84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004dde:	e0b5      	b.n	8004f4c <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f000 80a8 	beq.w	8004f50 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8004e00:	897b      	ldrh	r3, [r7, #10]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	f000 80a4 	beq.w	8004f50 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e16:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6899      	ldr	r1, [r3, #8]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	4b3a      	ldr	r3, [pc, #232]	; (8004f0c <HAL_UART_IRQHandler+0x524>)
 8004e24:	400b      	ands	r3, r1
 8004e26:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f022 0210 	bic.w	r2, r2, #16
 8004e4a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e4c:	897b      	ldrh	r3, [r7, #10]
 8004e4e:	4619      	mov	r1, r3
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f000 f897 	bl	8004f84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e56:	e07b      	b.n	8004f50 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00d      	beq.n	8004e7e <HAL_UART_IRQHandler+0x496>
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d008      	beq.n	8004e7e <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004e74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 ffc0 	bl	8005dfc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e7c:	e06b      	b.n	8004f56 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d012      	beq.n	8004eae <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d104      	bne.n	8004e9c <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d008      	beq.n	8004eae <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d057      	beq.n	8004f54 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	4798      	blx	r3
    }
    return;
 8004eac:	e052      	b.n	8004f54 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d02b      	beq.n	8004f10 <HAL_UART_IRQHandler+0x528>
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d026      	beq.n	8004f10 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 ff80 	bl	8005dc8 <UART_EndTransmit_IT>
    return;
 8004ec8:	e045      	b.n	8004f56 <HAL_UART_IRQHandler+0x56e>
 8004eca:	bf00      	nop
 8004ecc:	40020010 	.word	0x40020010
 8004ed0:	40020028 	.word	0x40020028
 8004ed4:	40020040 	.word	0x40020040
 8004ed8:	40020058 	.word	0x40020058
 8004edc:	40020070 	.word	0x40020070
 8004ee0:	40020088 	.word	0x40020088
 8004ee4:	400200a0 	.word	0x400200a0
 8004ee8:	400200b8 	.word	0x400200b8
 8004eec:	40020410 	.word	0x40020410
 8004ef0:	40020428 	.word	0x40020428
 8004ef4:	40020440 	.word	0x40020440
 8004ef8:	40020458 	.word	0x40020458
 8004efc:	40020470 	.word	0x40020470
 8004f00:	40020488 	.word	0x40020488
 8004f04:	400204a0 	.word	0x400204a0
 8004f08:	400204b8 	.word	0x400204b8
 8004f0c:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d008      	beq.n	8004f2c <HAL_UART_IRQHandler+0x544>
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d003      	beq.n	8004f2c <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 ff7d 	bl	8005e24 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f2a:	e014      	b.n	8004f56 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00f      	beq.n	8004f56 <HAL_UART_IRQHandler+0x56e>
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	da0c      	bge.n	8004f56 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 ff67 	bl	8005e10 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f42:	e008      	b.n	8004f56 <HAL_UART_IRQHandler+0x56e>
      return;
 8004f44:	bf00      	nop
 8004f46:	e006      	b.n	8004f56 <HAL_UART_IRQHandler+0x56e>
    return;
 8004f48:	bf00      	nop
 8004f4a:	e004      	b.n	8004f56 <HAL_UART_IRQHandler+0x56e>
      return;
 8004f4c:	bf00      	nop
 8004f4e:	e002      	b.n	8004f56 <HAL_UART_IRQHandler+0x56e>
      return;
 8004f50:	bf00      	nop
 8004f52:	e000      	b.n	8004f56 <HAL_UART_IRQHandler+0x56e>
    return;
 8004f54:	bf00      	nop
  }
}
 8004f56:	3720      	adds	r7, #32
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004f64:	bf00      	nop
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004f78:	bf00      	nop
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f9c:	b5b0      	push	{r4, r5, r7, lr}
 8004f9e:	b08e      	sub	sp, #56	; 0x38
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	689a      	ldr	r2, [r3, #8]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	431a      	orrs	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	695b      	ldr	r3, [r3, #20]
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	69db      	ldr	r3, [r3, #28]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	4bbf      	ldr	r3, [pc, #764]	; (80052c8 <UART_SetConfig+0x32c>)
 8004fca:	4013      	ands	r3, r2
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	6812      	ldr	r2, [r2, #0]
 8004fd0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004fd2:	430b      	orrs	r3, r1
 8004fd4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	68da      	ldr	r2, [r3, #12]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	430a      	orrs	r2, r1
 8004fea:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	699b      	ldr	r3, [r3, #24]
 8004ff0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4ab5      	ldr	r2, [pc, #724]	; (80052cc <UART_SetConfig+0x330>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d004      	beq.n	8005006 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a1b      	ldr	r3, [r3, #32]
 8005000:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005002:	4313      	orrs	r3, r2
 8005004:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	689a      	ldr	r2, [r3, #8]
 800500c:	4bb0      	ldr	r3, [pc, #704]	; (80052d0 <UART_SetConfig+0x334>)
 800500e:	4013      	ands	r3, r2
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	6812      	ldr	r2, [r2, #0]
 8005014:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005016:	430b      	orrs	r3, r1
 8005018:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005020:	f023 010f 	bic.w	r1, r3, #15
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	430a      	orrs	r2, r1
 800502e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4aa7      	ldr	r2, [pc, #668]	; (80052d4 <UART_SetConfig+0x338>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d176      	bne.n	8005128 <UART_SetConfig+0x18c>
 800503a:	4ba7      	ldr	r3, [pc, #668]	; (80052d8 <UART_SetConfig+0x33c>)
 800503c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800503e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005042:	2b28      	cmp	r3, #40	; 0x28
 8005044:	d86c      	bhi.n	8005120 <UART_SetConfig+0x184>
 8005046:	a201      	add	r2, pc, #4	; (adr r2, 800504c <UART_SetConfig+0xb0>)
 8005048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800504c:	080050f1 	.word	0x080050f1
 8005050:	08005121 	.word	0x08005121
 8005054:	08005121 	.word	0x08005121
 8005058:	08005121 	.word	0x08005121
 800505c:	08005121 	.word	0x08005121
 8005060:	08005121 	.word	0x08005121
 8005064:	08005121 	.word	0x08005121
 8005068:	08005121 	.word	0x08005121
 800506c:	080050f9 	.word	0x080050f9
 8005070:	08005121 	.word	0x08005121
 8005074:	08005121 	.word	0x08005121
 8005078:	08005121 	.word	0x08005121
 800507c:	08005121 	.word	0x08005121
 8005080:	08005121 	.word	0x08005121
 8005084:	08005121 	.word	0x08005121
 8005088:	08005121 	.word	0x08005121
 800508c:	08005101 	.word	0x08005101
 8005090:	08005121 	.word	0x08005121
 8005094:	08005121 	.word	0x08005121
 8005098:	08005121 	.word	0x08005121
 800509c:	08005121 	.word	0x08005121
 80050a0:	08005121 	.word	0x08005121
 80050a4:	08005121 	.word	0x08005121
 80050a8:	08005121 	.word	0x08005121
 80050ac:	08005109 	.word	0x08005109
 80050b0:	08005121 	.word	0x08005121
 80050b4:	08005121 	.word	0x08005121
 80050b8:	08005121 	.word	0x08005121
 80050bc:	08005121 	.word	0x08005121
 80050c0:	08005121 	.word	0x08005121
 80050c4:	08005121 	.word	0x08005121
 80050c8:	08005121 	.word	0x08005121
 80050cc:	08005111 	.word	0x08005111
 80050d0:	08005121 	.word	0x08005121
 80050d4:	08005121 	.word	0x08005121
 80050d8:	08005121 	.word	0x08005121
 80050dc:	08005121 	.word	0x08005121
 80050e0:	08005121 	.word	0x08005121
 80050e4:	08005121 	.word	0x08005121
 80050e8:	08005121 	.word	0x08005121
 80050ec:	08005119 	.word	0x08005119
 80050f0:	2301      	movs	r3, #1
 80050f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050f6:	e222      	b.n	800553e <UART_SetConfig+0x5a2>
 80050f8:	2304      	movs	r3, #4
 80050fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050fe:	e21e      	b.n	800553e <UART_SetConfig+0x5a2>
 8005100:	2308      	movs	r3, #8
 8005102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005106:	e21a      	b.n	800553e <UART_SetConfig+0x5a2>
 8005108:	2310      	movs	r3, #16
 800510a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800510e:	e216      	b.n	800553e <UART_SetConfig+0x5a2>
 8005110:	2320      	movs	r3, #32
 8005112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005116:	e212      	b.n	800553e <UART_SetConfig+0x5a2>
 8005118:	2340      	movs	r3, #64	; 0x40
 800511a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800511e:	e20e      	b.n	800553e <UART_SetConfig+0x5a2>
 8005120:	2380      	movs	r3, #128	; 0x80
 8005122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005126:	e20a      	b.n	800553e <UART_SetConfig+0x5a2>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a6b      	ldr	r2, [pc, #428]	; (80052dc <UART_SetConfig+0x340>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d130      	bne.n	8005194 <UART_SetConfig+0x1f8>
 8005132:	4b69      	ldr	r3, [pc, #420]	; (80052d8 <UART_SetConfig+0x33c>)
 8005134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005136:	f003 0307 	and.w	r3, r3, #7
 800513a:	2b05      	cmp	r3, #5
 800513c:	d826      	bhi.n	800518c <UART_SetConfig+0x1f0>
 800513e:	a201      	add	r2, pc, #4	; (adr r2, 8005144 <UART_SetConfig+0x1a8>)
 8005140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005144:	0800515d 	.word	0x0800515d
 8005148:	08005165 	.word	0x08005165
 800514c:	0800516d 	.word	0x0800516d
 8005150:	08005175 	.word	0x08005175
 8005154:	0800517d 	.word	0x0800517d
 8005158:	08005185 	.word	0x08005185
 800515c:	2300      	movs	r3, #0
 800515e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005162:	e1ec      	b.n	800553e <UART_SetConfig+0x5a2>
 8005164:	2304      	movs	r3, #4
 8005166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800516a:	e1e8      	b.n	800553e <UART_SetConfig+0x5a2>
 800516c:	2308      	movs	r3, #8
 800516e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005172:	e1e4      	b.n	800553e <UART_SetConfig+0x5a2>
 8005174:	2310      	movs	r3, #16
 8005176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800517a:	e1e0      	b.n	800553e <UART_SetConfig+0x5a2>
 800517c:	2320      	movs	r3, #32
 800517e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005182:	e1dc      	b.n	800553e <UART_SetConfig+0x5a2>
 8005184:	2340      	movs	r3, #64	; 0x40
 8005186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800518a:	e1d8      	b.n	800553e <UART_SetConfig+0x5a2>
 800518c:	2380      	movs	r3, #128	; 0x80
 800518e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005192:	e1d4      	b.n	800553e <UART_SetConfig+0x5a2>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a51      	ldr	r2, [pc, #324]	; (80052e0 <UART_SetConfig+0x344>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d130      	bne.n	8005200 <UART_SetConfig+0x264>
 800519e:	4b4e      	ldr	r3, [pc, #312]	; (80052d8 <UART_SetConfig+0x33c>)
 80051a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a2:	f003 0307 	and.w	r3, r3, #7
 80051a6:	2b05      	cmp	r3, #5
 80051a8:	d826      	bhi.n	80051f8 <UART_SetConfig+0x25c>
 80051aa:	a201      	add	r2, pc, #4	; (adr r2, 80051b0 <UART_SetConfig+0x214>)
 80051ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b0:	080051c9 	.word	0x080051c9
 80051b4:	080051d1 	.word	0x080051d1
 80051b8:	080051d9 	.word	0x080051d9
 80051bc:	080051e1 	.word	0x080051e1
 80051c0:	080051e9 	.word	0x080051e9
 80051c4:	080051f1 	.word	0x080051f1
 80051c8:	2300      	movs	r3, #0
 80051ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051ce:	e1b6      	b.n	800553e <UART_SetConfig+0x5a2>
 80051d0:	2304      	movs	r3, #4
 80051d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051d6:	e1b2      	b.n	800553e <UART_SetConfig+0x5a2>
 80051d8:	2308      	movs	r3, #8
 80051da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051de:	e1ae      	b.n	800553e <UART_SetConfig+0x5a2>
 80051e0:	2310      	movs	r3, #16
 80051e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051e6:	e1aa      	b.n	800553e <UART_SetConfig+0x5a2>
 80051e8:	2320      	movs	r3, #32
 80051ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051ee:	e1a6      	b.n	800553e <UART_SetConfig+0x5a2>
 80051f0:	2340      	movs	r3, #64	; 0x40
 80051f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051f6:	e1a2      	b.n	800553e <UART_SetConfig+0x5a2>
 80051f8:	2380      	movs	r3, #128	; 0x80
 80051fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051fe:	e19e      	b.n	800553e <UART_SetConfig+0x5a2>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a37      	ldr	r2, [pc, #220]	; (80052e4 <UART_SetConfig+0x348>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d130      	bne.n	800526c <UART_SetConfig+0x2d0>
 800520a:	4b33      	ldr	r3, [pc, #204]	; (80052d8 <UART_SetConfig+0x33c>)
 800520c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800520e:	f003 0307 	and.w	r3, r3, #7
 8005212:	2b05      	cmp	r3, #5
 8005214:	d826      	bhi.n	8005264 <UART_SetConfig+0x2c8>
 8005216:	a201      	add	r2, pc, #4	; (adr r2, 800521c <UART_SetConfig+0x280>)
 8005218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800521c:	08005235 	.word	0x08005235
 8005220:	0800523d 	.word	0x0800523d
 8005224:	08005245 	.word	0x08005245
 8005228:	0800524d 	.word	0x0800524d
 800522c:	08005255 	.word	0x08005255
 8005230:	0800525d 	.word	0x0800525d
 8005234:	2300      	movs	r3, #0
 8005236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800523a:	e180      	b.n	800553e <UART_SetConfig+0x5a2>
 800523c:	2304      	movs	r3, #4
 800523e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005242:	e17c      	b.n	800553e <UART_SetConfig+0x5a2>
 8005244:	2308      	movs	r3, #8
 8005246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800524a:	e178      	b.n	800553e <UART_SetConfig+0x5a2>
 800524c:	2310      	movs	r3, #16
 800524e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005252:	e174      	b.n	800553e <UART_SetConfig+0x5a2>
 8005254:	2320      	movs	r3, #32
 8005256:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800525a:	e170      	b.n	800553e <UART_SetConfig+0x5a2>
 800525c:	2340      	movs	r3, #64	; 0x40
 800525e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005262:	e16c      	b.n	800553e <UART_SetConfig+0x5a2>
 8005264:	2380      	movs	r3, #128	; 0x80
 8005266:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800526a:	e168      	b.n	800553e <UART_SetConfig+0x5a2>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a1d      	ldr	r2, [pc, #116]	; (80052e8 <UART_SetConfig+0x34c>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d142      	bne.n	80052fc <UART_SetConfig+0x360>
 8005276:	4b18      	ldr	r3, [pc, #96]	; (80052d8 <UART_SetConfig+0x33c>)
 8005278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800527a:	f003 0307 	and.w	r3, r3, #7
 800527e:	2b05      	cmp	r3, #5
 8005280:	d838      	bhi.n	80052f4 <UART_SetConfig+0x358>
 8005282:	a201      	add	r2, pc, #4	; (adr r2, 8005288 <UART_SetConfig+0x2ec>)
 8005284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005288:	080052a1 	.word	0x080052a1
 800528c:	080052a9 	.word	0x080052a9
 8005290:	080052b1 	.word	0x080052b1
 8005294:	080052b9 	.word	0x080052b9
 8005298:	080052c1 	.word	0x080052c1
 800529c:	080052ed 	.word	0x080052ed
 80052a0:	2300      	movs	r3, #0
 80052a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052a6:	e14a      	b.n	800553e <UART_SetConfig+0x5a2>
 80052a8:	2304      	movs	r3, #4
 80052aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052ae:	e146      	b.n	800553e <UART_SetConfig+0x5a2>
 80052b0:	2308      	movs	r3, #8
 80052b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052b6:	e142      	b.n	800553e <UART_SetConfig+0x5a2>
 80052b8:	2310      	movs	r3, #16
 80052ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052be:	e13e      	b.n	800553e <UART_SetConfig+0x5a2>
 80052c0:	2320      	movs	r3, #32
 80052c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052c6:	e13a      	b.n	800553e <UART_SetConfig+0x5a2>
 80052c8:	cfff69f3 	.word	0xcfff69f3
 80052cc:	58000c00 	.word	0x58000c00
 80052d0:	11fff4ff 	.word	0x11fff4ff
 80052d4:	40011000 	.word	0x40011000
 80052d8:	58024400 	.word	0x58024400
 80052dc:	40004400 	.word	0x40004400
 80052e0:	40004800 	.word	0x40004800
 80052e4:	40004c00 	.word	0x40004c00
 80052e8:	40005000 	.word	0x40005000
 80052ec:	2340      	movs	r3, #64	; 0x40
 80052ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052f2:	e124      	b.n	800553e <UART_SetConfig+0x5a2>
 80052f4:	2380      	movs	r3, #128	; 0x80
 80052f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052fa:	e120      	b.n	800553e <UART_SetConfig+0x5a2>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4acc      	ldr	r2, [pc, #816]	; (8005634 <UART_SetConfig+0x698>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d176      	bne.n	80053f4 <UART_SetConfig+0x458>
 8005306:	4bcc      	ldr	r3, [pc, #816]	; (8005638 <UART_SetConfig+0x69c>)
 8005308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800530a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800530e:	2b28      	cmp	r3, #40	; 0x28
 8005310:	d86c      	bhi.n	80053ec <UART_SetConfig+0x450>
 8005312:	a201      	add	r2, pc, #4	; (adr r2, 8005318 <UART_SetConfig+0x37c>)
 8005314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005318:	080053bd 	.word	0x080053bd
 800531c:	080053ed 	.word	0x080053ed
 8005320:	080053ed 	.word	0x080053ed
 8005324:	080053ed 	.word	0x080053ed
 8005328:	080053ed 	.word	0x080053ed
 800532c:	080053ed 	.word	0x080053ed
 8005330:	080053ed 	.word	0x080053ed
 8005334:	080053ed 	.word	0x080053ed
 8005338:	080053c5 	.word	0x080053c5
 800533c:	080053ed 	.word	0x080053ed
 8005340:	080053ed 	.word	0x080053ed
 8005344:	080053ed 	.word	0x080053ed
 8005348:	080053ed 	.word	0x080053ed
 800534c:	080053ed 	.word	0x080053ed
 8005350:	080053ed 	.word	0x080053ed
 8005354:	080053ed 	.word	0x080053ed
 8005358:	080053cd 	.word	0x080053cd
 800535c:	080053ed 	.word	0x080053ed
 8005360:	080053ed 	.word	0x080053ed
 8005364:	080053ed 	.word	0x080053ed
 8005368:	080053ed 	.word	0x080053ed
 800536c:	080053ed 	.word	0x080053ed
 8005370:	080053ed 	.word	0x080053ed
 8005374:	080053ed 	.word	0x080053ed
 8005378:	080053d5 	.word	0x080053d5
 800537c:	080053ed 	.word	0x080053ed
 8005380:	080053ed 	.word	0x080053ed
 8005384:	080053ed 	.word	0x080053ed
 8005388:	080053ed 	.word	0x080053ed
 800538c:	080053ed 	.word	0x080053ed
 8005390:	080053ed 	.word	0x080053ed
 8005394:	080053ed 	.word	0x080053ed
 8005398:	080053dd 	.word	0x080053dd
 800539c:	080053ed 	.word	0x080053ed
 80053a0:	080053ed 	.word	0x080053ed
 80053a4:	080053ed 	.word	0x080053ed
 80053a8:	080053ed 	.word	0x080053ed
 80053ac:	080053ed 	.word	0x080053ed
 80053b0:	080053ed 	.word	0x080053ed
 80053b4:	080053ed 	.word	0x080053ed
 80053b8:	080053e5 	.word	0x080053e5
 80053bc:	2301      	movs	r3, #1
 80053be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053c2:	e0bc      	b.n	800553e <UART_SetConfig+0x5a2>
 80053c4:	2304      	movs	r3, #4
 80053c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053ca:	e0b8      	b.n	800553e <UART_SetConfig+0x5a2>
 80053cc:	2308      	movs	r3, #8
 80053ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053d2:	e0b4      	b.n	800553e <UART_SetConfig+0x5a2>
 80053d4:	2310      	movs	r3, #16
 80053d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053da:	e0b0      	b.n	800553e <UART_SetConfig+0x5a2>
 80053dc:	2320      	movs	r3, #32
 80053de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053e2:	e0ac      	b.n	800553e <UART_SetConfig+0x5a2>
 80053e4:	2340      	movs	r3, #64	; 0x40
 80053e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053ea:	e0a8      	b.n	800553e <UART_SetConfig+0x5a2>
 80053ec:	2380      	movs	r3, #128	; 0x80
 80053ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053f2:	e0a4      	b.n	800553e <UART_SetConfig+0x5a2>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a90      	ldr	r2, [pc, #576]	; (800563c <UART_SetConfig+0x6a0>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d130      	bne.n	8005460 <UART_SetConfig+0x4c4>
 80053fe:	4b8e      	ldr	r3, [pc, #568]	; (8005638 <UART_SetConfig+0x69c>)
 8005400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005402:	f003 0307 	and.w	r3, r3, #7
 8005406:	2b05      	cmp	r3, #5
 8005408:	d826      	bhi.n	8005458 <UART_SetConfig+0x4bc>
 800540a:	a201      	add	r2, pc, #4	; (adr r2, 8005410 <UART_SetConfig+0x474>)
 800540c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005410:	08005429 	.word	0x08005429
 8005414:	08005431 	.word	0x08005431
 8005418:	08005439 	.word	0x08005439
 800541c:	08005441 	.word	0x08005441
 8005420:	08005449 	.word	0x08005449
 8005424:	08005451 	.word	0x08005451
 8005428:	2300      	movs	r3, #0
 800542a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800542e:	e086      	b.n	800553e <UART_SetConfig+0x5a2>
 8005430:	2304      	movs	r3, #4
 8005432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005436:	e082      	b.n	800553e <UART_SetConfig+0x5a2>
 8005438:	2308      	movs	r3, #8
 800543a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800543e:	e07e      	b.n	800553e <UART_SetConfig+0x5a2>
 8005440:	2310      	movs	r3, #16
 8005442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005446:	e07a      	b.n	800553e <UART_SetConfig+0x5a2>
 8005448:	2320      	movs	r3, #32
 800544a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800544e:	e076      	b.n	800553e <UART_SetConfig+0x5a2>
 8005450:	2340      	movs	r3, #64	; 0x40
 8005452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005456:	e072      	b.n	800553e <UART_SetConfig+0x5a2>
 8005458:	2380      	movs	r3, #128	; 0x80
 800545a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800545e:	e06e      	b.n	800553e <UART_SetConfig+0x5a2>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a76      	ldr	r2, [pc, #472]	; (8005640 <UART_SetConfig+0x6a4>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d130      	bne.n	80054cc <UART_SetConfig+0x530>
 800546a:	4b73      	ldr	r3, [pc, #460]	; (8005638 <UART_SetConfig+0x69c>)
 800546c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800546e:	f003 0307 	and.w	r3, r3, #7
 8005472:	2b05      	cmp	r3, #5
 8005474:	d826      	bhi.n	80054c4 <UART_SetConfig+0x528>
 8005476:	a201      	add	r2, pc, #4	; (adr r2, 800547c <UART_SetConfig+0x4e0>)
 8005478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800547c:	08005495 	.word	0x08005495
 8005480:	0800549d 	.word	0x0800549d
 8005484:	080054a5 	.word	0x080054a5
 8005488:	080054ad 	.word	0x080054ad
 800548c:	080054b5 	.word	0x080054b5
 8005490:	080054bd 	.word	0x080054bd
 8005494:	2300      	movs	r3, #0
 8005496:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800549a:	e050      	b.n	800553e <UART_SetConfig+0x5a2>
 800549c:	2304      	movs	r3, #4
 800549e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054a2:	e04c      	b.n	800553e <UART_SetConfig+0x5a2>
 80054a4:	2308      	movs	r3, #8
 80054a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054aa:	e048      	b.n	800553e <UART_SetConfig+0x5a2>
 80054ac:	2310      	movs	r3, #16
 80054ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054b2:	e044      	b.n	800553e <UART_SetConfig+0x5a2>
 80054b4:	2320      	movs	r3, #32
 80054b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054ba:	e040      	b.n	800553e <UART_SetConfig+0x5a2>
 80054bc:	2340      	movs	r3, #64	; 0x40
 80054be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054c2:	e03c      	b.n	800553e <UART_SetConfig+0x5a2>
 80054c4:	2380      	movs	r3, #128	; 0x80
 80054c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054ca:	e038      	b.n	800553e <UART_SetConfig+0x5a2>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a5c      	ldr	r2, [pc, #368]	; (8005644 <UART_SetConfig+0x6a8>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d130      	bne.n	8005538 <UART_SetConfig+0x59c>
 80054d6:	4b58      	ldr	r3, [pc, #352]	; (8005638 <UART_SetConfig+0x69c>)
 80054d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054da:	f003 0307 	and.w	r3, r3, #7
 80054de:	2b05      	cmp	r3, #5
 80054e0:	d826      	bhi.n	8005530 <UART_SetConfig+0x594>
 80054e2:	a201      	add	r2, pc, #4	; (adr r2, 80054e8 <UART_SetConfig+0x54c>)
 80054e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e8:	08005501 	.word	0x08005501
 80054ec:	08005509 	.word	0x08005509
 80054f0:	08005511 	.word	0x08005511
 80054f4:	08005519 	.word	0x08005519
 80054f8:	08005521 	.word	0x08005521
 80054fc:	08005529 	.word	0x08005529
 8005500:	2302      	movs	r3, #2
 8005502:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005506:	e01a      	b.n	800553e <UART_SetConfig+0x5a2>
 8005508:	2304      	movs	r3, #4
 800550a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800550e:	e016      	b.n	800553e <UART_SetConfig+0x5a2>
 8005510:	2308      	movs	r3, #8
 8005512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005516:	e012      	b.n	800553e <UART_SetConfig+0x5a2>
 8005518:	2310      	movs	r3, #16
 800551a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800551e:	e00e      	b.n	800553e <UART_SetConfig+0x5a2>
 8005520:	2320      	movs	r3, #32
 8005522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005526:	e00a      	b.n	800553e <UART_SetConfig+0x5a2>
 8005528:	2340      	movs	r3, #64	; 0x40
 800552a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800552e:	e006      	b.n	800553e <UART_SetConfig+0x5a2>
 8005530:	2380      	movs	r3, #128	; 0x80
 8005532:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005536:	e002      	b.n	800553e <UART_SetConfig+0x5a2>
 8005538:	2380      	movs	r3, #128	; 0x80
 800553a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a40      	ldr	r2, [pc, #256]	; (8005644 <UART_SetConfig+0x6a8>)
 8005544:	4293      	cmp	r3, r2
 8005546:	f040 80ef 	bne.w	8005728 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800554a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800554e:	2b20      	cmp	r3, #32
 8005550:	dc46      	bgt.n	80055e0 <UART_SetConfig+0x644>
 8005552:	2b02      	cmp	r3, #2
 8005554:	f2c0 8081 	blt.w	800565a <UART_SetConfig+0x6be>
 8005558:	3b02      	subs	r3, #2
 800555a:	2b1e      	cmp	r3, #30
 800555c:	d87d      	bhi.n	800565a <UART_SetConfig+0x6be>
 800555e:	a201      	add	r2, pc, #4	; (adr r2, 8005564 <UART_SetConfig+0x5c8>)
 8005560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005564:	080055e7 	.word	0x080055e7
 8005568:	0800565b 	.word	0x0800565b
 800556c:	080055ef 	.word	0x080055ef
 8005570:	0800565b 	.word	0x0800565b
 8005574:	0800565b 	.word	0x0800565b
 8005578:	0800565b 	.word	0x0800565b
 800557c:	080055ff 	.word	0x080055ff
 8005580:	0800565b 	.word	0x0800565b
 8005584:	0800565b 	.word	0x0800565b
 8005588:	0800565b 	.word	0x0800565b
 800558c:	0800565b 	.word	0x0800565b
 8005590:	0800565b 	.word	0x0800565b
 8005594:	0800565b 	.word	0x0800565b
 8005598:	0800565b 	.word	0x0800565b
 800559c:	0800560f 	.word	0x0800560f
 80055a0:	0800565b 	.word	0x0800565b
 80055a4:	0800565b 	.word	0x0800565b
 80055a8:	0800565b 	.word	0x0800565b
 80055ac:	0800565b 	.word	0x0800565b
 80055b0:	0800565b 	.word	0x0800565b
 80055b4:	0800565b 	.word	0x0800565b
 80055b8:	0800565b 	.word	0x0800565b
 80055bc:	0800565b 	.word	0x0800565b
 80055c0:	0800565b 	.word	0x0800565b
 80055c4:	0800565b 	.word	0x0800565b
 80055c8:	0800565b 	.word	0x0800565b
 80055cc:	0800565b 	.word	0x0800565b
 80055d0:	0800565b 	.word	0x0800565b
 80055d4:	0800565b 	.word	0x0800565b
 80055d8:	0800565b 	.word	0x0800565b
 80055dc:	0800564d 	.word	0x0800564d
 80055e0:	2b40      	cmp	r3, #64	; 0x40
 80055e2:	d036      	beq.n	8005652 <UART_SetConfig+0x6b6>
 80055e4:	e039      	b.n	800565a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80055e6:	f7fe fc9f 	bl	8003f28 <HAL_RCCEx_GetD3PCLK1Freq>
 80055ea:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80055ec:	e03b      	b.n	8005666 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055ee:	f107 0314 	add.w	r3, r7, #20
 80055f2:	4618      	mov	r0, r3
 80055f4:	f7fe fcae 	bl	8003f54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80055fc:	e033      	b.n	8005666 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055fe:	f107 0308 	add.w	r3, r7, #8
 8005602:	4618      	mov	r0, r3
 8005604:	f7fe fdfa 	bl	80041fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800560c:	e02b      	b.n	8005666 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800560e:	4b0a      	ldr	r3, [pc, #40]	; (8005638 <UART_SetConfig+0x69c>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0320 	and.w	r3, r3, #32
 8005616:	2b00      	cmp	r3, #0
 8005618:	d009      	beq.n	800562e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800561a:	4b07      	ldr	r3, [pc, #28]	; (8005638 <UART_SetConfig+0x69c>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	08db      	lsrs	r3, r3, #3
 8005620:	f003 0303 	and.w	r3, r3, #3
 8005624:	4a08      	ldr	r2, [pc, #32]	; (8005648 <UART_SetConfig+0x6ac>)
 8005626:	fa22 f303 	lsr.w	r3, r2, r3
 800562a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800562c:	e01b      	b.n	8005666 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800562e:	4b06      	ldr	r3, [pc, #24]	; (8005648 <UART_SetConfig+0x6ac>)
 8005630:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005632:	e018      	b.n	8005666 <UART_SetConfig+0x6ca>
 8005634:	40011400 	.word	0x40011400
 8005638:	58024400 	.word	0x58024400
 800563c:	40007800 	.word	0x40007800
 8005640:	40007c00 	.word	0x40007c00
 8005644:	58000c00 	.word	0x58000c00
 8005648:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800564c:	4bc4      	ldr	r3, [pc, #784]	; (8005960 <UART_SetConfig+0x9c4>)
 800564e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005650:	e009      	b.n	8005666 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005652:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005656:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005658:	e005      	b.n	8005666 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800565a:	2300      	movs	r3, #0
 800565c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005664:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005668:	2b00      	cmp	r3, #0
 800566a:	f000 81da 	beq.w	8005a22 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005672:	4abc      	ldr	r2, [pc, #752]	; (8005964 <UART_SetConfig+0x9c8>)
 8005674:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005678:	461a      	mov	r2, r3
 800567a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800567c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005680:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685a      	ldr	r2, [r3, #4]
 8005686:	4613      	mov	r3, r2
 8005688:	005b      	lsls	r3, r3, #1
 800568a:	4413      	add	r3, r2
 800568c:	6a3a      	ldr	r2, [r7, #32]
 800568e:	429a      	cmp	r2, r3
 8005690:	d305      	bcc.n	800569e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005698:	6a3a      	ldr	r2, [r7, #32]
 800569a:	429a      	cmp	r2, r3
 800569c:	d903      	bls.n	80056a6 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80056a4:	e1bd      	b.n	8005a22 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a8:	4618      	mov	r0, r3
 80056aa:	f04f 0100 	mov.w	r1, #0
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b2:	4aac      	ldr	r2, [pc, #688]	; (8005964 <UART_SetConfig+0x9c8>)
 80056b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	f04f 0300 	mov.w	r3, #0
 80056be:	f7fa fe0b 	bl	80002d8 <__aeabi_uldivmod>
 80056c2:	4602      	mov	r2, r0
 80056c4:	460b      	mov	r3, r1
 80056c6:	4610      	mov	r0, r2
 80056c8:	4619      	mov	r1, r3
 80056ca:	f04f 0200 	mov.w	r2, #0
 80056ce:	f04f 0300 	mov.w	r3, #0
 80056d2:	020b      	lsls	r3, r1, #8
 80056d4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80056d8:	0202      	lsls	r2, r0, #8
 80056da:	6879      	ldr	r1, [r7, #4]
 80056dc:	6849      	ldr	r1, [r1, #4]
 80056de:	0849      	lsrs	r1, r1, #1
 80056e0:	4608      	mov	r0, r1
 80056e2:	f04f 0100 	mov.w	r1, #0
 80056e6:	1814      	adds	r4, r2, r0
 80056e8:	eb43 0501 	adc.w	r5, r3, r1
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	461a      	mov	r2, r3
 80056f2:	f04f 0300 	mov.w	r3, #0
 80056f6:	4620      	mov	r0, r4
 80056f8:	4629      	mov	r1, r5
 80056fa:	f7fa fded 	bl	80002d8 <__aeabi_uldivmod>
 80056fe:	4602      	mov	r2, r0
 8005700:	460b      	mov	r3, r1
 8005702:	4613      	mov	r3, r2
 8005704:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005708:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800570c:	d308      	bcc.n	8005720 <UART_SetConfig+0x784>
 800570e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005710:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005714:	d204      	bcs.n	8005720 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800571c:	60da      	str	r2, [r3, #12]
 800571e:	e180      	b.n	8005a22 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005726:	e17c      	b.n	8005a22 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	69db      	ldr	r3, [r3, #28]
 800572c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005730:	f040 80bf 	bne.w	80058b2 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8005734:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005738:	2b20      	cmp	r3, #32
 800573a:	dc49      	bgt.n	80057d0 <UART_SetConfig+0x834>
 800573c:	2b00      	cmp	r3, #0
 800573e:	db7c      	blt.n	800583a <UART_SetConfig+0x89e>
 8005740:	2b20      	cmp	r3, #32
 8005742:	d87a      	bhi.n	800583a <UART_SetConfig+0x89e>
 8005744:	a201      	add	r2, pc, #4	; (adr r2, 800574c <UART_SetConfig+0x7b0>)
 8005746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800574a:	bf00      	nop
 800574c:	080057d7 	.word	0x080057d7
 8005750:	080057df 	.word	0x080057df
 8005754:	0800583b 	.word	0x0800583b
 8005758:	0800583b 	.word	0x0800583b
 800575c:	080057e7 	.word	0x080057e7
 8005760:	0800583b 	.word	0x0800583b
 8005764:	0800583b 	.word	0x0800583b
 8005768:	0800583b 	.word	0x0800583b
 800576c:	080057f7 	.word	0x080057f7
 8005770:	0800583b 	.word	0x0800583b
 8005774:	0800583b 	.word	0x0800583b
 8005778:	0800583b 	.word	0x0800583b
 800577c:	0800583b 	.word	0x0800583b
 8005780:	0800583b 	.word	0x0800583b
 8005784:	0800583b 	.word	0x0800583b
 8005788:	0800583b 	.word	0x0800583b
 800578c:	08005807 	.word	0x08005807
 8005790:	0800583b 	.word	0x0800583b
 8005794:	0800583b 	.word	0x0800583b
 8005798:	0800583b 	.word	0x0800583b
 800579c:	0800583b 	.word	0x0800583b
 80057a0:	0800583b 	.word	0x0800583b
 80057a4:	0800583b 	.word	0x0800583b
 80057a8:	0800583b 	.word	0x0800583b
 80057ac:	0800583b 	.word	0x0800583b
 80057b0:	0800583b 	.word	0x0800583b
 80057b4:	0800583b 	.word	0x0800583b
 80057b8:	0800583b 	.word	0x0800583b
 80057bc:	0800583b 	.word	0x0800583b
 80057c0:	0800583b 	.word	0x0800583b
 80057c4:	0800583b 	.word	0x0800583b
 80057c8:	0800583b 	.word	0x0800583b
 80057cc:	0800582d 	.word	0x0800582d
 80057d0:	2b40      	cmp	r3, #64	; 0x40
 80057d2:	d02e      	beq.n	8005832 <UART_SetConfig+0x896>
 80057d4:	e031      	b.n	800583a <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057d6:	f7fd fc0b 	bl	8002ff0 <HAL_RCC_GetPCLK1Freq>
 80057da:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80057dc:	e033      	b.n	8005846 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057de:	f7fd fc1d 	bl	800301c <HAL_RCC_GetPCLK2Freq>
 80057e2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80057e4:	e02f      	b.n	8005846 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057e6:	f107 0314 	add.w	r3, r7, #20
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7fe fbb2 	bl	8003f54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80057f4:	e027      	b.n	8005846 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057f6:	f107 0308 	add.w	r3, r7, #8
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7fe fcfe 	bl	80041fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005804:	e01f      	b.n	8005846 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005806:	4b58      	ldr	r3, [pc, #352]	; (8005968 <UART_SetConfig+0x9cc>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0320 	and.w	r3, r3, #32
 800580e:	2b00      	cmp	r3, #0
 8005810:	d009      	beq.n	8005826 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005812:	4b55      	ldr	r3, [pc, #340]	; (8005968 <UART_SetConfig+0x9cc>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	08db      	lsrs	r3, r3, #3
 8005818:	f003 0303 	and.w	r3, r3, #3
 800581c:	4a53      	ldr	r2, [pc, #332]	; (800596c <UART_SetConfig+0x9d0>)
 800581e:	fa22 f303 	lsr.w	r3, r2, r3
 8005822:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005824:	e00f      	b.n	8005846 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8005826:	4b51      	ldr	r3, [pc, #324]	; (800596c <UART_SetConfig+0x9d0>)
 8005828:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800582a:	e00c      	b.n	8005846 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800582c:	4b4c      	ldr	r3, [pc, #304]	; (8005960 <UART_SetConfig+0x9c4>)
 800582e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005830:	e009      	b.n	8005846 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005832:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005836:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005838:	e005      	b.n	8005846 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800583a:	2300      	movs	r3, #0
 800583c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005844:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005848:	2b00      	cmp	r3, #0
 800584a:	f000 80ea 	beq.w	8005a22 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005852:	4a44      	ldr	r2, [pc, #272]	; (8005964 <UART_SetConfig+0x9c8>)
 8005854:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005858:	461a      	mov	r2, r3
 800585a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800585c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005860:	005a      	lsls	r2, r3, #1
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	085b      	lsrs	r3, r3, #1
 8005868:	441a      	add	r2, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005872:	b29b      	uxth	r3, r3
 8005874:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005878:	2b0f      	cmp	r3, #15
 800587a:	d916      	bls.n	80058aa <UART_SetConfig+0x90e>
 800587c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005882:	d212      	bcs.n	80058aa <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005886:	b29b      	uxth	r3, r3
 8005888:	f023 030f 	bic.w	r3, r3, #15
 800588c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800588e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005890:	085b      	lsrs	r3, r3, #1
 8005892:	b29b      	uxth	r3, r3
 8005894:	f003 0307 	and.w	r3, r3, #7
 8005898:	b29a      	uxth	r2, r3
 800589a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800589c:	4313      	orrs	r3, r2
 800589e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80058a6:	60da      	str	r2, [r3, #12]
 80058a8:	e0bb      	b.n	8005a22 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80058b0:	e0b7      	b.n	8005a22 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80058b6:	2b20      	cmp	r3, #32
 80058b8:	dc4a      	bgt.n	8005950 <UART_SetConfig+0x9b4>
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	f2c0 8086 	blt.w	80059cc <UART_SetConfig+0xa30>
 80058c0:	2b20      	cmp	r3, #32
 80058c2:	f200 8083 	bhi.w	80059cc <UART_SetConfig+0xa30>
 80058c6:	a201      	add	r2, pc, #4	; (adr r2, 80058cc <UART_SetConfig+0x930>)
 80058c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058cc:	08005957 	.word	0x08005957
 80058d0:	08005971 	.word	0x08005971
 80058d4:	080059cd 	.word	0x080059cd
 80058d8:	080059cd 	.word	0x080059cd
 80058dc:	08005979 	.word	0x08005979
 80058e0:	080059cd 	.word	0x080059cd
 80058e4:	080059cd 	.word	0x080059cd
 80058e8:	080059cd 	.word	0x080059cd
 80058ec:	08005989 	.word	0x08005989
 80058f0:	080059cd 	.word	0x080059cd
 80058f4:	080059cd 	.word	0x080059cd
 80058f8:	080059cd 	.word	0x080059cd
 80058fc:	080059cd 	.word	0x080059cd
 8005900:	080059cd 	.word	0x080059cd
 8005904:	080059cd 	.word	0x080059cd
 8005908:	080059cd 	.word	0x080059cd
 800590c:	08005999 	.word	0x08005999
 8005910:	080059cd 	.word	0x080059cd
 8005914:	080059cd 	.word	0x080059cd
 8005918:	080059cd 	.word	0x080059cd
 800591c:	080059cd 	.word	0x080059cd
 8005920:	080059cd 	.word	0x080059cd
 8005924:	080059cd 	.word	0x080059cd
 8005928:	080059cd 	.word	0x080059cd
 800592c:	080059cd 	.word	0x080059cd
 8005930:	080059cd 	.word	0x080059cd
 8005934:	080059cd 	.word	0x080059cd
 8005938:	080059cd 	.word	0x080059cd
 800593c:	080059cd 	.word	0x080059cd
 8005940:	080059cd 	.word	0x080059cd
 8005944:	080059cd 	.word	0x080059cd
 8005948:	080059cd 	.word	0x080059cd
 800594c:	080059bf 	.word	0x080059bf
 8005950:	2b40      	cmp	r3, #64	; 0x40
 8005952:	d037      	beq.n	80059c4 <UART_SetConfig+0xa28>
 8005954:	e03a      	b.n	80059cc <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005956:	f7fd fb4b 	bl	8002ff0 <HAL_RCC_GetPCLK1Freq>
 800595a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800595c:	e03c      	b.n	80059d8 <UART_SetConfig+0xa3c>
 800595e:	bf00      	nop
 8005960:	003d0900 	.word	0x003d0900
 8005964:	08006a74 	.word	0x08006a74
 8005968:	58024400 	.word	0x58024400
 800596c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005970:	f7fd fb54 	bl	800301c <HAL_RCC_GetPCLK2Freq>
 8005974:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005976:	e02f      	b.n	80059d8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005978:	f107 0314 	add.w	r3, r7, #20
 800597c:	4618      	mov	r0, r3
 800597e:	f7fe fae9 	bl	8003f54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005986:	e027      	b.n	80059d8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005988:	f107 0308 	add.w	r3, r7, #8
 800598c:	4618      	mov	r0, r3
 800598e:	f7fe fc35 	bl	80041fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005996:	e01f      	b.n	80059d8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005998:	4b2c      	ldr	r3, [pc, #176]	; (8005a4c <UART_SetConfig+0xab0>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0320 	and.w	r3, r3, #32
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d009      	beq.n	80059b8 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80059a4:	4b29      	ldr	r3, [pc, #164]	; (8005a4c <UART_SetConfig+0xab0>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	08db      	lsrs	r3, r3, #3
 80059aa:	f003 0303 	and.w	r3, r3, #3
 80059ae:	4a28      	ldr	r2, [pc, #160]	; (8005a50 <UART_SetConfig+0xab4>)
 80059b0:	fa22 f303 	lsr.w	r3, r2, r3
 80059b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80059b6:	e00f      	b.n	80059d8 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 80059b8:	4b25      	ldr	r3, [pc, #148]	; (8005a50 <UART_SetConfig+0xab4>)
 80059ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80059bc:	e00c      	b.n	80059d8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80059be:	4b25      	ldr	r3, [pc, #148]	; (8005a54 <UART_SetConfig+0xab8>)
 80059c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80059c2:	e009      	b.n	80059d8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80059ca:	e005      	b.n	80059d8 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 80059cc:	2300      	movs	r3, #0
 80059ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80059d6:	bf00      	nop
    }

    if (pclk != 0U)
 80059d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d021      	beq.n	8005a22 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e2:	4a1d      	ldr	r2, [pc, #116]	; (8005a58 <UART_SetConfig+0xabc>)
 80059e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059e8:	461a      	mov	r2, r3
 80059ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ec:	fbb3 f2f2 	udiv	r2, r3, r2
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	085b      	lsrs	r3, r3, #1
 80059f6:	441a      	add	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a06:	2b0f      	cmp	r3, #15
 8005a08:	d908      	bls.n	8005a1c <UART_SetConfig+0xa80>
 8005a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a10:	d204      	bcs.n	8005a1c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a18:	60da      	str	r2, [r3, #12]
 8005a1a:	e002      	b.n	8005a22 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2201      	movs	r2, #1
 8005a26:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005a3e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3738      	adds	r7, #56	; 0x38
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bdb0      	pop	{r4, r5, r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	58024400 	.word	0x58024400
 8005a50:	03d09000 	.word	0x03d09000
 8005a54:	003d0900 	.word	0x003d0900
 8005a58:	08006a74 	.word	0x08006a74

08005a5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00a      	beq.n	8005a86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	430a      	orrs	r2, r1
 8005a84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8a:	f003 0302 	and.w	r3, r3, #2
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00a      	beq.n	8005aa8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aac:	f003 0304 	and.w	r3, r3, #4
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00a      	beq.n	8005aca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ace:	f003 0308 	and.w	r3, r3, #8
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00a      	beq.n	8005aec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	430a      	orrs	r2, r1
 8005aea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af0:	f003 0310 	and.w	r3, r3, #16
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d00a      	beq.n	8005b0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b12:	f003 0320 	and.w	r3, r3, #32
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00a      	beq.n	8005b30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d01a      	beq.n	8005b72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b5a:	d10a      	bne.n	8005b72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00a      	beq.n	8005b94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	430a      	orrs	r2, r1
 8005b92:	605a      	str	r2, [r3, #4]
  }
}
 8005b94:	bf00      	nop
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	af02      	add	r7, sp, #8
 8005ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005bb0:	f7fb f9c8 	bl	8000f44 <HAL_GetTick>
 8005bb4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0308 	and.w	r3, r3, #8
 8005bc0:	2b08      	cmp	r3, #8
 8005bc2:	d10e      	bne.n	8005be2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bc8:	9300      	str	r3, [sp, #0]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 f82f 	bl	8005c36 <UART_WaitOnFlagUntilTimeout>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d001      	beq.n	8005be2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e025      	b.n	8005c2e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0304 	and.w	r3, r3, #4
 8005bec:	2b04      	cmp	r3, #4
 8005bee:	d10e      	bne.n	8005c0e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bf0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bf4:	9300      	str	r3, [sp, #0]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 f819 	bl	8005c36 <UART_WaitOnFlagUntilTimeout>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d001      	beq.n	8005c0e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e00f      	b.n	8005c2e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2220      	movs	r2, #32
 8005c12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2220      	movs	r2, #32
 8005c1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b084      	sub	sp, #16
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	60f8      	str	r0, [r7, #12]
 8005c3e:	60b9      	str	r1, [r7, #8]
 8005c40:	603b      	str	r3, [r7, #0]
 8005c42:	4613      	mov	r3, r2
 8005c44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c46:	e062      	b.n	8005d0e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c4e:	d05e      	beq.n	8005d0e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c50:	f7fb f978 	bl	8000f44 <HAL_GetTick>
 8005c54:	4602      	mov	r2, r0
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	69ba      	ldr	r2, [r7, #24]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d302      	bcc.n	8005c66 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d11d      	bne.n	8005ca2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005c74:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	689a      	ldr	r2, [r3, #8]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f022 0201 	bic.w	r2, r2, #1
 8005c84:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2220      	movs	r2, #32
 8005c8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2220      	movs	r2, #32
 8005c92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	e045      	b.n	8005d2e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0304 	and.w	r3, r3, #4
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d02e      	beq.n	8005d0e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	69db      	ldr	r3, [r3, #28]
 8005cb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cbe:	d126      	bne.n	8005d0e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cc8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005cd8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	689a      	ldr	r2, [r3, #8]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f022 0201 	bic.w	r2, r2, #1
 8005ce8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2220      	movs	r2, #32
 8005cee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2220      	movs	r2, #32
 8005cf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2220      	movs	r2, #32
 8005cfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e00f      	b.n	8005d2e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	69da      	ldr	r2, [r3, #28]
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	4013      	ands	r3, r2
 8005d18:	68ba      	ldr	r2, [r7, #8]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	bf0c      	ite	eq
 8005d1e:	2301      	moveq	r3, #1
 8005d20:	2300      	movne	r3, #0
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	461a      	mov	r2, r3
 8005d26:	79fb      	ldrb	r3, [r7, #7]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d08d      	beq.n	8005c48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3710      	adds	r7, #16
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
	...

08005d38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005d4e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	6899      	ldr	r1, [r3, #8]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	4b0f      	ldr	r3, [pc, #60]	; (8005d98 <UART_EndRxTransfer+0x60>)
 8005d5c:	400b      	ands	r3, r1
 8005d5e:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d107      	bne.n	8005d78 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f022 0210 	bic.w	r2, r2, #16
 8005d76:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2220      	movs	r2, #32
 8005d7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005d8c:	bf00      	nop
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr
 8005d98:	effffffe 	.word	0xeffffffe

08005d9c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f7ff f8d8 	bl	8004f70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dc0:	bf00      	nop
 8005dc2:	3710      	adds	r7, #16
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dde:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2220      	movs	r2, #32
 8005de4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f7ff f8b4 	bl	8004f5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005df4:	bf00      	nop
 8005df6:	3708      	adds	r7, #8
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005e2c:	bf00      	nop
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d101      	bne.n	8005e4e <HAL_UARTEx_DisableFifoMode+0x16>
 8005e4a:	2302      	movs	r3, #2
 8005e4c:	e027      	b.n	8005e9e <HAL_UARTEx_DisableFifoMode+0x66>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2224      	movs	r2, #36	; 0x24
 8005e5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f022 0201 	bic.w	r2, r2, #1
 8005e74:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005e7c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2220      	movs	r2, #32
 8005e90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3714      	adds	r7, #20
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr

08005eaa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b084      	sub	sp, #16
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
 8005eb2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d101      	bne.n	8005ec2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005ebe:	2302      	movs	r3, #2
 8005ec0:	e02d      	b.n	8005f1e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2224      	movs	r2, #36	; 0x24
 8005ece:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f022 0201 	bic.w	r2, r2, #1
 8005ee8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	683a      	ldr	r2, [r7, #0]
 8005efa:	430a      	orrs	r2, r1
 8005efc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 f850 	bl	8005fa4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2220      	movs	r2, #32
 8005f10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3710      	adds	r7, #16
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f26:	b580      	push	{r7, lr}
 8005f28:	b084      	sub	sp, #16
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
 8005f2e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d101      	bne.n	8005f3e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005f3a:	2302      	movs	r3, #2
 8005f3c:	e02d      	b.n	8005f9a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2201      	movs	r2, #1
 8005f42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2224      	movs	r2, #36	; 0x24
 8005f4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f022 0201 	bic.w	r2, r2, #1
 8005f64:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	683a      	ldr	r2, [r7, #0]
 8005f76:	430a      	orrs	r2, r1
 8005f78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 f812 	bl	8005fa4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2220      	movs	r2, #32
 8005f8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3710      	adds	r7, #16
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
	...

08005fa4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d108      	bne.n	8005fc6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005fc4:	e031      	b.n	800602a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005fc6:	2310      	movs	r3, #16
 8005fc8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005fca:	2310      	movs	r3, #16
 8005fcc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	0e5b      	lsrs	r3, r3, #25
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	f003 0307 	and.w	r3, r3, #7
 8005fdc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	0f5b      	lsrs	r3, r3, #29
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	f003 0307 	and.w	r3, r3, #7
 8005fec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fee:	7bbb      	ldrb	r3, [r7, #14]
 8005ff0:	7b3a      	ldrb	r2, [r7, #12]
 8005ff2:	4911      	ldr	r1, [pc, #68]	; (8006038 <UARTEx_SetNbDataToProcess+0x94>)
 8005ff4:	5c8a      	ldrb	r2, [r1, r2]
 8005ff6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005ffa:	7b3a      	ldrb	r2, [r7, #12]
 8005ffc:	490f      	ldr	r1, [pc, #60]	; (800603c <UARTEx_SetNbDataToProcess+0x98>)
 8005ffe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006000:	fb93 f3f2 	sdiv	r3, r3, r2
 8006004:	b29a      	uxth	r2, r3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800600c:	7bfb      	ldrb	r3, [r7, #15]
 800600e:	7b7a      	ldrb	r2, [r7, #13]
 8006010:	4909      	ldr	r1, [pc, #36]	; (8006038 <UARTEx_SetNbDataToProcess+0x94>)
 8006012:	5c8a      	ldrb	r2, [r1, r2]
 8006014:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006018:	7b7a      	ldrb	r2, [r7, #13]
 800601a:	4908      	ldr	r1, [pc, #32]	; (800603c <UARTEx_SetNbDataToProcess+0x98>)
 800601c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800601e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006022:	b29a      	uxth	r2, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800602a:	bf00      	nop
 800602c:	3714      	adds	r7, #20
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop
 8006038:	08006a8c 	.word	0x08006a8c
 800603c:	08006a94 	.word	0x08006a94

08006040 <__errno>:
 8006040:	4b01      	ldr	r3, [pc, #4]	; (8006048 <__errno+0x8>)
 8006042:	6818      	ldr	r0, [r3, #0]
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	24000010 	.word	0x24000010

0800604c <__libc_init_array>:
 800604c:	b570      	push	{r4, r5, r6, lr}
 800604e:	4d0d      	ldr	r5, [pc, #52]	; (8006084 <__libc_init_array+0x38>)
 8006050:	4c0d      	ldr	r4, [pc, #52]	; (8006088 <__libc_init_array+0x3c>)
 8006052:	1b64      	subs	r4, r4, r5
 8006054:	10a4      	asrs	r4, r4, #2
 8006056:	2600      	movs	r6, #0
 8006058:	42a6      	cmp	r6, r4
 800605a:	d109      	bne.n	8006070 <__libc_init_array+0x24>
 800605c:	4d0b      	ldr	r5, [pc, #44]	; (800608c <__libc_init_array+0x40>)
 800605e:	4c0c      	ldr	r4, [pc, #48]	; (8006090 <__libc_init_array+0x44>)
 8006060:	f000 fce6 	bl	8006a30 <_init>
 8006064:	1b64      	subs	r4, r4, r5
 8006066:	10a4      	asrs	r4, r4, #2
 8006068:	2600      	movs	r6, #0
 800606a:	42a6      	cmp	r6, r4
 800606c:	d105      	bne.n	800607a <__libc_init_array+0x2e>
 800606e:	bd70      	pop	{r4, r5, r6, pc}
 8006070:	f855 3b04 	ldr.w	r3, [r5], #4
 8006074:	4798      	blx	r3
 8006076:	3601      	adds	r6, #1
 8006078:	e7ee      	b.n	8006058 <__libc_init_array+0xc>
 800607a:	f855 3b04 	ldr.w	r3, [r5], #4
 800607e:	4798      	blx	r3
 8006080:	3601      	adds	r6, #1
 8006082:	e7f2      	b.n	800606a <__libc_init_array+0x1e>
 8006084:	08006b08 	.word	0x08006b08
 8006088:	08006b08 	.word	0x08006b08
 800608c:	08006b08 	.word	0x08006b08
 8006090:	08006b0c 	.word	0x08006b0c

08006094 <memset>:
 8006094:	4402      	add	r2, r0
 8006096:	4603      	mov	r3, r0
 8006098:	4293      	cmp	r3, r2
 800609a:	d100      	bne.n	800609e <memset+0xa>
 800609c:	4770      	bx	lr
 800609e:	f803 1b01 	strb.w	r1, [r3], #1
 80060a2:	e7f9      	b.n	8006098 <memset+0x4>

080060a4 <_puts_r>:
 80060a4:	b570      	push	{r4, r5, r6, lr}
 80060a6:	460e      	mov	r6, r1
 80060a8:	4605      	mov	r5, r0
 80060aa:	b118      	cbz	r0, 80060b4 <_puts_r+0x10>
 80060ac:	6983      	ldr	r3, [r0, #24]
 80060ae:	b90b      	cbnz	r3, 80060b4 <_puts_r+0x10>
 80060b0:	f000 fa48 	bl	8006544 <__sinit>
 80060b4:	69ab      	ldr	r3, [r5, #24]
 80060b6:	68ac      	ldr	r4, [r5, #8]
 80060b8:	b913      	cbnz	r3, 80060c0 <_puts_r+0x1c>
 80060ba:	4628      	mov	r0, r5
 80060bc:	f000 fa42 	bl	8006544 <__sinit>
 80060c0:	4b2c      	ldr	r3, [pc, #176]	; (8006174 <_puts_r+0xd0>)
 80060c2:	429c      	cmp	r4, r3
 80060c4:	d120      	bne.n	8006108 <_puts_r+0x64>
 80060c6:	686c      	ldr	r4, [r5, #4]
 80060c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060ca:	07db      	lsls	r3, r3, #31
 80060cc:	d405      	bmi.n	80060da <_puts_r+0x36>
 80060ce:	89a3      	ldrh	r3, [r4, #12]
 80060d0:	0598      	lsls	r0, r3, #22
 80060d2:	d402      	bmi.n	80060da <_puts_r+0x36>
 80060d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060d6:	f000 fad3 	bl	8006680 <__retarget_lock_acquire_recursive>
 80060da:	89a3      	ldrh	r3, [r4, #12]
 80060dc:	0719      	lsls	r1, r3, #28
 80060de:	d51d      	bpl.n	800611c <_puts_r+0x78>
 80060e0:	6923      	ldr	r3, [r4, #16]
 80060e2:	b1db      	cbz	r3, 800611c <_puts_r+0x78>
 80060e4:	3e01      	subs	r6, #1
 80060e6:	68a3      	ldr	r3, [r4, #8]
 80060e8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80060ec:	3b01      	subs	r3, #1
 80060ee:	60a3      	str	r3, [r4, #8]
 80060f0:	bb39      	cbnz	r1, 8006142 <_puts_r+0x9e>
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	da38      	bge.n	8006168 <_puts_r+0xc4>
 80060f6:	4622      	mov	r2, r4
 80060f8:	210a      	movs	r1, #10
 80060fa:	4628      	mov	r0, r5
 80060fc:	f000 f848 	bl	8006190 <__swbuf_r>
 8006100:	3001      	adds	r0, #1
 8006102:	d011      	beq.n	8006128 <_puts_r+0x84>
 8006104:	250a      	movs	r5, #10
 8006106:	e011      	b.n	800612c <_puts_r+0x88>
 8006108:	4b1b      	ldr	r3, [pc, #108]	; (8006178 <_puts_r+0xd4>)
 800610a:	429c      	cmp	r4, r3
 800610c:	d101      	bne.n	8006112 <_puts_r+0x6e>
 800610e:	68ac      	ldr	r4, [r5, #8]
 8006110:	e7da      	b.n	80060c8 <_puts_r+0x24>
 8006112:	4b1a      	ldr	r3, [pc, #104]	; (800617c <_puts_r+0xd8>)
 8006114:	429c      	cmp	r4, r3
 8006116:	bf08      	it	eq
 8006118:	68ec      	ldreq	r4, [r5, #12]
 800611a:	e7d5      	b.n	80060c8 <_puts_r+0x24>
 800611c:	4621      	mov	r1, r4
 800611e:	4628      	mov	r0, r5
 8006120:	f000 f888 	bl	8006234 <__swsetup_r>
 8006124:	2800      	cmp	r0, #0
 8006126:	d0dd      	beq.n	80060e4 <_puts_r+0x40>
 8006128:	f04f 35ff 	mov.w	r5, #4294967295
 800612c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800612e:	07da      	lsls	r2, r3, #31
 8006130:	d405      	bmi.n	800613e <_puts_r+0x9a>
 8006132:	89a3      	ldrh	r3, [r4, #12]
 8006134:	059b      	lsls	r3, r3, #22
 8006136:	d402      	bmi.n	800613e <_puts_r+0x9a>
 8006138:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800613a:	f000 faa2 	bl	8006682 <__retarget_lock_release_recursive>
 800613e:	4628      	mov	r0, r5
 8006140:	bd70      	pop	{r4, r5, r6, pc}
 8006142:	2b00      	cmp	r3, #0
 8006144:	da04      	bge.n	8006150 <_puts_r+0xac>
 8006146:	69a2      	ldr	r2, [r4, #24]
 8006148:	429a      	cmp	r2, r3
 800614a:	dc06      	bgt.n	800615a <_puts_r+0xb6>
 800614c:	290a      	cmp	r1, #10
 800614e:	d004      	beq.n	800615a <_puts_r+0xb6>
 8006150:	6823      	ldr	r3, [r4, #0]
 8006152:	1c5a      	adds	r2, r3, #1
 8006154:	6022      	str	r2, [r4, #0]
 8006156:	7019      	strb	r1, [r3, #0]
 8006158:	e7c5      	b.n	80060e6 <_puts_r+0x42>
 800615a:	4622      	mov	r2, r4
 800615c:	4628      	mov	r0, r5
 800615e:	f000 f817 	bl	8006190 <__swbuf_r>
 8006162:	3001      	adds	r0, #1
 8006164:	d1bf      	bne.n	80060e6 <_puts_r+0x42>
 8006166:	e7df      	b.n	8006128 <_puts_r+0x84>
 8006168:	6823      	ldr	r3, [r4, #0]
 800616a:	250a      	movs	r5, #10
 800616c:	1c5a      	adds	r2, r3, #1
 800616e:	6022      	str	r2, [r4, #0]
 8006170:	701d      	strb	r5, [r3, #0]
 8006172:	e7db      	b.n	800612c <_puts_r+0x88>
 8006174:	08006ac0 	.word	0x08006ac0
 8006178:	08006ae0 	.word	0x08006ae0
 800617c:	08006aa0 	.word	0x08006aa0

08006180 <puts>:
 8006180:	4b02      	ldr	r3, [pc, #8]	; (800618c <puts+0xc>)
 8006182:	4601      	mov	r1, r0
 8006184:	6818      	ldr	r0, [r3, #0]
 8006186:	f7ff bf8d 	b.w	80060a4 <_puts_r>
 800618a:	bf00      	nop
 800618c:	24000010 	.word	0x24000010

08006190 <__swbuf_r>:
 8006190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006192:	460e      	mov	r6, r1
 8006194:	4614      	mov	r4, r2
 8006196:	4605      	mov	r5, r0
 8006198:	b118      	cbz	r0, 80061a2 <__swbuf_r+0x12>
 800619a:	6983      	ldr	r3, [r0, #24]
 800619c:	b90b      	cbnz	r3, 80061a2 <__swbuf_r+0x12>
 800619e:	f000 f9d1 	bl	8006544 <__sinit>
 80061a2:	4b21      	ldr	r3, [pc, #132]	; (8006228 <__swbuf_r+0x98>)
 80061a4:	429c      	cmp	r4, r3
 80061a6:	d12b      	bne.n	8006200 <__swbuf_r+0x70>
 80061a8:	686c      	ldr	r4, [r5, #4]
 80061aa:	69a3      	ldr	r3, [r4, #24]
 80061ac:	60a3      	str	r3, [r4, #8]
 80061ae:	89a3      	ldrh	r3, [r4, #12]
 80061b0:	071a      	lsls	r2, r3, #28
 80061b2:	d52f      	bpl.n	8006214 <__swbuf_r+0x84>
 80061b4:	6923      	ldr	r3, [r4, #16]
 80061b6:	b36b      	cbz	r3, 8006214 <__swbuf_r+0x84>
 80061b8:	6923      	ldr	r3, [r4, #16]
 80061ba:	6820      	ldr	r0, [r4, #0]
 80061bc:	1ac0      	subs	r0, r0, r3
 80061be:	6963      	ldr	r3, [r4, #20]
 80061c0:	b2f6      	uxtb	r6, r6
 80061c2:	4283      	cmp	r3, r0
 80061c4:	4637      	mov	r7, r6
 80061c6:	dc04      	bgt.n	80061d2 <__swbuf_r+0x42>
 80061c8:	4621      	mov	r1, r4
 80061ca:	4628      	mov	r0, r5
 80061cc:	f000 f926 	bl	800641c <_fflush_r>
 80061d0:	bb30      	cbnz	r0, 8006220 <__swbuf_r+0x90>
 80061d2:	68a3      	ldr	r3, [r4, #8]
 80061d4:	3b01      	subs	r3, #1
 80061d6:	60a3      	str	r3, [r4, #8]
 80061d8:	6823      	ldr	r3, [r4, #0]
 80061da:	1c5a      	adds	r2, r3, #1
 80061dc:	6022      	str	r2, [r4, #0]
 80061de:	701e      	strb	r6, [r3, #0]
 80061e0:	6963      	ldr	r3, [r4, #20]
 80061e2:	3001      	adds	r0, #1
 80061e4:	4283      	cmp	r3, r0
 80061e6:	d004      	beq.n	80061f2 <__swbuf_r+0x62>
 80061e8:	89a3      	ldrh	r3, [r4, #12]
 80061ea:	07db      	lsls	r3, r3, #31
 80061ec:	d506      	bpl.n	80061fc <__swbuf_r+0x6c>
 80061ee:	2e0a      	cmp	r6, #10
 80061f0:	d104      	bne.n	80061fc <__swbuf_r+0x6c>
 80061f2:	4621      	mov	r1, r4
 80061f4:	4628      	mov	r0, r5
 80061f6:	f000 f911 	bl	800641c <_fflush_r>
 80061fa:	b988      	cbnz	r0, 8006220 <__swbuf_r+0x90>
 80061fc:	4638      	mov	r0, r7
 80061fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006200:	4b0a      	ldr	r3, [pc, #40]	; (800622c <__swbuf_r+0x9c>)
 8006202:	429c      	cmp	r4, r3
 8006204:	d101      	bne.n	800620a <__swbuf_r+0x7a>
 8006206:	68ac      	ldr	r4, [r5, #8]
 8006208:	e7cf      	b.n	80061aa <__swbuf_r+0x1a>
 800620a:	4b09      	ldr	r3, [pc, #36]	; (8006230 <__swbuf_r+0xa0>)
 800620c:	429c      	cmp	r4, r3
 800620e:	bf08      	it	eq
 8006210:	68ec      	ldreq	r4, [r5, #12]
 8006212:	e7ca      	b.n	80061aa <__swbuf_r+0x1a>
 8006214:	4621      	mov	r1, r4
 8006216:	4628      	mov	r0, r5
 8006218:	f000 f80c 	bl	8006234 <__swsetup_r>
 800621c:	2800      	cmp	r0, #0
 800621e:	d0cb      	beq.n	80061b8 <__swbuf_r+0x28>
 8006220:	f04f 37ff 	mov.w	r7, #4294967295
 8006224:	e7ea      	b.n	80061fc <__swbuf_r+0x6c>
 8006226:	bf00      	nop
 8006228:	08006ac0 	.word	0x08006ac0
 800622c:	08006ae0 	.word	0x08006ae0
 8006230:	08006aa0 	.word	0x08006aa0

08006234 <__swsetup_r>:
 8006234:	4b32      	ldr	r3, [pc, #200]	; (8006300 <__swsetup_r+0xcc>)
 8006236:	b570      	push	{r4, r5, r6, lr}
 8006238:	681d      	ldr	r5, [r3, #0]
 800623a:	4606      	mov	r6, r0
 800623c:	460c      	mov	r4, r1
 800623e:	b125      	cbz	r5, 800624a <__swsetup_r+0x16>
 8006240:	69ab      	ldr	r3, [r5, #24]
 8006242:	b913      	cbnz	r3, 800624a <__swsetup_r+0x16>
 8006244:	4628      	mov	r0, r5
 8006246:	f000 f97d 	bl	8006544 <__sinit>
 800624a:	4b2e      	ldr	r3, [pc, #184]	; (8006304 <__swsetup_r+0xd0>)
 800624c:	429c      	cmp	r4, r3
 800624e:	d10f      	bne.n	8006270 <__swsetup_r+0x3c>
 8006250:	686c      	ldr	r4, [r5, #4]
 8006252:	89a3      	ldrh	r3, [r4, #12]
 8006254:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006258:	0719      	lsls	r1, r3, #28
 800625a:	d42c      	bmi.n	80062b6 <__swsetup_r+0x82>
 800625c:	06dd      	lsls	r5, r3, #27
 800625e:	d411      	bmi.n	8006284 <__swsetup_r+0x50>
 8006260:	2309      	movs	r3, #9
 8006262:	6033      	str	r3, [r6, #0]
 8006264:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006268:	81a3      	strh	r3, [r4, #12]
 800626a:	f04f 30ff 	mov.w	r0, #4294967295
 800626e:	e03e      	b.n	80062ee <__swsetup_r+0xba>
 8006270:	4b25      	ldr	r3, [pc, #148]	; (8006308 <__swsetup_r+0xd4>)
 8006272:	429c      	cmp	r4, r3
 8006274:	d101      	bne.n	800627a <__swsetup_r+0x46>
 8006276:	68ac      	ldr	r4, [r5, #8]
 8006278:	e7eb      	b.n	8006252 <__swsetup_r+0x1e>
 800627a:	4b24      	ldr	r3, [pc, #144]	; (800630c <__swsetup_r+0xd8>)
 800627c:	429c      	cmp	r4, r3
 800627e:	bf08      	it	eq
 8006280:	68ec      	ldreq	r4, [r5, #12]
 8006282:	e7e6      	b.n	8006252 <__swsetup_r+0x1e>
 8006284:	0758      	lsls	r0, r3, #29
 8006286:	d512      	bpl.n	80062ae <__swsetup_r+0x7a>
 8006288:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800628a:	b141      	cbz	r1, 800629e <__swsetup_r+0x6a>
 800628c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006290:	4299      	cmp	r1, r3
 8006292:	d002      	beq.n	800629a <__swsetup_r+0x66>
 8006294:	4630      	mov	r0, r6
 8006296:	f000 fa59 	bl	800674c <_free_r>
 800629a:	2300      	movs	r3, #0
 800629c:	6363      	str	r3, [r4, #52]	; 0x34
 800629e:	89a3      	ldrh	r3, [r4, #12]
 80062a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80062a4:	81a3      	strh	r3, [r4, #12]
 80062a6:	2300      	movs	r3, #0
 80062a8:	6063      	str	r3, [r4, #4]
 80062aa:	6923      	ldr	r3, [r4, #16]
 80062ac:	6023      	str	r3, [r4, #0]
 80062ae:	89a3      	ldrh	r3, [r4, #12]
 80062b0:	f043 0308 	orr.w	r3, r3, #8
 80062b4:	81a3      	strh	r3, [r4, #12]
 80062b6:	6923      	ldr	r3, [r4, #16]
 80062b8:	b94b      	cbnz	r3, 80062ce <__swsetup_r+0x9a>
 80062ba:	89a3      	ldrh	r3, [r4, #12]
 80062bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80062c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062c4:	d003      	beq.n	80062ce <__swsetup_r+0x9a>
 80062c6:	4621      	mov	r1, r4
 80062c8:	4630      	mov	r0, r6
 80062ca:	f000 f9ff 	bl	80066cc <__smakebuf_r>
 80062ce:	89a0      	ldrh	r0, [r4, #12]
 80062d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80062d4:	f010 0301 	ands.w	r3, r0, #1
 80062d8:	d00a      	beq.n	80062f0 <__swsetup_r+0xbc>
 80062da:	2300      	movs	r3, #0
 80062dc:	60a3      	str	r3, [r4, #8]
 80062de:	6963      	ldr	r3, [r4, #20]
 80062e0:	425b      	negs	r3, r3
 80062e2:	61a3      	str	r3, [r4, #24]
 80062e4:	6923      	ldr	r3, [r4, #16]
 80062e6:	b943      	cbnz	r3, 80062fa <__swsetup_r+0xc6>
 80062e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80062ec:	d1ba      	bne.n	8006264 <__swsetup_r+0x30>
 80062ee:	bd70      	pop	{r4, r5, r6, pc}
 80062f0:	0781      	lsls	r1, r0, #30
 80062f2:	bf58      	it	pl
 80062f4:	6963      	ldrpl	r3, [r4, #20]
 80062f6:	60a3      	str	r3, [r4, #8]
 80062f8:	e7f4      	b.n	80062e4 <__swsetup_r+0xb0>
 80062fa:	2000      	movs	r0, #0
 80062fc:	e7f7      	b.n	80062ee <__swsetup_r+0xba>
 80062fe:	bf00      	nop
 8006300:	24000010 	.word	0x24000010
 8006304:	08006ac0 	.word	0x08006ac0
 8006308:	08006ae0 	.word	0x08006ae0
 800630c:	08006aa0 	.word	0x08006aa0

08006310 <__sflush_r>:
 8006310:	898a      	ldrh	r2, [r1, #12]
 8006312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006316:	4605      	mov	r5, r0
 8006318:	0710      	lsls	r0, r2, #28
 800631a:	460c      	mov	r4, r1
 800631c:	d458      	bmi.n	80063d0 <__sflush_r+0xc0>
 800631e:	684b      	ldr	r3, [r1, #4]
 8006320:	2b00      	cmp	r3, #0
 8006322:	dc05      	bgt.n	8006330 <__sflush_r+0x20>
 8006324:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006326:	2b00      	cmp	r3, #0
 8006328:	dc02      	bgt.n	8006330 <__sflush_r+0x20>
 800632a:	2000      	movs	r0, #0
 800632c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006330:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006332:	2e00      	cmp	r6, #0
 8006334:	d0f9      	beq.n	800632a <__sflush_r+0x1a>
 8006336:	2300      	movs	r3, #0
 8006338:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800633c:	682f      	ldr	r7, [r5, #0]
 800633e:	602b      	str	r3, [r5, #0]
 8006340:	d032      	beq.n	80063a8 <__sflush_r+0x98>
 8006342:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006344:	89a3      	ldrh	r3, [r4, #12]
 8006346:	075a      	lsls	r2, r3, #29
 8006348:	d505      	bpl.n	8006356 <__sflush_r+0x46>
 800634a:	6863      	ldr	r3, [r4, #4]
 800634c:	1ac0      	subs	r0, r0, r3
 800634e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006350:	b10b      	cbz	r3, 8006356 <__sflush_r+0x46>
 8006352:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006354:	1ac0      	subs	r0, r0, r3
 8006356:	2300      	movs	r3, #0
 8006358:	4602      	mov	r2, r0
 800635a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800635c:	6a21      	ldr	r1, [r4, #32]
 800635e:	4628      	mov	r0, r5
 8006360:	47b0      	blx	r6
 8006362:	1c43      	adds	r3, r0, #1
 8006364:	89a3      	ldrh	r3, [r4, #12]
 8006366:	d106      	bne.n	8006376 <__sflush_r+0x66>
 8006368:	6829      	ldr	r1, [r5, #0]
 800636a:	291d      	cmp	r1, #29
 800636c:	d82c      	bhi.n	80063c8 <__sflush_r+0xb8>
 800636e:	4a2a      	ldr	r2, [pc, #168]	; (8006418 <__sflush_r+0x108>)
 8006370:	40ca      	lsrs	r2, r1
 8006372:	07d6      	lsls	r6, r2, #31
 8006374:	d528      	bpl.n	80063c8 <__sflush_r+0xb8>
 8006376:	2200      	movs	r2, #0
 8006378:	6062      	str	r2, [r4, #4]
 800637a:	04d9      	lsls	r1, r3, #19
 800637c:	6922      	ldr	r2, [r4, #16]
 800637e:	6022      	str	r2, [r4, #0]
 8006380:	d504      	bpl.n	800638c <__sflush_r+0x7c>
 8006382:	1c42      	adds	r2, r0, #1
 8006384:	d101      	bne.n	800638a <__sflush_r+0x7a>
 8006386:	682b      	ldr	r3, [r5, #0]
 8006388:	b903      	cbnz	r3, 800638c <__sflush_r+0x7c>
 800638a:	6560      	str	r0, [r4, #84]	; 0x54
 800638c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800638e:	602f      	str	r7, [r5, #0]
 8006390:	2900      	cmp	r1, #0
 8006392:	d0ca      	beq.n	800632a <__sflush_r+0x1a>
 8006394:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006398:	4299      	cmp	r1, r3
 800639a:	d002      	beq.n	80063a2 <__sflush_r+0x92>
 800639c:	4628      	mov	r0, r5
 800639e:	f000 f9d5 	bl	800674c <_free_r>
 80063a2:	2000      	movs	r0, #0
 80063a4:	6360      	str	r0, [r4, #52]	; 0x34
 80063a6:	e7c1      	b.n	800632c <__sflush_r+0x1c>
 80063a8:	6a21      	ldr	r1, [r4, #32]
 80063aa:	2301      	movs	r3, #1
 80063ac:	4628      	mov	r0, r5
 80063ae:	47b0      	blx	r6
 80063b0:	1c41      	adds	r1, r0, #1
 80063b2:	d1c7      	bne.n	8006344 <__sflush_r+0x34>
 80063b4:	682b      	ldr	r3, [r5, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d0c4      	beq.n	8006344 <__sflush_r+0x34>
 80063ba:	2b1d      	cmp	r3, #29
 80063bc:	d001      	beq.n	80063c2 <__sflush_r+0xb2>
 80063be:	2b16      	cmp	r3, #22
 80063c0:	d101      	bne.n	80063c6 <__sflush_r+0xb6>
 80063c2:	602f      	str	r7, [r5, #0]
 80063c4:	e7b1      	b.n	800632a <__sflush_r+0x1a>
 80063c6:	89a3      	ldrh	r3, [r4, #12]
 80063c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063cc:	81a3      	strh	r3, [r4, #12]
 80063ce:	e7ad      	b.n	800632c <__sflush_r+0x1c>
 80063d0:	690f      	ldr	r7, [r1, #16]
 80063d2:	2f00      	cmp	r7, #0
 80063d4:	d0a9      	beq.n	800632a <__sflush_r+0x1a>
 80063d6:	0793      	lsls	r3, r2, #30
 80063d8:	680e      	ldr	r6, [r1, #0]
 80063da:	bf08      	it	eq
 80063dc:	694b      	ldreq	r3, [r1, #20]
 80063de:	600f      	str	r7, [r1, #0]
 80063e0:	bf18      	it	ne
 80063e2:	2300      	movne	r3, #0
 80063e4:	eba6 0807 	sub.w	r8, r6, r7
 80063e8:	608b      	str	r3, [r1, #8]
 80063ea:	f1b8 0f00 	cmp.w	r8, #0
 80063ee:	dd9c      	ble.n	800632a <__sflush_r+0x1a>
 80063f0:	6a21      	ldr	r1, [r4, #32]
 80063f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80063f4:	4643      	mov	r3, r8
 80063f6:	463a      	mov	r2, r7
 80063f8:	4628      	mov	r0, r5
 80063fa:	47b0      	blx	r6
 80063fc:	2800      	cmp	r0, #0
 80063fe:	dc06      	bgt.n	800640e <__sflush_r+0xfe>
 8006400:	89a3      	ldrh	r3, [r4, #12]
 8006402:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006406:	81a3      	strh	r3, [r4, #12]
 8006408:	f04f 30ff 	mov.w	r0, #4294967295
 800640c:	e78e      	b.n	800632c <__sflush_r+0x1c>
 800640e:	4407      	add	r7, r0
 8006410:	eba8 0800 	sub.w	r8, r8, r0
 8006414:	e7e9      	b.n	80063ea <__sflush_r+0xda>
 8006416:	bf00      	nop
 8006418:	20400001 	.word	0x20400001

0800641c <_fflush_r>:
 800641c:	b538      	push	{r3, r4, r5, lr}
 800641e:	690b      	ldr	r3, [r1, #16]
 8006420:	4605      	mov	r5, r0
 8006422:	460c      	mov	r4, r1
 8006424:	b913      	cbnz	r3, 800642c <_fflush_r+0x10>
 8006426:	2500      	movs	r5, #0
 8006428:	4628      	mov	r0, r5
 800642a:	bd38      	pop	{r3, r4, r5, pc}
 800642c:	b118      	cbz	r0, 8006436 <_fflush_r+0x1a>
 800642e:	6983      	ldr	r3, [r0, #24]
 8006430:	b90b      	cbnz	r3, 8006436 <_fflush_r+0x1a>
 8006432:	f000 f887 	bl	8006544 <__sinit>
 8006436:	4b14      	ldr	r3, [pc, #80]	; (8006488 <_fflush_r+0x6c>)
 8006438:	429c      	cmp	r4, r3
 800643a:	d11b      	bne.n	8006474 <_fflush_r+0x58>
 800643c:	686c      	ldr	r4, [r5, #4]
 800643e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d0ef      	beq.n	8006426 <_fflush_r+0xa>
 8006446:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006448:	07d0      	lsls	r0, r2, #31
 800644a:	d404      	bmi.n	8006456 <_fflush_r+0x3a>
 800644c:	0599      	lsls	r1, r3, #22
 800644e:	d402      	bmi.n	8006456 <_fflush_r+0x3a>
 8006450:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006452:	f000 f915 	bl	8006680 <__retarget_lock_acquire_recursive>
 8006456:	4628      	mov	r0, r5
 8006458:	4621      	mov	r1, r4
 800645a:	f7ff ff59 	bl	8006310 <__sflush_r>
 800645e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006460:	07da      	lsls	r2, r3, #31
 8006462:	4605      	mov	r5, r0
 8006464:	d4e0      	bmi.n	8006428 <_fflush_r+0xc>
 8006466:	89a3      	ldrh	r3, [r4, #12]
 8006468:	059b      	lsls	r3, r3, #22
 800646a:	d4dd      	bmi.n	8006428 <_fflush_r+0xc>
 800646c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800646e:	f000 f908 	bl	8006682 <__retarget_lock_release_recursive>
 8006472:	e7d9      	b.n	8006428 <_fflush_r+0xc>
 8006474:	4b05      	ldr	r3, [pc, #20]	; (800648c <_fflush_r+0x70>)
 8006476:	429c      	cmp	r4, r3
 8006478:	d101      	bne.n	800647e <_fflush_r+0x62>
 800647a:	68ac      	ldr	r4, [r5, #8]
 800647c:	e7df      	b.n	800643e <_fflush_r+0x22>
 800647e:	4b04      	ldr	r3, [pc, #16]	; (8006490 <_fflush_r+0x74>)
 8006480:	429c      	cmp	r4, r3
 8006482:	bf08      	it	eq
 8006484:	68ec      	ldreq	r4, [r5, #12]
 8006486:	e7da      	b.n	800643e <_fflush_r+0x22>
 8006488:	08006ac0 	.word	0x08006ac0
 800648c:	08006ae0 	.word	0x08006ae0
 8006490:	08006aa0 	.word	0x08006aa0

08006494 <std>:
 8006494:	2300      	movs	r3, #0
 8006496:	b510      	push	{r4, lr}
 8006498:	4604      	mov	r4, r0
 800649a:	e9c0 3300 	strd	r3, r3, [r0]
 800649e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80064a2:	6083      	str	r3, [r0, #8]
 80064a4:	8181      	strh	r1, [r0, #12]
 80064a6:	6643      	str	r3, [r0, #100]	; 0x64
 80064a8:	81c2      	strh	r2, [r0, #14]
 80064aa:	6183      	str	r3, [r0, #24]
 80064ac:	4619      	mov	r1, r3
 80064ae:	2208      	movs	r2, #8
 80064b0:	305c      	adds	r0, #92	; 0x5c
 80064b2:	f7ff fdef 	bl	8006094 <memset>
 80064b6:	4b05      	ldr	r3, [pc, #20]	; (80064cc <std+0x38>)
 80064b8:	6263      	str	r3, [r4, #36]	; 0x24
 80064ba:	4b05      	ldr	r3, [pc, #20]	; (80064d0 <std+0x3c>)
 80064bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80064be:	4b05      	ldr	r3, [pc, #20]	; (80064d4 <std+0x40>)
 80064c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80064c2:	4b05      	ldr	r3, [pc, #20]	; (80064d8 <std+0x44>)
 80064c4:	6224      	str	r4, [r4, #32]
 80064c6:	6323      	str	r3, [r4, #48]	; 0x30
 80064c8:	bd10      	pop	{r4, pc}
 80064ca:	bf00      	nop
 80064cc:	080068c1 	.word	0x080068c1
 80064d0:	080068e3 	.word	0x080068e3
 80064d4:	0800691b 	.word	0x0800691b
 80064d8:	0800693f 	.word	0x0800693f

080064dc <_cleanup_r>:
 80064dc:	4901      	ldr	r1, [pc, #4]	; (80064e4 <_cleanup_r+0x8>)
 80064de:	f000 b8af 	b.w	8006640 <_fwalk_reent>
 80064e2:	bf00      	nop
 80064e4:	0800641d 	.word	0x0800641d

080064e8 <__sfmoreglue>:
 80064e8:	b570      	push	{r4, r5, r6, lr}
 80064ea:	1e4a      	subs	r2, r1, #1
 80064ec:	2568      	movs	r5, #104	; 0x68
 80064ee:	4355      	muls	r5, r2
 80064f0:	460e      	mov	r6, r1
 80064f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80064f6:	f000 f979 	bl	80067ec <_malloc_r>
 80064fa:	4604      	mov	r4, r0
 80064fc:	b140      	cbz	r0, 8006510 <__sfmoreglue+0x28>
 80064fe:	2100      	movs	r1, #0
 8006500:	e9c0 1600 	strd	r1, r6, [r0]
 8006504:	300c      	adds	r0, #12
 8006506:	60a0      	str	r0, [r4, #8]
 8006508:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800650c:	f7ff fdc2 	bl	8006094 <memset>
 8006510:	4620      	mov	r0, r4
 8006512:	bd70      	pop	{r4, r5, r6, pc}

08006514 <__sfp_lock_acquire>:
 8006514:	4801      	ldr	r0, [pc, #4]	; (800651c <__sfp_lock_acquire+0x8>)
 8006516:	f000 b8b3 	b.w	8006680 <__retarget_lock_acquire_recursive>
 800651a:	bf00      	nop
 800651c:	240001c8 	.word	0x240001c8

08006520 <__sfp_lock_release>:
 8006520:	4801      	ldr	r0, [pc, #4]	; (8006528 <__sfp_lock_release+0x8>)
 8006522:	f000 b8ae 	b.w	8006682 <__retarget_lock_release_recursive>
 8006526:	bf00      	nop
 8006528:	240001c8 	.word	0x240001c8

0800652c <__sinit_lock_acquire>:
 800652c:	4801      	ldr	r0, [pc, #4]	; (8006534 <__sinit_lock_acquire+0x8>)
 800652e:	f000 b8a7 	b.w	8006680 <__retarget_lock_acquire_recursive>
 8006532:	bf00      	nop
 8006534:	240001c3 	.word	0x240001c3

08006538 <__sinit_lock_release>:
 8006538:	4801      	ldr	r0, [pc, #4]	; (8006540 <__sinit_lock_release+0x8>)
 800653a:	f000 b8a2 	b.w	8006682 <__retarget_lock_release_recursive>
 800653e:	bf00      	nop
 8006540:	240001c3 	.word	0x240001c3

08006544 <__sinit>:
 8006544:	b510      	push	{r4, lr}
 8006546:	4604      	mov	r4, r0
 8006548:	f7ff fff0 	bl	800652c <__sinit_lock_acquire>
 800654c:	69a3      	ldr	r3, [r4, #24]
 800654e:	b11b      	cbz	r3, 8006558 <__sinit+0x14>
 8006550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006554:	f7ff bff0 	b.w	8006538 <__sinit_lock_release>
 8006558:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800655c:	6523      	str	r3, [r4, #80]	; 0x50
 800655e:	4b13      	ldr	r3, [pc, #76]	; (80065ac <__sinit+0x68>)
 8006560:	4a13      	ldr	r2, [pc, #76]	; (80065b0 <__sinit+0x6c>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	62a2      	str	r2, [r4, #40]	; 0x28
 8006566:	42a3      	cmp	r3, r4
 8006568:	bf04      	itt	eq
 800656a:	2301      	moveq	r3, #1
 800656c:	61a3      	streq	r3, [r4, #24]
 800656e:	4620      	mov	r0, r4
 8006570:	f000 f820 	bl	80065b4 <__sfp>
 8006574:	6060      	str	r0, [r4, #4]
 8006576:	4620      	mov	r0, r4
 8006578:	f000 f81c 	bl	80065b4 <__sfp>
 800657c:	60a0      	str	r0, [r4, #8]
 800657e:	4620      	mov	r0, r4
 8006580:	f000 f818 	bl	80065b4 <__sfp>
 8006584:	2200      	movs	r2, #0
 8006586:	60e0      	str	r0, [r4, #12]
 8006588:	2104      	movs	r1, #4
 800658a:	6860      	ldr	r0, [r4, #4]
 800658c:	f7ff ff82 	bl	8006494 <std>
 8006590:	68a0      	ldr	r0, [r4, #8]
 8006592:	2201      	movs	r2, #1
 8006594:	2109      	movs	r1, #9
 8006596:	f7ff ff7d 	bl	8006494 <std>
 800659a:	68e0      	ldr	r0, [r4, #12]
 800659c:	2202      	movs	r2, #2
 800659e:	2112      	movs	r1, #18
 80065a0:	f7ff ff78 	bl	8006494 <std>
 80065a4:	2301      	movs	r3, #1
 80065a6:	61a3      	str	r3, [r4, #24]
 80065a8:	e7d2      	b.n	8006550 <__sinit+0xc>
 80065aa:	bf00      	nop
 80065ac:	08006a9c 	.word	0x08006a9c
 80065b0:	080064dd 	.word	0x080064dd

080065b4 <__sfp>:
 80065b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065b6:	4607      	mov	r7, r0
 80065b8:	f7ff ffac 	bl	8006514 <__sfp_lock_acquire>
 80065bc:	4b1e      	ldr	r3, [pc, #120]	; (8006638 <__sfp+0x84>)
 80065be:	681e      	ldr	r6, [r3, #0]
 80065c0:	69b3      	ldr	r3, [r6, #24]
 80065c2:	b913      	cbnz	r3, 80065ca <__sfp+0x16>
 80065c4:	4630      	mov	r0, r6
 80065c6:	f7ff ffbd 	bl	8006544 <__sinit>
 80065ca:	3648      	adds	r6, #72	; 0x48
 80065cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80065d0:	3b01      	subs	r3, #1
 80065d2:	d503      	bpl.n	80065dc <__sfp+0x28>
 80065d4:	6833      	ldr	r3, [r6, #0]
 80065d6:	b30b      	cbz	r3, 800661c <__sfp+0x68>
 80065d8:	6836      	ldr	r6, [r6, #0]
 80065da:	e7f7      	b.n	80065cc <__sfp+0x18>
 80065dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80065e0:	b9d5      	cbnz	r5, 8006618 <__sfp+0x64>
 80065e2:	4b16      	ldr	r3, [pc, #88]	; (800663c <__sfp+0x88>)
 80065e4:	60e3      	str	r3, [r4, #12]
 80065e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80065ea:	6665      	str	r5, [r4, #100]	; 0x64
 80065ec:	f000 f847 	bl	800667e <__retarget_lock_init_recursive>
 80065f0:	f7ff ff96 	bl	8006520 <__sfp_lock_release>
 80065f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80065f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80065fc:	6025      	str	r5, [r4, #0]
 80065fe:	61a5      	str	r5, [r4, #24]
 8006600:	2208      	movs	r2, #8
 8006602:	4629      	mov	r1, r5
 8006604:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006608:	f7ff fd44 	bl	8006094 <memset>
 800660c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006610:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006614:	4620      	mov	r0, r4
 8006616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006618:	3468      	adds	r4, #104	; 0x68
 800661a:	e7d9      	b.n	80065d0 <__sfp+0x1c>
 800661c:	2104      	movs	r1, #4
 800661e:	4638      	mov	r0, r7
 8006620:	f7ff ff62 	bl	80064e8 <__sfmoreglue>
 8006624:	4604      	mov	r4, r0
 8006626:	6030      	str	r0, [r6, #0]
 8006628:	2800      	cmp	r0, #0
 800662a:	d1d5      	bne.n	80065d8 <__sfp+0x24>
 800662c:	f7ff ff78 	bl	8006520 <__sfp_lock_release>
 8006630:	230c      	movs	r3, #12
 8006632:	603b      	str	r3, [r7, #0]
 8006634:	e7ee      	b.n	8006614 <__sfp+0x60>
 8006636:	bf00      	nop
 8006638:	08006a9c 	.word	0x08006a9c
 800663c:	ffff0001 	.word	0xffff0001

08006640 <_fwalk_reent>:
 8006640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006644:	4606      	mov	r6, r0
 8006646:	4688      	mov	r8, r1
 8006648:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800664c:	2700      	movs	r7, #0
 800664e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006652:	f1b9 0901 	subs.w	r9, r9, #1
 8006656:	d505      	bpl.n	8006664 <_fwalk_reent+0x24>
 8006658:	6824      	ldr	r4, [r4, #0]
 800665a:	2c00      	cmp	r4, #0
 800665c:	d1f7      	bne.n	800664e <_fwalk_reent+0xe>
 800665e:	4638      	mov	r0, r7
 8006660:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006664:	89ab      	ldrh	r3, [r5, #12]
 8006666:	2b01      	cmp	r3, #1
 8006668:	d907      	bls.n	800667a <_fwalk_reent+0x3a>
 800666a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800666e:	3301      	adds	r3, #1
 8006670:	d003      	beq.n	800667a <_fwalk_reent+0x3a>
 8006672:	4629      	mov	r1, r5
 8006674:	4630      	mov	r0, r6
 8006676:	47c0      	blx	r8
 8006678:	4307      	orrs	r7, r0
 800667a:	3568      	adds	r5, #104	; 0x68
 800667c:	e7e9      	b.n	8006652 <_fwalk_reent+0x12>

0800667e <__retarget_lock_init_recursive>:
 800667e:	4770      	bx	lr

08006680 <__retarget_lock_acquire_recursive>:
 8006680:	4770      	bx	lr

08006682 <__retarget_lock_release_recursive>:
 8006682:	4770      	bx	lr

08006684 <__swhatbuf_r>:
 8006684:	b570      	push	{r4, r5, r6, lr}
 8006686:	460e      	mov	r6, r1
 8006688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800668c:	2900      	cmp	r1, #0
 800668e:	b096      	sub	sp, #88	; 0x58
 8006690:	4614      	mov	r4, r2
 8006692:	461d      	mov	r5, r3
 8006694:	da07      	bge.n	80066a6 <__swhatbuf_r+0x22>
 8006696:	2300      	movs	r3, #0
 8006698:	602b      	str	r3, [r5, #0]
 800669a:	89b3      	ldrh	r3, [r6, #12]
 800669c:	061a      	lsls	r2, r3, #24
 800669e:	d410      	bmi.n	80066c2 <__swhatbuf_r+0x3e>
 80066a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066a4:	e00e      	b.n	80066c4 <__swhatbuf_r+0x40>
 80066a6:	466a      	mov	r2, sp
 80066a8:	f000 f970 	bl	800698c <_fstat_r>
 80066ac:	2800      	cmp	r0, #0
 80066ae:	dbf2      	blt.n	8006696 <__swhatbuf_r+0x12>
 80066b0:	9a01      	ldr	r2, [sp, #4]
 80066b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80066b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80066ba:	425a      	negs	r2, r3
 80066bc:	415a      	adcs	r2, r3
 80066be:	602a      	str	r2, [r5, #0]
 80066c0:	e7ee      	b.n	80066a0 <__swhatbuf_r+0x1c>
 80066c2:	2340      	movs	r3, #64	; 0x40
 80066c4:	2000      	movs	r0, #0
 80066c6:	6023      	str	r3, [r4, #0]
 80066c8:	b016      	add	sp, #88	; 0x58
 80066ca:	bd70      	pop	{r4, r5, r6, pc}

080066cc <__smakebuf_r>:
 80066cc:	898b      	ldrh	r3, [r1, #12]
 80066ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80066d0:	079d      	lsls	r5, r3, #30
 80066d2:	4606      	mov	r6, r0
 80066d4:	460c      	mov	r4, r1
 80066d6:	d507      	bpl.n	80066e8 <__smakebuf_r+0x1c>
 80066d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80066dc:	6023      	str	r3, [r4, #0]
 80066de:	6123      	str	r3, [r4, #16]
 80066e0:	2301      	movs	r3, #1
 80066e2:	6163      	str	r3, [r4, #20]
 80066e4:	b002      	add	sp, #8
 80066e6:	bd70      	pop	{r4, r5, r6, pc}
 80066e8:	ab01      	add	r3, sp, #4
 80066ea:	466a      	mov	r2, sp
 80066ec:	f7ff ffca 	bl	8006684 <__swhatbuf_r>
 80066f0:	9900      	ldr	r1, [sp, #0]
 80066f2:	4605      	mov	r5, r0
 80066f4:	4630      	mov	r0, r6
 80066f6:	f000 f879 	bl	80067ec <_malloc_r>
 80066fa:	b948      	cbnz	r0, 8006710 <__smakebuf_r+0x44>
 80066fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006700:	059a      	lsls	r2, r3, #22
 8006702:	d4ef      	bmi.n	80066e4 <__smakebuf_r+0x18>
 8006704:	f023 0303 	bic.w	r3, r3, #3
 8006708:	f043 0302 	orr.w	r3, r3, #2
 800670c:	81a3      	strh	r3, [r4, #12]
 800670e:	e7e3      	b.n	80066d8 <__smakebuf_r+0xc>
 8006710:	4b0d      	ldr	r3, [pc, #52]	; (8006748 <__smakebuf_r+0x7c>)
 8006712:	62b3      	str	r3, [r6, #40]	; 0x28
 8006714:	89a3      	ldrh	r3, [r4, #12]
 8006716:	6020      	str	r0, [r4, #0]
 8006718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800671c:	81a3      	strh	r3, [r4, #12]
 800671e:	9b00      	ldr	r3, [sp, #0]
 8006720:	6163      	str	r3, [r4, #20]
 8006722:	9b01      	ldr	r3, [sp, #4]
 8006724:	6120      	str	r0, [r4, #16]
 8006726:	b15b      	cbz	r3, 8006740 <__smakebuf_r+0x74>
 8006728:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800672c:	4630      	mov	r0, r6
 800672e:	f000 f93f 	bl	80069b0 <_isatty_r>
 8006732:	b128      	cbz	r0, 8006740 <__smakebuf_r+0x74>
 8006734:	89a3      	ldrh	r3, [r4, #12]
 8006736:	f023 0303 	bic.w	r3, r3, #3
 800673a:	f043 0301 	orr.w	r3, r3, #1
 800673e:	81a3      	strh	r3, [r4, #12]
 8006740:	89a0      	ldrh	r0, [r4, #12]
 8006742:	4305      	orrs	r5, r0
 8006744:	81a5      	strh	r5, [r4, #12]
 8006746:	e7cd      	b.n	80066e4 <__smakebuf_r+0x18>
 8006748:	080064dd 	.word	0x080064dd

0800674c <_free_r>:
 800674c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800674e:	2900      	cmp	r1, #0
 8006750:	d048      	beq.n	80067e4 <_free_r+0x98>
 8006752:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006756:	9001      	str	r0, [sp, #4]
 8006758:	2b00      	cmp	r3, #0
 800675a:	f1a1 0404 	sub.w	r4, r1, #4
 800675e:	bfb8      	it	lt
 8006760:	18e4      	addlt	r4, r4, r3
 8006762:	f000 f947 	bl	80069f4 <__malloc_lock>
 8006766:	4a20      	ldr	r2, [pc, #128]	; (80067e8 <_free_r+0x9c>)
 8006768:	9801      	ldr	r0, [sp, #4]
 800676a:	6813      	ldr	r3, [r2, #0]
 800676c:	4615      	mov	r5, r2
 800676e:	b933      	cbnz	r3, 800677e <_free_r+0x32>
 8006770:	6063      	str	r3, [r4, #4]
 8006772:	6014      	str	r4, [r2, #0]
 8006774:	b003      	add	sp, #12
 8006776:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800677a:	f000 b941 	b.w	8006a00 <__malloc_unlock>
 800677e:	42a3      	cmp	r3, r4
 8006780:	d90b      	bls.n	800679a <_free_r+0x4e>
 8006782:	6821      	ldr	r1, [r4, #0]
 8006784:	1862      	adds	r2, r4, r1
 8006786:	4293      	cmp	r3, r2
 8006788:	bf04      	itt	eq
 800678a:	681a      	ldreq	r2, [r3, #0]
 800678c:	685b      	ldreq	r3, [r3, #4]
 800678e:	6063      	str	r3, [r4, #4]
 8006790:	bf04      	itt	eq
 8006792:	1852      	addeq	r2, r2, r1
 8006794:	6022      	streq	r2, [r4, #0]
 8006796:	602c      	str	r4, [r5, #0]
 8006798:	e7ec      	b.n	8006774 <_free_r+0x28>
 800679a:	461a      	mov	r2, r3
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	b10b      	cbz	r3, 80067a4 <_free_r+0x58>
 80067a0:	42a3      	cmp	r3, r4
 80067a2:	d9fa      	bls.n	800679a <_free_r+0x4e>
 80067a4:	6811      	ldr	r1, [r2, #0]
 80067a6:	1855      	adds	r5, r2, r1
 80067a8:	42a5      	cmp	r5, r4
 80067aa:	d10b      	bne.n	80067c4 <_free_r+0x78>
 80067ac:	6824      	ldr	r4, [r4, #0]
 80067ae:	4421      	add	r1, r4
 80067b0:	1854      	adds	r4, r2, r1
 80067b2:	42a3      	cmp	r3, r4
 80067b4:	6011      	str	r1, [r2, #0]
 80067b6:	d1dd      	bne.n	8006774 <_free_r+0x28>
 80067b8:	681c      	ldr	r4, [r3, #0]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	6053      	str	r3, [r2, #4]
 80067be:	4421      	add	r1, r4
 80067c0:	6011      	str	r1, [r2, #0]
 80067c2:	e7d7      	b.n	8006774 <_free_r+0x28>
 80067c4:	d902      	bls.n	80067cc <_free_r+0x80>
 80067c6:	230c      	movs	r3, #12
 80067c8:	6003      	str	r3, [r0, #0]
 80067ca:	e7d3      	b.n	8006774 <_free_r+0x28>
 80067cc:	6825      	ldr	r5, [r4, #0]
 80067ce:	1961      	adds	r1, r4, r5
 80067d0:	428b      	cmp	r3, r1
 80067d2:	bf04      	itt	eq
 80067d4:	6819      	ldreq	r1, [r3, #0]
 80067d6:	685b      	ldreq	r3, [r3, #4]
 80067d8:	6063      	str	r3, [r4, #4]
 80067da:	bf04      	itt	eq
 80067dc:	1949      	addeq	r1, r1, r5
 80067de:	6021      	streq	r1, [r4, #0]
 80067e0:	6054      	str	r4, [r2, #4]
 80067e2:	e7c7      	b.n	8006774 <_free_r+0x28>
 80067e4:	b003      	add	sp, #12
 80067e6:	bd30      	pop	{r4, r5, pc}
 80067e8:	24000094 	.word	0x24000094

080067ec <_malloc_r>:
 80067ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ee:	1ccd      	adds	r5, r1, #3
 80067f0:	f025 0503 	bic.w	r5, r5, #3
 80067f4:	3508      	adds	r5, #8
 80067f6:	2d0c      	cmp	r5, #12
 80067f8:	bf38      	it	cc
 80067fa:	250c      	movcc	r5, #12
 80067fc:	2d00      	cmp	r5, #0
 80067fe:	4606      	mov	r6, r0
 8006800:	db01      	blt.n	8006806 <_malloc_r+0x1a>
 8006802:	42a9      	cmp	r1, r5
 8006804:	d903      	bls.n	800680e <_malloc_r+0x22>
 8006806:	230c      	movs	r3, #12
 8006808:	6033      	str	r3, [r6, #0]
 800680a:	2000      	movs	r0, #0
 800680c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800680e:	f000 f8f1 	bl	80069f4 <__malloc_lock>
 8006812:	4921      	ldr	r1, [pc, #132]	; (8006898 <_malloc_r+0xac>)
 8006814:	680a      	ldr	r2, [r1, #0]
 8006816:	4614      	mov	r4, r2
 8006818:	b99c      	cbnz	r4, 8006842 <_malloc_r+0x56>
 800681a:	4f20      	ldr	r7, [pc, #128]	; (800689c <_malloc_r+0xb0>)
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	b923      	cbnz	r3, 800682a <_malloc_r+0x3e>
 8006820:	4621      	mov	r1, r4
 8006822:	4630      	mov	r0, r6
 8006824:	f000 f83c 	bl	80068a0 <_sbrk_r>
 8006828:	6038      	str	r0, [r7, #0]
 800682a:	4629      	mov	r1, r5
 800682c:	4630      	mov	r0, r6
 800682e:	f000 f837 	bl	80068a0 <_sbrk_r>
 8006832:	1c43      	adds	r3, r0, #1
 8006834:	d123      	bne.n	800687e <_malloc_r+0x92>
 8006836:	230c      	movs	r3, #12
 8006838:	6033      	str	r3, [r6, #0]
 800683a:	4630      	mov	r0, r6
 800683c:	f000 f8e0 	bl	8006a00 <__malloc_unlock>
 8006840:	e7e3      	b.n	800680a <_malloc_r+0x1e>
 8006842:	6823      	ldr	r3, [r4, #0]
 8006844:	1b5b      	subs	r3, r3, r5
 8006846:	d417      	bmi.n	8006878 <_malloc_r+0x8c>
 8006848:	2b0b      	cmp	r3, #11
 800684a:	d903      	bls.n	8006854 <_malloc_r+0x68>
 800684c:	6023      	str	r3, [r4, #0]
 800684e:	441c      	add	r4, r3
 8006850:	6025      	str	r5, [r4, #0]
 8006852:	e004      	b.n	800685e <_malloc_r+0x72>
 8006854:	6863      	ldr	r3, [r4, #4]
 8006856:	42a2      	cmp	r2, r4
 8006858:	bf0c      	ite	eq
 800685a:	600b      	streq	r3, [r1, #0]
 800685c:	6053      	strne	r3, [r2, #4]
 800685e:	4630      	mov	r0, r6
 8006860:	f000 f8ce 	bl	8006a00 <__malloc_unlock>
 8006864:	f104 000b 	add.w	r0, r4, #11
 8006868:	1d23      	adds	r3, r4, #4
 800686a:	f020 0007 	bic.w	r0, r0, #7
 800686e:	1ac2      	subs	r2, r0, r3
 8006870:	d0cc      	beq.n	800680c <_malloc_r+0x20>
 8006872:	1a1b      	subs	r3, r3, r0
 8006874:	50a3      	str	r3, [r4, r2]
 8006876:	e7c9      	b.n	800680c <_malloc_r+0x20>
 8006878:	4622      	mov	r2, r4
 800687a:	6864      	ldr	r4, [r4, #4]
 800687c:	e7cc      	b.n	8006818 <_malloc_r+0x2c>
 800687e:	1cc4      	adds	r4, r0, #3
 8006880:	f024 0403 	bic.w	r4, r4, #3
 8006884:	42a0      	cmp	r0, r4
 8006886:	d0e3      	beq.n	8006850 <_malloc_r+0x64>
 8006888:	1a21      	subs	r1, r4, r0
 800688a:	4630      	mov	r0, r6
 800688c:	f000 f808 	bl	80068a0 <_sbrk_r>
 8006890:	3001      	adds	r0, #1
 8006892:	d1dd      	bne.n	8006850 <_malloc_r+0x64>
 8006894:	e7cf      	b.n	8006836 <_malloc_r+0x4a>
 8006896:	bf00      	nop
 8006898:	24000094 	.word	0x24000094
 800689c:	24000098 	.word	0x24000098

080068a0 <_sbrk_r>:
 80068a0:	b538      	push	{r3, r4, r5, lr}
 80068a2:	4d06      	ldr	r5, [pc, #24]	; (80068bc <_sbrk_r+0x1c>)
 80068a4:	2300      	movs	r3, #0
 80068a6:	4604      	mov	r4, r0
 80068a8:	4608      	mov	r0, r1
 80068aa:	602b      	str	r3, [r5, #0]
 80068ac:	f7fa fa64 	bl	8000d78 <_sbrk>
 80068b0:	1c43      	adds	r3, r0, #1
 80068b2:	d102      	bne.n	80068ba <_sbrk_r+0x1a>
 80068b4:	682b      	ldr	r3, [r5, #0]
 80068b6:	b103      	cbz	r3, 80068ba <_sbrk_r+0x1a>
 80068b8:	6023      	str	r3, [r4, #0]
 80068ba:	bd38      	pop	{r3, r4, r5, pc}
 80068bc:	240001cc 	.word	0x240001cc

080068c0 <__sread>:
 80068c0:	b510      	push	{r4, lr}
 80068c2:	460c      	mov	r4, r1
 80068c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068c8:	f000 f8a0 	bl	8006a0c <_read_r>
 80068cc:	2800      	cmp	r0, #0
 80068ce:	bfab      	itete	ge
 80068d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80068d2:	89a3      	ldrhlt	r3, [r4, #12]
 80068d4:	181b      	addge	r3, r3, r0
 80068d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80068da:	bfac      	ite	ge
 80068dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80068de:	81a3      	strhlt	r3, [r4, #12]
 80068e0:	bd10      	pop	{r4, pc}

080068e2 <__swrite>:
 80068e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068e6:	461f      	mov	r7, r3
 80068e8:	898b      	ldrh	r3, [r1, #12]
 80068ea:	05db      	lsls	r3, r3, #23
 80068ec:	4605      	mov	r5, r0
 80068ee:	460c      	mov	r4, r1
 80068f0:	4616      	mov	r6, r2
 80068f2:	d505      	bpl.n	8006900 <__swrite+0x1e>
 80068f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068f8:	2302      	movs	r3, #2
 80068fa:	2200      	movs	r2, #0
 80068fc:	f000 f868 	bl	80069d0 <_lseek_r>
 8006900:	89a3      	ldrh	r3, [r4, #12]
 8006902:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006906:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800690a:	81a3      	strh	r3, [r4, #12]
 800690c:	4632      	mov	r2, r6
 800690e:	463b      	mov	r3, r7
 8006910:	4628      	mov	r0, r5
 8006912:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006916:	f000 b817 	b.w	8006948 <_write_r>

0800691a <__sseek>:
 800691a:	b510      	push	{r4, lr}
 800691c:	460c      	mov	r4, r1
 800691e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006922:	f000 f855 	bl	80069d0 <_lseek_r>
 8006926:	1c43      	adds	r3, r0, #1
 8006928:	89a3      	ldrh	r3, [r4, #12]
 800692a:	bf15      	itete	ne
 800692c:	6560      	strne	r0, [r4, #84]	; 0x54
 800692e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006932:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006936:	81a3      	strheq	r3, [r4, #12]
 8006938:	bf18      	it	ne
 800693a:	81a3      	strhne	r3, [r4, #12]
 800693c:	bd10      	pop	{r4, pc}

0800693e <__sclose>:
 800693e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006942:	f000 b813 	b.w	800696c <_close_r>
	...

08006948 <_write_r>:
 8006948:	b538      	push	{r3, r4, r5, lr}
 800694a:	4d07      	ldr	r5, [pc, #28]	; (8006968 <_write_r+0x20>)
 800694c:	4604      	mov	r4, r0
 800694e:	4608      	mov	r0, r1
 8006950:	4611      	mov	r1, r2
 8006952:	2200      	movs	r2, #0
 8006954:	602a      	str	r2, [r5, #0]
 8006956:	461a      	mov	r2, r3
 8006958:	f7fa f9bd 	bl	8000cd6 <_write>
 800695c:	1c43      	adds	r3, r0, #1
 800695e:	d102      	bne.n	8006966 <_write_r+0x1e>
 8006960:	682b      	ldr	r3, [r5, #0]
 8006962:	b103      	cbz	r3, 8006966 <_write_r+0x1e>
 8006964:	6023      	str	r3, [r4, #0]
 8006966:	bd38      	pop	{r3, r4, r5, pc}
 8006968:	240001cc 	.word	0x240001cc

0800696c <_close_r>:
 800696c:	b538      	push	{r3, r4, r5, lr}
 800696e:	4d06      	ldr	r5, [pc, #24]	; (8006988 <_close_r+0x1c>)
 8006970:	2300      	movs	r3, #0
 8006972:	4604      	mov	r4, r0
 8006974:	4608      	mov	r0, r1
 8006976:	602b      	str	r3, [r5, #0]
 8006978:	f7fa f9c9 	bl	8000d0e <_close>
 800697c:	1c43      	adds	r3, r0, #1
 800697e:	d102      	bne.n	8006986 <_close_r+0x1a>
 8006980:	682b      	ldr	r3, [r5, #0]
 8006982:	b103      	cbz	r3, 8006986 <_close_r+0x1a>
 8006984:	6023      	str	r3, [r4, #0]
 8006986:	bd38      	pop	{r3, r4, r5, pc}
 8006988:	240001cc 	.word	0x240001cc

0800698c <_fstat_r>:
 800698c:	b538      	push	{r3, r4, r5, lr}
 800698e:	4d07      	ldr	r5, [pc, #28]	; (80069ac <_fstat_r+0x20>)
 8006990:	2300      	movs	r3, #0
 8006992:	4604      	mov	r4, r0
 8006994:	4608      	mov	r0, r1
 8006996:	4611      	mov	r1, r2
 8006998:	602b      	str	r3, [r5, #0]
 800699a:	f7fa f9c4 	bl	8000d26 <_fstat>
 800699e:	1c43      	adds	r3, r0, #1
 80069a0:	d102      	bne.n	80069a8 <_fstat_r+0x1c>
 80069a2:	682b      	ldr	r3, [r5, #0]
 80069a4:	b103      	cbz	r3, 80069a8 <_fstat_r+0x1c>
 80069a6:	6023      	str	r3, [r4, #0]
 80069a8:	bd38      	pop	{r3, r4, r5, pc}
 80069aa:	bf00      	nop
 80069ac:	240001cc 	.word	0x240001cc

080069b0 <_isatty_r>:
 80069b0:	b538      	push	{r3, r4, r5, lr}
 80069b2:	4d06      	ldr	r5, [pc, #24]	; (80069cc <_isatty_r+0x1c>)
 80069b4:	2300      	movs	r3, #0
 80069b6:	4604      	mov	r4, r0
 80069b8:	4608      	mov	r0, r1
 80069ba:	602b      	str	r3, [r5, #0]
 80069bc:	f7fa f9c3 	bl	8000d46 <_isatty>
 80069c0:	1c43      	adds	r3, r0, #1
 80069c2:	d102      	bne.n	80069ca <_isatty_r+0x1a>
 80069c4:	682b      	ldr	r3, [r5, #0]
 80069c6:	b103      	cbz	r3, 80069ca <_isatty_r+0x1a>
 80069c8:	6023      	str	r3, [r4, #0]
 80069ca:	bd38      	pop	{r3, r4, r5, pc}
 80069cc:	240001cc 	.word	0x240001cc

080069d0 <_lseek_r>:
 80069d0:	b538      	push	{r3, r4, r5, lr}
 80069d2:	4d07      	ldr	r5, [pc, #28]	; (80069f0 <_lseek_r+0x20>)
 80069d4:	4604      	mov	r4, r0
 80069d6:	4608      	mov	r0, r1
 80069d8:	4611      	mov	r1, r2
 80069da:	2200      	movs	r2, #0
 80069dc:	602a      	str	r2, [r5, #0]
 80069de:	461a      	mov	r2, r3
 80069e0:	f7fa f9bc 	bl	8000d5c <_lseek>
 80069e4:	1c43      	adds	r3, r0, #1
 80069e6:	d102      	bne.n	80069ee <_lseek_r+0x1e>
 80069e8:	682b      	ldr	r3, [r5, #0]
 80069ea:	b103      	cbz	r3, 80069ee <_lseek_r+0x1e>
 80069ec:	6023      	str	r3, [r4, #0]
 80069ee:	bd38      	pop	{r3, r4, r5, pc}
 80069f0:	240001cc 	.word	0x240001cc

080069f4 <__malloc_lock>:
 80069f4:	4801      	ldr	r0, [pc, #4]	; (80069fc <__malloc_lock+0x8>)
 80069f6:	f7ff be43 	b.w	8006680 <__retarget_lock_acquire_recursive>
 80069fa:	bf00      	nop
 80069fc:	240001c4 	.word	0x240001c4

08006a00 <__malloc_unlock>:
 8006a00:	4801      	ldr	r0, [pc, #4]	; (8006a08 <__malloc_unlock+0x8>)
 8006a02:	f7ff be3e 	b.w	8006682 <__retarget_lock_release_recursive>
 8006a06:	bf00      	nop
 8006a08:	240001c4 	.word	0x240001c4

08006a0c <_read_r>:
 8006a0c:	b538      	push	{r3, r4, r5, lr}
 8006a0e:	4d07      	ldr	r5, [pc, #28]	; (8006a2c <_read_r+0x20>)
 8006a10:	4604      	mov	r4, r0
 8006a12:	4608      	mov	r0, r1
 8006a14:	4611      	mov	r1, r2
 8006a16:	2200      	movs	r2, #0
 8006a18:	602a      	str	r2, [r5, #0]
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	f7fa f93e 	bl	8000c9c <_read>
 8006a20:	1c43      	adds	r3, r0, #1
 8006a22:	d102      	bne.n	8006a2a <_read_r+0x1e>
 8006a24:	682b      	ldr	r3, [r5, #0]
 8006a26:	b103      	cbz	r3, 8006a2a <_read_r+0x1e>
 8006a28:	6023      	str	r3, [r4, #0]
 8006a2a:	bd38      	pop	{r3, r4, r5, pc}
 8006a2c:	240001cc 	.word	0x240001cc

08006a30 <_init>:
 8006a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a32:	bf00      	nop
 8006a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a36:	bc08      	pop	{r3}
 8006a38:	469e      	mov	lr, r3
 8006a3a:	4770      	bx	lr

08006a3c <_fini>:
 8006a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a3e:	bf00      	nop
 8006a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a42:	bc08      	pop	{r3}
 8006a44:	469e      	mov	lr, r3
 8006a46:	4770      	bx	lr
