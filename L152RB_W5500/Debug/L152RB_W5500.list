
L152RB_W5500.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035f0  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800372c  0800372c  0001372c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003754  08003754  00020038  2**0
                  CONTENTS
  4 .ARM          00000008  08003754  08003754  00013754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800375c  0800375c  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800375c  0800375c  0001375c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003760  08003760  00013760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08003764  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000038  0800379c  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  0800379c  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008cc5  00000000  00000000  00020061  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a96  00000000  00000000  00028d26  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a00  00000000  00000000  0002a7c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000928  00000000  00000000  0002b1c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013441  00000000  00000000  0002bae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007634  00000000  00000000  0003ef29  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007755f  00000000  00000000  0004655d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bdabc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000289c  00000000  00000000  000bdb38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000038 	.word	0x20000038
 8000158:	00000000 	.word	0x00000000
 800015c:	08003714 	.word	0x08003714

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000003c 	.word	0x2000003c
 8000178:	08003714 	.word	0x08003714

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b974 	b.w	800047c <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	468c      	mov	ip, r1
 80001b2:	4604      	mov	r4, r0
 80001b4:	9e08      	ldr	r6, [sp, #32]
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d14b      	bne.n	8000252 <__udivmoddi4+0xa6>
 80001ba:	428a      	cmp	r2, r1
 80001bc:	4615      	mov	r5, r2
 80001be:	d967      	bls.n	8000290 <__udivmoddi4+0xe4>
 80001c0:	fab2 f282 	clz	r2, r2
 80001c4:	b14a      	cbz	r2, 80001da <__udivmoddi4+0x2e>
 80001c6:	f1c2 0720 	rsb	r7, r2, #32
 80001ca:	fa01 f302 	lsl.w	r3, r1, r2
 80001ce:	fa20 f707 	lsr.w	r7, r0, r7
 80001d2:	4095      	lsls	r5, r2
 80001d4:	ea47 0c03 	orr.w	ip, r7, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001de:	fbbc f7fe 	udiv	r7, ip, lr
 80001e2:	fa1f f885 	uxth.w	r8, r5
 80001e6:	fb0e c317 	mls	r3, lr, r7, ip
 80001ea:	fb07 f908 	mul.w	r9, r7, r8
 80001ee:	0c21      	lsrs	r1, r4, #16
 80001f0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f4:	4599      	cmp	r9, r3
 80001f6:	d909      	bls.n	800020c <__udivmoddi4+0x60>
 80001f8:	18eb      	adds	r3, r5, r3
 80001fa:	f107 31ff 	add.w	r1, r7, #4294967295
 80001fe:	f080 811c 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000202:	4599      	cmp	r9, r3
 8000204:	f240 8119 	bls.w	800043a <__udivmoddi4+0x28e>
 8000208:	3f02      	subs	r7, #2
 800020a:	442b      	add	r3, r5
 800020c:	eba3 0309 	sub.w	r3, r3, r9
 8000210:	fbb3 f0fe 	udiv	r0, r3, lr
 8000214:	fb0e 3310 	mls	r3, lr, r0, r3
 8000218:	fb00 f108 	mul.w	r1, r0, r8
 800021c:	b2a4      	uxth	r4, r4
 800021e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000222:	42a1      	cmp	r1, r4
 8000224:	d909      	bls.n	800023a <__udivmoddi4+0x8e>
 8000226:	192c      	adds	r4, r5, r4
 8000228:	f100 33ff 	add.w	r3, r0, #4294967295
 800022c:	f080 8107 	bcs.w	800043e <__udivmoddi4+0x292>
 8000230:	42a1      	cmp	r1, r4
 8000232:	f240 8104 	bls.w	800043e <__udivmoddi4+0x292>
 8000236:	3802      	subs	r0, #2
 8000238:	442c      	add	r4, r5
 800023a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800023e:	2700      	movs	r7, #0
 8000240:	1a64      	subs	r4, r4, r1
 8000242:	b11e      	cbz	r6, 800024c <__udivmoddi4+0xa0>
 8000244:	2300      	movs	r3, #0
 8000246:	40d4      	lsrs	r4, r2
 8000248:	e9c6 4300 	strd	r4, r3, [r6]
 800024c:	4639      	mov	r1, r7
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	428b      	cmp	r3, r1
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0xbe>
 8000256:	2e00      	cmp	r6, #0
 8000258:	f000 80ec 	beq.w	8000434 <__udivmoddi4+0x288>
 800025c:	2700      	movs	r7, #0
 800025e:	e9c6 0100 	strd	r0, r1, [r6]
 8000262:	4638      	mov	r0, r7
 8000264:	4639      	mov	r1, r7
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f783 	clz	r7, r3
 800026e:	2f00      	cmp	r7, #0
 8000270:	d148      	bne.n	8000304 <__udivmoddi4+0x158>
 8000272:	428b      	cmp	r3, r1
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd0>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80fb 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb61 0303 	sbc.w	r3, r1, r3
 8000282:	2001      	movs	r0, #1
 8000284:	469c      	mov	ip, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e0      	beq.n	800024c <__udivmoddi4+0xa0>
 800028a:	e9c6 4c00 	strd	r4, ip, [r6]
 800028e:	e7dd      	b.n	800024c <__udivmoddi4+0xa0>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xe8>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 808f 	bne.w	80003bc <__udivmoddi4+0x210>
 800029e:	2701      	movs	r7, #1
 80002a0:	1b49      	subs	r1, r1, r5
 80002a2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80002a6:	fa1f f985 	uxth.w	r9, r5
 80002aa:	fbb1 fef8 	udiv	lr, r1, r8
 80002ae:	fb08 111e 	mls	r1, r8, lr, r1
 80002b2:	fb09 f00e 	mul.w	r0, r9, lr
 80002b6:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80002ba:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 80002be:	4298      	cmp	r0, r3
 80002c0:	d907      	bls.n	80002d2 <__udivmoddi4+0x126>
 80002c2:	18eb      	adds	r3, r5, r3
 80002c4:	f10e 31ff 	add.w	r1, lr, #4294967295
 80002c8:	d202      	bcs.n	80002d0 <__udivmoddi4+0x124>
 80002ca:	4298      	cmp	r0, r3
 80002cc:	f200 80cd 	bhi.w	800046a <__udivmoddi4+0x2be>
 80002d0:	468e      	mov	lr, r1
 80002d2:	1a1b      	subs	r3, r3, r0
 80002d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d8:	fb08 3310 	mls	r3, r8, r0, r3
 80002dc:	fb09 f900 	mul.w	r9, r9, r0
 80002e0:	b2a4      	uxth	r4, r4
 80002e2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e6:	45a1      	cmp	r9, r4
 80002e8:	d907      	bls.n	80002fa <__udivmoddi4+0x14e>
 80002ea:	192c      	adds	r4, r5, r4
 80002ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f0:	d202      	bcs.n	80002f8 <__udivmoddi4+0x14c>
 80002f2:	45a1      	cmp	r9, r4
 80002f4:	f200 80b6 	bhi.w	8000464 <__udivmoddi4+0x2b8>
 80002f8:	4618      	mov	r0, r3
 80002fa:	eba4 0409 	sub.w	r4, r4, r9
 80002fe:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000302:	e79e      	b.n	8000242 <__udivmoddi4+0x96>
 8000304:	f1c7 0520 	rsb	r5, r7, #32
 8000308:	40bb      	lsls	r3, r7
 800030a:	fa22 fc05 	lsr.w	ip, r2, r5
 800030e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000312:	fa21 f405 	lsr.w	r4, r1, r5
 8000316:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800031a:	fbb4 f9fe 	udiv	r9, r4, lr
 800031e:	fa1f f88c 	uxth.w	r8, ip
 8000322:	fb0e 4419 	mls	r4, lr, r9, r4
 8000326:	fa20 f305 	lsr.w	r3, r0, r5
 800032a:	40b9      	lsls	r1, r7
 800032c:	fb09 fa08 	mul.w	sl, r9, r8
 8000330:	4319      	orrs	r1, r3
 8000332:	0c0b      	lsrs	r3, r1, #16
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	45a2      	cmp	sl, r4
 800033a:	fa02 f207 	lsl.w	r2, r2, r7
 800033e:	fa00 f307 	lsl.w	r3, r0, r7
 8000342:	d90b      	bls.n	800035c <__udivmoddi4+0x1b0>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f109 30ff 	add.w	r0, r9, #4294967295
 800034c:	f080 8088 	bcs.w	8000460 <__udivmoddi4+0x2b4>
 8000350:	45a2      	cmp	sl, r4
 8000352:	f240 8085 	bls.w	8000460 <__udivmoddi4+0x2b4>
 8000356:	f1a9 0902 	sub.w	r9, r9, #2
 800035a:	4464      	add	r4, ip
 800035c:	eba4 040a 	sub.w	r4, r4, sl
 8000360:	fbb4 f0fe 	udiv	r0, r4, lr
 8000364:	fb0e 4410 	mls	r4, lr, r0, r4
 8000368:	fb00 fa08 	mul.w	sl, r0, r8
 800036c:	b289      	uxth	r1, r1
 800036e:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000372:	45a2      	cmp	sl, r4
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x1dc>
 8000376:	eb1c 0404 	adds.w	r4, ip, r4
 800037a:	f100 31ff 	add.w	r1, r0, #4294967295
 800037e:	d26b      	bcs.n	8000458 <__udivmoddi4+0x2ac>
 8000380:	45a2      	cmp	sl, r4
 8000382:	d969      	bls.n	8000458 <__udivmoddi4+0x2ac>
 8000384:	3802      	subs	r0, #2
 8000386:	4464      	add	r4, ip
 8000388:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800038c:	fba0 8902 	umull	r8, r9, r0, r2
 8000390:	eba4 040a 	sub.w	r4, r4, sl
 8000394:	454c      	cmp	r4, r9
 8000396:	4641      	mov	r1, r8
 8000398:	46ce      	mov	lr, r9
 800039a:	d354      	bcc.n	8000446 <__udivmoddi4+0x29a>
 800039c:	d051      	beq.n	8000442 <__udivmoddi4+0x296>
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d069      	beq.n	8000476 <__udivmoddi4+0x2ca>
 80003a2:	1a5a      	subs	r2, r3, r1
 80003a4:	eb64 040e 	sbc.w	r4, r4, lr
 80003a8:	fa04 f505 	lsl.w	r5, r4, r5
 80003ac:	fa22 f307 	lsr.w	r3, r2, r7
 80003b0:	40fc      	lsrs	r4, r7
 80003b2:	431d      	orrs	r5, r3
 80003b4:	e9c6 5400 	strd	r5, r4, [r6]
 80003b8:	2700      	movs	r7, #0
 80003ba:	e747      	b.n	800024c <__udivmoddi4+0xa0>
 80003bc:	4095      	lsls	r5, r2
 80003be:	f1c2 0320 	rsb	r3, r2, #32
 80003c2:	fa21 f003 	lsr.w	r0, r1, r3
 80003c6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80003ca:	fbb0 f7f8 	udiv	r7, r0, r8
 80003ce:	fa1f f985 	uxth.w	r9, r5
 80003d2:	fb08 0017 	mls	r0, r8, r7, r0
 80003d6:	fa24 f303 	lsr.w	r3, r4, r3
 80003da:	4091      	lsls	r1, r2
 80003dc:	fb07 fc09 	mul.w	ip, r7, r9
 80003e0:	430b      	orrs	r3, r1
 80003e2:	0c19      	lsrs	r1, r3, #16
 80003e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80003e8:	458c      	cmp	ip, r1
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d907      	bls.n	8000400 <__udivmoddi4+0x254>
 80003f0:	1869      	adds	r1, r5, r1
 80003f2:	f107 30ff 	add.w	r0, r7, #4294967295
 80003f6:	d231      	bcs.n	800045c <__udivmoddi4+0x2b0>
 80003f8:	458c      	cmp	ip, r1
 80003fa:	d92f      	bls.n	800045c <__udivmoddi4+0x2b0>
 80003fc:	3f02      	subs	r7, #2
 80003fe:	4429      	add	r1, r5
 8000400:	eba1 010c 	sub.w	r1, r1, ip
 8000404:	fbb1 f0f8 	udiv	r0, r1, r8
 8000408:	fb08 1c10 	mls	ip, r8, r0, r1
 800040c:	fb00 fe09 	mul.w	lr, r0, r9
 8000410:	b299      	uxth	r1, r3
 8000412:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000416:	458e      	cmp	lr, r1
 8000418:	d907      	bls.n	800042a <__udivmoddi4+0x27e>
 800041a:	1869      	adds	r1, r5, r1
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000420:	d218      	bcs.n	8000454 <__udivmoddi4+0x2a8>
 8000422:	458e      	cmp	lr, r1
 8000424:	d916      	bls.n	8000454 <__udivmoddi4+0x2a8>
 8000426:	3802      	subs	r0, #2
 8000428:	4429      	add	r1, r5
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000432:	e73a      	b.n	80002aa <__udivmoddi4+0xfe>
 8000434:	4637      	mov	r7, r6
 8000436:	4630      	mov	r0, r6
 8000438:	e708      	b.n	800024c <__udivmoddi4+0xa0>
 800043a:	460f      	mov	r7, r1
 800043c:	e6e6      	b.n	800020c <__udivmoddi4+0x60>
 800043e:	4618      	mov	r0, r3
 8000440:	e6fb      	b.n	800023a <__udivmoddi4+0x8e>
 8000442:	4543      	cmp	r3, r8
 8000444:	d2ab      	bcs.n	800039e <__udivmoddi4+0x1f2>
 8000446:	ebb8 0102 	subs.w	r1, r8, r2
 800044a:	eb69 020c 	sbc.w	r2, r9, ip
 800044e:	3801      	subs	r0, #1
 8000450:	4696      	mov	lr, r2
 8000452:	e7a4      	b.n	800039e <__udivmoddi4+0x1f2>
 8000454:	4618      	mov	r0, r3
 8000456:	e7e8      	b.n	800042a <__udivmoddi4+0x27e>
 8000458:	4608      	mov	r0, r1
 800045a:	e795      	b.n	8000388 <__udivmoddi4+0x1dc>
 800045c:	4607      	mov	r7, r0
 800045e:	e7cf      	b.n	8000400 <__udivmoddi4+0x254>
 8000460:	4681      	mov	r9, r0
 8000462:	e77b      	b.n	800035c <__udivmoddi4+0x1b0>
 8000464:	3802      	subs	r0, #2
 8000466:	442c      	add	r4, r5
 8000468:	e747      	b.n	80002fa <__udivmoddi4+0x14e>
 800046a:	f1ae 0e02 	sub.w	lr, lr, #2
 800046e:	442b      	add	r3, r5
 8000470:	e72f      	b.n	80002d2 <__udivmoddi4+0x126>
 8000472:	4638      	mov	r0, r7
 8000474:	e707      	b.n	8000286 <__udivmoddi4+0xda>
 8000476:	4637      	mov	r7, r6
 8000478:	e6e8      	b.n	800024c <__udivmoddi4+0xa0>
 800047a:	bf00      	nop

0800047c <__aeabi_idiv0>:
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop

08000480 <cs_sel>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
static void MX_USART1_UART_Init(void);

void cs_sel() {
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET); //CS LOW
 8000484:	2200      	movs	r2, #0
 8000486:	2104      	movs	r1, #4
 8000488:	4802      	ldr	r0, [pc, #8]	; (8000494 <cs_sel+0x14>)
 800048a:	f001 f959 	bl	8001740 <HAL_GPIO_WritePin>
}
 800048e:	bf00      	nop
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	40020c00 	.word	0x40020c00

08000498 <cs_desel>:

void cs_desel() {
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET); //CS HIGH
 800049c:	2201      	movs	r2, #1
 800049e:	2104      	movs	r1, #4
 80004a0:	4802      	ldr	r0, [pc, #8]	; (80004ac <cs_desel+0x14>)
 80004a2:	f001 f94d 	bl	8001740 <HAL_GPIO_WritePin>
}
 80004a6:	bf00      	nop
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	40020c00 	.word	0x40020c00

080004b0 <spi_rb>:

uint8_t spi_rb(void) {
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
	uint8_t rbuf;
	HAL_SPI_Receive(&hspi1, &rbuf, 1, 0xFFFFFFFF);
 80004b6:	1df9      	adds	r1, r7, #7
 80004b8:	f04f 33ff 	mov.w	r3, #4294967295
 80004bc:	2201      	movs	r2, #1
 80004be:	4804      	ldr	r0, [pc, #16]	; (80004d0 <spi_rb+0x20>)
 80004c0:	f002 f8a6 	bl	8002610 <HAL_SPI_Receive>
	return rbuf;
 80004c4:	79fb      	ldrb	r3, [r7, #7]
}
 80004c6:	4618      	mov	r0, r3
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	2000009c 	.word	0x2000009c

080004d4 <spi_wb>:

void spi_wb(uint8_t b) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &b, 1, 0xFFFFFFFF);
 80004de:	1df9      	adds	r1, r7, #7
 80004e0:	f04f 33ff 	mov.w	r3, #4294967295
 80004e4:	2201      	movs	r2, #1
 80004e6:	4803      	ldr	r0, [pc, #12]	; (80004f4 <spi_wb+0x20>)
 80004e8:	f001 ff56 	bl	8002398 <HAL_SPI_Transmit>
}
 80004ec:	bf00      	nop
 80004ee:	3708      	adds	r7, #8
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	2000009c 	.word	0x2000009c

080004f8 <main>:

int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b08c      	sub	sp, #48	; 0x30
 80004fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t retVal, sockStatus;
  int16_t rcvLen;
  uint8_t rcvBuf[20], bufSize[] = {2, 2, 2, 2};
 80004fe:	4b27      	ldr	r3, [pc, #156]	; (800059c <main+0xa4>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	61bb      	str	r3, [r7, #24]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 fde2 	bl	80010cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f852 	bl	80005b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 f8fe 	bl	800070c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000510:	f000 f89c 	bl	800064c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000514:	f000 f8d0 	bl	80006b8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //PRINT_HEADER();

  reg_wizchip_cs_cbfunc(cs_sel, cs_desel);
 8000518:	4921      	ldr	r1, [pc, #132]	; (80005a0 <main+0xa8>)
 800051a:	4822      	ldr	r0, [pc, #136]	; (80005a4 <main+0xac>)
 800051c:	f000 fc30 	bl	8000d80 <reg_wizchip_cs_cbfunc>
  reg_wizchip_spi_cbfunc(spi_rb, spi_wb);
 8000520:	4921      	ldr	r1, [pc, #132]	; (80005a8 <main+0xb0>)
 8000522:	4822      	ldr	r0, [pc, #136]	; (80005ac <main+0xb4>)
 8000524:	f000 fc50 	bl	8000dc8 <reg_wizchip_spi_cbfunc>

  wizchip_init(bufSize, bufSize);
 8000528:	f107 0218 	add.w	r2, r7, #24
 800052c:	f107 0318 	add.w	r3, r7, #24
 8000530:	4611      	mov	r1, r2
 8000532:	4618      	mov	r0, r3
 8000534:	f000 fcbe 	bl	8000eb4 <wizchip_init>
  wiz_NetInfo netInfo = { .mac 	= {0x00, 0x08, 0xdc, 0xab, 0xcd, 0xef},	// Mac address
 8000538:	463b      	mov	r3, r7
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	60da      	str	r2, [r3, #12]
 8000544:	611a      	str	r2, [r3, #16]
 8000546:	f8c3 2013 	str.w	r2, [r3, #19]
 800054a:	2308      	movs	r3, #8
 800054c:	707b      	strb	r3, [r7, #1]
 800054e:	23dc      	movs	r3, #220	; 0xdc
 8000550:	70bb      	strb	r3, [r7, #2]
 8000552:	23ab      	movs	r3, #171	; 0xab
 8000554:	70fb      	strb	r3, [r7, #3]
 8000556:	23cd      	movs	r3, #205	; 0xcd
 8000558:	713b      	strb	r3, [r7, #4]
 800055a:	23ef      	movs	r3, #239	; 0xef
 800055c:	717b      	strb	r3, [r7, #5]
 800055e:	23c0      	movs	r3, #192	; 0xc0
 8000560:	71bb      	strb	r3, [r7, #6]
 8000562:	23a8      	movs	r3, #168	; 0xa8
 8000564:	71fb      	strb	r3, [r7, #7]
 8000566:	2302      	movs	r3, #2
 8000568:	723b      	strb	r3, [r7, #8]
 800056a:	23c0      	movs	r3, #192	; 0xc0
 800056c:	727b      	strb	r3, [r7, #9]
 800056e:	23ff      	movs	r3, #255	; 0xff
 8000570:	72bb      	strb	r3, [r7, #10]
 8000572:	23ff      	movs	r3, #255	; 0xff
 8000574:	72fb      	strb	r3, [r7, #11]
 8000576:	23ff      	movs	r3, #255	; 0xff
 8000578:	733b      	strb	r3, [r7, #12]
 800057a:	23c0      	movs	r3, #192	; 0xc0
 800057c:	73bb      	strb	r3, [r7, #14]
 800057e:	23a8      	movs	r3, #168	; 0xa8
 8000580:	73fb      	strb	r3, [r7, #15]
 8000582:	2302      	movs	r3, #2
 8000584:	743b      	strb	r3, [r7, #16]
 8000586:	2301      	movs	r3, #1
 8000588:	747b      	strb	r3, [r7, #17]
                          .ip 	= {192, 168, 2, 192},					// IP address
                          .sn 	= {255, 255, 255, 0},					// Subnet mask
                          .gw 	= {192, 168, 2, 1}};					// Gateway address
  wizchip_setnetinfo(&netInfo);
 800058a:	463b      	mov	r3, r7
 800058c:	4618      	mov	r0, r3
 800058e:	f000 fd1d 	bl	8000fcc <wizchip_setnetinfo>
  wizchip_getnetinfo(&netInfo);
 8000592:	463b      	mov	r3, r7
 8000594:	4618      	mov	r0, r3
 8000596:	f000 fd59 	bl	800104c <wizchip_getnetinfo>
  //PRINT_NETINFO(netInfo);

  while (1)
 800059a:	e7fe      	b.n	800059a <main+0xa2>
 800059c:	0800372c 	.word	0x0800372c
 80005a0:	08000499 	.word	0x08000499
 80005a4:	08000481 	.word	0x08000481
 80005a8:	080004d5 	.word	0x080004d5
 80005ac:	080004b1 	.word	0x080004b1

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b092      	sub	sp, #72	; 0x48
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	2234      	movs	r2, #52	; 0x34
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f003 f8a0 	bl	8003704 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	463b      	mov	r3, r7
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d2:	4b1d      	ldr	r3, [pc, #116]	; (8000648 <SystemClock_Config+0x98>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80005da:	4a1b      	ldr	r2, [pc, #108]	; (8000648 <SystemClock_Config+0x98>)
 80005dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005e0:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e2:	2302      	movs	r3, #2
 80005e4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e6:	2301      	movs	r3, #1
 80005e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ea:	2310      	movs	r3, #16
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ee:	2302      	movs	r3, #2
 80005f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005f2:	2300      	movs	r3, #0
 80005f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80005f6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80005fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 80005fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000600:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	4618      	mov	r0, r3
 8000608:	f001 f8b2 	bl	8001770 <HAL_RCC_OscConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000612:	f000 f8db 	bl	80007cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000616:	230f      	movs	r3, #15
 8000618:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061a:	2303      	movs	r3, #3
 800061c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800062a:	463b      	mov	r3, r7
 800062c:	2101      	movs	r1, #1
 800062e:	4618      	mov	r0, r3
 8000630:	f001 fbce 	bl	8001dd0 <HAL_RCC_ClockConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800063a:	f000 f8c7 	bl	80007cc <Error_Handler>
  }
}
 800063e:	bf00      	nop
 8000640:	3748      	adds	r7, #72	; 0x48
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40007000 	.word	0x40007000

0800064c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000650:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <MX_SPI1_Init+0x64>)
 8000652:	4a18      	ldr	r2, [pc, #96]	; (80006b4 <MX_SPI1_Init+0x68>)
 8000654:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000656:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <MX_SPI1_Init+0x64>)
 8000658:	f44f 7282 	mov.w	r2, #260	; 0x104
 800065c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800065e:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <MX_SPI1_Init+0x64>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000664:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <MX_SPI1_Init+0x64>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <MX_SPI1_Init+0x64>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000670:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <MX_SPI1_Init+0x64>)
 8000672:	2200      	movs	r2, #0
 8000674:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <MX_SPI1_Init+0x64>)
 8000678:	f44f 7200 	mov.w	r2, #512	; 0x200
 800067c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800067e:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <MX_SPI1_Init+0x64>)
 8000680:	2210      	movs	r2, #16
 8000682:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000684:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <MX_SPI1_Init+0x64>)
 8000686:	2200      	movs	r2, #0
 8000688:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800068a:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_SPI1_Init+0x64>)
 800068c:	2200      	movs	r2, #0
 800068e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000690:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <MX_SPI1_Init+0x64>)
 8000692:	2200      	movs	r2, #0
 8000694:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000696:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <MX_SPI1_Init+0x64>)
 8000698:	220a      	movs	r2, #10
 800069a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800069c:	4804      	ldr	r0, [pc, #16]	; (80006b0 <MX_SPI1_Init+0x64>)
 800069e:	f001 fdff 	bl	80022a0 <HAL_SPI_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006a8:	f000 f890 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	2000009c 	.word	0x2000009c
 80006b4:	40013000 	.word	0x40013000

080006b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_USART1_UART_Init+0x4c>)
 80006be:	4a12      	ldr	r2, [pc, #72]	; (8000708 <MX_USART1_UART_Init+0x50>)
 80006c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <MX_USART1_UART_Init+0x4c>)
 80006c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_USART1_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <MX_USART1_UART_Init+0x4c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <MX_USART1_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_USART1_UART_Init+0x4c>)
 80006de:	220c      	movs	r2, #12
 80006e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e2:	4b08      	ldr	r3, [pc, #32]	; (8000704 <MX_USART1_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_USART1_UART_Init+0x4c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_USART1_UART_Init+0x4c>)
 80006f0:	f002 fc78 	bl	8002fe4 <HAL_UART_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006fa:	f000 f867 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	2000005c 	.word	0x2000005c
 8000708:	40013800 	.word	0x40013800

0800070c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b088      	sub	sp, #32
 8000710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	f107 030c 	add.w	r3, r7, #12
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	4b27      	ldr	r3, [pc, #156]	; (80007c0 <MX_GPIO_Init+0xb4>)
 8000724:	69db      	ldr	r3, [r3, #28]
 8000726:	4a26      	ldr	r2, [pc, #152]	; (80007c0 <MX_GPIO_Init+0xb4>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	61d3      	str	r3, [r2, #28]
 800072e:	4b24      	ldr	r3, [pc, #144]	; (80007c0 <MX_GPIO_Init+0xb4>)
 8000730:	69db      	ldr	r3, [r3, #28]
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800073a:	4b21      	ldr	r3, [pc, #132]	; (80007c0 <MX_GPIO_Init+0xb4>)
 800073c:	69db      	ldr	r3, [r3, #28]
 800073e:	4a20      	ldr	r2, [pc, #128]	; (80007c0 <MX_GPIO_Init+0xb4>)
 8000740:	f043 0308 	orr.w	r3, r3, #8
 8000744:	61d3      	str	r3, [r2, #28]
 8000746:	4b1e      	ldr	r3, [pc, #120]	; (80007c0 <MX_GPIO_Init+0xb4>)
 8000748:	69db      	ldr	r3, [r3, #28]
 800074a:	f003 0308 	and.w	r3, r3, #8
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000752:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <MX_GPIO_Init+0xb4>)
 8000754:	69db      	ldr	r3, [r3, #28]
 8000756:	4a1a      	ldr	r2, [pc, #104]	; (80007c0 <MX_GPIO_Init+0xb4>)
 8000758:	f043 0302 	orr.w	r3, r3, #2
 800075c:	61d3      	str	r3, [r2, #28]
 800075e:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <MX_GPIO_Init+0xb4>)
 8000760:	69db      	ldr	r3, [r3, #28]
 8000762:	f003 0302 	and.w	r3, r3, #2
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 800076a:	2201      	movs	r2, #1
 800076c:	2104      	movs	r1, #4
 800076e:	4815      	ldr	r0, [pc, #84]	; (80007c4 <MX_GPIO_Init+0xb8>)
 8000770:	f000 ffe6 	bl	8001740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000774:	2200      	movs	r2, #0
 8000776:	21c0      	movs	r1, #192	; 0xc0
 8000778:	4813      	ldr	r0, [pc, #76]	; (80007c8 <MX_GPIO_Init+0xbc>)
 800077a:	f000 ffe1 	bl	8001740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800077e:	2304      	movs	r3, #4
 8000780:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000782:	2301      	movs	r3, #1
 8000784:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078a:	2303      	movs	r3, #3
 800078c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800078e:	f107 030c 	add.w	r3, r7, #12
 8000792:	4619      	mov	r1, r3
 8000794:	480b      	ldr	r0, [pc, #44]	; (80007c4 <MX_GPIO_Init+0xb8>)
 8000796:	f000 fe55 	bl	8001444 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800079a:	23c0      	movs	r3, #192	; 0xc0
 800079c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079e:	2301      	movs	r3, #1
 80007a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007aa:	f107 030c 	add.w	r3, r7, #12
 80007ae:	4619      	mov	r1, r3
 80007b0:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_GPIO_Init+0xbc>)
 80007b2:	f000 fe47 	bl	8001444 <HAL_GPIO_Init>

}
 80007b6:	bf00      	nop
 80007b8:	3720      	adds	r7, #32
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40020c00 	.word	0x40020c00
 80007c8:	40020400 	.word	0x40020400

080007cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr

080007d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	b085      	sub	sp, #20
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80007de:	4b14      	ldr	r3, [pc, #80]	; (8000830 <HAL_MspInit+0x58>)
 80007e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007e2:	4a13      	ldr	r2, [pc, #76]	; (8000830 <HAL_MspInit+0x58>)
 80007e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007e8:	6253      	str	r3, [r2, #36]	; 0x24
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <HAL_MspInit+0x58>)
 80007ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <HAL_MspInit+0x58>)
 80007f8:	6a1b      	ldr	r3, [r3, #32]
 80007fa:	4a0d      	ldr	r2, [pc, #52]	; (8000830 <HAL_MspInit+0x58>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6213      	str	r3, [r2, #32]
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <HAL_MspInit+0x58>)
 8000804:	6a1b      	ldr	r3, [r3, #32]
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <HAL_MspInit+0x58>)
 8000810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000812:	4a07      	ldr	r2, [pc, #28]	; (8000830 <HAL_MspInit+0x58>)
 8000814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000818:	6253      	str	r3, [r2, #36]	; 0x24
 800081a:	4b05      	ldr	r3, [pc, #20]	; (8000830 <HAL_MspInit+0x58>)
 800081c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800081e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000826:	bf00      	nop
 8000828:	3714      	adds	r7, #20
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr
 8000830:	40023800 	.word	0x40023800

08000834 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08a      	sub	sp, #40	; 0x28
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a1b      	ldr	r2, [pc, #108]	; (80008c0 <HAL_SPI_MspInit+0x8c>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d12f      	bne.n	80008b6 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000856:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <HAL_SPI_MspInit+0x90>)
 8000858:	6a1b      	ldr	r3, [r3, #32]
 800085a:	4a1a      	ldr	r2, [pc, #104]	; (80008c4 <HAL_SPI_MspInit+0x90>)
 800085c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000860:	6213      	str	r3, [r2, #32]
 8000862:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <HAL_SPI_MspInit+0x90>)
 8000864:	6a1b      	ldr	r3, [r3, #32]
 8000866:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <HAL_SPI_MspInit+0x90>)
 8000870:	69db      	ldr	r3, [r3, #28]
 8000872:	4a14      	ldr	r2, [pc, #80]	; (80008c4 <HAL_SPI_MspInit+0x90>)
 8000874:	f043 0302 	orr.w	r3, r3, #2
 8000878:	61d3      	str	r3, [r2, #28]
 800087a:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <HAL_SPI_MspInit+0x90>)
 800087c:	69db      	ldr	r3, [r3, #28]
 800087e:	f003 0302 	and.w	r3, r3, #2
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000886:	2338      	movs	r3, #56	; 0x38
 8000888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088a:	2302      	movs	r3, #2
 800088c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000892:	2303      	movs	r3, #3
 8000894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000896:	2305      	movs	r3, #5
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	4619      	mov	r1, r3
 80008a0:	4809      	ldr	r0, [pc, #36]	; (80008c8 <HAL_SPI_MspInit+0x94>)
 80008a2:	f000 fdcf 	bl	8001444 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2100      	movs	r1, #0
 80008aa:	2023      	movs	r0, #35	; 0x23
 80008ac:	f000 fd53 	bl	8001356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80008b0:	2023      	movs	r0, #35	; 0x23
 80008b2:	f000 fd6c 	bl	800138e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80008b6:	bf00      	nop
 80008b8:	3728      	adds	r7, #40	; 0x28
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40013000 	.word	0x40013000
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40020400 	.word	0x40020400

080008cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08a      	sub	sp, #40	; 0x28
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a1b      	ldr	r2, [pc, #108]	; (8000958 <HAL_UART_MspInit+0x8c>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d130      	bne.n	8000950 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008ee:	4b1b      	ldr	r3, [pc, #108]	; (800095c <HAL_UART_MspInit+0x90>)
 80008f0:	6a1b      	ldr	r3, [r3, #32]
 80008f2:	4a1a      	ldr	r2, [pc, #104]	; (800095c <HAL_UART_MspInit+0x90>)
 80008f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f8:	6213      	str	r3, [r2, #32]
 80008fa:	4b18      	ldr	r3, [pc, #96]	; (800095c <HAL_UART_MspInit+0x90>)
 80008fc:	6a1b      	ldr	r3, [r3, #32]
 80008fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000902:	613b      	str	r3, [r7, #16]
 8000904:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	4b15      	ldr	r3, [pc, #84]	; (800095c <HAL_UART_MspInit+0x90>)
 8000908:	69db      	ldr	r3, [r3, #28]
 800090a:	4a14      	ldr	r2, [pc, #80]	; (800095c <HAL_UART_MspInit+0x90>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	61d3      	str	r3, [r2, #28]
 8000912:	4b12      	ldr	r3, [pc, #72]	; (800095c <HAL_UART_MspInit+0x90>)
 8000914:	69db      	ldr	r3, [r3, #28]
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800091e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000922:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000924:	2302      	movs	r3, #2
 8000926:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092c:	2303      	movs	r3, #3
 800092e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000930:	2307      	movs	r3, #7
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	4619      	mov	r1, r3
 800093a:	4809      	ldr	r0, [pc, #36]	; (8000960 <HAL_UART_MspInit+0x94>)
 800093c:	f000 fd82 	bl	8001444 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000940:	2200      	movs	r2, #0
 8000942:	2100      	movs	r1, #0
 8000944:	2025      	movs	r0, #37	; 0x25
 8000946:	f000 fd06 	bl	8001356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800094a:	2025      	movs	r0, #37	; 0x25
 800094c:	f000 fd1f 	bl	800138e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000950:	bf00      	nop
 8000952:	3728      	adds	r7, #40	; 0x28
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40013800 	.word	0x40013800
 800095c:	40023800 	.word	0x40023800
 8000960:	40020000 	.word	0x40020000

08000964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr

08000970 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <HardFault_Handler+0x4>

08000976 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800097a:	e7fe      	b.n	800097a <MemManage_Handler+0x4>

0800097c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <BusFault_Handler+0x4>

08000982 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <UsageFault_Handler+0x4>

08000988 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr

08000994 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	bc80      	pop	{r7}
 800099e:	4770      	bx	lr

080009a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr

080009ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b0:	f000 fbde 	bl	8001170 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80009bc:	4802      	ldr	r0, [pc, #8]	; (80009c8 <SPI1_IRQHandler+0x10>)
 80009be:	f002 f8db 	bl	8002b78 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	2000009c 	.word	0x2000009c

080009cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009d0:	4802      	ldr	r0, [pc, #8]	; (80009dc <USART1_IRQHandler+0x10>)
 80009d2:	f002 fb55 	bl	8003080 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	2000005c 	.word	0x2000005c

080009e0 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80009e4:	4b03      	ldr	r3, [pc, #12]	; (80009f4 <SystemInit+0x14>)
 80009e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009ea:	609a      	str	r2, [r3, #8]
#endif
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80009f8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80009fa:	e003      	b.n	8000a04 <LoopCopyDataInit>

080009fc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80009fc:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80009fe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000a00:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000a02:	3104      	adds	r1, #4

08000a04 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000a04:	480a      	ldr	r0, [pc, #40]	; (8000a30 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000a08:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000a0a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000a0c:	d3f6      	bcc.n	80009fc <CopyDataInit>
  ldr r2, =_sbss
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	; (8000a38 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000a10:	e002      	b.n	8000a18 <LoopFillZerobss>

08000a12 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000a12:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000a14:	f842 3b04 	str.w	r3, [r2], #4

08000a18 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000a18:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000a1a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000a1c:	d3f9      	bcc.n	8000a12 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a1e:	f7ff ffdf 	bl	80009e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a22:	f002 fe4b 	bl	80036bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a26:	f7ff fd67 	bl	80004f8 <main>
  bx lr
 8000a2a:	4770      	bx	lr
  ldr r3, =_sidata
 8000a2c:	08003764 	.word	0x08003764
  ldr r0, =_sdata
 8000a30:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000a34:	20000038 	.word	0x20000038
  ldr r2, =_sbss
 8000a38:	20000038 	.word	0x20000038
  ldr r3, = _ebss
 8000a3c:	200000f8 	.word	0x200000f8

08000a40 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a40:	e7fe      	b.n	8000a40 <ADC1_IRQHandler>
	...

08000a44 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8000a4c:	4b22      	ldr	r3, [pc, #136]	; (8000ad8 <WIZCHIP_READ+0x94>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000a52:	4b21      	ldr	r3, [pc, #132]	; (8000ad8 <WIZCHIP_READ+0x94>)
 8000a54:	695b      	ldr	r3, [r3, #20]
 8000a56:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000a58:	4b1f      	ldr	r3, [pc, #124]	; (8000ad8 <WIZCHIP_READ+0x94>)
 8000a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d003      	beq.n	8000a68 <WIZCHIP_READ+0x24>
 8000a60:	4b1d      	ldr	r3, [pc, #116]	; (8000ad8 <WIZCHIP_READ+0x94>)
 8000a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d114      	bne.n	8000a92 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000a68:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <WIZCHIP_READ+0x94>)
 8000a6a:	6a1b      	ldr	r3, [r3, #32]
 8000a6c:	687a      	ldr	r2, [r7, #4]
 8000a6e:	0c12      	lsrs	r2, r2, #16
 8000a70:	b2d2      	uxtb	r2, r2
 8000a72:	4610      	mov	r0, r2
 8000a74:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000a76:	4b18      	ldr	r3, [pc, #96]	; (8000ad8 <WIZCHIP_READ+0x94>)
 8000a78:	6a1b      	ldr	r3, [r3, #32]
 8000a7a:	687a      	ldr	r2, [r7, #4]
 8000a7c:	0a12      	lsrs	r2, r2, #8
 8000a7e:	b2d2      	uxtb	r2, r2
 8000a80:	4610      	mov	r0, r2
 8000a82:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000a84:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <WIZCHIP_READ+0x94>)
 8000a86:	6a1b      	ldr	r3, [r3, #32]
 8000a88:	687a      	ldr	r2, [r7, #4]
 8000a8a:	b2d2      	uxtb	r2, r2
 8000a8c:	4610      	mov	r0, r2
 8000a8e:	4798      	blx	r3
 8000a90:	e011      	b.n	8000ab6 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	0c1b      	lsrs	r3, r3, #16
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	0a1b      	lsrs	r3, r3, #8
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000aa8:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <WIZCHIP_READ+0x94>)
 8000aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aac:	f107 020c 	add.w	r2, r7, #12
 8000ab0:	2103      	movs	r1, #3
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8000ab6:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <WIZCHIP_READ+0x94>)
 8000ab8:	69db      	ldr	r3, [r3, #28]
 8000aba:	4798      	blx	r3
 8000abc:	4603      	mov	r3, r0
 8000abe:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8000ac0:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <WIZCHIP_READ+0x94>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000ac6:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <WIZCHIP_READ+0x94>)
 8000ac8:	691b      	ldr	r3, [r3, #16]
 8000aca:	4798      	blx	r3
   return ret;
 8000acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000004 	.word	0x20000004

08000adc <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	460b      	mov	r3, r1
 8000ae6:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8000ae8:	4b22      	ldr	r3, [pc, #136]	; (8000b74 <WIZCHIP_WRITE+0x98>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000aee:	4b21      	ldr	r3, [pc, #132]	; (8000b74 <WIZCHIP_WRITE+0x98>)
 8000af0:	695b      	ldr	r3, [r3, #20]
 8000af2:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	f043 0304 	orr.w	r3, r3, #4
 8000afa:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000afc:	4b1d      	ldr	r3, [pc, #116]	; (8000b74 <WIZCHIP_WRITE+0x98>)
 8000afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d119      	bne.n	8000b38 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000b04:	4b1b      	ldr	r3, [pc, #108]	; (8000b74 <WIZCHIP_WRITE+0x98>)
 8000b06:	6a1b      	ldr	r3, [r3, #32]
 8000b08:	687a      	ldr	r2, [r7, #4]
 8000b0a:	0c12      	lsrs	r2, r2, #16
 8000b0c:	b2d2      	uxtb	r2, r2
 8000b0e:	4610      	mov	r0, r2
 8000b10:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000b12:	4b18      	ldr	r3, [pc, #96]	; (8000b74 <WIZCHIP_WRITE+0x98>)
 8000b14:	6a1b      	ldr	r3, [r3, #32]
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	0a12      	lsrs	r2, r2, #8
 8000b1a:	b2d2      	uxtb	r2, r2
 8000b1c:	4610      	mov	r0, r2
 8000b1e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000b20:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <WIZCHIP_WRITE+0x98>)
 8000b22:	6a1b      	ldr	r3, [r3, #32]
 8000b24:	687a      	ldr	r2, [r7, #4]
 8000b26:	b2d2      	uxtb	r2, r2
 8000b28:	4610      	mov	r0, r2
 8000b2a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8000b2c:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <WIZCHIP_WRITE+0x98>)
 8000b2e:	6a1b      	ldr	r3, [r3, #32]
 8000b30:	78fa      	ldrb	r2, [r7, #3]
 8000b32:	4610      	mov	r0, r2
 8000b34:	4798      	blx	r3
 8000b36:	e013      	b.n	8000b60 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	0c1b      	lsrs	r3, r3, #16
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	0a1b      	lsrs	r3, r3, #8
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8000b4e:	78fb      	ldrb	r3, [r7, #3]
 8000b50:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8000b52:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <WIZCHIP_WRITE+0x98>)
 8000b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b56:	f107 020c 	add.w	r2, r7, #12
 8000b5a:	2104      	movs	r1, #4
 8000b5c:	4610      	mov	r0, r2
 8000b5e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8000b60:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <WIZCHIP_WRITE+0x98>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000b66:	4b03      	ldr	r3, [pc, #12]	; (8000b74 <WIZCHIP_WRITE+0x98>)
 8000b68:	691b      	ldr	r3, [r3, #16]
 8000b6a:	4798      	blx	r3
}
 8000b6c:	bf00      	nop
 8000b6e:	3710      	adds	r7, #16
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000004 	.word	0x20000004

08000b78 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000b78:	b590      	push	{r4, r7, lr}
 8000b7a:	b087      	sub	sp, #28
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	4613      	mov	r3, r2
 8000b84:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8000b86:	4b2b      	ldr	r3, [pc, #172]	; (8000c34 <WIZCHIP_READ_BUF+0xbc>)
 8000b88:	68db      	ldr	r3, [r3, #12]
 8000b8a:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000b8c:	4b29      	ldr	r3, [pc, #164]	; (8000c34 <WIZCHIP_READ_BUF+0xbc>)
 8000b8e:	695b      	ldr	r3, [r3, #20]
 8000b90:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000b92:	4b28      	ldr	r3, [pc, #160]	; (8000c34 <WIZCHIP_READ_BUF+0xbc>)
 8000b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d003      	beq.n	8000ba2 <WIZCHIP_READ_BUF+0x2a>
 8000b9a:	4b26      	ldr	r3, [pc, #152]	; (8000c34 <WIZCHIP_READ_BUF+0xbc>)
 8000b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d126      	bne.n	8000bf0 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000ba2:	4b24      	ldr	r3, [pc, #144]	; (8000c34 <WIZCHIP_READ_BUF+0xbc>)
 8000ba4:	6a1b      	ldr	r3, [r3, #32]
 8000ba6:	68fa      	ldr	r2, [r7, #12]
 8000ba8:	0c12      	lsrs	r2, r2, #16
 8000baa:	b2d2      	uxtb	r2, r2
 8000bac:	4610      	mov	r0, r2
 8000bae:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000bb0:	4b20      	ldr	r3, [pc, #128]	; (8000c34 <WIZCHIP_READ_BUF+0xbc>)
 8000bb2:	6a1b      	ldr	r3, [r3, #32]
 8000bb4:	68fa      	ldr	r2, [r7, #12]
 8000bb6:	0a12      	lsrs	r2, r2, #8
 8000bb8:	b2d2      	uxtb	r2, r2
 8000bba:	4610      	mov	r0, r2
 8000bbc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000bbe:	4b1d      	ldr	r3, [pc, #116]	; (8000c34 <WIZCHIP_READ_BUF+0xbc>)
 8000bc0:	6a1b      	ldr	r3, [r3, #32]
 8000bc2:	68fa      	ldr	r2, [r7, #12]
 8000bc4:	b2d2      	uxtb	r2, r2
 8000bc6:	4610      	mov	r0, r2
 8000bc8:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8000bca:	2300      	movs	r3, #0
 8000bcc:	82fb      	strh	r3, [r7, #22]
 8000bce:	e00a      	b.n	8000be6 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8000bd0:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <WIZCHIP_READ_BUF+0xbc>)
 8000bd2:	69db      	ldr	r3, [r3, #28]
 8000bd4:	8afa      	ldrh	r2, [r7, #22]
 8000bd6:	68b9      	ldr	r1, [r7, #8]
 8000bd8:	188c      	adds	r4, r1, r2
 8000bda:	4798      	blx	r3
 8000bdc:	4603      	mov	r3, r0
 8000bde:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8000be0:	8afb      	ldrh	r3, [r7, #22]
 8000be2:	3301      	adds	r3, #1
 8000be4:	82fb      	strh	r3, [r7, #22]
 8000be6:	8afa      	ldrh	r2, [r7, #22]
 8000be8:	88fb      	ldrh	r3, [r7, #6]
 8000bea:	429a      	cmp	r2, r3
 8000bec:	d3f0      	bcc.n	8000bd0 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000bee:	e017      	b.n	8000c20 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	0c1b      	lsrs	r3, r3, #16
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	0a1b      	lsrs	r3, r3, #8
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000c06:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <WIZCHIP_READ_BUF+0xbc>)
 8000c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c0a:	f107 0210 	add.w	r2, r7, #16
 8000c0e:	2103      	movs	r1, #3
 8000c10:	4610      	mov	r0, r2
 8000c12:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8000c14:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <WIZCHIP_READ_BUF+0xbc>)
 8000c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c18:	88fa      	ldrh	r2, [r7, #6]
 8000c1a:	4611      	mov	r1, r2
 8000c1c:	68b8      	ldr	r0, [r7, #8]
 8000c1e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8000c20:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <WIZCHIP_READ_BUF+0xbc>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000c26:	4b03      	ldr	r3, [pc, #12]	; (8000c34 <WIZCHIP_READ_BUF+0xbc>)
 8000c28:	691b      	ldr	r3, [r3, #16]
 8000c2a:	4798      	blx	r3
}
 8000c2c:	bf00      	nop
 8000c2e:	371c      	adds	r7, #28
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd90      	pop	{r4, r7, pc}
 8000c34:	20000004 	.word	0x20000004

08000c38 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	4613      	mov	r3, r2
 8000c44:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8000c46:	4b2b      	ldr	r3, [pc, #172]	; (8000cf4 <WIZCHIP_WRITE_BUF+0xbc>)
 8000c48:	68db      	ldr	r3, [r3, #12]
 8000c4a:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000c4c:	4b29      	ldr	r3, [pc, #164]	; (8000cf4 <WIZCHIP_WRITE_BUF+0xbc>)
 8000c4e:	695b      	ldr	r3, [r3, #20]
 8000c50:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	f043 0304 	orr.w	r3, r3, #4
 8000c58:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000c5a:	4b26      	ldr	r3, [pc, #152]	; (8000cf4 <WIZCHIP_WRITE_BUF+0xbc>)
 8000c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d126      	bne.n	8000cb0 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000c62:	4b24      	ldr	r3, [pc, #144]	; (8000cf4 <WIZCHIP_WRITE_BUF+0xbc>)
 8000c64:	6a1b      	ldr	r3, [r3, #32]
 8000c66:	68fa      	ldr	r2, [r7, #12]
 8000c68:	0c12      	lsrs	r2, r2, #16
 8000c6a:	b2d2      	uxtb	r2, r2
 8000c6c:	4610      	mov	r0, r2
 8000c6e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000c70:	4b20      	ldr	r3, [pc, #128]	; (8000cf4 <WIZCHIP_WRITE_BUF+0xbc>)
 8000c72:	6a1b      	ldr	r3, [r3, #32]
 8000c74:	68fa      	ldr	r2, [r7, #12]
 8000c76:	0a12      	lsrs	r2, r2, #8
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	4610      	mov	r0, r2
 8000c7c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000c7e:	4b1d      	ldr	r3, [pc, #116]	; (8000cf4 <WIZCHIP_WRITE_BUF+0xbc>)
 8000c80:	6a1b      	ldr	r3, [r3, #32]
 8000c82:	68fa      	ldr	r2, [r7, #12]
 8000c84:	b2d2      	uxtb	r2, r2
 8000c86:	4610      	mov	r0, r2
 8000c88:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	82fb      	strh	r3, [r7, #22]
 8000c8e:	e00a      	b.n	8000ca6 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8000c90:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <WIZCHIP_WRITE_BUF+0xbc>)
 8000c92:	6a1b      	ldr	r3, [r3, #32]
 8000c94:	8afa      	ldrh	r2, [r7, #22]
 8000c96:	68b9      	ldr	r1, [r7, #8]
 8000c98:	440a      	add	r2, r1
 8000c9a:	7812      	ldrb	r2, [r2, #0]
 8000c9c:	4610      	mov	r0, r2
 8000c9e:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8000ca0:	8afb      	ldrh	r3, [r7, #22]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	82fb      	strh	r3, [r7, #22]
 8000ca6:	8afa      	ldrh	r2, [r7, #22]
 8000ca8:	88fb      	ldrh	r3, [r7, #6]
 8000caa:	429a      	cmp	r2, r3
 8000cac:	d3f0      	bcc.n	8000c90 <WIZCHIP_WRITE_BUF+0x58>
 8000cae:	e017      	b.n	8000ce0 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	0c1b      	lsrs	r3, r3, #16
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	0a1b      	lsrs	r3, r3, #8
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <WIZCHIP_WRITE_BUF+0xbc>)
 8000cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cca:	f107 0210 	add.w	r2, r7, #16
 8000cce:	2103      	movs	r1, #3
 8000cd0:	4610      	mov	r0, r2
 8000cd2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8000cd4:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <WIZCHIP_WRITE_BUF+0xbc>)
 8000cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd8:	88fa      	ldrh	r2, [r7, #6]
 8000cda:	4611      	mov	r1, r2
 8000cdc:	68b8      	ldr	r0, [r7, #8]
 8000cde:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8000ce0:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <WIZCHIP_WRITE_BUF+0xbc>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000ce6:	4b03      	ldr	r3, [pc, #12]	; (8000cf4 <WIZCHIP_WRITE_BUF+0xbc>)
 8000ce8:	691b      	ldr	r3, [r3, #16]
 8000cea:	4798      	blx	r3
}
 8000cec:	bf00      	nop
 8000cee:	3718      	adds	r7, #24
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20000004 	.word	0x20000004

08000cf8 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr

08000d04 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr

08000d10 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr

08000d1c <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr

08000d28 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	4618      	mov	r0, r3
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr

08000d40 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	460b      	mov	r3, r1
 8000d4a:	70fb      	strb	r3, [r7, #3]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	78fa      	ldrb	r2, [r7, #3]
 8000d50:	701a      	strb	r2, [r3, #0]
 8000d52:	bf00      	nop
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr

08000d5c <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	2300      	movs	r3, #0
 8000d62:	4618      	mov	r0, r3
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr

08000d6a <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8000d6a:	b480      	push	{r7}
 8000d6c:	b083      	sub	sp, #12
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	4603      	mov	r3, r0
 8000d72:	71fb      	strb	r3, [r7, #7]
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr
	...

08000d80 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d002      	beq.n	8000d96 <reg_wizchip_cs_cbfunc+0x16>
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d106      	bne.n	8000da4 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8000d96:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <reg_wizchip_cs_cbfunc+0x3c>)
 8000d98:	4a09      	ldr	r2, [pc, #36]	; (8000dc0 <reg_wizchip_cs_cbfunc+0x40>)
 8000d9a:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8000d9c:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <reg_wizchip_cs_cbfunc+0x3c>)
 8000d9e:	4a09      	ldr	r2, [pc, #36]	; (8000dc4 <reg_wizchip_cs_cbfunc+0x44>)
 8000da0:	619a      	str	r2, [r3, #24]
 8000da2:	e005      	b.n	8000db0 <reg_wizchip_cs_cbfunc+0x30>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8000da4:	4a05      	ldr	r2, [pc, #20]	; (8000dbc <reg_wizchip_cs_cbfunc+0x3c>)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8000daa:	4a04      	ldr	r2, [pc, #16]	; (8000dbc <reg_wizchip_cs_cbfunc+0x3c>)
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	6193      	str	r3, [r2, #24]
   }
}
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bc80      	pop	{r7}
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	20000004 	.word	0x20000004
 8000dc0:	08000d11 	.word	0x08000d11
 8000dc4:	08000d1d 	.word	0x08000d1d

08000dc8 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8000dd2:	bf00      	nop
 8000dd4:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <reg_wizchip_spi_cbfunc+0x48>)
 8000dd6:	881b      	ldrh	r3, [r3, #0]
 8000dd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d0f9      	beq.n	8000dd4 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d002      	beq.n	8000dec <reg_wizchip_spi_cbfunc+0x24>
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d106      	bne.n	8000dfa <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8000dec:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <reg_wizchip_spi_cbfunc+0x48>)
 8000dee:	4a09      	ldr	r2, [pc, #36]	; (8000e14 <reg_wizchip_spi_cbfunc+0x4c>)
 8000df0:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8000df2:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <reg_wizchip_spi_cbfunc+0x48>)
 8000df4:	4a08      	ldr	r2, [pc, #32]	; (8000e18 <reg_wizchip_spi_cbfunc+0x50>)
 8000df6:	621a      	str	r2, [r3, #32]
 8000df8:	e005      	b.n	8000e06 <reg_wizchip_spi_cbfunc+0x3e>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8000dfa:	4a05      	ldr	r2, [pc, #20]	; (8000e10 <reg_wizchip_spi_cbfunc+0x48>)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8000e00:	4a03      	ldr	r2, [pc, #12]	; (8000e10 <reg_wizchip_spi_cbfunc+0x48>)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	6213      	str	r3, [r2, #32]
   }
}
 8000e06:	bf00      	nop
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr
 8000e10:	20000004 	.word	0x20000004
 8000e14:	08000d5d 	.word	0x08000d5d
 8000e18:	08000d6b 	.word	0x08000d6b

08000e1c <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	2206      	movs	r2, #6
 8000e26:	4619      	mov	r1, r3
 8000e28:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8000e2c:	f7ff fea4 	bl	8000b78 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	2204      	movs	r2, #4
 8000e36:	4619      	mov	r1, r3
 8000e38:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000e3c:	f7ff fe9c 	bl	8000b78 <WIZCHIP_READ_BUF>
 8000e40:	f107 0310 	add.w	r3, r7, #16
 8000e44:	2204      	movs	r2, #4
 8000e46:	4619      	mov	r1, r3
 8000e48:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8000e4c:	f7ff fe94 	bl	8000b78 <WIZCHIP_READ_BUF>
 8000e50:	f107 030c 	add.w	r3, r7, #12
 8000e54:	2204      	movs	r2, #4
 8000e56:	4619      	mov	r1, r3
 8000e58:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8000e5c:	f7ff fe8c 	bl	8000b78 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8000e60:	2180      	movs	r1, #128	; 0x80
 8000e62:	2000      	movs	r0, #0
 8000e64:	f7ff fe3a 	bl	8000adc <WIZCHIP_WRITE>
   getMR(); // for delay
 8000e68:	2000      	movs	r0, #0
 8000e6a:	f7ff fdeb 	bl	8000a44 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	2206      	movs	r2, #6
 8000e72:	4619      	mov	r1, r3
 8000e74:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8000e78:	f7ff fede 	bl	8000c38 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	2204      	movs	r2, #4
 8000e82:	4619      	mov	r1, r3
 8000e84:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000e88:	f7ff fed6 	bl	8000c38 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8000e8c:	f107 0310 	add.w	r3, r7, #16
 8000e90:	2204      	movs	r2, #4
 8000e92:	4619      	mov	r1, r3
 8000e94:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8000e98:	f7ff fece 	bl	8000c38 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8000e9c:	f107 030c 	add.w	r3, r7, #12
 8000ea0:	2204      	movs	r2, #4
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8000ea8:	f7ff fec6 	bl	8000c38 <WIZCHIP_WRITE_BUF>
}
 8000eac:	bf00      	nop
 8000eae:	3718      	adds	r7, #24
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8000ec2:	f7ff ffab 	bl	8000e1c <wizchip_sw_reset>
   if(txsize)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d03b      	beq.n	8000f44 <wizchip_init+0x90>
   {
      tmp = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	73fb      	strb	r3, [r7, #15]
 8000ed4:	e015      	b.n	8000f02 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8000ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	4413      	add	r3, r2
 8000ede:	781a      	ldrb	r2, [r3, #0]
 8000ee0:	7bbb      	ldrb	r3, [r7, #14]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8000ee8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000eec:	2b10      	cmp	r3, #16
 8000eee:	dd02      	ble.n	8000ef6 <wizchip_init+0x42>
 8000ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef4:	e066      	b.n	8000fc4 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8000ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	3301      	adds	r3, #1
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	73fb      	strb	r3, [r7, #15]
 8000f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f06:	2b07      	cmp	r3, #7
 8000f08:	dde5      	ble.n	8000ed6 <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	73fb      	strb	r3, [r7, #15]
 8000f0e:	e015      	b.n	8000f3c <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8000f10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	3301      	adds	r3, #1
 8000f18:	00db      	lsls	r3, r3, #3
 8000f1a:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	4413      	add	r3, r2
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	f7ff fdd6 	bl	8000adc <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8000f30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	3301      	adds	r3, #1
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	73fb      	strb	r3, [r7, #15]
 8000f3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f40:	2b07      	cmp	r3, #7
 8000f42:	dde5      	ble.n	8000f10 <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d03b      	beq.n	8000fc2 <wizchip_init+0x10e>
   {
      tmp = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8000f4e:	2300      	movs	r3, #0
 8000f50:	73fb      	strb	r3, [r7, #15]
 8000f52:	e015      	b.n	8000f80 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8000f54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	781a      	ldrb	r2, [r3, #0]
 8000f5e:	7bbb      	ldrb	r3, [r7, #14]
 8000f60:	4413      	add	r3, r2
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8000f66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f6a:	2b10      	cmp	r3, #16
 8000f6c:	dd02      	ble.n	8000f74 <wizchip_init+0xc0>
 8000f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f72:	e027      	b.n	8000fc4 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8000f74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	73fb      	strb	r3, [r7, #15]
 8000f80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f84:	2b07      	cmp	r3, #7
 8000f86:	dde5      	ble.n	8000f54 <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8000f88:	2300      	movs	r3, #0
 8000f8a:	73fb      	strb	r3, [r7, #15]
 8000f8c:	e015      	b.n	8000fba <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8000f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	3301      	adds	r3, #1
 8000f96:	00db      	lsls	r3, r3, #3
 8000f98:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa2:	683a      	ldr	r2, [r7, #0]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f7ff fd97 	bl	8000adc <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8000fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	73fb      	strb	r3, [r7, #15]
 8000fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fbe:	2b07      	cmp	r3, #7
 8000fc0:	dde5      	ble.n	8000f8e <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 8000fc2:	2300      	movs	r3, #0
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2206      	movs	r2, #6
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8000fde:	f7ff fe2b 	bl	8000c38 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	330e      	adds	r3, #14
 8000fe6:	2204      	movs	r2, #4
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000fee:	f7ff fe23 	bl	8000c38 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	330a      	adds	r3, #10
 8000ff6:	2204      	movs	r2, #4
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8000ffe:	f7ff fe1b 	bl	8000c38 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3306      	adds	r3, #6
 8001006:	2204      	movs	r2, #4
 8001008:	4619      	mov	r1, r3
 800100a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800100e:	f7ff fe13 	bl	8000c38 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	7c9a      	ldrb	r2, [r3, #18]
 8001016:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <wizchip_setnetinfo+0x78>)
 8001018:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	7cda      	ldrb	r2, [r3, #19]
 800101e:	4b09      	ldr	r3, [pc, #36]	; (8001044 <wizchip_setnetinfo+0x78>)
 8001020:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	7d1a      	ldrb	r2, [r3, #20]
 8001026:	4b07      	ldr	r3, [pc, #28]	; (8001044 <wizchip_setnetinfo+0x78>)
 8001028:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	7d5a      	ldrb	r2, [r3, #21]
 800102e:	4b05      	ldr	r3, [pc, #20]	; (8001044 <wizchip_setnetinfo+0x78>)
 8001030:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	7d9a      	ldrb	r2, [r3, #22]
 8001036:	4b04      	ldr	r3, [pc, #16]	; (8001048 <wizchip_setnetinfo+0x7c>)
 8001038:	701a      	strb	r2, [r3, #0]
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000054 	.word	0x20000054
 8001048:	20000058 	.word	0x20000058

0800104c <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2206      	movs	r2, #6
 8001058:	4619      	mov	r1, r3
 800105a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800105e:	f7ff fd8b 	bl	8000b78 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	330e      	adds	r3, #14
 8001066:	2204      	movs	r2, #4
 8001068:	4619      	mov	r1, r3
 800106a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800106e:	f7ff fd83 	bl	8000b78 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	330a      	adds	r3, #10
 8001076:	2204      	movs	r2, #4
 8001078:	4619      	mov	r1, r3
 800107a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800107e:	f7ff fd7b 	bl	8000b78 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3306      	adds	r3, #6
 8001086:	2204      	movs	r2, #4
 8001088:	4619      	mov	r1, r3
 800108a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800108e:	f7ff fd73 	bl	8000b78 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8001092:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <wizchip_getnetinfo+0x78>)
 8001094:	781a      	ldrb	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 800109a:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <wizchip_getnetinfo+0x78>)
 800109c:	785a      	ldrb	r2, [r3, #1]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 80010a2:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <wizchip_getnetinfo+0x78>)
 80010a4:	789a      	ldrb	r2, [r3, #2]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <wizchip_getnetinfo+0x78>)
 80010ac:	78da      	ldrb	r2, [r3, #3]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 80010b2:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <wizchip_getnetinfo+0x7c>)
 80010b4:	781a      	ldrb	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	759a      	strb	r2, [r3, #22]
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000054 	.word	0x20000054
 80010c8:	20000058 	.word	0x20000058

080010cc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010d2:	2300      	movs	r3, #0
 80010d4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d6:	2003      	movs	r0, #3
 80010d8:	f000 f932 	bl	8001340 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010dc:	2000      	movs	r0, #0
 80010de:	f000 f80d 	bl	80010fc <HAL_InitTick>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d002      	beq.n	80010ee <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	71fb      	strb	r3, [r7, #7]
 80010ec:	e001      	b.n	80010f2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010ee:	f7ff fb73 	bl	80007d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010f2:	79fb      	ldrb	r3, [r7, #7]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001104:	2300      	movs	r3, #0
 8001106:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001108:	4b16      	ldr	r3, [pc, #88]	; (8001164 <HAL_InitTick+0x68>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d022      	beq.n	8001156 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001110:	4b15      	ldr	r3, [pc, #84]	; (8001168 <HAL_InitTick+0x6c>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4b13      	ldr	r3, [pc, #76]	; (8001164 <HAL_InitTick+0x68>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800111c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001120:	fbb2 f3f3 	udiv	r3, r2, r3
 8001124:	4618      	mov	r0, r3
 8001126:	f000 f940 	bl	80013aa <HAL_SYSTICK_Config>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d10f      	bne.n	8001150 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b0f      	cmp	r3, #15
 8001134:	d809      	bhi.n	800114a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001136:	2200      	movs	r2, #0
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	f04f 30ff 	mov.w	r0, #4294967295
 800113e:	f000 f90a 	bl	8001356 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001142:	4a0a      	ldr	r2, [pc, #40]	; (800116c <HAL_InitTick+0x70>)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6013      	str	r3, [r2, #0]
 8001148:	e007      	b.n	800115a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	73fb      	strb	r3, [r7, #15]
 800114e:	e004      	b.n	800115a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	73fb      	strb	r3, [r7, #15]
 8001154:	e001      	b.n	800115a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800115a:	7bfb      	ldrb	r3, [r7, #15]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000034 	.word	0x20000034
 8001168:	20000000 	.word	0x20000000
 800116c:	20000030 	.word	0x20000030

08001170 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001174:	4b05      	ldr	r3, [pc, #20]	; (800118c <HAL_IncTick+0x1c>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	4b05      	ldr	r3, [pc, #20]	; (8001190 <HAL_IncTick+0x20>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4413      	add	r3, r2
 800117e:	4a03      	ldr	r2, [pc, #12]	; (800118c <HAL_IncTick+0x1c>)
 8001180:	6013      	str	r3, [r2, #0]
}
 8001182:	bf00      	nop
 8001184:	46bd      	mov	sp, r7
 8001186:	bc80      	pop	{r7}
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	200000f4 	.word	0x200000f4
 8001190:	20000034 	.word	0x20000034

08001194 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return uwTick;
 8001198:	4b02      	ldr	r3, [pc, #8]	; (80011a4 <HAL_GetTick+0x10>)
 800119a:	681b      	ldr	r3, [r3, #0]
}
 800119c:	4618      	mov	r0, r3
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr
 80011a4:	200000f4 	.word	0x200000f4

080011a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b8:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <__NVIC_SetPriorityGrouping+0x44>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011be:	68ba      	ldr	r2, [r7, #8]
 80011c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011c4:	4013      	ands	r3, r2
 80011c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011da:	4a04      	ldr	r2, [pc, #16]	; (80011ec <__NVIC_SetPriorityGrouping+0x44>)
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	60d3      	str	r3, [r2, #12]
}
 80011e0:	bf00      	nop
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f4:	4b04      	ldr	r3, [pc, #16]	; (8001208 <__NVIC_GetPriorityGrouping+0x18>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	0a1b      	lsrs	r3, r3, #8
 80011fa:	f003 0307 	and.w	r3, r3, #7
}
 80011fe:	4618      	mov	r0, r3
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	2b00      	cmp	r3, #0
 800121c:	db0b      	blt.n	8001236 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	f003 021f 	and.w	r2, r3, #31
 8001224:	4906      	ldr	r1, [pc, #24]	; (8001240 <__NVIC_EnableIRQ+0x34>)
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	095b      	lsrs	r3, r3, #5
 800122c:	2001      	movs	r0, #1
 800122e:	fa00 f202 	lsl.w	r2, r0, r2
 8001232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr
 8001240:	e000e100 	.word	0xe000e100

08001244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	6039      	str	r1, [r7, #0]
 800124e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001254:	2b00      	cmp	r3, #0
 8001256:	db0a      	blt.n	800126e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	b2da      	uxtb	r2, r3
 800125c:	490c      	ldr	r1, [pc, #48]	; (8001290 <__NVIC_SetPriority+0x4c>)
 800125e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001262:	0112      	lsls	r2, r2, #4
 8001264:	b2d2      	uxtb	r2, r2
 8001266:	440b      	add	r3, r1
 8001268:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800126c:	e00a      	b.n	8001284 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	b2da      	uxtb	r2, r3
 8001272:	4908      	ldr	r1, [pc, #32]	; (8001294 <__NVIC_SetPriority+0x50>)
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	f003 030f 	and.w	r3, r3, #15
 800127a:	3b04      	subs	r3, #4
 800127c:	0112      	lsls	r2, r2, #4
 800127e:	b2d2      	uxtb	r2, r2
 8001280:	440b      	add	r3, r1
 8001282:	761a      	strb	r2, [r3, #24]
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	bc80      	pop	{r7}
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	e000e100 	.word	0xe000e100
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001298:	b480      	push	{r7}
 800129a:	b089      	sub	sp, #36	; 0x24
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	f1c3 0307 	rsb	r3, r3, #7
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	bf28      	it	cs
 80012b6:	2304      	movcs	r3, #4
 80012b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3304      	adds	r3, #4
 80012be:	2b06      	cmp	r3, #6
 80012c0:	d902      	bls.n	80012c8 <NVIC_EncodePriority+0x30>
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	3b03      	subs	r3, #3
 80012c6:	e000      	b.n	80012ca <NVIC_EncodePriority+0x32>
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012cc:	f04f 32ff 	mov.w	r2, #4294967295
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43da      	mvns	r2, r3
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	401a      	ands	r2, r3
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e0:	f04f 31ff 	mov.w	r1, #4294967295
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ea:	43d9      	mvns	r1, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f0:	4313      	orrs	r3, r2
         );
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3724      	adds	r7, #36	; 0x24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr

080012fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3b01      	subs	r3, #1
 8001308:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800130c:	d301      	bcc.n	8001312 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800130e:	2301      	movs	r3, #1
 8001310:	e00f      	b.n	8001332 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001312:	4a0a      	ldr	r2, [pc, #40]	; (800133c <SysTick_Config+0x40>)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3b01      	subs	r3, #1
 8001318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800131a:	210f      	movs	r1, #15
 800131c:	f04f 30ff 	mov.w	r0, #4294967295
 8001320:	f7ff ff90 	bl	8001244 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001324:	4b05      	ldr	r3, [pc, #20]	; (800133c <SysTick_Config+0x40>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800132a:	4b04      	ldr	r3, [pc, #16]	; (800133c <SysTick_Config+0x40>)
 800132c:	2207      	movs	r2, #7
 800132e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	e000e010 	.word	0xe000e010

08001340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f7ff ff2d 	bl	80011a8 <__NVIC_SetPriorityGrouping>
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b086      	sub	sp, #24
 800135a:	af00      	add	r7, sp, #0
 800135c:	4603      	mov	r3, r0
 800135e:	60b9      	str	r1, [r7, #8]
 8001360:	607a      	str	r2, [r7, #4]
 8001362:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001368:	f7ff ff42 	bl	80011f0 <__NVIC_GetPriorityGrouping>
 800136c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	68b9      	ldr	r1, [r7, #8]
 8001372:	6978      	ldr	r0, [r7, #20]
 8001374:	f7ff ff90 	bl	8001298 <NVIC_EncodePriority>
 8001378:	4602      	mov	r2, r0
 800137a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800137e:	4611      	mov	r1, r2
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ff5f 	bl	8001244 <__NVIC_SetPriority>
}
 8001386:	bf00      	nop
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	4603      	mov	r3, r0
 8001396:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff ff35 	bl	800120c <__NVIC_EnableIRQ>
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b082      	sub	sp, #8
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff ffa2 	bl	80012fc <SysTick_Config>
 80013b8:	4603      	mov	r3, r0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b084      	sub	sp, #16
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013ca:	2300      	movs	r3, #0
 80013cc:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d005      	beq.n	80013e6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2204      	movs	r2, #4
 80013de:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	73fb      	strb	r3, [r7, #15]
 80013e4:	e029      	b.n	800143a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f022 020e 	bic.w	r2, r2, #14
 80013f4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f022 0201 	bic.w	r2, r2, #1
 8001404:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	f003 021c 	and.w	r2, r3, #28
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001412:	2101      	movs	r1, #1
 8001414:	fa01 f202 	lsl.w	r2, r1, r2
 8001418:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2201      	movs	r2, #1
 800141e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800142e:	2b00      	cmp	r3, #0
 8001430:	d003      	beq.n	800143a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	4798      	blx	r3
    }
  }
  return status;
 800143a:	7bfb      	ldrb	r3, [r7, #15]
}
 800143c:	4618      	mov	r0, r3
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001444:	b480      	push	{r7}
 8001446:	b087      	sub	sp, #28
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001456:	2300      	movs	r3, #0
 8001458:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800145a:	e154      	b.n	8001706 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	2101      	movs	r1, #1
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	fa01 f303 	lsl.w	r3, r1, r3
 8001468:	4013      	ands	r3, r2
 800146a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2b00      	cmp	r3, #0
 8001470:	f000 8146 	beq.w	8001700 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d00b      	beq.n	8001494 <HAL_GPIO_Init+0x50>
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	2b02      	cmp	r3, #2
 8001482:	d007      	beq.n	8001494 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001488:	2b11      	cmp	r3, #17
 800148a:	d003      	beq.n	8001494 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	2b12      	cmp	r3, #18
 8001492:	d130      	bne.n	80014f6 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	2203      	movs	r2, #3
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	43db      	mvns	r3, r3
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	4013      	ands	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	68da      	ldr	r2, [r3, #12]
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80014ca:	2201      	movs	r2, #1
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43db      	mvns	r3, r3
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4013      	ands	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	091b      	lsrs	r3, r3, #4
 80014e0:	f003 0201 	and.w	r2, r3, #1
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	2203      	movs	r2, #3
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43db      	mvns	r3, r3
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	4013      	ands	r3, r2
 800150c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	689a      	ldr	r2, [r3, #8]
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	4313      	orrs	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2b02      	cmp	r3, #2
 800152c:	d003      	beq.n	8001536 <HAL_GPIO_Init+0xf2>
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	2b12      	cmp	r3, #18
 8001534:	d123      	bne.n	800157e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	08da      	lsrs	r2, r3, #3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	3208      	adds	r2, #8
 800153e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001542:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	220f      	movs	r2, #15
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43db      	mvns	r3, r3
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	4013      	ands	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	691a      	ldr	r2, [r3, #16]
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	f003 0307 	and.w	r3, r3, #7
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	4313      	orrs	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	08da      	lsrs	r2, r3, #3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3208      	adds	r2, #8
 8001578:	6939      	ldr	r1, [r7, #16]
 800157a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	2203      	movs	r2, #3
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43db      	mvns	r3, r3
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	4013      	ands	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f003 0203 	and.w	r2, r3, #3
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f000 80a0 	beq.w	8001700 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c0:	4b57      	ldr	r3, [pc, #348]	; (8001720 <HAL_GPIO_Init+0x2dc>)
 80015c2:	6a1b      	ldr	r3, [r3, #32]
 80015c4:	4a56      	ldr	r2, [pc, #344]	; (8001720 <HAL_GPIO_Init+0x2dc>)
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	6213      	str	r3, [r2, #32]
 80015cc:	4b54      	ldr	r3, [pc, #336]	; (8001720 <HAL_GPIO_Init+0x2dc>)
 80015ce:	6a1b      	ldr	r3, [r3, #32]
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80015d8:	4a52      	ldr	r2, [pc, #328]	; (8001724 <HAL_GPIO_Init+0x2e0>)
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	089b      	lsrs	r3, r3, #2
 80015de:	3302      	adds	r3, #2
 80015e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	f003 0303 	and.w	r3, r3, #3
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	220f      	movs	r2, #15
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4013      	ands	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a4a      	ldr	r2, [pc, #296]	; (8001728 <HAL_GPIO_Init+0x2e4>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d019      	beq.n	8001638 <HAL_GPIO_Init+0x1f4>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a49      	ldr	r2, [pc, #292]	; (800172c <HAL_GPIO_Init+0x2e8>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d013      	beq.n	8001634 <HAL_GPIO_Init+0x1f0>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a48      	ldr	r2, [pc, #288]	; (8001730 <HAL_GPIO_Init+0x2ec>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d00d      	beq.n	8001630 <HAL_GPIO_Init+0x1ec>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a47      	ldr	r2, [pc, #284]	; (8001734 <HAL_GPIO_Init+0x2f0>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d007      	beq.n	800162c <HAL_GPIO_Init+0x1e8>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4a46      	ldr	r2, [pc, #280]	; (8001738 <HAL_GPIO_Init+0x2f4>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d101      	bne.n	8001628 <HAL_GPIO_Init+0x1e4>
 8001624:	2304      	movs	r3, #4
 8001626:	e008      	b.n	800163a <HAL_GPIO_Init+0x1f6>
 8001628:	2305      	movs	r3, #5
 800162a:	e006      	b.n	800163a <HAL_GPIO_Init+0x1f6>
 800162c:	2303      	movs	r3, #3
 800162e:	e004      	b.n	800163a <HAL_GPIO_Init+0x1f6>
 8001630:	2302      	movs	r3, #2
 8001632:	e002      	b.n	800163a <HAL_GPIO_Init+0x1f6>
 8001634:	2301      	movs	r3, #1
 8001636:	e000      	b.n	800163a <HAL_GPIO_Init+0x1f6>
 8001638:	2300      	movs	r3, #0
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	f002 0203 	and.w	r2, r2, #3
 8001640:	0092      	lsls	r2, r2, #2
 8001642:	4093      	lsls	r3, r2
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	4313      	orrs	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800164a:	4936      	ldr	r1, [pc, #216]	; (8001724 <HAL_GPIO_Init+0x2e0>)
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	089b      	lsrs	r3, r3, #2
 8001650:	3302      	adds	r3, #2
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001658:	4b38      	ldr	r3, [pc, #224]	; (800173c <HAL_GPIO_Init+0x2f8>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	43db      	mvns	r3, r3
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	4013      	ands	r3, r2
 8001666:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d003      	beq.n	800167c <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	4313      	orrs	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800167c:	4a2f      	ldr	r2, [pc, #188]	; (800173c <HAL_GPIO_Init+0x2f8>)
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001682:	4b2e      	ldr	r3, [pc, #184]	; (800173c <HAL_GPIO_Init+0x2f8>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	43db      	mvns	r3, r3
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	4013      	ands	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80016a6:	4a25      	ldr	r2, [pc, #148]	; (800173c <HAL_GPIO_Init+0x2f8>)
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ac:	4b23      	ldr	r3, [pc, #140]	; (800173c <HAL_GPIO_Init+0x2f8>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	43db      	mvns	r3, r3
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	4013      	ands	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d003      	beq.n	80016d0 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80016d0:	4a1a      	ldr	r2, [pc, #104]	; (800173c <HAL_GPIO_Init+0x2f8>)
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016d6:	4b19      	ldr	r3, [pc, #100]	; (800173c <HAL_GPIO_Init+0x2f8>)
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	43db      	mvns	r3, r3
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	4013      	ands	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80016fa:	4a10      	ldr	r2, [pc, #64]	; (800173c <HAL_GPIO_Init+0x2f8>)
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	3301      	adds	r3, #1
 8001704:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	fa22 f303 	lsr.w	r3, r2, r3
 8001710:	2b00      	cmp	r3, #0
 8001712:	f47f aea3 	bne.w	800145c <HAL_GPIO_Init+0x18>
  }
}
 8001716:	bf00      	nop
 8001718:	371c      	adds	r7, #28
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr
 8001720:	40023800 	.word	0x40023800
 8001724:	40010000 	.word	0x40010000
 8001728:	40020000 	.word	0x40020000
 800172c:	40020400 	.word	0x40020400
 8001730:	40020800 	.word	0x40020800
 8001734:	40020c00 	.word	0x40020c00
 8001738:	40021000 	.word	0x40021000
 800173c:	40010400 	.word	0x40010400

08001740 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	460b      	mov	r3, r1
 800174a:	807b      	strh	r3, [r7, #2]
 800174c:	4613      	mov	r3, r2
 800174e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001750:	787b      	ldrb	r3, [r7, #1]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001756:	887a      	ldrh	r2, [r7, #2]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 800175c:	e003      	b.n	8001766 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800175e:	887b      	ldrh	r3, [r7, #2]
 8001760:	041a      	lsls	r2, r3, #16
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	619a      	str	r2, [r3, #24]
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr

08001770 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b088      	sub	sp, #32
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e31d      	b.n	8001dbe <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001782:	4b94      	ldr	r3, [pc, #592]	; (80019d4 <HAL_RCC_OscConfig+0x264>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f003 030c 	and.w	r3, r3, #12
 800178a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800178c:	4b91      	ldr	r3, [pc, #580]	; (80019d4 <HAL_RCC_OscConfig+0x264>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001794:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d07b      	beq.n	800189a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	2b08      	cmp	r3, #8
 80017a6:	d006      	beq.n	80017b6 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	2b0c      	cmp	r3, #12
 80017ac:	d10f      	bne.n	80017ce <HAL_RCC_OscConfig+0x5e>
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017b4:	d10b      	bne.n	80017ce <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b6:	4b87      	ldr	r3, [pc, #540]	; (80019d4 <HAL_RCC_OscConfig+0x264>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d06a      	beq.n	8001898 <HAL_RCC_OscConfig+0x128>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d166      	bne.n	8001898 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e2f7      	b.n	8001dbe <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d106      	bne.n	80017e4 <HAL_RCC_OscConfig+0x74>
 80017d6:	4b7f      	ldr	r3, [pc, #508]	; (80019d4 <HAL_RCC_OscConfig+0x264>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a7e      	ldr	r2, [pc, #504]	; (80019d4 <HAL_RCC_OscConfig+0x264>)
 80017dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017e0:	6013      	str	r3, [r2, #0]
 80017e2:	e02d      	b.n	8001840 <HAL_RCC_OscConfig+0xd0>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d10c      	bne.n	8001806 <HAL_RCC_OscConfig+0x96>
 80017ec:	4b79      	ldr	r3, [pc, #484]	; (80019d4 <HAL_RCC_OscConfig+0x264>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a78      	ldr	r2, [pc, #480]	; (80019d4 <HAL_RCC_OscConfig+0x264>)
 80017f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017f6:	6013      	str	r3, [r2, #0]
 80017f8:	4b76      	ldr	r3, [pc, #472]	; (80019d4 <HAL_RCC_OscConfig+0x264>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a75      	ldr	r2, [pc, #468]	; (80019d4 <HAL_RCC_OscConfig+0x264>)
 80017fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001802:	6013      	str	r3, [r2, #0]
 8001804:	e01c      	b.n	8001840 <HAL_RCC_OscConfig+0xd0>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	2b05      	cmp	r3, #5
 800180c:	d10c      	bne.n	8001828 <HAL_RCC_OscConfig+0xb8>
 800180e:	4b71      	ldr	r3, [pc, #452]	; (80019d4 <HAL_RCC_OscConfig+0x264>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a70      	ldr	r2, [pc, #448]	; (80019d4 <HAL_RCC_OscConfig+0x264>)
 8001814:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001818:	6013      	str	r3, [r2, #0]
 800181a:	4b6e      	ldr	r3, [pc, #440]	; (80019d4 <HAL_RCC_OscConfig+0x264>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a6d      	ldr	r2, [pc, #436]	; (80019d4 <HAL_RCC_OscConfig+0x264>)
 8001820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	e00b      	b.n	8001840 <HAL_RCC_OscConfig+0xd0>
 8001828:	4b6a      	ldr	r3, [pc, #424]	; (80019d4 <HAL_RCC_OscConfig+0x264>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a69      	ldr	r2, [pc, #420]	; (80019d4 <HAL_RCC_OscConfig+0x264>)
 800182e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001832:	6013      	str	r3, [r2, #0]
 8001834:	4b67      	ldr	r3, [pc, #412]	; (80019d4 <HAL_RCC_OscConfig+0x264>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a66      	ldr	r2, [pc, #408]	; (80019d4 <HAL_RCC_OscConfig+0x264>)
 800183a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800183e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d013      	beq.n	8001870 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001848:	f7ff fca4 	bl	8001194 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001850:	f7ff fca0 	bl	8001194 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b64      	cmp	r3, #100	; 0x64
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e2ad      	b.n	8001dbe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001862:	4b5c      	ldr	r3, [pc, #368]	; (80019d4 <HAL_RCC_OscConfig+0x264>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0f0      	beq.n	8001850 <HAL_RCC_OscConfig+0xe0>
 800186e:	e014      	b.n	800189a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001870:	f7ff fc90 	bl	8001194 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001878:	f7ff fc8c 	bl	8001194 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b64      	cmp	r3, #100	; 0x64
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e299      	b.n	8001dbe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800188a:	4b52      	ldr	r3, [pc, #328]	; (80019d4 <HAL_RCC_OscConfig+0x264>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f0      	bne.n	8001878 <HAL_RCC_OscConfig+0x108>
 8001896:	e000      	b.n	800189a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001898:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d05a      	beq.n	800195c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	2b04      	cmp	r3, #4
 80018aa:	d005      	beq.n	80018b8 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	2b0c      	cmp	r3, #12
 80018b0:	d119      	bne.n	80018e6 <HAL_RCC_OscConfig+0x176>
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d116      	bne.n	80018e6 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018b8:	4b46      	ldr	r3, [pc, #280]	; (80019d4 <HAL_RCC_OscConfig+0x264>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d005      	beq.n	80018d0 <HAL_RCC_OscConfig+0x160>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d001      	beq.n	80018d0 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e276      	b.n	8001dbe <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d0:	4b40      	ldr	r3, [pc, #256]	; (80019d4 <HAL_RCC_OscConfig+0x264>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	021b      	lsls	r3, r3, #8
 80018de:	493d      	ldr	r1, [pc, #244]	; (80019d4 <HAL_RCC_OscConfig+0x264>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018e4:	e03a      	b.n	800195c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d020      	beq.n	8001930 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018ee:	4b3a      	ldr	r3, [pc, #232]	; (80019d8 <HAL_RCC_OscConfig+0x268>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f4:	f7ff fc4e 	bl	8001194 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018fc:	f7ff fc4a 	bl	8001194 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e257      	b.n	8001dbe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800190e:	4b31      	ldr	r3, [pc, #196]	; (80019d4 <HAL_RCC_OscConfig+0x264>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d0f0      	beq.n	80018fc <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800191a:	4b2e      	ldr	r3, [pc, #184]	; (80019d4 <HAL_RCC_OscConfig+0x264>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	021b      	lsls	r3, r3, #8
 8001928:	492a      	ldr	r1, [pc, #168]	; (80019d4 <HAL_RCC_OscConfig+0x264>)
 800192a:	4313      	orrs	r3, r2
 800192c:	604b      	str	r3, [r1, #4]
 800192e:	e015      	b.n	800195c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001930:	4b29      	ldr	r3, [pc, #164]	; (80019d8 <HAL_RCC_OscConfig+0x268>)
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001936:	f7ff fc2d 	bl	8001194 <HAL_GetTick>
 800193a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800193c:	e008      	b.n	8001950 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800193e:	f7ff fc29 	bl	8001194 <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e236      	b.n	8001dbe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001950:	4b20      	ldr	r3, [pc, #128]	; (80019d4 <HAL_RCC_OscConfig+0x264>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1f0      	bne.n	800193e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0310 	and.w	r3, r3, #16
 8001964:	2b00      	cmp	r3, #0
 8001966:	f000 80b8 	beq.w	8001ada <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d170      	bne.n	8001a52 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001970:	4b18      	ldr	r3, [pc, #96]	; (80019d4 <HAL_RCC_OscConfig+0x264>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001978:	2b00      	cmp	r3, #0
 800197a:	d005      	beq.n	8001988 <HAL_RCC_OscConfig+0x218>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e21a      	b.n	8001dbe <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a1a      	ldr	r2, [r3, #32]
 800198c:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <HAL_RCC_OscConfig+0x264>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001994:	429a      	cmp	r2, r3
 8001996:	d921      	bls.n	80019dc <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a1b      	ldr	r3, [r3, #32]
 800199c:	4618      	mov	r0, r3
 800199e:	f000 fc1f 	bl	80021e0 <RCC_SetFlashLatencyFromMSIRange>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e208      	b.n	8001dbe <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019ac:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <HAL_RCC_OscConfig+0x264>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a1b      	ldr	r3, [r3, #32]
 80019b8:	4906      	ldr	r1, [pc, #24]	; (80019d4 <HAL_RCC_OscConfig+0x264>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019be:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <HAL_RCC_OscConfig+0x264>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	061b      	lsls	r3, r3, #24
 80019cc:	4901      	ldr	r1, [pc, #4]	; (80019d4 <HAL_RCC_OscConfig+0x264>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	604b      	str	r3, [r1, #4]
 80019d2:	e020      	b.n	8001a16 <HAL_RCC_OscConfig+0x2a6>
 80019d4:	40023800 	.word	0x40023800
 80019d8:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019dc:	4ba4      	ldr	r3, [pc, #656]	; (8001c70 <HAL_RCC_OscConfig+0x500>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	49a1      	ldr	r1, [pc, #644]	; (8001c70 <HAL_RCC_OscConfig+0x500>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019ee:	4ba0      	ldr	r3, [pc, #640]	; (8001c70 <HAL_RCC_OscConfig+0x500>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	061b      	lsls	r3, r3, #24
 80019fc:	499c      	ldr	r1, [pc, #624]	; (8001c70 <HAL_RCC_OscConfig+0x500>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a1b      	ldr	r3, [r3, #32]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f000 fbea 	bl	80021e0 <RCC_SetFlashLatencyFromMSIRange>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e1d3      	b.n	8001dbe <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a1b      	ldr	r3, [r3, #32]
 8001a1a:	0b5b      	lsrs	r3, r3, #13
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001a26:	4a92      	ldr	r2, [pc, #584]	; (8001c70 <HAL_RCC_OscConfig+0x500>)
 8001a28:	6892      	ldr	r2, [r2, #8]
 8001a2a:	0912      	lsrs	r2, r2, #4
 8001a2c:	f002 020f 	and.w	r2, r2, #15
 8001a30:	4990      	ldr	r1, [pc, #576]	; (8001c74 <HAL_RCC_OscConfig+0x504>)
 8001a32:	5c8a      	ldrb	r2, [r1, r2]
 8001a34:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001a36:	4a90      	ldr	r2, [pc, #576]	; (8001c78 <HAL_RCC_OscConfig+0x508>)
 8001a38:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a3a:	4b90      	ldr	r3, [pc, #576]	; (8001c7c <HAL_RCC_OscConfig+0x50c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff fb5c 	bl	80010fc <HAL_InitTick>
 8001a44:	4603      	mov	r3, r0
 8001a46:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d045      	beq.n	8001ada <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001a4e:	7bfb      	ldrb	r3, [r7, #15]
 8001a50:	e1b5      	b.n	8001dbe <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d029      	beq.n	8001aae <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a5a:	4b89      	ldr	r3, [pc, #548]	; (8001c80 <HAL_RCC_OscConfig+0x510>)
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a60:	f7ff fb98 	bl	8001194 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a68:	f7ff fb94 	bl	8001194 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e1a1      	b.n	8001dbe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001a7a:	4b7d      	ldr	r3, [pc, #500]	; (8001c70 <HAL_RCC_OscConfig+0x500>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0f0      	beq.n	8001a68 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a86:	4b7a      	ldr	r3, [pc, #488]	; (8001c70 <HAL_RCC_OscConfig+0x500>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a1b      	ldr	r3, [r3, #32]
 8001a92:	4977      	ldr	r1, [pc, #476]	; (8001c70 <HAL_RCC_OscConfig+0x500>)
 8001a94:	4313      	orrs	r3, r2
 8001a96:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a98:	4b75      	ldr	r3, [pc, #468]	; (8001c70 <HAL_RCC_OscConfig+0x500>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	69db      	ldr	r3, [r3, #28]
 8001aa4:	061b      	lsls	r3, r3, #24
 8001aa6:	4972      	ldr	r1, [pc, #456]	; (8001c70 <HAL_RCC_OscConfig+0x500>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	604b      	str	r3, [r1, #4]
 8001aac:	e015      	b.n	8001ada <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001aae:	4b74      	ldr	r3, [pc, #464]	; (8001c80 <HAL_RCC_OscConfig+0x510>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab4:	f7ff fb6e 	bl	8001194 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001abc:	f7ff fb6a 	bl	8001194 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e177      	b.n	8001dbe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001ace:	4b68      	ldr	r3, [pc, #416]	; (8001c70 <HAL_RCC_OscConfig+0x500>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1f0      	bne.n	8001abc <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d030      	beq.n	8001b48 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d016      	beq.n	8001b1c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aee:	4b65      	ldr	r3, [pc, #404]	; (8001c84 <HAL_RCC_OscConfig+0x514>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af4:	f7ff fb4e 	bl	8001194 <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001afc:	f7ff fb4a 	bl	8001194 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e157      	b.n	8001dbe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b0e:	4b58      	ldr	r3, [pc, #352]	; (8001c70 <HAL_RCC_OscConfig+0x500>)
 8001b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0f0      	beq.n	8001afc <HAL_RCC_OscConfig+0x38c>
 8001b1a:	e015      	b.n	8001b48 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b1c:	4b59      	ldr	r3, [pc, #356]	; (8001c84 <HAL_RCC_OscConfig+0x514>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b22:	f7ff fb37 	bl	8001194 <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b2a:	f7ff fb33 	bl	8001194 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e140      	b.n	8001dbe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b3c:	4b4c      	ldr	r3, [pc, #304]	; (8001c70 <HAL_RCC_OscConfig+0x500>)
 8001b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1f0      	bne.n	8001b2a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0304 	and.w	r3, r3, #4
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f000 80b5 	beq.w	8001cc0 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b56:	2300      	movs	r3, #0
 8001b58:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b5a:	4b45      	ldr	r3, [pc, #276]	; (8001c70 <HAL_RCC_OscConfig+0x500>)
 8001b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d10d      	bne.n	8001b82 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b66:	4b42      	ldr	r3, [pc, #264]	; (8001c70 <HAL_RCC_OscConfig+0x500>)
 8001b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6a:	4a41      	ldr	r2, [pc, #260]	; (8001c70 <HAL_RCC_OscConfig+0x500>)
 8001b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b70:	6253      	str	r3, [r2, #36]	; 0x24
 8001b72:	4b3f      	ldr	r3, [pc, #252]	; (8001c70 <HAL_RCC_OscConfig+0x500>)
 8001b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7a:	60bb      	str	r3, [r7, #8]
 8001b7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b82:	4b41      	ldr	r3, [pc, #260]	; (8001c88 <HAL_RCC_OscConfig+0x518>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d118      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b8e:	4b3e      	ldr	r3, [pc, #248]	; (8001c88 <HAL_RCC_OscConfig+0x518>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a3d      	ldr	r2, [pc, #244]	; (8001c88 <HAL_RCC_OscConfig+0x518>)
 8001b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b9a:	f7ff fafb 	bl	8001194 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ba2:	f7ff faf7 	bl	8001194 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b64      	cmp	r3, #100	; 0x64
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e104      	b.n	8001dbe <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb4:	4b34      	ldr	r3, [pc, #208]	; (8001c88 <HAL_RCC_OscConfig+0x518>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d0f0      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d106      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x466>
 8001bc8:	4b29      	ldr	r3, [pc, #164]	; (8001c70 <HAL_RCC_OscConfig+0x500>)
 8001bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bcc:	4a28      	ldr	r2, [pc, #160]	; (8001c70 <HAL_RCC_OscConfig+0x500>)
 8001bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd2:	6353      	str	r3, [r2, #52]	; 0x34
 8001bd4:	e02d      	b.n	8001c32 <HAL_RCC_OscConfig+0x4c2>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d10c      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x488>
 8001bde:	4b24      	ldr	r3, [pc, #144]	; (8001c70 <HAL_RCC_OscConfig+0x500>)
 8001be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001be2:	4a23      	ldr	r2, [pc, #140]	; (8001c70 <HAL_RCC_OscConfig+0x500>)
 8001be4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001be8:	6353      	str	r3, [r2, #52]	; 0x34
 8001bea:	4b21      	ldr	r3, [pc, #132]	; (8001c70 <HAL_RCC_OscConfig+0x500>)
 8001bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bee:	4a20      	ldr	r2, [pc, #128]	; (8001c70 <HAL_RCC_OscConfig+0x500>)
 8001bf0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001bf4:	6353      	str	r3, [r2, #52]	; 0x34
 8001bf6:	e01c      	b.n	8001c32 <HAL_RCC_OscConfig+0x4c2>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	2b05      	cmp	r3, #5
 8001bfe:	d10c      	bne.n	8001c1a <HAL_RCC_OscConfig+0x4aa>
 8001c00:	4b1b      	ldr	r3, [pc, #108]	; (8001c70 <HAL_RCC_OscConfig+0x500>)
 8001c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c04:	4a1a      	ldr	r2, [pc, #104]	; (8001c70 <HAL_RCC_OscConfig+0x500>)
 8001c06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c0a:	6353      	str	r3, [r2, #52]	; 0x34
 8001c0c:	4b18      	ldr	r3, [pc, #96]	; (8001c70 <HAL_RCC_OscConfig+0x500>)
 8001c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c10:	4a17      	ldr	r2, [pc, #92]	; (8001c70 <HAL_RCC_OscConfig+0x500>)
 8001c12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c16:	6353      	str	r3, [r2, #52]	; 0x34
 8001c18:	e00b      	b.n	8001c32 <HAL_RCC_OscConfig+0x4c2>
 8001c1a:	4b15      	ldr	r3, [pc, #84]	; (8001c70 <HAL_RCC_OscConfig+0x500>)
 8001c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c1e:	4a14      	ldr	r2, [pc, #80]	; (8001c70 <HAL_RCC_OscConfig+0x500>)
 8001c20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c24:	6353      	str	r3, [r2, #52]	; 0x34
 8001c26:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <HAL_RCC_OscConfig+0x500>)
 8001c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c2a:	4a11      	ldr	r2, [pc, #68]	; (8001c70 <HAL_RCC_OscConfig+0x500>)
 8001c2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001c30:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d015      	beq.n	8001c66 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c3a:	f7ff faab 	bl	8001194 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c40:	e00a      	b.n	8001c58 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c42:	f7ff faa7 	bl	8001194 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e0b2      	b.n	8001dbe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c58:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <HAL_RCC_OscConfig+0x500>)
 8001c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0ee      	beq.n	8001c42 <HAL_RCC_OscConfig+0x4d2>
 8001c64:	e023      	b.n	8001cae <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c66:	f7ff fa95 	bl	8001194 <HAL_GetTick>
 8001c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c6c:	e019      	b.n	8001ca2 <HAL_RCC_OscConfig+0x532>
 8001c6e:	bf00      	nop
 8001c70:	40023800 	.word	0x40023800
 8001c74:	0800373c 	.word	0x0800373c
 8001c78:	20000000 	.word	0x20000000
 8001c7c:	20000030 	.word	0x20000030
 8001c80:	42470020 	.word	0x42470020
 8001c84:	42470680 	.word	0x42470680
 8001c88:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c8c:	f7ff fa82 	bl	8001194 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e08d      	b.n	8001dbe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ca2:	4b49      	ldr	r3, [pc, #292]	; (8001dc8 <HAL_RCC_OscConfig+0x658>)
 8001ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ca6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1ee      	bne.n	8001c8c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001cae:	7ffb      	ldrb	r3, [r7, #31]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d105      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cb4:	4b44      	ldr	r3, [pc, #272]	; (8001dc8 <HAL_RCC_OscConfig+0x658>)
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb8:	4a43      	ldr	r2, [pc, #268]	; (8001dc8 <HAL_RCC_OscConfig+0x658>)
 8001cba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cbe:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d079      	beq.n	8001dbc <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	2b0c      	cmp	r3, #12
 8001ccc:	d056      	beq.n	8001d7c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d13b      	bne.n	8001d4e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd6:	4b3d      	ldr	r3, [pc, #244]	; (8001dcc <HAL_RCC_OscConfig+0x65c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cdc:	f7ff fa5a 	bl	8001194 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ce4:	f7ff fa56 	bl	8001194 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e063      	b.n	8001dbe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cf6:	4b34      	ldr	r3, [pc, #208]	; (8001dc8 <HAL_RCC_OscConfig+0x658>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1f0      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d02:	4b31      	ldr	r3, [pc, #196]	; (8001dc8 <HAL_RCC_OscConfig+0x658>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d12:	4319      	orrs	r1, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d18:	430b      	orrs	r3, r1
 8001d1a:	492b      	ldr	r1, [pc, #172]	; (8001dc8 <HAL_RCC_OscConfig+0x658>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d20:	4b2a      	ldr	r3, [pc, #168]	; (8001dcc <HAL_RCC_OscConfig+0x65c>)
 8001d22:	2201      	movs	r2, #1
 8001d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d26:	f7ff fa35 	bl	8001194 <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d2c:	e008      	b.n	8001d40 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d2e:	f7ff fa31 	bl	8001194 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e03e      	b.n	8001dbe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d40:	4b21      	ldr	r3, [pc, #132]	; (8001dc8 <HAL_RCC_OscConfig+0x658>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d0f0      	beq.n	8001d2e <HAL_RCC_OscConfig+0x5be>
 8001d4c:	e036      	b.n	8001dbc <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d4e:	4b1f      	ldr	r3, [pc, #124]	; (8001dcc <HAL_RCC_OscConfig+0x65c>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d54:	f7ff fa1e 	bl	8001194 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d5c:	f7ff fa1a 	bl	8001194 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e027      	b.n	8001dbe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d6e:	4b16      	ldr	r3, [pc, #88]	; (8001dc8 <HAL_RCC_OscConfig+0x658>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1f0      	bne.n	8001d5c <HAL_RCC_OscConfig+0x5ec>
 8001d7a:	e01f      	b.n	8001dbc <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d101      	bne.n	8001d88 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e01a      	b.n	8001dbe <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d88:	4b0f      	ldr	r3, [pc, #60]	; (8001dc8 <HAL_RCC_OscConfig+0x658>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d10d      	bne.n	8001db8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d106      	bne.n	8001db8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d001      	beq.n	8001dbc <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e000      	b.n	8001dbe <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3720      	adds	r7, #32
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	42470060 	.word	0x42470060

08001dd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d101      	bne.n	8001de4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e11a      	b.n	800201a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001de4:	4b8f      	ldr	r3, [pc, #572]	; (8002024 <HAL_RCC_ClockConfig+0x254>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d919      	bls.n	8001e26 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d105      	bne.n	8001e04 <HAL_RCC_ClockConfig+0x34>
 8001df8:	4b8a      	ldr	r3, [pc, #552]	; (8002024 <HAL_RCC_ClockConfig+0x254>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a89      	ldr	r2, [pc, #548]	; (8002024 <HAL_RCC_ClockConfig+0x254>)
 8001dfe:	f043 0304 	orr.w	r3, r3, #4
 8001e02:	6013      	str	r3, [r2, #0]
 8001e04:	4b87      	ldr	r3, [pc, #540]	; (8002024 <HAL_RCC_ClockConfig+0x254>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f023 0201 	bic.w	r2, r3, #1
 8001e0c:	4985      	ldr	r1, [pc, #532]	; (8002024 <HAL_RCC_ClockConfig+0x254>)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e14:	4b83      	ldr	r3, [pc, #524]	; (8002024 <HAL_RCC_ClockConfig+0x254>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d001      	beq.n	8001e26 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e0f9      	b.n	800201a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d008      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e32:	4b7d      	ldr	r3, [pc, #500]	; (8002028 <HAL_RCC_ClockConfig+0x258>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	497a      	ldr	r1, [pc, #488]	; (8002028 <HAL_RCC_ClockConfig+0x258>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f000 808e 	beq.w	8001f6e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d107      	bne.n	8001e6a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e5a:	4b73      	ldr	r3, [pc, #460]	; (8002028 <HAL_RCC_ClockConfig+0x258>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d121      	bne.n	8001eaa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e0d7      	b.n	800201a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b03      	cmp	r3, #3
 8001e70:	d107      	bne.n	8001e82 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e72:	4b6d      	ldr	r3, [pc, #436]	; (8002028 <HAL_RCC_ClockConfig+0x258>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d115      	bne.n	8001eaa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e0cb      	b.n	800201a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d107      	bne.n	8001e9a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e8a:	4b67      	ldr	r3, [pc, #412]	; (8002028 <HAL_RCC_ClockConfig+0x258>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d109      	bne.n	8001eaa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e0bf      	b.n	800201a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001e9a:	4b63      	ldr	r3, [pc, #396]	; (8002028 <HAL_RCC_ClockConfig+0x258>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e0b7      	b.n	800201a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eaa:	4b5f      	ldr	r3, [pc, #380]	; (8002028 <HAL_RCC_ClockConfig+0x258>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f023 0203 	bic.w	r2, r3, #3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	495c      	ldr	r1, [pc, #368]	; (8002028 <HAL_RCC_ClockConfig+0x258>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ebc:	f7ff f96a 	bl	8001194 <HAL_GetTick>
 8001ec0:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d112      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001eca:	e00a      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ecc:	f7ff f962 	bl	8001194 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e09b      	b.n	800201a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ee2:	4b51      	ldr	r3, [pc, #324]	; (8002028 <HAL_RCC_ClockConfig+0x258>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 030c 	and.w	r3, r3, #12
 8001eea:	2b08      	cmp	r3, #8
 8001eec:	d1ee      	bne.n	8001ecc <HAL_RCC_ClockConfig+0xfc>
 8001eee:	e03e      	b.n	8001f6e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b03      	cmp	r3, #3
 8001ef6:	d112      	bne.n	8001f1e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ef8:	e00a      	b.n	8001f10 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001efa:	f7ff f94b 	bl	8001194 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e084      	b.n	800201a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f10:	4b45      	ldr	r3, [pc, #276]	; (8002028 <HAL_RCC_ClockConfig+0x258>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f003 030c 	and.w	r3, r3, #12
 8001f18:	2b0c      	cmp	r3, #12
 8001f1a:	d1ee      	bne.n	8001efa <HAL_RCC_ClockConfig+0x12a>
 8001f1c:	e027      	b.n	8001f6e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d11d      	bne.n	8001f62 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f26:	e00a      	b.n	8001f3e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f28:	f7ff f934 	bl	8001194 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e06d      	b.n	800201a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f3e:	4b3a      	ldr	r3, [pc, #232]	; (8002028 <HAL_RCC_ClockConfig+0x258>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 030c 	and.w	r3, r3, #12
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	d1ee      	bne.n	8001f28 <HAL_RCC_ClockConfig+0x158>
 8001f4a:	e010      	b.n	8001f6e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f4c:	f7ff f922 	bl	8001194 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e05b      	b.n	800201a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001f62:	4b31      	ldr	r3, [pc, #196]	; (8002028 <HAL_RCC_ClockConfig+0x258>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 030c 	and.w	r3, r3, #12
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1ee      	bne.n	8001f4c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f6e:	4b2d      	ldr	r3, [pc, #180]	; (8002024 <HAL_RCC_ClockConfig+0x254>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d219      	bcs.n	8001fb0 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d105      	bne.n	8001f8e <HAL_RCC_ClockConfig+0x1be>
 8001f82:	4b28      	ldr	r3, [pc, #160]	; (8002024 <HAL_RCC_ClockConfig+0x254>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a27      	ldr	r2, [pc, #156]	; (8002024 <HAL_RCC_ClockConfig+0x254>)
 8001f88:	f043 0304 	orr.w	r3, r3, #4
 8001f8c:	6013      	str	r3, [r2, #0]
 8001f8e:	4b25      	ldr	r3, [pc, #148]	; (8002024 <HAL_RCC_ClockConfig+0x254>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f023 0201 	bic.w	r2, r3, #1
 8001f96:	4923      	ldr	r1, [pc, #140]	; (8002024 <HAL_RCC_ClockConfig+0x254>)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9e:	4b21      	ldr	r3, [pc, #132]	; (8002024 <HAL_RCC_ClockConfig+0x254>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d001      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e034      	b.n	800201a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d008      	beq.n	8001fce <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fbc:	4b1a      	ldr	r3, [pc, #104]	; (8002028 <HAL_RCC_ClockConfig+0x258>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	4917      	ldr	r1, [pc, #92]	; (8002028 <HAL_RCC_ClockConfig+0x258>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0308 	and.w	r3, r3, #8
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d009      	beq.n	8001fee <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fda:	4b13      	ldr	r3, [pc, #76]	; (8002028 <HAL_RCC_ClockConfig+0x258>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	490f      	ldr	r1, [pc, #60]	; (8002028 <HAL_RCC_ClockConfig+0x258>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fee:	f000 f823 	bl	8002038 <HAL_RCC_GetSysClockFreq>
 8001ff2:	4601      	mov	r1, r0
 8001ff4:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <HAL_RCC_ClockConfig+0x258>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	091b      	lsrs	r3, r3, #4
 8001ffa:	f003 030f 	and.w	r3, r3, #15
 8001ffe:	4a0b      	ldr	r2, [pc, #44]	; (800202c <HAL_RCC_ClockConfig+0x25c>)
 8002000:	5cd3      	ldrb	r3, [r2, r3]
 8002002:	fa21 f303 	lsr.w	r3, r1, r3
 8002006:	4a0a      	ldr	r2, [pc, #40]	; (8002030 <HAL_RCC_ClockConfig+0x260>)
 8002008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800200a:	4b0a      	ldr	r3, [pc, #40]	; (8002034 <HAL_RCC_ClockConfig+0x264>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff f874 	bl	80010fc <HAL_InitTick>
 8002014:	4603      	mov	r3, r0
 8002016:	72fb      	strb	r3, [r7, #11]

  return status;
 8002018:	7afb      	ldrb	r3, [r7, #11]
}
 800201a:	4618      	mov	r0, r3
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40023c00 	.word	0x40023c00
 8002028:	40023800 	.word	0x40023800
 800202c:	0800373c 	.word	0x0800373c
 8002030:	20000000 	.word	0x20000000
 8002034:	20000030 	.word	0x20000030

08002038 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800203a:	b087      	sub	sp, #28
 800203c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800203e:	4b4b      	ldr	r3, [pc, #300]	; (800216c <HAL_RCC_GetSysClockFreq+0x134>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f003 030c 	and.w	r3, r3, #12
 800204a:	2b08      	cmp	r3, #8
 800204c:	d006      	beq.n	800205c <HAL_RCC_GetSysClockFreq+0x24>
 800204e:	2b0c      	cmp	r3, #12
 8002050:	d007      	beq.n	8002062 <HAL_RCC_GetSysClockFreq+0x2a>
 8002052:	2b04      	cmp	r3, #4
 8002054:	d176      	bne.n	8002144 <HAL_RCC_GetSysClockFreq+0x10c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002056:	4b46      	ldr	r3, [pc, #280]	; (8002170 <HAL_RCC_GetSysClockFreq+0x138>)
 8002058:	613b      	str	r3, [r7, #16]
      break;
 800205a:	e081      	b.n	8002160 <HAL_RCC_GetSysClockFreq+0x128>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800205c:	4b45      	ldr	r3, [pc, #276]	; (8002174 <HAL_RCC_GetSysClockFreq+0x13c>)
 800205e:	613b      	str	r3, [r7, #16]
      break;
 8002060:	e07e      	b.n	8002160 <HAL_RCC_GetSysClockFreq+0x128>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	0c9b      	lsrs	r3, r3, #18
 8002066:	f003 030f 	and.w	r3, r3, #15
 800206a:	4a43      	ldr	r2, [pc, #268]	; (8002178 <HAL_RCC_GetSysClockFreq+0x140>)
 800206c:	5cd3      	ldrb	r3, [r2, r3]
 800206e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	0d9b      	lsrs	r3, r3, #22
 8002074:	f003 0303 	and.w	r3, r3, #3
 8002078:	3301      	adds	r3, #1
 800207a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800207c:	4b3b      	ldr	r3, [pc, #236]	; (800216c <HAL_RCC_GetSysClockFreq+0x134>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d019      	beq.n	80020bc <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	f04f 0400 	mov.w	r4, #0
 800208e:	4a39      	ldr	r2, [pc, #228]	; (8002174 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002090:	fb02 f104 	mul.w	r1, r2, r4
 8002094:	2200      	movs	r2, #0
 8002096:	fb02 f203 	mul.w	r2, r2, r3
 800209a:	440a      	add	r2, r1
 800209c:	4935      	ldr	r1, [pc, #212]	; (8002174 <HAL_RCC_GetSysClockFreq+0x13c>)
 800209e:	fba3 0101 	umull	r0, r1, r3, r1
 80020a2:	1853      	adds	r3, r2, r1
 80020a4:	4619      	mov	r1, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f04f 0400 	mov.w	r4, #0
 80020ac:	461a      	mov	r2, r3
 80020ae:	4623      	mov	r3, r4
 80020b0:	f7fe f864 	bl	800017c <__aeabi_uldivmod>
 80020b4:	4603      	mov	r3, r0
 80020b6:	460c      	mov	r4, r1
 80020b8:	617b      	str	r3, [r7, #20]
 80020ba:	e040      	b.n	800213e <HAL_RCC_GetSysClockFreq+0x106>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	461d      	mov	r5, r3
 80020c0:	f04f 0600 	mov.w	r6, #0
 80020c4:	4629      	mov	r1, r5
 80020c6:	4632      	mov	r2, r6
 80020c8:	f04f 0300 	mov.w	r3, #0
 80020cc:	f04f 0400 	mov.w	r4, #0
 80020d0:	0154      	lsls	r4, r2, #5
 80020d2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80020d6:	014b      	lsls	r3, r1, #5
 80020d8:	4619      	mov	r1, r3
 80020da:	4622      	mov	r2, r4
 80020dc:	1b49      	subs	r1, r1, r5
 80020de:	eb62 0206 	sbc.w	r2, r2, r6
 80020e2:	f04f 0300 	mov.w	r3, #0
 80020e6:	f04f 0400 	mov.w	r4, #0
 80020ea:	0194      	lsls	r4, r2, #6
 80020ec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80020f0:	018b      	lsls	r3, r1, #6
 80020f2:	1a5b      	subs	r3, r3, r1
 80020f4:	eb64 0402 	sbc.w	r4, r4, r2
 80020f8:	f04f 0100 	mov.w	r1, #0
 80020fc:	f04f 0200 	mov.w	r2, #0
 8002100:	00e2      	lsls	r2, r4, #3
 8002102:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002106:	00d9      	lsls	r1, r3, #3
 8002108:	460b      	mov	r3, r1
 800210a:	4614      	mov	r4, r2
 800210c:	195b      	adds	r3, r3, r5
 800210e:	eb44 0406 	adc.w	r4, r4, r6
 8002112:	f04f 0100 	mov.w	r1, #0
 8002116:	f04f 0200 	mov.w	r2, #0
 800211a:	02a2      	lsls	r2, r4, #10
 800211c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002120:	0299      	lsls	r1, r3, #10
 8002122:	460b      	mov	r3, r1
 8002124:	4614      	mov	r4, r2
 8002126:	4618      	mov	r0, r3
 8002128:	4621      	mov	r1, r4
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f04f 0400 	mov.w	r4, #0
 8002130:	461a      	mov	r2, r3
 8002132:	4623      	mov	r3, r4
 8002134:	f7fe f822 	bl	800017c <__aeabi_uldivmod>
 8002138:	4603      	mov	r3, r0
 800213a:	460c      	mov	r4, r1
 800213c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	613b      	str	r3, [r7, #16]
      break;
 8002142:	e00d      	b.n	8002160 <HAL_RCC_GetSysClockFreq+0x128>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002144:	4b09      	ldr	r3, [pc, #36]	; (800216c <HAL_RCC_GetSysClockFreq+0x134>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	0b5b      	lsrs	r3, r3, #13
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	3301      	adds	r3, #1
 8002154:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	613b      	str	r3, [r7, #16]
      break;
 800215e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002160:	693b      	ldr	r3, [r7, #16]
}
 8002162:	4618      	mov	r0, r3
 8002164:	371c      	adds	r7, #28
 8002166:	46bd      	mov	sp, r7
 8002168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800216a:	bf00      	nop
 800216c:	40023800 	.word	0x40023800
 8002170:	00f42400 	.word	0x00f42400
 8002174:	016e3600 	.word	0x016e3600
 8002178:	08003730 	.word	0x08003730

0800217c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002180:	4b02      	ldr	r3, [pc, #8]	; (800218c <HAL_RCC_GetHCLKFreq+0x10>)
 8002182:	681b      	ldr	r3, [r3, #0]
}
 8002184:	4618      	mov	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr
 800218c:	20000000 	.word	0x20000000

08002190 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002194:	f7ff fff2 	bl	800217c <HAL_RCC_GetHCLKFreq>
 8002198:	4601      	mov	r1, r0
 800219a:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	0a1b      	lsrs	r3, r3, #8
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	4a03      	ldr	r2, [pc, #12]	; (80021b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021a6:	5cd3      	ldrb	r3, [r2, r3]
 80021a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40023800 	.word	0x40023800
 80021b4:	0800374c 	.word	0x0800374c

080021b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021bc:	f7ff ffde 	bl	800217c <HAL_RCC_GetHCLKFreq>
 80021c0:	4601      	mov	r1, r0
 80021c2:	4b05      	ldr	r3, [pc, #20]	; (80021d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	0adb      	lsrs	r3, r3, #11
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	4a03      	ldr	r2, [pc, #12]	; (80021dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80021ce:	5cd3      	ldrb	r3, [r2, r3]
 80021d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40023800 	.word	0x40023800
 80021dc:	0800374c 	.word	0x0800374c

080021e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b087      	sub	sp, #28
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021e8:	2300      	movs	r3, #0
 80021ea:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80021ec:	4b29      	ldr	r3, [pc, #164]	; (8002294 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d12c      	bne.n	8002252 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021f8:	4b26      	ldr	r3, [pc, #152]	; (8002294 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80021fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d005      	beq.n	8002210 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002204:	4b24      	ldr	r3, [pc, #144]	; (8002298 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800220c:	617b      	str	r3, [r7, #20]
 800220e:	e016      	b.n	800223e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002210:	4b20      	ldr	r3, [pc, #128]	; (8002294 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002214:	4a1f      	ldr	r2, [pc, #124]	; (8002294 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800221a:	6253      	str	r3, [r2, #36]	; 0x24
 800221c:	4b1d      	ldr	r3, [pc, #116]	; (8002294 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800221e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002228:	4b1b      	ldr	r3, [pc, #108]	; (8002298 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002230:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8002232:	4b18      	ldr	r3, [pc, #96]	; (8002294 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002236:	4a17      	ldr	r2, [pc, #92]	; (8002294 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002238:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800223c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002244:	d105      	bne.n	8002252 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800224c:	d101      	bne.n	8002252 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800224e:	2301      	movs	r3, #1
 8002250:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d105      	bne.n	8002264 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002258:	4b10      	ldr	r3, [pc, #64]	; (800229c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a0f      	ldr	r2, [pc, #60]	; (800229c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800225e:	f043 0304 	orr.w	r3, r3, #4
 8002262:	6013      	str	r3, [r2, #0]
 8002264:	4b0d      	ldr	r3, [pc, #52]	; (800229c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f023 0201 	bic.w	r2, r3, #1
 800226c:	490b      	ldr	r1, [pc, #44]	; (800229c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	4313      	orrs	r3, r2
 8002272:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002274:	4b09      	ldr	r3, [pc, #36]	; (800229c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	429a      	cmp	r2, r3
 8002280:	d001      	beq.n	8002286 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e000      	b.n	8002288 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	371c      	adds	r7, #28
 800228c:	46bd      	mov	sp, r7
 800228e:	bc80      	pop	{r7}
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	40023800 	.word	0x40023800
 8002298:	40007000 	.word	0x40007000
 800229c:	40023c00 	.word	0x40023c00

080022a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e06e      	b.n	8002390 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d108      	bne.n	80022cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022c2:	d009      	beq.n	80022d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	61da      	str	r2, [r3, #28]
 80022ca:	e005      	b.n	80022d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d106      	bne.n	80022f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7fe fa9e 	bl	8000834 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2202      	movs	r2, #2
 80022fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800230e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002320:	431a      	orrs	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800232a:	431a      	orrs	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	431a      	orrs	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	431a      	orrs	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002348:	431a      	orrs	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002352:	431a      	orrs	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800235c:	ea42 0103 	orr.w	r1, r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002364:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	430a      	orrs	r2, r1
 800236e:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	0c1a      	lsrs	r2, r3, #16
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f002 0204 	and.w	r2, r2, #4
 800237e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b088      	sub	sp, #32
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	603b      	str	r3, [r7, #0]
 80023a4:	4613      	mov	r3, r2
 80023a6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80023a8:	2300      	movs	r3, #0
 80023aa:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d101      	bne.n	80023ba <HAL_SPI_Transmit+0x22>
 80023b6:	2302      	movs	r3, #2
 80023b8:	e126      	b.n	8002608 <HAL_SPI_Transmit+0x270>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2201      	movs	r2, #1
 80023be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023c2:	f7fe fee7 	bl	8001194 <HAL_GetTick>
 80023c6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80023c8:	88fb      	ldrh	r3, [r7, #6]
 80023ca:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d002      	beq.n	80023de <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80023d8:	2302      	movs	r3, #2
 80023da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80023dc:	e10b      	b.n	80025f6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d002      	beq.n	80023ea <HAL_SPI_Transmit+0x52>
 80023e4:	88fb      	ldrh	r3, [r7, #6]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d102      	bne.n	80023f0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	77fb      	strb	r3, [r7, #31]
    goto error;
 80023ee:	e102      	b.n	80025f6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2203      	movs	r2, #3
 80023f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	68ba      	ldr	r2, [r7, #8]
 8002402:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	88fa      	ldrh	r2, [r7, #6]
 8002408:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	88fa      	ldrh	r2, [r7, #6]
 800240e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2200      	movs	r2, #0
 8002426:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002436:	d10f      	bne.n	8002458 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002446:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002456:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002462:	2b40      	cmp	r3, #64	; 0x40
 8002464:	d007      	beq.n	8002476 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002474:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800247e:	d14b      	bne.n	8002518 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d002      	beq.n	800248e <HAL_SPI_Transmit+0xf6>
 8002488:	8afb      	ldrh	r3, [r7, #22]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d13e      	bne.n	800250c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	881a      	ldrh	r2, [r3, #0]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	1c9a      	adds	r2, r3, #2
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	3b01      	subs	r3, #1
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80024b2:	e02b      	b.n	800250c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d112      	bne.n	80024e8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	881a      	ldrh	r2, [r3, #0]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	1c9a      	adds	r2, r3, #2
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024dc:	b29b      	uxth	r3, r3
 80024de:	3b01      	subs	r3, #1
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	86da      	strh	r2, [r3, #54]	; 0x36
 80024e6:	e011      	b.n	800250c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024e8:	f7fe fe54 	bl	8001194 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d803      	bhi.n	8002500 <HAL_SPI_Transmit+0x168>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024fe:	d102      	bne.n	8002506 <HAL_SPI_Transmit+0x16e>
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d102      	bne.n	800250c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	77fb      	strb	r3, [r7, #31]
          goto error;
 800250a:	e074      	b.n	80025f6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002510:	b29b      	uxth	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1ce      	bne.n	80024b4 <HAL_SPI_Transmit+0x11c>
 8002516:	e04c      	b.n	80025b2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d002      	beq.n	8002526 <HAL_SPI_Transmit+0x18e>
 8002520:	8afb      	ldrh	r3, [r7, #22]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d140      	bne.n	80025a8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	330c      	adds	r3, #12
 8002530:	7812      	ldrb	r2, [r2, #0]
 8002532:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002538:	1c5a      	adds	r2, r3, #1
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002542:	b29b      	uxth	r3, r3
 8002544:	3b01      	subs	r3, #1
 8002546:	b29a      	uxth	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800254c:	e02c      	b.n	80025a8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b02      	cmp	r3, #2
 800255a:	d113      	bne.n	8002584 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	330c      	adds	r3, #12
 8002566:	7812      	ldrb	r2, [r2, #0]
 8002568:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	1c5a      	adds	r2, r3, #1
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002578:	b29b      	uxth	r3, r3
 800257a:	3b01      	subs	r3, #1
 800257c:	b29a      	uxth	r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	86da      	strh	r2, [r3, #54]	; 0x36
 8002582:	e011      	b.n	80025a8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002584:	f7fe fe06 	bl	8001194 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	429a      	cmp	r2, r3
 8002592:	d803      	bhi.n	800259c <HAL_SPI_Transmit+0x204>
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800259a:	d102      	bne.n	80025a2 <HAL_SPI_Transmit+0x20a>
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d102      	bne.n	80025a8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80025a6:	e026      	b.n	80025f6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1cd      	bne.n	800254e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	6839      	ldr	r1, [r7, #0]
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 fcd2 	bl	8002f60 <SPI_EndRxTxTransaction>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d002      	beq.n	80025c8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2220      	movs	r2, #32
 80025c6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d10a      	bne.n	80025e6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025d0:	2300      	movs	r3, #0
 80025d2:	613b      	str	r3, [r7, #16]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	613b      	str	r3, [r7, #16]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	613b      	str	r3, [r7, #16]
 80025e4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d002      	beq.n	80025f4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	77fb      	strb	r3, [r7, #31]
 80025f2:	e000      	b.n	80025f6 <HAL_SPI_Transmit+0x25e>
  }

error:
 80025f4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002606:	7ffb      	ldrb	r3, [r7, #31]
}
 8002608:	4618      	mov	r0, r3
 800260a:	3720      	adds	r7, #32
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b088      	sub	sp, #32
 8002614:	af02      	add	r7, sp, #8
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	603b      	str	r3, [r7, #0]
 800261c:	4613      	mov	r3, r2
 800261e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002620:	2300      	movs	r3, #0
 8002622:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800262c:	d112      	bne.n	8002654 <HAL_SPI_Receive+0x44>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10e      	bne.n	8002654 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2204      	movs	r2, #4
 800263a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800263e:	88fa      	ldrh	r2, [r7, #6]
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	4613      	mov	r3, r2
 8002646:	68ba      	ldr	r2, [r7, #8]
 8002648:	68b9      	ldr	r1, [r7, #8]
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f000 f8f1 	bl	8002832 <HAL_SPI_TransmitReceive>
 8002650:	4603      	mov	r3, r0
 8002652:	e0ea      	b.n	800282a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800265a:	2b01      	cmp	r3, #1
 800265c:	d101      	bne.n	8002662 <HAL_SPI_Receive+0x52>
 800265e:	2302      	movs	r3, #2
 8002660:	e0e3      	b.n	800282a <HAL_SPI_Receive+0x21a>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800266a:	f7fe fd93 	bl	8001194 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b01      	cmp	r3, #1
 800267a:	d002      	beq.n	8002682 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800267c:	2302      	movs	r3, #2
 800267e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002680:	e0ca      	b.n	8002818 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d002      	beq.n	800268e <HAL_SPI_Receive+0x7e>
 8002688:	88fb      	ldrh	r3, [r7, #6]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d102      	bne.n	8002694 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002692:	e0c1      	b.n	8002818 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2204      	movs	r2, #4
 8002698:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	68ba      	ldr	r2, [r7, #8]
 80026a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	88fa      	ldrh	r2, [r7, #6]
 80026ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	88fa      	ldrh	r2, [r7, #6]
 80026b2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2200      	movs	r2, #0
 80026be:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026da:	d10f      	bne.n	80026fc <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026ea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80026fa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002706:	2b40      	cmp	r3, #64	; 0x40
 8002708:	d007      	beq.n	800271a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002718:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d162      	bne.n	80027e8 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002722:	e02e      	b.n	8002782 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b01      	cmp	r3, #1
 8002730:	d115      	bne.n	800275e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f103 020c 	add.w	r2, r3, #12
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800273e:	7812      	ldrb	r2, [r2, #0]
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002748:	1c5a      	adds	r2, r3, #1
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002752:	b29b      	uxth	r3, r3
 8002754:	3b01      	subs	r3, #1
 8002756:	b29a      	uxth	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800275c:	e011      	b.n	8002782 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800275e:	f7fe fd19 	bl	8001194 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	429a      	cmp	r2, r3
 800276c:	d803      	bhi.n	8002776 <HAL_SPI_Receive+0x166>
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002774:	d102      	bne.n	800277c <HAL_SPI_Receive+0x16c>
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d102      	bne.n	8002782 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002780:	e04a      	b.n	8002818 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002786:	b29b      	uxth	r3, r3
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1cb      	bne.n	8002724 <HAL_SPI_Receive+0x114>
 800278c:	e031      	b.n	80027f2 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	2b01      	cmp	r3, #1
 800279a:	d113      	bne.n	80027c4 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a6:	b292      	uxth	r2, r2
 80027a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ae:	1c9a      	adds	r2, r3, #2
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	3b01      	subs	r3, #1
 80027bc:	b29a      	uxth	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80027c2:	e011      	b.n	80027e8 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027c4:	f7fe fce6 	bl	8001194 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d803      	bhi.n	80027dc <HAL_SPI_Receive+0x1cc>
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027da:	d102      	bne.n	80027e2 <HAL_SPI_Receive+0x1d2>
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d102      	bne.n	80027e8 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80027e6:	e017      	b.n	8002818 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1cd      	bne.n	800278e <HAL_SPI_Receive+0x17e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	6839      	ldr	r1, [r7, #0]
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f000 fb4c 	bl	8002e94 <SPI_EndRxTransaction>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d002      	beq.n	8002808 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2220      	movs	r2, #32
 8002806:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280c:	2b00      	cmp	r3, #0
 800280e:	d002      	beq.n	8002816 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	75fb      	strb	r3, [r7, #23]
 8002814:	e000      	b.n	8002818 <HAL_SPI_Receive+0x208>
  }

error :
 8002816:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002828:	7dfb      	ldrb	r3, [r7, #23]
}
 800282a:	4618      	mov	r0, r3
 800282c:	3718      	adds	r7, #24
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b08c      	sub	sp, #48	; 0x30
 8002836:	af00      	add	r7, sp, #0
 8002838:	60f8      	str	r0, [r7, #12]
 800283a:	60b9      	str	r1, [r7, #8]
 800283c:	607a      	str	r2, [r7, #4]
 800283e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002840:	2301      	movs	r3, #1
 8002842:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002844:	2300      	movs	r3, #0
 8002846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002850:	2b01      	cmp	r3, #1
 8002852:	d101      	bne.n	8002858 <HAL_SPI_TransmitReceive+0x26>
 8002854:	2302      	movs	r3, #2
 8002856:	e18a      	b.n	8002b6e <HAL_SPI_TransmitReceive+0x33c>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002860:	f7fe fc98 	bl	8001194 <HAL_GetTick>
 8002864:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800286c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002876:	887b      	ldrh	r3, [r7, #2]
 8002878:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800287a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800287e:	2b01      	cmp	r3, #1
 8002880:	d00f      	beq.n	80028a2 <HAL_SPI_TransmitReceive+0x70>
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002888:	d107      	bne.n	800289a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d103      	bne.n	800289a <HAL_SPI_TransmitReceive+0x68>
 8002892:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002896:	2b04      	cmp	r3, #4
 8002898:	d003      	beq.n	80028a2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800289a:	2302      	movs	r3, #2
 800289c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80028a0:	e15b      	b.n	8002b5a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d005      	beq.n	80028b4 <HAL_SPI_TransmitReceive+0x82>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d002      	beq.n	80028b4 <HAL_SPI_TransmitReceive+0x82>
 80028ae:	887b      	ldrh	r3, [r7, #2]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d103      	bne.n	80028bc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80028ba:	e14e      	b.n	8002b5a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2b04      	cmp	r3, #4
 80028c6:	d003      	beq.n	80028d0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2205      	movs	r2, #5
 80028cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	887a      	ldrh	r2, [r7, #2]
 80028e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	887a      	ldrh	r2, [r7, #2]
 80028e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	887a      	ldrh	r2, [r7, #2]
 80028f2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	887a      	ldrh	r2, [r7, #2]
 80028f8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002910:	2b40      	cmp	r3, #64	; 0x40
 8002912:	d007      	beq.n	8002924 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002922:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800292c:	d178      	bne.n	8002a20 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d002      	beq.n	800293c <HAL_SPI_TransmitReceive+0x10a>
 8002936:	8b7b      	ldrh	r3, [r7, #26]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d166      	bne.n	8002a0a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002940:	881a      	ldrh	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294c:	1c9a      	adds	r2, r3, #2
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002956:	b29b      	uxth	r3, r3
 8002958:	3b01      	subs	r3, #1
 800295a:	b29a      	uxth	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002960:	e053      	b.n	8002a0a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b02      	cmp	r3, #2
 800296e:	d11b      	bne.n	80029a8 <HAL_SPI_TransmitReceive+0x176>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002974:	b29b      	uxth	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d016      	beq.n	80029a8 <HAL_SPI_TransmitReceive+0x176>
 800297a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297c:	2b01      	cmp	r3, #1
 800297e:	d113      	bne.n	80029a8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002984:	881a      	ldrh	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002990:	1c9a      	adds	r2, r3, #2
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800299a:	b29b      	uxth	r3, r3
 800299c:	3b01      	subs	r3, #1
 800299e:	b29a      	uxth	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d119      	bne.n	80029ea <HAL_SPI_TransmitReceive+0x1b8>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d014      	beq.n	80029ea <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68da      	ldr	r2, [r3, #12]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ca:	b292      	uxth	r2, r2
 80029cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d2:	1c9a      	adds	r2, r3, #2
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029dc:	b29b      	uxth	r3, r3
 80029de:	3b01      	subs	r3, #1
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029e6:	2301      	movs	r3, #1
 80029e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80029ea:	f7fe fbd3 	bl	8001194 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d807      	bhi.n	8002a0a <HAL_SPI_TransmitReceive+0x1d8>
 80029fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a00:	d003      	beq.n	8002a0a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002a08:	e0a7      	b.n	8002b5a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1a6      	bne.n	8002962 <HAL_SPI_TransmitReceive+0x130>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1a1      	bne.n	8002962 <HAL_SPI_TransmitReceive+0x130>
 8002a1e:	e07c      	b.n	8002b1a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d002      	beq.n	8002a2e <HAL_SPI_TransmitReceive+0x1fc>
 8002a28:	8b7b      	ldrh	r3, [r7, #26]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d16b      	bne.n	8002b06 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	330c      	adds	r3, #12
 8002a38:	7812      	ldrb	r2, [r2, #0]
 8002a3a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a40:	1c5a      	adds	r2, r3, #1
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a54:	e057      	b.n	8002b06 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d11c      	bne.n	8002a9e <HAL_SPI_TransmitReceive+0x26c>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d017      	beq.n	8002a9e <HAL_SPI_TransmitReceive+0x26c>
 8002a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d114      	bne.n	8002a9e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	330c      	adds	r3, #12
 8002a7e:	7812      	ldrb	r2, [r2, #0]
 8002a80:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	1c5a      	adds	r2, r3, #1
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	3b01      	subs	r3, #1
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d119      	bne.n	8002ae0 <HAL_SPI_TransmitReceive+0x2ae>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d014      	beq.n	8002ae0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68da      	ldr	r2, [r3, #12]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac0:	b2d2      	uxtb	r2, r2
 8002ac2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac8:	1c5a      	adds	r2, r3, #1
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002adc:	2301      	movs	r3, #1
 8002ade:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002ae0:	f7fe fb58 	bl	8001194 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d803      	bhi.n	8002af8 <HAL_SPI_TransmitReceive+0x2c6>
 8002af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af6:	d102      	bne.n	8002afe <HAL_SPI_TransmitReceive+0x2cc>
 8002af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d103      	bne.n	8002b06 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002b04:	e029      	b.n	8002b5a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1a2      	bne.n	8002a56 <HAL_SPI_TransmitReceive+0x224>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d19d      	bne.n	8002a56 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b1c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f000 fa1e 	bl	8002f60 <SPI_EndRxTxTransaction>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d006      	beq.n	8002b38 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2220      	movs	r2, #32
 8002b34:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002b36:	e010      	b.n	8002b5a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10b      	bne.n	8002b58 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b40:	2300      	movs	r3, #0
 8002b42:	617b      	str	r3, [r7, #20]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	617b      	str	r3, [r7, #20]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	617b      	str	r3, [r7, #20]
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	e000      	b.n	8002b5a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002b58:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3730      	adds	r7, #48	; 0x30
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
	...

08002b78 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b088      	sub	sp, #32
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	099b      	lsrs	r3, r3, #6
 8002b94:	f003 0301 	and.w	r3, r3, #1
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10f      	bne.n	8002bbc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00a      	beq.n	8002bbc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	099b      	lsrs	r3, r3, #6
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d004      	beq.n	8002bbc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	4798      	blx	r3
    return;
 8002bba:	e0bf      	b.n	8002d3c <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	085b      	lsrs	r3, r3, #1
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00a      	beq.n	8002bde <HAL_SPI_IRQHandler+0x66>
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	09db      	lsrs	r3, r3, #7
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d004      	beq.n	8002bde <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	4798      	blx	r3
    return;
 8002bdc:	e0ae      	b.n	8002d3c <HAL_SPI_IRQHandler+0x1c4>
  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#else
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	095b      	lsrs	r3, r3, #5
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d106      	bne.n	8002bf8 <HAL_SPI_IRQHandler+0x80>
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	099b      	lsrs	r3, r3, #6
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f000 80a2 	beq.w	8002d3c <HAL_SPI_IRQHandler+0x1c4>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	095b      	lsrs	r3, r3, #5
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 809b 	beq.w	8002d3c <HAL_SPI_IRQHandler+0x1c4>
#endif
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	099b      	lsrs	r3, r3, #6
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d023      	beq.n	8002c5a <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b03      	cmp	r3, #3
 8002c1c:	d011      	beq.n	8002c42 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c22:	f043 0204 	orr.w	r2, r3, #4
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	617b      	str	r3, [r7, #20]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	617b      	str	r3, [r7, #20]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	617b      	str	r3, [r7, #20]
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	e00b      	b.n	8002c5a <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c42:	2300      	movs	r3, #0
 8002c44:	613b      	str	r3, [r7, #16]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	613b      	str	r3, [r7, #16]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	613b      	str	r3, [r7, #16]
 8002c56:	693b      	ldr	r3, [r7, #16]
        return;
 8002c58:	e070      	b.n	8002d3c <HAL_SPI_IRQHandler+0x1c4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	095b      	lsrs	r3, r3, #5
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d014      	beq.n	8002c90 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c6a:	f043 0201 	orr.w	r2, r3, #1
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002c72:	2300      	movs	r3, #0
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
      __HAL_SPI_CLEAR_FREFLAG(hspi);
    }
#endif

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d050      	beq.n	8002d3a <HAL_SPI_IRQHandler+0x1c2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	685a      	ldr	r2, [r3, #4]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ca6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d104      	bne.n	8002cc4 <HAL_SPI_IRQHandler+0x14c>
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d034      	beq.n	8002d2e <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 0203 	bic.w	r2, r2, #3
 8002cd2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d011      	beq.n	8002d00 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce0:	4a18      	ldr	r2, [pc, #96]	; (8002d44 <HAL_SPI_IRQHandler+0x1cc>)
 8002ce2:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7fe fb6a 	bl	80013c2 <HAL_DMA_Abort_IT>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d005      	beq.n	8002d00 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d016      	beq.n	8002d36 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d0c:	4a0d      	ldr	r2, [pc, #52]	; (8002d44 <HAL_SPI_IRQHandler+0x1cc>)
 8002d0e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7fe fb54 	bl	80013c2 <HAL_DMA_Abort_IT>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00a      	beq.n	8002d36 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d24:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002d2c:	e003      	b.n	8002d36 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f80a 	bl	8002d48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002d34:	e000      	b.n	8002d38 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8002d36:	bf00      	nop
    return;
 8002d38:	bf00      	nop
 8002d3a:	bf00      	nop
  }
}
 8002d3c:	3720      	adds	r7, #32
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	08002d5b 	.word	0x08002d5b

08002d48 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bc80      	pop	{r7}
 8002d58:	4770      	bx	lr

08002d5a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b084      	sub	sp, #16
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d66:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f7ff ffe7 	bl	8002d48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002d7a:	bf00      	nop
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
	...

08002d84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b088      	sub	sp, #32
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	603b      	str	r3, [r7, #0]
 8002d90:	4613      	mov	r3, r2
 8002d92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d94:	f7fe f9fe 	bl	8001194 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9c:	1a9b      	subs	r3, r3, r2
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	4413      	add	r3, r2
 8002da2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002da4:	f7fe f9f6 	bl	8001194 <HAL_GetTick>
 8002da8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002daa:	4b39      	ldr	r3, [pc, #228]	; (8002e90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	015b      	lsls	r3, r3, #5
 8002db0:	0d1b      	lsrs	r3, r3, #20
 8002db2:	69fa      	ldr	r2, [r7, #28]
 8002db4:	fb02 f303 	mul.w	r3, r2, r3
 8002db8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002dba:	e054      	b.n	8002e66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc2:	d050      	beq.n	8002e66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002dc4:	f7fe f9e6 	bl	8001194 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	69fa      	ldr	r2, [r7, #28]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d902      	bls.n	8002dda <SPI_WaitFlagStateUntilTimeout+0x56>
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d13d      	bne.n	8002e56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002de8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002df2:	d111      	bne.n	8002e18 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dfc:	d004      	beq.n	8002e08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e06:	d107      	bne.n	8002e18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e20:	d10f      	bne.n	8002e42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e017      	b.n	8002e86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	3b01      	subs	r3, #1
 8002e64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	bf0c      	ite	eq
 8002e76:	2301      	moveq	r3, #1
 8002e78:	2300      	movne	r3, #0
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	79fb      	ldrb	r3, [r7, #7]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d19b      	bne.n	8002dbc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3720      	adds	r7, #32
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	20000000 	.word	0x20000000

08002e94 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af02      	add	r7, sp, #8
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ea8:	d111      	bne.n	8002ece <SPI_EndRxTransaction+0x3a>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eb2:	d004      	beq.n	8002ebe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ebc:	d107      	bne.n	8002ece <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ecc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ed6:	d12a      	bne.n	8002f2e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ee0:	d012      	beq.n	8002f08 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	2180      	movs	r1, #128	; 0x80
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f7ff ff49 	bl	8002d84 <SPI_WaitFlagStateUntilTimeout>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d02d      	beq.n	8002f54 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002efc:	f043 0220 	orr.w	r2, r3, #32
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e026      	b.n	8002f56 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	2101      	movs	r1, #1
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f7ff ff36 	bl	8002d84 <SPI_WaitFlagStateUntilTimeout>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d01a      	beq.n	8002f54 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f22:	f043 0220 	orr.w	r2, r3, #32
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e013      	b.n	8002f56 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	9300      	str	r3, [sp, #0]
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2200      	movs	r2, #0
 8002f36:	2101      	movs	r1, #1
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f7ff ff23 	bl	8002d84 <SPI_WaitFlagStateUntilTimeout>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d007      	beq.n	8002f54 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f48:	f043 0220 	orr.w	r2, r3, #32
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e000      	b.n	8002f56 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
	...

08002f60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b088      	sub	sp, #32
 8002f64:	af02      	add	r7, sp, #8
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002f6c:	4b1b      	ldr	r3, [pc, #108]	; (8002fdc <SPI_EndRxTxTransaction+0x7c>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a1b      	ldr	r2, [pc, #108]	; (8002fe0 <SPI_EndRxTxTransaction+0x80>)
 8002f72:	fba2 2303 	umull	r2, r3, r2, r3
 8002f76:	0d5b      	lsrs	r3, r3, #21
 8002f78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f7c:	fb02 f303 	mul.w	r3, r2, r3
 8002f80:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f8a:	d112      	bne.n	8002fb2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	2200      	movs	r2, #0
 8002f94:	2180      	movs	r1, #128	; 0x80
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f7ff fef4 	bl	8002d84 <SPI_WaitFlagStateUntilTimeout>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d016      	beq.n	8002fd0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa6:	f043 0220 	orr.w	r2, r3, #32
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e00f      	b.n	8002fd2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00a      	beq.n	8002fce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc8:	2b80      	cmp	r3, #128	; 0x80
 8002fca:	d0f2      	beq.n	8002fb2 <SPI_EndRxTxTransaction+0x52>
 8002fcc:	e000      	b.n	8002fd0 <SPI_EndRxTxTransaction+0x70>
        break;
 8002fce:	bf00      	nop
  }

  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3718      	adds	r7, #24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	20000000 	.word	0x20000000
 8002fe0:	165e9f81 	.word	0x165e9f81

08002fe4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e03f      	b.n	8003076 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d106      	bne.n	8003010 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7fd fc5e 	bl	80008cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2224      	movs	r2, #36	; 0x24
 8003014:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003026:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 fa63 	bl	80034f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	691a      	ldr	r2, [r3, #16]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800303c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	695a      	ldr	r2, [r3, #20]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800304c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68da      	ldr	r2, [r3, #12]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800305c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2220      	movs	r2, #32
 8003068:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2220      	movs	r2, #32
 8003070:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
	...

08003080 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b088      	sub	sp, #32
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80030a4:	2300      	movs	r3, #0
 80030a6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10d      	bne.n	80030d2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	f003 0320 	and.w	r3, r3, #32
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d008      	beq.n	80030d2 <HAL_UART_IRQHandler+0x52>
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	f003 0320 	and.w	r3, r3, #32
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 f991 	bl	80033f2 <UART_Receive_IT>
      return;
 80030d0:	e0d1      	b.n	8003276 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f000 80b0 	beq.w	800323a <HAL_UART_IRQHandler+0x1ba>
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d105      	bne.n	80030f0 <HAL_UART_IRQHandler+0x70>
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f000 80a5 	beq.w	800323a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00a      	beq.n	8003110 <HAL_UART_IRQHandler+0x90>
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003100:	2b00      	cmp	r3, #0
 8003102:	d005      	beq.n	8003110 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003108:	f043 0201 	orr.w	r2, r3, #1
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	f003 0304 	and.w	r3, r3, #4
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00a      	beq.n	8003130 <HAL_UART_IRQHandler+0xb0>
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	2b00      	cmp	r3, #0
 8003122:	d005      	beq.n	8003130 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003128:	f043 0202 	orr.w	r2, r3, #2
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00a      	beq.n	8003150 <HAL_UART_IRQHandler+0xd0>
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	2b00      	cmp	r3, #0
 8003142:	d005      	beq.n	8003150 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003148:	f043 0204 	orr.w	r2, r3, #4
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00f      	beq.n	800317a <HAL_UART_IRQHandler+0xfa>
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	f003 0320 	and.w	r3, r3, #32
 8003160:	2b00      	cmp	r3, #0
 8003162:	d104      	bne.n	800316e <HAL_UART_IRQHandler+0xee>
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d005      	beq.n	800317a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003172:	f043 0208 	orr.w	r2, r3, #8
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800317e:	2b00      	cmp	r3, #0
 8003180:	d078      	beq.n	8003274 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	f003 0320 	and.w	r3, r3, #32
 8003188:	2b00      	cmp	r3, #0
 800318a:	d007      	beq.n	800319c <HAL_UART_IRQHandler+0x11c>
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	f003 0320 	and.w	r3, r3, #32
 8003192:	2b00      	cmp	r3, #0
 8003194:	d002      	beq.n	800319c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f92b 	bl	80033f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a6:	2b40      	cmp	r3, #64	; 0x40
 80031a8:	bf0c      	ite	eq
 80031aa:	2301      	moveq	r3, #1
 80031ac:	2300      	movne	r3, #0
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b6:	f003 0308 	and.w	r3, r3, #8
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d102      	bne.n	80031c4 <HAL_UART_IRQHandler+0x144>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d031      	beq.n	8003228 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 f876 	bl	80032b6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d4:	2b40      	cmp	r3, #64	; 0x40
 80031d6:	d123      	bne.n	8003220 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695a      	ldr	r2, [r3, #20]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031e6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d013      	beq.n	8003218 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f4:	4a21      	ldr	r2, [pc, #132]	; (800327c <HAL_UART_IRQHandler+0x1fc>)
 80031f6:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7fe f8e0 	bl	80013c2 <HAL_DMA_Abort_IT>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d016      	beq.n	8003236 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800320c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003212:	4610      	mov	r0, r2
 8003214:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003216:	e00e      	b.n	8003236 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f000 f843 	bl	80032a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800321e:	e00a      	b.n	8003236 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 f83f 	bl	80032a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003226:	e006      	b.n	8003236 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 f83b 	bl	80032a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003234:	e01e      	b.n	8003274 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003236:	bf00      	nop
    return;
 8003238:	e01c      	b.n	8003274 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003240:	2b00      	cmp	r3, #0
 8003242:	d008      	beq.n	8003256 <HAL_UART_IRQHandler+0x1d6>
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800324a:	2b00      	cmp	r3, #0
 800324c:	d003      	beq.n	8003256 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f862 	bl	8003318 <UART_Transmit_IT>
    return;
 8003254:	e00f      	b.n	8003276 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00a      	beq.n	8003276 <HAL_UART_IRQHandler+0x1f6>
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003266:	2b00      	cmp	r3, #0
 8003268:	d005      	beq.n	8003276 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f8a9 	bl	80033c2 <UART_EndTransmit_IT>
    return;
 8003270:	bf00      	nop
 8003272:	e000      	b.n	8003276 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003274:	bf00      	nop
  }
}
 8003276:	3720      	adds	r7, #32
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	080032f1 	.word	0x080032f1

08003280 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	bc80      	pop	{r7}
 8003290:	4770      	bx	lr

08003292 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003292:	b480      	push	{r7}
 8003294:	b083      	sub	sp, #12
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	bc80      	pop	{r7}
 80032a2:	4770      	bx	lr

080032a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bc80      	pop	{r7}
 80032b4:	4770      	bx	lr

080032b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032b6:	b480      	push	{r7}
 80032b8:	b083      	sub	sp, #12
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68da      	ldr	r2, [r3, #12]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80032cc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	695a      	ldr	r2, [r3, #20]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 0201 	bic.w	r2, r2, #1
 80032dc:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2220      	movs	r2, #32
 80032e2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bc80      	pop	{r7}
 80032ee:	4770      	bx	lr

080032f0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f7ff ffca 	bl	80032a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003310:	bf00      	nop
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003326:	b2db      	uxtb	r3, r3
 8003328:	2b21      	cmp	r3, #33	; 0x21
 800332a:	d144      	bne.n	80033b6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003334:	d11a      	bne.n	800336c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	881b      	ldrh	r3, [r3, #0]
 8003340:	461a      	mov	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800334a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d105      	bne.n	8003360 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	1c9a      	adds	r2, r3, #2
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	621a      	str	r2, [r3, #32]
 800335e:	e00e      	b.n	800337e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	1c5a      	adds	r2, r3, #1
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	621a      	str	r2, [r3, #32]
 800336a:	e008      	b.n	800337e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	1c59      	adds	r1, r3, #1
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	6211      	str	r1, [r2, #32]
 8003376:	781a      	ldrb	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003382:	b29b      	uxth	r3, r3
 8003384:	3b01      	subs	r3, #1
 8003386:	b29b      	uxth	r3, r3
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	4619      	mov	r1, r3
 800338c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10f      	bne.n	80033b2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68da      	ldr	r2, [r3, #12]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68da      	ldr	r2, [r3, #12]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80033b2:	2300      	movs	r3, #0
 80033b4:	e000      	b.n	80033b8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80033b6:	2302      	movs	r3, #2
  }
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3714      	adds	r7, #20
 80033bc:	46bd      	mov	sp, r7
 80033be:	bc80      	pop	{r7}
 80033c0:	4770      	bx	lr

080033c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b082      	sub	sp, #8
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68da      	ldr	r2, [r3, #12]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2220      	movs	r2, #32
 80033de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f7ff ff4c 	bl	8003280 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b084      	sub	sp, #16
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b22      	cmp	r3, #34	; 0x22
 8003404:	d171      	bne.n	80034ea <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800340e:	d123      	bne.n	8003458 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003414:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10e      	bne.n	800343c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	b29b      	uxth	r3, r3
 8003426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800342a:	b29a      	uxth	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003434:	1c9a      	adds	r2, r3, #2
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	629a      	str	r2, [r3, #40]	; 0x28
 800343a:	e029      	b.n	8003490 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	b29b      	uxth	r3, r3
 8003444:	b2db      	uxtb	r3, r3
 8003446:	b29a      	uxth	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003450:	1c5a      	adds	r2, r3, #1
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	629a      	str	r2, [r3, #40]	; 0x28
 8003456:	e01b      	b.n	8003490 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10a      	bne.n	8003476 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6858      	ldr	r0, [r3, #4]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346a:	1c59      	adds	r1, r3, #1
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	6291      	str	r1, [r2, #40]	; 0x28
 8003470:	b2c2      	uxtb	r2, r0
 8003472:	701a      	strb	r2, [r3, #0]
 8003474:	e00c      	b.n	8003490 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	b2da      	uxtb	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003482:	1c58      	adds	r0, r3, #1
 8003484:	6879      	ldr	r1, [r7, #4]
 8003486:	6288      	str	r0, [r1, #40]	; 0x28
 8003488:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800348c:	b2d2      	uxtb	r2, r2
 800348e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003494:	b29b      	uxth	r3, r3
 8003496:	3b01      	subs	r3, #1
 8003498:	b29b      	uxth	r3, r3
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	4619      	mov	r1, r3
 800349e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d120      	bne.n	80034e6 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68da      	ldr	r2, [r3, #12]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 0220 	bic.w	r2, r2, #32
 80034b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68da      	ldr	r2, [r3, #12]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	695a      	ldr	r2, [r3, #20]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 0201 	bic.w	r2, r2, #1
 80034d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f7ff fed8 	bl	8003292 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80034e2:	2300      	movs	r3, #0
 80034e4:	e002      	b.n	80034ec <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80034e6:	2300      	movs	r3, #0
 80034e8:	e000      	b.n	80034ec <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80034ea:	2302      	movs	r3, #2
  }
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	689a      	ldr	r2, [r3, #8]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	431a      	orrs	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	431a      	orrs	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	4313      	orrs	r3, r2
 8003528:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003534:	f023 030c 	bic.w	r3, r3, #12
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	6812      	ldr	r2, [r2, #0]
 800353c:	68b9      	ldr	r1, [r7, #8]
 800353e:	430b      	orrs	r3, r1
 8003540:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	699a      	ldr	r2, [r3, #24]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	430a      	orrs	r2, r1
 8003556:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a55      	ldr	r2, [pc, #340]	; (80036b4 <UART_SetConfig+0x1c0>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d103      	bne.n	800356a <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003562:	f7fe fe29 	bl	80021b8 <HAL_RCC_GetPCLK2Freq>
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	e002      	b.n	8003570 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800356a:	f7fe fe11 	bl	8002190 <HAL_RCC_GetPCLK1Freq>
 800356e:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	69db      	ldr	r3, [r3, #28]
 8003574:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003578:	d14c      	bne.n	8003614 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	4613      	mov	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	009a      	lsls	r2, r3, #2
 8003584:	441a      	add	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	005b      	lsls	r3, r3, #1
 800358c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003590:	4a49      	ldr	r2, [pc, #292]	; (80036b8 <UART_SetConfig+0x1c4>)
 8003592:	fba2 2303 	umull	r2, r3, r2, r3
 8003596:	095b      	lsrs	r3, r3, #5
 8003598:	0119      	lsls	r1, r3, #4
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	4613      	mov	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	4413      	add	r3, r2
 80035a2:	009a      	lsls	r2, r3, #2
 80035a4:	441a      	add	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	005b      	lsls	r3, r3, #1
 80035ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80035b0:	4b41      	ldr	r3, [pc, #260]	; (80036b8 <UART_SetConfig+0x1c4>)
 80035b2:	fba3 0302 	umull	r0, r3, r3, r2
 80035b6:	095b      	lsrs	r3, r3, #5
 80035b8:	2064      	movs	r0, #100	; 0x64
 80035ba:	fb00 f303 	mul.w	r3, r0, r3
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	00db      	lsls	r3, r3, #3
 80035c2:	3332      	adds	r3, #50	; 0x32
 80035c4:	4a3c      	ldr	r2, [pc, #240]	; (80036b8 <UART_SetConfig+0x1c4>)
 80035c6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ca:	095b      	lsrs	r3, r3, #5
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80035d2:	4419      	add	r1, r3
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	4613      	mov	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4413      	add	r3, r2
 80035dc:	009a      	lsls	r2, r3, #2
 80035de:	441a      	add	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80035ea:	4b33      	ldr	r3, [pc, #204]	; (80036b8 <UART_SetConfig+0x1c4>)
 80035ec:	fba3 0302 	umull	r0, r3, r3, r2
 80035f0:	095b      	lsrs	r3, r3, #5
 80035f2:	2064      	movs	r0, #100	; 0x64
 80035f4:	fb00 f303 	mul.w	r3, r0, r3
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	3332      	adds	r3, #50	; 0x32
 80035fe:	4a2e      	ldr	r2, [pc, #184]	; (80036b8 <UART_SetConfig+0x1c4>)
 8003600:	fba2 2303 	umull	r2, r3, r2, r3
 8003604:	095b      	lsrs	r3, r3, #5
 8003606:	f003 0207 	and.w	r2, r3, #7
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	440a      	add	r2, r1
 8003610:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003612:	e04a      	b.n	80036aa <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	4613      	mov	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4413      	add	r3, r2
 800361c:	009a      	lsls	r2, r3, #2
 800361e:	441a      	add	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	fbb2 f3f3 	udiv	r3, r2, r3
 800362a:	4a23      	ldr	r2, [pc, #140]	; (80036b8 <UART_SetConfig+0x1c4>)
 800362c:	fba2 2303 	umull	r2, r3, r2, r3
 8003630:	095b      	lsrs	r3, r3, #5
 8003632:	0119      	lsls	r1, r3, #4
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	4613      	mov	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4413      	add	r3, r2
 800363c:	009a      	lsls	r2, r3, #2
 800363e:	441a      	add	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	fbb2 f2f3 	udiv	r2, r2, r3
 800364a:	4b1b      	ldr	r3, [pc, #108]	; (80036b8 <UART_SetConfig+0x1c4>)
 800364c:	fba3 0302 	umull	r0, r3, r3, r2
 8003650:	095b      	lsrs	r3, r3, #5
 8003652:	2064      	movs	r0, #100	; 0x64
 8003654:	fb00 f303 	mul.w	r3, r0, r3
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	011b      	lsls	r3, r3, #4
 800365c:	3332      	adds	r3, #50	; 0x32
 800365e:	4a16      	ldr	r2, [pc, #88]	; (80036b8 <UART_SetConfig+0x1c4>)
 8003660:	fba2 2303 	umull	r2, r3, r2, r3
 8003664:	095b      	lsrs	r3, r3, #5
 8003666:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800366a:	4419      	add	r1, r3
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	4613      	mov	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	009a      	lsls	r2, r3, #2
 8003676:	441a      	add	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003682:	4b0d      	ldr	r3, [pc, #52]	; (80036b8 <UART_SetConfig+0x1c4>)
 8003684:	fba3 0302 	umull	r0, r3, r3, r2
 8003688:	095b      	lsrs	r3, r3, #5
 800368a:	2064      	movs	r0, #100	; 0x64
 800368c:	fb00 f303 	mul.w	r3, r0, r3
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	3332      	adds	r3, #50	; 0x32
 8003696:	4a08      	ldr	r2, [pc, #32]	; (80036b8 <UART_SetConfig+0x1c4>)
 8003698:	fba2 2303 	umull	r2, r3, r2, r3
 800369c:	095b      	lsrs	r3, r3, #5
 800369e:	f003 020f 	and.w	r2, r3, #15
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	440a      	add	r2, r1
 80036a8:	609a      	str	r2, [r3, #8]
}
 80036aa:	bf00      	nop
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	40013800 	.word	0x40013800
 80036b8:	51eb851f 	.word	0x51eb851f

080036bc <__libc_init_array>:
 80036bc:	b570      	push	{r4, r5, r6, lr}
 80036be:	2500      	movs	r5, #0
 80036c0:	4e0c      	ldr	r6, [pc, #48]	; (80036f4 <__libc_init_array+0x38>)
 80036c2:	4c0d      	ldr	r4, [pc, #52]	; (80036f8 <__libc_init_array+0x3c>)
 80036c4:	1ba4      	subs	r4, r4, r6
 80036c6:	10a4      	asrs	r4, r4, #2
 80036c8:	42a5      	cmp	r5, r4
 80036ca:	d109      	bne.n	80036e0 <__libc_init_array+0x24>
 80036cc:	f000 f822 	bl	8003714 <_init>
 80036d0:	2500      	movs	r5, #0
 80036d2:	4e0a      	ldr	r6, [pc, #40]	; (80036fc <__libc_init_array+0x40>)
 80036d4:	4c0a      	ldr	r4, [pc, #40]	; (8003700 <__libc_init_array+0x44>)
 80036d6:	1ba4      	subs	r4, r4, r6
 80036d8:	10a4      	asrs	r4, r4, #2
 80036da:	42a5      	cmp	r5, r4
 80036dc:	d105      	bne.n	80036ea <__libc_init_array+0x2e>
 80036de:	bd70      	pop	{r4, r5, r6, pc}
 80036e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80036e4:	4798      	blx	r3
 80036e6:	3501      	adds	r5, #1
 80036e8:	e7ee      	b.n	80036c8 <__libc_init_array+0xc>
 80036ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80036ee:	4798      	blx	r3
 80036f0:	3501      	adds	r5, #1
 80036f2:	e7f2      	b.n	80036da <__libc_init_array+0x1e>
 80036f4:	0800375c 	.word	0x0800375c
 80036f8:	0800375c 	.word	0x0800375c
 80036fc:	0800375c 	.word	0x0800375c
 8003700:	08003760 	.word	0x08003760

08003704 <memset>:
 8003704:	4603      	mov	r3, r0
 8003706:	4402      	add	r2, r0
 8003708:	4293      	cmp	r3, r2
 800370a:	d100      	bne.n	800370e <memset+0xa>
 800370c:	4770      	bx	lr
 800370e:	f803 1b01 	strb.w	r1, [r3], #1
 8003712:	e7f9      	b.n	8003708 <memset+0x4>

08003714 <_init>:
 8003714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003716:	bf00      	nop
 8003718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800371a:	bc08      	pop	{r3}
 800371c:	469e      	mov	lr, r3
 800371e:	4770      	bx	lr

08003720 <_fini>:
 8003720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003722:	bf00      	nop
 8003724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003726:	bc08      	pop	{r3}
 8003728:	469e      	mov	lr, r3
 800372a:	4770      	bx	lr
