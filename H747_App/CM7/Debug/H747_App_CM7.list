
H747_App_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ce0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  08007f80  08007f80  00017f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008328  08008328  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008328  08008328  00018328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008330  08008330  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008330  08008330  00018330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008334  08008334  00018334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  08008338  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  24000074  080083ac  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240002f0  080083ac  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001982d  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d97  00000000  00000000  000398cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc0  00000000  00000000  0003c668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be8  00000000  00000000  0003d328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003f408  00000000  00000000  0003df10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000104cd  00000000  00000000  0007d318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001957c2  00000000  00000000  0008d7e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00222fa7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004000  00000000  00000000  00222ffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08007f68 	.word	0x08007f68

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	08007f68 	.word	0x08007f68

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800068c:	4b3f      	ldr	r3, [pc, #252]	; (800078c <SystemInit+0x104>)
 800068e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000692:	4a3e      	ldr	r2, [pc, #248]	; (800078c <SystemInit+0x104>)
 8000694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800069c:	4b3b      	ldr	r3, [pc, #236]	; (800078c <SystemInit+0x104>)
 800069e:	691b      	ldr	r3, [r3, #16]
 80006a0:	4a3a      	ldr	r2, [pc, #232]	; (800078c <SystemInit+0x104>)
 80006a2:	f043 0310 	orr.w	r3, r3, #16
 80006a6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0x108>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f003 030f 	and.w	r3, r3, #15
 80006b0:	2b06      	cmp	r3, #6
 80006b2:	d807      	bhi.n	80006c4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b4:	4b36      	ldr	r3, [pc, #216]	; (8000790 <SystemInit+0x108>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f023 030f 	bic.w	r3, r3, #15
 80006bc:	4a34      	ldr	r2, [pc, #208]	; (8000790 <SystemInit+0x108>)
 80006be:	f043 0307 	orr.w	r3, r3, #7
 80006c2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c4:	4b33      	ldr	r3, [pc, #204]	; (8000794 <SystemInit+0x10c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x10c>)
 80006ca:	f043 0301 	orr.w	r3, r3, #1
 80006ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006d0:	4b30      	ldr	r3, [pc, #192]	; (8000794 <SystemInit+0x10c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d6:	4b2f      	ldr	r3, [pc, #188]	; (8000794 <SystemInit+0x10c>)
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	492e      	ldr	r1, [pc, #184]	; (8000794 <SystemInit+0x10c>)
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x110>)
 80006de:	4013      	ands	r3, r2
 80006e0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006e2:	4b2b      	ldr	r3, [pc, #172]	; (8000790 <SystemInit+0x108>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f003 0308 	and.w	r3, r3, #8
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d007      	beq.n	80006fe <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ee:	4b28      	ldr	r3, [pc, #160]	; (8000790 <SystemInit+0x108>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f023 030f 	bic.w	r3, r3, #15
 80006f6:	4a26      	ldr	r2, [pc, #152]	; (8000790 <SystemInit+0x108>)
 80006f8:	f043 0307 	orr.w	r3, r3, #7
 80006fc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fe:	4b25      	ldr	r3, [pc, #148]	; (8000794 <SystemInit+0x10c>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000704:	4b23      	ldr	r3, [pc, #140]	; (8000794 <SystemInit+0x10c>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800070a:	4b22      	ldr	r3, [pc, #136]	; (8000794 <SystemInit+0x10c>)
 800070c:	2200      	movs	r2, #0
 800070e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000710:	4b20      	ldr	r3, [pc, #128]	; (8000794 <SystemInit+0x10c>)
 8000712:	4a22      	ldr	r2, [pc, #136]	; (800079c <SystemInit+0x114>)
 8000714:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000716:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <SystemInit+0x10c>)
 8000718:	4a21      	ldr	r2, [pc, #132]	; (80007a0 <SystemInit+0x118>)
 800071a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800071c:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <SystemInit+0x10c>)
 800071e:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <SystemInit+0x11c>)
 8000720:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000722:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <SystemInit+0x10c>)
 8000724:	2200      	movs	r2, #0
 8000726:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000728:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <SystemInit+0x10c>)
 800072a:	4a1e      	ldr	r2, [pc, #120]	; (80007a4 <SystemInit+0x11c>)
 800072c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072e:	4b19      	ldr	r3, [pc, #100]	; (8000794 <SystemInit+0x10c>)
 8000730:	2200      	movs	r2, #0
 8000732:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000734:	4b17      	ldr	r3, [pc, #92]	; (8000794 <SystemInit+0x10c>)
 8000736:	4a1b      	ldr	r2, [pc, #108]	; (80007a4 <SystemInit+0x11c>)
 8000738:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800073a:	4b16      	ldr	r3, [pc, #88]	; (8000794 <SystemInit+0x10c>)
 800073c:	2200      	movs	r2, #0
 800073e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <SystemInit+0x10c>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a13      	ldr	r2, [pc, #76]	; (8000794 <SystemInit+0x10c>)
 8000746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800074a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <SystemInit+0x10c>)
 800074e:	2200      	movs	r2, #0
 8000750:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <SystemInit+0x120>)
 8000754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000756:	4a14      	ldr	r2, [pc, #80]	; (80007a8 <SystemInit+0x120>)
 8000758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800075c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x124>)
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <SystemInit+0x128>)
 8000764:	4013      	ands	r3, r2
 8000766:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800076a:	d202      	bcs.n	8000772 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x12c>)
 800076e:	2201      	movs	r2, #1
 8000770:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <SystemInit+0x130>)
 8000774:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000778:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <SystemInit+0x104>)
 800077c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000780:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	e000ed00 	.word	0xe000ed00
 8000790:	52002000 	.word	0x52002000
 8000794:	58024400 	.word	0x58024400
 8000798:	eaf6ed7f 	.word	0xeaf6ed7f
 800079c:	02020200 	.word	0x02020200
 80007a0:	01ff0000 	.word	0x01ff0000
 80007a4:	01010280 	.word	0x01010280
 80007a8:	580000c0 	.word	0x580000c0
 80007ac:	5c001000 	.word	0x5c001000
 80007b0:	ffff0000 	.word	0xffff0000
 80007b4:	51008108 	.word	0x51008108
 80007b8:	52004000 	.word	0x52004000

080007bc <__io_putchar>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_UART8_Init(void);
static void MX_USART1_UART_Init(void);

int __io_putchar (int ch) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
	uint8_t c = ch;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart8, &c, 1, HAL_MAX_DELAY);
 80007ca:	f107 010f 	add.w	r1, r7, #15
 80007ce:	f04f 33ff 	mov.w	r3, #4294967295
 80007d2:	2201      	movs	r2, #1
 80007d4:	4803      	ldr	r0, [pc, #12]	; (80007e4 <__io_putchar+0x28>)
 80007d6:	f004 f9c7 	bl	8004b68 <HAL_UART_Transmit>
	return ch;
 80007da:	687b      	ldr	r3, [r7, #4]
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3710      	adds	r7, #16
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	2400024c 	.word	0x2400024c

080007e8 <main>:

int main(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
	int32_t timeout;

	timeout = 0xFFFF;
 80007ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007f2:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007f4:	bf00      	nop
 80007f6:	4b25      	ldr	r3, [pc, #148]	; (800088c <main+0xa4>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d004      	beq.n	800080c <main+0x24>
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	1e5a      	subs	r2, r3, #1
 8000806:	607a      	str	r2, [r7, #4]
 8000808:	2b00      	cmp	r3, #0
 800080a:	dcf4      	bgt.n	80007f6 <main+0xe>
	if ( timeout < 0 )
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	da01      	bge.n	8000816 <main+0x2e>
	{
	Error_Handler();
 8000812:	f000 fab7 	bl	8000d84 <Error_Handler>
	}

	HAL_Init();
 8000816:	f000 fcc7 	bl	80011a8 <HAL_Init>
	SystemClock_Config();
 800081a:	f000 f939 	bl	8000a90 <SystemClock_Config>
	__HAL_RCC_HSEM_CLK_ENABLE();
 800081e:	4b1b      	ldr	r3, [pc, #108]	; (800088c <main+0xa4>)
 8000820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000824:	4a19      	ldr	r2, [pc, #100]	; (800088c <main+0xa4>)
 8000826:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800082a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800082e:	4b17      	ldr	r3, [pc, #92]	; (800088c <main+0xa4>)
 8000830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000838:	603b      	str	r3, [r7, #0]
 800083a:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 800083c:	2000      	movs	r0, #0
 800083e:	f001 fd8d 	bl	800235c <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8000842:	2100      	movs	r1, #0
 8000844:	2000      	movs	r0, #0
 8000846:	f001 fda3 	bl	8002390 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 800084a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800084e:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000850:	bf00      	nop
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <main+0xa4>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800085a:	2b00      	cmp	r3, #0
 800085c:	d104      	bne.n	8000868 <main+0x80>
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	1e5a      	subs	r2, r3, #1
 8000862:	607a      	str	r2, [r7, #4]
 8000864:	2b00      	cmp	r3, #0
 8000866:	dcf4      	bgt.n	8000852 <main+0x6a>
	if ( timeout < 0 )
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2b00      	cmp	r3, #0
 800086c:	da01      	bge.n	8000872 <main+0x8a>
	{
	Error_Handler();
 800086e:	f000 fa89 	bl	8000d84 <Error_Handler>
	}

	MX_GPIO_Init();
 8000872:	f000 fa23 	bl	8000cbc <MX_GPIO_Init>
	MX_UART8_Init();
 8000876:	f000 f989 	bl	8000b8c <MX_UART8_Init>
	MX_USART1_UART_Init();
 800087a:	f000 f9d3 	bl	8000c24 <MX_USART1_UART_Init>

	HAL_UART_Receive_IT(&huart1, (uint8_t*)&UART1_RxBuffer, 1);
 800087e:	2201      	movs	r2, #1
 8000880:	4903      	ldr	r1, [pc, #12]	; (8000890 <main+0xa8>)
 8000882:	4804      	ldr	r0, [pc, #16]	; (8000894 <main+0xac>)
 8000884:	f004 fa06 	bl	8004c94 <HAL_UART_Receive_IT>

	while (1)
 8000888:	e7fe      	b.n	8000888 <main+0xa0>
 800088a:	bf00      	nop
 800088c:	58024400 	.word	0x58024400
 8000890:	2400009c 	.word	0x2400009c
 8000894:	240000a0 	.word	0x240000a0

08000898 <Send_Uart>:
    }
    return(false);
}

void Send_Uart (char *string)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f7ff fd1d 	bl	80002e0 <strlen>
 80008a6:	4603      	mov	r3, r0
 80008a8:	b29a      	uxth	r2, r3
 80008aa:	f04f 33ff 	mov.w	r3, #4294967295
 80008ae:	6879      	ldr	r1, [r7, #4]
 80008b0:	4803      	ldr	r0, [pc, #12]	; (80008c0 <Send_Uart+0x28>)
 80008b2:	f004 f959 	bl	8004b68 <HAL_UART_Transmit>
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	240000a0 	.word	0x240000a0

080008c4 <vProcessCommand>:
    //memset(sCommand.au8Buffer, 0, COMMAND_BUF_SIZE);
    //sCommand.u8Pos = 0;
}

void vProcessCommand(void)
{
 80008c4:	b5b0      	push	{r4, r5, r7, lr}
 80008c6:	b09e      	sub	sp, #120	; 0x78
 80008c8:	af04      	add	r7, sp, #16
	char Delimiters[] = " ";
 80008ca:	2320      	movs	r3, #32
 80008cc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	//char *token = NULL;
	uint8_t i = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	char *control[20];
	char *token = strtok((char *)sCommand.au8Buffer, Delimiters);
 80008d6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008da:	4619      	mov	r1, r3
 80008dc:	483f      	ldr	r0, [pc, #252]	; (80009dc <vProcessCommand+0x118>)
 80008de:	f006 fa35 	bl	8006d4c <strtok>
 80008e2:	6638      	str	r0, [r7, #96]	; 0x60

	while(token != NULL)
 80008e4:	e014      	b.n	8000910 <vProcessCommand+0x4c>
	{
		//printf("%s\n\r", token);
		control[i] = token;
 80008e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80008ea:	009b      	lsls	r3, r3, #2
 80008ec:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80008f0:	4413      	add	r3, r2
 80008f2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80008f4:	f843 2c64 	str.w	r2, [r3, #-100]
		i++;
 80008f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80008fc:	3301      	adds	r3, #1
 80008fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		token = strtok(NULL, Delimiters);
 8000902:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000906:	4619      	mov	r1, r3
 8000908:	2000      	movs	r0, #0
 800090a:	f006 fa1f 	bl	8006d4c <strtok>
 800090e:	6638      	str	r0, [r7, #96]	; 0x60
	while(token != NULL)
 8000910:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000912:	2b00      	cmp	r3, #0
 8000914:	d1e7      	bne.n	80008e6 <vProcessCommand+0x22>
	}
	//printf("%s\n\r", control[0]);

    if (0 == stricmp(control[0], "1111"))
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4931      	ldr	r1, [pc, #196]	; (80009e0 <vProcessCommand+0x11c>)
 800091a:	4618      	mov	r0, r3
 800091c:	f006 f9fa 	bl	8006d14 <strcasecmp>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d122      	bne.n	800096c <vProcessCommand+0xa8>
    {
    	printf("System Setting %s %s %s %s %s %s\n\r",control[1],control[2],control[3],control[4],control[5],control[6]);
 8000926:	68b8      	ldr	r0, [r7, #8]
 8000928:	68fc      	ldr	r4, [r7, #12]
 800092a:	693d      	ldr	r5, [r7, #16]
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	69ba      	ldr	r2, [r7, #24]
 8000930:	69f9      	ldr	r1, [r7, #28]
 8000932:	9102      	str	r1, [sp, #8]
 8000934:	9201      	str	r2, [sp, #4]
 8000936:	9300      	str	r3, [sp, #0]
 8000938:	462b      	mov	r3, r5
 800093a:	4622      	mov	r2, r4
 800093c:	4601      	mov	r1, r0
 800093e:	4829      	ldr	r0, [pc, #164]	; (80009e4 <vProcessCommand+0x120>)
 8000940:	f006 f9a0 	bl	8006c84 <iprintf>
    	char *buf = malloc(30*sizeof(char));
 8000944:	201e      	movs	r0, #30
 8000946:	f006 f8db 	bl	8006b00 <malloc>
 800094a:	4603      	mov	r3, r0
 800094c:	65fb      	str	r3, [r7, #92]	; 0x5c
    	sprintf (buf, "\r%d+%d+%d\n",0x8024,1,123);
 800094e:	237b      	movs	r3, #123	; 0x7b
 8000950:	9300      	str	r3, [sp, #0]
 8000952:	2301      	movs	r3, #1
 8000954:	f248 0224 	movw	r2, #32804	; 0x8024
 8000958:	4923      	ldr	r1, [pc, #140]	; (80009e8 <vProcessCommand+0x124>)
 800095a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800095c:	f006 f9ba 	bl	8006cd4 <siprintf>
    	Send_Uart(buf);
 8000960:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000962:	f7ff ff99 	bl	8000898 <Send_Uart>
    	free(buf);
 8000966:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000968:	f006 f8d2 	bl	8006b10 <free>
    }

    if (0 == stricmp(control[0], "1000"))
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	491f      	ldr	r1, [pc, #124]	; (80009ec <vProcessCommand+0x128>)
 8000970:	4618      	mov	r0, r3
 8000972:	f006 f9cf 	bl	8006d14 <strcasecmp>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d117      	bne.n	80009ac <vProcessCommand+0xe8>
    {
    	printf("u16PacketType = hello\n\r");
 800097c:	481c      	ldr	r0, [pc, #112]	; (80009f0 <vProcessCommand+0x12c>)
 800097e:	f006 f981 	bl	8006c84 <iprintf>
    	char *buf = malloc(30*sizeof(char));
 8000982:	201e      	movs	r0, #30
 8000984:	f006 f8bc 	bl	8006b00 <malloc>
 8000988:	4603      	mov	r3, r0
 800098a:	65bb      	str	r3, [r7, #88]	; 0x58
    	sprintf (buf, "\r%d+%d+%d\n",0x8024,2,123);
 800098c:	237b      	movs	r3, #123	; 0x7b
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	2302      	movs	r3, #2
 8000992:	f248 0224 	movw	r2, #32804	; 0x8024
 8000996:	4914      	ldr	r1, [pc, #80]	; (80009e8 <vProcessCommand+0x124>)
 8000998:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800099a:	f006 f99b 	bl	8006cd4 <siprintf>
    	Send_Uart(buf);
 800099e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80009a0:	f7ff ff7a 	bl	8000898 <Send_Uart>
    	free(buf);
 80009a4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80009a6:	f006 f8b3 	bl	8006b10 <free>
 80009aa:	e00a      	b.n	80009c2 <vProcessCommand+0xfe>
    }

    else if (0 == stricmp(control[0], "steer"))
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4911      	ldr	r1, [pc, #68]	; (80009f4 <vProcessCommand+0x130>)
 80009b0:	4618      	mov	r0, r3
 80009b2:	f006 f9af 	bl	8006d14 <strcasecmp>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d102      	bne.n	80009c2 <vProcessCommand+0xfe>
    {
    	printf("u16PacketType = steer \n\r");
 80009bc:	480e      	ldr	r0, [pc, #56]	; (80009f8 <vProcessCommand+0x134>)
 80009be:	f006 f961 	bl	8006c84 <iprintf>
    }
    memset(sCommand.au8Buffer, 0, COMMAND_BUF_SIZE);
 80009c2:	2232      	movs	r2, #50	; 0x32
 80009c4:	2100      	movs	r1, #0
 80009c6:	4805      	ldr	r0, [pc, #20]	; (80009dc <vProcessCommand+0x118>)
 80009c8:	f006 f8aa 	bl	8006b20 <memset>
    sCommand.u8Pos = 0;
 80009cc:	4b03      	ldr	r3, [pc, #12]	; (80009dc <vProcessCommand+0x118>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	751a      	strb	r2, [r3, #20]
}
 80009d2:	bf00      	nop
 80009d4:	3768      	adds	r7, #104	; 0x68
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bdb0      	pop	{r4, r5, r7, pc}
 80009da:	bf00      	nop
 80009dc:	24000130 	.word	0x24000130
 80009e0:	08008030 	.word	0x08008030
 80009e4:	08008038 	.word	0x08008038
 80009e8:	08007fa4 	.word	0x08007fa4
 80009ec:	0800805c 	.word	0x0800805c
 80009f0:	08008064 	.word	0x08008064
 80009f4:	0800807c 	.word	0x0800807c
 80009f8:	08008084 	.word	0x08008084

080009fc <vProcessRxChar>:

void vProcessRxChar(uint8_t u8Char)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]

//    if ((u8Char >= 'a' && u8Char <= 'z'))
//    {
//        u8Char -= ('a' - 'A');
//    }
    if ((sCommand.u8Pos < COMMAND_BUF_SIZE)  && (u8Char != 0x0d))
 8000a06:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <vProcessRxChar+0x58>)
 8000a08:	7d1b      	ldrb	r3, [r3, #20]
 8000a0a:	2b31      	cmp	r3, #49	; 0x31
 8000a0c:	d80d      	bhi.n	8000a2a <vProcessRxChar+0x2e>
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	2b0d      	cmp	r3, #13
 8000a12:	d00a      	beq.n	8000a2a <vProcessRxChar+0x2e>
    {
        sCommand.au8Buffer[sCommand.u8Pos++] = u8Char;
 8000a14:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <vProcessRxChar+0x58>)
 8000a16:	7d1b      	ldrb	r3, [r3, #20]
 8000a18:	1c5a      	adds	r2, r3, #1
 8000a1a:	b2d1      	uxtb	r1, r2
 8000a1c:	4a0d      	ldr	r2, [pc, #52]	; (8000a54 <vProcessRxChar+0x58>)
 8000a1e:	7511      	strb	r1, [r2, #20]
 8000a20:	4619      	mov	r1, r3
 8000a22:	4a0c      	ldr	r2, [pc, #48]	; (8000a54 <vProcessRxChar+0x58>)
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	5453      	strb	r3, [r2, r1]
 8000a28:	e00b      	b.n	8000a42 <vProcessRxChar+0x46>
    }
    else if (sCommand.u8Pos >= COMMAND_BUF_SIZE)
 8000a2a:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <vProcessRxChar+0x58>)
 8000a2c:	7d1b      	ldrb	r3, [r3, #20]
 8000a2e:	2b31      	cmp	r3, #49	; 0x31
 8000a30:	d907      	bls.n	8000a42 <vProcessRxChar+0x46>
    {
        memset(sCommand.au8Buffer, 0, COMMAND_BUF_SIZE);
 8000a32:	2232      	movs	r2, #50	; 0x32
 8000a34:	2100      	movs	r1, #0
 8000a36:	4807      	ldr	r0, [pc, #28]	; (8000a54 <vProcessRxChar+0x58>)
 8000a38:	f006 f872 	bl	8006b20 <memset>
        sCommand.u8Pos = 0;
 8000a3c:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <vProcessRxChar+0x58>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	751a      	strb	r2, [r3, #20]
    }

    if (u8Char == 0x0d)
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	2b0d      	cmp	r3, #13
 8000a46:	d101      	bne.n	8000a4c <vProcessRxChar+0x50>
    {
    	//printf("Receive PacketType\n\r");
    	vProcessCommand();
 8000a48:	f7ff ff3c 	bl	80008c4 <vProcessCommand>
    }
}
 8000a4c:	bf00      	nop
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	24000130 	.word	0x24000130

08000a58 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart1.Instance){
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <HAL_UART_RxCpltCallback+0x30>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d109      	bne.n	8000a80 <HAL_UART_RxCpltCallback+0x28>
		//APP_vProcessIncomingSerialCommands(UART1_RxBuffer);
		vProcessRxChar(UART1_RxBuffer);
 8000a6c:	4b07      	ldr	r3, [pc, #28]	; (8000a8c <HAL_UART_RxCpltCallback+0x34>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff ffc3 	bl	80009fc <vProcessRxChar>
		HAL_UART_Receive_IT(&huart1, (uint8_t*)&UART1_RxBuffer, 1);
 8000a76:	2201      	movs	r2, #1
 8000a78:	4904      	ldr	r1, [pc, #16]	; (8000a8c <HAL_UART_RxCpltCallback+0x34>)
 8000a7a:	4803      	ldr	r0, [pc, #12]	; (8000a88 <HAL_UART_RxCpltCallback+0x30>)
 8000a7c:	f004 f90a 	bl	8004c94 <HAL_UART_Receive_IT>
	}
}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	240000a0 	.word	0x240000a0
 8000a8c:	2400009c 	.word	0x2400009c

08000a90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b09e      	sub	sp, #120	; 0x78
 8000a94:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;
	HAL_StatusTypeDef ret = HAL_OK;
 8000a96:	2300      	movs	r3, #0
 8000a98:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	/*!< Supply configuration update enable */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a9c:	2004      	movs	r0, #4
 8000a9e:	f001 fc8b 	bl	80023b8 <HAL_PWREx_ConfigSupply>

	/* The voltage scaling allows optimizing the power consumption when the device is
	 clocked below the maximum system frequency, to update the voltage scaling value
	 regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	4b37      	ldr	r3, [pc, #220]	; (8000b84 <SystemClock_Config+0xf4>)
 8000aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aaa:	4a36      	ldr	r2, [pc, #216]	; (8000b84 <SystemClock_Config+0xf4>)
 8000aac:	f023 0301 	bic.w	r3, r3, #1
 8000ab0:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000ab2:	4b34      	ldr	r3, [pc, #208]	; (8000b84 <SystemClock_Config+0xf4>)
 8000ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	4b32      	ldr	r3, [pc, #200]	; (8000b88 <SystemClock_Config+0xf8>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	4a31      	ldr	r2, [pc, #196]	; (8000b88 <SystemClock_Config+0xf8>)
 8000ac2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ac6:	6193      	str	r3, [r2, #24]
 8000ac8:	4b2f      	ldr	r3, [pc, #188]	; (8000b88 <SystemClock_Config+0xf8>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	687b      	ldr	r3, [r7, #4]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ad4:	bf00      	nop
 8000ad6:	4b2c      	ldr	r3, [pc, #176]	; (8000b88 <SystemClock_Config+0xf8>)
 8000ad8:	699b      	ldr	r3, [r3, #24]
 8000ada:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ade:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ae2:	d1f8      	bne.n	8000ad6 <SystemClock_Config+0x46>

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	60bb      	str	r3, [r7, #8]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ae8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aec:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000aee:	2300      	movs	r3, #0
 8000af0:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8000af2:	2300      	movs	r3, #0
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af6:	2302      	movs	r3, #2
 8000af8:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000afa:	2302      	movs	r3, #2
 8000afc:	633b      	str	r3, [r7, #48]	; 0x30

	RCC_OscInitStruct.PLL.PLLM = 5;
 8000afe:	2305      	movs	r3, #5
 8000b00:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLN = 160;
 8000b02:	23a0      	movs	r3, #160	; 0xa0
 8000b04:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLP = 2;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b12:	2304      	movs	r3, #4
 8000b14:	643b      	str	r3, [r7, #64]	; 0x40

	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b16:	2300      	movs	r3, #0
 8000b18:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000b1a:	2308      	movs	r3, #8
 8000b1c:	64bb      	str	r3, [r7, #72]	; 0x48
	ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000b1e:	f107 0308 	add.w	r3, r7, #8
 8000b22:	4618      	mov	r0, r3
 8000b24:	f001 fca2 	bl	800246c <HAL_RCC_OscConfig>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if(ret != HAL_OK)
 8000b2e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <SystemClock_Config+0xaa>
	{
	Error_Handler();
 8000b36:	f000 f925 	bl	8000d84 <Error_Handler>
	}

	/* Select PLL as system clock source and configure  bus clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8000b3a:	233f      	movs	r3, #63	; 0x3f
 8000b3c:	657b      	str	r3, [r7, #84]	; 0x54
								 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b42:	2300      	movs	r3, #0
 8000b44:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b46:	2308      	movs	r3, #8
 8000b48:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b4a:	2340      	movs	r3, #64	; 0x40
 8000b4c:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b4e:	2340      	movs	r3, #64	; 0x40
 8000b50:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b56:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b58:	2340      	movs	r3, #64	; 0x40
 8000b5a:	673b      	str	r3, [r7, #112]	; 0x70
	ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8000b5c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b60:	2104      	movs	r1, #4
 8000b62:	4618      	mov	r0, r3
 8000b64:	f002 f892 	bl	8002c8c <HAL_RCC_ClockConfig>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if(ret != HAL_OK)
 8000b6e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <SystemClock_Config+0xea>
	{
	Error_Handler();
 8000b76:	f000 f905 	bl	8000d84 <Error_Handler>

	__HAL_RCC_SYSCFG_CLK_ENABLE() ;

	HAL_EnableCompensationCell();
	*/
}
 8000b7a:	bf00      	nop
 8000b7c:	3778      	adds	r7, #120	; 0x78
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	58000400 	.word	0x58000400
 8000b88:	58024800 	.word	0x58024800

08000b8c <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000b90:	4b22      	ldr	r3, [pc, #136]	; (8000c1c <MX_UART8_Init+0x90>)
 8000b92:	4a23      	ldr	r2, [pc, #140]	; (8000c20 <MX_UART8_Init+0x94>)
 8000b94:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8000b96:	4b21      	ldr	r3, [pc, #132]	; (8000c1c <MX_UART8_Init+0x90>)
 8000b98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b9c:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9e:	4b1f      	ldr	r3, [pc, #124]	; (8000c1c <MX_UART8_Init+0x90>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000ba4:	4b1d      	ldr	r3, [pc, #116]	; (8000c1c <MX_UART8_Init+0x90>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000baa:	4b1c      	ldr	r3, [pc, #112]	; (8000c1c <MX_UART8_Init+0x90>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000bb0:	4b1a      	ldr	r3, [pc, #104]	; (8000c1c <MX_UART8_Init+0x90>)
 8000bb2:	220c      	movs	r2, #12
 8000bb4:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb6:	4b19      	ldr	r3, [pc, #100]	; (8000c1c <MX_UART8_Init+0x90>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bbc:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <MX_UART8_Init+0x90>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bc2:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <MX_UART8_Init+0x90>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bc8:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <MX_UART8_Init+0x90>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bce:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <MX_UART8_Init+0x90>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000bd4:	4811      	ldr	r0, [pc, #68]	; (8000c1c <MX_UART8_Init+0x90>)
 8000bd6:	f003 ff77 	bl	8004ac8 <HAL_UART_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8000be0:	f000 f8d0 	bl	8000d84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000be4:	2100      	movs	r1, #0
 8000be6:	480d      	ldr	r0, [pc, #52]	; (8000c1c <MX_UART8_Init+0x90>)
 8000be8:	f005 fe95 	bl	8006916 <HAL_UARTEx_SetTxFifoThreshold>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8000bf2:	f000 f8c7 	bl	8000d84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4808      	ldr	r0, [pc, #32]	; (8000c1c <MX_UART8_Init+0x90>)
 8000bfa:	f005 feca 	bl	8006992 <HAL_UARTEx_SetRxFifoThreshold>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8000c04:	f000 f8be 	bl	8000d84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000c08:	4804      	ldr	r0, [pc, #16]	; (8000c1c <MX_UART8_Init+0x90>)
 8000c0a:	f005 fe4b 	bl	80068a4 <HAL_UARTEx_DisableFifoMode>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8000c14:	f000 f8b6 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	2400024c 	.word	0x2400024c
 8000c20:	40007c00 	.word	0x40007c00

08000c24 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c28:	4b22      	ldr	r3, [pc, #136]	; (8000cb4 <MX_USART1_UART_Init+0x90>)
 8000c2a:	4a23      	ldr	r2, [pc, #140]	; (8000cb8 <MX_USART1_UART_Init+0x94>)
 8000c2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c2e:	4b21      	ldr	r3, [pc, #132]	; (8000cb4 <MX_USART1_UART_Init+0x90>)
 8000c30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c36:	4b1f      	ldr	r3, [pc, #124]	; (8000cb4 <MX_USART1_UART_Init+0x90>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c3c:	4b1d      	ldr	r3, [pc, #116]	; (8000cb4 <MX_USART1_UART_Init+0x90>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c42:	4b1c      	ldr	r3, [pc, #112]	; (8000cb4 <MX_USART1_UART_Init+0x90>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c48:	4b1a      	ldr	r3, [pc, #104]	; (8000cb4 <MX_USART1_UART_Init+0x90>)
 8000c4a:	220c      	movs	r2, #12
 8000c4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c4e:	4b19      	ldr	r3, [pc, #100]	; (8000cb4 <MX_USART1_UART_Init+0x90>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c54:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <MX_USART1_UART_Init+0x90>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c5a:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <MX_USART1_UART_Init+0x90>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c60:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <MX_USART1_UART_Init+0x90>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c66:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <MX_USART1_UART_Init+0x90>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c6c:	4811      	ldr	r0, [pc, #68]	; (8000cb4 <MX_USART1_UART_Init+0x90>)
 8000c6e:	f003 ff2b 	bl	8004ac8 <HAL_UART_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c78:	f000 f884 	bl	8000d84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	480d      	ldr	r0, [pc, #52]	; (8000cb4 <MX_USART1_UART_Init+0x90>)
 8000c80:	f005 fe49 	bl	8006916 <HAL_UARTEx_SetTxFifoThreshold>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c8a:	f000 f87b 	bl	8000d84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c8e:	2100      	movs	r1, #0
 8000c90:	4808      	ldr	r0, [pc, #32]	; (8000cb4 <MX_USART1_UART_Init+0x90>)
 8000c92:	f005 fe7e 	bl	8006992 <HAL_UARTEx_SetRxFifoThreshold>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c9c:	f000 f872 	bl	8000d84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ca0:	4804      	ldr	r0, [pc, #16]	; (8000cb4 <MX_USART1_UART_Init+0x90>)
 8000ca2:	f005 fdff 	bl	80068a4 <HAL_UARTEx_DisableFifoMode>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000cac:	f000 f86a 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	240000a0 	.word	0x240000a0
 8000cb8:	40011000 	.word	0x40011000

08000cbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	; 0x28
 8000cc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]
 8000cd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd2:	4b2a      	ldr	r3, [pc, #168]	; (8000d7c <MX_GPIO_Init+0xc0>)
 8000cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd8:	4a28      	ldr	r2, [pc, #160]	; (8000d7c <MX_GPIO_Init+0xc0>)
 8000cda:	f043 0301 	orr.w	r3, r3, #1
 8000cde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ce2:	4b26      	ldr	r3, [pc, #152]	; (8000d7c <MX_GPIO_Init+0xc0>)
 8000ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cf0:	4b22      	ldr	r3, [pc, #136]	; (8000d7c <MX_GPIO_Init+0xc0>)
 8000cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf6:	4a21      	ldr	r2, [pc, #132]	; (8000d7c <MX_GPIO_Init+0xc0>)
 8000cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d00:	4b1e      	ldr	r3, [pc, #120]	; (8000d7c <MX_GPIO_Init+0xc0>)
 8000d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d0e:	4b1b      	ldr	r3, [pc, #108]	; (8000d7c <MX_GPIO_Init+0xc0>)
 8000d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d14:	4a19      	ldr	r2, [pc, #100]	; (8000d7c <MX_GPIO_Init+0xc0>)
 8000d16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d1e:	4b17      	ldr	r3, [pc, #92]	; (8000d7c <MX_GPIO_Init+0xc0>)
 8000d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d2c:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <MX_GPIO_Init+0xc0>)
 8000d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d32:	4a12      	ldr	r2, [pc, #72]	; (8000d7c <MX_GPIO_Init+0xc0>)
 8000d34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <MX_GPIO_Init+0xc0>)
 8000d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000d50:	480b      	ldr	r0, [pc, #44]	; (8000d80 <MX_GPIO_Init+0xc4>)
 8000d52:	f001 fae9 	bl	8002328 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PI12 PI13 PI14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000d56:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000d5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	2300      	movs	r3, #0
 8000d66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4804      	ldr	r0, [pc, #16]	; (8000d80 <MX_GPIO_Init+0xc4>)
 8000d70:	f001 f92a 	bl	8001fc8 <HAL_GPIO_Init>

}
 8000d74:	bf00      	nop
 8000d76:	3728      	adds	r7, #40	; 0x28
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	58024400 	.word	0x58024400
 8000d80:	58022000 	.word	0x58022000

08000d84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0

}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
	...

08000d94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <HAL_MspInit+0x30>)
 8000d9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000da0:	4a08      	ldr	r2, [pc, #32]	; (8000dc4 <HAL_MspInit+0x30>)
 8000da2:	f043 0302 	orr.w	r3, r3, #2
 8000da6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_MspInit+0x30>)
 8000dac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000db0:	f003 0302 	and.w	r3, r3, #2
 8000db4:	607b      	str	r3, [r7, #4]
 8000db6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	58024400 	.word	0x58024400

08000dc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b0bc      	sub	sp, #240	; 0xf0
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000de0:	f107 031c 	add.w	r3, r7, #28
 8000de4:	22c0      	movs	r2, #192	; 0xc0
 8000de6:	2100      	movs	r1, #0
 8000de8:	4618      	mov	r0, r3
 8000dea:	f005 fe99 	bl	8006b20 <memset>
  if(huart->Instance==UART8)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a51      	ldr	r2, [pc, #324]	; (8000f38 <HAL_UART_MspInit+0x170>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d14b      	bne.n	8000e90 <HAL_UART_MspInit+0xc8>
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e02:	f107 031c 	add.w	r3, r7, #28
 8000e06:	4618      	mov	r0, r3
 8000e08:	f002 facc 	bl	80033a4 <HAL_RCCEx_PeriphCLKConfig>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e12:	f7ff ffb7 	bl	8000d84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8000e16:	4b49      	ldr	r3, [pc, #292]	; (8000f3c <HAL_UART_MspInit+0x174>)
 8000e18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e1c:	4a47      	ldr	r2, [pc, #284]	; (8000f3c <HAL_UART_MspInit+0x174>)
 8000e1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e22:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e26:	4b45      	ldr	r3, [pc, #276]	; (8000f3c <HAL_UART_MspInit+0x174>)
 8000e28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000e30:	61bb      	str	r3, [r7, #24]
 8000e32:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000e34:	4b41      	ldr	r3, [pc, #260]	; (8000f3c <HAL_UART_MspInit+0x174>)
 8000e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3a:	4a40      	ldr	r2, [pc, #256]	; (8000f3c <HAL_UART_MspInit+0x174>)
 8000e3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e44:	4b3d      	ldr	r3, [pc, #244]	; (8000f3c <HAL_UART_MspInit+0x174>)
 8000e46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e4e:	617b      	str	r3, [r7, #20]
 8000e50:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PJ9     ------> UART8_RX
    PJ8     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8000e52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e66:	2300      	movs	r3, #0
 8000e68:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8000e6c:	2308      	movs	r3, #8
 8000e6e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000e72:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e76:	4619      	mov	r1, r3
 8000e78:	4831      	ldr	r0, [pc, #196]	; (8000f40 <HAL_UART_MspInit+0x178>)
 8000e7a:	f001 f8a5 	bl	8001fc8 <HAL_GPIO_Init>

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2100      	movs	r1, #0
 8000e82:	2053      	movs	r0, #83	; 0x53
 8000e84:	f000 fb09 	bl	800149a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8000e88:	2053      	movs	r0, #83	; 0x53
 8000e8a:	f000 fb20 	bl	80014ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e8e:	e04f      	b.n	8000f30 <HAL_UART_MspInit+0x168>
  else if(huart->Instance==USART1)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a2b      	ldr	r2, [pc, #172]	; (8000f44 <HAL_UART_MspInit+0x17c>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d14a      	bne.n	8000f30 <HAL_UART_MspInit+0x168>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ea4:	f107 031c 	add.w	r3, r7, #28
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f002 fa7b 	bl	80033a4 <HAL_RCCEx_PeriphCLKConfig>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8000eb4:	f7ff ff66 	bl	8000d84 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000eb8:	4b20      	ldr	r3, [pc, #128]	; (8000f3c <HAL_UART_MspInit+0x174>)
 8000eba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ebe:	4a1f      	ldr	r2, [pc, #124]	; (8000f3c <HAL_UART_MspInit+0x174>)
 8000ec0:	f043 0310 	orr.w	r3, r3, #16
 8000ec4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000ec8:	4b1c      	ldr	r3, [pc, #112]	; (8000f3c <HAL_UART_MspInit+0x174>)
 8000eca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ece:	f003 0310 	and.w	r3, r3, #16
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed6:	4b19      	ldr	r3, [pc, #100]	; (8000f3c <HAL_UART_MspInit+0x174>)
 8000ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000edc:	4a17      	ldr	r2, [pc, #92]	; (8000f3c <HAL_UART_MspInit+0x174>)
 8000ede:	f043 0301 	orr.w	r3, r3, #1
 8000ee2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ee6:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <HAL_UART_MspInit+0x174>)
 8000ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000ef4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ef8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efc:	2302      	movs	r3, #2
 8000efe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f0e:	2307      	movs	r3, #7
 8000f10:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f14:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f18:	4619      	mov	r1, r3
 8000f1a:	480b      	ldr	r0, [pc, #44]	; (8000f48 <HAL_UART_MspInit+0x180>)
 8000f1c:	f001 f854 	bl	8001fc8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f20:	2200      	movs	r2, #0
 8000f22:	2100      	movs	r1, #0
 8000f24:	2025      	movs	r0, #37	; 0x25
 8000f26:	f000 fab8 	bl	800149a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f2a:	2025      	movs	r0, #37	; 0x25
 8000f2c:	f000 facf 	bl	80014ce <HAL_NVIC_EnableIRQ>
}
 8000f30:	bf00      	nop
 8000f32:	37f0      	adds	r7, #240	; 0xf0
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40007c00 	.word	0x40007c00
 8000f3c:	58024400 	.word	0x58024400
 8000f40:	58022400 	.word	0x58022400
 8000f44:	40011000 	.word	0x40011000
 8000f48:	58020000 	.word	0x58020000

08000f4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <NMI_Handler+0x4>

08000f52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f56:	e7fe      	b.n	8000f56 <HardFault_Handler+0x4>

08000f58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <MemManage_Handler+0x4>

08000f5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f62:	e7fe      	b.n	8000f62 <BusFault_Handler+0x4>

08000f64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <UsageFault_Handler+0x4>

08000f6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f98:	f000 f978 	bl	800128c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fa4:	4802      	ldr	r0, [pc, #8]	; (8000fb0 <USART1_IRQHandler+0x10>)
 8000fa6:	f003 febb 	bl	8004d20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	240000a0 	.word	0x240000a0

08000fb4 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8000fb8:	4802      	ldr	r0, [pc, #8]	; (8000fc4 <UART8_IRQHandler+0x10>)
 8000fba:	f003 feb1 	bl	8004d20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	2400024c 	.word	0x2400024c

08000fc8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
	return 1;
 8000fcc:	2301      	movs	r3, #1
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <_kill>:

int _kill(int pid, int sig)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000fe2:	f005 fd63 	bl	8006aac <__errno>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2216      	movs	r2, #22
 8000fea:	601a      	str	r2, [r3, #0]
	return -1;
 8000fec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <_exit>:

void _exit (int status)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001000:	f04f 31ff 	mov.w	r1, #4294967295
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f7ff ffe7 	bl	8000fd8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800100a:	e7fe      	b.n	800100a <_exit+0x12>

0800100c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
 800101c:	e00a      	b.n	8001034 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800101e:	f3af 8000 	nop.w
 8001022:	4601      	mov	r1, r0
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	1c5a      	adds	r2, r3, #1
 8001028:	60ba      	str	r2, [r7, #8]
 800102a:	b2ca      	uxtb	r2, r1
 800102c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	3301      	adds	r3, #1
 8001032:	617b      	str	r3, [r7, #20]
 8001034:	697a      	ldr	r2, [r7, #20]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	429a      	cmp	r2, r3
 800103a:	dbf0      	blt.n	800101e <_read+0x12>
	}

return len;
 800103c:	687b      	ldr	r3, [r7, #4]
}
 800103e:	4618      	mov	r0, r3
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b086      	sub	sp, #24
 800104a:	af00      	add	r7, sp, #0
 800104c:	60f8      	str	r0, [r7, #12]
 800104e:	60b9      	str	r1, [r7, #8]
 8001050:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
 8001056:	e009      	b.n	800106c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	1c5a      	adds	r2, r3, #1
 800105c:	60ba      	str	r2, [r7, #8]
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fbab 	bl	80007bc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	3301      	adds	r3, #1
 800106a:	617b      	str	r3, [r7, #20]
 800106c:	697a      	ldr	r2, [r7, #20]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	429a      	cmp	r2, r3
 8001072:	dbf1      	blt.n	8001058 <_write+0x12>
	}
	return len;
 8001074:	687b      	ldr	r3, [r7, #4]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3718      	adds	r7, #24
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <_close>:

int _close(int file)
{
 800107e:	b480      	push	{r7}
 8001080:	b083      	sub	sp, #12
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
	return -1;
 8001086:	f04f 33ff 	mov.w	r3, #4294967295
}
 800108a:	4618      	mov	r0, r3
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001096:	b480      	push	{r7}
 8001098:	b083      	sub	sp, #12
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
 800109e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010a6:	605a      	str	r2, [r3, #4]
	return 0;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <_isatty>:

int _isatty(int file)
{
 80010b6:	b480      	push	{r7}
 80010b8:	b083      	sub	sp, #12
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
	return 1;
 80010be:	2301      	movs	r3, #1
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
	return 0;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010f0:	4a14      	ldr	r2, [pc, #80]	; (8001144 <_sbrk+0x5c>)
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <_sbrk+0x60>)
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010fc:	4b13      	ldr	r3, [pc, #76]	; (800114c <_sbrk+0x64>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d102      	bne.n	800110a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001104:	4b11      	ldr	r3, [pc, #68]	; (800114c <_sbrk+0x64>)
 8001106:	4a12      	ldr	r2, [pc, #72]	; (8001150 <_sbrk+0x68>)
 8001108:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800110a:	4b10      	ldr	r3, [pc, #64]	; (800114c <_sbrk+0x64>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4413      	add	r3, r2
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	429a      	cmp	r2, r3
 8001116:	d207      	bcs.n	8001128 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001118:	f005 fcc8 	bl	8006aac <__errno>
 800111c:	4603      	mov	r3, r0
 800111e:	220c      	movs	r2, #12
 8001120:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001122:	f04f 33ff 	mov.w	r3, #4294967295
 8001126:	e009      	b.n	800113c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001128:	4b08      	ldr	r3, [pc, #32]	; (800114c <_sbrk+0x64>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800112e:	4b07      	ldr	r3, [pc, #28]	; (800114c <_sbrk+0x64>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4413      	add	r3, r2
 8001136:	4a05      	ldr	r2, [pc, #20]	; (800114c <_sbrk+0x64>)
 8001138:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800113a:	68fb      	ldr	r3, [r7, #12]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	24040000 	.word	0x24040000
 8001148:	00000400 	.word	0x00000400
 800114c:	24000090 	.word	0x24000090
 8001150:	240002f0 	.word	0x240002f0

08001154 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001154:	f8df d034 	ldr.w	sp, [pc, #52]	; 800118c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001158:	f7ff fa96 	bl	8000688 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800115c:	480c      	ldr	r0, [pc, #48]	; (8001190 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800115e:	490d      	ldr	r1, [pc, #52]	; (8001194 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001160:	4a0d      	ldr	r2, [pc, #52]	; (8001198 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001162:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001164:	e002      	b.n	800116c <LoopCopyDataInit>

08001166 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001166:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001168:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800116a:	3304      	adds	r3, #4

0800116c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800116c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800116e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001170:	d3f9      	bcc.n	8001166 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001172:	4a0a      	ldr	r2, [pc, #40]	; (800119c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001174:	4c0a      	ldr	r4, [pc, #40]	; (80011a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001176:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001178:	e001      	b.n	800117e <LoopFillZerobss>

0800117a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800117a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800117c:	3204      	adds	r2, #4

0800117e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800117e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001180:	d3fb      	bcc.n	800117a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001182:	f005 fc99 	bl	8006ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001186:	f7ff fb2f 	bl	80007e8 <main>
  bx  lr
 800118a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800118c:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8001190:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001194:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8001198:	08008338 	.word	0x08008338
  ldr r2, =_sbss
 800119c:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 80011a0:	240002f0 	.word	0x240002f0

080011a4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011a4:	e7fe      	b.n	80011a4 <ADC3_IRQHandler>
	...

080011a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ae:	2003      	movs	r0, #3
 80011b0:	f000 f968 	bl	8001484 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80011b4:	f001 ff20 	bl	8002ff8 <HAL_RCC_GetSysClockFreq>
 80011b8:	4602      	mov	r2, r0
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <HAL_Init+0x68>)
 80011bc:	699b      	ldr	r3, [r3, #24]
 80011be:	0a1b      	lsrs	r3, r3, #8
 80011c0:	f003 030f 	and.w	r3, r3, #15
 80011c4:	4913      	ldr	r1, [pc, #76]	; (8001214 <HAL_Init+0x6c>)
 80011c6:	5ccb      	ldrb	r3, [r1, r3]
 80011c8:	f003 031f 	and.w	r3, r3, #31
 80011cc:	fa22 f303 	lsr.w	r3, r2, r3
 80011d0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80011d2:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <HAL_Init+0x68>)
 80011d4:	699b      	ldr	r3, [r3, #24]
 80011d6:	f003 030f 	and.w	r3, r3, #15
 80011da:	4a0e      	ldr	r2, [pc, #56]	; (8001214 <HAL_Init+0x6c>)
 80011dc:	5cd3      	ldrb	r3, [r2, r3]
 80011de:	f003 031f 	and.w	r3, r3, #31
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	fa22 f303 	lsr.w	r3, r2, r3
 80011e8:	4a0b      	ldr	r2, [pc, #44]	; (8001218 <HAL_Init+0x70>)
 80011ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011ec:	4a0b      	ldr	r2, [pc, #44]	; (800121c <HAL_Init+0x74>)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011f2:	2000      	movs	r0, #0
 80011f4:	f000 f814 	bl	8001220 <HAL_InitTick>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e002      	b.n	8001208 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001202:	f7ff fdc7 	bl	8000d94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001206:	2300      	movs	r3, #0
}
 8001208:	4618      	mov	r0, r3
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	58024400 	.word	0x58024400
 8001214:	080080a0 	.word	0x080080a0
 8001218:	24000004 	.word	0x24000004
 800121c:	24000000 	.word	0x24000000

08001220 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001228:	4b15      	ldr	r3, [pc, #84]	; (8001280 <HAL_InitTick+0x60>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d101      	bne.n	8001234 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e021      	b.n	8001278 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001234:	4b13      	ldr	r3, [pc, #76]	; (8001284 <HAL_InitTick+0x64>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4b11      	ldr	r3, [pc, #68]	; (8001280 <HAL_InitTick+0x60>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	4619      	mov	r1, r3
 800123e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001242:	fbb3 f3f1 	udiv	r3, r3, r1
 8001246:	fbb2 f3f3 	udiv	r3, r2, r3
 800124a:	4618      	mov	r0, r3
 800124c:	f000 f94d 	bl	80014ea <HAL_SYSTICK_Config>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e00e      	b.n	8001278 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b0f      	cmp	r3, #15
 800125e:	d80a      	bhi.n	8001276 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001260:	2200      	movs	r2, #0
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	f04f 30ff 	mov.w	r0, #4294967295
 8001268:	f000 f917 	bl	800149a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800126c:	4a06      	ldr	r2, [pc, #24]	; (8001288 <HAL_InitTick+0x68>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001272:	2300      	movs	r3, #0
 8001274:	e000      	b.n	8001278 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
}
 8001278:	4618      	mov	r0, r3
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	2400000c 	.word	0x2400000c
 8001284:	24000000 	.word	0x24000000
 8001288:	24000008 	.word	0x24000008

0800128c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <HAL_IncTick+0x20>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	461a      	mov	r2, r3
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <HAL_IncTick+0x24>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4413      	add	r3, r2
 800129c:	4a04      	ldr	r2, [pc, #16]	; (80012b0 <HAL_IncTick+0x24>)
 800129e:	6013      	str	r3, [r2, #0]
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	2400000c 	.word	0x2400000c
 80012b0:	240002dc 	.word	0x240002dc

080012b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return uwTick;
 80012b8:	4b03      	ldr	r3, [pc, #12]	; (80012c8 <HAL_GetTick+0x14>)
 80012ba:	681b      	ldr	r3, [r3, #0]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	240002dc 	.word	0x240002dc

080012cc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80012d0:	4b03      	ldr	r3, [pc, #12]	; (80012e0 <HAL_GetREVID+0x14>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	0c1b      	lsrs	r3, r3, #16
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	5c001000 	.word	0x5c001000

080012e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f4:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <__NVIC_SetPriorityGrouping+0x40>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012fa:	68ba      	ldr	r2, [r7, #8]
 80012fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001300:	4013      	ands	r3, r2
 8001302:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <__NVIC_SetPriorityGrouping+0x44>)
 800130e:	4313      	orrs	r3, r2
 8001310:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001312:	4a04      	ldr	r2, [pc, #16]	; (8001324 <__NVIC_SetPriorityGrouping+0x40>)
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	60d3      	str	r3, [r2, #12]
}
 8001318:	bf00      	nop
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	e000ed00 	.word	0xe000ed00
 8001328:	05fa0000 	.word	0x05fa0000

0800132c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001330:	4b04      	ldr	r3, [pc, #16]	; (8001344 <__NVIC_GetPriorityGrouping+0x18>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	0a1b      	lsrs	r3, r3, #8
 8001336:	f003 0307 	and.w	r3, r3, #7
}
 800133a:	4618      	mov	r0, r3
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001352:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001356:	2b00      	cmp	r3, #0
 8001358:	db0b      	blt.n	8001372 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800135a:	88fb      	ldrh	r3, [r7, #6]
 800135c:	f003 021f 	and.w	r2, r3, #31
 8001360:	4907      	ldr	r1, [pc, #28]	; (8001380 <__NVIC_EnableIRQ+0x38>)
 8001362:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001366:	095b      	lsrs	r3, r3, #5
 8001368:	2001      	movs	r0, #1
 800136a:	fa00 f202 	lsl.w	r2, r0, r2
 800136e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	e000e100 	.word	0xe000e100

08001384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	6039      	str	r1, [r7, #0]
 800138e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001390:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001394:	2b00      	cmp	r3, #0
 8001396:	db0a      	blt.n	80013ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	b2da      	uxtb	r2, r3
 800139c:	490c      	ldr	r1, [pc, #48]	; (80013d0 <__NVIC_SetPriority+0x4c>)
 800139e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013a2:	0112      	lsls	r2, r2, #4
 80013a4:	b2d2      	uxtb	r2, r2
 80013a6:	440b      	add	r3, r1
 80013a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013ac:	e00a      	b.n	80013c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4908      	ldr	r1, [pc, #32]	; (80013d4 <__NVIC_SetPriority+0x50>)
 80013b4:	88fb      	ldrh	r3, [r7, #6]
 80013b6:	f003 030f 	and.w	r3, r3, #15
 80013ba:	3b04      	subs	r3, #4
 80013bc:	0112      	lsls	r2, r2, #4
 80013be:	b2d2      	uxtb	r2, r2
 80013c0:	440b      	add	r3, r1
 80013c2:	761a      	strb	r2, [r3, #24]
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	e000e100 	.word	0xe000e100
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d8:	b480      	push	{r7}
 80013da:	b089      	sub	sp, #36	; 0x24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	f1c3 0307 	rsb	r3, r3, #7
 80013f2:	2b04      	cmp	r3, #4
 80013f4:	bf28      	it	cs
 80013f6:	2304      	movcs	r3, #4
 80013f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3304      	adds	r3, #4
 80013fe:	2b06      	cmp	r3, #6
 8001400:	d902      	bls.n	8001408 <NVIC_EncodePriority+0x30>
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	3b03      	subs	r3, #3
 8001406:	e000      	b.n	800140a <NVIC_EncodePriority+0x32>
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800140c:	f04f 32ff 	mov.w	r2, #4294967295
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43da      	mvns	r2, r3
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	401a      	ands	r2, r3
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001420:	f04f 31ff 	mov.w	r1, #4294967295
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	fa01 f303 	lsl.w	r3, r1, r3
 800142a:	43d9      	mvns	r1, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001430:	4313      	orrs	r3, r2
         );
}
 8001432:	4618      	mov	r0, r3
 8001434:	3724      	adds	r7, #36	; 0x24
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
	...

08001440 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3b01      	subs	r3, #1
 800144c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001450:	d301      	bcc.n	8001456 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001452:	2301      	movs	r3, #1
 8001454:	e00f      	b.n	8001476 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001456:	4a0a      	ldr	r2, [pc, #40]	; (8001480 <SysTick_Config+0x40>)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3b01      	subs	r3, #1
 800145c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800145e:	210f      	movs	r1, #15
 8001460:	f04f 30ff 	mov.w	r0, #4294967295
 8001464:	f7ff ff8e 	bl	8001384 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001468:	4b05      	ldr	r3, [pc, #20]	; (8001480 <SysTick_Config+0x40>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800146e:	4b04      	ldr	r3, [pc, #16]	; (8001480 <SysTick_Config+0x40>)
 8001470:	2207      	movs	r2, #7
 8001472:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	e000e010 	.word	0xe000e010

08001484 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f7ff ff29 	bl	80012e4 <__NVIC_SetPriorityGrouping>
}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b086      	sub	sp, #24
 800149e:	af00      	add	r7, sp, #0
 80014a0:	4603      	mov	r3, r0
 80014a2:	60b9      	str	r1, [r7, #8]
 80014a4:	607a      	str	r2, [r7, #4]
 80014a6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014a8:	f7ff ff40 	bl	800132c <__NVIC_GetPriorityGrouping>
 80014ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	68b9      	ldr	r1, [r7, #8]
 80014b2:	6978      	ldr	r0, [r7, #20]
 80014b4:	f7ff ff90 	bl	80013d8 <NVIC_EncodePriority>
 80014b8:	4602      	mov	r2, r0
 80014ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014be:	4611      	mov	r1, r2
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ff5f 	bl	8001384 <__NVIC_SetPriority>
}
 80014c6:	bf00      	nop
 80014c8:	3718      	adds	r7, #24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	4603      	mov	r3, r0
 80014d6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff ff33 	bl	8001348 <__NVIC_EnableIRQ>
}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff ffa4 	bl	8001440 <SysTick_Config>
 80014f8:	4603      	mov	r3, r0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
	...

08001504 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800150c:	f7ff fed2 	bl	80012b4 <HAL_GetTick>
 8001510:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d101      	bne.n	800151c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e2dc      	b.n	8001ad6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001522:	b2db      	uxtb	r3, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d008      	beq.n	800153a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2280      	movs	r2, #128	; 0x80
 800152c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e2cd      	b.n	8001ad6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a76      	ldr	r2, [pc, #472]	; (8001718 <HAL_DMA_Abort+0x214>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d04a      	beq.n	80015da <HAL_DMA_Abort+0xd6>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a74      	ldr	r2, [pc, #464]	; (800171c <HAL_DMA_Abort+0x218>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d045      	beq.n	80015da <HAL_DMA_Abort+0xd6>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a73      	ldr	r2, [pc, #460]	; (8001720 <HAL_DMA_Abort+0x21c>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d040      	beq.n	80015da <HAL_DMA_Abort+0xd6>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a71      	ldr	r2, [pc, #452]	; (8001724 <HAL_DMA_Abort+0x220>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d03b      	beq.n	80015da <HAL_DMA_Abort+0xd6>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a70      	ldr	r2, [pc, #448]	; (8001728 <HAL_DMA_Abort+0x224>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d036      	beq.n	80015da <HAL_DMA_Abort+0xd6>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a6e      	ldr	r2, [pc, #440]	; (800172c <HAL_DMA_Abort+0x228>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d031      	beq.n	80015da <HAL_DMA_Abort+0xd6>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a6d      	ldr	r2, [pc, #436]	; (8001730 <HAL_DMA_Abort+0x22c>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d02c      	beq.n	80015da <HAL_DMA_Abort+0xd6>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a6b      	ldr	r2, [pc, #428]	; (8001734 <HAL_DMA_Abort+0x230>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d027      	beq.n	80015da <HAL_DMA_Abort+0xd6>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a6a      	ldr	r2, [pc, #424]	; (8001738 <HAL_DMA_Abort+0x234>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d022      	beq.n	80015da <HAL_DMA_Abort+0xd6>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a68      	ldr	r2, [pc, #416]	; (800173c <HAL_DMA_Abort+0x238>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d01d      	beq.n	80015da <HAL_DMA_Abort+0xd6>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a67      	ldr	r2, [pc, #412]	; (8001740 <HAL_DMA_Abort+0x23c>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d018      	beq.n	80015da <HAL_DMA_Abort+0xd6>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a65      	ldr	r2, [pc, #404]	; (8001744 <HAL_DMA_Abort+0x240>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d013      	beq.n	80015da <HAL_DMA_Abort+0xd6>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a64      	ldr	r2, [pc, #400]	; (8001748 <HAL_DMA_Abort+0x244>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d00e      	beq.n	80015da <HAL_DMA_Abort+0xd6>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a62      	ldr	r2, [pc, #392]	; (800174c <HAL_DMA_Abort+0x248>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d009      	beq.n	80015da <HAL_DMA_Abort+0xd6>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a61      	ldr	r2, [pc, #388]	; (8001750 <HAL_DMA_Abort+0x24c>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d004      	beq.n	80015da <HAL_DMA_Abort+0xd6>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a5f      	ldr	r2, [pc, #380]	; (8001754 <HAL_DMA_Abort+0x250>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d101      	bne.n	80015de <HAL_DMA_Abort+0xda>
 80015da:	2301      	movs	r3, #1
 80015dc:	e000      	b.n	80015e0 <HAL_DMA_Abort+0xdc>
 80015de:	2300      	movs	r3, #0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d013      	beq.n	800160c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f022 021e 	bic.w	r2, r2, #30
 80015f2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	695a      	ldr	r2, [r3, #20]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001602:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	617b      	str	r3, [r7, #20]
 800160a:	e00a      	b.n	8001622 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 020e 	bic.w	r2, r2, #14
 800161a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a3c      	ldr	r2, [pc, #240]	; (8001718 <HAL_DMA_Abort+0x214>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d072      	beq.n	8001712 <HAL_DMA_Abort+0x20e>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a3a      	ldr	r2, [pc, #232]	; (800171c <HAL_DMA_Abort+0x218>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d06d      	beq.n	8001712 <HAL_DMA_Abort+0x20e>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a39      	ldr	r2, [pc, #228]	; (8001720 <HAL_DMA_Abort+0x21c>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d068      	beq.n	8001712 <HAL_DMA_Abort+0x20e>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a37      	ldr	r2, [pc, #220]	; (8001724 <HAL_DMA_Abort+0x220>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d063      	beq.n	8001712 <HAL_DMA_Abort+0x20e>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a36      	ldr	r2, [pc, #216]	; (8001728 <HAL_DMA_Abort+0x224>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d05e      	beq.n	8001712 <HAL_DMA_Abort+0x20e>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a34      	ldr	r2, [pc, #208]	; (800172c <HAL_DMA_Abort+0x228>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d059      	beq.n	8001712 <HAL_DMA_Abort+0x20e>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a33      	ldr	r2, [pc, #204]	; (8001730 <HAL_DMA_Abort+0x22c>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d054      	beq.n	8001712 <HAL_DMA_Abort+0x20e>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a31      	ldr	r2, [pc, #196]	; (8001734 <HAL_DMA_Abort+0x230>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d04f      	beq.n	8001712 <HAL_DMA_Abort+0x20e>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a30      	ldr	r2, [pc, #192]	; (8001738 <HAL_DMA_Abort+0x234>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d04a      	beq.n	8001712 <HAL_DMA_Abort+0x20e>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a2e      	ldr	r2, [pc, #184]	; (800173c <HAL_DMA_Abort+0x238>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d045      	beq.n	8001712 <HAL_DMA_Abort+0x20e>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a2d      	ldr	r2, [pc, #180]	; (8001740 <HAL_DMA_Abort+0x23c>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d040      	beq.n	8001712 <HAL_DMA_Abort+0x20e>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a2b      	ldr	r2, [pc, #172]	; (8001744 <HAL_DMA_Abort+0x240>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d03b      	beq.n	8001712 <HAL_DMA_Abort+0x20e>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a2a      	ldr	r2, [pc, #168]	; (8001748 <HAL_DMA_Abort+0x244>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d036      	beq.n	8001712 <HAL_DMA_Abort+0x20e>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a28      	ldr	r2, [pc, #160]	; (800174c <HAL_DMA_Abort+0x248>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d031      	beq.n	8001712 <HAL_DMA_Abort+0x20e>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a27      	ldr	r2, [pc, #156]	; (8001750 <HAL_DMA_Abort+0x24c>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d02c      	beq.n	8001712 <HAL_DMA_Abort+0x20e>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a25      	ldr	r2, [pc, #148]	; (8001754 <HAL_DMA_Abort+0x250>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d027      	beq.n	8001712 <HAL_DMA_Abort+0x20e>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a24      	ldr	r2, [pc, #144]	; (8001758 <HAL_DMA_Abort+0x254>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d022      	beq.n	8001712 <HAL_DMA_Abort+0x20e>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a22      	ldr	r2, [pc, #136]	; (800175c <HAL_DMA_Abort+0x258>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d01d      	beq.n	8001712 <HAL_DMA_Abort+0x20e>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a21      	ldr	r2, [pc, #132]	; (8001760 <HAL_DMA_Abort+0x25c>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d018      	beq.n	8001712 <HAL_DMA_Abort+0x20e>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a1f      	ldr	r2, [pc, #124]	; (8001764 <HAL_DMA_Abort+0x260>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d013      	beq.n	8001712 <HAL_DMA_Abort+0x20e>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a1e      	ldr	r2, [pc, #120]	; (8001768 <HAL_DMA_Abort+0x264>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d00e      	beq.n	8001712 <HAL_DMA_Abort+0x20e>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a1c      	ldr	r2, [pc, #112]	; (800176c <HAL_DMA_Abort+0x268>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d009      	beq.n	8001712 <HAL_DMA_Abort+0x20e>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a1b      	ldr	r2, [pc, #108]	; (8001770 <HAL_DMA_Abort+0x26c>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d004      	beq.n	8001712 <HAL_DMA_Abort+0x20e>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a19      	ldr	r2, [pc, #100]	; (8001774 <HAL_DMA_Abort+0x270>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d132      	bne.n	8001778 <HAL_DMA_Abort+0x274>
 8001712:	2301      	movs	r3, #1
 8001714:	e031      	b.n	800177a <HAL_DMA_Abort+0x276>
 8001716:	bf00      	nop
 8001718:	40020010 	.word	0x40020010
 800171c:	40020028 	.word	0x40020028
 8001720:	40020040 	.word	0x40020040
 8001724:	40020058 	.word	0x40020058
 8001728:	40020070 	.word	0x40020070
 800172c:	40020088 	.word	0x40020088
 8001730:	400200a0 	.word	0x400200a0
 8001734:	400200b8 	.word	0x400200b8
 8001738:	40020410 	.word	0x40020410
 800173c:	40020428 	.word	0x40020428
 8001740:	40020440 	.word	0x40020440
 8001744:	40020458 	.word	0x40020458
 8001748:	40020470 	.word	0x40020470
 800174c:	40020488 	.word	0x40020488
 8001750:	400204a0 	.word	0x400204a0
 8001754:	400204b8 	.word	0x400204b8
 8001758:	58025408 	.word	0x58025408
 800175c:	5802541c 	.word	0x5802541c
 8001760:	58025430 	.word	0x58025430
 8001764:	58025444 	.word	0x58025444
 8001768:	58025458 	.word	0x58025458
 800176c:	5802546c 	.word	0x5802546c
 8001770:	58025480 	.word	0x58025480
 8001774:	58025494 	.word	0x58025494
 8001778:	2300      	movs	r3, #0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d007      	beq.n	800178e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001788:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800178c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a6d      	ldr	r2, [pc, #436]	; (8001948 <HAL_DMA_Abort+0x444>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d04a      	beq.n	800182e <HAL_DMA_Abort+0x32a>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a6b      	ldr	r2, [pc, #428]	; (800194c <HAL_DMA_Abort+0x448>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d045      	beq.n	800182e <HAL_DMA_Abort+0x32a>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a6a      	ldr	r2, [pc, #424]	; (8001950 <HAL_DMA_Abort+0x44c>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d040      	beq.n	800182e <HAL_DMA_Abort+0x32a>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a68      	ldr	r2, [pc, #416]	; (8001954 <HAL_DMA_Abort+0x450>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d03b      	beq.n	800182e <HAL_DMA_Abort+0x32a>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a67      	ldr	r2, [pc, #412]	; (8001958 <HAL_DMA_Abort+0x454>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d036      	beq.n	800182e <HAL_DMA_Abort+0x32a>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a65      	ldr	r2, [pc, #404]	; (800195c <HAL_DMA_Abort+0x458>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d031      	beq.n	800182e <HAL_DMA_Abort+0x32a>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a64      	ldr	r2, [pc, #400]	; (8001960 <HAL_DMA_Abort+0x45c>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d02c      	beq.n	800182e <HAL_DMA_Abort+0x32a>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a62      	ldr	r2, [pc, #392]	; (8001964 <HAL_DMA_Abort+0x460>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d027      	beq.n	800182e <HAL_DMA_Abort+0x32a>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a61      	ldr	r2, [pc, #388]	; (8001968 <HAL_DMA_Abort+0x464>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d022      	beq.n	800182e <HAL_DMA_Abort+0x32a>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a5f      	ldr	r2, [pc, #380]	; (800196c <HAL_DMA_Abort+0x468>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d01d      	beq.n	800182e <HAL_DMA_Abort+0x32a>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a5e      	ldr	r2, [pc, #376]	; (8001970 <HAL_DMA_Abort+0x46c>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d018      	beq.n	800182e <HAL_DMA_Abort+0x32a>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a5c      	ldr	r2, [pc, #368]	; (8001974 <HAL_DMA_Abort+0x470>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d013      	beq.n	800182e <HAL_DMA_Abort+0x32a>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a5b      	ldr	r2, [pc, #364]	; (8001978 <HAL_DMA_Abort+0x474>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d00e      	beq.n	800182e <HAL_DMA_Abort+0x32a>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a59      	ldr	r2, [pc, #356]	; (800197c <HAL_DMA_Abort+0x478>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d009      	beq.n	800182e <HAL_DMA_Abort+0x32a>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a58      	ldr	r2, [pc, #352]	; (8001980 <HAL_DMA_Abort+0x47c>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d004      	beq.n	800182e <HAL_DMA_Abort+0x32a>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a56      	ldr	r2, [pc, #344]	; (8001984 <HAL_DMA_Abort+0x480>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d108      	bne.n	8001840 <HAL_DMA_Abort+0x33c>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f022 0201 	bic.w	r2, r2, #1
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	e007      	b.n	8001850 <HAL_DMA_Abort+0x34c>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f022 0201 	bic.w	r2, r2, #1
 800184e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001850:	e013      	b.n	800187a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001852:	f7ff fd2f 	bl	80012b4 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b05      	cmp	r3, #5
 800185e:	d90c      	bls.n	800187a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2220      	movs	r2, #32
 8001864:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2203      	movs	r2, #3
 8001872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e12d      	b.n	8001ad6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1e5      	bne.n	8001852 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a2f      	ldr	r2, [pc, #188]	; (8001948 <HAL_DMA_Abort+0x444>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d04a      	beq.n	8001926 <HAL_DMA_Abort+0x422>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a2d      	ldr	r2, [pc, #180]	; (800194c <HAL_DMA_Abort+0x448>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d045      	beq.n	8001926 <HAL_DMA_Abort+0x422>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a2c      	ldr	r2, [pc, #176]	; (8001950 <HAL_DMA_Abort+0x44c>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d040      	beq.n	8001926 <HAL_DMA_Abort+0x422>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a2a      	ldr	r2, [pc, #168]	; (8001954 <HAL_DMA_Abort+0x450>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d03b      	beq.n	8001926 <HAL_DMA_Abort+0x422>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a29      	ldr	r2, [pc, #164]	; (8001958 <HAL_DMA_Abort+0x454>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d036      	beq.n	8001926 <HAL_DMA_Abort+0x422>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a27      	ldr	r2, [pc, #156]	; (800195c <HAL_DMA_Abort+0x458>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d031      	beq.n	8001926 <HAL_DMA_Abort+0x422>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a26      	ldr	r2, [pc, #152]	; (8001960 <HAL_DMA_Abort+0x45c>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d02c      	beq.n	8001926 <HAL_DMA_Abort+0x422>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a24      	ldr	r2, [pc, #144]	; (8001964 <HAL_DMA_Abort+0x460>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d027      	beq.n	8001926 <HAL_DMA_Abort+0x422>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a23      	ldr	r2, [pc, #140]	; (8001968 <HAL_DMA_Abort+0x464>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d022      	beq.n	8001926 <HAL_DMA_Abort+0x422>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a21      	ldr	r2, [pc, #132]	; (800196c <HAL_DMA_Abort+0x468>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d01d      	beq.n	8001926 <HAL_DMA_Abort+0x422>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a20      	ldr	r2, [pc, #128]	; (8001970 <HAL_DMA_Abort+0x46c>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d018      	beq.n	8001926 <HAL_DMA_Abort+0x422>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a1e      	ldr	r2, [pc, #120]	; (8001974 <HAL_DMA_Abort+0x470>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d013      	beq.n	8001926 <HAL_DMA_Abort+0x422>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a1d      	ldr	r2, [pc, #116]	; (8001978 <HAL_DMA_Abort+0x474>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d00e      	beq.n	8001926 <HAL_DMA_Abort+0x422>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a1b      	ldr	r2, [pc, #108]	; (800197c <HAL_DMA_Abort+0x478>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d009      	beq.n	8001926 <HAL_DMA_Abort+0x422>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a1a      	ldr	r2, [pc, #104]	; (8001980 <HAL_DMA_Abort+0x47c>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d004      	beq.n	8001926 <HAL_DMA_Abort+0x422>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a18      	ldr	r2, [pc, #96]	; (8001984 <HAL_DMA_Abort+0x480>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d101      	bne.n	800192a <HAL_DMA_Abort+0x426>
 8001926:	2301      	movs	r3, #1
 8001928:	e000      	b.n	800192c <HAL_DMA_Abort+0x428>
 800192a:	2300      	movs	r3, #0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d02b      	beq.n	8001988 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001934:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800193a:	f003 031f 	and.w	r3, r3, #31
 800193e:	223f      	movs	r2, #63	; 0x3f
 8001940:	409a      	lsls	r2, r3
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	609a      	str	r2, [r3, #8]
 8001946:	e02a      	b.n	800199e <HAL_DMA_Abort+0x49a>
 8001948:	40020010 	.word	0x40020010
 800194c:	40020028 	.word	0x40020028
 8001950:	40020040 	.word	0x40020040
 8001954:	40020058 	.word	0x40020058
 8001958:	40020070 	.word	0x40020070
 800195c:	40020088 	.word	0x40020088
 8001960:	400200a0 	.word	0x400200a0
 8001964:	400200b8 	.word	0x400200b8
 8001968:	40020410 	.word	0x40020410
 800196c:	40020428 	.word	0x40020428
 8001970:	40020440 	.word	0x40020440
 8001974:	40020458 	.word	0x40020458
 8001978:	40020470 	.word	0x40020470
 800197c:	40020488 	.word	0x40020488
 8001980:	400204a0 	.word	0x400204a0
 8001984:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800198c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001992:	f003 031f 	and.w	r3, r3, #31
 8001996:	2201      	movs	r2, #1
 8001998:	409a      	lsls	r2, r3
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a4f      	ldr	r2, [pc, #316]	; (8001ae0 <HAL_DMA_Abort+0x5dc>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d072      	beq.n	8001a8e <HAL_DMA_Abort+0x58a>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a4d      	ldr	r2, [pc, #308]	; (8001ae4 <HAL_DMA_Abort+0x5e0>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d06d      	beq.n	8001a8e <HAL_DMA_Abort+0x58a>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a4c      	ldr	r2, [pc, #304]	; (8001ae8 <HAL_DMA_Abort+0x5e4>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d068      	beq.n	8001a8e <HAL_DMA_Abort+0x58a>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a4a      	ldr	r2, [pc, #296]	; (8001aec <HAL_DMA_Abort+0x5e8>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d063      	beq.n	8001a8e <HAL_DMA_Abort+0x58a>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a49      	ldr	r2, [pc, #292]	; (8001af0 <HAL_DMA_Abort+0x5ec>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d05e      	beq.n	8001a8e <HAL_DMA_Abort+0x58a>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a47      	ldr	r2, [pc, #284]	; (8001af4 <HAL_DMA_Abort+0x5f0>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d059      	beq.n	8001a8e <HAL_DMA_Abort+0x58a>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a46      	ldr	r2, [pc, #280]	; (8001af8 <HAL_DMA_Abort+0x5f4>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d054      	beq.n	8001a8e <HAL_DMA_Abort+0x58a>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a44      	ldr	r2, [pc, #272]	; (8001afc <HAL_DMA_Abort+0x5f8>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d04f      	beq.n	8001a8e <HAL_DMA_Abort+0x58a>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a43      	ldr	r2, [pc, #268]	; (8001b00 <HAL_DMA_Abort+0x5fc>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d04a      	beq.n	8001a8e <HAL_DMA_Abort+0x58a>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a41      	ldr	r2, [pc, #260]	; (8001b04 <HAL_DMA_Abort+0x600>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d045      	beq.n	8001a8e <HAL_DMA_Abort+0x58a>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a40      	ldr	r2, [pc, #256]	; (8001b08 <HAL_DMA_Abort+0x604>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d040      	beq.n	8001a8e <HAL_DMA_Abort+0x58a>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a3e      	ldr	r2, [pc, #248]	; (8001b0c <HAL_DMA_Abort+0x608>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d03b      	beq.n	8001a8e <HAL_DMA_Abort+0x58a>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a3d      	ldr	r2, [pc, #244]	; (8001b10 <HAL_DMA_Abort+0x60c>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d036      	beq.n	8001a8e <HAL_DMA_Abort+0x58a>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a3b      	ldr	r2, [pc, #236]	; (8001b14 <HAL_DMA_Abort+0x610>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d031      	beq.n	8001a8e <HAL_DMA_Abort+0x58a>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a3a      	ldr	r2, [pc, #232]	; (8001b18 <HAL_DMA_Abort+0x614>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d02c      	beq.n	8001a8e <HAL_DMA_Abort+0x58a>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a38      	ldr	r2, [pc, #224]	; (8001b1c <HAL_DMA_Abort+0x618>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d027      	beq.n	8001a8e <HAL_DMA_Abort+0x58a>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a37      	ldr	r2, [pc, #220]	; (8001b20 <HAL_DMA_Abort+0x61c>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d022      	beq.n	8001a8e <HAL_DMA_Abort+0x58a>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a35      	ldr	r2, [pc, #212]	; (8001b24 <HAL_DMA_Abort+0x620>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d01d      	beq.n	8001a8e <HAL_DMA_Abort+0x58a>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a34      	ldr	r2, [pc, #208]	; (8001b28 <HAL_DMA_Abort+0x624>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d018      	beq.n	8001a8e <HAL_DMA_Abort+0x58a>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a32      	ldr	r2, [pc, #200]	; (8001b2c <HAL_DMA_Abort+0x628>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d013      	beq.n	8001a8e <HAL_DMA_Abort+0x58a>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a31      	ldr	r2, [pc, #196]	; (8001b30 <HAL_DMA_Abort+0x62c>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d00e      	beq.n	8001a8e <HAL_DMA_Abort+0x58a>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a2f      	ldr	r2, [pc, #188]	; (8001b34 <HAL_DMA_Abort+0x630>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d009      	beq.n	8001a8e <HAL_DMA_Abort+0x58a>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a2e      	ldr	r2, [pc, #184]	; (8001b38 <HAL_DMA_Abort+0x634>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d004      	beq.n	8001a8e <HAL_DMA_Abort+0x58a>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a2c      	ldr	r2, [pc, #176]	; (8001b3c <HAL_DMA_Abort+0x638>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d101      	bne.n	8001a92 <HAL_DMA_Abort+0x58e>
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e000      	b.n	8001a94 <HAL_DMA_Abort+0x590>
 8001a92:	2300      	movs	r3, #0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d015      	beq.n	8001ac4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001aa0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00c      	beq.n	8001ac4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ab4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ab8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001ac2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3718      	adds	r7, #24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40020010 	.word	0x40020010
 8001ae4:	40020028 	.word	0x40020028
 8001ae8:	40020040 	.word	0x40020040
 8001aec:	40020058 	.word	0x40020058
 8001af0:	40020070 	.word	0x40020070
 8001af4:	40020088 	.word	0x40020088
 8001af8:	400200a0 	.word	0x400200a0
 8001afc:	400200b8 	.word	0x400200b8
 8001b00:	40020410 	.word	0x40020410
 8001b04:	40020428 	.word	0x40020428
 8001b08:	40020440 	.word	0x40020440
 8001b0c:	40020458 	.word	0x40020458
 8001b10:	40020470 	.word	0x40020470
 8001b14:	40020488 	.word	0x40020488
 8001b18:	400204a0 	.word	0x400204a0
 8001b1c:	400204b8 	.word	0x400204b8
 8001b20:	58025408 	.word	0x58025408
 8001b24:	5802541c 	.word	0x5802541c
 8001b28:	58025430 	.word	0x58025430
 8001b2c:	58025444 	.word	0x58025444
 8001b30:	58025458 	.word	0x58025458
 8001b34:	5802546c 	.word	0x5802546c
 8001b38:	58025480 	.word	0x58025480
 8001b3c:	58025494 	.word	0x58025494

08001b40 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e205      	b.n	8001f5e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d004      	beq.n	8001b68 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2280      	movs	r2, #128	; 0x80
 8001b62:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e1fa      	b.n	8001f5e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a8c      	ldr	r2, [pc, #560]	; (8001da0 <HAL_DMA_Abort_IT+0x260>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d04a      	beq.n	8001c08 <HAL_DMA_Abort_IT+0xc8>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a8b      	ldr	r2, [pc, #556]	; (8001da4 <HAL_DMA_Abort_IT+0x264>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d045      	beq.n	8001c08 <HAL_DMA_Abort_IT+0xc8>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a89      	ldr	r2, [pc, #548]	; (8001da8 <HAL_DMA_Abort_IT+0x268>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d040      	beq.n	8001c08 <HAL_DMA_Abort_IT+0xc8>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a88      	ldr	r2, [pc, #544]	; (8001dac <HAL_DMA_Abort_IT+0x26c>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d03b      	beq.n	8001c08 <HAL_DMA_Abort_IT+0xc8>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a86      	ldr	r2, [pc, #536]	; (8001db0 <HAL_DMA_Abort_IT+0x270>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d036      	beq.n	8001c08 <HAL_DMA_Abort_IT+0xc8>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a85      	ldr	r2, [pc, #532]	; (8001db4 <HAL_DMA_Abort_IT+0x274>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d031      	beq.n	8001c08 <HAL_DMA_Abort_IT+0xc8>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a83      	ldr	r2, [pc, #524]	; (8001db8 <HAL_DMA_Abort_IT+0x278>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d02c      	beq.n	8001c08 <HAL_DMA_Abort_IT+0xc8>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a82      	ldr	r2, [pc, #520]	; (8001dbc <HAL_DMA_Abort_IT+0x27c>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d027      	beq.n	8001c08 <HAL_DMA_Abort_IT+0xc8>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a80      	ldr	r2, [pc, #512]	; (8001dc0 <HAL_DMA_Abort_IT+0x280>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d022      	beq.n	8001c08 <HAL_DMA_Abort_IT+0xc8>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a7f      	ldr	r2, [pc, #508]	; (8001dc4 <HAL_DMA_Abort_IT+0x284>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d01d      	beq.n	8001c08 <HAL_DMA_Abort_IT+0xc8>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a7d      	ldr	r2, [pc, #500]	; (8001dc8 <HAL_DMA_Abort_IT+0x288>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d018      	beq.n	8001c08 <HAL_DMA_Abort_IT+0xc8>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a7c      	ldr	r2, [pc, #496]	; (8001dcc <HAL_DMA_Abort_IT+0x28c>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d013      	beq.n	8001c08 <HAL_DMA_Abort_IT+0xc8>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a7a      	ldr	r2, [pc, #488]	; (8001dd0 <HAL_DMA_Abort_IT+0x290>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d00e      	beq.n	8001c08 <HAL_DMA_Abort_IT+0xc8>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a79      	ldr	r2, [pc, #484]	; (8001dd4 <HAL_DMA_Abort_IT+0x294>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d009      	beq.n	8001c08 <HAL_DMA_Abort_IT+0xc8>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a77      	ldr	r2, [pc, #476]	; (8001dd8 <HAL_DMA_Abort_IT+0x298>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d004      	beq.n	8001c08 <HAL_DMA_Abort_IT+0xc8>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a76      	ldr	r2, [pc, #472]	; (8001ddc <HAL_DMA_Abort_IT+0x29c>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d101      	bne.n	8001c0c <HAL_DMA_Abort_IT+0xcc>
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e000      	b.n	8001c0e <HAL_DMA_Abort_IT+0xce>
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d065      	beq.n	8001cde <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2204      	movs	r2, #4
 8001c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a60      	ldr	r2, [pc, #384]	; (8001da0 <HAL_DMA_Abort_IT+0x260>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d04a      	beq.n	8001cba <HAL_DMA_Abort_IT+0x17a>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a5e      	ldr	r2, [pc, #376]	; (8001da4 <HAL_DMA_Abort_IT+0x264>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d045      	beq.n	8001cba <HAL_DMA_Abort_IT+0x17a>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a5d      	ldr	r2, [pc, #372]	; (8001da8 <HAL_DMA_Abort_IT+0x268>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d040      	beq.n	8001cba <HAL_DMA_Abort_IT+0x17a>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a5b      	ldr	r2, [pc, #364]	; (8001dac <HAL_DMA_Abort_IT+0x26c>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d03b      	beq.n	8001cba <HAL_DMA_Abort_IT+0x17a>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a5a      	ldr	r2, [pc, #360]	; (8001db0 <HAL_DMA_Abort_IT+0x270>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d036      	beq.n	8001cba <HAL_DMA_Abort_IT+0x17a>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a58      	ldr	r2, [pc, #352]	; (8001db4 <HAL_DMA_Abort_IT+0x274>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d031      	beq.n	8001cba <HAL_DMA_Abort_IT+0x17a>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a57      	ldr	r2, [pc, #348]	; (8001db8 <HAL_DMA_Abort_IT+0x278>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d02c      	beq.n	8001cba <HAL_DMA_Abort_IT+0x17a>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a55      	ldr	r2, [pc, #340]	; (8001dbc <HAL_DMA_Abort_IT+0x27c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d027      	beq.n	8001cba <HAL_DMA_Abort_IT+0x17a>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a54      	ldr	r2, [pc, #336]	; (8001dc0 <HAL_DMA_Abort_IT+0x280>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d022      	beq.n	8001cba <HAL_DMA_Abort_IT+0x17a>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a52      	ldr	r2, [pc, #328]	; (8001dc4 <HAL_DMA_Abort_IT+0x284>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d01d      	beq.n	8001cba <HAL_DMA_Abort_IT+0x17a>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a51      	ldr	r2, [pc, #324]	; (8001dc8 <HAL_DMA_Abort_IT+0x288>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d018      	beq.n	8001cba <HAL_DMA_Abort_IT+0x17a>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a4f      	ldr	r2, [pc, #316]	; (8001dcc <HAL_DMA_Abort_IT+0x28c>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d013      	beq.n	8001cba <HAL_DMA_Abort_IT+0x17a>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a4e      	ldr	r2, [pc, #312]	; (8001dd0 <HAL_DMA_Abort_IT+0x290>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d00e      	beq.n	8001cba <HAL_DMA_Abort_IT+0x17a>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a4c      	ldr	r2, [pc, #304]	; (8001dd4 <HAL_DMA_Abort_IT+0x294>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d009      	beq.n	8001cba <HAL_DMA_Abort_IT+0x17a>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a4b      	ldr	r2, [pc, #300]	; (8001dd8 <HAL_DMA_Abort_IT+0x298>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d004      	beq.n	8001cba <HAL_DMA_Abort_IT+0x17a>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a49      	ldr	r2, [pc, #292]	; (8001ddc <HAL_DMA_Abort_IT+0x29c>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d108      	bne.n	8001ccc <HAL_DMA_Abort_IT+0x18c>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 0201 	bic.w	r2, r2, #1
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	e147      	b.n	8001f5c <HAL_DMA_Abort_IT+0x41c>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f022 0201 	bic.w	r2, r2, #1
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	e13e      	b.n	8001f5c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f022 020e 	bic.w	r2, r2, #14
 8001cec:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a2b      	ldr	r2, [pc, #172]	; (8001da0 <HAL_DMA_Abort_IT+0x260>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d04a      	beq.n	8001d8e <HAL_DMA_Abort_IT+0x24e>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a29      	ldr	r2, [pc, #164]	; (8001da4 <HAL_DMA_Abort_IT+0x264>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d045      	beq.n	8001d8e <HAL_DMA_Abort_IT+0x24e>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a28      	ldr	r2, [pc, #160]	; (8001da8 <HAL_DMA_Abort_IT+0x268>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d040      	beq.n	8001d8e <HAL_DMA_Abort_IT+0x24e>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a26      	ldr	r2, [pc, #152]	; (8001dac <HAL_DMA_Abort_IT+0x26c>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d03b      	beq.n	8001d8e <HAL_DMA_Abort_IT+0x24e>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a25      	ldr	r2, [pc, #148]	; (8001db0 <HAL_DMA_Abort_IT+0x270>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d036      	beq.n	8001d8e <HAL_DMA_Abort_IT+0x24e>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a23      	ldr	r2, [pc, #140]	; (8001db4 <HAL_DMA_Abort_IT+0x274>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d031      	beq.n	8001d8e <HAL_DMA_Abort_IT+0x24e>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a22      	ldr	r2, [pc, #136]	; (8001db8 <HAL_DMA_Abort_IT+0x278>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d02c      	beq.n	8001d8e <HAL_DMA_Abort_IT+0x24e>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a20      	ldr	r2, [pc, #128]	; (8001dbc <HAL_DMA_Abort_IT+0x27c>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d027      	beq.n	8001d8e <HAL_DMA_Abort_IT+0x24e>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a1f      	ldr	r2, [pc, #124]	; (8001dc0 <HAL_DMA_Abort_IT+0x280>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d022      	beq.n	8001d8e <HAL_DMA_Abort_IT+0x24e>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a1d      	ldr	r2, [pc, #116]	; (8001dc4 <HAL_DMA_Abort_IT+0x284>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d01d      	beq.n	8001d8e <HAL_DMA_Abort_IT+0x24e>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a1c      	ldr	r2, [pc, #112]	; (8001dc8 <HAL_DMA_Abort_IT+0x288>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d018      	beq.n	8001d8e <HAL_DMA_Abort_IT+0x24e>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a1a      	ldr	r2, [pc, #104]	; (8001dcc <HAL_DMA_Abort_IT+0x28c>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d013      	beq.n	8001d8e <HAL_DMA_Abort_IT+0x24e>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a19      	ldr	r2, [pc, #100]	; (8001dd0 <HAL_DMA_Abort_IT+0x290>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d00e      	beq.n	8001d8e <HAL_DMA_Abort_IT+0x24e>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a17      	ldr	r2, [pc, #92]	; (8001dd4 <HAL_DMA_Abort_IT+0x294>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d009      	beq.n	8001d8e <HAL_DMA_Abort_IT+0x24e>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a16      	ldr	r2, [pc, #88]	; (8001dd8 <HAL_DMA_Abort_IT+0x298>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d004      	beq.n	8001d8e <HAL_DMA_Abort_IT+0x24e>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a14      	ldr	r2, [pc, #80]	; (8001ddc <HAL_DMA_Abort_IT+0x29c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d128      	bne.n	8001de0 <HAL_DMA_Abort_IT+0x2a0>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 0201 	bic.w	r2, r2, #1
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	e027      	b.n	8001df0 <HAL_DMA_Abort_IT+0x2b0>
 8001da0:	40020010 	.word	0x40020010
 8001da4:	40020028 	.word	0x40020028
 8001da8:	40020040 	.word	0x40020040
 8001dac:	40020058 	.word	0x40020058
 8001db0:	40020070 	.word	0x40020070
 8001db4:	40020088 	.word	0x40020088
 8001db8:	400200a0 	.word	0x400200a0
 8001dbc:	400200b8 	.word	0x400200b8
 8001dc0:	40020410 	.word	0x40020410
 8001dc4:	40020428 	.word	0x40020428
 8001dc8:	40020440 	.word	0x40020440
 8001dcc:	40020458 	.word	0x40020458
 8001dd0:	40020470 	.word	0x40020470
 8001dd4:	40020488 	.word	0x40020488
 8001dd8:	400204a0 	.word	0x400204a0
 8001ddc:	400204b8 	.word	0x400204b8
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 0201 	bic.w	r2, r2, #1
 8001dee:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a5c      	ldr	r2, [pc, #368]	; (8001f68 <HAL_DMA_Abort_IT+0x428>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d072      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0x3a0>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a5b      	ldr	r2, [pc, #364]	; (8001f6c <HAL_DMA_Abort_IT+0x42c>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d06d      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0x3a0>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a59      	ldr	r2, [pc, #356]	; (8001f70 <HAL_DMA_Abort_IT+0x430>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d068      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0x3a0>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a58      	ldr	r2, [pc, #352]	; (8001f74 <HAL_DMA_Abort_IT+0x434>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d063      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0x3a0>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a56      	ldr	r2, [pc, #344]	; (8001f78 <HAL_DMA_Abort_IT+0x438>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d05e      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0x3a0>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a55      	ldr	r2, [pc, #340]	; (8001f7c <HAL_DMA_Abort_IT+0x43c>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d059      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0x3a0>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a53      	ldr	r2, [pc, #332]	; (8001f80 <HAL_DMA_Abort_IT+0x440>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d054      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0x3a0>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a52      	ldr	r2, [pc, #328]	; (8001f84 <HAL_DMA_Abort_IT+0x444>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d04f      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0x3a0>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a50      	ldr	r2, [pc, #320]	; (8001f88 <HAL_DMA_Abort_IT+0x448>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d04a      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0x3a0>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a4f      	ldr	r2, [pc, #316]	; (8001f8c <HAL_DMA_Abort_IT+0x44c>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d045      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0x3a0>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a4d      	ldr	r2, [pc, #308]	; (8001f90 <HAL_DMA_Abort_IT+0x450>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d040      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0x3a0>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a4c      	ldr	r2, [pc, #304]	; (8001f94 <HAL_DMA_Abort_IT+0x454>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d03b      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0x3a0>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a4a      	ldr	r2, [pc, #296]	; (8001f98 <HAL_DMA_Abort_IT+0x458>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d036      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0x3a0>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a49      	ldr	r2, [pc, #292]	; (8001f9c <HAL_DMA_Abort_IT+0x45c>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d031      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0x3a0>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a47      	ldr	r2, [pc, #284]	; (8001fa0 <HAL_DMA_Abort_IT+0x460>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d02c      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0x3a0>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a46      	ldr	r2, [pc, #280]	; (8001fa4 <HAL_DMA_Abort_IT+0x464>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d027      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0x3a0>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a44      	ldr	r2, [pc, #272]	; (8001fa8 <HAL_DMA_Abort_IT+0x468>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d022      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0x3a0>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a43      	ldr	r2, [pc, #268]	; (8001fac <HAL_DMA_Abort_IT+0x46c>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d01d      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0x3a0>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a41      	ldr	r2, [pc, #260]	; (8001fb0 <HAL_DMA_Abort_IT+0x470>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d018      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0x3a0>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a40      	ldr	r2, [pc, #256]	; (8001fb4 <HAL_DMA_Abort_IT+0x474>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d013      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0x3a0>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a3e      	ldr	r2, [pc, #248]	; (8001fb8 <HAL_DMA_Abort_IT+0x478>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d00e      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0x3a0>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a3d      	ldr	r2, [pc, #244]	; (8001fbc <HAL_DMA_Abort_IT+0x47c>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d009      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0x3a0>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a3b      	ldr	r2, [pc, #236]	; (8001fc0 <HAL_DMA_Abort_IT+0x480>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d004      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0x3a0>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a3a      	ldr	r2, [pc, #232]	; (8001fc4 <HAL_DMA_Abort_IT+0x484>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d101      	bne.n	8001ee4 <HAL_DMA_Abort_IT+0x3a4>
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e000      	b.n	8001ee6 <HAL_DMA_Abort_IT+0x3a6>
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d028      	beq.n	8001f3c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ef4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ef8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efe:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f04:	f003 031f 	and.w	r3, r3, #31
 8001f08:	2201      	movs	r2, #1
 8001f0a:	409a      	lsls	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001f18:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00c      	beq.n	8001f3c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f30:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001f3a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d003      	beq.n	8001f5c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40020010 	.word	0x40020010
 8001f6c:	40020028 	.word	0x40020028
 8001f70:	40020040 	.word	0x40020040
 8001f74:	40020058 	.word	0x40020058
 8001f78:	40020070 	.word	0x40020070
 8001f7c:	40020088 	.word	0x40020088
 8001f80:	400200a0 	.word	0x400200a0
 8001f84:	400200b8 	.word	0x400200b8
 8001f88:	40020410 	.word	0x40020410
 8001f8c:	40020428 	.word	0x40020428
 8001f90:	40020440 	.word	0x40020440
 8001f94:	40020458 	.word	0x40020458
 8001f98:	40020470 	.word	0x40020470
 8001f9c:	40020488 	.word	0x40020488
 8001fa0:	400204a0 	.word	0x400204a0
 8001fa4:	400204b8 	.word	0x400204b8
 8001fa8:	58025408 	.word	0x58025408
 8001fac:	5802541c 	.word	0x5802541c
 8001fb0:	58025430 	.word	0x58025430
 8001fb4:	58025444 	.word	0x58025444
 8001fb8:	58025458 	.word	0x58025458
 8001fbc:	5802546c 	.word	0x5802546c
 8001fc0:	58025480 	.word	0x58025480
 8001fc4:	58025494 	.word	0x58025494

08001fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b089      	sub	sp, #36	; 0x24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001fd6:	4b89      	ldr	r3, [pc, #548]	; (80021fc <HAL_GPIO_Init+0x234>)
 8001fd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001fda:	e194      	b.n	8002306 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe8:	4013      	ands	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f000 8186 	beq.w	8002300 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d00b      	beq.n	8002014 <HAL_GPIO_Init+0x4c>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	2b02      	cmp	r3, #2
 8002002:	d007      	beq.n	8002014 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002008:	2b11      	cmp	r3, #17
 800200a:	d003      	beq.n	8002014 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2b12      	cmp	r3, #18
 8002012:	d130      	bne.n	8002076 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	2203      	movs	r2, #3
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	43db      	mvns	r3, r3
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4013      	ands	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	68da      	ldr	r2, [r3, #12]
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800204a:	2201      	movs	r2, #1
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43db      	mvns	r3, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4013      	ands	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	091b      	lsrs	r3, r3, #4
 8002060:	f003 0201 	and.w	r2, r3, #1
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4313      	orrs	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	2203      	movs	r2, #3
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43db      	mvns	r3, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4013      	ands	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4313      	orrs	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d003      	beq.n	80020b6 <HAL_GPIO_Init+0xee>
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2b12      	cmp	r3, #18
 80020b4:	d123      	bne.n	80020fe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	08da      	lsrs	r2, r3, #3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	3208      	adds	r2, #8
 80020be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	220f      	movs	r2, #15
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43db      	mvns	r3, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4013      	ands	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	691a      	ldr	r2, [r3, #16]
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	08da      	lsrs	r2, r3, #3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3208      	adds	r2, #8
 80020f8:	69b9      	ldr	r1, [r7, #24]
 80020fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	2203      	movs	r2, #3
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	43db      	mvns	r3, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4013      	ands	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f003 0203 	and.w	r2, r3, #3
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4313      	orrs	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 80e0 	beq.w	8002300 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002140:	4b2f      	ldr	r3, [pc, #188]	; (8002200 <HAL_GPIO_Init+0x238>)
 8002142:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002146:	4a2e      	ldr	r2, [pc, #184]	; (8002200 <HAL_GPIO_Init+0x238>)
 8002148:	f043 0302 	orr.w	r3, r3, #2
 800214c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002150:	4b2b      	ldr	r3, [pc, #172]	; (8002200 <HAL_GPIO_Init+0x238>)
 8002152:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800215e:	4a29      	ldr	r2, [pc, #164]	; (8002204 <HAL_GPIO_Init+0x23c>)
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	089b      	lsrs	r3, r3, #2
 8002164:	3302      	adds	r3, #2
 8002166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800216a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	220f      	movs	r2, #15
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43db      	mvns	r3, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4013      	ands	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a20      	ldr	r2, [pc, #128]	; (8002208 <HAL_GPIO_Init+0x240>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d052      	beq.n	8002230 <HAL_GPIO_Init+0x268>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a1f      	ldr	r2, [pc, #124]	; (800220c <HAL_GPIO_Init+0x244>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d031      	beq.n	80021f6 <HAL_GPIO_Init+0x22e>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a1e      	ldr	r2, [pc, #120]	; (8002210 <HAL_GPIO_Init+0x248>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d02b      	beq.n	80021f2 <HAL_GPIO_Init+0x22a>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a1d      	ldr	r2, [pc, #116]	; (8002214 <HAL_GPIO_Init+0x24c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d025      	beq.n	80021ee <HAL_GPIO_Init+0x226>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a1c      	ldr	r2, [pc, #112]	; (8002218 <HAL_GPIO_Init+0x250>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d01f      	beq.n	80021ea <HAL_GPIO_Init+0x222>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a1b      	ldr	r2, [pc, #108]	; (800221c <HAL_GPIO_Init+0x254>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d019      	beq.n	80021e6 <HAL_GPIO_Init+0x21e>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a1a      	ldr	r2, [pc, #104]	; (8002220 <HAL_GPIO_Init+0x258>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d013      	beq.n	80021e2 <HAL_GPIO_Init+0x21a>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a19      	ldr	r2, [pc, #100]	; (8002224 <HAL_GPIO_Init+0x25c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d00d      	beq.n	80021de <HAL_GPIO_Init+0x216>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a18      	ldr	r2, [pc, #96]	; (8002228 <HAL_GPIO_Init+0x260>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d007      	beq.n	80021da <HAL_GPIO_Init+0x212>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a17      	ldr	r2, [pc, #92]	; (800222c <HAL_GPIO_Init+0x264>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d101      	bne.n	80021d6 <HAL_GPIO_Init+0x20e>
 80021d2:	2309      	movs	r3, #9
 80021d4:	e02d      	b.n	8002232 <HAL_GPIO_Init+0x26a>
 80021d6:	230a      	movs	r3, #10
 80021d8:	e02b      	b.n	8002232 <HAL_GPIO_Init+0x26a>
 80021da:	2308      	movs	r3, #8
 80021dc:	e029      	b.n	8002232 <HAL_GPIO_Init+0x26a>
 80021de:	2307      	movs	r3, #7
 80021e0:	e027      	b.n	8002232 <HAL_GPIO_Init+0x26a>
 80021e2:	2306      	movs	r3, #6
 80021e4:	e025      	b.n	8002232 <HAL_GPIO_Init+0x26a>
 80021e6:	2305      	movs	r3, #5
 80021e8:	e023      	b.n	8002232 <HAL_GPIO_Init+0x26a>
 80021ea:	2304      	movs	r3, #4
 80021ec:	e021      	b.n	8002232 <HAL_GPIO_Init+0x26a>
 80021ee:	2303      	movs	r3, #3
 80021f0:	e01f      	b.n	8002232 <HAL_GPIO_Init+0x26a>
 80021f2:	2302      	movs	r3, #2
 80021f4:	e01d      	b.n	8002232 <HAL_GPIO_Init+0x26a>
 80021f6:	2301      	movs	r3, #1
 80021f8:	e01b      	b.n	8002232 <HAL_GPIO_Init+0x26a>
 80021fa:	bf00      	nop
 80021fc:	58000080 	.word	0x58000080
 8002200:	58024400 	.word	0x58024400
 8002204:	58000400 	.word	0x58000400
 8002208:	58020000 	.word	0x58020000
 800220c:	58020400 	.word	0x58020400
 8002210:	58020800 	.word	0x58020800
 8002214:	58020c00 	.word	0x58020c00
 8002218:	58021000 	.word	0x58021000
 800221c:	58021400 	.word	0x58021400
 8002220:	58021800 	.word	0x58021800
 8002224:	58021c00 	.word	0x58021c00
 8002228:	58022000 	.word	0x58022000
 800222c:	58022400 	.word	0x58022400
 8002230:	2300      	movs	r3, #0
 8002232:	69fa      	ldr	r2, [r7, #28]
 8002234:	f002 0203 	and.w	r2, r2, #3
 8002238:	0092      	lsls	r2, r2, #2
 800223a:	4093      	lsls	r3, r2
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002242:	4938      	ldr	r1, [pc, #224]	; (8002324 <HAL_GPIO_Init+0x35c>)
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	089b      	lsrs	r3, r3, #2
 8002248:	3302      	adds	r3, #2
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	43db      	mvns	r3, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4013      	ands	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d003      	beq.n	8002274 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	4313      	orrs	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	43db      	mvns	r3, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4013      	ands	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	4313      	orrs	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	43db      	mvns	r3, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4013      	ands	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80022ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80022d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	43db      	mvns	r3, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4013      	ands	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d003      	beq.n	80022f8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80022f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	3301      	adds	r3, #1
 8002304:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	fa22 f303 	lsr.w	r3, r2, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	f47f ae63 	bne.w	8001fdc <HAL_GPIO_Init+0x14>
  }
}
 8002316:	bf00      	nop
 8002318:	bf00      	nop
 800231a:	3724      	adds	r7, #36	; 0x24
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	58000400 	.word	0x58000400

08002328 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	460b      	mov	r3, r1
 8002332:	807b      	strh	r3, [r7, #2]
 8002334:	4613      	mov	r3, r2
 8002336:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002338:	787b      	ldrb	r3, [r7, #1]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d003      	beq.n	8002346 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800233e:	887a      	ldrh	r2, [r7, #2]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002344:	e003      	b.n	800234e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002346:	887b      	ldrh	r3, [r7, #2]
 8002348:	041a      	lsls	r2, r3, #16
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	619a      	str	r2, [r3, #24]
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
	...

0800235c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002364:	4a08      	ldr	r2, [pc, #32]	; (8002388 <HAL_HSEM_FastTake+0x2c>)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3320      	adds	r3, #32
 800236a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800236e:	4a07      	ldr	r2, [pc, #28]	; (800238c <HAL_HSEM_FastTake+0x30>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d101      	bne.n	8002378 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002374:	2300      	movs	r3, #0
 8002376:	e000      	b.n	800237a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
}
 800237a:	4618      	mov	r0, r3
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	58026400 	.word	0x58026400
 800238c:	80000300 	.word	0x80000300

08002390 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800239a:	4906      	ldr	r1, [pc, #24]	; (80023b4 <HAL_HSEM_Release+0x24>)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	58026400 	.word	0x58026400

080023b8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80023c0:	4b29      	ldr	r3, [pc, #164]	; (8002468 <HAL_PWREx_ConfigSupply+0xb0>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	2b06      	cmp	r3, #6
 80023ca:	d00a      	beq.n	80023e2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80023cc:	4b26      	ldr	r3, [pc, #152]	; (8002468 <HAL_PWREx_ConfigSupply+0xb0>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d001      	beq.n	80023de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e040      	b.n	8002460 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80023de:	2300      	movs	r3, #0
 80023e0:	e03e      	b.n	8002460 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80023e2:	4b21      	ldr	r3, [pc, #132]	; (8002468 <HAL_PWREx_ConfigSupply+0xb0>)
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80023ea:	491f      	ldr	r1, [pc, #124]	; (8002468 <HAL_PWREx_ConfigSupply+0xb0>)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80023f2:	f7fe ff5f 	bl	80012b4 <HAL_GetTick>
 80023f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80023f8:	e009      	b.n	800240e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80023fa:	f7fe ff5b 	bl	80012b4 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002408:	d901      	bls.n	800240e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e028      	b.n	8002460 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800240e:	4b16      	ldr	r3, [pc, #88]	; (8002468 <HAL_PWREx_ConfigSupply+0xb0>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002416:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800241a:	d1ee      	bne.n	80023fa <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b1e      	cmp	r3, #30
 8002420:	d008      	beq.n	8002434 <HAL_PWREx_ConfigSupply+0x7c>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b2e      	cmp	r3, #46	; 0x2e
 8002426:	d005      	beq.n	8002434 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b1d      	cmp	r3, #29
 800242c:	d002      	beq.n	8002434 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b2d      	cmp	r3, #45	; 0x2d
 8002432:	d114      	bne.n	800245e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002434:	f7fe ff3e 	bl	80012b4 <HAL_GetTick>
 8002438:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800243a:	e009      	b.n	8002450 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800243c:	f7fe ff3a 	bl	80012b4 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800244a:	d901      	bls.n	8002450 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e007      	b.n	8002460 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002450:	4b05      	ldr	r3, [pc, #20]	; (8002468 <HAL_PWREx_ConfigSupply+0xb0>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800245c:	d1ee      	bne.n	800243c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	58024800 	.word	0x58024800

0800246c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b08c      	sub	sp, #48	; 0x30
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e3ff      	b.n	8002c7e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b00      	cmp	r3, #0
 8002488:	f000 8087 	beq.w	800259a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800248c:	4b99      	ldr	r3, [pc, #612]	; (80026f4 <HAL_RCC_OscConfig+0x288>)
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002494:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002496:	4b97      	ldr	r3, [pc, #604]	; (80026f4 <HAL_RCC_OscConfig+0x288>)
 8002498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800249c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249e:	2b10      	cmp	r3, #16
 80024a0:	d007      	beq.n	80024b2 <HAL_RCC_OscConfig+0x46>
 80024a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a4:	2b18      	cmp	r3, #24
 80024a6:	d110      	bne.n	80024ca <HAL_RCC_OscConfig+0x5e>
 80024a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024aa:	f003 0303 	and.w	r3, r3, #3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d10b      	bne.n	80024ca <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b2:	4b90      	ldr	r3, [pc, #576]	; (80026f4 <HAL_RCC_OscConfig+0x288>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d06c      	beq.n	8002598 <HAL_RCC_OscConfig+0x12c>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d168      	bne.n	8002598 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e3d9      	b.n	8002c7e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024d2:	d106      	bne.n	80024e2 <HAL_RCC_OscConfig+0x76>
 80024d4:	4b87      	ldr	r3, [pc, #540]	; (80026f4 <HAL_RCC_OscConfig+0x288>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a86      	ldr	r2, [pc, #536]	; (80026f4 <HAL_RCC_OscConfig+0x288>)
 80024da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024de:	6013      	str	r3, [r2, #0]
 80024e0:	e02e      	b.n	8002540 <HAL_RCC_OscConfig+0xd4>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10c      	bne.n	8002504 <HAL_RCC_OscConfig+0x98>
 80024ea:	4b82      	ldr	r3, [pc, #520]	; (80026f4 <HAL_RCC_OscConfig+0x288>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a81      	ldr	r2, [pc, #516]	; (80026f4 <HAL_RCC_OscConfig+0x288>)
 80024f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024f4:	6013      	str	r3, [r2, #0]
 80024f6:	4b7f      	ldr	r3, [pc, #508]	; (80026f4 <HAL_RCC_OscConfig+0x288>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a7e      	ldr	r2, [pc, #504]	; (80026f4 <HAL_RCC_OscConfig+0x288>)
 80024fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002500:	6013      	str	r3, [r2, #0]
 8002502:	e01d      	b.n	8002540 <HAL_RCC_OscConfig+0xd4>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800250c:	d10c      	bne.n	8002528 <HAL_RCC_OscConfig+0xbc>
 800250e:	4b79      	ldr	r3, [pc, #484]	; (80026f4 <HAL_RCC_OscConfig+0x288>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a78      	ldr	r2, [pc, #480]	; (80026f4 <HAL_RCC_OscConfig+0x288>)
 8002514:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	4b76      	ldr	r3, [pc, #472]	; (80026f4 <HAL_RCC_OscConfig+0x288>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a75      	ldr	r2, [pc, #468]	; (80026f4 <HAL_RCC_OscConfig+0x288>)
 8002520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	e00b      	b.n	8002540 <HAL_RCC_OscConfig+0xd4>
 8002528:	4b72      	ldr	r3, [pc, #456]	; (80026f4 <HAL_RCC_OscConfig+0x288>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a71      	ldr	r2, [pc, #452]	; (80026f4 <HAL_RCC_OscConfig+0x288>)
 800252e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002532:	6013      	str	r3, [r2, #0]
 8002534:	4b6f      	ldr	r3, [pc, #444]	; (80026f4 <HAL_RCC_OscConfig+0x288>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a6e      	ldr	r2, [pc, #440]	; (80026f4 <HAL_RCC_OscConfig+0x288>)
 800253a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800253e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d013      	beq.n	8002570 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002548:	f7fe feb4 	bl	80012b4 <HAL_GetTick>
 800254c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002550:	f7fe feb0 	bl	80012b4 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b64      	cmp	r3, #100	; 0x64
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e38d      	b.n	8002c7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002562:	4b64      	ldr	r3, [pc, #400]	; (80026f4 <HAL_RCC_OscConfig+0x288>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d0f0      	beq.n	8002550 <HAL_RCC_OscConfig+0xe4>
 800256e:	e014      	b.n	800259a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002570:	f7fe fea0 	bl	80012b4 <HAL_GetTick>
 8002574:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002578:	f7fe fe9c 	bl	80012b4 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b64      	cmp	r3, #100	; 0x64
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e379      	b.n	8002c7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800258a:	4b5a      	ldr	r3, [pc, #360]	; (80026f4 <HAL_RCC_OscConfig+0x288>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1f0      	bne.n	8002578 <HAL_RCC_OscConfig+0x10c>
 8002596:	e000      	b.n	800259a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f000 80ae 	beq.w	8002704 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025a8:	4b52      	ldr	r3, [pc, #328]	; (80026f4 <HAL_RCC_OscConfig+0x288>)
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025b0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025b2:	4b50      	ldr	r3, [pc, #320]	; (80026f4 <HAL_RCC_OscConfig+0x288>)
 80025b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80025b8:	6a3b      	ldr	r3, [r7, #32]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d007      	beq.n	80025ce <HAL_RCC_OscConfig+0x162>
 80025be:	6a3b      	ldr	r3, [r7, #32]
 80025c0:	2b18      	cmp	r3, #24
 80025c2:	d13a      	bne.n	800263a <HAL_RCC_OscConfig+0x1ce>
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d135      	bne.n	800263a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025ce:	4b49      	ldr	r3, [pc, #292]	; (80026f4 <HAL_RCC_OscConfig+0x288>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0304 	and.w	r3, r3, #4
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d005      	beq.n	80025e6 <HAL_RCC_OscConfig+0x17a>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e34b      	b.n	8002c7e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e6:	f7fe fe71 	bl	80012cc <HAL_GetREVID>
 80025ea:	4603      	mov	r3, r0
 80025ec:	f241 0203 	movw	r2, #4099	; 0x1003
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d817      	bhi.n	8002624 <HAL_RCC_OscConfig+0x1b8>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	2b40      	cmp	r3, #64	; 0x40
 80025fa:	d108      	bne.n	800260e <HAL_RCC_OscConfig+0x1a2>
 80025fc:	4b3d      	ldr	r3, [pc, #244]	; (80026f4 <HAL_RCC_OscConfig+0x288>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002604:	4a3b      	ldr	r2, [pc, #236]	; (80026f4 <HAL_RCC_OscConfig+0x288>)
 8002606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800260a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800260c:	e07a      	b.n	8002704 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800260e:	4b39      	ldr	r3, [pc, #228]	; (80026f4 <HAL_RCC_OscConfig+0x288>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	031b      	lsls	r3, r3, #12
 800261c:	4935      	ldr	r1, [pc, #212]	; (80026f4 <HAL_RCC_OscConfig+0x288>)
 800261e:	4313      	orrs	r3, r2
 8002620:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002622:	e06f      	b.n	8002704 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002624:	4b33      	ldr	r3, [pc, #204]	; (80026f4 <HAL_RCC_OscConfig+0x288>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	061b      	lsls	r3, r3, #24
 8002632:	4930      	ldr	r1, [pc, #192]	; (80026f4 <HAL_RCC_OscConfig+0x288>)
 8002634:	4313      	orrs	r3, r2
 8002636:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002638:	e064      	b.n	8002704 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d045      	beq.n	80026ce <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002642:	4b2c      	ldr	r3, [pc, #176]	; (80026f4 <HAL_RCC_OscConfig+0x288>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f023 0219 	bic.w	r2, r3, #25
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	4929      	ldr	r1, [pc, #164]	; (80026f4 <HAL_RCC_OscConfig+0x288>)
 8002650:	4313      	orrs	r3, r2
 8002652:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002654:	f7fe fe2e 	bl	80012b4 <HAL_GetTick>
 8002658:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800265c:	f7fe fe2a 	bl	80012b4 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e307      	b.n	8002c7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800266e:	4b21      	ldr	r3, [pc, #132]	; (80026f4 <HAL_RCC_OscConfig+0x288>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0304 	and.w	r3, r3, #4
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0f0      	beq.n	800265c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800267a:	f7fe fe27 	bl	80012cc <HAL_GetREVID>
 800267e:	4603      	mov	r3, r0
 8002680:	f241 0203 	movw	r2, #4099	; 0x1003
 8002684:	4293      	cmp	r3, r2
 8002686:	d817      	bhi.n	80026b8 <HAL_RCC_OscConfig+0x24c>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	2b40      	cmp	r3, #64	; 0x40
 800268e:	d108      	bne.n	80026a2 <HAL_RCC_OscConfig+0x236>
 8002690:	4b18      	ldr	r3, [pc, #96]	; (80026f4 <HAL_RCC_OscConfig+0x288>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002698:	4a16      	ldr	r2, [pc, #88]	; (80026f4 <HAL_RCC_OscConfig+0x288>)
 800269a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800269e:	6053      	str	r3, [r2, #4]
 80026a0:	e030      	b.n	8002704 <HAL_RCC_OscConfig+0x298>
 80026a2:	4b14      	ldr	r3, [pc, #80]	; (80026f4 <HAL_RCC_OscConfig+0x288>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	031b      	lsls	r3, r3, #12
 80026b0:	4910      	ldr	r1, [pc, #64]	; (80026f4 <HAL_RCC_OscConfig+0x288>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	604b      	str	r3, [r1, #4]
 80026b6:	e025      	b.n	8002704 <HAL_RCC_OscConfig+0x298>
 80026b8:	4b0e      	ldr	r3, [pc, #56]	; (80026f4 <HAL_RCC_OscConfig+0x288>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	061b      	lsls	r3, r3, #24
 80026c6:	490b      	ldr	r1, [pc, #44]	; (80026f4 <HAL_RCC_OscConfig+0x288>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	604b      	str	r3, [r1, #4]
 80026cc:	e01a      	b.n	8002704 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ce:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <HAL_RCC_OscConfig+0x288>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a08      	ldr	r2, [pc, #32]	; (80026f4 <HAL_RCC_OscConfig+0x288>)
 80026d4:	f023 0301 	bic.w	r3, r3, #1
 80026d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026da:	f7fe fdeb 	bl	80012b4 <HAL_GetTick>
 80026de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026e0:	e00a      	b.n	80026f8 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026e2:	f7fe fde7 	bl	80012b4 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d903      	bls.n	80026f8 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e2c4      	b.n	8002c7e <HAL_RCC_OscConfig+0x812>
 80026f4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026f8:	4ba4      	ldr	r3, [pc, #656]	; (800298c <HAL_RCC_OscConfig+0x520>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1ee      	bne.n	80026e2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0310 	and.w	r3, r3, #16
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 80a9 	beq.w	8002864 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002712:	4b9e      	ldr	r3, [pc, #632]	; (800298c <HAL_RCC_OscConfig+0x520>)
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800271a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800271c:	4b9b      	ldr	r3, [pc, #620]	; (800298c <HAL_RCC_OscConfig+0x520>)
 800271e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002720:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	2b08      	cmp	r3, #8
 8002726:	d007      	beq.n	8002738 <HAL_RCC_OscConfig+0x2cc>
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	2b18      	cmp	r3, #24
 800272c:	d13a      	bne.n	80027a4 <HAL_RCC_OscConfig+0x338>
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	f003 0303 	and.w	r3, r3, #3
 8002734:	2b01      	cmp	r3, #1
 8002736:	d135      	bne.n	80027a4 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002738:	4b94      	ldr	r3, [pc, #592]	; (800298c <HAL_RCC_OscConfig+0x520>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002740:	2b00      	cmp	r3, #0
 8002742:	d005      	beq.n	8002750 <HAL_RCC_OscConfig+0x2e4>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	69db      	ldr	r3, [r3, #28]
 8002748:	2b80      	cmp	r3, #128	; 0x80
 800274a:	d001      	beq.n	8002750 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e296      	b.n	8002c7e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002750:	f7fe fdbc 	bl	80012cc <HAL_GetREVID>
 8002754:	4603      	mov	r3, r0
 8002756:	f241 0203 	movw	r2, #4099	; 0x1003
 800275a:	4293      	cmp	r3, r2
 800275c:	d817      	bhi.n	800278e <HAL_RCC_OscConfig+0x322>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a1b      	ldr	r3, [r3, #32]
 8002762:	2b20      	cmp	r3, #32
 8002764:	d108      	bne.n	8002778 <HAL_RCC_OscConfig+0x30c>
 8002766:	4b89      	ldr	r3, [pc, #548]	; (800298c <HAL_RCC_OscConfig+0x520>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800276e:	4a87      	ldr	r2, [pc, #540]	; (800298c <HAL_RCC_OscConfig+0x520>)
 8002770:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002774:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002776:	e075      	b.n	8002864 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002778:	4b84      	ldr	r3, [pc, #528]	; (800298c <HAL_RCC_OscConfig+0x520>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	069b      	lsls	r3, r3, #26
 8002786:	4981      	ldr	r1, [pc, #516]	; (800298c <HAL_RCC_OscConfig+0x520>)
 8002788:	4313      	orrs	r3, r2
 800278a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800278c:	e06a      	b.n	8002864 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800278e:	4b7f      	ldr	r3, [pc, #508]	; (800298c <HAL_RCC_OscConfig+0x520>)
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	061b      	lsls	r3, r3, #24
 800279c:	497b      	ldr	r1, [pc, #492]	; (800298c <HAL_RCC_OscConfig+0x520>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027a2:	e05f      	b.n	8002864 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69db      	ldr	r3, [r3, #28]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d042      	beq.n	8002832 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80027ac:	4b77      	ldr	r3, [pc, #476]	; (800298c <HAL_RCC_OscConfig+0x520>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a76      	ldr	r2, [pc, #472]	; (800298c <HAL_RCC_OscConfig+0x520>)
 80027b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b8:	f7fe fd7c 	bl	80012b4 <HAL_GetTick>
 80027bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80027c0:	f7fe fd78 	bl	80012b4 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e255      	b.n	8002c7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80027d2:	4b6e      	ldr	r3, [pc, #440]	; (800298c <HAL_RCC_OscConfig+0x520>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d0f0      	beq.n	80027c0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027de:	f7fe fd75 	bl	80012cc <HAL_GetREVID>
 80027e2:	4603      	mov	r3, r0
 80027e4:	f241 0203 	movw	r2, #4099	; 0x1003
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d817      	bhi.n	800281c <HAL_RCC_OscConfig+0x3b0>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	2b20      	cmp	r3, #32
 80027f2:	d108      	bne.n	8002806 <HAL_RCC_OscConfig+0x39a>
 80027f4:	4b65      	ldr	r3, [pc, #404]	; (800298c <HAL_RCC_OscConfig+0x520>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80027fc:	4a63      	ldr	r2, [pc, #396]	; (800298c <HAL_RCC_OscConfig+0x520>)
 80027fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002802:	6053      	str	r3, [r2, #4]
 8002804:	e02e      	b.n	8002864 <HAL_RCC_OscConfig+0x3f8>
 8002806:	4b61      	ldr	r3, [pc, #388]	; (800298c <HAL_RCC_OscConfig+0x520>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	069b      	lsls	r3, r3, #26
 8002814:	495d      	ldr	r1, [pc, #372]	; (800298c <HAL_RCC_OscConfig+0x520>)
 8002816:	4313      	orrs	r3, r2
 8002818:	604b      	str	r3, [r1, #4]
 800281a:	e023      	b.n	8002864 <HAL_RCC_OscConfig+0x3f8>
 800281c:	4b5b      	ldr	r3, [pc, #364]	; (800298c <HAL_RCC_OscConfig+0x520>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	061b      	lsls	r3, r3, #24
 800282a:	4958      	ldr	r1, [pc, #352]	; (800298c <HAL_RCC_OscConfig+0x520>)
 800282c:	4313      	orrs	r3, r2
 800282e:	60cb      	str	r3, [r1, #12]
 8002830:	e018      	b.n	8002864 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002832:	4b56      	ldr	r3, [pc, #344]	; (800298c <HAL_RCC_OscConfig+0x520>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a55      	ldr	r2, [pc, #340]	; (800298c <HAL_RCC_OscConfig+0x520>)
 8002838:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800283c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283e:	f7fe fd39 	bl	80012b4 <HAL_GetTick>
 8002842:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002844:	e008      	b.n	8002858 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002846:	f7fe fd35 	bl	80012b4 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e212      	b.n	8002c7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002858:	4b4c      	ldr	r3, [pc, #304]	; (800298c <HAL_RCC_OscConfig+0x520>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1f0      	bne.n	8002846 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0308 	and.w	r3, r3, #8
 800286c:	2b00      	cmp	r3, #0
 800286e:	d036      	beq.n	80028de <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d019      	beq.n	80028ac <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002878:	4b44      	ldr	r3, [pc, #272]	; (800298c <HAL_RCC_OscConfig+0x520>)
 800287a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800287c:	4a43      	ldr	r2, [pc, #268]	; (800298c <HAL_RCC_OscConfig+0x520>)
 800287e:	f043 0301 	orr.w	r3, r3, #1
 8002882:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002884:	f7fe fd16 	bl	80012b4 <HAL_GetTick>
 8002888:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800288c:	f7fe fd12 	bl	80012b4 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e1ef      	b.n	8002c7e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800289e:	4b3b      	ldr	r3, [pc, #236]	; (800298c <HAL_RCC_OscConfig+0x520>)
 80028a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0f0      	beq.n	800288c <HAL_RCC_OscConfig+0x420>
 80028aa:	e018      	b.n	80028de <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ac:	4b37      	ldr	r3, [pc, #220]	; (800298c <HAL_RCC_OscConfig+0x520>)
 80028ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028b0:	4a36      	ldr	r2, [pc, #216]	; (800298c <HAL_RCC_OscConfig+0x520>)
 80028b2:	f023 0301 	bic.w	r3, r3, #1
 80028b6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b8:	f7fe fcfc 	bl	80012b4 <HAL_GetTick>
 80028bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028c0:	f7fe fcf8 	bl	80012b4 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e1d5      	b.n	8002c7e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028d2:	4b2e      	ldr	r3, [pc, #184]	; (800298c <HAL_RCC_OscConfig+0x520>)
 80028d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1f0      	bne.n	80028c0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0320 	and.w	r3, r3, #32
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d036      	beq.n	8002958 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d019      	beq.n	8002926 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028f2:	4b26      	ldr	r3, [pc, #152]	; (800298c <HAL_RCC_OscConfig+0x520>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a25      	ldr	r2, [pc, #148]	; (800298c <HAL_RCC_OscConfig+0x520>)
 80028f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028fc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028fe:	f7fe fcd9 	bl	80012b4 <HAL_GetTick>
 8002902:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002904:	e008      	b.n	8002918 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002906:	f7fe fcd5 	bl	80012b4 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e1b2      	b.n	8002c7e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002918:	4b1c      	ldr	r3, [pc, #112]	; (800298c <HAL_RCC_OscConfig+0x520>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0f0      	beq.n	8002906 <HAL_RCC_OscConfig+0x49a>
 8002924:	e018      	b.n	8002958 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002926:	4b19      	ldr	r3, [pc, #100]	; (800298c <HAL_RCC_OscConfig+0x520>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a18      	ldr	r2, [pc, #96]	; (800298c <HAL_RCC_OscConfig+0x520>)
 800292c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002930:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002932:	f7fe fcbf 	bl	80012b4 <HAL_GetTick>
 8002936:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002938:	e008      	b.n	800294c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800293a:	f7fe fcbb 	bl	80012b4 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e198      	b.n	8002c7e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800294c:	4b0f      	ldr	r3, [pc, #60]	; (800298c <HAL_RCC_OscConfig+0x520>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1f0      	bne.n	800293a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 8085 	beq.w	8002a70 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002966:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <HAL_RCC_OscConfig+0x524>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a09      	ldr	r2, [pc, #36]	; (8002990 <HAL_RCC_OscConfig+0x524>)
 800296c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002970:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002972:	f7fe fc9f 	bl	80012b4 <HAL_GetTick>
 8002976:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002978:	e00c      	b.n	8002994 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800297a:	f7fe fc9b 	bl	80012b4 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b64      	cmp	r3, #100	; 0x64
 8002986:	d905      	bls.n	8002994 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e178      	b.n	8002c7e <HAL_RCC_OscConfig+0x812>
 800298c:	58024400 	.word	0x58024400
 8002990:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002994:	4b96      	ldr	r3, [pc, #600]	; (8002bf0 <HAL_RCC_OscConfig+0x784>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0ec      	beq.n	800297a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d106      	bne.n	80029b6 <HAL_RCC_OscConfig+0x54a>
 80029a8:	4b92      	ldr	r3, [pc, #584]	; (8002bf4 <HAL_RCC_OscConfig+0x788>)
 80029aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ac:	4a91      	ldr	r2, [pc, #580]	; (8002bf4 <HAL_RCC_OscConfig+0x788>)
 80029ae:	f043 0301 	orr.w	r3, r3, #1
 80029b2:	6713      	str	r3, [r2, #112]	; 0x70
 80029b4:	e02d      	b.n	8002a12 <HAL_RCC_OscConfig+0x5a6>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10c      	bne.n	80029d8 <HAL_RCC_OscConfig+0x56c>
 80029be:	4b8d      	ldr	r3, [pc, #564]	; (8002bf4 <HAL_RCC_OscConfig+0x788>)
 80029c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c2:	4a8c      	ldr	r2, [pc, #560]	; (8002bf4 <HAL_RCC_OscConfig+0x788>)
 80029c4:	f023 0301 	bic.w	r3, r3, #1
 80029c8:	6713      	str	r3, [r2, #112]	; 0x70
 80029ca:	4b8a      	ldr	r3, [pc, #552]	; (8002bf4 <HAL_RCC_OscConfig+0x788>)
 80029cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ce:	4a89      	ldr	r2, [pc, #548]	; (8002bf4 <HAL_RCC_OscConfig+0x788>)
 80029d0:	f023 0304 	bic.w	r3, r3, #4
 80029d4:	6713      	str	r3, [r2, #112]	; 0x70
 80029d6:	e01c      	b.n	8002a12 <HAL_RCC_OscConfig+0x5a6>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	2b05      	cmp	r3, #5
 80029de:	d10c      	bne.n	80029fa <HAL_RCC_OscConfig+0x58e>
 80029e0:	4b84      	ldr	r3, [pc, #528]	; (8002bf4 <HAL_RCC_OscConfig+0x788>)
 80029e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e4:	4a83      	ldr	r2, [pc, #524]	; (8002bf4 <HAL_RCC_OscConfig+0x788>)
 80029e6:	f043 0304 	orr.w	r3, r3, #4
 80029ea:	6713      	str	r3, [r2, #112]	; 0x70
 80029ec:	4b81      	ldr	r3, [pc, #516]	; (8002bf4 <HAL_RCC_OscConfig+0x788>)
 80029ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f0:	4a80      	ldr	r2, [pc, #512]	; (8002bf4 <HAL_RCC_OscConfig+0x788>)
 80029f2:	f043 0301 	orr.w	r3, r3, #1
 80029f6:	6713      	str	r3, [r2, #112]	; 0x70
 80029f8:	e00b      	b.n	8002a12 <HAL_RCC_OscConfig+0x5a6>
 80029fa:	4b7e      	ldr	r3, [pc, #504]	; (8002bf4 <HAL_RCC_OscConfig+0x788>)
 80029fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fe:	4a7d      	ldr	r2, [pc, #500]	; (8002bf4 <HAL_RCC_OscConfig+0x788>)
 8002a00:	f023 0301 	bic.w	r3, r3, #1
 8002a04:	6713      	str	r3, [r2, #112]	; 0x70
 8002a06:	4b7b      	ldr	r3, [pc, #492]	; (8002bf4 <HAL_RCC_OscConfig+0x788>)
 8002a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0a:	4a7a      	ldr	r2, [pc, #488]	; (8002bf4 <HAL_RCC_OscConfig+0x788>)
 8002a0c:	f023 0304 	bic.w	r3, r3, #4
 8002a10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d015      	beq.n	8002a46 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a1a:	f7fe fc4b 	bl	80012b4 <HAL_GetTick>
 8002a1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a20:	e00a      	b.n	8002a38 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a22:	f7fe fc47 	bl	80012b4 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e122      	b.n	8002c7e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a38:	4b6e      	ldr	r3, [pc, #440]	; (8002bf4 <HAL_RCC_OscConfig+0x788>)
 8002a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0ee      	beq.n	8002a22 <HAL_RCC_OscConfig+0x5b6>
 8002a44:	e014      	b.n	8002a70 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a46:	f7fe fc35 	bl	80012b4 <HAL_GetTick>
 8002a4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a4c:	e00a      	b.n	8002a64 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a4e:	f7fe fc31 	bl	80012b4 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e10c      	b.n	8002c7e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a64:	4b63      	ldr	r3, [pc, #396]	; (8002bf4 <HAL_RCC_OscConfig+0x788>)
 8002a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1ee      	bne.n	8002a4e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f000 8101 	beq.w	8002c7c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002a7a:	4b5e      	ldr	r3, [pc, #376]	; (8002bf4 <HAL_RCC_OscConfig+0x788>)
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a82:	2b18      	cmp	r3, #24
 8002a84:	f000 80bc 	beq.w	8002c00 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	f040 8095 	bne.w	8002bbc <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a92:	4b58      	ldr	r3, [pc, #352]	; (8002bf4 <HAL_RCC_OscConfig+0x788>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a57      	ldr	r2, [pc, #348]	; (8002bf4 <HAL_RCC_OscConfig+0x788>)
 8002a98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9e:	f7fe fc09 	bl	80012b4 <HAL_GetTick>
 8002aa2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002aa4:	e008      	b.n	8002ab8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aa6:	f7fe fc05 	bl	80012b4 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e0e2      	b.n	8002c7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ab8:	4b4e      	ldr	r3, [pc, #312]	; (8002bf4 <HAL_RCC_OscConfig+0x788>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1f0      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ac4:	4b4b      	ldr	r3, [pc, #300]	; (8002bf4 <HAL_RCC_OscConfig+0x788>)
 8002ac6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ac8:	4b4b      	ldr	r3, [pc, #300]	; (8002bf8 <HAL_RCC_OscConfig+0x78c>)
 8002aca:	4013      	ands	r3, r2
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002ad4:	0112      	lsls	r2, r2, #4
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	4946      	ldr	r1, [pc, #280]	; (8002bf4 <HAL_RCC_OscConfig+0x788>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	628b      	str	r3, [r1, #40]	; 0x28
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aec:	3b01      	subs	r3, #1
 8002aee:	025b      	lsls	r3, r3, #9
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	431a      	orrs	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af8:	3b01      	subs	r3, #1
 8002afa:	041b      	lsls	r3, r3, #16
 8002afc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002b00:	431a      	orrs	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b06:	3b01      	subs	r3, #1
 8002b08:	061b      	lsls	r3, r3, #24
 8002b0a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002b0e:	4939      	ldr	r1, [pc, #228]	; (8002bf4 <HAL_RCC_OscConfig+0x788>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002b14:	4b37      	ldr	r3, [pc, #220]	; (8002bf4 <HAL_RCC_OscConfig+0x788>)
 8002b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b18:	4a36      	ldr	r2, [pc, #216]	; (8002bf4 <HAL_RCC_OscConfig+0x788>)
 8002b1a:	f023 0301 	bic.w	r3, r3, #1
 8002b1e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b20:	4b34      	ldr	r3, [pc, #208]	; (8002bf4 <HAL_RCC_OscConfig+0x788>)
 8002b22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b24:	4b35      	ldr	r3, [pc, #212]	; (8002bfc <HAL_RCC_OscConfig+0x790>)
 8002b26:	4013      	ands	r3, r2
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b2c:	00d2      	lsls	r2, r2, #3
 8002b2e:	4931      	ldr	r1, [pc, #196]	; (8002bf4 <HAL_RCC_OscConfig+0x788>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002b34:	4b2f      	ldr	r3, [pc, #188]	; (8002bf4 <HAL_RCC_OscConfig+0x788>)
 8002b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b38:	f023 020c 	bic.w	r2, r3, #12
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b40:	492c      	ldr	r1, [pc, #176]	; (8002bf4 <HAL_RCC_OscConfig+0x788>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002b46:	4b2b      	ldr	r3, [pc, #172]	; (8002bf4 <HAL_RCC_OscConfig+0x788>)
 8002b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4a:	f023 0202 	bic.w	r2, r3, #2
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b52:	4928      	ldr	r1, [pc, #160]	; (8002bf4 <HAL_RCC_OscConfig+0x788>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002b58:	4b26      	ldr	r3, [pc, #152]	; (8002bf4 <HAL_RCC_OscConfig+0x788>)
 8002b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5c:	4a25      	ldr	r2, [pc, #148]	; (8002bf4 <HAL_RCC_OscConfig+0x788>)
 8002b5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b64:	4b23      	ldr	r3, [pc, #140]	; (8002bf4 <HAL_RCC_OscConfig+0x788>)
 8002b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b68:	4a22      	ldr	r2, [pc, #136]	; (8002bf4 <HAL_RCC_OscConfig+0x788>)
 8002b6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002b70:	4b20      	ldr	r3, [pc, #128]	; (8002bf4 <HAL_RCC_OscConfig+0x788>)
 8002b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b74:	4a1f      	ldr	r2, [pc, #124]	; (8002bf4 <HAL_RCC_OscConfig+0x788>)
 8002b76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002b7c:	4b1d      	ldr	r3, [pc, #116]	; (8002bf4 <HAL_RCC_OscConfig+0x788>)
 8002b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b80:	4a1c      	ldr	r2, [pc, #112]	; (8002bf4 <HAL_RCC_OscConfig+0x788>)
 8002b82:	f043 0301 	orr.w	r3, r3, #1
 8002b86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b88:	4b1a      	ldr	r3, [pc, #104]	; (8002bf4 <HAL_RCC_OscConfig+0x788>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a19      	ldr	r2, [pc, #100]	; (8002bf4 <HAL_RCC_OscConfig+0x788>)
 8002b8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b94:	f7fe fb8e 	bl	80012b4 <HAL_GetTick>
 8002b98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b9c:	f7fe fb8a 	bl	80012b4 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e067      	b.n	8002c7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bae:	4b11      	ldr	r3, [pc, #68]	; (8002bf4 <HAL_RCC_OscConfig+0x788>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d0f0      	beq.n	8002b9c <HAL_RCC_OscConfig+0x730>
 8002bba:	e05f      	b.n	8002c7c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bbc:	4b0d      	ldr	r3, [pc, #52]	; (8002bf4 <HAL_RCC_OscConfig+0x788>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a0c      	ldr	r2, [pc, #48]	; (8002bf4 <HAL_RCC_OscConfig+0x788>)
 8002bc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc8:	f7fe fb74 	bl	80012b4 <HAL_GetTick>
 8002bcc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bd0:	f7fe fb70 	bl	80012b4 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e04d      	b.n	8002c7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002be2:	4b04      	ldr	r3, [pc, #16]	; (8002bf4 <HAL_RCC_OscConfig+0x788>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1f0      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x764>
 8002bee:	e045      	b.n	8002c7c <HAL_RCC_OscConfig+0x810>
 8002bf0:	58024800 	.word	0x58024800
 8002bf4:	58024400 	.word	0x58024400
 8002bf8:	fffffc0c 	.word	0xfffffc0c
 8002bfc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002c00:	4b21      	ldr	r3, [pc, #132]	; (8002c88 <HAL_RCC_OscConfig+0x81c>)
 8002c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c04:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002c06:	4b20      	ldr	r3, [pc, #128]	; (8002c88 <HAL_RCC_OscConfig+0x81c>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d031      	beq.n	8002c78 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	f003 0203 	and.w	r2, r3, #3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d12a      	bne.n	8002c78 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	091b      	lsrs	r3, r3, #4
 8002c26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d122      	bne.n	8002c78 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d11a      	bne.n	8002c78 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	0a5b      	lsrs	r3, r3, #9
 8002c46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c4e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d111      	bne.n	8002c78 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	0c1b      	lsrs	r3, r3, #16
 8002c58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c60:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d108      	bne.n	8002c78 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	0e1b      	lsrs	r3, r3, #24
 8002c6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c72:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d001      	beq.n	8002c7c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e000      	b.n	8002c7e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3730      	adds	r7, #48	; 0x30
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	58024400 	.word	0x58024400

08002c8c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e19c      	b.n	8002fda <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ca0:	4b8a      	ldr	r3, [pc, #552]	; (8002ecc <HAL_RCC_ClockConfig+0x240>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 030f 	and.w	r3, r3, #15
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d910      	bls.n	8002cd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cae:	4b87      	ldr	r3, [pc, #540]	; (8002ecc <HAL_RCC_ClockConfig+0x240>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f023 020f 	bic.w	r2, r3, #15
 8002cb6:	4985      	ldr	r1, [pc, #532]	; (8002ecc <HAL_RCC_ClockConfig+0x240>)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cbe:	4b83      	ldr	r3, [pc, #524]	; (8002ecc <HAL_RCC_ClockConfig+0x240>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 030f 	and.w	r3, r3, #15
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d001      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e184      	b.n	8002fda <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d010      	beq.n	8002cfe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	691a      	ldr	r2, [r3, #16]
 8002ce0:	4b7b      	ldr	r3, [pc, #492]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d908      	bls.n	8002cfe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002cec:	4b78      	ldr	r3, [pc, #480]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	4975      	ldr	r1, [pc, #468]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d010      	beq.n	8002d2c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	695a      	ldr	r2, [r3, #20]
 8002d0e:	4b70      	ldr	r3, [pc, #448]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d908      	bls.n	8002d2c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d1a:	4b6d      	ldr	r3, [pc, #436]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	496a      	ldr	r1, [pc, #424]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0310 	and.w	r3, r3, #16
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d010      	beq.n	8002d5a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	699a      	ldr	r2, [r3, #24]
 8002d3c:	4b64      	ldr	r3, [pc, #400]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002d3e:	69db      	ldr	r3, [r3, #28]
 8002d40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d908      	bls.n	8002d5a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d48:	4b61      	ldr	r3, [pc, #388]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	495e      	ldr	r1, [pc, #376]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0320 	and.w	r3, r3, #32
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d010      	beq.n	8002d88 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69da      	ldr	r2, [r3, #28]
 8002d6a:	4b59      	ldr	r3, [pc, #356]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d908      	bls.n	8002d88 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002d76:	4b56      	ldr	r3, [pc, #344]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	4953      	ldr	r1, [pc, #332]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d010      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68da      	ldr	r2, [r3, #12]
 8002d98:	4b4d      	ldr	r3, [pc, #308]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	f003 030f 	and.w	r3, r3, #15
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d908      	bls.n	8002db6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002da4:	4b4a      	ldr	r3, [pc, #296]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	f023 020f 	bic.w	r2, r3, #15
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	4947      	ldr	r1, [pc, #284]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d055      	beq.n	8002e6e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002dc2:	4b43      	ldr	r3, [pc, #268]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	4940      	ldr	r1, [pc, #256]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d107      	bne.n	8002dec <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ddc:	4b3c      	ldr	r3, [pc, #240]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d121      	bne.n	8002e2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e0f6      	b.n	8002fda <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	2b03      	cmp	r3, #3
 8002df2:	d107      	bne.n	8002e04 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002df4:	4b36      	ldr	r3, [pc, #216]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d115      	bne.n	8002e2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e0ea      	b.n	8002fda <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d107      	bne.n	8002e1c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e0c:	4b30      	ldr	r3, [pc, #192]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d109      	bne.n	8002e2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e0de      	b.n	8002fda <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e1c:	4b2c      	ldr	r3, [pc, #176]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d101      	bne.n	8002e2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e0d6      	b.n	8002fda <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e2c:	4b28      	ldr	r3, [pc, #160]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	f023 0207 	bic.w	r2, r3, #7
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	4925      	ldr	r1, [pc, #148]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e3e:	f7fe fa39 	bl	80012b4 <HAL_GetTick>
 8002e42:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e44:	e00a      	b.n	8002e5c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e46:	f7fe fa35 	bl	80012b4 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e0be      	b.n	8002fda <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e5c:	4b1c      	ldr	r3, [pc, #112]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d1eb      	bne.n	8002e46 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d010      	beq.n	8002e9c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	68da      	ldr	r2, [r3, #12]
 8002e7e:	4b14      	ldr	r3, [pc, #80]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	f003 030f 	and.w	r3, r3, #15
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d208      	bcs.n	8002e9c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e8a:	4b11      	ldr	r3, [pc, #68]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	f023 020f 	bic.w	r2, r3, #15
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	490e      	ldr	r1, [pc, #56]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <HAL_RCC_ClockConfig+0x240>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 030f 	and.w	r3, r3, #15
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d214      	bcs.n	8002ed4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eaa:	4b08      	ldr	r3, [pc, #32]	; (8002ecc <HAL_RCC_ClockConfig+0x240>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f023 020f 	bic.w	r2, r3, #15
 8002eb2:	4906      	ldr	r1, [pc, #24]	; (8002ecc <HAL_RCC_ClockConfig+0x240>)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eba:	4b04      	ldr	r3, [pc, #16]	; (8002ecc <HAL_RCC_ClockConfig+0x240>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d005      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e086      	b.n	8002fda <HAL_RCC_ClockConfig+0x34e>
 8002ecc:	52002000 	.word	0x52002000
 8002ed0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0304 	and.w	r3, r3, #4
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d010      	beq.n	8002f02 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	691a      	ldr	r2, [r3, #16]
 8002ee4:	4b3f      	ldr	r3, [pc, #252]	; (8002fe4 <HAL_RCC_ClockConfig+0x358>)
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d208      	bcs.n	8002f02 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ef0:	4b3c      	ldr	r3, [pc, #240]	; (8002fe4 <HAL_RCC_ClockConfig+0x358>)
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	4939      	ldr	r1, [pc, #228]	; (8002fe4 <HAL_RCC_ClockConfig+0x358>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0308 	and.w	r3, r3, #8
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d010      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	695a      	ldr	r2, [r3, #20]
 8002f12:	4b34      	ldr	r3, [pc, #208]	; (8002fe4 <HAL_RCC_ClockConfig+0x358>)
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d208      	bcs.n	8002f30 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f1e:	4b31      	ldr	r3, [pc, #196]	; (8002fe4 <HAL_RCC_ClockConfig+0x358>)
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	492e      	ldr	r1, [pc, #184]	; (8002fe4 <HAL_RCC_ClockConfig+0x358>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0310 	and.w	r3, r3, #16
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d010      	beq.n	8002f5e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	699a      	ldr	r2, [r3, #24]
 8002f40:	4b28      	ldr	r3, [pc, #160]	; (8002fe4 <HAL_RCC_ClockConfig+0x358>)
 8002f42:	69db      	ldr	r3, [r3, #28]
 8002f44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d208      	bcs.n	8002f5e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f4c:	4b25      	ldr	r3, [pc, #148]	; (8002fe4 <HAL_RCC_ClockConfig+0x358>)
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	4922      	ldr	r1, [pc, #136]	; (8002fe4 <HAL_RCC_ClockConfig+0x358>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0320 	and.w	r3, r3, #32
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d010      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69da      	ldr	r2, [r3, #28]
 8002f6e:	4b1d      	ldr	r3, [pc, #116]	; (8002fe4 <HAL_RCC_ClockConfig+0x358>)
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d208      	bcs.n	8002f8c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002f7a:	4b1a      	ldr	r3, [pc, #104]	; (8002fe4 <HAL_RCC_ClockConfig+0x358>)
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	4917      	ldr	r1, [pc, #92]	; (8002fe4 <HAL_RCC_ClockConfig+0x358>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f8c:	f000 f834 	bl	8002ff8 <HAL_RCC_GetSysClockFreq>
 8002f90:	4602      	mov	r2, r0
 8002f92:	4b14      	ldr	r3, [pc, #80]	; (8002fe4 <HAL_RCC_ClockConfig+0x358>)
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	0a1b      	lsrs	r3, r3, #8
 8002f98:	f003 030f 	and.w	r3, r3, #15
 8002f9c:	4912      	ldr	r1, [pc, #72]	; (8002fe8 <HAL_RCC_ClockConfig+0x35c>)
 8002f9e:	5ccb      	ldrb	r3, [r1, r3]
 8002fa0:	f003 031f 	and.w	r3, r3, #31
 8002fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002faa:	4b0e      	ldr	r3, [pc, #56]	; (8002fe4 <HAL_RCC_ClockConfig+0x358>)
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	4a0d      	ldr	r2, [pc, #52]	; (8002fe8 <HAL_RCC_ClockConfig+0x35c>)
 8002fb4:	5cd3      	ldrb	r3, [r2, r3]
 8002fb6:	f003 031f 	and.w	r3, r3, #31
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc0:	4a0a      	ldr	r2, [pc, #40]	; (8002fec <HAL_RCC_ClockConfig+0x360>)
 8002fc2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002fc4:	4a0a      	ldr	r2, [pc, #40]	; (8002ff0 <HAL_RCC_ClockConfig+0x364>)
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002fca:	4b0a      	ldr	r3, [pc, #40]	; (8002ff4 <HAL_RCC_ClockConfig+0x368>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fe f926 	bl	8001220 <HAL_InitTick>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3718      	adds	r7, #24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	58024400 	.word	0x58024400
 8002fe8:	080080a0 	.word	0x080080a0
 8002fec:	24000004 	.word	0x24000004
 8002ff0:	24000000 	.word	0x24000000
 8002ff4:	24000008 	.word	0x24000008

08002ff8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b089      	sub	sp, #36	; 0x24
 8002ffc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ffe:	4bb3      	ldr	r3, [pc, #716]	; (80032cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003006:	2b18      	cmp	r3, #24
 8003008:	f200 8155 	bhi.w	80032b6 <HAL_RCC_GetSysClockFreq+0x2be>
 800300c:	a201      	add	r2, pc, #4	; (adr r2, 8003014 <HAL_RCC_GetSysClockFreq+0x1c>)
 800300e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003012:	bf00      	nop
 8003014:	08003079 	.word	0x08003079
 8003018:	080032b7 	.word	0x080032b7
 800301c:	080032b7 	.word	0x080032b7
 8003020:	080032b7 	.word	0x080032b7
 8003024:	080032b7 	.word	0x080032b7
 8003028:	080032b7 	.word	0x080032b7
 800302c:	080032b7 	.word	0x080032b7
 8003030:	080032b7 	.word	0x080032b7
 8003034:	0800309f 	.word	0x0800309f
 8003038:	080032b7 	.word	0x080032b7
 800303c:	080032b7 	.word	0x080032b7
 8003040:	080032b7 	.word	0x080032b7
 8003044:	080032b7 	.word	0x080032b7
 8003048:	080032b7 	.word	0x080032b7
 800304c:	080032b7 	.word	0x080032b7
 8003050:	080032b7 	.word	0x080032b7
 8003054:	080030a5 	.word	0x080030a5
 8003058:	080032b7 	.word	0x080032b7
 800305c:	080032b7 	.word	0x080032b7
 8003060:	080032b7 	.word	0x080032b7
 8003064:	080032b7 	.word	0x080032b7
 8003068:	080032b7 	.word	0x080032b7
 800306c:	080032b7 	.word	0x080032b7
 8003070:	080032b7 	.word	0x080032b7
 8003074:	080030ab 	.word	0x080030ab
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003078:	4b94      	ldr	r3, [pc, #592]	; (80032cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0320 	and.w	r3, r3, #32
 8003080:	2b00      	cmp	r3, #0
 8003082:	d009      	beq.n	8003098 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003084:	4b91      	ldr	r3, [pc, #580]	; (80032cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	08db      	lsrs	r3, r3, #3
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	4a90      	ldr	r2, [pc, #576]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003090:	fa22 f303 	lsr.w	r3, r2, r3
 8003094:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003096:	e111      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003098:	4b8d      	ldr	r3, [pc, #564]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800309a:	61bb      	str	r3, [r7, #24]
    break;
 800309c:	e10e      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800309e:	4b8d      	ldr	r3, [pc, #564]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80030a0:	61bb      	str	r3, [r7, #24]
    break;
 80030a2:	e10b      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80030a4:	4b8c      	ldr	r3, [pc, #560]	; (80032d8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80030a6:	61bb      	str	r3, [r7, #24]
    break;
 80030a8:	e108      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80030aa:	4b88      	ldr	r3, [pc, #544]	; (80032cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80030b4:	4b85      	ldr	r3, [pc, #532]	; (80032cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b8:	091b      	lsrs	r3, r3, #4
 80030ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030be:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80030c0:	4b82      	ldr	r3, [pc, #520]	; (80032cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80030ca:	4b80      	ldr	r3, [pc, #512]	; (80032cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ce:	08db      	lsrs	r3, r3, #3
 80030d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	fb02 f303 	mul.w	r3, r2, r3
 80030da:	ee07 3a90 	vmov	s15, r3
 80030de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030e2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f000 80e1 	beq.w	80032b0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	f000 8083 	beq.w	80031fc <HAL_RCC_GetSysClockFreq+0x204>
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	f200 80a1 	bhi.w	8003240 <HAL_RCC_GetSysClockFreq+0x248>
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d003      	beq.n	800310c <HAL_RCC_GetSysClockFreq+0x114>
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d056      	beq.n	80031b8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800310a:	e099      	b.n	8003240 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800310c:	4b6f      	ldr	r3, [pc, #444]	; (80032cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0320 	and.w	r3, r3, #32
 8003114:	2b00      	cmp	r3, #0
 8003116:	d02d      	beq.n	8003174 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003118:	4b6c      	ldr	r3, [pc, #432]	; (80032cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	08db      	lsrs	r3, r3, #3
 800311e:	f003 0303 	and.w	r3, r3, #3
 8003122:	4a6b      	ldr	r2, [pc, #428]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003124:	fa22 f303 	lsr.w	r3, r2, r3
 8003128:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	ee07 3a90 	vmov	s15, r3
 8003130:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	ee07 3a90 	vmov	s15, r3
 800313a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800313e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003142:	4b62      	ldr	r3, [pc, #392]	; (80032cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800314a:	ee07 3a90 	vmov	s15, r3
 800314e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003152:	ed97 6a02 	vldr	s12, [r7, #8]
 8003156:	eddf 5a61 	vldr	s11, [pc, #388]	; 80032dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800315a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800315e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003162:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800316a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800316e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003172:	e087      	b.n	8003284 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	ee07 3a90 	vmov	s15, r3
 800317a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800317e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80032e0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003186:	4b51      	ldr	r3, [pc, #324]	; (80032cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800318e:	ee07 3a90 	vmov	s15, r3
 8003192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003196:	ed97 6a02 	vldr	s12, [r7, #8]
 800319a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80032dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800319e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80031b6:	e065      	b.n	8003284 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	ee07 3a90 	vmov	s15, r3
 80031be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031c2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80032e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80031c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031ca:	4b40      	ldr	r3, [pc, #256]	; (80032cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031d2:	ee07 3a90 	vmov	s15, r3
 80031d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031da:	ed97 6a02 	vldr	s12, [r7, #8]
 80031de:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80032dc <HAL_RCC_GetSysClockFreq+0x2e4>
 80031e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80031fa:	e043      	b.n	8003284 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	ee07 3a90 	vmov	s15, r3
 8003202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003206:	eddf 6a38 	vldr	s13, [pc, #224]	; 80032e8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800320a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800320e:	4b2f      	ldr	r3, [pc, #188]	; (80032cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003216:	ee07 3a90 	vmov	s15, r3
 800321a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800321e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003222:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80032dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800322a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800322e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800323a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800323e:	e021      	b.n	8003284 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	ee07 3a90 	vmov	s15, r3
 8003246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800324a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80032e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800324e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003252:	4b1e      	ldr	r3, [pc, #120]	; (80032cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800325a:	ee07 3a90 	vmov	s15, r3
 800325e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003262:	ed97 6a02 	vldr	s12, [r7, #8]
 8003266:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80032dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800326a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800326e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003272:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800327a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800327e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003282:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003284:	4b11      	ldr	r3, [pc, #68]	; (80032cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003288:	0a5b      	lsrs	r3, r3, #9
 800328a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800328e:	3301      	adds	r3, #1
 8003290:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	ee07 3a90 	vmov	s15, r3
 8003298:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800329c:	edd7 6a07 	vldr	s13, [r7, #28]
 80032a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032a8:	ee17 3a90 	vmov	r3, s15
 80032ac:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80032ae:	e005      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80032b0:	2300      	movs	r3, #0
 80032b2:	61bb      	str	r3, [r7, #24]
    break;
 80032b4:	e002      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80032b6:	4b07      	ldr	r3, [pc, #28]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80032b8:	61bb      	str	r3, [r7, #24]
    break;
 80032ba:	bf00      	nop
  }

  return sysclockfreq;
 80032bc:	69bb      	ldr	r3, [r7, #24]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3724      	adds	r7, #36	; 0x24
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	58024400 	.word	0x58024400
 80032d0:	03d09000 	.word	0x03d09000
 80032d4:	003d0900 	.word	0x003d0900
 80032d8:	017d7840 	.word	0x017d7840
 80032dc:	46000000 	.word	0x46000000
 80032e0:	4c742400 	.word	0x4c742400
 80032e4:	4a742400 	.word	0x4a742400
 80032e8:	4bbebc20 	.word	0x4bbebc20

080032ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80032f2:	f7ff fe81 	bl	8002ff8 <HAL_RCC_GetSysClockFreq>
 80032f6:	4602      	mov	r2, r0
 80032f8:	4b10      	ldr	r3, [pc, #64]	; (800333c <HAL_RCC_GetHCLKFreq+0x50>)
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	0a1b      	lsrs	r3, r3, #8
 80032fe:	f003 030f 	and.w	r3, r3, #15
 8003302:	490f      	ldr	r1, [pc, #60]	; (8003340 <HAL_RCC_GetHCLKFreq+0x54>)
 8003304:	5ccb      	ldrb	r3, [r1, r3]
 8003306:	f003 031f 	and.w	r3, r3, #31
 800330a:	fa22 f303 	lsr.w	r3, r2, r3
 800330e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003310:	4b0a      	ldr	r3, [pc, #40]	; (800333c <HAL_RCC_GetHCLKFreq+0x50>)
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	f003 030f 	and.w	r3, r3, #15
 8003318:	4a09      	ldr	r2, [pc, #36]	; (8003340 <HAL_RCC_GetHCLKFreq+0x54>)
 800331a:	5cd3      	ldrb	r3, [r2, r3]
 800331c:	f003 031f 	and.w	r3, r3, #31
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	fa22 f303 	lsr.w	r3, r2, r3
 8003326:	4a07      	ldr	r2, [pc, #28]	; (8003344 <HAL_RCC_GetHCLKFreq+0x58>)
 8003328:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800332a:	4a07      	ldr	r2, [pc, #28]	; (8003348 <HAL_RCC_GetHCLKFreq+0x5c>)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003330:	4b04      	ldr	r3, [pc, #16]	; (8003344 <HAL_RCC_GetHCLKFreq+0x58>)
 8003332:	681b      	ldr	r3, [r3, #0]
}
 8003334:	4618      	mov	r0, r3
 8003336:	3708      	adds	r7, #8
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	58024400 	.word	0x58024400
 8003340:	080080a0 	.word	0x080080a0
 8003344:	24000004 	.word	0x24000004
 8003348:	24000000 	.word	0x24000000

0800334c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003350:	f7ff ffcc 	bl	80032ec <HAL_RCC_GetHCLKFreq>
 8003354:	4602      	mov	r2, r0
 8003356:	4b06      	ldr	r3, [pc, #24]	; (8003370 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	091b      	lsrs	r3, r3, #4
 800335c:	f003 0307 	and.w	r3, r3, #7
 8003360:	4904      	ldr	r1, [pc, #16]	; (8003374 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003362:	5ccb      	ldrb	r3, [r1, r3]
 8003364:	f003 031f 	and.w	r3, r3, #31
 8003368:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800336c:	4618      	mov	r0, r3
 800336e:	bd80      	pop	{r7, pc}
 8003370:	58024400 	.word	0x58024400
 8003374:	080080a0 	.word	0x080080a0

08003378 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800337c:	f7ff ffb6 	bl	80032ec <HAL_RCC_GetHCLKFreq>
 8003380:	4602      	mov	r2, r0
 8003382:	4b06      	ldr	r3, [pc, #24]	; (800339c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003384:	69db      	ldr	r3, [r3, #28]
 8003386:	0a1b      	lsrs	r3, r3, #8
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	4904      	ldr	r1, [pc, #16]	; (80033a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800338e:	5ccb      	ldrb	r3, [r1, r3]
 8003390:	f003 031f 	and.w	r3, r3, #31
 8003394:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003398:	4618      	mov	r0, r3
 800339a:	bd80      	pop	{r7, pc}
 800339c:	58024400 	.word	0x58024400
 80033a0:	080080a0 	.word	0x080080a0

080033a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033ac:	2300      	movs	r3, #0
 80033ae:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033b0:	2300      	movs	r3, #0
 80033b2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d03f      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033c8:	d02a      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80033ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033ce:	d824      	bhi.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80033d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033d4:	d018      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80033d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033da:	d81e      	bhi.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d003      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80033e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033e4:	d007      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80033e6:	e018      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033e8:	4bab      	ldr	r3, [pc, #684]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ec:	4aaa      	ldr	r2, [pc, #680]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80033f4:	e015      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	3304      	adds	r3, #4
 80033fa:	2102      	movs	r1, #2
 80033fc:	4618      	mov	r0, r3
 80033fe:	f001 f9ff 	bl	8004800 <RCCEx_PLL2_Config>
 8003402:	4603      	mov	r3, r0
 8003404:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003406:	e00c      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3324      	adds	r3, #36	; 0x24
 800340c:	2102      	movs	r1, #2
 800340e:	4618      	mov	r0, r3
 8003410:	f001 faa8 	bl	8004964 <RCCEx_PLL3_Config>
 8003414:	4603      	mov	r3, r0
 8003416:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003418:	e003      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	75fb      	strb	r3, [r7, #23]
      break;
 800341e:	e000      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003420:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003422:	7dfb      	ldrb	r3, [r7, #23]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d109      	bne.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003428:	4b9b      	ldr	r3, [pc, #620]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800342a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800342c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003434:	4998      	ldr	r1, [pc, #608]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003436:	4313      	orrs	r3, r2
 8003438:	650b      	str	r3, [r1, #80]	; 0x50
 800343a:	e001      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800343c:	7dfb      	ldrb	r3, [r7, #23]
 800343e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003448:	2b00      	cmp	r3, #0
 800344a:	d03d      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003450:	2b04      	cmp	r3, #4
 8003452:	d826      	bhi.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003454:	a201      	add	r2, pc, #4	; (adr r2, 800345c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345a:	bf00      	nop
 800345c:	08003471 	.word	0x08003471
 8003460:	0800347f 	.word	0x0800347f
 8003464:	08003491 	.word	0x08003491
 8003468:	080034a9 	.word	0x080034a9
 800346c:	080034a9 	.word	0x080034a9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003470:	4b89      	ldr	r3, [pc, #548]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003474:	4a88      	ldr	r2, [pc, #544]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003476:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800347a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800347c:	e015      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	3304      	adds	r3, #4
 8003482:	2100      	movs	r1, #0
 8003484:	4618      	mov	r0, r3
 8003486:	f001 f9bb 	bl	8004800 <RCCEx_PLL2_Config>
 800348a:	4603      	mov	r3, r0
 800348c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800348e:	e00c      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	3324      	adds	r3, #36	; 0x24
 8003494:	2100      	movs	r1, #0
 8003496:	4618      	mov	r0, r3
 8003498:	f001 fa64 	bl	8004964 <RCCEx_PLL3_Config>
 800349c:	4603      	mov	r3, r0
 800349e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80034a0:	e003      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	75fb      	strb	r3, [r7, #23]
      break;
 80034a6:	e000      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80034a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034aa:	7dfb      	ldrb	r3, [r7, #23]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d109      	bne.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034b0:	4b79      	ldr	r3, [pc, #484]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034b4:	f023 0207 	bic.w	r2, r3, #7
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034bc:	4976      	ldr	r1, [pc, #472]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	650b      	str	r3, [r1, #80]	; 0x50
 80034c2:	e001      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c4:	7dfb      	ldrb	r3, [r7, #23]
 80034c6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d042      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034dc:	d02b      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80034de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034e2:	d825      	bhi.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80034e4:	2bc0      	cmp	r3, #192	; 0xc0
 80034e6:	d028      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80034e8:	2bc0      	cmp	r3, #192	; 0xc0
 80034ea:	d821      	bhi.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80034ec:	2b80      	cmp	r3, #128	; 0x80
 80034ee:	d016      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80034f0:	2b80      	cmp	r3, #128	; 0x80
 80034f2:	d81d      	bhi.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d002      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80034f8:	2b40      	cmp	r3, #64	; 0x40
 80034fa:	d007      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x168>
 80034fc:	e018      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034fe:	4b66      	ldr	r3, [pc, #408]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003502:	4a65      	ldr	r2, [pc, #404]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003508:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800350a:	e017      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	3304      	adds	r3, #4
 8003510:	2100      	movs	r1, #0
 8003512:	4618      	mov	r0, r3
 8003514:	f001 f974 	bl	8004800 <RCCEx_PLL2_Config>
 8003518:	4603      	mov	r3, r0
 800351a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800351c:	e00e      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	3324      	adds	r3, #36	; 0x24
 8003522:	2100      	movs	r1, #0
 8003524:	4618      	mov	r0, r3
 8003526:	f001 fa1d 	bl	8004964 <RCCEx_PLL3_Config>
 800352a:	4603      	mov	r3, r0
 800352c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800352e:	e005      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	75fb      	strb	r3, [r7, #23]
      break;
 8003534:	e002      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003536:	bf00      	nop
 8003538:	e000      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800353a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800353c:	7dfb      	ldrb	r3, [r7, #23]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d109      	bne.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003542:	4b55      	ldr	r3, [pc, #340]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003546:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800354e:	4952      	ldr	r1, [pc, #328]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003550:	4313      	orrs	r3, r2
 8003552:	650b      	str	r3, [r1, #80]	; 0x50
 8003554:	e001      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003556:	7dfb      	ldrb	r3, [r7, #23]
 8003558:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003562:	2b00      	cmp	r3, #0
 8003564:	d049      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800356c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003570:	d030      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003572:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003576:	d82a      	bhi.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003578:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800357c:	d02c      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800357e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003582:	d824      	bhi.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003584:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003588:	d018      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x218>
 800358a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800358e:	d81e      	bhi.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003590:	2b00      	cmp	r3, #0
 8003592:	d003      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003594:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003598:	d007      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x206>
 800359a:	e018      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800359c:	4b3e      	ldr	r3, [pc, #248]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800359e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a0:	4a3d      	ldr	r2, [pc, #244]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035a8:	e017      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	3304      	adds	r3, #4
 80035ae:	2100      	movs	r1, #0
 80035b0:	4618      	mov	r0, r3
 80035b2:	f001 f925 	bl	8004800 <RCCEx_PLL2_Config>
 80035b6:	4603      	mov	r3, r0
 80035b8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80035ba:	e00e      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	3324      	adds	r3, #36	; 0x24
 80035c0:	2100      	movs	r1, #0
 80035c2:	4618      	mov	r0, r3
 80035c4:	f001 f9ce 	bl	8004964 <RCCEx_PLL3_Config>
 80035c8:	4603      	mov	r3, r0
 80035ca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035cc:	e005      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	75fb      	strb	r3, [r7, #23]
      break;
 80035d2:	e002      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80035d4:	bf00      	nop
 80035d6:	e000      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80035d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035da:	7dfb      	ldrb	r3, [r7, #23]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10a      	bne.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80035e0:	4b2d      	ldr	r3, [pc, #180]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80035ee:	492a      	ldr	r1, [pc, #168]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	658b      	str	r3, [r1, #88]	; 0x58
 80035f4:	e001      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f6:	7dfb      	ldrb	r3, [r7, #23]
 80035f8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003602:	2b00      	cmp	r3, #0
 8003604:	d04c      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800360c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003610:	d030      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003612:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003616:	d82a      	bhi.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003618:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800361c:	d02c      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800361e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003622:	d824      	bhi.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003624:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003628:	d018      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800362a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800362e:	d81e      	bhi.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003630:	2b00      	cmp	r3, #0
 8003632:	d003      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003634:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003638:	d007      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800363a:	e018      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800363c:	4b16      	ldr	r3, [pc, #88]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800363e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003640:	4a15      	ldr	r2, [pc, #84]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003646:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003648:	e017      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	3304      	adds	r3, #4
 800364e:	2100      	movs	r1, #0
 8003650:	4618      	mov	r0, r3
 8003652:	f001 f8d5 	bl	8004800 <RCCEx_PLL2_Config>
 8003656:	4603      	mov	r3, r0
 8003658:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800365a:	e00e      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	3324      	adds	r3, #36	; 0x24
 8003660:	2100      	movs	r1, #0
 8003662:	4618      	mov	r0, r3
 8003664:	f001 f97e 	bl	8004964 <RCCEx_PLL3_Config>
 8003668:	4603      	mov	r3, r0
 800366a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800366c:	e005      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	75fb      	strb	r3, [r7, #23]
      break;
 8003672:	e002      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003674:	bf00      	nop
 8003676:	e000      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003678:	bf00      	nop
    }

    if(ret == HAL_OK)
 800367a:	7dfb      	ldrb	r3, [r7, #23]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10d      	bne.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003680:	4b05      	ldr	r3, [pc, #20]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003684:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800368e:	4902      	ldr	r1, [pc, #8]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003690:	4313      	orrs	r3, r2
 8003692:	658b      	str	r3, [r1, #88]	; 0x58
 8003694:	e004      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003696:	bf00      	nop
 8003698:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800369c:	7dfb      	ldrb	r3, [r7, #23]
 800369e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d032      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036b0:	2b30      	cmp	r3, #48	; 0x30
 80036b2:	d01c      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80036b4:	2b30      	cmp	r3, #48	; 0x30
 80036b6:	d817      	bhi.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80036b8:	2b20      	cmp	r3, #32
 80036ba:	d00c      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80036bc:	2b20      	cmp	r3, #32
 80036be:	d813      	bhi.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d016      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80036c4:	2b10      	cmp	r3, #16
 80036c6:	d10f      	bne.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036c8:	4bb1      	ldr	r3, [pc, #708]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80036ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036cc:	4ab0      	ldr	r2, [pc, #704]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80036ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80036d4:	e00e      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	3304      	adds	r3, #4
 80036da:	2102      	movs	r1, #2
 80036dc:	4618      	mov	r0, r3
 80036de:	f001 f88f 	bl	8004800 <RCCEx_PLL2_Config>
 80036e2:	4603      	mov	r3, r0
 80036e4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80036e6:	e005      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	75fb      	strb	r3, [r7, #23]
      break;
 80036ec:	e002      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80036ee:	bf00      	nop
 80036f0:	e000      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80036f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036f4:	7dfb      	ldrb	r3, [r7, #23]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d109      	bne.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80036fa:	4ba5      	ldr	r3, [pc, #660]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80036fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036fe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003706:	49a2      	ldr	r1, [pc, #648]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003708:	4313      	orrs	r3, r2
 800370a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800370c:	e001      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800370e:	7dfb      	ldrb	r3, [r7, #23]
 8003710:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d047      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003722:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003726:	d030      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003728:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800372c:	d82a      	bhi.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800372e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003732:	d02c      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003734:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003738:	d824      	bhi.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800373a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800373e:	d018      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003740:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003744:	d81e      	bhi.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800374a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800374e:	d007      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003750:	e018      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003752:	4b8f      	ldr	r3, [pc, #572]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003756:	4a8e      	ldr	r2, [pc, #568]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800375c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800375e:	e017      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	3304      	adds	r3, #4
 8003764:	2100      	movs	r1, #0
 8003766:	4618      	mov	r0, r3
 8003768:	f001 f84a 	bl	8004800 <RCCEx_PLL2_Config>
 800376c:	4603      	mov	r3, r0
 800376e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003770:	e00e      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	3324      	adds	r3, #36	; 0x24
 8003776:	2100      	movs	r1, #0
 8003778:	4618      	mov	r0, r3
 800377a:	f001 f8f3 	bl	8004964 <RCCEx_PLL3_Config>
 800377e:	4603      	mov	r3, r0
 8003780:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003782:	e005      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	75fb      	strb	r3, [r7, #23]
      break;
 8003788:	e002      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800378a:	bf00      	nop
 800378c:	e000      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800378e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003790:	7dfb      	ldrb	r3, [r7, #23]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d109      	bne.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003796:	4b7e      	ldr	r3, [pc, #504]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800379a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037a2:	497b      	ldr	r1, [pc, #492]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	650b      	str	r3, [r1, #80]	; 0x50
 80037a8:	e001      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037aa:	7dfb      	ldrb	r3, [r7, #23]
 80037ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d049      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037c2:	d02e      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80037c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037c8:	d828      	bhi.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80037ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037ce:	d02a      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80037d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037d4:	d822      	bhi.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80037d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80037da:	d026      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x486>
 80037dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80037e0:	d81c      	bhi.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80037e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037e6:	d010      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x466>
 80037e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037ec:	d816      	bhi.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d01d      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80037f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037f6:	d111      	bne.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	3304      	adds	r3, #4
 80037fc:	2101      	movs	r1, #1
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 fffe 	bl	8004800 <RCCEx_PLL2_Config>
 8003804:	4603      	mov	r3, r0
 8003806:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003808:	e012      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	3324      	adds	r3, #36	; 0x24
 800380e:	2101      	movs	r1, #1
 8003810:	4618      	mov	r0, r3
 8003812:	f001 f8a7 	bl	8004964 <RCCEx_PLL3_Config>
 8003816:	4603      	mov	r3, r0
 8003818:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800381a:	e009      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	75fb      	strb	r3, [r7, #23]
      break;
 8003820:	e006      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003822:	bf00      	nop
 8003824:	e004      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003826:	bf00      	nop
 8003828:	e002      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800382a:	bf00      	nop
 800382c:	e000      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800382e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003830:	7dfb      	ldrb	r3, [r7, #23]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d109      	bne.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003836:	4b56      	ldr	r3, [pc, #344]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800383a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003842:	4953      	ldr	r1, [pc, #332]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003844:	4313      	orrs	r3, r2
 8003846:	650b      	str	r3, [r1, #80]	; 0x50
 8003848:	e001      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800384a:	7dfb      	ldrb	r3, [r7, #23]
 800384c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d04b      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003860:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003864:	d02e      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8003866:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800386a:	d828      	bhi.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800386c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003870:	d02a      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003876:	d822      	bhi.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003878:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800387c:	d026      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x528>
 800387e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003882:	d81c      	bhi.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003884:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003888:	d010      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x508>
 800388a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800388e:	d816      	bhi.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003890:	2b00      	cmp	r3, #0
 8003892:	d01d      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003894:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003898:	d111      	bne.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	3304      	adds	r3, #4
 800389e:	2101      	movs	r1, #1
 80038a0:	4618      	mov	r0, r3
 80038a2:	f000 ffad 	bl	8004800 <RCCEx_PLL2_Config>
 80038a6:	4603      	mov	r3, r0
 80038a8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80038aa:	e012      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	3324      	adds	r3, #36	; 0x24
 80038b0:	2101      	movs	r1, #1
 80038b2:	4618      	mov	r0, r3
 80038b4:	f001 f856 	bl	8004964 <RCCEx_PLL3_Config>
 80038b8:	4603      	mov	r3, r0
 80038ba:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80038bc:	e009      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	75fb      	strb	r3, [r7, #23]
      break;
 80038c2:	e006      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80038c4:	bf00      	nop
 80038c6:	e004      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80038c8:	bf00      	nop
 80038ca:	e002      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80038cc:	bf00      	nop
 80038ce:	e000      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80038d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038d2:	7dfb      	ldrb	r3, [r7, #23]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10a      	bne.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80038d8:	4b2d      	ldr	r3, [pc, #180]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80038da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038dc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038e6:	492a      	ldr	r1, [pc, #168]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	658b      	str	r3, [r1, #88]	; 0x58
 80038ec:	e001      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ee:	7dfb      	ldrb	r3, [r7, #23]
 80038f0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d022      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    switch(PeriphClkInit->DsiClockSelection)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00e      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8003906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800390a:	d108      	bne.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x57a>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3304      	adds	r3, #4
 8003910:	2101      	movs	r1, #1
 8003912:	4618      	mov	r0, r3
 8003914:	f000 ff74 	bl	8004800 <RCCEx_PLL2_Config>
 8003918:	4603      	mov	r3, r0
 800391a:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 800391c:	e003      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x582>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	75fb      	strb	r3, [r7, #23]
      break;
 8003922:	e000      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x582>
      break;
 8003924:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003926:	7dfb      	ldrb	r3, [r7, #23]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d109      	bne.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800392c:	4b18      	ldr	r3, [pc, #96]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800392e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003930:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003938:	4915      	ldr	r1, [pc, #84]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800393a:	4313      	orrs	r3, r2
 800393c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800393e:	e001      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003940:	7dfb      	ldrb	r3, [r7, #23]
 8003942:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d031      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x610>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003954:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003958:	d00e      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800395a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800395e:	d814      	bhi.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 8003960:	2b00      	cmp	r3, #0
 8003962:	d017      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 8003964:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003968:	d10f      	bne.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800396a:	4b09      	ldr	r3, [pc, #36]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800396c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396e:	4a08      	ldr	r2, [pc, #32]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003974:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003976:	e00e      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x5f2>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3304      	adds	r3, #4
 800397c:	2101      	movs	r1, #1
 800397e:	4618      	mov	r0, r3
 8003980:	f000 ff3e 	bl	8004800 <RCCEx_PLL2_Config>
 8003984:	4603      	mov	r3, r0
 8003986:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003988:	e005      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	75fb      	strb	r3, [r7, #23]
      break;
 800398e:	e002      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8003990:	58024400 	.word	0x58024400
      break;
 8003994:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003996:	7dfb      	ldrb	r3, [r7, #23]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d109      	bne.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800399c:	4bbc      	ldr	r3, [pc, #752]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800399e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039a0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a8:	49b9      	ldr	r1, [pc, #740]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	650b      	str	r3, [r1, #80]	; 0x50
 80039ae:	e001      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b0:	7dfb      	ldrb	r3, [r7, #23]
 80039b2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d032      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c4:	2b03      	cmp	r3, #3
 80039c6:	d81b      	bhi.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 80039c8:	a201      	add	r2, pc, #4	; (adr r2, 80039d0 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 80039ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ce:	bf00      	nop
 80039d0:	08003a07 	.word	0x08003a07
 80039d4:	080039e1 	.word	0x080039e1
 80039d8:	080039ef 	.word	0x080039ef
 80039dc:	08003a07 	.word	0x08003a07
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039e0:	4bab      	ldr	r3, [pc, #684]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80039e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e4:	4aaa      	ldr	r2, [pc, #680]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80039e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80039ec:	e00c      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x664>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	3304      	adds	r3, #4
 80039f2:	2102      	movs	r1, #2
 80039f4:	4618      	mov	r0, r3
 80039f6:	f000 ff03 	bl	8004800 <RCCEx_PLL2_Config>
 80039fa:	4603      	mov	r3, r0
 80039fc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80039fe:	e003      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x664>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	75fb      	strb	r3, [r7, #23]
      break;
 8003a04:	e000      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x664>
      break;
 8003a06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a08:	7dfb      	ldrb	r3, [r7, #23]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d109      	bne.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003a0e:	4ba0      	ldr	r3, [pc, #640]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a12:	f023 0203 	bic.w	r2, r3, #3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1a:	499d      	ldr	r1, [pc, #628]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003a20:	e001      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x682>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a22:	7dfb      	ldrb	r3, [r7, #23]
 8003a24:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f000 8086 	beq.w	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x79c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a34:	4b97      	ldr	r3, [pc, #604]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a96      	ldr	r2, [pc, #600]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8003a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a3e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a40:	f7fd fc38 	bl	80012b4 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a46:	e009      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a48:	f7fd fc34 	bl	80012b4 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b64      	cmp	r3, #100	; 0x64
 8003a54:	d902      	bls.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      {
        ret = HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	75fb      	strb	r3, [r7, #23]
        break;
 8003a5a:	e005      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a5c:	4b8d      	ldr	r3, [pc, #564]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0ef      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      }
    }

    if(ret == HAL_OK)
 8003a68:	7dfb      	ldrb	r3, [r7, #23]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d166      	bne.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003a6e:	4b88      	ldr	r3, [pc, #544]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003a70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003a78:	4053      	eors	r3, r2
 8003a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d013      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x706>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a82:	4b83      	ldr	r3, [pc, #524]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a8a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a8c:	4b80      	ldr	r3, [pc, #512]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a90:	4a7f      	ldr	r2, [pc, #508]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003a92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a96:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a98:	4b7d      	ldr	r3, [pc, #500]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9c:	4a7c      	ldr	r2, [pc, #496]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003a9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aa2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003aa4:	4a7a      	ldr	r2, [pc, #488]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003ab0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ab4:	d115      	bne.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab6:	f7fd fbfd 	bl	80012b4 <HAL_GetTick>
 8003aba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003abc:	e00b      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x732>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003abe:	f7fd fbf9 	bl	80012b4 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d902      	bls.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x732>
          {
            ret = HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	75fb      	strb	r3, [r7, #23]
            break;
 8003ad4:	e005      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ad6:	4b6e      	ldr	r3, [pc, #440]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0ed      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x71a>
          }
        }
      }

      if(ret == HAL_OK)
 8003ae2:	7dfb      	ldrb	r3, [r7, #23]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d126      	bne.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x792>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003af2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003af6:	d10d      	bne.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x770>
 8003af8:	4b65      	ldr	r3, [pc, #404]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b06:	0919      	lsrs	r1, r3, #4
 8003b08:	4b63      	ldr	r3, [pc, #396]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x8f4>)
 8003b0a:	400b      	ands	r3, r1
 8003b0c:	4960      	ldr	r1, [pc, #384]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	610b      	str	r3, [r1, #16]
 8003b12:	e005      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x77c>
 8003b14:	4b5e      	ldr	r3, [pc, #376]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	4a5d      	ldr	r2, [pc, #372]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003b1a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003b1e:	6113      	str	r3, [r2, #16]
 8003b20:	4b5b      	ldr	r3, [pc, #364]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003b22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b2e:	4958      	ldr	r1, [pc, #352]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	670b      	str	r3, [r1, #112]	; 0x70
 8003b34:	e004      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b36:	7dfb      	ldrb	r3, [r7, #23]
 8003b38:	75bb      	strb	r3, [r7, #22]
 8003b3a:	e001      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b3c:	7dfb      	ldrb	r3, [r7, #23]
 8003b3e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d07e      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x8a6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b50:	2b28      	cmp	r3, #40	; 0x28
 8003b52:	d867      	bhi.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x880>
 8003b54:	a201      	add	r2, pc, #4	; (adr r2, 8003b5c <HAL_RCCEx_PeriphCLKConfig+0x7b8>)
 8003b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5a:	bf00      	nop
 8003b5c:	08003c2b 	.word	0x08003c2b
 8003b60:	08003c25 	.word	0x08003c25
 8003b64:	08003c25 	.word	0x08003c25
 8003b68:	08003c25 	.word	0x08003c25
 8003b6c:	08003c25 	.word	0x08003c25
 8003b70:	08003c25 	.word	0x08003c25
 8003b74:	08003c25 	.word	0x08003c25
 8003b78:	08003c25 	.word	0x08003c25
 8003b7c:	08003c01 	.word	0x08003c01
 8003b80:	08003c25 	.word	0x08003c25
 8003b84:	08003c25 	.word	0x08003c25
 8003b88:	08003c25 	.word	0x08003c25
 8003b8c:	08003c25 	.word	0x08003c25
 8003b90:	08003c25 	.word	0x08003c25
 8003b94:	08003c25 	.word	0x08003c25
 8003b98:	08003c25 	.word	0x08003c25
 8003b9c:	08003c13 	.word	0x08003c13
 8003ba0:	08003c25 	.word	0x08003c25
 8003ba4:	08003c25 	.word	0x08003c25
 8003ba8:	08003c25 	.word	0x08003c25
 8003bac:	08003c25 	.word	0x08003c25
 8003bb0:	08003c25 	.word	0x08003c25
 8003bb4:	08003c25 	.word	0x08003c25
 8003bb8:	08003c25 	.word	0x08003c25
 8003bbc:	08003c2b 	.word	0x08003c2b
 8003bc0:	08003c25 	.word	0x08003c25
 8003bc4:	08003c25 	.word	0x08003c25
 8003bc8:	08003c25 	.word	0x08003c25
 8003bcc:	08003c25 	.word	0x08003c25
 8003bd0:	08003c25 	.word	0x08003c25
 8003bd4:	08003c25 	.word	0x08003c25
 8003bd8:	08003c25 	.word	0x08003c25
 8003bdc:	08003c2b 	.word	0x08003c2b
 8003be0:	08003c25 	.word	0x08003c25
 8003be4:	08003c25 	.word	0x08003c25
 8003be8:	08003c25 	.word	0x08003c25
 8003bec:	08003c25 	.word	0x08003c25
 8003bf0:	08003c25 	.word	0x08003c25
 8003bf4:	08003c25 	.word	0x08003c25
 8003bf8:	08003c25 	.word	0x08003c25
 8003bfc:	08003c2b 	.word	0x08003c2b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3304      	adds	r3, #4
 8003c04:	2101      	movs	r1, #1
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 fdfa 	bl	8004800 <RCCEx_PLL2_Config>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003c10:	e00c      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x888>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	3324      	adds	r3, #36	; 0x24
 8003c16:	2101      	movs	r1, #1
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 fea3 	bl	8004964 <RCCEx_PLL3_Config>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003c22:	e003      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x888>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	75fb      	strb	r3, [r7, #23]
      break;
 8003c28:	e000      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x888>
      break;
 8003c2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c2c:	7dfb      	ldrb	r3, [r7, #23]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d109      	bne.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003c32:	4b17      	ldr	r3, [pc, #92]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c36:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c3e:	4914      	ldr	r1, [pc, #80]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	654b      	str	r3, [r1, #84]	; 0x54
 8003c44:	e001      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x8a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c46:	7dfb      	ldrb	r3, [r7, #23]
 8003c48:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d03e      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c5a:	2b05      	cmp	r3, #5
 8003c5c:	d827      	bhi.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8003c5e:	a201      	add	r2, pc, #4	; (adr r2, 8003c64 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c64:	08003cb5 	.word	0x08003cb5
 8003c68:	08003c7d 	.word	0x08003c7d
 8003c6c:	08003c9d 	.word	0x08003c9d
 8003c70:	08003cb5 	.word	0x08003cb5
 8003c74:	08003cb5 	.word	0x08003cb5
 8003c78:	08003cb5 	.word	0x08003cb5
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	3304      	adds	r3, #4
 8003c80:	2101      	movs	r1, #1
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 fdbc 	bl	8004800 <RCCEx_PLL2_Config>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003c8c:	e013      	b.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x912>
 8003c8e:	bf00      	nop
 8003c90:	58024400 	.word	0x58024400
 8003c94:	58024800 	.word	0x58024800
 8003c98:	00ffffcf 	.word	0x00ffffcf

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	3324      	adds	r3, #36	; 0x24
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 fe5e 	bl	8004964 <RCCEx_PLL3_Config>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003cac:	e003      	b.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x912>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	75fb      	strb	r3, [r7, #23]
      break;
 8003cb2:	e000      	b.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8003cb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cb6:	7dfb      	ldrb	r3, [r7, #23]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d109      	bne.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x92c>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003cbc:	4b9f      	ldr	r3, [pc, #636]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc0:	f023 0207 	bic.w	r2, r3, #7
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cc8:	499c      	ldr	r1, [pc, #624]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	654b      	str	r3, [r1, #84]	; 0x54
 8003cce:	e001      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd0:	7dfb      	ldrb	r3, [r7, #23]
 8003cd2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0304 	and.w	r3, r3, #4
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d039      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ce6:	2b05      	cmp	r3, #5
 8003ce8:	d820      	bhi.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x988>
 8003cea:	a201      	add	r2, pc, #4	; (adr r2, 8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x94c>)
 8003cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf0:	08003d33 	.word	0x08003d33
 8003cf4:	08003d09 	.word	0x08003d09
 8003cf8:	08003d1b 	.word	0x08003d1b
 8003cfc:	08003d33 	.word	0x08003d33
 8003d00:	08003d33 	.word	0x08003d33
 8003d04:	08003d33 	.word	0x08003d33
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	3304      	adds	r3, #4
 8003d0c:	2101      	movs	r1, #1
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 fd76 	bl	8004800 <RCCEx_PLL2_Config>
 8003d14:	4603      	mov	r3, r0
 8003d16:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003d18:	e00c      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x990>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	3324      	adds	r3, #36	; 0x24
 8003d1e:	2101      	movs	r1, #1
 8003d20:	4618      	mov	r0, r3
 8003d22:	f000 fe1f 	bl	8004964 <RCCEx_PLL3_Config>
 8003d26:	4603      	mov	r3, r0
 8003d28:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003d2a:	e003      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x990>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	75fb      	strb	r3, [r7, #23]
      break;
 8003d30:	e000      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x990>
      break;
 8003d32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d34:	7dfb      	ldrb	r3, [r7, #23]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10a      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d3a:	4b80      	ldr	r3, [pc, #512]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d3e:	f023 0207 	bic.w	r2, r3, #7
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d48:	497c      	ldr	r1, [pc, #496]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	658b      	str	r3, [r1, #88]	; 0x58
 8003d4e:	e001      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d50:	7dfb      	ldrb	r3, [r7, #23]
 8003d52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0320 	and.w	r3, r3, #32
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d04b      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xa54>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d6a:	d02e      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xa26>
 8003d6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d70:	d828      	bhi.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8003d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d76:	d02a      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 8003d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d7c:	d822      	bhi.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8003d7e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d82:	d026      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 8003d84:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d88:	d81c      	bhi.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8003d8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d8e:	d010      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003d90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d94:	d816      	bhi.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d01d      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8003d9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d9e:	d111      	bne.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	3304      	adds	r3, #4
 8003da4:	2100      	movs	r1, #0
 8003da6:	4618      	mov	r0, r3
 8003da8:	f000 fd2a 	bl	8004800 <RCCEx_PLL2_Config>
 8003dac:	4603      	mov	r3, r0
 8003dae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003db0:	e012      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xa34>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	3324      	adds	r3, #36	; 0x24
 8003db6:	2102      	movs	r1, #2
 8003db8:	4618      	mov	r0, r3
 8003dba:	f000 fdd3 	bl	8004964 <RCCEx_PLL3_Config>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003dc2:	e009      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	75fb      	strb	r3, [r7, #23]
      break;
 8003dc8:	e006      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8003dca:	bf00      	nop
 8003dcc:	e004      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8003dce:	bf00      	nop
 8003dd0:	e002      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8003dd2:	bf00      	nop
 8003dd4:	e000      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8003dd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dd8:	7dfb      	ldrb	r3, [r7, #23]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10a      	bne.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dde:	4b57      	ldr	r3, [pc, #348]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dec:	4953      	ldr	r1, [pc, #332]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	654b      	str	r3, [r1, #84]	; 0x54
 8003df2:	e001      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xa54>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df4:	7dfb      	ldrb	r3, [r7, #23]
 8003df6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d04b      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xaf8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e0a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003e0e:	d02e      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8003e10:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003e14:	d828      	bhi.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8003e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e1a:	d02a      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0xace>
 8003e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e20:	d822      	bhi.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8003e22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e26:	d026      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xad2>
 8003e28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e2c:	d81c      	bhi.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8003e2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e32:	d010      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003e34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e38:	d816      	bhi.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d01d      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xad6>
 8003e3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e42:	d111      	bne.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xac4>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	3304      	adds	r3, #4
 8003e48:	2100      	movs	r1, #0
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 fcd8 	bl	8004800 <RCCEx_PLL2_Config>
 8003e50:	4603      	mov	r3, r0
 8003e52:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003e54:	e012      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0xad8>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	3324      	adds	r3, #36	; 0x24
 8003e5a:	2102      	movs	r1, #2
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 fd81 	bl	8004964 <RCCEx_PLL3_Config>
 8003e62:	4603      	mov	r3, r0
 8003e64:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003e66:	e009      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0xad8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e6c:	e006      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8003e6e:	bf00      	nop
 8003e70:	e004      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8003e72:	bf00      	nop
 8003e74:	e002      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8003e76:	bf00      	nop
 8003e78:	e000      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8003e7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e7c:	7dfb      	ldrb	r3, [r7, #23]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10a      	bne.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e82:	4b2e      	ldr	r3, [pc, #184]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e86:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e90:	492a      	ldr	r1, [pc, #168]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	658b      	str	r3, [r1, #88]	; 0x58
 8003e96:	e001      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xaf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e98:	7dfb      	ldrb	r3, [r7, #23]
 8003e9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d04d      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xba0>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003eae:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003eb2:	d02e      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 8003eb4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003eb8:	d828      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8003eba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ebe:	d02a      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xb72>
 8003ec0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ec4:	d822      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8003ec6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003eca:	d026      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0xb76>
 8003ecc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003ed0:	d81c      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8003ed2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ed6:	d010      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xb56>
 8003ed8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003edc:	d816      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d01d      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xb7a>
 8003ee2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ee6:	d111      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xb68>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	3304      	adds	r3, #4
 8003eec:	2100      	movs	r1, #0
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 fc86 	bl	8004800 <RCCEx_PLL2_Config>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003ef8:	e012      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xb7c>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	3324      	adds	r3, #36	; 0x24
 8003efe:	2102      	movs	r1, #2
 8003f00:	4618      	mov	r0, r3
 8003f02:	f000 fd2f 	bl	8004964 <RCCEx_PLL3_Config>
 8003f06:	4603      	mov	r3, r0
 8003f08:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003f0a:	e009      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f10:	e006      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8003f12:	bf00      	nop
 8003f14:	e004      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8003f16:	bf00      	nop
 8003f18:	e002      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8003f1a:	bf00      	nop
 8003f1c:	e000      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8003f1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f20:	7dfb      	ldrb	r3, [r7, #23]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10c      	bne.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003f26:	4b05      	ldr	r3, [pc, #20]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003f34:	4901      	ldr	r1, [pc, #4]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	658b      	str	r3, [r1, #88]	; 0x58
 8003f3a:	e003      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003f3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f40:	7dfb      	ldrb	r3, [r7, #23]
 8003f42:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0308 	and.w	r3, r3, #8
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d01a      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f5a:	d10a      	bne.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	3324      	adds	r3, #36	; 0x24
 8003f60:	2102      	movs	r1, #2
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 fcfe 	bl	8004964 <RCCEx_PLL3_Config>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xbce>
        {
          status = HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003f72:	4b8c      	ldr	r3, [pc, #560]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f76:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f80:	4988      	ldr	r1, [pc, #544]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0310 	and.w	r3, r3, #16
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d01a      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f9c:	d10a      	bne.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	3324      	adds	r3, #36	; 0x24
 8003fa2:	2102      	movs	r1, #2
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f000 fcdd 	bl	8004964 <RCCEx_PLL3_Config>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d001      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
      {
        status = HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003fb4:	4b7b      	ldr	r3, [pc, #492]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fc2:	4978      	ldr	r1, [pc, #480]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d034      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003fda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fde:	d01d      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003fe0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fe4:	d817      	bhi.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003fea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fee:	d009      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xc60>
 8003ff0:	e011      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	3304      	adds	r3, #4
 8003ff6:	2100      	movs	r1, #0
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f000 fc01 	bl	8004800 <RCCEx_PLL2_Config>
 8003ffe:	4603      	mov	r3, r0
 8004000:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004002:	e00c      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	3324      	adds	r3, #36	; 0x24
 8004008:	2102      	movs	r1, #2
 800400a:	4618      	mov	r0, r3
 800400c:	f000 fcaa 	bl	8004964 <RCCEx_PLL3_Config>
 8004010:	4603      	mov	r3, r0
 8004012:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004014:	e003      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	75fb      	strb	r3, [r7, #23]
      break;
 800401a:	e000      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      break;
 800401c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800401e:	7dfb      	ldrb	r3, [r7, #23]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10a      	bne.n	800403a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004024:	4b5f      	ldr	r3, [pc, #380]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004028:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004032:	495c      	ldr	r1, [pc, #368]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004034:	4313      	orrs	r3, r2
 8004036:	658b      	str	r3, [r1, #88]	; 0x58
 8004038:	e001      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800403a:	7dfb      	ldrb	r3, [r7, #23]
 800403c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d033      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004050:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004054:	d01c      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 8004056:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800405a:	d816      	bhi.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xce6>
 800405c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004060:	d003      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8004062:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004066:	d007      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 8004068:	e00f      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xce6>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800406a:	4b4e      	ldr	r3, [pc, #312]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800406c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406e:	4a4d      	ldr	r2, [pc, #308]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004070:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004074:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004076:	e00c      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xcee>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	3324      	adds	r3, #36	; 0x24
 800407c:	2101      	movs	r1, #1
 800407e:	4618      	mov	r0, r3
 8004080:	f000 fc70 	bl	8004964 <RCCEx_PLL3_Config>
 8004084:	4603      	mov	r3, r0
 8004086:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004088:	e003      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xcee>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	75fb      	strb	r3, [r7, #23]
      break;
 800408e:	e000      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xcee>
      break;
 8004090:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004092:	7dfb      	ldrb	r3, [r7, #23]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10a      	bne.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xd0a>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004098:	4b42      	ldr	r3, [pc, #264]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800409a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a6:	493f      	ldr	r1, [pc, #252]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	654b      	str	r3, [r1, #84]	; 0x54
 80040ac:	e001      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ae:	7dfb      	ldrb	r3, [r7, #23]
 80040b0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d029      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d003      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0xd2a>
 80040c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ca:	d007      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xd38>
 80040cc:	e00f      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0xd4a>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040ce:	4b35      	ldr	r3, [pc, #212]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80040d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d2:	4a34      	ldr	r2, [pc, #208]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80040d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80040da:	e00b      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	3304      	adds	r3, #4
 80040e0:	2102      	movs	r1, #2
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 fb8c 	bl	8004800 <RCCEx_PLL2_Config>
 80040e8:	4603      	mov	r3, r0
 80040ea:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80040ec:	e002      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    default:
      ret = HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	75fb      	strb	r3, [r7, #23]
      break;
 80040f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040f4:	7dfb      	ldrb	r3, [r7, #23]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d109      	bne.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80040fa:	4b2a      	ldr	r3, [pc, #168]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80040fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004106:	4927      	ldr	r1, [pc, #156]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004108:	4313      	orrs	r3, r2
 800410a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800410c:	e001      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800410e:	7dfb      	ldrb	r3, [r7, #23]
 8004110:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0xd90>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	3324      	adds	r3, #36	; 0x24
 8004122:	2102      	movs	r1, #2
 8004124:	4618      	mov	r0, r3
 8004126:	f000 fc1d 	bl	8004964 <RCCEx_PLL3_Config>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0xd90>
    {
      status=HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d035      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xe08>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004146:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800414a:	d017      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 800414c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004150:	d811      	bhi.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004152:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004156:	d013      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xddc>
 8004158:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800415c:	d80b      	bhi.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800415e:	2b00      	cmp	r3, #0
 8004160:	d010      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xde0>
 8004162:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004166:	d106      	bne.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004168:	4b0e      	ldr	r3, [pc, #56]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800416a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416c:	4a0d      	ldr	r2, [pc, #52]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800416e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004172:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004174:	e007      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	75fb      	strb	r3, [r7, #23]
      break;
 800417a:	e004      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 800417c:	bf00      	nop
 800417e:	e002      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8004180:	bf00      	nop
 8004182:	e000      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8004184:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004186:	7dfb      	ldrb	r3, [r7, #23]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d10d      	bne.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xe04>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800418c:	4b05      	ldr	r3, [pc, #20]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800418e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004190:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800419a:	4902      	ldr	r1, [pc, #8]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800419c:	4313      	orrs	r3, r2
 800419e:	654b      	str	r3, [r1, #84]	; 0x54
 80041a0:	e004      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xe08>
 80041a2:	bf00      	nop
 80041a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a8:	7dfb      	ldrb	r3, [r7, #23]
 80041aa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d008      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80041b8:	4b31      	ldr	r3, [pc, #196]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80041ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041c4:	492e      	ldr	r1, [pc, #184]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d009      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xe46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80041d6:	4b2a      	ldr	r3, [pc, #168]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80041e4:	4926      	ldr	r1, [pc, #152]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d008      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xe64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041f6:	4b22      	ldr	r3, [pc, #136]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80041f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041fa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004202:	491f      	ldr	r1, [pc, #124]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004204:	4313      	orrs	r3, r2
 8004206:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00d      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xe8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004214:	4b1a      	ldr	r3, [pc, #104]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	4a19      	ldr	r2, [pc, #100]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800421a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800421e:	6113      	str	r3, [r2, #16]
 8004220:	4b17      	ldr	r3, [pc, #92]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004222:	691a      	ldr	r2, [r3, #16]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800422a:	4915      	ldr	r1, [pc, #84]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800422c:	4313      	orrs	r3, r2
 800422e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	da08      	bge.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xea6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004238:	4b11      	ldr	r3, [pc, #68]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800423a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800423c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004244:	490e      	ldr	r1, [pc, #56]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004246:	4313      	orrs	r3, r2
 8004248:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d009      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0xec6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004256:	4b0a      	ldr	r3, [pc, #40]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004264:	4906      	ldr	r1, [pc, #24]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004266:	4313      	orrs	r3, r2
 8004268:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800426a:	7dbb      	ldrb	r3, [r7, #22]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d101      	bne.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xed0>
  {
    return HAL_OK;
 8004270:	2300      	movs	r3, #0
 8004272:	e000      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  }
  return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
}
 8004276:	4618      	mov	r0, r3
 8004278:	3718      	adds	r7, #24
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	58024400 	.word	0x58024400

08004284 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004288:	f7ff f830 	bl	80032ec <HAL_RCC_GetHCLKFreq>
 800428c:	4602      	mov	r2, r0
 800428e:	4b06      	ldr	r3, [pc, #24]	; (80042a8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	091b      	lsrs	r3, r3, #4
 8004294:	f003 0307 	and.w	r3, r3, #7
 8004298:	4904      	ldr	r1, [pc, #16]	; (80042ac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800429a:	5ccb      	ldrb	r3, [r1, r3]
 800429c:	f003 031f 	and.w	r3, r3, #31
 80042a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	58024400 	.word	0x58024400
 80042ac:	080080a0 	.word	0x080080a0

080042b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b089      	sub	sp, #36	; 0x24
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80042b8:	4ba1      	ldr	r3, [pc, #644]	; (8004540 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042bc:	f003 0303 	and.w	r3, r3, #3
 80042c0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80042c2:	4b9f      	ldr	r3, [pc, #636]	; (8004540 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c6:	0b1b      	lsrs	r3, r3, #12
 80042c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042cc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80042ce:	4b9c      	ldr	r3, [pc, #624]	; (8004540 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d2:	091b      	lsrs	r3, r3, #4
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80042da:	4b99      	ldr	r3, [pc, #612]	; (8004540 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042de:	08db      	lsrs	r3, r3, #3
 80042e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042e4:	693a      	ldr	r2, [r7, #16]
 80042e6:	fb02 f303 	mul.w	r3, r2, r3
 80042ea:	ee07 3a90 	vmov	s15, r3
 80042ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 8111 	beq.w	8004520 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	2b02      	cmp	r3, #2
 8004302:	f000 8083 	beq.w	800440c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	2b02      	cmp	r3, #2
 800430a:	f200 80a1 	bhi.w	8004450 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d003      	beq.n	800431c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d056      	beq.n	80043c8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800431a:	e099      	b.n	8004450 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800431c:	4b88      	ldr	r3, [pc, #544]	; (8004540 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0320 	and.w	r3, r3, #32
 8004324:	2b00      	cmp	r3, #0
 8004326:	d02d      	beq.n	8004384 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004328:	4b85      	ldr	r3, [pc, #532]	; (8004540 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	08db      	lsrs	r3, r3, #3
 800432e:	f003 0303 	and.w	r3, r3, #3
 8004332:	4a84      	ldr	r2, [pc, #528]	; (8004544 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004334:	fa22 f303 	lsr.w	r3, r2, r3
 8004338:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	ee07 3a90 	vmov	s15, r3
 8004340:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	ee07 3a90 	vmov	s15, r3
 800434a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800434e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004352:	4b7b      	ldr	r3, [pc, #492]	; (8004540 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800435a:	ee07 3a90 	vmov	s15, r3
 800435e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004362:	ed97 6a03 	vldr	s12, [r7, #12]
 8004366:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004548 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800436a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800436e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004372:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800437a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800437e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004382:	e087      	b.n	8004494 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	ee07 3a90 	vmov	s15, r3
 800438a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800438e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800454c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004396:	4b6a      	ldr	r3, [pc, #424]	; (8004540 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800439e:	ee07 3a90 	vmov	s15, r3
 80043a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80043aa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004548 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80043ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80043c6:	e065      	b.n	8004494 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	ee07 3a90 	vmov	s15, r3
 80043ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043d2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004550 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80043d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043da:	4b59      	ldr	r3, [pc, #356]	; (8004540 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043e2:	ee07 3a90 	vmov	s15, r3
 80043e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80043ee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004548 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80043f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004406:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800440a:	e043      	b.n	8004494 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	ee07 3a90 	vmov	s15, r3
 8004412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004416:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004554 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800441a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800441e:	4b48      	ldr	r3, [pc, #288]	; (8004540 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004426:	ee07 3a90 	vmov	s15, r3
 800442a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800442e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004432:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004548 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800443a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800443e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800444a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800444e:	e021      	b.n	8004494 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	ee07 3a90 	vmov	s15, r3
 8004456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800445a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004550 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800445e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004462:	4b37      	ldr	r3, [pc, #220]	; (8004540 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800446a:	ee07 3a90 	vmov	s15, r3
 800446e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004472:	ed97 6a03 	vldr	s12, [r7, #12]
 8004476:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004548 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800447a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800447e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004482:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800448a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800448e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004492:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004494:	4b2a      	ldr	r3, [pc, #168]	; (8004540 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004498:	0a5b      	lsrs	r3, r3, #9
 800449a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800449e:	ee07 3a90 	vmov	s15, r3
 80044a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80044b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044ba:	ee17 2a90 	vmov	r2, s15
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80044c2:	4b1f      	ldr	r3, [pc, #124]	; (8004540 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c6:	0c1b      	lsrs	r3, r3, #16
 80044c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044cc:	ee07 3a90 	vmov	s15, r3
 80044d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80044e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044e8:	ee17 2a90 	vmov	r2, s15
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80044f0:	4b13      	ldr	r3, [pc, #76]	; (8004540 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f4:	0e1b      	lsrs	r3, r3, #24
 80044f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044fa:	ee07 3a90 	vmov	s15, r3
 80044fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004502:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004506:	ee37 7a87 	vadd.f32	s14, s15, s14
 800450a:	edd7 6a07 	vldr	s13, [r7, #28]
 800450e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004512:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004516:	ee17 2a90 	vmov	r2, s15
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800451e:	e008      	b.n	8004532 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	609a      	str	r2, [r3, #8]
}
 8004532:	bf00      	nop
 8004534:	3724      	adds	r7, #36	; 0x24
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	58024400 	.word	0x58024400
 8004544:	03d09000 	.word	0x03d09000
 8004548:	46000000 	.word	0x46000000
 800454c:	4c742400 	.word	0x4c742400
 8004550:	4a742400 	.word	0x4a742400
 8004554:	4bbebc20 	.word	0x4bbebc20

08004558 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004558:	b480      	push	{r7}
 800455a:	b089      	sub	sp, #36	; 0x24
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004560:	4ba1      	ldr	r3, [pc, #644]	; (80047e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004564:	f003 0303 	and.w	r3, r3, #3
 8004568:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800456a:	4b9f      	ldr	r3, [pc, #636]	; (80047e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800456c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800456e:	0d1b      	lsrs	r3, r3, #20
 8004570:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004574:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004576:	4b9c      	ldr	r3, [pc, #624]	; (80047e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457a:	0a1b      	lsrs	r3, r3, #8
 800457c:	f003 0301 	and.w	r3, r3, #1
 8004580:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004582:	4b99      	ldr	r3, [pc, #612]	; (80047e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004586:	08db      	lsrs	r3, r3, #3
 8004588:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	fb02 f303 	mul.w	r3, r2, r3
 8004592:	ee07 3a90 	vmov	s15, r3
 8004596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800459a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f000 8111 	beq.w	80047c8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	f000 8083 	beq.w	80046b4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	f200 80a1 	bhi.w	80046f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d003      	beq.n	80045c4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d056      	beq.n	8004670 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80045c2:	e099      	b.n	80046f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045c4:	4b88      	ldr	r3, [pc, #544]	; (80047e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0320 	and.w	r3, r3, #32
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d02d      	beq.n	800462c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80045d0:	4b85      	ldr	r3, [pc, #532]	; (80047e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	08db      	lsrs	r3, r3, #3
 80045d6:	f003 0303 	and.w	r3, r3, #3
 80045da:	4a84      	ldr	r2, [pc, #528]	; (80047ec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80045dc:	fa22 f303 	lsr.w	r3, r2, r3
 80045e0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	ee07 3a90 	vmov	s15, r3
 80045e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	ee07 3a90 	vmov	s15, r3
 80045f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045fa:	4b7b      	ldr	r3, [pc, #492]	; (80047e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004602:	ee07 3a90 	vmov	s15, r3
 8004606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800460a:	ed97 6a03 	vldr	s12, [r7, #12]
 800460e:	eddf 5a78 	vldr	s11, [pc, #480]	; 80047f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800461a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800461e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004626:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800462a:	e087      	b.n	800473c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	ee07 3a90 	vmov	s15, r3
 8004632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004636:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80047f4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800463a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800463e:	4b6a      	ldr	r3, [pc, #424]	; (80047e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004646:	ee07 3a90 	vmov	s15, r3
 800464a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800464e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004652:	eddf 5a67 	vldr	s11, [pc, #412]	; 80047f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800465a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800465e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800466a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800466e:	e065      	b.n	800473c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	ee07 3a90 	vmov	s15, r3
 8004676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800467a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80047f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800467e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004682:	4b59      	ldr	r3, [pc, #356]	; (80047e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800468a:	ee07 3a90 	vmov	s15, r3
 800468e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004692:	ed97 6a03 	vldr	s12, [r7, #12]
 8004696:	eddf 5a56 	vldr	s11, [pc, #344]	; 80047f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800469a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800469e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80046b2:	e043      	b.n	800473c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	ee07 3a90 	vmov	s15, r3
 80046ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046be:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80047fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80046c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046c6:	4b48      	ldr	r3, [pc, #288]	; (80047e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ce:	ee07 3a90 	vmov	s15, r3
 80046d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80046da:	eddf 5a45 	vldr	s11, [pc, #276]	; 80047f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80046de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80046f6:	e021      	b.n	800473c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	ee07 3a90 	vmov	s15, r3
 80046fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004702:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80047f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800470a:	4b37      	ldr	r3, [pc, #220]	; (80047e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004712:	ee07 3a90 	vmov	s15, r3
 8004716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800471a:	ed97 6a03 	vldr	s12, [r7, #12]
 800471e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80047f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800472a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800472e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004736:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800473a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800473c:	4b2a      	ldr	r3, [pc, #168]	; (80047e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800473e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004740:	0a5b      	lsrs	r3, r3, #9
 8004742:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004746:	ee07 3a90 	vmov	s15, r3
 800474a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800474e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004752:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004756:	edd7 6a07 	vldr	s13, [r7, #28]
 800475a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800475e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004762:	ee17 2a90 	vmov	r2, s15
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800476a:	4b1f      	ldr	r3, [pc, #124]	; (80047e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	0c1b      	lsrs	r3, r3, #16
 8004770:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004774:	ee07 3a90 	vmov	s15, r3
 8004778:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800477c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004780:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004784:	edd7 6a07 	vldr	s13, [r7, #28]
 8004788:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800478c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004790:	ee17 2a90 	vmov	r2, s15
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004798:	4b13      	ldr	r3, [pc, #76]	; (80047e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800479a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479c:	0e1b      	lsrs	r3, r3, #24
 800479e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047a2:	ee07 3a90 	vmov	s15, r3
 80047a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80047b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047be:	ee17 2a90 	vmov	r2, s15
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80047c6:	e008      	b.n	80047da <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	609a      	str	r2, [r3, #8]
}
 80047da:	bf00      	nop
 80047dc:	3724      	adds	r7, #36	; 0x24
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	58024400 	.word	0x58024400
 80047ec:	03d09000 	.word	0x03d09000
 80047f0:	46000000 	.word	0x46000000
 80047f4:	4c742400 	.word	0x4c742400
 80047f8:	4a742400 	.word	0x4a742400
 80047fc:	4bbebc20 	.word	0x4bbebc20

08004800 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800480a:	2300      	movs	r3, #0
 800480c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800480e:	4b53      	ldr	r3, [pc, #332]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 8004810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004812:	f003 0303 	and.w	r3, r3, #3
 8004816:	2b03      	cmp	r3, #3
 8004818:	d101      	bne.n	800481e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e099      	b.n	8004952 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800481e:	4b4f      	ldr	r3, [pc, #316]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a4e      	ldr	r2, [pc, #312]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 8004824:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004828:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800482a:	f7fc fd43 	bl	80012b4 <HAL_GetTick>
 800482e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004830:	e008      	b.n	8004844 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004832:	f7fc fd3f 	bl	80012b4 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	2b02      	cmp	r3, #2
 800483e:	d901      	bls.n	8004844 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e086      	b.n	8004952 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004844:	4b45      	ldr	r3, [pc, #276]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1f0      	bne.n	8004832 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004850:	4b42      	ldr	r3, [pc, #264]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 8004852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004854:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	031b      	lsls	r3, r3, #12
 800485e:	493f      	ldr	r1, [pc, #252]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 8004860:	4313      	orrs	r3, r2
 8004862:	628b      	str	r3, [r1, #40]	; 0x28
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	3b01      	subs	r3, #1
 800486a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	3b01      	subs	r3, #1
 8004874:	025b      	lsls	r3, r3, #9
 8004876:	b29b      	uxth	r3, r3
 8004878:	431a      	orrs	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	3b01      	subs	r3, #1
 8004880:	041b      	lsls	r3, r3, #16
 8004882:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004886:	431a      	orrs	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	3b01      	subs	r3, #1
 800488e:	061b      	lsls	r3, r3, #24
 8004890:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004894:	4931      	ldr	r1, [pc, #196]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 8004896:	4313      	orrs	r3, r2
 8004898:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800489a:	4b30      	ldr	r3, [pc, #192]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 800489c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	492d      	ldr	r1, [pc, #180]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80048ac:	4b2b      	ldr	r3, [pc, #172]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 80048ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b0:	f023 0220 	bic.w	r2, r3, #32
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	4928      	ldr	r1, [pc, #160]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80048be:	4b27      	ldr	r3, [pc, #156]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 80048c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c2:	4a26      	ldr	r2, [pc, #152]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 80048c4:	f023 0310 	bic.w	r3, r3, #16
 80048c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80048ca:	4b24      	ldr	r3, [pc, #144]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 80048cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048ce:	4b24      	ldr	r3, [pc, #144]	; (8004960 <RCCEx_PLL2_Config+0x160>)
 80048d0:	4013      	ands	r3, r2
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	69d2      	ldr	r2, [r2, #28]
 80048d6:	00d2      	lsls	r2, r2, #3
 80048d8:	4920      	ldr	r1, [pc, #128]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80048de:	4b1f      	ldr	r3, [pc, #124]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 80048e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e2:	4a1e      	ldr	r2, [pc, #120]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 80048e4:	f043 0310 	orr.w	r3, r3, #16
 80048e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d106      	bne.n	80048fe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80048f0:	4b1a      	ldr	r3, [pc, #104]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 80048f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f4:	4a19      	ldr	r2, [pc, #100]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 80048f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80048fc:	e00f      	b.n	800491e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d106      	bne.n	8004912 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004904:	4b15      	ldr	r3, [pc, #84]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 8004906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004908:	4a14      	ldr	r2, [pc, #80]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 800490a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800490e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004910:	e005      	b.n	800491e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004912:	4b12      	ldr	r3, [pc, #72]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 8004914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004916:	4a11      	ldr	r2, [pc, #68]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 8004918:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800491c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800491e:	4b0f      	ldr	r3, [pc, #60]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a0e      	ldr	r2, [pc, #56]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 8004924:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004928:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800492a:	f7fc fcc3 	bl	80012b4 <HAL_GetTick>
 800492e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004930:	e008      	b.n	8004944 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004932:	f7fc fcbf 	bl	80012b4 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	2b02      	cmp	r3, #2
 800493e:	d901      	bls.n	8004944 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e006      	b.n	8004952 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004944:	4b05      	ldr	r3, [pc, #20]	; (800495c <RCCEx_PLL2_Config+0x15c>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d0f0      	beq.n	8004932 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004950:	7bfb      	ldrb	r3, [r7, #15]
}
 8004952:	4618      	mov	r0, r3
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	58024400 	.word	0x58024400
 8004960:	ffff0007 	.word	0xffff0007

08004964 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800496e:	2300      	movs	r3, #0
 8004970:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004972:	4b53      	ldr	r3, [pc, #332]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 8004974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004976:	f003 0303 	and.w	r3, r3, #3
 800497a:	2b03      	cmp	r3, #3
 800497c:	d101      	bne.n	8004982 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e099      	b.n	8004ab6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004982:	4b4f      	ldr	r3, [pc, #316]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a4e      	ldr	r2, [pc, #312]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 8004988:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800498c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800498e:	f7fc fc91 	bl	80012b4 <HAL_GetTick>
 8004992:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004994:	e008      	b.n	80049a8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004996:	f7fc fc8d 	bl	80012b4 <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d901      	bls.n	80049a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e086      	b.n	8004ab6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80049a8:	4b45      	ldr	r3, [pc, #276]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1f0      	bne.n	8004996 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80049b4:	4b42      	ldr	r3, [pc, #264]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 80049b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	051b      	lsls	r3, r3, #20
 80049c2:	493f      	ldr	r1, [pc, #252]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	628b      	str	r3, [r1, #40]	; 0x28
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	3b01      	subs	r3, #1
 80049ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	3b01      	subs	r3, #1
 80049d8:	025b      	lsls	r3, r3, #9
 80049da:	b29b      	uxth	r3, r3
 80049dc:	431a      	orrs	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	3b01      	subs	r3, #1
 80049e4:	041b      	lsls	r3, r3, #16
 80049e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80049ea:	431a      	orrs	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	3b01      	subs	r3, #1
 80049f2:	061b      	lsls	r3, r3, #24
 80049f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80049f8:	4931      	ldr	r1, [pc, #196]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80049fe:	4b30      	ldr	r3, [pc, #192]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 8004a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a02:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	492d      	ldr	r1, [pc, #180]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004a10:	4b2b      	ldr	r3, [pc, #172]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 8004a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a14:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	4928      	ldr	r1, [pc, #160]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004a22:	4b27      	ldr	r3, [pc, #156]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 8004a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a26:	4a26      	ldr	r2, [pc, #152]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 8004a28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004a2e:	4b24      	ldr	r3, [pc, #144]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 8004a30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a32:	4b24      	ldr	r3, [pc, #144]	; (8004ac4 <RCCEx_PLL3_Config+0x160>)
 8004a34:	4013      	ands	r3, r2
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	69d2      	ldr	r2, [r2, #28]
 8004a3a:	00d2      	lsls	r2, r2, #3
 8004a3c:	4920      	ldr	r1, [pc, #128]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004a42:	4b1f      	ldr	r3, [pc, #124]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 8004a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a46:	4a1e      	ldr	r2, [pc, #120]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 8004a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d106      	bne.n	8004a62 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004a54:	4b1a      	ldr	r3, [pc, #104]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 8004a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a58:	4a19      	ldr	r2, [pc, #100]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 8004a5a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004a5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a60:	e00f      	b.n	8004a82 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d106      	bne.n	8004a76 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004a68:	4b15      	ldr	r3, [pc, #84]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 8004a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6c:	4a14      	ldr	r2, [pc, #80]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 8004a6e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004a72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a74:	e005      	b.n	8004a82 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004a76:	4b12      	ldr	r3, [pc, #72]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 8004a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7a:	4a11      	ldr	r2, [pc, #68]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 8004a7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a80:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004a82:	4b0f      	ldr	r3, [pc, #60]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a0e      	ldr	r2, [pc, #56]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 8004a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a8e:	f7fc fc11 	bl	80012b4 <HAL_GetTick>
 8004a92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004a94:	e008      	b.n	8004aa8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004a96:	f7fc fc0d 	bl	80012b4 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d901      	bls.n	8004aa8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e006      	b.n	8004ab6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004aa8:	4b05      	ldr	r3, [pc, #20]	; (8004ac0 <RCCEx_PLL3_Config+0x15c>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d0f0      	beq.n	8004a96 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	58024400 	.word	0x58024400
 8004ac4:	ffff0007 	.word	0xffff0007

08004ac8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e042      	b.n	8004b60 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d106      	bne.n	8004af2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f7fc f96b 	bl	8000dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2224      	movs	r2, #36	; 0x24
 8004af6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f022 0201 	bic.w	r2, r2, #1
 8004b08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 fbe2 	bl	80052d4 <UART_SetConfig>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d101      	bne.n	8004b1a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e022      	b.n	8004b60 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d002      	beq.n	8004b28 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f001 f936 	bl	8005d94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685a      	ldr	r2, [r3, #4]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	689a      	ldr	r2, [r3, #8]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f042 0201 	orr.w	r2, r2, #1
 8004b56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f001 f9bd 	bl	8005ed8 <UART_CheckIdleState>
 8004b5e:	4603      	mov	r3, r0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3708      	adds	r7, #8
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b08a      	sub	sp, #40	; 0x28
 8004b6c:	af02      	add	r7, sp, #8
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	603b      	str	r3, [r7, #0]
 8004b74:	4613      	mov	r3, r2
 8004b76:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b7e:	2b20      	cmp	r3, #32
 8004b80:	f040 8083 	bne.w	8004c8a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d002      	beq.n	8004b90 <HAL_UART_Transmit+0x28>
 8004b8a:	88fb      	ldrh	r3, [r7, #6]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d101      	bne.n	8004b94 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e07b      	b.n	8004c8c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d101      	bne.n	8004ba2 <HAL_UART_Transmit+0x3a>
 8004b9e:	2302      	movs	r3, #2
 8004ba0:	e074      	b.n	8004c8c <HAL_UART_Transmit+0x124>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2221      	movs	r2, #33	; 0x21
 8004bb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bba:	f7fc fb7b 	bl	80012b4 <HAL_GetTick>
 8004bbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	88fa      	ldrh	r2, [r7, #6]
 8004bc4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	88fa      	ldrh	r2, [r7, #6]
 8004bcc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bd8:	d108      	bne.n	8004bec <HAL_UART_Transmit+0x84>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d104      	bne.n	8004bec <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004be2:	2300      	movs	r3, #0
 8004be4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	61bb      	str	r3, [r7, #24]
 8004bea:	e003      	b.n	8004bf4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004bfc:	e02c      	b.n	8004c58 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	2200      	movs	r2, #0
 8004c06:	2180      	movs	r1, #128	; 0x80
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f001 f9b0 	bl	8005f6e <UART_WaitOnFlagUntilTimeout>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d001      	beq.n	8004c18 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e039      	b.n	8004c8c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10b      	bne.n	8004c36 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	881b      	ldrh	r3, [r3, #0]
 8004c22:	461a      	mov	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c2c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	3302      	adds	r3, #2
 8004c32:	61bb      	str	r3, [r7, #24]
 8004c34:	e007      	b.n	8004c46 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	781a      	ldrb	r2, [r3, #0]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	3301      	adds	r3, #1
 8004c44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1cc      	bne.n	8004bfe <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	9300      	str	r3, [sp, #0]
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	2140      	movs	r1, #64	; 0x40
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f001 f97d 	bl	8005f6e <UART_WaitOnFlagUntilTimeout>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e006      	b.n	8004c8c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2220      	movs	r2, #32
 8004c82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004c86:	2300      	movs	r3, #0
 8004c88:	e000      	b.n	8004c8c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004c8a:	2302      	movs	r3, #2
  }
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3720      	adds	r7, #32
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca8:	2b20      	cmp	r3, #32
 8004caa:	d131      	bne.n	8004d10 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d002      	beq.n	8004cb8 <HAL_UART_Receive_IT+0x24>
 8004cb2:	88fb      	ldrh	r3, [r7, #6]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d101      	bne.n	8004cbc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e02a      	b.n	8004d12 <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d101      	bne.n	8004cca <HAL_UART_Receive_IT+0x36>
 8004cc6:	2302      	movs	r3, #2
 8004cc8:	e023      	b.n	8004d12 <HAL_UART_Receive_IT+0x7e>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a0f      	ldr	r2, [pc, #60]	; (8004d1c <HAL_UART_Receive_IT+0x88>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d00e      	beq.n	8004d00 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d007      	beq.n	8004d00 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004cfe:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004d00:	88fb      	ldrh	r3, [r7, #6]
 8004d02:	461a      	mov	r2, r3
 8004d04:	68b9      	ldr	r1, [r7, #8]
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	f001 f9b2 	bl	8006070 <UART_Start_Receive_IT>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	e000      	b.n	8004d12 <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004d10:	2302      	movs	r3, #2
  }
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	58000c00 	.word	0x58000c00

08004d20 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b088      	sub	sp, #32
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	69db      	ldr	r3, [r3, #28]
 8004d2e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004d40:	69fa      	ldr	r2, [r7, #28]
 8004d42:	f640 030f 	movw	r3, #2063	; 0x80f
 8004d46:	4013      	ands	r3, r2
 8004d48:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d118      	bne.n	8004d82 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	f003 0320 	and.w	r3, r3, #32
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d013      	beq.n	8004d82 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	f003 0320 	and.w	r3, r3, #32
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d104      	bne.n	8004d6e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d009      	beq.n	8004d82 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	f000 8282 	beq.w	800527c <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	4798      	blx	r3
      }
      return;
 8004d80:	e27c      	b.n	800527c <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f000 80ef 	beq.w	8004f68 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	4b73      	ldr	r3, [pc, #460]	; (8004f5c <HAL_UART_IRQHandler+0x23c>)
 8004d8e:	4013      	ands	r3, r2
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d105      	bne.n	8004da0 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	4b72      	ldr	r3, [pc, #456]	; (8004f60 <HAL_UART_IRQHandler+0x240>)
 8004d98:	4013      	ands	r3, r2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f000 80e4 	beq.w	8004f68 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d010      	beq.n	8004dcc <HAL_UART_IRQHandler+0xac>
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00b      	beq.n	8004dcc <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2201      	movs	r2, #1
 8004dba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dc2:	f043 0201 	orr.w	r2, r3, #1
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d010      	beq.n	8004df8 <HAL_UART_IRQHandler+0xd8>
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00b      	beq.n	8004df8 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2202      	movs	r2, #2
 8004de6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dee:	f043 0204 	orr.w	r2, r3, #4
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	f003 0304 	and.w	r3, r3, #4
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d010      	beq.n	8004e24 <HAL_UART_IRQHandler+0x104>
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00b      	beq.n	8004e24 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2204      	movs	r2, #4
 8004e12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e1a:	f043 0202 	orr.w	r2, r3, #2
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	f003 0308 	and.w	r3, r3, #8
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d015      	beq.n	8004e5a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	f003 0320 	and.w	r3, r3, #32
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d104      	bne.n	8004e42 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004e38:	697a      	ldr	r2, [r7, #20]
 8004e3a:	4b48      	ldr	r3, [pc, #288]	; (8004f5c <HAL_UART_IRQHandler+0x23c>)
 8004e3c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00b      	beq.n	8004e5a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2208      	movs	r2, #8
 8004e48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e50:	f043 0208 	orr.w	r2, r3, #8
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d011      	beq.n	8004e88 <HAL_UART_IRQHandler+0x168>
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00c      	beq.n	8004e88 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e7e:	f043 0220 	orr.w	r2, r3, #32
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f000 81f6 	beq.w	8005280 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	f003 0320 	and.w	r3, r3, #32
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d011      	beq.n	8004ec2 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	f003 0320 	and.w	r3, r3, #32
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d104      	bne.n	8004eb2 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d007      	beq.n	8004ec2 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d003      	beq.n	8004ec2 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ec8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed4:	2b40      	cmp	r3, #64	; 0x40
 8004ed6:	d004      	beq.n	8004ee2 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d031      	beq.n	8004f46 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f001 f982 	bl	80061ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef2:	2b40      	cmp	r3, #64	; 0x40
 8004ef4:	d123      	bne.n	8004f3e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	689a      	ldr	r2, [r3, #8]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f04:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d013      	beq.n	8004f36 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f12:	4a14      	ldr	r2, [pc, #80]	; (8004f64 <HAL_UART_IRQHandler+0x244>)
 8004f14:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7fc fe10 	bl	8001b40 <HAL_DMA_Abort_IT>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d017      	beq.n	8004f56 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004f30:	4610      	mov	r0, r2
 8004f32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f34:	e00f      	b.n	8004f56 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 f9b6 	bl	80052a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f3c:	e00b      	b.n	8004f56 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 f9b2 	bl	80052a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f44:	e007      	b.n	8004f56 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 f9ae 	bl	80052a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004f54:	e194      	b.n	8005280 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f56:	bf00      	nop
    return;
 8004f58:	e192      	b.n	8005280 <HAL_UART_IRQHandler+0x560>
 8004f5a:	bf00      	nop
 8004f5c:	10000001 	.word	0x10000001
 8004f60:	04000120 	.word	0x04000120
 8004f64:	08006251 	.word	0x08006251

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	f040 810f 	bne.w	8005190 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	f003 0310 	and.w	r3, r3, #16
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f000 8109 	beq.w	8005190 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	f003 0310 	and.w	r3, r3, #16
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f000 8103 	beq.w	8005190 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2210      	movs	r2, #16
 8004f90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f9c:	2b40      	cmp	r3, #64	; 0x40
 8004f9e:	f040 80bb 	bne.w	8005118 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a96      	ldr	r2, [pc, #600]	; (8005204 <HAL_UART_IRQHandler+0x4e4>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d059      	beq.n	8005062 <HAL_UART_IRQHandler+0x342>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a94      	ldr	r2, [pc, #592]	; (8005208 <HAL_UART_IRQHandler+0x4e8>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d053      	beq.n	8005062 <HAL_UART_IRQHandler+0x342>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a92      	ldr	r2, [pc, #584]	; (800520c <HAL_UART_IRQHandler+0x4ec>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d04d      	beq.n	8005062 <HAL_UART_IRQHandler+0x342>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a90      	ldr	r2, [pc, #576]	; (8005210 <HAL_UART_IRQHandler+0x4f0>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d047      	beq.n	8005062 <HAL_UART_IRQHandler+0x342>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a8e      	ldr	r2, [pc, #568]	; (8005214 <HAL_UART_IRQHandler+0x4f4>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d041      	beq.n	8005062 <HAL_UART_IRQHandler+0x342>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a8c      	ldr	r2, [pc, #560]	; (8005218 <HAL_UART_IRQHandler+0x4f8>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d03b      	beq.n	8005062 <HAL_UART_IRQHandler+0x342>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a8a      	ldr	r2, [pc, #552]	; (800521c <HAL_UART_IRQHandler+0x4fc>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d035      	beq.n	8005062 <HAL_UART_IRQHandler+0x342>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a88      	ldr	r2, [pc, #544]	; (8005220 <HAL_UART_IRQHandler+0x500>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d02f      	beq.n	8005062 <HAL_UART_IRQHandler+0x342>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a86      	ldr	r2, [pc, #536]	; (8005224 <HAL_UART_IRQHandler+0x504>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d029      	beq.n	8005062 <HAL_UART_IRQHandler+0x342>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a84      	ldr	r2, [pc, #528]	; (8005228 <HAL_UART_IRQHandler+0x508>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d023      	beq.n	8005062 <HAL_UART_IRQHandler+0x342>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a82      	ldr	r2, [pc, #520]	; (800522c <HAL_UART_IRQHandler+0x50c>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d01d      	beq.n	8005062 <HAL_UART_IRQHandler+0x342>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a80      	ldr	r2, [pc, #512]	; (8005230 <HAL_UART_IRQHandler+0x510>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d017      	beq.n	8005062 <HAL_UART_IRQHandler+0x342>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a7e      	ldr	r2, [pc, #504]	; (8005234 <HAL_UART_IRQHandler+0x514>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d011      	beq.n	8005062 <HAL_UART_IRQHandler+0x342>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a7c      	ldr	r2, [pc, #496]	; (8005238 <HAL_UART_IRQHandler+0x518>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d00b      	beq.n	8005062 <HAL_UART_IRQHandler+0x342>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a7a      	ldr	r2, [pc, #488]	; (800523c <HAL_UART_IRQHandler+0x51c>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d005      	beq.n	8005062 <HAL_UART_IRQHandler+0x342>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a78      	ldr	r2, [pc, #480]	; (8005240 <HAL_UART_IRQHandler+0x520>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d105      	bne.n	800506e <HAL_UART_IRQHandler+0x34e>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	b29b      	uxth	r3, r3
 800506c:	e004      	b.n	8005078 <HAL_UART_IRQHandler+0x358>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	b29b      	uxth	r3, r3
 8005078:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800507a:	893b      	ldrh	r3, [r7, #8]
 800507c:	2b00      	cmp	r3, #0
 800507e:	f000 8101 	beq.w	8005284 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005088:	893a      	ldrh	r2, [r7, #8]
 800508a:	429a      	cmp	r2, r3
 800508c:	f080 80fa 	bcs.w	8005284 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	893a      	ldrh	r2, [r7, #8]
 8005094:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050a2:	d02b      	beq.n	80050fc <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050b2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	689a      	ldr	r2, [r3, #8]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f022 0201 	bic.w	r2, r2, #1
 80050c2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	689a      	ldr	r2, [r3, #8]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050d2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2220      	movs	r2, #32
 80050d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f022 0210 	bic.w	r2, r2, #16
 80050f0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050f6:	4618      	mov	r0, r3
 80050f8:	f7fc fa04 	bl	8001504 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005108:	b29b      	uxth	r3, r3
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	b29b      	uxth	r3, r3
 800510e:	4619      	mov	r1, r3
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 f8d3 	bl	80052bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005116:	e0b5      	b.n	8005284 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005124:	b29b      	uxth	r3, r3
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005130:	b29b      	uxth	r3, r3
 8005132:	2b00      	cmp	r3, #0
 8005134:	f000 80a8 	beq.w	8005288 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8005138:	897b      	ldrh	r3, [r7, #10]
 800513a:	2b00      	cmp	r3, #0
 800513c:	f000 80a4 	beq.w	8005288 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800514e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6899      	ldr	r1, [r3, #8]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	4b3a      	ldr	r3, [pc, #232]	; (8005244 <HAL_UART_IRQHandler+0x524>)
 800515c:	400b      	ands	r3, r1
 800515e:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2220      	movs	r2, #32
 8005164:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f022 0210 	bic.w	r2, r2, #16
 8005182:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005184:	897b      	ldrh	r3, [r7, #10]
 8005186:	4619      	mov	r1, r3
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 f897 	bl	80052bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800518e:	e07b      	b.n	8005288 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00d      	beq.n	80051b6 <HAL_UART_IRQHandler+0x496>
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d008      	beq.n	80051b6 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80051ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f001 fb5a 	bl	8006868 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80051b4:	e06b      	b.n	800528e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d012      	beq.n	80051e6 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d104      	bne.n	80051d4 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d008      	beq.n	80051e6 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d057      	beq.n	800528c <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	4798      	blx	r3
    }
    return;
 80051e4:	e052      	b.n	800528c <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d02b      	beq.n	8005248 <HAL_UART_IRQHandler+0x528>
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d026      	beq.n	8005248 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f001 f83e 	bl	800627c <UART_EndTransmit_IT>
    return;
 8005200:	e045      	b.n	800528e <HAL_UART_IRQHandler+0x56e>
 8005202:	bf00      	nop
 8005204:	40020010 	.word	0x40020010
 8005208:	40020028 	.word	0x40020028
 800520c:	40020040 	.word	0x40020040
 8005210:	40020058 	.word	0x40020058
 8005214:	40020070 	.word	0x40020070
 8005218:	40020088 	.word	0x40020088
 800521c:	400200a0 	.word	0x400200a0
 8005220:	400200b8 	.word	0x400200b8
 8005224:	40020410 	.word	0x40020410
 8005228:	40020428 	.word	0x40020428
 800522c:	40020440 	.word	0x40020440
 8005230:	40020458 	.word	0x40020458
 8005234:	40020470 	.word	0x40020470
 8005238:	40020488 	.word	0x40020488
 800523c:	400204a0 	.word	0x400204a0
 8005240:	400204b8 	.word	0x400204b8
 8005244:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d008      	beq.n	8005264 <HAL_UART_IRQHandler+0x544>
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d003      	beq.n	8005264 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f001 fb17 	bl	8006890 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005262:	e014      	b.n	800528e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00f      	beq.n	800528e <HAL_UART_IRQHandler+0x56e>
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	2b00      	cmp	r3, #0
 8005272:	da0c      	bge.n	800528e <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f001 fb01 	bl	800687c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800527a:	e008      	b.n	800528e <HAL_UART_IRQHandler+0x56e>
      return;
 800527c:	bf00      	nop
 800527e:	e006      	b.n	800528e <HAL_UART_IRQHandler+0x56e>
    return;
 8005280:	bf00      	nop
 8005282:	e004      	b.n	800528e <HAL_UART_IRQHandler+0x56e>
      return;
 8005284:	bf00      	nop
 8005286:	e002      	b.n	800528e <HAL_UART_IRQHandler+0x56e>
      return;
 8005288:	bf00      	nop
 800528a:	e000      	b.n	800528e <HAL_UART_IRQHandler+0x56e>
    return;
 800528c:	bf00      	nop
  }
}
 800528e:	3720      	adds	r7, #32
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	460b      	mov	r3, r1
 80052c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052d4:	b5b0      	push	{r4, r5, r7, lr}
 80052d6:	b08e      	sub	sp, #56	; 0x38
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052dc:	2300      	movs	r3, #0
 80052de:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	689a      	ldr	r2, [r3, #8]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	431a      	orrs	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	695b      	ldr	r3, [r3, #20]
 80052f0:	431a      	orrs	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	69db      	ldr	r3, [r3, #28]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	4bbf      	ldr	r3, [pc, #764]	; (8005600 <UART_SetConfig+0x32c>)
 8005302:	4013      	ands	r3, r2
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	6812      	ldr	r2, [r2, #0]
 8005308:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800530a:	430b      	orrs	r3, r1
 800530c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	68da      	ldr	r2, [r3, #12]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	430a      	orrs	r2, r1
 8005322:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4ab5      	ldr	r2, [pc, #724]	; (8005604 <UART_SetConfig+0x330>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d004      	beq.n	800533e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a1b      	ldr	r3, [r3, #32]
 8005338:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800533a:	4313      	orrs	r3, r2
 800533c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	689a      	ldr	r2, [r3, #8]
 8005344:	4bb0      	ldr	r3, [pc, #704]	; (8005608 <UART_SetConfig+0x334>)
 8005346:	4013      	ands	r3, r2
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	6812      	ldr	r2, [r2, #0]
 800534c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800534e:	430b      	orrs	r3, r1
 8005350:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005358:	f023 010f 	bic.w	r1, r3, #15
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	430a      	orrs	r2, r1
 8005366:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4aa7      	ldr	r2, [pc, #668]	; (800560c <UART_SetConfig+0x338>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d176      	bne.n	8005460 <UART_SetConfig+0x18c>
 8005372:	4ba7      	ldr	r3, [pc, #668]	; (8005610 <UART_SetConfig+0x33c>)
 8005374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005376:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800537a:	2b28      	cmp	r3, #40	; 0x28
 800537c:	d86c      	bhi.n	8005458 <UART_SetConfig+0x184>
 800537e:	a201      	add	r2, pc, #4	; (adr r2, 8005384 <UART_SetConfig+0xb0>)
 8005380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005384:	08005429 	.word	0x08005429
 8005388:	08005459 	.word	0x08005459
 800538c:	08005459 	.word	0x08005459
 8005390:	08005459 	.word	0x08005459
 8005394:	08005459 	.word	0x08005459
 8005398:	08005459 	.word	0x08005459
 800539c:	08005459 	.word	0x08005459
 80053a0:	08005459 	.word	0x08005459
 80053a4:	08005431 	.word	0x08005431
 80053a8:	08005459 	.word	0x08005459
 80053ac:	08005459 	.word	0x08005459
 80053b0:	08005459 	.word	0x08005459
 80053b4:	08005459 	.word	0x08005459
 80053b8:	08005459 	.word	0x08005459
 80053bc:	08005459 	.word	0x08005459
 80053c0:	08005459 	.word	0x08005459
 80053c4:	08005439 	.word	0x08005439
 80053c8:	08005459 	.word	0x08005459
 80053cc:	08005459 	.word	0x08005459
 80053d0:	08005459 	.word	0x08005459
 80053d4:	08005459 	.word	0x08005459
 80053d8:	08005459 	.word	0x08005459
 80053dc:	08005459 	.word	0x08005459
 80053e0:	08005459 	.word	0x08005459
 80053e4:	08005441 	.word	0x08005441
 80053e8:	08005459 	.word	0x08005459
 80053ec:	08005459 	.word	0x08005459
 80053f0:	08005459 	.word	0x08005459
 80053f4:	08005459 	.word	0x08005459
 80053f8:	08005459 	.word	0x08005459
 80053fc:	08005459 	.word	0x08005459
 8005400:	08005459 	.word	0x08005459
 8005404:	08005449 	.word	0x08005449
 8005408:	08005459 	.word	0x08005459
 800540c:	08005459 	.word	0x08005459
 8005410:	08005459 	.word	0x08005459
 8005414:	08005459 	.word	0x08005459
 8005418:	08005459 	.word	0x08005459
 800541c:	08005459 	.word	0x08005459
 8005420:	08005459 	.word	0x08005459
 8005424:	08005451 	.word	0x08005451
 8005428:	2301      	movs	r3, #1
 800542a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800542e:	e222      	b.n	8005876 <UART_SetConfig+0x5a2>
 8005430:	2304      	movs	r3, #4
 8005432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005436:	e21e      	b.n	8005876 <UART_SetConfig+0x5a2>
 8005438:	2308      	movs	r3, #8
 800543a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800543e:	e21a      	b.n	8005876 <UART_SetConfig+0x5a2>
 8005440:	2310      	movs	r3, #16
 8005442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005446:	e216      	b.n	8005876 <UART_SetConfig+0x5a2>
 8005448:	2320      	movs	r3, #32
 800544a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800544e:	e212      	b.n	8005876 <UART_SetConfig+0x5a2>
 8005450:	2340      	movs	r3, #64	; 0x40
 8005452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005456:	e20e      	b.n	8005876 <UART_SetConfig+0x5a2>
 8005458:	2380      	movs	r3, #128	; 0x80
 800545a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800545e:	e20a      	b.n	8005876 <UART_SetConfig+0x5a2>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a6b      	ldr	r2, [pc, #428]	; (8005614 <UART_SetConfig+0x340>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d130      	bne.n	80054cc <UART_SetConfig+0x1f8>
 800546a:	4b69      	ldr	r3, [pc, #420]	; (8005610 <UART_SetConfig+0x33c>)
 800546c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800546e:	f003 0307 	and.w	r3, r3, #7
 8005472:	2b05      	cmp	r3, #5
 8005474:	d826      	bhi.n	80054c4 <UART_SetConfig+0x1f0>
 8005476:	a201      	add	r2, pc, #4	; (adr r2, 800547c <UART_SetConfig+0x1a8>)
 8005478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800547c:	08005495 	.word	0x08005495
 8005480:	0800549d 	.word	0x0800549d
 8005484:	080054a5 	.word	0x080054a5
 8005488:	080054ad 	.word	0x080054ad
 800548c:	080054b5 	.word	0x080054b5
 8005490:	080054bd 	.word	0x080054bd
 8005494:	2300      	movs	r3, #0
 8005496:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800549a:	e1ec      	b.n	8005876 <UART_SetConfig+0x5a2>
 800549c:	2304      	movs	r3, #4
 800549e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054a2:	e1e8      	b.n	8005876 <UART_SetConfig+0x5a2>
 80054a4:	2308      	movs	r3, #8
 80054a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054aa:	e1e4      	b.n	8005876 <UART_SetConfig+0x5a2>
 80054ac:	2310      	movs	r3, #16
 80054ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054b2:	e1e0      	b.n	8005876 <UART_SetConfig+0x5a2>
 80054b4:	2320      	movs	r3, #32
 80054b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054ba:	e1dc      	b.n	8005876 <UART_SetConfig+0x5a2>
 80054bc:	2340      	movs	r3, #64	; 0x40
 80054be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054c2:	e1d8      	b.n	8005876 <UART_SetConfig+0x5a2>
 80054c4:	2380      	movs	r3, #128	; 0x80
 80054c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054ca:	e1d4      	b.n	8005876 <UART_SetConfig+0x5a2>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a51      	ldr	r2, [pc, #324]	; (8005618 <UART_SetConfig+0x344>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d130      	bne.n	8005538 <UART_SetConfig+0x264>
 80054d6:	4b4e      	ldr	r3, [pc, #312]	; (8005610 <UART_SetConfig+0x33c>)
 80054d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054da:	f003 0307 	and.w	r3, r3, #7
 80054de:	2b05      	cmp	r3, #5
 80054e0:	d826      	bhi.n	8005530 <UART_SetConfig+0x25c>
 80054e2:	a201      	add	r2, pc, #4	; (adr r2, 80054e8 <UART_SetConfig+0x214>)
 80054e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e8:	08005501 	.word	0x08005501
 80054ec:	08005509 	.word	0x08005509
 80054f0:	08005511 	.word	0x08005511
 80054f4:	08005519 	.word	0x08005519
 80054f8:	08005521 	.word	0x08005521
 80054fc:	08005529 	.word	0x08005529
 8005500:	2300      	movs	r3, #0
 8005502:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005506:	e1b6      	b.n	8005876 <UART_SetConfig+0x5a2>
 8005508:	2304      	movs	r3, #4
 800550a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800550e:	e1b2      	b.n	8005876 <UART_SetConfig+0x5a2>
 8005510:	2308      	movs	r3, #8
 8005512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005516:	e1ae      	b.n	8005876 <UART_SetConfig+0x5a2>
 8005518:	2310      	movs	r3, #16
 800551a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800551e:	e1aa      	b.n	8005876 <UART_SetConfig+0x5a2>
 8005520:	2320      	movs	r3, #32
 8005522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005526:	e1a6      	b.n	8005876 <UART_SetConfig+0x5a2>
 8005528:	2340      	movs	r3, #64	; 0x40
 800552a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800552e:	e1a2      	b.n	8005876 <UART_SetConfig+0x5a2>
 8005530:	2380      	movs	r3, #128	; 0x80
 8005532:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005536:	e19e      	b.n	8005876 <UART_SetConfig+0x5a2>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a37      	ldr	r2, [pc, #220]	; (800561c <UART_SetConfig+0x348>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d130      	bne.n	80055a4 <UART_SetConfig+0x2d0>
 8005542:	4b33      	ldr	r3, [pc, #204]	; (8005610 <UART_SetConfig+0x33c>)
 8005544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005546:	f003 0307 	and.w	r3, r3, #7
 800554a:	2b05      	cmp	r3, #5
 800554c:	d826      	bhi.n	800559c <UART_SetConfig+0x2c8>
 800554e:	a201      	add	r2, pc, #4	; (adr r2, 8005554 <UART_SetConfig+0x280>)
 8005550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005554:	0800556d 	.word	0x0800556d
 8005558:	08005575 	.word	0x08005575
 800555c:	0800557d 	.word	0x0800557d
 8005560:	08005585 	.word	0x08005585
 8005564:	0800558d 	.word	0x0800558d
 8005568:	08005595 	.word	0x08005595
 800556c:	2300      	movs	r3, #0
 800556e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005572:	e180      	b.n	8005876 <UART_SetConfig+0x5a2>
 8005574:	2304      	movs	r3, #4
 8005576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800557a:	e17c      	b.n	8005876 <UART_SetConfig+0x5a2>
 800557c:	2308      	movs	r3, #8
 800557e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005582:	e178      	b.n	8005876 <UART_SetConfig+0x5a2>
 8005584:	2310      	movs	r3, #16
 8005586:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800558a:	e174      	b.n	8005876 <UART_SetConfig+0x5a2>
 800558c:	2320      	movs	r3, #32
 800558e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005592:	e170      	b.n	8005876 <UART_SetConfig+0x5a2>
 8005594:	2340      	movs	r3, #64	; 0x40
 8005596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800559a:	e16c      	b.n	8005876 <UART_SetConfig+0x5a2>
 800559c:	2380      	movs	r3, #128	; 0x80
 800559e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055a2:	e168      	b.n	8005876 <UART_SetConfig+0x5a2>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a1d      	ldr	r2, [pc, #116]	; (8005620 <UART_SetConfig+0x34c>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d142      	bne.n	8005634 <UART_SetConfig+0x360>
 80055ae:	4b18      	ldr	r3, [pc, #96]	; (8005610 <UART_SetConfig+0x33c>)
 80055b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b2:	f003 0307 	and.w	r3, r3, #7
 80055b6:	2b05      	cmp	r3, #5
 80055b8:	d838      	bhi.n	800562c <UART_SetConfig+0x358>
 80055ba:	a201      	add	r2, pc, #4	; (adr r2, 80055c0 <UART_SetConfig+0x2ec>)
 80055bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c0:	080055d9 	.word	0x080055d9
 80055c4:	080055e1 	.word	0x080055e1
 80055c8:	080055e9 	.word	0x080055e9
 80055cc:	080055f1 	.word	0x080055f1
 80055d0:	080055f9 	.word	0x080055f9
 80055d4:	08005625 	.word	0x08005625
 80055d8:	2300      	movs	r3, #0
 80055da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055de:	e14a      	b.n	8005876 <UART_SetConfig+0x5a2>
 80055e0:	2304      	movs	r3, #4
 80055e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055e6:	e146      	b.n	8005876 <UART_SetConfig+0x5a2>
 80055e8:	2308      	movs	r3, #8
 80055ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055ee:	e142      	b.n	8005876 <UART_SetConfig+0x5a2>
 80055f0:	2310      	movs	r3, #16
 80055f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055f6:	e13e      	b.n	8005876 <UART_SetConfig+0x5a2>
 80055f8:	2320      	movs	r3, #32
 80055fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055fe:	e13a      	b.n	8005876 <UART_SetConfig+0x5a2>
 8005600:	cfff69f3 	.word	0xcfff69f3
 8005604:	58000c00 	.word	0x58000c00
 8005608:	11fff4ff 	.word	0x11fff4ff
 800560c:	40011000 	.word	0x40011000
 8005610:	58024400 	.word	0x58024400
 8005614:	40004400 	.word	0x40004400
 8005618:	40004800 	.word	0x40004800
 800561c:	40004c00 	.word	0x40004c00
 8005620:	40005000 	.word	0x40005000
 8005624:	2340      	movs	r3, #64	; 0x40
 8005626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800562a:	e124      	b.n	8005876 <UART_SetConfig+0x5a2>
 800562c:	2380      	movs	r3, #128	; 0x80
 800562e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005632:	e120      	b.n	8005876 <UART_SetConfig+0x5a2>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4acc      	ldr	r2, [pc, #816]	; (800596c <UART_SetConfig+0x698>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d176      	bne.n	800572c <UART_SetConfig+0x458>
 800563e:	4bcc      	ldr	r3, [pc, #816]	; (8005970 <UART_SetConfig+0x69c>)
 8005640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005642:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005646:	2b28      	cmp	r3, #40	; 0x28
 8005648:	d86c      	bhi.n	8005724 <UART_SetConfig+0x450>
 800564a:	a201      	add	r2, pc, #4	; (adr r2, 8005650 <UART_SetConfig+0x37c>)
 800564c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005650:	080056f5 	.word	0x080056f5
 8005654:	08005725 	.word	0x08005725
 8005658:	08005725 	.word	0x08005725
 800565c:	08005725 	.word	0x08005725
 8005660:	08005725 	.word	0x08005725
 8005664:	08005725 	.word	0x08005725
 8005668:	08005725 	.word	0x08005725
 800566c:	08005725 	.word	0x08005725
 8005670:	080056fd 	.word	0x080056fd
 8005674:	08005725 	.word	0x08005725
 8005678:	08005725 	.word	0x08005725
 800567c:	08005725 	.word	0x08005725
 8005680:	08005725 	.word	0x08005725
 8005684:	08005725 	.word	0x08005725
 8005688:	08005725 	.word	0x08005725
 800568c:	08005725 	.word	0x08005725
 8005690:	08005705 	.word	0x08005705
 8005694:	08005725 	.word	0x08005725
 8005698:	08005725 	.word	0x08005725
 800569c:	08005725 	.word	0x08005725
 80056a0:	08005725 	.word	0x08005725
 80056a4:	08005725 	.word	0x08005725
 80056a8:	08005725 	.word	0x08005725
 80056ac:	08005725 	.word	0x08005725
 80056b0:	0800570d 	.word	0x0800570d
 80056b4:	08005725 	.word	0x08005725
 80056b8:	08005725 	.word	0x08005725
 80056bc:	08005725 	.word	0x08005725
 80056c0:	08005725 	.word	0x08005725
 80056c4:	08005725 	.word	0x08005725
 80056c8:	08005725 	.word	0x08005725
 80056cc:	08005725 	.word	0x08005725
 80056d0:	08005715 	.word	0x08005715
 80056d4:	08005725 	.word	0x08005725
 80056d8:	08005725 	.word	0x08005725
 80056dc:	08005725 	.word	0x08005725
 80056e0:	08005725 	.word	0x08005725
 80056e4:	08005725 	.word	0x08005725
 80056e8:	08005725 	.word	0x08005725
 80056ec:	08005725 	.word	0x08005725
 80056f0:	0800571d 	.word	0x0800571d
 80056f4:	2301      	movs	r3, #1
 80056f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056fa:	e0bc      	b.n	8005876 <UART_SetConfig+0x5a2>
 80056fc:	2304      	movs	r3, #4
 80056fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005702:	e0b8      	b.n	8005876 <UART_SetConfig+0x5a2>
 8005704:	2308      	movs	r3, #8
 8005706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800570a:	e0b4      	b.n	8005876 <UART_SetConfig+0x5a2>
 800570c:	2310      	movs	r3, #16
 800570e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005712:	e0b0      	b.n	8005876 <UART_SetConfig+0x5a2>
 8005714:	2320      	movs	r3, #32
 8005716:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800571a:	e0ac      	b.n	8005876 <UART_SetConfig+0x5a2>
 800571c:	2340      	movs	r3, #64	; 0x40
 800571e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005722:	e0a8      	b.n	8005876 <UART_SetConfig+0x5a2>
 8005724:	2380      	movs	r3, #128	; 0x80
 8005726:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800572a:	e0a4      	b.n	8005876 <UART_SetConfig+0x5a2>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a90      	ldr	r2, [pc, #576]	; (8005974 <UART_SetConfig+0x6a0>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d130      	bne.n	8005798 <UART_SetConfig+0x4c4>
 8005736:	4b8e      	ldr	r3, [pc, #568]	; (8005970 <UART_SetConfig+0x69c>)
 8005738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800573a:	f003 0307 	and.w	r3, r3, #7
 800573e:	2b05      	cmp	r3, #5
 8005740:	d826      	bhi.n	8005790 <UART_SetConfig+0x4bc>
 8005742:	a201      	add	r2, pc, #4	; (adr r2, 8005748 <UART_SetConfig+0x474>)
 8005744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005748:	08005761 	.word	0x08005761
 800574c:	08005769 	.word	0x08005769
 8005750:	08005771 	.word	0x08005771
 8005754:	08005779 	.word	0x08005779
 8005758:	08005781 	.word	0x08005781
 800575c:	08005789 	.word	0x08005789
 8005760:	2300      	movs	r3, #0
 8005762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005766:	e086      	b.n	8005876 <UART_SetConfig+0x5a2>
 8005768:	2304      	movs	r3, #4
 800576a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800576e:	e082      	b.n	8005876 <UART_SetConfig+0x5a2>
 8005770:	2308      	movs	r3, #8
 8005772:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005776:	e07e      	b.n	8005876 <UART_SetConfig+0x5a2>
 8005778:	2310      	movs	r3, #16
 800577a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800577e:	e07a      	b.n	8005876 <UART_SetConfig+0x5a2>
 8005780:	2320      	movs	r3, #32
 8005782:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005786:	e076      	b.n	8005876 <UART_SetConfig+0x5a2>
 8005788:	2340      	movs	r3, #64	; 0x40
 800578a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800578e:	e072      	b.n	8005876 <UART_SetConfig+0x5a2>
 8005790:	2380      	movs	r3, #128	; 0x80
 8005792:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005796:	e06e      	b.n	8005876 <UART_SetConfig+0x5a2>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a76      	ldr	r2, [pc, #472]	; (8005978 <UART_SetConfig+0x6a4>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d130      	bne.n	8005804 <UART_SetConfig+0x530>
 80057a2:	4b73      	ldr	r3, [pc, #460]	; (8005970 <UART_SetConfig+0x69c>)
 80057a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a6:	f003 0307 	and.w	r3, r3, #7
 80057aa:	2b05      	cmp	r3, #5
 80057ac:	d826      	bhi.n	80057fc <UART_SetConfig+0x528>
 80057ae:	a201      	add	r2, pc, #4	; (adr r2, 80057b4 <UART_SetConfig+0x4e0>)
 80057b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b4:	080057cd 	.word	0x080057cd
 80057b8:	080057d5 	.word	0x080057d5
 80057bc:	080057dd 	.word	0x080057dd
 80057c0:	080057e5 	.word	0x080057e5
 80057c4:	080057ed 	.word	0x080057ed
 80057c8:	080057f5 	.word	0x080057f5
 80057cc:	2300      	movs	r3, #0
 80057ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057d2:	e050      	b.n	8005876 <UART_SetConfig+0x5a2>
 80057d4:	2304      	movs	r3, #4
 80057d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057da:	e04c      	b.n	8005876 <UART_SetConfig+0x5a2>
 80057dc:	2308      	movs	r3, #8
 80057de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057e2:	e048      	b.n	8005876 <UART_SetConfig+0x5a2>
 80057e4:	2310      	movs	r3, #16
 80057e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057ea:	e044      	b.n	8005876 <UART_SetConfig+0x5a2>
 80057ec:	2320      	movs	r3, #32
 80057ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057f2:	e040      	b.n	8005876 <UART_SetConfig+0x5a2>
 80057f4:	2340      	movs	r3, #64	; 0x40
 80057f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057fa:	e03c      	b.n	8005876 <UART_SetConfig+0x5a2>
 80057fc:	2380      	movs	r3, #128	; 0x80
 80057fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005802:	e038      	b.n	8005876 <UART_SetConfig+0x5a2>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a5c      	ldr	r2, [pc, #368]	; (800597c <UART_SetConfig+0x6a8>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d130      	bne.n	8005870 <UART_SetConfig+0x59c>
 800580e:	4b58      	ldr	r3, [pc, #352]	; (8005970 <UART_SetConfig+0x69c>)
 8005810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005812:	f003 0307 	and.w	r3, r3, #7
 8005816:	2b05      	cmp	r3, #5
 8005818:	d826      	bhi.n	8005868 <UART_SetConfig+0x594>
 800581a:	a201      	add	r2, pc, #4	; (adr r2, 8005820 <UART_SetConfig+0x54c>)
 800581c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005820:	08005839 	.word	0x08005839
 8005824:	08005841 	.word	0x08005841
 8005828:	08005849 	.word	0x08005849
 800582c:	08005851 	.word	0x08005851
 8005830:	08005859 	.word	0x08005859
 8005834:	08005861 	.word	0x08005861
 8005838:	2302      	movs	r3, #2
 800583a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800583e:	e01a      	b.n	8005876 <UART_SetConfig+0x5a2>
 8005840:	2304      	movs	r3, #4
 8005842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005846:	e016      	b.n	8005876 <UART_SetConfig+0x5a2>
 8005848:	2308      	movs	r3, #8
 800584a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800584e:	e012      	b.n	8005876 <UART_SetConfig+0x5a2>
 8005850:	2310      	movs	r3, #16
 8005852:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005856:	e00e      	b.n	8005876 <UART_SetConfig+0x5a2>
 8005858:	2320      	movs	r3, #32
 800585a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800585e:	e00a      	b.n	8005876 <UART_SetConfig+0x5a2>
 8005860:	2340      	movs	r3, #64	; 0x40
 8005862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005866:	e006      	b.n	8005876 <UART_SetConfig+0x5a2>
 8005868:	2380      	movs	r3, #128	; 0x80
 800586a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800586e:	e002      	b.n	8005876 <UART_SetConfig+0x5a2>
 8005870:	2380      	movs	r3, #128	; 0x80
 8005872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a40      	ldr	r2, [pc, #256]	; (800597c <UART_SetConfig+0x6a8>)
 800587c:	4293      	cmp	r3, r2
 800587e:	f040 80ef 	bne.w	8005a60 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005882:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005886:	2b20      	cmp	r3, #32
 8005888:	dc46      	bgt.n	8005918 <UART_SetConfig+0x644>
 800588a:	2b02      	cmp	r3, #2
 800588c:	f2c0 8081 	blt.w	8005992 <UART_SetConfig+0x6be>
 8005890:	3b02      	subs	r3, #2
 8005892:	2b1e      	cmp	r3, #30
 8005894:	d87d      	bhi.n	8005992 <UART_SetConfig+0x6be>
 8005896:	a201      	add	r2, pc, #4	; (adr r2, 800589c <UART_SetConfig+0x5c8>)
 8005898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800589c:	0800591f 	.word	0x0800591f
 80058a0:	08005993 	.word	0x08005993
 80058a4:	08005927 	.word	0x08005927
 80058a8:	08005993 	.word	0x08005993
 80058ac:	08005993 	.word	0x08005993
 80058b0:	08005993 	.word	0x08005993
 80058b4:	08005937 	.word	0x08005937
 80058b8:	08005993 	.word	0x08005993
 80058bc:	08005993 	.word	0x08005993
 80058c0:	08005993 	.word	0x08005993
 80058c4:	08005993 	.word	0x08005993
 80058c8:	08005993 	.word	0x08005993
 80058cc:	08005993 	.word	0x08005993
 80058d0:	08005993 	.word	0x08005993
 80058d4:	08005947 	.word	0x08005947
 80058d8:	08005993 	.word	0x08005993
 80058dc:	08005993 	.word	0x08005993
 80058e0:	08005993 	.word	0x08005993
 80058e4:	08005993 	.word	0x08005993
 80058e8:	08005993 	.word	0x08005993
 80058ec:	08005993 	.word	0x08005993
 80058f0:	08005993 	.word	0x08005993
 80058f4:	08005993 	.word	0x08005993
 80058f8:	08005993 	.word	0x08005993
 80058fc:	08005993 	.word	0x08005993
 8005900:	08005993 	.word	0x08005993
 8005904:	08005993 	.word	0x08005993
 8005908:	08005993 	.word	0x08005993
 800590c:	08005993 	.word	0x08005993
 8005910:	08005993 	.word	0x08005993
 8005914:	08005985 	.word	0x08005985
 8005918:	2b40      	cmp	r3, #64	; 0x40
 800591a:	d036      	beq.n	800598a <UART_SetConfig+0x6b6>
 800591c:	e039      	b.n	8005992 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800591e:	f7fe fcb1 	bl	8004284 <HAL_RCCEx_GetD3PCLK1Freq>
 8005922:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005924:	e03b      	b.n	800599e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005926:	f107 0314 	add.w	r3, r7, #20
 800592a:	4618      	mov	r0, r3
 800592c:	f7fe fcc0 	bl	80042b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005934:	e033      	b.n	800599e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005936:	f107 0308 	add.w	r3, r7, #8
 800593a:	4618      	mov	r0, r3
 800593c:	f7fe fe0c 	bl	8004558 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005944:	e02b      	b.n	800599e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005946:	4b0a      	ldr	r3, [pc, #40]	; (8005970 <UART_SetConfig+0x69c>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0320 	and.w	r3, r3, #32
 800594e:	2b00      	cmp	r3, #0
 8005950:	d009      	beq.n	8005966 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005952:	4b07      	ldr	r3, [pc, #28]	; (8005970 <UART_SetConfig+0x69c>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	08db      	lsrs	r3, r3, #3
 8005958:	f003 0303 	and.w	r3, r3, #3
 800595c:	4a08      	ldr	r2, [pc, #32]	; (8005980 <UART_SetConfig+0x6ac>)
 800595e:	fa22 f303 	lsr.w	r3, r2, r3
 8005962:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005964:	e01b      	b.n	800599e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8005966:	4b06      	ldr	r3, [pc, #24]	; (8005980 <UART_SetConfig+0x6ac>)
 8005968:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800596a:	e018      	b.n	800599e <UART_SetConfig+0x6ca>
 800596c:	40011400 	.word	0x40011400
 8005970:	58024400 	.word	0x58024400
 8005974:	40007800 	.word	0x40007800
 8005978:	40007c00 	.word	0x40007c00
 800597c:	58000c00 	.word	0x58000c00
 8005980:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005984:	4bc4      	ldr	r3, [pc, #784]	; (8005c98 <UART_SetConfig+0x9c4>)
 8005986:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005988:	e009      	b.n	800599e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800598a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800598e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005990:	e005      	b.n	800599e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8005992:	2300      	movs	r3, #0
 8005994:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800599c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800599e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f000 81da 	beq.w	8005d5a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059aa:	4abc      	ldr	r2, [pc, #752]	; (8005c9c <UART_SetConfig+0x9c8>)
 80059ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059b0:	461a      	mov	r2, r3
 80059b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80059b8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685a      	ldr	r2, [r3, #4]
 80059be:	4613      	mov	r3, r2
 80059c0:	005b      	lsls	r3, r3, #1
 80059c2:	4413      	add	r3, r2
 80059c4:	6a3a      	ldr	r2, [r7, #32]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d305      	bcc.n	80059d6 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059d0:	6a3a      	ldr	r2, [r7, #32]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d903      	bls.n	80059de <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80059dc:	e1bd      	b.n	8005d5a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e0:	4618      	mov	r0, r3
 80059e2:	f04f 0100 	mov.w	r1, #0
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ea:	4aac      	ldr	r2, [pc, #688]	; (8005c9c <UART_SetConfig+0x9c8>)
 80059ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	f04f 0300 	mov.w	r3, #0
 80059f6:	f7fa fccb 	bl	8000390 <__aeabi_uldivmod>
 80059fa:	4602      	mov	r2, r0
 80059fc:	460b      	mov	r3, r1
 80059fe:	4610      	mov	r0, r2
 8005a00:	4619      	mov	r1, r3
 8005a02:	f04f 0200 	mov.w	r2, #0
 8005a06:	f04f 0300 	mov.w	r3, #0
 8005a0a:	020b      	lsls	r3, r1, #8
 8005a0c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005a10:	0202      	lsls	r2, r0, #8
 8005a12:	6879      	ldr	r1, [r7, #4]
 8005a14:	6849      	ldr	r1, [r1, #4]
 8005a16:	0849      	lsrs	r1, r1, #1
 8005a18:	4608      	mov	r0, r1
 8005a1a:	f04f 0100 	mov.w	r1, #0
 8005a1e:	1814      	adds	r4, r2, r0
 8005a20:	eb43 0501 	adc.w	r5, r3, r1
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	461a      	mov	r2, r3
 8005a2a:	f04f 0300 	mov.w	r3, #0
 8005a2e:	4620      	mov	r0, r4
 8005a30:	4629      	mov	r1, r5
 8005a32:	f7fa fcad 	bl	8000390 <__aeabi_uldivmod>
 8005a36:	4602      	mov	r2, r0
 8005a38:	460b      	mov	r3, r1
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a44:	d308      	bcc.n	8005a58 <UART_SetConfig+0x784>
 8005a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a4c:	d204      	bcs.n	8005a58 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a54:	60da      	str	r2, [r3, #12]
 8005a56:	e180      	b.n	8005d5a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005a5e:	e17c      	b.n	8005d5a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	69db      	ldr	r3, [r3, #28]
 8005a64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a68:	f040 80bf 	bne.w	8005bea <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8005a6c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005a70:	2b20      	cmp	r3, #32
 8005a72:	dc49      	bgt.n	8005b08 <UART_SetConfig+0x834>
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	db7c      	blt.n	8005b72 <UART_SetConfig+0x89e>
 8005a78:	2b20      	cmp	r3, #32
 8005a7a:	d87a      	bhi.n	8005b72 <UART_SetConfig+0x89e>
 8005a7c:	a201      	add	r2, pc, #4	; (adr r2, 8005a84 <UART_SetConfig+0x7b0>)
 8005a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a82:	bf00      	nop
 8005a84:	08005b0f 	.word	0x08005b0f
 8005a88:	08005b17 	.word	0x08005b17
 8005a8c:	08005b73 	.word	0x08005b73
 8005a90:	08005b73 	.word	0x08005b73
 8005a94:	08005b1f 	.word	0x08005b1f
 8005a98:	08005b73 	.word	0x08005b73
 8005a9c:	08005b73 	.word	0x08005b73
 8005aa0:	08005b73 	.word	0x08005b73
 8005aa4:	08005b2f 	.word	0x08005b2f
 8005aa8:	08005b73 	.word	0x08005b73
 8005aac:	08005b73 	.word	0x08005b73
 8005ab0:	08005b73 	.word	0x08005b73
 8005ab4:	08005b73 	.word	0x08005b73
 8005ab8:	08005b73 	.word	0x08005b73
 8005abc:	08005b73 	.word	0x08005b73
 8005ac0:	08005b73 	.word	0x08005b73
 8005ac4:	08005b3f 	.word	0x08005b3f
 8005ac8:	08005b73 	.word	0x08005b73
 8005acc:	08005b73 	.word	0x08005b73
 8005ad0:	08005b73 	.word	0x08005b73
 8005ad4:	08005b73 	.word	0x08005b73
 8005ad8:	08005b73 	.word	0x08005b73
 8005adc:	08005b73 	.word	0x08005b73
 8005ae0:	08005b73 	.word	0x08005b73
 8005ae4:	08005b73 	.word	0x08005b73
 8005ae8:	08005b73 	.word	0x08005b73
 8005aec:	08005b73 	.word	0x08005b73
 8005af0:	08005b73 	.word	0x08005b73
 8005af4:	08005b73 	.word	0x08005b73
 8005af8:	08005b73 	.word	0x08005b73
 8005afc:	08005b73 	.word	0x08005b73
 8005b00:	08005b73 	.word	0x08005b73
 8005b04:	08005b65 	.word	0x08005b65
 8005b08:	2b40      	cmp	r3, #64	; 0x40
 8005b0a:	d02e      	beq.n	8005b6a <UART_SetConfig+0x896>
 8005b0c:	e031      	b.n	8005b72 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b0e:	f7fd fc1d 	bl	800334c <HAL_RCC_GetPCLK1Freq>
 8005b12:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005b14:	e033      	b.n	8005b7e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b16:	f7fd fc2f 	bl	8003378 <HAL_RCC_GetPCLK2Freq>
 8005b1a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005b1c:	e02f      	b.n	8005b7e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b1e:	f107 0314 	add.w	r3, r7, #20
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7fe fbc4 	bl	80042b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b2c:	e027      	b.n	8005b7e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b2e:	f107 0308 	add.w	r3, r7, #8
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7fe fd10 	bl	8004558 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b3c:	e01f      	b.n	8005b7e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b3e:	4b58      	ldr	r3, [pc, #352]	; (8005ca0 <UART_SetConfig+0x9cc>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0320 	and.w	r3, r3, #32
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d009      	beq.n	8005b5e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005b4a:	4b55      	ldr	r3, [pc, #340]	; (8005ca0 <UART_SetConfig+0x9cc>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	08db      	lsrs	r3, r3, #3
 8005b50:	f003 0303 	and.w	r3, r3, #3
 8005b54:	4a53      	ldr	r2, [pc, #332]	; (8005ca4 <UART_SetConfig+0x9d0>)
 8005b56:	fa22 f303 	lsr.w	r3, r2, r3
 8005b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b5c:	e00f      	b.n	8005b7e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8005b5e:	4b51      	ldr	r3, [pc, #324]	; (8005ca4 <UART_SetConfig+0x9d0>)
 8005b60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b62:	e00c      	b.n	8005b7e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005b64:	4b4c      	ldr	r3, [pc, #304]	; (8005c98 <UART_SetConfig+0x9c4>)
 8005b66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b68:	e009      	b.n	8005b7e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b70:	e005      	b.n	8005b7e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8005b72:	2300      	movs	r3, #0
 8005b74:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005b7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f000 80ea 	beq.w	8005d5a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8a:	4a44      	ldr	r2, [pc, #272]	; (8005c9c <UART_SetConfig+0x9c8>)
 8005b8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b90:	461a      	mov	r2, r3
 8005b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b94:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b98:	005a      	lsls	r2, r3, #1
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	085b      	lsrs	r3, r3, #1
 8005ba0:	441a      	add	r2, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb0:	2b0f      	cmp	r3, #15
 8005bb2:	d916      	bls.n	8005be2 <UART_SetConfig+0x90e>
 8005bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bba:	d212      	bcs.n	8005be2 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	f023 030f 	bic.w	r3, r3, #15
 8005bc4:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc8:	085b      	lsrs	r3, r3, #1
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	f003 0307 	and.w	r3, r3, #7
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005bde:	60da      	str	r2, [r3, #12]
 8005be0:	e0bb      	b.n	8005d5a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005be8:	e0b7      	b.n	8005d5a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005bee:	2b20      	cmp	r3, #32
 8005bf0:	dc4a      	bgt.n	8005c88 <UART_SetConfig+0x9b4>
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	f2c0 8086 	blt.w	8005d04 <UART_SetConfig+0xa30>
 8005bf8:	2b20      	cmp	r3, #32
 8005bfa:	f200 8083 	bhi.w	8005d04 <UART_SetConfig+0xa30>
 8005bfe:	a201      	add	r2, pc, #4	; (adr r2, 8005c04 <UART_SetConfig+0x930>)
 8005c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c04:	08005c8f 	.word	0x08005c8f
 8005c08:	08005ca9 	.word	0x08005ca9
 8005c0c:	08005d05 	.word	0x08005d05
 8005c10:	08005d05 	.word	0x08005d05
 8005c14:	08005cb1 	.word	0x08005cb1
 8005c18:	08005d05 	.word	0x08005d05
 8005c1c:	08005d05 	.word	0x08005d05
 8005c20:	08005d05 	.word	0x08005d05
 8005c24:	08005cc1 	.word	0x08005cc1
 8005c28:	08005d05 	.word	0x08005d05
 8005c2c:	08005d05 	.word	0x08005d05
 8005c30:	08005d05 	.word	0x08005d05
 8005c34:	08005d05 	.word	0x08005d05
 8005c38:	08005d05 	.word	0x08005d05
 8005c3c:	08005d05 	.word	0x08005d05
 8005c40:	08005d05 	.word	0x08005d05
 8005c44:	08005cd1 	.word	0x08005cd1
 8005c48:	08005d05 	.word	0x08005d05
 8005c4c:	08005d05 	.word	0x08005d05
 8005c50:	08005d05 	.word	0x08005d05
 8005c54:	08005d05 	.word	0x08005d05
 8005c58:	08005d05 	.word	0x08005d05
 8005c5c:	08005d05 	.word	0x08005d05
 8005c60:	08005d05 	.word	0x08005d05
 8005c64:	08005d05 	.word	0x08005d05
 8005c68:	08005d05 	.word	0x08005d05
 8005c6c:	08005d05 	.word	0x08005d05
 8005c70:	08005d05 	.word	0x08005d05
 8005c74:	08005d05 	.word	0x08005d05
 8005c78:	08005d05 	.word	0x08005d05
 8005c7c:	08005d05 	.word	0x08005d05
 8005c80:	08005d05 	.word	0x08005d05
 8005c84:	08005cf7 	.word	0x08005cf7
 8005c88:	2b40      	cmp	r3, #64	; 0x40
 8005c8a:	d037      	beq.n	8005cfc <UART_SetConfig+0xa28>
 8005c8c:	e03a      	b.n	8005d04 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c8e:	f7fd fb5d 	bl	800334c <HAL_RCC_GetPCLK1Freq>
 8005c92:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005c94:	e03c      	b.n	8005d10 <UART_SetConfig+0xa3c>
 8005c96:	bf00      	nop
 8005c98:	003d0900 	.word	0x003d0900
 8005c9c:	080080b0 	.word	0x080080b0
 8005ca0:	58024400 	.word	0x58024400
 8005ca4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ca8:	f7fd fb66 	bl	8003378 <HAL_RCC_GetPCLK2Freq>
 8005cac:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005cae:	e02f      	b.n	8005d10 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005cb0:	f107 0314 	add.w	r3, r7, #20
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7fe fafb 	bl	80042b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005cbe:	e027      	b.n	8005d10 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cc0:	f107 0308 	add.w	r3, r7, #8
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f7fe fc47 	bl	8004558 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005cce:	e01f      	b.n	8005d10 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cd0:	4b2c      	ldr	r3, [pc, #176]	; (8005d84 <UART_SetConfig+0xab0>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0320 	and.w	r3, r3, #32
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d009      	beq.n	8005cf0 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005cdc:	4b29      	ldr	r3, [pc, #164]	; (8005d84 <UART_SetConfig+0xab0>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	08db      	lsrs	r3, r3, #3
 8005ce2:	f003 0303 	and.w	r3, r3, #3
 8005ce6:	4a28      	ldr	r2, [pc, #160]	; (8005d88 <UART_SetConfig+0xab4>)
 8005ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8005cec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005cee:	e00f      	b.n	8005d10 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8005cf0:	4b25      	ldr	r3, [pc, #148]	; (8005d88 <UART_SetConfig+0xab4>)
 8005cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005cf4:	e00c      	b.n	8005d10 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005cf6:	4b25      	ldr	r3, [pc, #148]	; (8005d8c <UART_SetConfig+0xab8>)
 8005cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005cfa:	e009      	b.n	8005d10 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d02:	e005      	b.n	8005d10 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8005d04:	2300      	movs	r3, #0
 8005d06:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005d0e:	bf00      	nop
    }

    if (pclk != 0U)
 8005d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d021      	beq.n	8005d5a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1a:	4a1d      	ldr	r2, [pc, #116]	; (8005d90 <UART_SetConfig+0xabc>)
 8005d1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d20:	461a      	mov	r2, r3
 8005d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d24:	fbb3 f2f2 	udiv	r2, r3, r2
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	085b      	lsrs	r3, r3, #1
 8005d2e:	441a      	add	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d3e:	2b0f      	cmp	r3, #15
 8005d40:	d908      	bls.n	8005d54 <UART_SetConfig+0xa80>
 8005d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d48:	d204      	bcs.n	8005d54 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d50:	60da      	str	r2, [r3, #12]
 8005d52:	e002      	b.n	8005d5a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005d76:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3738      	adds	r7, #56	; 0x38
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bdb0      	pop	{r4, r5, r7, pc}
 8005d82:	bf00      	nop
 8005d84:	58024400 	.word	0x58024400
 8005d88:	03d09000 	.word	0x03d09000
 8005d8c:	003d0900 	.word	0x003d0900
 8005d90:	080080b0 	.word	0x080080b0

08005d94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da0:	f003 0301 	and.w	r3, r3, #1
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d00a      	beq.n	8005dbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	430a      	orrs	r2, r1
 8005dbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc2:	f003 0302 	and.w	r3, r3, #2
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00a      	beq.n	8005de0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	430a      	orrs	r2, r1
 8005dde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de4:	f003 0304 	and.w	r3, r3, #4
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00a      	beq.n	8005e02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	430a      	orrs	r2, r1
 8005e00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e06:	f003 0308 	and.w	r3, r3, #8
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00a      	beq.n	8005e24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	430a      	orrs	r2, r1
 8005e22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e28:	f003 0310 	and.w	r3, r3, #16
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00a      	beq.n	8005e46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	430a      	orrs	r2, r1
 8005e44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e4a:	f003 0320 	and.w	r3, r3, #32
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00a      	beq.n	8005e68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	430a      	orrs	r2, r1
 8005e66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d01a      	beq.n	8005eaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	430a      	orrs	r2, r1
 8005e88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e92:	d10a      	bne.n	8005eaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00a      	beq.n	8005ecc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	430a      	orrs	r2, r1
 8005eca:	605a      	str	r2, [r3, #4]
  }
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b086      	sub	sp, #24
 8005edc:	af02      	add	r7, sp, #8
 8005ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ee8:	f7fb f9e4 	bl	80012b4 <HAL_GetTick>
 8005eec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0308 	and.w	r3, r3, #8
 8005ef8:	2b08      	cmp	r3, #8
 8005efa:	d10e      	bne.n	8005f1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005efc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f00:	9300      	str	r3, [sp, #0]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 f82f 	bl	8005f6e <UART_WaitOnFlagUntilTimeout>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d001      	beq.n	8005f1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e025      	b.n	8005f66 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0304 	and.w	r3, r3, #4
 8005f24:	2b04      	cmp	r3, #4
 8005f26:	d10e      	bne.n	8005f46 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f2c:	9300      	str	r3, [sp, #0]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f819 	bl	8005f6e <UART_WaitOnFlagUntilTimeout>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d001      	beq.n	8005f46 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e00f      	b.n	8005f66 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2220      	movs	r2, #32
 8005f4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2220      	movs	r2, #32
 8005f52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3710      	adds	r7, #16
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b084      	sub	sp, #16
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	60f8      	str	r0, [r7, #12]
 8005f76:	60b9      	str	r1, [r7, #8]
 8005f78:	603b      	str	r3, [r7, #0]
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f7e:	e062      	b.n	8006046 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f86:	d05e      	beq.n	8006046 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f88:	f7fb f994 	bl	80012b4 <HAL_GetTick>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	69ba      	ldr	r2, [r7, #24]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d302      	bcc.n	8005f9e <UART_WaitOnFlagUntilTimeout+0x30>
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d11d      	bne.n	8005fda <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005fac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	689a      	ldr	r2, [r3, #8]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f022 0201 	bic.w	r2, r2, #1
 8005fbc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2220      	movs	r2, #32
 8005fc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2220      	movs	r2, #32
 8005fca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e045      	b.n	8006066 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 0304 	and.w	r3, r3, #4
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d02e      	beq.n	8006046 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	69db      	ldr	r3, [r3, #28]
 8005fee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ff2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ff6:	d126      	bne.n	8006046 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006000:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006010:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	689a      	ldr	r2, [r3, #8]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f022 0201 	bic.w	r2, r2, #1
 8006020:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2220      	movs	r2, #32
 8006026:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2220      	movs	r2, #32
 800602e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2220      	movs	r2, #32
 8006036:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e00f      	b.n	8006066 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	69da      	ldr	r2, [r3, #28]
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	4013      	ands	r3, r2
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	429a      	cmp	r2, r3
 8006054:	bf0c      	ite	eq
 8006056:	2301      	moveq	r3, #1
 8006058:	2300      	movne	r3, #0
 800605a:	b2db      	uxtb	r3, r3
 800605c:	461a      	mov	r2, r3
 800605e:	79fb      	ldrb	r3, [r7, #7]
 8006060:	429a      	cmp	r2, r3
 8006062:	d08d      	beq.n	8005f80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3710      	adds	r7, #16
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
	...

08006070 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006070:	b480      	push	{r7}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	4613      	mov	r3, r2
 800607c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	68ba      	ldr	r2, [r7, #8]
 8006082:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	88fa      	ldrh	r2, [r7, #6]
 8006088:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	88fa      	ldrh	r2, [r7, #6]
 8006090:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2200      	movs	r2, #0
 8006098:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060a2:	d10e      	bne.n	80060c2 <UART_Start_Receive_IT+0x52>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d105      	bne.n	80060b8 <UART_Start_Receive_IT+0x48>
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f240 12ff 	movw	r2, #511	; 0x1ff
 80060b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80060b6:	e02d      	b.n	8006114 <UART_Start_Receive_IT+0xa4>
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	22ff      	movs	r2, #255	; 0xff
 80060bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80060c0:	e028      	b.n	8006114 <UART_Start_Receive_IT+0xa4>
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d10d      	bne.n	80060e6 <UART_Start_Receive_IT+0x76>
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d104      	bne.n	80060dc <UART_Start_Receive_IT+0x6c>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	22ff      	movs	r2, #255	; 0xff
 80060d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80060da:	e01b      	b.n	8006114 <UART_Start_Receive_IT+0xa4>
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	227f      	movs	r2, #127	; 0x7f
 80060e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80060e4:	e016      	b.n	8006114 <UART_Start_Receive_IT+0xa4>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060ee:	d10d      	bne.n	800610c <UART_Start_Receive_IT+0x9c>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d104      	bne.n	8006102 <UART_Start_Receive_IT+0x92>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	227f      	movs	r2, #127	; 0x7f
 80060fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006100:	e008      	b.n	8006114 <UART_Start_Receive_IT+0xa4>
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	223f      	movs	r2, #63	; 0x3f
 8006106:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800610a:	e003      	b.n	8006114 <UART_Start_Receive_IT+0xa4>
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2200      	movs	r2, #0
 8006110:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2222      	movs	r2, #34	; 0x22
 8006120:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	689a      	ldr	r2, [r3, #8]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f042 0201 	orr.w	r2, r2, #1
 8006132:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006138:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800613c:	d12a      	bne.n	8006194 <UART_Start_Receive_IT+0x124>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006144:	88fa      	ldrh	r2, [r7, #6]
 8006146:	429a      	cmp	r2, r3
 8006148:	d324      	bcc.n	8006194 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006152:	d107      	bne.n	8006164 <UART_Start_Receive_IT+0xf4>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d103      	bne.n	8006164 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	4a1f      	ldr	r2, [pc, #124]	; (80061dc <UART_Start_Receive_IT+0x16c>)
 8006160:	671a      	str	r2, [r3, #112]	; 0x70
 8006162:	e002      	b.n	800616a <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	4a1e      	ldr	r2, [pc, #120]	; (80061e0 <UART_Start_Receive_IT+0x170>)
 8006168:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006180:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	689a      	ldr	r2, [r3, #8]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006190:	609a      	str	r2, [r3, #8]
 8006192:	e01b      	b.n	80061cc <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800619c:	d107      	bne.n	80061ae <UART_Start_Receive_IT+0x13e>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d103      	bne.n	80061ae <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	4a0e      	ldr	r2, [pc, #56]	; (80061e4 <UART_Start_Receive_IT+0x174>)
 80061aa:	671a      	str	r2, [r3, #112]	; 0x70
 80061ac:	e002      	b.n	80061b4 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	4a0d      	ldr	r2, [pc, #52]	; (80061e8 <UART_Start_Receive_IT+0x178>)
 80061b2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80061ca:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3714      	adds	r7, #20
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	08006665 	.word	0x08006665
 80061e0:	08006461 	.word	0x08006461
 80061e4:	08006389 	.word	0x08006389
 80061e8:	080062b1 	.word	0x080062b1

080061ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006202:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	6899      	ldr	r1, [r3, #8]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	4b0f      	ldr	r3, [pc, #60]	; (800624c <UART_EndRxTransfer+0x60>)
 8006210:	400b      	ands	r3, r1
 8006212:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006218:	2b01      	cmp	r3, #1
 800621a:	d107      	bne.n	800622c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f022 0210 	bic.w	r2, r2, #16
 800622a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2220      	movs	r2, #32
 8006230:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006240:	bf00      	nop
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr
 800624c:	effffffe 	.word	0xeffffffe

08006250 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	f7ff f81a 	bl	80052a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006274:	bf00      	nop
 8006276:	3710      	adds	r7, #16
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b082      	sub	sp, #8
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006292:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2220      	movs	r2, #32
 8006298:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f7fe fff6 	bl	8005294 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062a8:	bf00      	nop
 80062aa:	3708      	adds	r7, #8
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80062be:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062c6:	2b22      	cmp	r3, #34	; 0x22
 80062c8:	d152      	bne.n	8006370 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d0:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80062d2:	89bb      	ldrh	r3, [r7, #12]
 80062d4:	b2d9      	uxtb	r1, r3
 80062d6:	89fb      	ldrh	r3, [r7, #14]
 80062d8:	b2da      	uxtb	r2, r3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062de:	400a      	ands	r2, r1
 80062e0:	b2d2      	uxtb	r2, r2
 80062e2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062e8:	1c5a      	adds	r2, r3, #1
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	3b01      	subs	r3, #1
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006306:	b29b      	uxth	r3, r3
 8006308:	2b00      	cmp	r3, #0
 800630a:	d139      	bne.n	8006380 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800631a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	689a      	ldr	r2, [r3, #8]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f022 0201 	bic.w	r2, r2, #1
 800632a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2220      	movs	r2, #32
 8006330:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800633e:	2b01      	cmp	r3, #1
 8006340:	d10f      	bne.n	8006362 <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f022 0210 	bic.w	r2, r2, #16
 8006350:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006358:	4619      	mov	r1, r3
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f7fe ffae 	bl	80052bc <HAL_UARTEx_RxEventCallback>
 8006360:	e002      	b.n	8006368 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f7fa fb78 	bl	8000a58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800636e:	e007      	b.n	8006380 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	699a      	ldr	r2, [r3, #24]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f042 0208 	orr.w	r2, r2, #8
 800637e:	619a      	str	r2, [r3, #24]
}
 8006380:	bf00      	nop
 8006382:	3710      	adds	r7, #16
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006396:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800639e:	2b22      	cmp	r3, #34	; 0x22
 80063a0:	d152      	bne.n	8006448 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a8:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ae:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80063b0:	89ba      	ldrh	r2, [r7, #12]
 80063b2:	89fb      	ldrh	r3, [r7, #14]
 80063b4:	4013      	ands	r3, r2
 80063b6:	b29a      	uxth	r2, r3
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063c0:	1c9a      	adds	r2, r3, #2
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	3b01      	subs	r3, #1
 80063d0:	b29a      	uxth	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80063de:	b29b      	uxth	r3, r3
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d139      	bne.n	8006458 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80063f2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	689a      	ldr	r2, [r3, #8]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f022 0201 	bic.w	r2, r2, #1
 8006402:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2220      	movs	r2, #32
 8006408:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006416:	2b01      	cmp	r3, #1
 8006418:	d10f      	bne.n	800643a <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f022 0210 	bic.w	r2, r2, #16
 8006428:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006430:	4619      	mov	r1, r3
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f7fe ff42 	bl	80052bc <HAL_UARTEx_RxEventCallback>
 8006438:	e002      	b.n	8006440 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f7fa fb0c 	bl	8000a58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006446:	e007      	b.n	8006458 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	699a      	ldr	r2, [r3, #24]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f042 0208 	orr.w	r2, r2, #8
 8006456:	619a      	str	r2, [r3, #24]
}
 8006458:	bf00      	nop
 800645a:	3710      	adds	r7, #16
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b088      	sub	sp, #32
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800646e:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	69db      	ldr	r3, [r3, #28]
 8006476:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800648e:	2b22      	cmp	r3, #34	; 0x22
 8006490:	f040 80d8 	bne.w	8006644 <UART_RxISR_8BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800649a:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800649c:	e0a8      	b.n	80065f0 <UART_RxISR_8BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a4:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80064a6:	89bb      	ldrh	r3, [r7, #12]
 80064a8:	b2d9      	uxtb	r1, r3
 80064aa:	8b7b      	ldrh	r3, [r7, #26]
 80064ac:	b2da      	uxtb	r2, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b2:	400a      	ands	r2, r1
 80064b4:	b2d2      	uxtb	r2, r2
 80064b6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064bc:	1c5a      	adds	r2, r3, #1
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	3b01      	subs	r3, #1
 80064cc:	b29a      	uxth	r2, r3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	69db      	ldr	r3, [r3, #28]
 80064da:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	f003 0307 	and.w	r3, r3, #7
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d04d      	beq.n	8006582 <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	f003 0301 	and.w	r3, r3, #1
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d010      	beq.n	8006512 <UART_RxISR_8BIT_FIFOEN+0xb2>
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00b      	beq.n	8006512 <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2201      	movs	r2, #1
 8006500:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006508:	f043 0201 	orr.w	r2, r3, #1
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	f003 0302 	and.w	r3, r3, #2
 8006518:	2b00      	cmp	r3, #0
 800651a:	d010      	beq.n	800653e <UART_RxISR_8BIT_FIFOEN+0xde>
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	f003 0301 	and.w	r3, r3, #1
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00b      	beq.n	800653e <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2202      	movs	r2, #2
 800652c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006534:	f043 0204 	orr.w	r2, r3, #4
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	f003 0304 	and.w	r3, r3, #4
 8006544:	2b00      	cmp	r3, #0
 8006546:	d010      	beq.n	800656a <UART_RxISR_8BIT_FIFOEN+0x10a>
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	f003 0301 	and.w	r3, r3, #1
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00b      	beq.n	800656a <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2204      	movs	r2, #4
 8006558:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006560:	f043 0202 	orr.w	r2, r3, #2
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006570:	2b00      	cmp	r3, #0
 8006572:	d006      	beq.n	8006582 <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f7fe fe97 	bl	80052a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006588:	b29b      	uxth	r3, r3
 800658a:	2b00      	cmp	r3, #0
 800658c:	d130      	bne.n	80065f0 <UART_RxISR_8BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800659c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	6899      	ldr	r1, [r3, #8]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	4b2c      	ldr	r3, [pc, #176]	; (800665c <UART_RxISR_8BIT_FIFOEN+0x1fc>)
 80065aa:	400b      	ands	r3, r1
 80065ac:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2220      	movs	r2, #32
 80065b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d10f      	bne.n	80065e4 <UART_RxISR_8BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f022 0210 	bic.w	r2, r2, #16
 80065d2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80065da:	4619      	mov	r1, r3
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f7fe fe6d 	bl	80052bc <HAL_UARTEx_RxEventCallback>
 80065e2:	e002      	b.n	80065ea <UART_RxISR_8BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f7fa fa37 	bl	8000a58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80065f0:	89fb      	ldrh	r3, [r7, #14]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d005      	beq.n	8006602 <UART_RxISR_8BIT_FIFOEN+0x1a2>
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	f003 0320 	and.w	r3, r3, #32
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f47f af4e 	bne.w	800649e <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006608:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800660a:	897b      	ldrh	r3, [r7, #10]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d021      	beq.n	8006654 <UART_RxISR_8BIT_FIFOEN+0x1f4>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006616:	897a      	ldrh	r2, [r7, #10]
 8006618:	429a      	cmp	r2, r3
 800661a:	d21b      	bcs.n	8006654 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	689a      	ldr	r2, [r3, #8]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800662a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a0c      	ldr	r2, [pc, #48]	; (8006660 <UART_RxISR_8BIT_FIFOEN+0x200>)
 8006630:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f042 0220 	orr.w	r2, r2, #32
 8006640:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006642:	e007      	b.n	8006654 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	699a      	ldr	r2, [r3, #24]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f042 0208 	orr.w	r2, r2, #8
 8006652:	619a      	str	r2, [r3, #24]
}
 8006654:	bf00      	nop
 8006656:	3720      	adds	r7, #32
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}
 800665c:	effffffe 	.word	0xeffffffe
 8006660:	080062b1 	.word	0x080062b1

08006664 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b08a      	sub	sp, #40	; 0x28
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006672:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	69db      	ldr	r3, [r3, #28]
 800667a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006692:	2b22      	cmp	r3, #34	; 0x22
 8006694:	f040 80d8 	bne.w	8006848 <UART_RxISR_16BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800669e:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80066a0:	e0a8      	b.n	80067f4 <UART_RxISR_16BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a8:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066ae:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 80066b0:	8aba      	ldrh	r2, [r7, #20]
 80066b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80066b4:	4013      	ands	r3, r2
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066c0:	1c9a      	adds	r2, r3, #2
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	3b01      	subs	r3, #1
 80066d0:	b29a      	uxth	r2, r3
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	69db      	ldr	r3, [r3, #28]
 80066de:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80066e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e2:	f003 0307 	and.w	r3, r3, #7
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d04d      	beq.n	8006786 <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80066ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ec:	f003 0301 	and.w	r3, r3, #1
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d010      	beq.n	8006716 <UART_RxISR_16BIT_FIFOEN+0xb2>
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00b      	beq.n	8006716 <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2201      	movs	r2, #1
 8006704:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800670c:	f043 0201 	orr.w	r2, r3, #1
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006718:	f003 0302 	and.w	r3, r3, #2
 800671c:	2b00      	cmp	r3, #0
 800671e:	d010      	beq.n	8006742 <UART_RxISR_16BIT_FIFOEN+0xde>
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	f003 0301 	and.w	r3, r3, #1
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00b      	beq.n	8006742 <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2202      	movs	r2, #2
 8006730:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006738:	f043 0204 	orr.w	r2, r3, #4
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006744:	f003 0304 	and.w	r3, r3, #4
 8006748:	2b00      	cmp	r3, #0
 800674a:	d010      	beq.n	800676e <UART_RxISR_16BIT_FIFOEN+0x10a>
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	f003 0301 	and.w	r3, r3, #1
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00b      	beq.n	800676e <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2204      	movs	r2, #4
 800675c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006764:	f043 0202 	orr.w	r2, r3, #2
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006774:	2b00      	cmp	r3, #0
 8006776:	d006      	beq.n	8006786 <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f7fe fd95 	bl	80052a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800678c:	b29b      	uxth	r3, r3
 800678e:	2b00      	cmp	r3, #0
 8006790:	d130      	bne.n	80067f4 <UART_RxISR_16BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067a0:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	6899      	ldr	r1, [r3, #8]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	4b2c      	ldr	r3, [pc, #176]	; (8006860 <UART_RxISR_16BIT_FIFOEN+0x1fc>)
 80067ae:	400b      	ands	r3, r1
 80067b0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2220      	movs	r2, #32
 80067b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d10f      	bne.n	80067e8 <UART_RxISR_16BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f022 0210 	bic.w	r2, r2, #16
 80067d6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80067de:	4619      	mov	r1, r3
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f7fe fd6b 	bl	80052bc <HAL_UARTEx_RxEventCallback>
 80067e6:	e002      	b.n	80067ee <UART_RxISR_16BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f7fa f935 	bl	8000a58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80067f4:	8afb      	ldrh	r3, [r7, #22]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d005      	beq.n	8006806 <UART_RxISR_16BIT_FIFOEN+0x1a2>
 80067fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fc:	f003 0320 	and.w	r3, r3, #32
 8006800:	2b00      	cmp	r3, #0
 8006802:	f47f af4e 	bne.w	80066a2 <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800680c:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800680e:	89fb      	ldrh	r3, [r7, #14]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d021      	beq.n	8006858 <UART_RxISR_16BIT_FIFOEN+0x1f4>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800681a:	89fa      	ldrh	r2, [r7, #14]
 800681c:	429a      	cmp	r2, r3
 800681e:	d21b      	bcs.n	8006858 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	689a      	ldr	r2, [r3, #8]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800682e:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a0c      	ldr	r2, [pc, #48]	; (8006864 <UART_RxISR_16BIT_FIFOEN+0x200>)
 8006834:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f042 0220 	orr.w	r2, r2, #32
 8006844:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006846:	e007      	b.n	8006858 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	699a      	ldr	r2, [r3, #24]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f042 0208 	orr.w	r2, r2, #8
 8006856:	619a      	str	r2, [r3, #24]
}
 8006858:	bf00      	nop
 800685a:	3728      	adds	r7, #40	; 0x28
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}
 8006860:	effffffe 	.word	0xeffffffe
 8006864:	08006389 	.word	0x08006389

08006868 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006870:	bf00      	nop
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006884:	bf00      	nop
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006898:	bf00      	nop
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b085      	sub	sp, #20
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d101      	bne.n	80068ba <HAL_UARTEx_DisableFifoMode+0x16>
 80068b6:	2302      	movs	r3, #2
 80068b8:	e027      	b.n	800690a <HAL_UARTEx_DisableFifoMode+0x66>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2201      	movs	r2, #1
 80068be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2224      	movs	r2, #36	; 0x24
 80068c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f022 0201 	bic.w	r2, r2, #1
 80068e0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80068e8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2220      	movs	r2, #32
 80068fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3714      	adds	r7, #20
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr

08006916 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006916:	b580      	push	{r7, lr}
 8006918:	b084      	sub	sp, #16
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
 800691e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006926:	2b01      	cmp	r3, #1
 8006928:	d101      	bne.n	800692e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800692a:	2302      	movs	r3, #2
 800692c:	e02d      	b.n	800698a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2201      	movs	r2, #1
 8006932:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2224      	movs	r2, #36	; 0x24
 800693a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f022 0201 	bic.w	r2, r2, #1
 8006954:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	683a      	ldr	r2, [r7, #0]
 8006966:	430a      	orrs	r2, r1
 8006968:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f850 	bl	8006a10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2220      	movs	r2, #32
 800697c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3710      	adds	r7, #16
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}

08006992 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006992:	b580      	push	{r7, lr}
 8006994:	b084      	sub	sp, #16
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
 800699a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d101      	bne.n	80069aa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80069a6:	2302      	movs	r3, #2
 80069a8:	e02d      	b.n	8006a06 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2201      	movs	r2, #1
 80069ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2224      	movs	r2, #36	; 0x24
 80069b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f022 0201 	bic.w	r2, r2, #1
 80069d0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	683a      	ldr	r2, [r7, #0]
 80069e2:	430a      	orrs	r2, r1
 80069e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 f812 	bl	8006a10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2220      	movs	r2, #32
 80069f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3710      	adds	r7, #16
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
	...

08006a10 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b085      	sub	sp, #20
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d108      	bne.n	8006a32 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006a30:	e031      	b.n	8006a96 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006a32:	2310      	movs	r3, #16
 8006a34:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006a36:	2310      	movs	r3, #16
 8006a38:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	0e5b      	lsrs	r3, r3, #25
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	f003 0307 	and.w	r3, r3, #7
 8006a48:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	0f5b      	lsrs	r3, r3, #29
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	f003 0307 	and.w	r3, r3, #7
 8006a58:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a5a:	7bbb      	ldrb	r3, [r7, #14]
 8006a5c:	7b3a      	ldrb	r2, [r7, #12]
 8006a5e:	4911      	ldr	r1, [pc, #68]	; (8006aa4 <UARTEx_SetNbDataToProcess+0x94>)
 8006a60:	5c8a      	ldrb	r2, [r1, r2]
 8006a62:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006a66:	7b3a      	ldrb	r2, [r7, #12]
 8006a68:	490f      	ldr	r1, [pc, #60]	; (8006aa8 <UARTEx_SetNbDataToProcess+0x98>)
 8006a6a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a70:	b29a      	uxth	r2, r3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a78:	7bfb      	ldrb	r3, [r7, #15]
 8006a7a:	7b7a      	ldrb	r2, [r7, #13]
 8006a7c:	4909      	ldr	r1, [pc, #36]	; (8006aa4 <UARTEx_SetNbDataToProcess+0x94>)
 8006a7e:	5c8a      	ldrb	r2, [r1, r2]
 8006a80:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006a84:	7b7a      	ldrb	r2, [r7, #13]
 8006a86:	4908      	ldr	r1, [pc, #32]	; (8006aa8 <UARTEx_SetNbDataToProcess+0x98>)
 8006a88:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a8a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006a96:	bf00      	nop
 8006a98:	3714      	adds	r7, #20
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	080080c8 	.word	0x080080c8
 8006aa8:	080080d0 	.word	0x080080d0

08006aac <__errno>:
 8006aac:	4b01      	ldr	r3, [pc, #4]	; (8006ab4 <__errno+0x8>)
 8006aae:	6818      	ldr	r0, [r3, #0]
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
 8006ab4:	24000010 	.word	0x24000010

08006ab8 <__libc_init_array>:
 8006ab8:	b570      	push	{r4, r5, r6, lr}
 8006aba:	4d0d      	ldr	r5, [pc, #52]	; (8006af0 <__libc_init_array+0x38>)
 8006abc:	4c0d      	ldr	r4, [pc, #52]	; (8006af4 <__libc_init_array+0x3c>)
 8006abe:	1b64      	subs	r4, r4, r5
 8006ac0:	10a4      	asrs	r4, r4, #2
 8006ac2:	2600      	movs	r6, #0
 8006ac4:	42a6      	cmp	r6, r4
 8006ac6:	d109      	bne.n	8006adc <__libc_init_array+0x24>
 8006ac8:	4d0b      	ldr	r5, [pc, #44]	; (8006af8 <__libc_init_array+0x40>)
 8006aca:	4c0c      	ldr	r4, [pc, #48]	; (8006afc <__libc_init_array+0x44>)
 8006acc:	f001 fa4c 	bl	8007f68 <_init>
 8006ad0:	1b64      	subs	r4, r4, r5
 8006ad2:	10a4      	asrs	r4, r4, #2
 8006ad4:	2600      	movs	r6, #0
 8006ad6:	42a6      	cmp	r6, r4
 8006ad8:	d105      	bne.n	8006ae6 <__libc_init_array+0x2e>
 8006ada:	bd70      	pop	{r4, r5, r6, pc}
 8006adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ae0:	4798      	blx	r3
 8006ae2:	3601      	adds	r6, #1
 8006ae4:	e7ee      	b.n	8006ac4 <__libc_init_array+0xc>
 8006ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006aea:	4798      	blx	r3
 8006aec:	3601      	adds	r6, #1
 8006aee:	e7f2      	b.n	8006ad6 <__libc_init_array+0x1e>
 8006af0:	08008330 	.word	0x08008330
 8006af4:	08008330 	.word	0x08008330
 8006af8:	08008330 	.word	0x08008330
 8006afc:	08008334 	.word	0x08008334

08006b00 <malloc>:
 8006b00:	4b02      	ldr	r3, [pc, #8]	; (8006b0c <malloc+0xc>)
 8006b02:	4601      	mov	r1, r0
 8006b04:	6818      	ldr	r0, [r3, #0]
 8006b06:	f000 b863 	b.w	8006bd0 <_malloc_r>
 8006b0a:	bf00      	nop
 8006b0c:	24000010 	.word	0x24000010

08006b10 <free>:
 8006b10:	4b02      	ldr	r3, [pc, #8]	; (8006b1c <free+0xc>)
 8006b12:	4601      	mov	r1, r0
 8006b14:	6818      	ldr	r0, [r3, #0]
 8006b16:	f000 b80b 	b.w	8006b30 <_free_r>
 8006b1a:	bf00      	nop
 8006b1c:	24000010 	.word	0x24000010

08006b20 <memset>:
 8006b20:	4402      	add	r2, r0
 8006b22:	4603      	mov	r3, r0
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d100      	bne.n	8006b2a <memset+0xa>
 8006b28:	4770      	bx	lr
 8006b2a:	f803 1b01 	strb.w	r1, [r3], #1
 8006b2e:	e7f9      	b.n	8006b24 <memset+0x4>

08006b30 <_free_r>:
 8006b30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b32:	2900      	cmp	r1, #0
 8006b34:	d048      	beq.n	8006bc8 <_free_r+0x98>
 8006b36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b3a:	9001      	str	r0, [sp, #4]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f1a1 0404 	sub.w	r4, r1, #4
 8006b42:	bfb8      	it	lt
 8006b44:	18e4      	addlt	r4, r4, r3
 8006b46:	f000 fa85 	bl	8007054 <__malloc_lock>
 8006b4a:	4a20      	ldr	r2, [pc, #128]	; (8006bcc <_free_r+0x9c>)
 8006b4c:	9801      	ldr	r0, [sp, #4]
 8006b4e:	6813      	ldr	r3, [r2, #0]
 8006b50:	4615      	mov	r5, r2
 8006b52:	b933      	cbnz	r3, 8006b62 <_free_r+0x32>
 8006b54:	6063      	str	r3, [r4, #4]
 8006b56:	6014      	str	r4, [r2, #0]
 8006b58:	b003      	add	sp, #12
 8006b5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b5e:	f000 ba7f 	b.w	8007060 <__malloc_unlock>
 8006b62:	42a3      	cmp	r3, r4
 8006b64:	d90b      	bls.n	8006b7e <_free_r+0x4e>
 8006b66:	6821      	ldr	r1, [r4, #0]
 8006b68:	1862      	adds	r2, r4, r1
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	bf04      	itt	eq
 8006b6e:	681a      	ldreq	r2, [r3, #0]
 8006b70:	685b      	ldreq	r3, [r3, #4]
 8006b72:	6063      	str	r3, [r4, #4]
 8006b74:	bf04      	itt	eq
 8006b76:	1852      	addeq	r2, r2, r1
 8006b78:	6022      	streq	r2, [r4, #0]
 8006b7a:	602c      	str	r4, [r5, #0]
 8006b7c:	e7ec      	b.n	8006b58 <_free_r+0x28>
 8006b7e:	461a      	mov	r2, r3
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	b10b      	cbz	r3, 8006b88 <_free_r+0x58>
 8006b84:	42a3      	cmp	r3, r4
 8006b86:	d9fa      	bls.n	8006b7e <_free_r+0x4e>
 8006b88:	6811      	ldr	r1, [r2, #0]
 8006b8a:	1855      	adds	r5, r2, r1
 8006b8c:	42a5      	cmp	r5, r4
 8006b8e:	d10b      	bne.n	8006ba8 <_free_r+0x78>
 8006b90:	6824      	ldr	r4, [r4, #0]
 8006b92:	4421      	add	r1, r4
 8006b94:	1854      	adds	r4, r2, r1
 8006b96:	42a3      	cmp	r3, r4
 8006b98:	6011      	str	r1, [r2, #0]
 8006b9a:	d1dd      	bne.n	8006b58 <_free_r+0x28>
 8006b9c:	681c      	ldr	r4, [r3, #0]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	6053      	str	r3, [r2, #4]
 8006ba2:	4421      	add	r1, r4
 8006ba4:	6011      	str	r1, [r2, #0]
 8006ba6:	e7d7      	b.n	8006b58 <_free_r+0x28>
 8006ba8:	d902      	bls.n	8006bb0 <_free_r+0x80>
 8006baa:	230c      	movs	r3, #12
 8006bac:	6003      	str	r3, [r0, #0]
 8006bae:	e7d3      	b.n	8006b58 <_free_r+0x28>
 8006bb0:	6825      	ldr	r5, [r4, #0]
 8006bb2:	1961      	adds	r1, r4, r5
 8006bb4:	428b      	cmp	r3, r1
 8006bb6:	bf04      	itt	eq
 8006bb8:	6819      	ldreq	r1, [r3, #0]
 8006bba:	685b      	ldreq	r3, [r3, #4]
 8006bbc:	6063      	str	r3, [r4, #4]
 8006bbe:	bf04      	itt	eq
 8006bc0:	1949      	addeq	r1, r1, r5
 8006bc2:	6021      	streq	r1, [r4, #0]
 8006bc4:	6054      	str	r4, [r2, #4]
 8006bc6:	e7c7      	b.n	8006b58 <_free_r+0x28>
 8006bc8:	b003      	add	sp, #12
 8006bca:	bd30      	pop	{r4, r5, pc}
 8006bcc:	24000094 	.word	0x24000094

08006bd0 <_malloc_r>:
 8006bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bd2:	1ccd      	adds	r5, r1, #3
 8006bd4:	f025 0503 	bic.w	r5, r5, #3
 8006bd8:	3508      	adds	r5, #8
 8006bda:	2d0c      	cmp	r5, #12
 8006bdc:	bf38      	it	cc
 8006bde:	250c      	movcc	r5, #12
 8006be0:	2d00      	cmp	r5, #0
 8006be2:	4606      	mov	r6, r0
 8006be4:	db01      	blt.n	8006bea <_malloc_r+0x1a>
 8006be6:	42a9      	cmp	r1, r5
 8006be8:	d903      	bls.n	8006bf2 <_malloc_r+0x22>
 8006bea:	230c      	movs	r3, #12
 8006bec:	6033      	str	r3, [r6, #0]
 8006bee:	2000      	movs	r0, #0
 8006bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bf2:	f000 fa2f 	bl	8007054 <__malloc_lock>
 8006bf6:	4921      	ldr	r1, [pc, #132]	; (8006c7c <_malloc_r+0xac>)
 8006bf8:	680a      	ldr	r2, [r1, #0]
 8006bfa:	4614      	mov	r4, r2
 8006bfc:	b99c      	cbnz	r4, 8006c26 <_malloc_r+0x56>
 8006bfe:	4f20      	ldr	r7, [pc, #128]	; (8006c80 <_malloc_r+0xb0>)
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	b923      	cbnz	r3, 8006c0e <_malloc_r+0x3e>
 8006c04:	4621      	mov	r1, r4
 8006c06:	4630      	mov	r0, r6
 8006c08:	f000 f854 	bl	8006cb4 <_sbrk_r>
 8006c0c:	6038      	str	r0, [r7, #0]
 8006c0e:	4629      	mov	r1, r5
 8006c10:	4630      	mov	r0, r6
 8006c12:	f000 f84f 	bl	8006cb4 <_sbrk_r>
 8006c16:	1c43      	adds	r3, r0, #1
 8006c18:	d123      	bne.n	8006c62 <_malloc_r+0x92>
 8006c1a:	230c      	movs	r3, #12
 8006c1c:	6033      	str	r3, [r6, #0]
 8006c1e:	4630      	mov	r0, r6
 8006c20:	f000 fa1e 	bl	8007060 <__malloc_unlock>
 8006c24:	e7e3      	b.n	8006bee <_malloc_r+0x1e>
 8006c26:	6823      	ldr	r3, [r4, #0]
 8006c28:	1b5b      	subs	r3, r3, r5
 8006c2a:	d417      	bmi.n	8006c5c <_malloc_r+0x8c>
 8006c2c:	2b0b      	cmp	r3, #11
 8006c2e:	d903      	bls.n	8006c38 <_malloc_r+0x68>
 8006c30:	6023      	str	r3, [r4, #0]
 8006c32:	441c      	add	r4, r3
 8006c34:	6025      	str	r5, [r4, #0]
 8006c36:	e004      	b.n	8006c42 <_malloc_r+0x72>
 8006c38:	6863      	ldr	r3, [r4, #4]
 8006c3a:	42a2      	cmp	r2, r4
 8006c3c:	bf0c      	ite	eq
 8006c3e:	600b      	streq	r3, [r1, #0]
 8006c40:	6053      	strne	r3, [r2, #4]
 8006c42:	4630      	mov	r0, r6
 8006c44:	f000 fa0c 	bl	8007060 <__malloc_unlock>
 8006c48:	f104 000b 	add.w	r0, r4, #11
 8006c4c:	1d23      	adds	r3, r4, #4
 8006c4e:	f020 0007 	bic.w	r0, r0, #7
 8006c52:	1ac2      	subs	r2, r0, r3
 8006c54:	d0cc      	beq.n	8006bf0 <_malloc_r+0x20>
 8006c56:	1a1b      	subs	r3, r3, r0
 8006c58:	50a3      	str	r3, [r4, r2]
 8006c5a:	e7c9      	b.n	8006bf0 <_malloc_r+0x20>
 8006c5c:	4622      	mov	r2, r4
 8006c5e:	6864      	ldr	r4, [r4, #4]
 8006c60:	e7cc      	b.n	8006bfc <_malloc_r+0x2c>
 8006c62:	1cc4      	adds	r4, r0, #3
 8006c64:	f024 0403 	bic.w	r4, r4, #3
 8006c68:	42a0      	cmp	r0, r4
 8006c6a:	d0e3      	beq.n	8006c34 <_malloc_r+0x64>
 8006c6c:	1a21      	subs	r1, r4, r0
 8006c6e:	4630      	mov	r0, r6
 8006c70:	f000 f820 	bl	8006cb4 <_sbrk_r>
 8006c74:	3001      	adds	r0, #1
 8006c76:	d1dd      	bne.n	8006c34 <_malloc_r+0x64>
 8006c78:	e7cf      	b.n	8006c1a <_malloc_r+0x4a>
 8006c7a:	bf00      	nop
 8006c7c:	24000094 	.word	0x24000094
 8006c80:	24000098 	.word	0x24000098

08006c84 <iprintf>:
 8006c84:	b40f      	push	{r0, r1, r2, r3}
 8006c86:	4b0a      	ldr	r3, [pc, #40]	; (8006cb0 <iprintf+0x2c>)
 8006c88:	b513      	push	{r0, r1, r4, lr}
 8006c8a:	681c      	ldr	r4, [r3, #0]
 8006c8c:	b124      	cbz	r4, 8006c98 <iprintf+0x14>
 8006c8e:	69a3      	ldr	r3, [r4, #24]
 8006c90:	b913      	cbnz	r3, 8006c98 <iprintf+0x14>
 8006c92:	4620      	mov	r0, r4
 8006c94:	f000 f92c 	bl	8006ef0 <__sinit>
 8006c98:	ab05      	add	r3, sp, #20
 8006c9a:	9a04      	ldr	r2, [sp, #16]
 8006c9c:	68a1      	ldr	r1, [r4, #8]
 8006c9e:	9301      	str	r3, [sp, #4]
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	f000 fb69 	bl	8007378 <_vfiprintf_r>
 8006ca6:	b002      	add	sp, #8
 8006ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cac:	b004      	add	sp, #16
 8006cae:	4770      	bx	lr
 8006cb0:	24000010 	.word	0x24000010

08006cb4 <_sbrk_r>:
 8006cb4:	b538      	push	{r3, r4, r5, lr}
 8006cb6:	4d06      	ldr	r5, [pc, #24]	; (8006cd0 <_sbrk_r+0x1c>)
 8006cb8:	2300      	movs	r3, #0
 8006cba:	4604      	mov	r4, r0
 8006cbc:	4608      	mov	r0, r1
 8006cbe:	602b      	str	r3, [r5, #0]
 8006cc0:	f7fa fa12 	bl	80010e8 <_sbrk>
 8006cc4:	1c43      	adds	r3, r0, #1
 8006cc6:	d102      	bne.n	8006cce <_sbrk_r+0x1a>
 8006cc8:	682b      	ldr	r3, [r5, #0]
 8006cca:	b103      	cbz	r3, 8006cce <_sbrk_r+0x1a>
 8006ccc:	6023      	str	r3, [r4, #0]
 8006cce:	bd38      	pop	{r3, r4, r5, pc}
 8006cd0:	240002ec 	.word	0x240002ec

08006cd4 <siprintf>:
 8006cd4:	b40e      	push	{r1, r2, r3}
 8006cd6:	b500      	push	{lr}
 8006cd8:	b09c      	sub	sp, #112	; 0x70
 8006cda:	ab1d      	add	r3, sp, #116	; 0x74
 8006cdc:	9002      	str	r0, [sp, #8]
 8006cde:	9006      	str	r0, [sp, #24]
 8006ce0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006ce4:	4809      	ldr	r0, [pc, #36]	; (8006d0c <siprintf+0x38>)
 8006ce6:	9107      	str	r1, [sp, #28]
 8006ce8:	9104      	str	r1, [sp, #16]
 8006cea:	4909      	ldr	r1, [pc, #36]	; (8006d10 <siprintf+0x3c>)
 8006cec:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cf0:	9105      	str	r1, [sp, #20]
 8006cf2:	6800      	ldr	r0, [r0, #0]
 8006cf4:	9301      	str	r3, [sp, #4]
 8006cf6:	a902      	add	r1, sp, #8
 8006cf8:	f000 fa14 	bl	8007124 <_svfiprintf_r>
 8006cfc:	9b02      	ldr	r3, [sp, #8]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	701a      	strb	r2, [r3, #0]
 8006d02:	b01c      	add	sp, #112	; 0x70
 8006d04:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d08:	b003      	add	sp, #12
 8006d0a:	4770      	bx	lr
 8006d0c:	24000010 	.word	0x24000010
 8006d10:	ffff0208 	.word	0xffff0208

08006d14 <strcasecmp>:
 8006d14:	b570      	push	{r4, r5, r6, lr}
 8006d16:	4d0c      	ldr	r5, [pc, #48]	; (8006d48 <strcasecmp+0x34>)
 8006d18:	4604      	mov	r4, r0
 8006d1a:	462e      	mov	r6, r5
 8006d1c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006d20:	5d5a      	ldrb	r2, [r3, r5]
 8006d22:	f002 0203 	and.w	r2, r2, #3
 8006d26:	2a01      	cmp	r2, #1
 8006d28:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d2c:	5cb0      	ldrb	r0, [r6, r2]
 8006d2e:	f000 0003 	and.w	r0, r0, #3
 8006d32:	bf08      	it	eq
 8006d34:	3320      	addeq	r3, #32
 8006d36:	2801      	cmp	r0, #1
 8006d38:	bf08      	it	eq
 8006d3a:	3220      	addeq	r2, #32
 8006d3c:	1a98      	subs	r0, r3, r2
 8006d3e:	d101      	bne.n	8006d44 <strcasecmp+0x30>
 8006d40:	2a00      	cmp	r2, #0
 8006d42:	d1eb      	bne.n	8006d1c <strcasecmp+0x8>
 8006d44:	bd70      	pop	{r4, r5, r6, pc}
 8006d46:	bf00      	nop
 8006d48:	08008191 	.word	0x08008191

08006d4c <strtok>:
 8006d4c:	4b16      	ldr	r3, [pc, #88]	; (8006da8 <strtok+0x5c>)
 8006d4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d50:	681e      	ldr	r6, [r3, #0]
 8006d52:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8006d54:	4605      	mov	r5, r0
 8006d56:	b9fc      	cbnz	r4, 8006d98 <strtok+0x4c>
 8006d58:	2050      	movs	r0, #80	; 0x50
 8006d5a:	9101      	str	r1, [sp, #4]
 8006d5c:	f7ff fed0 	bl	8006b00 <malloc>
 8006d60:	9901      	ldr	r1, [sp, #4]
 8006d62:	65b0      	str	r0, [r6, #88]	; 0x58
 8006d64:	4602      	mov	r2, r0
 8006d66:	b920      	cbnz	r0, 8006d72 <strtok+0x26>
 8006d68:	4b10      	ldr	r3, [pc, #64]	; (8006dac <strtok+0x60>)
 8006d6a:	4811      	ldr	r0, [pc, #68]	; (8006db0 <strtok+0x64>)
 8006d6c:	2157      	movs	r1, #87	; 0x57
 8006d6e:	f000 f849 	bl	8006e04 <__assert_func>
 8006d72:	e9c0 4400 	strd	r4, r4, [r0]
 8006d76:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006d7a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006d7e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8006d82:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006d86:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006d8a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8006d8e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8006d92:	6184      	str	r4, [r0, #24]
 8006d94:	7704      	strb	r4, [r0, #28]
 8006d96:	6244      	str	r4, [r0, #36]	; 0x24
 8006d98:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	4628      	mov	r0, r5
 8006d9e:	b002      	add	sp, #8
 8006da0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006da4:	f000 b806 	b.w	8006db4 <__strtok_r>
 8006da8:	24000010 	.word	0x24000010
 8006dac:	080080dc 	.word	0x080080dc
 8006db0:	080080f3 	.word	0x080080f3

08006db4 <__strtok_r>:
 8006db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006db6:	b908      	cbnz	r0, 8006dbc <__strtok_r+0x8>
 8006db8:	6810      	ldr	r0, [r2, #0]
 8006dba:	b188      	cbz	r0, 8006de0 <__strtok_r+0x2c>
 8006dbc:	4604      	mov	r4, r0
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006dc4:	460f      	mov	r7, r1
 8006dc6:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006dca:	b91e      	cbnz	r6, 8006dd4 <__strtok_r+0x20>
 8006dcc:	b965      	cbnz	r5, 8006de8 <__strtok_r+0x34>
 8006dce:	6015      	str	r5, [r2, #0]
 8006dd0:	4628      	mov	r0, r5
 8006dd2:	e005      	b.n	8006de0 <__strtok_r+0x2c>
 8006dd4:	42b5      	cmp	r5, r6
 8006dd6:	d1f6      	bne.n	8006dc6 <__strtok_r+0x12>
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d1f0      	bne.n	8006dbe <__strtok_r+0xa>
 8006ddc:	6014      	str	r4, [r2, #0]
 8006dde:	7003      	strb	r3, [r0, #0]
 8006de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006de2:	461c      	mov	r4, r3
 8006de4:	e00c      	b.n	8006e00 <__strtok_r+0x4c>
 8006de6:	b915      	cbnz	r5, 8006dee <__strtok_r+0x3a>
 8006de8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006dec:	460e      	mov	r6, r1
 8006dee:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006df2:	42ab      	cmp	r3, r5
 8006df4:	d1f7      	bne.n	8006de6 <__strtok_r+0x32>
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d0f3      	beq.n	8006de2 <__strtok_r+0x2e>
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006e00:	6014      	str	r4, [r2, #0]
 8006e02:	e7ed      	b.n	8006de0 <__strtok_r+0x2c>

08006e04 <__assert_func>:
 8006e04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006e06:	4614      	mov	r4, r2
 8006e08:	461a      	mov	r2, r3
 8006e0a:	4b09      	ldr	r3, [pc, #36]	; (8006e30 <__assert_func+0x2c>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4605      	mov	r5, r0
 8006e10:	68d8      	ldr	r0, [r3, #12]
 8006e12:	b14c      	cbz	r4, 8006e28 <__assert_func+0x24>
 8006e14:	4b07      	ldr	r3, [pc, #28]	; (8006e34 <__assert_func+0x30>)
 8006e16:	9100      	str	r1, [sp, #0]
 8006e18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006e1c:	4906      	ldr	r1, [pc, #24]	; (8006e38 <__assert_func+0x34>)
 8006e1e:	462b      	mov	r3, r5
 8006e20:	f000 f8e4 	bl	8006fec <fiprintf>
 8006e24:	f000 fe82 	bl	8007b2c <abort>
 8006e28:	4b04      	ldr	r3, [pc, #16]	; (8006e3c <__assert_func+0x38>)
 8006e2a:	461c      	mov	r4, r3
 8006e2c:	e7f3      	b.n	8006e16 <__assert_func+0x12>
 8006e2e:	bf00      	nop
 8006e30:	24000010 	.word	0x24000010
 8006e34:	08008154 	.word	0x08008154
 8006e38:	08008161 	.word	0x08008161
 8006e3c:	0800818f 	.word	0x0800818f

08006e40 <std>:
 8006e40:	2300      	movs	r3, #0
 8006e42:	b510      	push	{r4, lr}
 8006e44:	4604      	mov	r4, r0
 8006e46:	e9c0 3300 	strd	r3, r3, [r0]
 8006e4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e4e:	6083      	str	r3, [r0, #8]
 8006e50:	8181      	strh	r1, [r0, #12]
 8006e52:	6643      	str	r3, [r0, #100]	; 0x64
 8006e54:	81c2      	strh	r2, [r0, #14]
 8006e56:	6183      	str	r3, [r0, #24]
 8006e58:	4619      	mov	r1, r3
 8006e5a:	2208      	movs	r2, #8
 8006e5c:	305c      	adds	r0, #92	; 0x5c
 8006e5e:	f7ff fe5f 	bl	8006b20 <memset>
 8006e62:	4b05      	ldr	r3, [pc, #20]	; (8006e78 <std+0x38>)
 8006e64:	6263      	str	r3, [r4, #36]	; 0x24
 8006e66:	4b05      	ldr	r3, [pc, #20]	; (8006e7c <std+0x3c>)
 8006e68:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e6a:	4b05      	ldr	r3, [pc, #20]	; (8006e80 <std+0x40>)
 8006e6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e6e:	4b05      	ldr	r3, [pc, #20]	; (8006e84 <std+0x44>)
 8006e70:	6224      	str	r4, [r4, #32]
 8006e72:	6323      	str	r3, [r4, #48]	; 0x30
 8006e74:	bd10      	pop	{r4, pc}
 8006e76:	bf00      	nop
 8006e78:	08007901 	.word	0x08007901
 8006e7c:	08007923 	.word	0x08007923
 8006e80:	0800795b 	.word	0x0800795b
 8006e84:	0800797f 	.word	0x0800797f

08006e88 <_cleanup_r>:
 8006e88:	4901      	ldr	r1, [pc, #4]	; (8006e90 <_cleanup_r+0x8>)
 8006e8a:	f000 b8c1 	b.w	8007010 <_fwalk_reent>
 8006e8e:	bf00      	nop
 8006e90:	08007c69 	.word	0x08007c69

08006e94 <__sfmoreglue>:
 8006e94:	b570      	push	{r4, r5, r6, lr}
 8006e96:	1e4a      	subs	r2, r1, #1
 8006e98:	2568      	movs	r5, #104	; 0x68
 8006e9a:	4355      	muls	r5, r2
 8006e9c:	460e      	mov	r6, r1
 8006e9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006ea2:	f7ff fe95 	bl	8006bd0 <_malloc_r>
 8006ea6:	4604      	mov	r4, r0
 8006ea8:	b140      	cbz	r0, 8006ebc <__sfmoreglue+0x28>
 8006eaa:	2100      	movs	r1, #0
 8006eac:	e9c0 1600 	strd	r1, r6, [r0]
 8006eb0:	300c      	adds	r0, #12
 8006eb2:	60a0      	str	r0, [r4, #8]
 8006eb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006eb8:	f7ff fe32 	bl	8006b20 <memset>
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	bd70      	pop	{r4, r5, r6, pc}

08006ec0 <__sfp_lock_acquire>:
 8006ec0:	4801      	ldr	r0, [pc, #4]	; (8006ec8 <__sfp_lock_acquire+0x8>)
 8006ec2:	f000 b8c5 	b.w	8007050 <__retarget_lock_acquire_recursive>
 8006ec6:	bf00      	nop
 8006ec8:	240002e8 	.word	0x240002e8

08006ecc <__sfp_lock_release>:
 8006ecc:	4801      	ldr	r0, [pc, #4]	; (8006ed4 <__sfp_lock_release+0x8>)
 8006ece:	f000 b8c0 	b.w	8007052 <__retarget_lock_release_recursive>
 8006ed2:	bf00      	nop
 8006ed4:	240002e8 	.word	0x240002e8

08006ed8 <__sinit_lock_acquire>:
 8006ed8:	4801      	ldr	r0, [pc, #4]	; (8006ee0 <__sinit_lock_acquire+0x8>)
 8006eda:	f000 b8b9 	b.w	8007050 <__retarget_lock_acquire_recursive>
 8006ede:	bf00      	nop
 8006ee0:	240002e3 	.word	0x240002e3

08006ee4 <__sinit_lock_release>:
 8006ee4:	4801      	ldr	r0, [pc, #4]	; (8006eec <__sinit_lock_release+0x8>)
 8006ee6:	f000 b8b4 	b.w	8007052 <__retarget_lock_release_recursive>
 8006eea:	bf00      	nop
 8006eec:	240002e3 	.word	0x240002e3

08006ef0 <__sinit>:
 8006ef0:	b510      	push	{r4, lr}
 8006ef2:	4604      	mov	r4, r0
 8006ef4:	f7ff fff0 	bl	8006ed8 <__sinit_lock_acquire>
 8006ef8:	69a3      	ldr	r3, [r4, #24]
 8006efa:	b11b      	cbz	r3, 8006f04 <__sinit+0x14>
 8006efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f00:	f7ff bff0 	b.w	8006ee4 <__sinit_lock_release>
 8006f04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006f08:	6523      	str	r3, [r4, #80]	; 0x50
 8006f0a:	4b13      	ldr	r3, [pc, #76]	; (8006f58 <__sinit+0x68>)
 8006f0c:	4a13      	ldr	r2, [pc, #76]	; (8006f5c <__sinit+0x6c>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	62a2      	str	r2, [r4, #40]	; 0x28
 8006f12:	42a3      	cmp	r3, r4
 8006f14:	bf04      	itt	eq
 8006f16:	2301      	moveq	r3, #1
 8006f18:	61a3      	streq	r3, [r4, #24]
 8006f1a:	4620      	mov	r0, r4
 8006f1c:	f000 f820 	bl	8006f60 <__sfp>
 8006f20:	6060      	str	r0, [r4, #4]
 8006f22:	4620      	mov	r0, r4
 8006f24:	f000 f81c 	bl	8006f60 <__sfp>
 8006f28:	60a0      	str	r0, [r4, #8]
 8006f2a:	4620      	mov	r0, r4
 8006f2c:	f000 f818 	bl	8006f60 <__sfp>
 8006f30:	2200      	movs	r2, #0
 8006f32:	60e0      	str	r0, [r4, #12]
 8006f34:	2104      	movs	r1, #4
 8006f36:	6860      	ldr	r0, [r4, #4]
 8006f38:	f7ff ff82 	bl	8006e40 <std>
 8006f3c:	68a0      	ldr	r0, [r4, #8]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	2109      	movs	r1, #9
 8006f42:	f7ff ff7d 	bl	8006e40 <std>
 8006f46:	68e0      	ldr	r0, [r4, #12]
 8006f48:	2202      	movs	r2, #2
 8006f4a:	2112      	movs	r1, #18
 8006f4c:	f7ff ff78 	bl	8006e40 <std>
 8006f50:	2301      	movs	r3, #1
 8006f52:	61a3      	str	r3, [r4, #24]
 8006f54:	e7d2      	b.n	8006efc <__sinit+0xc>
 8006f56:	bf00      	nop
 8006f58:	080080d8 	.word	0x080080d8
 8006f5c:	08006e89 	.word	0x08006e89

08006f60 <__sfp>:
 8006f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f62:	4607      	mov	r7, r0
 8006f64:	f7ff ffac 	bl	8006ec0 <__sfp_lock_acquire>
 8006f68:	4b1e      	ldr	r3, [pc, #120]	; (8006fe4 <__sfp+0x84>)
 8006f6a:	681e      	ldr	r6, [r3, #0]
 8006f6c:	69b3      	ldr	r3, [r6, #24]
 8006f6e:	b913      	cbnz	r3, 8006f76 <__sfp+0x16>
 8006f70:	4630      	mov	r0, r6
 8006f72:	f7ff ffbd 	bl	8006ef0 <__sinit>
 8006f76:	3648      	adds	r6, #72	; 0x48
 8006f78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f7c:	3b01      	subs	r3, #1
 8006f7e:	d503      	bpl.n	8006f88 <__sfp+0x28>
 8006f80:	6833      	ldr	r3, [r6, #0]
 8006f82:	b30b      	cbz	r3, 8006fc8 <__sfp+0x68>
 8006f84:	6836      	ldr	r6, [r6, #0]
 8006f86:	e7f7      	b.n	8006f78 <__sfp+0x18>
 8006f88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f8c:	b9d5      	cbnz	r5, 8006fc4 <__sfp+0x64>
 8006f8e:	4b16      	ldr	r3, [pc, #88]	; (8006fe8 <__sfp+0x88>)
 8006f90:	60e3      	str	r3, [r4, #12]
 8006f92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006f96:	6665      	str	r5, [r4, #100]	; 0x64
 8006f98:	f000 f859 	bl	800704e <__retarget_lock_init_recursive>
 8006f9c:	f7ff ff96 	bl	8006ecc <__sfp_lock_release>
 8006fa0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006fa4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006fa8:	6025      	str	r5, [r4, #0]
 8006faa:	61a5      	str	r5, [r4, #24]
 8006fac:	2208      	movs	r2, #8
 8006fae:	4629      	mov	r1, r5
 8006fb0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006fb4:	f7ff fdb4 	bl	8006b20 <memset>
 8006fb8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006fbc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006fc0:	4620      	mov	r0, r4
 8006fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fc4:	3468      	adds	r4, #104	; 0x68
 8006fc6:	e7d9      	b.n	8006f7c <__sfp+0x1c>
 8006fc8:	2104      	movs	r1, #4
 8006fca:	4638      	mov	r0, r7
 8006fcc:	f7ff ff62 	bl	8006e94 <__sfmoreglue>
 8006fd0:	4604      	mov	r4, r0
 8006fd2:	6030      	str	r0, [r6, #0]
 8006fd4:	2800      	cmp	r0, #0
 8006fd6:	d1d5      	bne.n	8006f84 <__sfp+0x24>
 8006fd8:	f7ff ff78 	bl	8006ecc <__sfp_lock_release>
 8006fdc:	230c      	movs	r3, #12
 8006fde:	603b      	str	r3, [r7, #0]
 8006fe0:	e7ee      	b.n	8006fc0 <__sfp+0x60>
 8006fe2:	bf00      	nop
 8006fe4:	080080d8 	.word	0x080080d8
 8006fe8:	ffff0001 	.word	0xffff0001

08006fec <fiprintf>:
 8006fec:	b40e      	push	{r1, r2, r3}
 8006fee:	b503      	push	{r0, r1, lr}
 8006ff0:	4601      	mov	r1, r0
 8006ff2:	ab03      	add	r3, sp, #12
 8006ff4:	4805      	ldr	r0, [pc, #20]	; (800700c <fiprintf+0x20>)
 8006ff6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ffa:	6800      	ldr	r0, [r0, #0]
 8006ffc:	9301      	str	r3, [sp, #4]
 8006ffe:	f000 f9bb 	bl	8007378 <_vfiprintf_r>
 8007002:	b002      	add	sp, #8
 8007004:	f85d eb04 	ldr.w	lr, [sp], #4
 8007008:	b003      	add	sp, #12
 800700a:	4770      	bx	lr
 800700c:	24000010 	.word	0x24000010

08007010 <_fwalk_reent>:
 8007010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007014:	4606      	mov	r6, r0
 8007016:	4688      	mov	r8, r1
 8007018:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800701c:	2700      	movs	r7, #0
 800701e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007022:	f1b9 0901 	subs.w	r9, r9, #1
 8007026:	d505      	bpl.n	8007034 <_fwalk_reent+0x24>
 8007028:	6824      	ldr	r4, [r4, #0]
 800702a:	2c00      	cmp	r4, #0
 800702c:	d1f7      	bne.n	800701e <_fwalk_reent+0xe>
 800702e:	4638      	mov	r0, r7
 8007030:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007034:	89ab      	ldrh	r3, [r5, #12]
 8007036:	2b01      	cmp	r3, #1
 8007038:	d907      	bls.n	800704a <_fwalk_reent+0x3a>
 800703a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800703e:	3301      	adds	r3, #1
 8007040:	d003      	beq.n	800704a <_fwalk_reent+0x3a>
 8007042:	4629      	mov	r1, r5
 8007044:	4630      	mov	r0, r6
 8007046:	47c0      	blx	r8
 8007048:	4307      	orrs	r7, r0
 800704a:	3568      	adds	r5, #104	; 0x68
 800704c:	e7e9      	b.n	8007022 <_fwalk_reent+0x12>

0800704e <__retarget_lock_init_recursive>:
 800704e:	4770      	bx	lr

08007050 <__retarget_lock_acquire_recursive>:
 8007050:	4770      	bx	lr

08007052 <__retarget_lock_release_recursive>:
 8007052:	4770      	bx	lr

08007054 <__malloc_lock>:
 8007054:	4801      	ldr	r0, [pc, #4]	; (800705c <__malloc_lock+0x8>)
 8007056:	f7ff bffb 	b.w	8007050 <__retarget_lock_acquire_recursive>
 800705a:	bf00      	nop
 800705c:	240002e4 	.word	0x240002e4

08007060 <__malloc_unlock>:
 8007060:	4801      	ldr	r0, [pc, #4]	; (8007068 <__malloc_unlock+0x8>)
 8007062:	f7ff bff6 	b.w	8007052 <__retarget_lock_release_recursive>
 8007066:	bf00      	nop
 8007068:	240002e4 	.word	0x240002e4

0800706c <__ssputs_r>:
 800706c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007070:	688e      	ldr	r6, [r1, #8]
 8007072:	429e      	cmp	r6, r3
 8007074:	4682      	mov	sl, r0
 8007076:	460c      	mov	r4, r1
 8007078:	4690      	mov	r8, r2
 800707a:	461f      	mov	r7, r3
 800707c:	d838      	bhi.n	80070f0 <__ssputs_r+0x84>
 800707e:	898a      	ldrh	r2, [r1, #12]
 8007080:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007084:	d032      	beq.n	80070ec <__ssputs_r+0x80>
 8007086:	6825      	ldr	r5, [r4, #0]
 8007088:	6909      	ldr	r1, [r1, #16]
 800708a:	eba5 0901 	sub.w	r9, r5, r1
 800708e:	6965      	ldr	r5, [r4, #20]
 8007090:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007094:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007098:	3301      	adds	r3, #1
 800709a:	444b      	add	r3, r9
 800709c:	106d      	asrs	r5, r5, #1
 800709e:	429d      	cmp	r5, r3
 80070a0:	bf38      	it	cc
 80070a2:	461d      	movcc	r5, r3
 80070a4:	0553      	lsls	r3, r2, #21
 80070a6:	d531      	bpl.n	800710c <__ssputs_r+0xa0>
 80070a8:	4629      	mov	r1, r5
 80070aa:	f7ff fd91 	bl	8006bd0 <_malloc_r>
 80070ae:	4606      	mov	r6, r0
 80070b0:	b950      	cbnz	r0, 80070c8 <__ssputs_r+0x5c>
 80070b2:	230c      	movs	r3, #12
 80070b4:	f8ca 3000 	str.w	r3, [sl]
 80070b8:	89a3      	ldrh	r3, [r4, #12]
 80070ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070be:	81a3      	strh	r3, [r4, #12]
 80070c0:	f04f 30ff 	mov.w	r0, #4294967295
 80070c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070c8:	6921      	ldr	r1, [r4, #16]
 80070ca:	464a      	mov	r2, r9
 80070cc:	f000 fe7e 	bl	8007dcc <memcpy>
 80070d0:	89a3      	ldrh	r3, [r4, #12]
 80070d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80070d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070da:	81a3      	strh	r3, [r4, #12]
 80070dc:	6126      	str	r6, [r4, #16]
 80070de:	6165      	str	r5, [r4, #20]
 80070e0:	444e      	add	r6, r9
 80070e2:	eba5 0509 	sub.w	r5, r5, r9
 80070e6:	6026      	str	r6, [r4, #0]
 80070e8:	60a5      	str	r5, [r4, #8]
 80070ea:	463e      	mov	r6, r7
 80070ec:	42be      	cmp	r6, r7
 80070ee:	d900      	bls.n	80070f2 <__ssputs_r+0x86>
 80070f0:	463e      	mov	r6, r7
 80070f2:	4632      	mov	r2, r6
 80070f4:	6820      	ldr	r0, [r4, #0]
 80070f6:	4641      	mov	r1, r8
 80070f8:	f000 fe76 	bl	8007de8 <memmove>
 80070fc:	68a3      	ldr	r3, [r4, #8]
 80070fe:	6822      	ldr	r2, [r4, #0]
 8007100:	1b9b      	subs	r3, r3, r6
 8007102:	4432      	add	r2, r6
 8007104:	60a3      	str	r3, [r4, #8]
 8007106:	6022      	str	r2, [r4, #0]
 8007108:	2000      	movs	r0, #0
 800710a:	e7db      	b.n	80070c4 <__ssputs_r+0x58>
 800710c:	462a      	mov	r2, r5
 800710e:	f000 fe85 	bl	8007e1c <_realloc_r>
 8007112:	4606      	mov	r6, r0
 8007114:	2800      	cmp	r0, #0
 8007116:	d1e1      	bne.n	80070dc <__ssputs_r+0x70>
 8007118:	6921      	ldr	r1, [r4, #16]
 800711a:	4650      	mov	r0, sl
 800711c:	f7ff fd08 	bl	8006b30 <_free_r>
 8007120:	e7c7      	b.n	80070b2 <__ssputs_r+0x46>
	...

08007124 <_svfiprintf_r>:
 8007124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007128:	4698      	mov	r8, r3
 800712a:	898b      	ldrh	r3, [r1, #12]
 800712c:	061b      	lsls	r3, r3, #24
 800712e:	b09d      	sub	sp, #116	; 0x74
 8007130:	4607      	mov	r7, r0
 8007132:	460d      	mov	r5, r1
 8007134:	4614      	mov	r4, r2
 8007136:	d50e      	bpl.n	8007156 <_svfiprintf_r+0x32>
 8007138:	690b      	ldr	r3, [r1, #16]
 800713a:	b963      	cbnz	r3, 8007156 <_svfiprintf_r+0x32>
 800713c:	2140      	movs	r1, #64	; 0x40
 800713e:	f7ff fd47 	bl	8006bd0 <_malloc_r>
 8007142:	6028      	str	r0, [r5, #0]
 8007144:	6128      	str	r0, [r5, #16]
 8007146:	b920      	cbnz	r0, 8007152 <_svfiprintf_r+0x2e>
 8007148:	230c      	movs	r3, #12
 800714a:	603b      	str	r3, [r7, #0]
 800714c:	f04f 30ff 	mov.w	r0, #4294967295
 8007150:	e0d1      	b.n	80072f6 <_svfiprintf_r+0x1d2>
 8007152:	2340      	movs	r3, #64	; 0x40
 8007154:	616b      	str	r3, [r5, #20]
 8007156:	2300      	movs	r3, #0
 8007158:	9309      	str	r3, [sp, #36]	; 0x24
 800715a:	2320      	movs	r3, #32
 800715c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007160:	f8cd 800c 	str.w	r8, [sp, #12]
 8007164:	2330      	movs	r3, #48	; 0x30
 8007166:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007310 <_svfiprintf_r+0x1ec>
 800716a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800716e:	f04f 0901 	mov.w	r9, #1
 8007172:	4623      	mov	r3, r4
 8007174:	469a      	mov	sl, r3
 8007176:	f813 2b01 	ldrb.w	r2, [r3], #1
 800717a:	b10a      	cbz	r2, 8007180 <_svfiprintf_r+0x5c>
 800717c:	2a25      	cmp	r2, #37	; 0x25
 800717e:	d1f9      	bne.n	8007174 <_svfiprintf_r+0x50>
 8007180:	ebba 0b04 	subs.w	fp, sl, r4
 8007184:	d00b      	beq.n	800719e <_svfiprintf_r+0x7a>
 8007186:	465b      	mov	r3, fp
 8007188:	4622      	mov	r2, r4
 800718a:	4629      	mov	r1, r5
 800718c:	4638      	mov	r0, r7
 800718e:	f7ff ff6d 	bl	800706c <__ssputs_r>
 8007192:	3001      	adds	r0, #1
 8007194:	f000 80aa 	beq.w	80072ec <_svfiprintf_r+0x1c8>
 8007198:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800719a:	445a      	add	r2, fp
 800719c:	9209      	str	r2, [sp, #36]	; 0x24
 800719e:	f89a 3000 	ldrb.w	r3, [sl]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	f000 80a2 	beq.w	80072ec <_svfiprintf_r+0x1c8>
 80071a8:	2300      	movs	r3, #0
 80071aa:	f04f 32ff 	mov.w	r2, #4294967295
 80071ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071b2:	f10a 0a01 	add.w	sl, sl, #1
 80071b6:	9304      	str	r3, [sp, #16]
 80071b8:	9307      	str	r3, [sp, #28]
 80071ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071be:	931a      	str	r3, [sp, #104]	; 0x68
 80071c0:	4654      	mov	r4, sl
 80071c2:	2205      	movs	r2, #5
 80071c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071c8:	4851      	ldr	r0, [pc, #324]	; (8007310 <_svfiprintf_r+0x1ec>)
 80071ca:	f7f9 f891 	bl	80002f0 <memchr>
 80071ce:	9a04      	ldr	r2, [sp, #16]
 80071d0:	b9d8      	cbnz	r0, 800720a <_svfiprintf_r+0xe6>
 80071d2:	06d0      	lsls	r0, r2, #27
 80071d4:	bf44      	itt	mi
 80071d6:	2320      	movmi	r3, #32
 80071d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071dc:	0711      	lsls	r1, r2, #28
 80071de:	bf44      	itt	mi
 80071e0:	232b      	movmi	r3, #43	; 0x2b
 80071e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071e6:	f89a 3000 	ldrb.w	r3, [sl]
 80071ea:	2b2a      	cmp	r3, #42	; 0x2a
 80071ec:	d015      	beq.n	800721a <_svfiprintf_r+0xf6>
 80071ee:	9a07      	ldr	r2, [sp, #28]
 80071f0:	4654      	mov	r4, sl
 80071f2:	2000      	movs	r0, #0
 80071f4:	f04f 0c0a 	mov.w	ip, #10
 80071f8:	4621      	mov	r1, r4
 80071fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071fe:	3b30      	subs	r3, #48	; 0x30
 8007200:	2b09      	cmp	r3, #9
 8007202:	d94e      	bls.n	80072a2 <_svfiprintf_r+0x17e>
 8007204:	b1b0      	cbz	r0, 8007234 <_svfiprintf_r+0x110>
 8007206:	9207      	str	r2, [sp, #28]
 8007208:	e014      	b.n	8007234 <_svfiprintf_r+0x110>
 800720a:	eba0 0308 	sub.w	r3, r0, r8
 800720e:	fa09 f303 	lsl.w	r3, r9, r3
 8007212:	4313      	orrs	r3, r2
 8007214:	9304      	str	r3, [sp, #16]
 8007216:	46a2      	mov	sl, r4
 8007218:	e7d2      	b.n	80071c0 <_svfiprintf_r+0x9c>
 800721a:	9b03      	ldr	r3, [sp, #12]
 800721c:	1d19      	adds	r1, r3, #4
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	9103      	str	r1, [sp, #12]
 8007222:	2b00      	cmp	r3, #0
 8007224:	bfbb      	ittet	lt
 8007226:	425b      	neglt	r3, r3
 8007228:	f042 0202 	orrlt.w	r2, r2, #2
 800722c:	9307      	strge	r3, [sp, #28]
 800722e:	9307      	strlt	r3, [sp, #28]
 8007230:	bfb8      	it	lt
 8007232:	9204      	strlt	r2, [sp, #16]
 8007234:	7823      	ldrb	r3, [r4, #0]
 8007236:	2b2e      	cmp	r3, #46	; 0x2e
 8007238:	d10c      	bne.n	8007254 <_svfiprintf_r+0x130>
 800723a:	7863      	ldrb	r3, [r4, #1]
 800723c:	2b2a      	cmp	r3, #42	; 0x2a
 800723e:	d135      	bne.n	80072ac <_svfiprintf_r+0x188>
 8007240:	9b03      	ldr	r3, [sp, #12]
 8007242:	1d1a      	adds	r2, r3, #4
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	9203      	str	r2, [sp, #12]
 8007248:	2b00      	cmp	r3, #0
 800724a:	bfb8      	it	lt
 800724c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007250:	3402      	adds	r4, #2
 8007252:	9305      	str	r3, [sp, #20]
 8007254:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007320 <_svfiprintf_r+0x1fc>
 8007258:	7821      	ldrb	r1, [r4, #0]
 800725a:	2203      	movs	r2, #3
 800725c:	4650      	mov	r0, sl
 800725e:	f7f9 f847 	bl	80002f0 <memchr>
 8007262:	b140      	cbz	r0, 8007276 <_svfiprintf_r+0x152>
 8007264:	2340      	movs	r3, #64	; 0x40
 8007266:	eba0 000a 	sub.w	r0, r0, sl
 800726a:	fa03 f000 	lsl.w	r0, r3, r0
 800726e:	9b04      	ldr	r3, [sp, #16]
 8007270:	4303      	orrs	r3, r0
 8007272:	3401      	adds	r4, #1
 8007274:	9304      	str	r3, [sp, #16]
 8007276:	f814 1b01 	ldrb.w	r1, [r4], #1
 800727a:	4826      	ldr	r0, [pc, #152]	; (8007314 <_svfiprintf_r+0x1f0>)
 800727c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007280:	2206      	movs	r2, #6
 8007282:	f7f9 f835 	bl	80002f0 <memchr>
 8007286:	2800      	cmp	r0, #0
 8007288:	d038      	beq.n	80072fc <_svfiprintf_r+0x1d8>
 800728a:	4b23      	ldr	r3, [pc, #140]	; (8007318 <_svfiprintf_r+0x1f4>)
 800728c:	bb1b      	cbnz	r3, 80072d6 <_svfiprintf_r+0x1b2>
 800728e:	9b03      	ldr	r3, [sp, #12]
 8007290:	3307      	adds	r3, #7
 8007292:	f023 0307 	bic.w	r3, r3, #7
 8007296:	3308      	adds	r3, #8
 8007298:	9303      	str	r3, [sp, #12]
 800729a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800729c:	4433      	add	r3, r6
 800729e:	9309      	str	r3, [sp, #36]	; 0x24
 80072a0:	e767      	b.n	8007172 <_svfiprintf_r+0x4e>
 80072a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80072a6:	460c      	mov	r4, r1
 80072a8:	2001      	movs	r0, #1
 80072aa:	e7a5      	b.n	80071f8 <_svfiprintf_r+0xd4>
 80072ac:	2300      	movs	r3, #0
 80072ae:	3401      	adds	r4, #1
 80072b0:	9305      	str	r3, [sp, #20]
 80072b2:	4619      	mov	r1, r3
 80072b4:	f04f 0c0a 	mov.w	ip, #10
 80072b8:	4620      	mov	r0, r4
 80072ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072be:	3a30      	subs	r2, #48	; 0x30
 80072c0:	2a09      	cmp	r2, #9
 80072c2:	d903      	bls.n	80072cc <_svfiprintf_r+0x1a8>
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d0c5      	beq.n	8007254 <_svfiprintf_r+0x130>
 80072c8:	9105      	str	r1, [sp, #20]
 80072ca:	e7c3      	b.n	8007254 <_svfiprintf_r+0x130>
 80072cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80072d0:	4604      	mov	r4, r0
 80072d2:	2301      	movs	r3, #1
 80072d4:	e7f0      	b.n	80072b8 <_svfiprintf_r+0x194>
 80072d6:	ab03      	add	r3, sp, #12
 80072d8:	9300      	str	r3, [sp, #0]
 80072da:	462a      	mov	r2, r5
 80072dc:	4b0f      	ldr	r3, [pc, #60]	; (800731c <_svfiprintf_r+0x1f8>)
 80072de:	a904      	add	r1, sp, #16
 80072e0:	4638      	mov	r0, r7
 80072e2:	f3af 8000 	nop.w
 80072e6:	1c42      	adds	r2, r0, #1
 80072e8:	4606      	mov	r6, r0
 80072ea:	d1d6      	bne.n	800729a <_svfiprintf_r+0x176>
 80072ec:	89ab      	ldrh	r3, [r5, #12]
 80072ee:	065b      	lsls	r3, r3, #25
 80072f0:	f53f af2c 	bmi.w	800714c <_svfiprintf_r+0x28>
 80072f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072f6:	b01d      	add	sp, #116	; 0x74
 80072f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072fc:	ab03      	add	r3, sp, #12
 80072fe:	9300      	str	r3, [sp, #0]
 8007300:	462a      	mov	r2, r5
 8007302:	4b06      	ldr	r3, [pc, #24]	; (800731c <_svfiprintf_r+0x1f8>)
 8007304:	a904      	add	r1, sp, #16
 8007306:	4638      	mov	r0, r7
 8007308:	f000 f9d4 	bl	80076b4 <_printf_i>
 800730c:	e7eb      	b.n	80072e6 <_svfiprintf_r+0x1c2>
 800730e:	bf00      	nop
 8007310:	080082f4 	.word	0x080082f4
 8007314:	080082fe 	.word	0x080082fe
 8007318:	00000000 	.word	0x00000000
 800731c:	0800706d 	.word	0x0800706d
 8007320:	080082fa 	.word	0x080082fa

08007324 <__sfputc_r>:
 8007324:	6893      	ldr	r3, [r2, #8]
 8007326:	3b01      	subs	r3, #1
 8007328:	2b00      	cmp	r3, #0
 800732a:	b410      	push	{r4}
 800732c:	6093      	str	r3, [r2, #8]
 800732e:	da08      	bge.n	8007342 <__sfputc_r+0x1e>
 8007330:	6994      	ldr	r4, [r2, #24]
 8007332:	42a3      	cmp	r3, r4
 8007334:	db01      	blt.n	800733a <__sfputc_r+0x16>
 8007336:	290a      	cmp	r1, #10
 8007338:	d103      	bne.n	8007342 <__sfputc_r+0x1e>
 800733a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800733e:	f000 bb23 	b.w	8007988 <__swbuf_r>
 8007342:	6813      	ldr	r3, [r2, #0]
 8007344:	1c58      	adds	r0, r3, #1
 8007346:	6010      	str	r0, [r2, #0]
 8007348:	7019      	strb	r1, [r3, #0]
 800734a:	4608      	mov	r0, r1
 800734c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007350:	4770      	bx	lr

08007352 <__sfputs_r>:
 8007352:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007354:	4606      	mov	r6, r0
 8007356:	460f      	mov	r7, r1
 8007358:	4614      	mov	r4, r2
 800735a:	18d5      	adds	r5, r2, r3
 800735c:	42ac      	cmp	r4, r5
 800735e:	d101      	bne.n	8007364 <__sfputs_r+0x12>
 8007360:	2000      	movs	r0, #0
 8007362:	e007      	b.n	8007374 <__sfputs_r+0x22>
 8007364:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007368:	463a      	mov	r2, r7
 800736a:	4630      	mov	r0, r6
 800736c:	f7ff ffda 	bl	8007324 <__sfputc_r>
 8007370:	1c43      	adds	r3, r0, #1
 8007372:	d1f3      	bne.n	800735c <__sfputs_r+0xa>
 8007374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007378 <_vfiprintf_r>:
 8007378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800737c:	460d      	mov	r5, r1
 800737e:	b09d      	sub	sp, #116	; 0x74
 8007380:	4614      	mov	r4, r2
 8007382:	4698      	mov	r8, r3
 8007384:	4606      	mov	r6, r0
 8007386:	b118      	cbz	r0, 8007390 <_vfiprintf_r+0x18>
 8007388:	6983      	ldr	r3, [r0, #24]
 800738a:	b90b      	cbnz	r3, 8007390 <_vfiprintf_r+0x18>
 800738c:	f7ff fdb0 	bl	8006ef0 <__sinit>
 8007390:	4b89      	ldr	r3, [pc, #548]	; (80075b8 <_vfiprintf_r+0x240>)
 8007392:	429d      	cmp	r5, r3
 8007394:	d11b      	bne.n	80073ce <_vfiprintf_r+0x56>
 8007396:	6875      	ldr	r5, [r6, #4]
 8007398:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800739a:	07d9      	lsls	r1, r3, #31
 800739c:	d405      	bmi.n	80073aa <_vfiprintf_r+0x32>
 800739e:	89ab      	ldrh	r3, [r5, #12]
 80073a0:	059a      	lsls	r2, r3, #22
 80073a2:	d402      	bmi.n	80073aa <_vfiprintf_r+0x32>
 80073a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073a6:	f7ff fe53 	bl	8007050 <__retarget_lock_acquire_recursive>
 80073aa:	89ab      	ldrh	r3, [r5, #12]
 80073ac:	071b      	lsls	r3, r3, #28
 80073ae:	d501      	bpl.n	80073b4 <_vfiprintf_r+0x3c>
 80073b0:	692b      	ldr	r3, [r5, #16]
 80073b2:	b9eb      	cbnz	r3, 80073f0 <_vfiprintf_r+0x78>
 80073b4:	4629      	mov	r1, r5
 80073b6:	4630      	mov	r0, r6
 80073b8:	f000 fb4a 	bl	8007a50 <__swsetup_r>
 80073bc:	b1c0      	cbz	r0, 80073f0 <_vfiprintf_r+0x78>
 80073be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073c0:	07dc      	lsls	r4, r3, #31
 80073c2:	d50e      	bpl.n	80073e2 <_vfiprintf_r+0x6a>
 80073c4:	f04f 30ff 	mov.w	r0, #4294967295
 80073c8:	b01d      	add	sp, #116	; 0x74
 80073ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ce:	4b7b      	ldr	r3, [pc, #492]	; (80075bc <_vfiprintf_r+0x244>)
 80073d0:	429d      	cmp	r5, r3
 80073d2:	d101      	bne.n	80073d8 <_vfiprintf_r+0x60>
 80073d4:	68b5      	ldr	r5, [r6, #8]
 80073d6:	e7df      	b.n	8007398 <_vfiprintf_r+0x20>
 80073d8:	4b79      	ldr	r3, [pc, #484]	; (80075c0 <_vfiprintf_r+0x248>)
 80073da:	429d      	cmp	r5, r3
 80073dc:	bf08      	it	eq
 80073de:	68f5      	ldreq	r5, [r6, #12]
 80073e0:	e7da      	b.n	8007398 <_vfiprintf_r+0x20>
 80073e2:	89ab      	ldrh	r3, [r5, #12]
 80073e4:	0598      	lsls	r0, r3, #22
 80073e6:	d4ed      	bmi.n	80073c4 <_vfiprintf_r+0x4c>
 80073e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073ea:	f7ff fe32 	bl	8007052 <__retarget_lock_release_recursive>
 80073ee:	e7e9      	b.n	80073c4 <_vfiprintf_r+0x4c>
 80073f0:	2300      	movs	r3, #0
 80073f2:	9309      	str	r3, [sp, #36]	; 0x24
 80073f4:	2320      	movs	r3, #32
 80073f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80073fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80073fe:	2330      	movs	r3, #48	; 0x30
 8007400:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80075c4 <_vfiprintf_r+0x24c>
 8007404:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007408:	f04f 0901 	mov.w	r9, #1
 800740c:	4623      	mov	r3, r4
 800740e:	469a      	mov	sl, r3
 8007410:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007414:	b10a      	cbz	r2, 800741a <_vfiprintf_r+0xa2>
 8007416:	2a25      	cmp	r2, #37	; 0x25
 8007418:	d1f9      	bne.n	800740e <_vfiprintf_r+0x96>
 800741a:	ebba 0b04 	subs.w	fp, sl, r4
 800741e:	d00b      	beq.n	8007438 <_vfiprintf_r+0xc0>
 8007420:	465b      	mov	r3, fp
 8007422:	4622      	mov	r2, r4
 8007424:	4629      	mov	r1, r5
 8007426:	4630      	mov	r0, r6
 8007428:	f7ff ff93 	bl	8007352 <__sfputs_r>
 800742c:	3001      	adds	r0, #1
 800742e:	f000 80aa 	beq.w	8007586 <_vfiprintf_r+0x20e>
 8007432:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007434:	445a      	add	r2, fp
 8007436:	9209      	str	r2, [sp, #36]	; 0x24
 8007438:	f89a 3000 	ldrb.w	r3, [sl]
 800743c:	2b00      	cmp	r3, #0
 800743e:	f000 80a2 	beq.w	8007586 <_vfiprintf_r+0x20e>
 8007442:	2300      	movs	r3, #0
 8007444:	f04f 32ff 	mov.w	r2, #4294967295
 8007448:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800744c:	f10a 0a01 	add.w	sl, sl, #1
 8007450:	9304      	str	r3, [sp, #16]
 8007452:	9307      	str	r3, [sp, #28]
 8007454:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007458:	931a      	str	r3, [sp, #104]	; 0x68
 800745a:	4654      	mov	r4, sl
 800745c:	2205      	movs	r2, #5
 800745e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007462:	4858      	ldr	r0, [pc, #352]	; (80075c4 <_vfiprintf_r+0x24c>)
 8007464:	f7f8 ff44 	bl	80002f0 <memchr>
 8007468:	9a04      	ldr	r2, [sp, #16]
 800746a:	b9d8      	cbnz	r0, 80074a4 <_vfiprintf_r+0x12c>
 800746c:	06d1      	lsls	r1, r2, #27
 800746e:	bf44      	itt	mi
 8007470:	2320      	movmi	r3, #32
 8007472:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007476:	0713      	lsls	r3, r2, #28
 8007478:	bf44      	itt	mi
 800747a:	232b      	movmi	r3, #43	; 0x2b
 800747c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007480:	f89a 3000 	ldrb.w	r3, [sl]
 8007484:	2b2a      	cmp	r3, #42	; 0x2a
 8007486:	d015      	beq.n	80074b4 <_vfiprintf_r+0x13c>
 8007488:	9a07      	ldr	r2, [sp, #28]
 800748a:	4654      	mov	r4, sl
 800748c:	2000      	movs	r0, #0
 800748e:	f04f 0c0a 	mov.w	ip, #10
 8007492:	4621      	mov	r1, r4
 8007494:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007498:	3b30      	subs	r3, #48	; 0x30
 800749a:	2b09      	cmp	r3, #9
 800749c:	d94e      	bls.n	800753c <_vfiprintf_r+0x1c4>
 800749e:	b1b0      	cbz	r0, 80074ce <_vfiprintf_r+0x156>
 80074a0:	9207      	str	r2, [sp, #28]
 80074a2:	e014      	b.n	80074ce <_vfiprintf_r+0x156>
 80074a4:	eba0 0308 	sub.w	r3, r0, r8
 80074a8:	fa09 f303 	lsl.w	r3, r9, r3
 80074ac:	4313      	orrs	r3, r2
 80074ae:	9304      	str	r3, [sp, #16]
 80074b0:	46a2      	mov	sl, r4
 80074b2:	e7d2      	b.n	800745a <_vfiprintf_r+0xe2>
 80074b4:	9b03      	ldr	r3, [sp, #12]
 80074b6:	1d19      	adds	r1, r3, #4
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	9103      	str	r1, [sp, #12]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	bfbb      	ittet	lt
 80074c0:	425b      	neglt	r3, r3
 80074c2:	f042 0202 	orrlt.w	r2, r2, #2
 80074c6:	9307      	strge	r3, [sp, #28]
 80074c8:	9307      	strlt	r3, [sp, #28]
 80074ca:	bfb8      	it	lt
 80074cc:	9204      	strlt	r2, [sp, #16]
 80074ce:	7823      	ldrb	r3, [r4, #0]
 80074d0:	2b2e      	cmp	r3, #46	; 0x2e
 80074d2:	d10c      	bne.n	80074ee <_vfiprintf_r+0x176>
 80074d4:	7863      	ldrb	r3, [r4, #1]
 80074d6:	2b2a      	cmp	r3, #42	; 0x2a
 80074d8:	d135      	bne.n	8007546 <_vfiprintf_r+0x1ce>
 80074da:	9b03      	ldr	r3, [sp, #12]
 80074dc:	1d1a      	adds	r2, r3, #4
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	9203      	str	r2, [sp, #12]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	bfb8      	it	lt
 80074e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80074ea:	3402      	adds	r4, #2
 80074ec:	9305      	str	r3, [sp, #20]
 80074ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80075d4 <_vfiprintf_r+0x25c>
 80074f2:	7821      	ldrb	r1, [r4, #0]
 80074f4:	2203      	movs	r2, #3
 80074f6:	4650      	mov	r0, sl
 80074f8:	f7f8 fefa 	bl	80002f0 <memchr>
 80074fc:	b140      	cbz	r0, 8007510 <_vfiprintf_r+0x198>
 80074fe:	2340      	movs	r3, #64	; 0x40
 8007500:	eba0 000a 	sub.w	r0, r0, sl
 8007504:	fa03 f000 	lsl.w	r0, r3, r0
 8007508:	9b04      	ldr	r3, [sp, #16]
 800750a:	4303      	orrs	r3, r0
 800750c:	3401      	adds	r4, #1
 800750e:	9304      	str	r3, [sp, #16]
 8007510:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007514:	482c      	ldr	r0, [pc, #176]	; (80075c8 <_vfiprintf_r+0x250>)
 8007516:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800751a:	2206      	movs	r2, #6
 800751c:	f7f8 fee8 	bl	80002f0 <memchr>
 8007520:	2800      	cmp	r0, #0
 8007522:	d03f      	beq.n	80075a4 <_vfiprintf_r+0x22c>
 8007524:	4b29      	ldr	r3, [pc, #164]	; (80075cc <_vfiprintf_r+0x254>)
 8007526:	bb1b      	cbnz	r3, 8007570 <_vfiprintf_r+0x1f8>
 8007528:	9b03      	ldr	r3, [sp, #12]
 800752a:	3307      	adds	r3, #7
 800752c:	f023 0307 	bic.w	r3, r3, #7
 8007530:	3308      	adds	r3, #8
 8007532:	9303      	str	r3, [sp, #12]
 8007534:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007536:	443b      	add	r3, r7
 8007538:	9309      	str	r3, [sp, #36]	; 0x24
 800753a:	e767      	b.n	800740c <_vfiprintf_r+0x94>
 800753c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007540:	460c      	mov	r4, r1
 8007542:	2001      	movs	r0, #1
 8007544:	e7a5      	b.n	8007492 <_vfiprintf_r+0x11a>
 8007546:	2300      	movs	r3, #0
 8007548:	3401      	adds	r4, #1
 800754a:	9305      	str	r3, [sp, #20]
 800754c:	4619      	mov	r1, r3
 800754e:	f04f 0c0a 	mov.w	ip, #10
 8007552:	4620      	mov	r0, r4
 8007554:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007558:	3a30      	subs	r2, #48	; 0x30
 800755a:	2a09      	cmp	r2, #9
 800755c:	d903      	bls.n	8007566 <_vfiprintf_r+0x1ee>
 800755e:	2b00      	cmp	r3, #0
 8007560:	d0c5      	beq.n	80074ee <_vfiprintf_r+0x176>
 8007562:	9105      	str	r1, [sp, #20]
 8007564:	e7c3      	b.n	80074ee <_vfiprintf_r+0x176>
 8007566:	fb0c 2101 	mla	r1, ip, r1, r2
 800756a:	4604      	mov	r4, r0
 800756c:	2301      	movs	r3, #1
 800756e:	e7f0      	b.n	8007552 <_vfiprintf_r+0x1da>
 8007570:	ab03      	add	r3, sp, #12
 8007572:	9300      	str	r3, [sp, #0]
 8007574:	462a      	mov	r2, r5
 8007576:	4b16      	ldr	r3, [pc, #88]	; (80075d0 <_vfiprintf_r+0x258>)
 8007578:	a904      	add	r1, sp, #16
 800757a:	4630      	mov	r0, r6
 800757c:	f3af 8000 	nop.w
 8007580:	4607      	mov	r7, r0
 8007582:	1c78      	adds	r0, r7, #1
 8007584:	d1d6      	bne.n	8007534 <_vfiprintf_r+0x1bc>
 8007586:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007588:	07d9      	lsls	r1, r3, #31
 800758a:	d405      	bmi.n	8007598 <_vfiprintf_r+0x220>
 800758c:	89ab      	ldrh	r3, [r5, #12]
 800758e:	059a      	lsls	r2, r3, #22
 8007590:	d402      	bmi.n	8007598 <_vfiprintf_r+0x220>
 8007592:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007594:	f7ff fd5d 	bl	8007052 <__retarget_lock_release_recursive>
 8007598:	89ab      	ldrh	r3, [r5, #12]
 800759a:	065b      	lsls	r3, r3, #25
 800759c:	f53f af12 	bmi.w	80073c4 <_vfiprintf_r+0x4c>
 80075a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075a2:	e711      	b.n	80073c8 <_vfiprintf_r+0x50>
 80075a4:	ab03      	add	r3, sp, #12
 80075a6:	9300      	str	r3, [sp, #0]
 80075a8:	462a      	mov	r2, r5
 80075aa:	4b09      	ldr	r3, [pc, #36]	; (80075d0 <_vfiprintf_r+0x258>)
 80075ac:	a904      	add	r1, sp, #16
 80075ae:	4630      	mov	r0, r6
 80075b0:	f000 f880 	bl	80076b4 <_printf_i>
 80075b4:	e7e4      	b.n	8007580 <_vfiprintf_r+0x208>
 80075b6:	bf00      	nop
 80075b8:	080082b4 	.word	0x080082b4
 80075bc:	080082d4 	.word	0x080082d4
 80075c0:	08008294 	.word	0x08008294
 80075c4:	080082f4 	.word	0x080082f4
 80075c8:	080082fe 	.word	0x080082fe
 80075cc:	00000000 	.word	0x00000000
 80075d0:	08007353 	.word	0x08007353
 80075d4:	080082fa 	.word	0x080082fa

080075d8 <_printf_common>:
 80075d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075dc:	4616      	mov	r6, r2
 80075de:	4699      	mov	r9, r3
 80075e0:	688a      	ldr	r2, [r1, #8]
 80075e2:	690b      	ldr	r3, [r1, #16]
 80075e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80075e8:	4293      	cmp	r3, r2
 80075ea:	bfb8      	it	lt
 80075ec:	4613      	movlt	r3, r2
 80075ee:	6033      	str	r3, [r6, #0]
 80075f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80075f4:	4607      	mov	r7, r0
 80075f6:	460c      	mov	r4, r1
 80075f8:	b10a      	cbz	r2, 80075fe <_printf_common+0x26>
 80075fa:	3301      	adds	r3, #1
 80075fc:	6033      	str	r3, [r6, #0]
 80075fe:	6823      	ldr	r3, [r4, #0]
 8007600:	0699      	lsls	r1, r3, #26
 8007602:	bf42      	ittt	mi
 8007604:	6833      	ldrmi	r3, [r6, #0]
 8007606:	3302      	addmi	r3, #2
 8007608:	6033      	strmi	r3, [r6, #0]
 800760a:	6825      	ldr	r5, [r4, #0]
 800760c:	f015 0506 	ands.w	r5, r5, #6
 8007610:	d106      	bne.n	8007620 <_printf_common+0x48>
 8007612:	f104 0a19 	add.w	sl, r4, #25
 8007616:	68e3      	ldr	r3, [r4, #12]
 8007618:	6832      	ldr	r2, [r6, #0]
 800761a:	1a9b      	subs	r3, r3, r2
 800761c:	42ab      	cmp	r3, r5
 800761e:	dc26      	bgt.n	800766e <_printf_common+0x96>
 8007620:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007624:	1e13      	subs	r3, r2, #0
 8007626:	6822      	ldr	r2, [r4, #0]
 8007628:	bf18      	it	ne
 800762a:	2301      	movne	r3, #1
 800762c:	0692      	lsls	r2, r2, #26
 800762e:	d42b      	bmi.n	8007688 <_printf_common+0xb0>
 8007630:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007634:	4649      	mov	r1, r9
 8007636:	4638      	mov	r0, r7
 8007638:	47c0      	blx	r8
 800763a:	3001      	adds	r0, #1
 800763c:	d01e      	beq.n	800767c <_printf_common+0xa4>
 800763e:	6823      	ldr	r3, [r4, #0]
 8007640:	68e5      	ldr	r5, [r4, #12]
 8007642:	6832      	ldr	r2, [r6, #0]
 8007644:	f003 0306 	and.w	r3, r3, #6
 8007648:	2b04      	cmp	r3, #4
 800764a:	bf08      	it	eq
 800764c:	1aad      	subeq	r5, r5, r2
 800764e:	68a3      	ldr	r3, [r4, #8]
 8007650:	6922      	ldr	r2, [r4, #16]
 8007652:	bf0c      	ite	eq
 8007654:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007658:	2500      	movne	r5, #0
 800765a:	4293      	cmp	r3, r2
 800765c:	bfc4      	itt	gt
 800765e:	1a9b      	subgt	r3, r3, r2
 8007660:	18ed      	addgt	r5, r5, r3
 8007662:	2600      	movs	r6, #0
 8007664:	341a      	adds	r4, #26
 8007666:	42b5      	cmp	r5, r6
 8007668:	d11a      	bne.n	80076a0 <_printf_common+0xc8>
 800766a:	2000      	movs	r0, #0
 800766c:	e008      	b.n	8007680 <_printf_common+0xa8>
 800766e:	2301      	movs	r3, #1
 8007670:	4652      	mov	r2, sl
 8007672:	4649      	mov	r1, r9
 8007674:	4638      	mov	r0, r7
 8007676:	47c0      	blx	r8
 8007678:	3001      	adds	r0, #1
 800767a:	d103      	bne.n	8007684 <_printf_common+0xac>
 800767c:	f04f 30ff 	mov.w	r0, #4294967295
 8007680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007684:	3501      	adds	r5, #1
 8007686:	e7c6      	b.n	8007616 <_printf_common+0x3e>
 8007688:	18e1      	adds	r1, r4, r3
 800768a:	1c5a      	adds	r2, r3, #1
 800768c:	2030      	movs	r0, #48	; 0x30
 800768e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007692:	4422      	add	r2, r4
 8007694:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007698:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800769c:	3302      	adds	r3, #2
 800769e:	e7c7      	b.n	8007630 <_printf_common+0x58>
 80076a0:	2301      	movs	r3, #1
 80076a2:	4622      	mov	r2, r4
 80076a4:	4649      	mov	r1, r9
 80076a6:	4638      	mov	r0, r7
 80076a8:	47c0      	blx	r8
 80076aa:	3001      	adds	r0, #1
 80076ac:	d0e6      	beq.n	800767c <_printf_common+0xa4>
 80076ae:	3601      	adds	r6, #1
 80076b0:	e7d9      	b.n	8007666 <_printf_common+0x8e>
	...

080076b4 <_printf_i>:
 80076b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076b8:	460c      	mov	r4, r1
 80076ba:	4691      	mov	r9, r2
 80076bc:	7e27      	ldrb	r7, [r4, #24]
 80076be:	990c      	ldr	r1, [sp, #48]	; 0x30
 80076c0:	2f78      	cmp	r7, #120	; 0x78
 80076c2:	4680      	mov	r8, r0
 80076c4:	469a      	mov	sl, r3
 80076c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076ca:	d807      	bhi.n	80076dc <_printf_i+0x28>
 80076cc:	2f62      	cmp	r7, #98	; 0x62
 80076ce:	d80a      	bhi.n	80076e6 <_printf_i+0x32>
 80076d0:	2f00      	cmp	r7, #0
 80076d2:	f000 80d8 	beq.w	8007886 <_printf_i+0x1d2>
 80076d6:	2f58      	cmp	r7, #88	; 0x58
 80076d8:	f000 80a3 	beq.w	8007822 <_printf_i+0x16e>
 80076dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80076e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80076e4:	e03a      	b.n	800775c <_printf_i+0xa8>
 80076e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80076ea:	2b15      	cmp	r3, #21
 80076ec:	d8f6      	bhi.n	80076dc <_printf_i+0x28>
 80076ee:	a001      	add	r0, pc, #4	; (adr r0, 80076f4 <_printf_i+0x40>)
 80076f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80076f4:	0800774d 	.word	0x0800774d
 80076f8:	08007761 	.word	0x08007761
 80076fc:	080076dd 	.word	0x080076dd
 8007700:	080076dd 	.word	0x080076dd
 8007704:	080076dd 	.word	0x080076dd
 8007708:	080076dd 	.word	0x080076dd
 800770c:	08007761 	.word	0x08007761
 8007710:	080076dd 	.word	0x080076dd
 8007714:	080076dd 	.word	0x080076dd
 8007718:	080076dd 	.word	0x080076dd
 800771c:	080076dd 	.word	0x080076dd
 8007720:	0800786d 	.word	0x0800786d
 8007724:	08007791 	.word	0x08007791
 8007728:	0800784f 	.word	0x0800784f
 800772c:	080076dd 	.word	0x080076dd
 8007730:	080076dd 	.word	0x080076dd
 8007734:	0800788f 	.word	0x0800788f
 8007738:	080076dd 	.word	0x080076dd
 800773c:	08007791 	.word	0x08007791
 8007740:	080076dd 	.word	0x080076dd
 8007744:	080076dd 	.word	0x080076dd
 8007748:	08007857 	.word	0x08007857
 800774c:	680b      	ldr	r3, [r1, #0]
 800774e:	1d1a      	adds	r2, r3, #4
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	600a      	str	r2, [r1, #0]
 8007754:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007758:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800775c:	2301      	movs	r3, #1
 800775e:	e0a3      	b.n	80078a8 <_printf_i+0x1f4>
 8007760:	6825      	ldr	r5, [r4, #0]
 8007762:	6808      	ldr	r0, [r1, #0]
 8007764:	062e      	lsls	r6, r5, #24
 8007766:	f100 0304 	add.w	r3, r0, #4
 800776a:	d50a      	bpl.n	8007782 <_printf_i+0xce>
 800776c:	6805      	ldr	r5, [r0, #0]
 800776e:	600b      	str	r3, [r1, #0]
 8007770:	2d00      	cmp	r5, #0
 8007772:	da03      	bge.n	800777c <_printf_i+0xc8>
 8007774:	232d      	movs	r3, #45	; 0x2d
 8007776:	426d      	negs	r5, r5
 8007778:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800777c:	485e      	ldr	r0, [pc, #376]	; (80078f8 <_printf_i+0x244>)
 800777e:	230a      	movs	r3, #10
 8007780:	e019      	b.n	80077b6 <_printf_i+0x102>
 8007782:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007786:	6805      	ldr	r5, [r0, #0]
 8007788:	600b      	str	r3, [r1, #0]
 800778a:	bf18      	it	ne
 800778c:	b22d      	sxthne	r5, r5
 800778e:	e7ef      	b.n	8007770 <_printf_i+0xbc>
 8007790:	680b      	ldr	r3, [r1, #0]
 8007792:	6825      	ldr	r5, [r4, #0]
 8007794:	1d18      	adds	r0, r3, #4
 8007796:	6008      	str	r0, [r1, #0]
 8007798:	0628      	lsls	r0, r5, #24
 800779a:	d501      	bpl.n	80077a0 <_printf_i+0xec>
 800779c:	681d      	ldr	r5, [r3, #0]
 800779e:	e002      	b.n	80077a6 <_printf_i+0xf2>
 80077a0:	0669      	lsls	r1, r5, #25
 80077a2:	d5fb      	bpl.n	800779c <_printf_i+0xe8>
 80077a4:	881d      	ldrh	r5, [r3, #0]
 80077a6:	4854      	ldr	r0, [pc, #336]	; (80078f8 <_printf_i+0x244>)
 80077a8:	2f6f      	cmp	r7, #111	; 0x6f
 80077aa:	bf0c      	ite	eq
 80077ac:	2308      	moveq	r3, #8
 80077ae:	230a      	movne	r3, #10
 80077b0:	2100      	movs	r1, #0
 80077b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80077b6:	6866      	ldr	r6, [r4, #4]
 80077b8:	60a6      	str	r6, [r4, #8]
 80077ba:	2e00      	cmp	r6, #0
 80077bc:	bfa2      	ittt	ge
 80077be:	6821      	ldrge	r1, [r4, #0]
 80077c0:	f021 0104 	bicge.w	r1, r1, #4
 80077c4:	6021      	strge	r1, [r4, #0]
 80077c6:	b90d      	cbnz	r5, 80077cc <_printf_i+0x118>
 80077c8:	2e00      	cmp	r6, #0
 80077ca:	d04d      	beq.n	8007868 <_printf_i+0x1b4>
 80077cc:	4616      	mov	r6, r2
 80077ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80077d2:	fb03 5711 	mls	r7, r3, r1, r5
 80077d6:	5dc7      	ldrb	r7, [r0, r7]
 80077d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80077dc:	462f      	mov	r7, r5
 80077de:	42bb      	cmp	r3, r7
 80077e0:	460d      	mov	r5, r1
 80077e2:	d9f4      	bls.n	80077ce <_printf_i+0x11a>
 80077e4:	2b08      	cmp	r3, #8
 80077e6:	d10b      	bne.n	8007800 <_printf_i+0x14c>
 80077e8:	6823      	ldr	r3, [r4, #0]
 80077ea:	07df      	lsls	r7, r3, #31
 80077ec:	d508      	bpl.n	8007800 <_printf_i+0x14c>
 80077ee:	6923      	ldr	r3, [r4, #16]
 80077f0:	6861      	ldr	r1, [r4, #4]
 80077f2:	4299      	cmp	r1, r3
 80077f4:	bfde      	ittt	le
 80077f6:	2330      	movle	r3, #48	; 0x30
 80077f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80077fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007800:	1b92      	subs	r2, r2, r6
 8007802:	6122      	str	r2, [r4, #16]
 8007804:	f8cd a000 	str.w	sl, [sp]
 8007808:	464b      	mov	r3, r9
 800780a:	aa03      	add	r2, sp, #12
 800780c:	4621      	mov	r1, r4
 800780e:	4640      	mov	r0, r8
 8007810:	f7ff fee2 	bl	80075d8 <_printf_common>
 8007814:	3001      	adds	r0, #1
 8007816:	d14c      	bne.n	80078b2 <_printf_i+0x1fe>
 8007818:	f04f 30ff 	mov.w	r0, #4294967295
 800781c:	b004      	add	sp, #16
 800781e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007822:	4835      	ldr	r0, [pc, #212]	; (80078f8 <_printf_i+0x244>)
 8007824:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007828:	6823      	ldr	r3, [r4, #0]
 800782a:	680e      	ldr	r6, [r1, #0]
 800782c:	061f      	lsls	r7, r3, #24
 800782e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007832:	600e      	str	r6, [r1, #0]
 8007834:	d514      	bpl.n	8007860 <_printf_i+0x1ac>
 8007836:	07d9      	lsls	r1, r3, #31
 8007838:	bf44      	itt	mi
 800783a:	f043 0320 	orrmi.w	r3, r3, #32
 800783e:	6023      	strmi	r3, [r4, #0]
 8007840:	b91d      	cbnz	r5, 800784a <_printf_i+0x196>
 8007842:	6823      	ldr	r3, [r4, #0]
 8007844:	f023 0320 	bic.w	r3, r3, #32
 8007848:	6023      	str	r3, [r4, #0]
 800784a:	2310      	movs	r3, #16
 800784c:	e7b0      	b.n	80077b0 <_printf_i+0xfc>
 800784e:	6823      	ldr	r3, [r4, #0]
 8007850:	f043 0320 	orr.w	r3, r3, #32
 8007854:	6023      	str	r3, [r4, #0]
 8007856:	2378      	movs	r3, #120	; 0x78
 8007858:	4828      	ldr	r0, [pc, #160]	; (80078fc <_printf_i+0x248>)
 800785a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800785e:	e7e3      	b.n	8007828 <_printf_i+0x174>
 8007860:	065e      	lsls	r6, r3, #25
 8007862:	bf48      	it	mi
 8007864:	b2ad      	uxthmi	r5, r5
 8007866:	e7e6      	b.n	8007836 <_printf_i+0x182>
 8007868:	4616      	mov	r6, r2
 800786a:	e7bb      	b.n	80077e4 <_printf_i+0x130>
 800786c:	680b      	ldr	r3, [r1, #0]
 800786e:	6826      	ldr	r6, [r4, #0]
 8007870:	6960      	ldr	r0, [r4, #20]
 8007872:	1d1d      	adds	r5, r3, #4
 8007874:	600d      	str	r5, [r1, #0]
 8007876:	0635      	lsls	r5, r6, #24
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	d501      	bpl.n	8007880 <_printf_i+0x1cc>
 800787c:	6018      	str	r0, [r3, #0]
 800787e:	e002      	b.n	8007886 <_printf_i+0x1d2>
 8007880:	0671      	lsls	r1, r6, #25
 8007882:	d5fb      	bpl.n	800787c <_printf_i+0x1c8>
 8007884:	8018      	strh	r0, [r3, #0]
 8007886:	2300      	movs	r3, #0
 8007888:	6123      	str	r3, [r4, #16]
 800788a:	4616      	mov	r6, r2
 800788c:	e7ba      	b.n	8007804 <_printf_i+0x150>
 800788e:	680b      	ldr	r3, [r1, #0]
 8007890:	1d1a      	adds	r2, r3, #4
 8007892:	600a      	str	r2, [r1, #0]
 8007894:	681e      	ldr	r6, [r3, #0]
 8007896:	6862      	ldr	r2, [r4, #4]
 8007898:	2100      	movs	r1, #0
 800789a:	4630      	mov	r0, r6
 800789c:	f7f8 fd28 	bl	80002f0 <memchr>
 80078a0:	b108      	cbz	r0, 80078a6 <_printf_i+0x1f2>
 80078a2:	1b80      	subs	r0, r0, r6
 80078a4:	6060      	str	r0, [r4, #4]
 80078a6:	6863      	ldr	r3, [r4, #4]
 80078a8:	6123      	str	r3, [r4, #16]
 80078aa:	2300      	movs	r3, #0
 80078ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078b0:	e7a8      	b.n	8007804 <_printf_i+0x150>
 80078b2:	6923      	ldr	r3, [r4, #16]
 80078b4:	4632      	mov	r2, r6
 80078b6:	4649      	mov	r1, r9
 80078b8:	4640      	mov	r0, r8
 80078ba:	47d0      	blx	sl
 80078bc:	3001      	adds	r0, #1
 80078be:	d0ab      	beq.n	8007818 <_printf_i+0x164>
 80078c0:	6823      	ldr	r3, [r4, #0]
 80078c2:	079b      	lsls	r3, r3, #30
 80078c4:	d413      	bmi.n	80078ee <_printf_i+0x23a>
 80078c6:	68e0      	ldr	r0, [r4, #12]
 80078c8:	9b03      	ldr	r3, [sp, #12]
 80078ca:	4298      	cmp	r0, r3
 80078cc:	bfb8      	it	lt
 80078ce:	4618      	movlt	r0, r3
 80078d0:	e7a4      	b.n	800781c <_printf_i+0x168>
 80078d2:	2301      	movs	r3, #1
 80078d4:	4632      	mov	r2, r6
 80078d6:	4649      	mov	r1, r9
 80078d8:	4640      	mov	r0, r8
 80078da:	47d0      	blx	sl
 80078dc:	3001      	adds	r0, #1
 80078de:	d09b      	beq.n	8007818 <_printf_i+0x164>
 80078e0:	3501      	adds	r5, #1
 80078e2:	68e3      	ldr	r3, [r4, #12]
 80078e4:	9903      	ldr	r1, [sp, #12]
 80078e6:	1a5b      	subs	r3, r3, r1
 80078e8:	42ab      	cmp	r3, r5
 80078ea:	dcf2      	bgt.n	80078d2 <_printf_i+0x21e>
 80078ec:	e7eb      	b.n	80078c6 <_printf_i+0x212>
 80078ee:	2500      	movs	r5, #0
 80078f0:	f104 0619 	add.w	r6, r4, #25
 80078f4:	e7f5      	b.n	80078e2 <_printf_i+0x22e>
 80078f6:	bf00      	nop
 80078f8:	08008305 	.word	0x08008305
 80078fc:	08008316 	.word	0x08008316

08007900 <__sread>:
 8007900:	b510      	push	{r4, lr}
 8007902:	460c      	mov	r4, r1
 8007904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007908:	f000 faae 	bl	8007e68 <_read_r>
 800790c:	2800      	cmp	r0, #0
 800790e:	bfab      	itete	ge
 8007910:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007912:	89a3      	ldrhlt	r3, [r4, #12]
 8007914:	181b      	addge	r3, r3, r0
 8007916:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800791a:	bfac      	ite	ge
 800791c:	6563      	strge	r3, [r4, #84]	; 0x54
 800791e:	81a3      	strhlt	r3, [r4, #12]
 8007920:	bd10      	pop	{r4, pc}

08007922 <__swrite>:
 8007922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007926:	461f      	mov	r7, r3
 8007928:	898b      	ldrh	r3, [r1, #12]
 800792a:	05db      	lsls	r3, r3, #23
 800792c:	4605      	mov	r5, r0
 800792e:	460c      	mov	r4, r1
 8007930:	4616      	mov	r6, r2
 8007932:	d505      	bpl.n	8007940 <__swrite+0x1e>
 8007934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007938:	2302      	movs	r3, #2
 800793a:	2200      	movs	r2, #0
 800793c:	f000 f9d0 	bl	8007ce0 <_lseek_r>
 8007940:	89a3      	ldrh	r3, [r4, #12]
 8007942:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007946:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800794a:	81a3      	strh	r3, [r4, #12]
 800794c:	4632      	mov	r2, r6
 800794e:	463b      	mov	r3, r7
 8007950:	4628      	mov	r0, r5
 8007952:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007956:	f000 b869 	b.w	8007a2c <_write_r>

0800795a <__sseek>:
 800795a:	b510      	push	{r4, lr}
 800795c:	460c      	mov	r4, r1
 800795e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007962:	f000 f9bd 	bl	8007ce0 <_lseek_r>
 8007966:	1c43      	adds	r3, r0, #1
 8007968:	89a3      	ldrh	r3, [r4, #12]
 800796a:	bf15      	itete	ne
 800796c:	6560      	strne	r0, [r4, #84]	; 0x54
 800796e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007972:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007976:	81a3      	strheq	r3, [r4, #12]
 8007978:	bf18      	it	ne
 800797a:	81a3      	strhne	r3, [r4, #12]
 800797c:	bd10      	pop	{r4, pc}

0800797e <__sclose>:
 800797e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007982:	f000 b8db 	b.w	8007b3c <_close_r>
	...

08007988 <__swbuf_r>:
 8007988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800798a:	460e      	mov	r6, r1
 800798c:	4614      	mov	r4, r2
 800798e:	4605      	mov	r5, r0
 8007990:	b118      	cbz	r0, 800799a <__swbuf_r+0x12>
 8007992:	6983      	ldr	r3, [r0, #24]
 8007994:	b90b      	cbnz	r3, 800799a <__swbuf_r+0x12>
 8007996:	f7ff faab 	bl	8006ef0 <__sinit>
 800799a:	4b21      	ldr	r3, [pc, #132]	; (8007a20 <__swbuf_r+0x98>)
 800799c:	429c      	cmp	r4, r3
 800799e:	d12b      	bne.n	80079f8 <__swbuf_r+0x70>
 80079a0:	686c      	ldr	r4, [r5, #4]
 80079a2:	69a3      	ldr	r3, [r4, #24]
 80079a4:	60a3      	str	r3, [r4, #8]
 80079a6:	89a3      	ldrh	r3, [r4, #12]
 80079a8:	071a      	lsls	r2, r3, #28
 80079aa:	d52f      	bpl.n	8007a0c <__swbuf_r+0x84>
 80079ac:	6923      	ldr	r3, [r4, #16]
 80079ae:	b36b      	cbz	r3, 8007a0c <__swbuf_r+0x84>
 80079b0:	6923      	ldr	r3, [r4, #16]
 80079b2:	6820      	ldr	r0, [r4, #0]
 80079b4:	1ac0      	subs	r0, r0, r3
 80079b6:	6963      	ldr	r3, [r4, #20]
 80079b8:	b2f6      	uxtb	r6, r6
 80079ba:	4283      	cmp	r3, r0
 80079bc:	4637      	mov	r7, r6
 80079be:	dc04      	bgt.n	80079ca <__swbuf_r+0x42>
 80079c0:	4621      	mov	r1, r4
 80079c2:	4628      	mov	r0, r5
 80079c4:	f000 f950 	bl	8007c68 <_fflush_r>
 80079c8:	bb30      	cbnz	r0, 8007a18 <__swbuf_r+0x90>
 80079ca:	68a3      	ldr	r3, [r4, #8]
 80079cc:	3b01      	subs	r3, #1
 80079ce:	60a3      	str	r3, [r4, #8]
 80079d0:	6823      	ldr	r3, [r4, #0]
 80079d2:	1c5a      	adds	r2, r3, #1
 80079d4:	6022      	str	r2, [r4, #0]
 80079d6:	701e      	strb	r6, [r3, #0]
 80079d8:	6963      	ldr	r3, [r4, #20]
 80079da:	3001      	adds	r0, #1
 80079dc:	4283      	cmp	r3, r0
 80079de:	d004      	beq.n	80079ea <__swbuf_r+0x62>
 80079e0:	89a3      	ldrh	r3, [r4, #12]
 80079e2:	07db      	lsls	r3, r3, #31
 80079e4:	d506      	bpl.n	80079f4 <__swbuf_r+0x6c>
 80079e6:	2e0a      	cmp	r6, #10
 80079e8:	d104      	bne.n	80079f4 <__swbuf_r+0x6c>
 80079ea:	4621      	mov	r1, r4
 80079ec:	4628      	mov	r0, r5
 80079ee:	f000 f93b 	bl	8007c68 <_fflush_r>
 80079f2:	b988      	cbnz	r0, 8007a18 <__swbuf_r+0x90>
 80079f4:	4638      	mov	r0, r7
 80079f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079f8:	4b0a      	ldr	r3, [pc, #40]	; (8007a24 <__swbuf_r+0x9c>)
 80079fa:	429c      	cmp	r4, r3
 80079fc:	d101      	bne.n	8007a02 <__swbuf_r+0x7a>
 80079fe:	68ac      	ldr	r4, [r5, #8]
 8007a00:	e7cf      	b.n	80079a2 <__swbuf_r+0x1a>
 8007a02:	4b09      	ldr	r3, [pc, #36]	; (8007a28 <__swbuf_r+0xa0>)
 8007a04:	429c      	cmp	r4, r3
 8007a06:	bf08      	it	eq
 8007a08:	68ec      	ldreq	r4, [r5, #12]
 8007a0a:	e7ca      	b.n	80079a2 <__swbuf_r+0x1a>
 8007a0c:	4621      	mov	r1, r4
 8007a0e:	4628      	mov	r0, r5
 8007a10:	f000 f81e 	bl	8007a50 <__swsetup_r>
 8007a14:	2800      	cmp	r0, #0
 8007a16:	d0cb      	beq.n	80079b0 <__swbuf_r+0x28>
 8007a18:	f04f 37ff 	mov.w	r7, #4294967295
 8007a1c:	e7ea      	b.n	80079f4 <__swbuf_r+0x6c>
 8007a1e:	bf00      	nop
 8007a20:	080082b4 	.word	0x080082b4
 8007a24:	080082d4 	.word	0x080082d4
 8007a28:	08008294 	.word	0x08008294

08007a2c <_write_r>:
 8007a2c:	b538      	push	{r3, r4, r5, lr}
 8007a2e:	4d07      	ldr	r5, [pc, #28]	; (8007a4c <_write_r+0x20>)
 8007a30:	4604      	mov	r4, r0
 8007a32:	4608      	mov	r0, r1
 8007a34:	4611      	mov	r1, r2
 8007a36:	2200      	movs	r2, #0
 8007a38:	602a      	str	r2, [r5, #0]
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	f7f9 fb03 	bl	8001046 <_write>
 8007a40:	1c43      	adds	r3, r0, #1
 8007a42:	d102      	bne.n	8007a4a <_write_r+0x1e>
 8007a44:	682b      	ldr	r3, [r5, #0]
 8007a46:	b103      	cbz	r3, 8007a4a <_write_r+0x1e>
 8007a48:	6023      	str	r3, [r4, #0]
 8007a4a:	bd38      	pop	{r3, r4, r5, pc}
 8007a4c:	240002ec 	.word	0x240002ec

08007a50 <__swsetup_r>:
 8007a50:	4b32      	ldr	r3, [pc, #200]	; (8007b1c <__swsetup_r+0xcc>)
 8007a52:	b570      	push	{r4, r5, r6, lr}
 8007a54:	681d      	ldr	r5, [r3, #0]
 8007a56:	4606      	mov	r6, r0
 8007a58:	460c      	mov	r4, r1
 8007a5a:	b125      	cbz	r5, 8007a66 <__swsetup_r+0x16>
 8007a5c:	69ab      	ldr	r3, [r5, #24]
 8007a5e:	b913      	cbnz	r3, 8007a66 <__swsetup_r+0x16>
 8007a60:	4628      	mov	r0, r5
 8007a62:	f7ff fa45 	bl	8006ef0 <__sinit>
 8007a66:	4b2e      	ldr	r3, [pc, #184]	; (8007b20 <__swsetup_r+0xd0>)
 8007a68:	429c      	cmp	r4, r3
 8007a6a:	d10f      	bne.n	8007a8c <__swsetup_r+0x3c>
 8007a6c:	686c      	ldr	r4, [r5, #4]
 8007a6e:	89a3      	ldrh	r3, [r4, #12]
 8007a70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a74:	0719      	lsls	r1, r3, #28
 8007a76:	d42c      	bmi.n	8007ad2 <__swsetup_r+0x82>
 8007a78:	06dd      	lsls	r5, r3, #27
 8007a7a:	d411      	bmi.n	8007aa0 <__swsetup_r+0x50>
 8007a7c:	2309      	movs	r3, #9
 8007a7e:	6033      	str	r3, [r6, #0]
 8007a80:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007a84:	81a3      	strh	r3, [r4, #12]
 8007a86:	f04f 30ff 	mov.w	r0, #4294967295
 8007a8a:	e03e      	b.n	8007b0a <__swsetup_r+0xba>
 8007a8c:	4b25      	ldr	r3, [pc, #148]	; (8007b24 <__swsetup_r+0xd4>)
 8007a8e:	429c      	cmp	r4, r3
 8007a90:	d101      	bne.n	8007a96 <__swsetup_r+0x46>
 8007a92:	68ac      	ldr	r4, [r5, #8]
 8007a94:	e7eb      	b.n	8007a6e <__swsetup_r+0x1e>
 8007a96:	4b24      	ldr	r3, [pc, #144]	; (8007b28 <__swsetup_r+0xd8>)
 8007a98:	429c      	cmp	r4, r3
 8007a9a:	bf08      	it	eq
 8007a9c:	68ec      	ldreq	r4, [r5, #12]
 8007a9e:	e7e6      	b.n	8007a6e <__swsetup_r+0x1e>
 8007aa0:	0758      	lsls	r0, r3, #29
 8007aa2:	d512      	bpl.n	8007aca <__swsetup_r+0x7a>
 8007aa4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007aa6:	b141      	cbz	r1, 8007aba <__swsetup_r+0x6a>
 8007aa8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007aac:	4299      	cmp	r1, r3
 8007aae:	d002      	beq.n	8007ab6 <__swsetup_r+0x66>
 8007ab0:	4630      	mov	r0, r6
 8007ab2:	f7ff f83d 	bl	8006b30 <_free_r>
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	6363      	str	r3, [r4, #52]	; 0x34
 8007aba:	89a3      	ldrh	r3, [r4, #12]
 8007abc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007ac0:	81a3      	strh	r3, [r4, #12]
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	6063      	str	r3, [r4, #4]
 8007ac6:	6923      	ldr	r3, [r4, #16]
 8007ac8:	6023      	str	r3, [r4, #0]
 8007aca:	89a3      	ldrh	r3, [r4, #12]
 8007acc:	f043 0308 	orr.w	r3, r3, #8
 8007ad0:	81a3      	strh	r3, [r4, #12]
 8007ad2:	6923      	ldr	r3, [r4, #16]
 8007ad4:	b94b      	cbnz	r3, 8007aea <__swsetup_r+0x9a>
 8007ad6:	89a3      	ldrh	r3, [r4, #12]
 8007ad8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007adc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ae0:	d003      	beq.n	8007aea <__swsetup_r+0x9a>
 8007ae2:	4621      	mov	r1, r4
 8007ae4:	4630      	mov	r0, r6
 8007ae6:	f000 f931 	bl	8007d4c <__smakebuf_r>
 8007aea:	89a0      	ldrh	r0, [r4, #12]
 8007aec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007af0:	f010 0301 	ands.w	r3, r0, #1
 8007af4:	d00a      	beq.n	8007b0c <__swsetup_r+0xbc>
 8007af6:	2300      	movs	r3, #0
 8007af8:	60a3      	str	r3, [r4, #8]
 8007afa:	6963      	ldr	r3, [r4, #20]
 8007afc:	425b      	negs	r3, r3
 8007afe:	61a3      	str	r3, [r4, #24]
 8007b00:	6923      	ldr	r3, [r4, #16]
 8007b02:	b943      	cbnz	r3, 8007b16 <__swsetup_r+0xc6>
 8007b04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007b08:	d1ba      	bne.n	8007a80 <__swsetup_r+0x30>
 8007b0a:	bd70      	pop	{r4, r5, r6, pc}
 8007b0c:	0781      	lsls	r1, r0, #30
 8007b0e:	bf58      	it	pl
 8007b10:	6963      	ldrpl	r3, [r4, #20]
 8007b12:	60a3      	str	r3, [r4, #8]
 8007b14:	e7f4      	b.n	8007b00 <__swsetup_r+0xb0>
 8007b16:	2000      	movs	r0, #0
 8007b18:	e7f7      	b.n	8007b0a <__swsetup_r+0xba>
 8007b1a:	bf00      	nop
 8007b1c:	24000010 	.word	0x24000010
 8007b20:	080082b4 	.word	0x080082b4
 8007b24:	080082d4 	.word	0x080082d4
 8007b28:	08008294 	.word	0x08008294

08007b2c <abort>:
 8007b2c:	b508      	push	{r3, lr}
 8007b2e:	2006      	movs	r0, #6
 8007b30:	f000 f9d4 	bl	8007edc <raise>
 8007b34:	2001      	movs	r0, #1
 8007b36:	f7f9 fa5f 	bl	8000ff8 <_exit>
	...

08007b3c <_close_r>:
 8007b3c:	b538      	push	{r3, r4, r5, lr}
 8007b3e:	4d06      	ldr	r5, [pc, #24]	; (8007b58 <_close_r+0x1c>)
 8007b40:	2300      	movs	r3, #0
 8007b42:	4604      	mov	r4, r0
 8007b44:	4608      	mov	r0, r1
 8007b46:	602b      	str	r3, [r5, #0]
 8007b48:	f7f9 fa99 	bl	800107e <_close>
 8007b4c:	1c43      	adds	r3, r0, #1
 8007b4e:	d102      	bne.n	8007b56 <_close_r+0x1a>
 8007b50:	682b      	ldr	r3, [r5, #0]
 8007b52:	b103      	cbz	r3, 8007b56 <_close_r+0x1a>
 8007b54:	6023      	str	r3, [r4, #0]
 8007b56:	bd38      	pop	{r3, r4, r5, pc}
 8007b58:	240002ec 	.word	0x240002ec

08007b5c <__sflush_r>:
 8007b5c:	898a      	ldrh	r2, [r1, #12]
 8007b5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b62:	4605      	mov	r5, r0
 8007b64:	0710      	lsls	r0, r2, #28
 8007b66:	460c      	mov	r4, r1
 8007b68:	d458      	bmi.n	8007c1c <__sflush_r+0xc0>
 8007b6a:	684b      	ldr	r3, [r1, #4]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	dc05      	bgt.n	8007b7c <__sflush_r+0x20>
 8007b70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	dc02      	bgt.n	8007b7c <__sflush_r+0x20>
 8007b76:	2000      	movs	r0, #0
 8007b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b7e:	2e00      	cmp	r6, #0
 8007b80:	d0f9      	beq.n	8007b76 <__sflush_r+0x1a>
 8007b82:	2300      	movs	r3, #0
 8007b84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007b88:	682f      	ldr	r7, [r5, #0]
 8007b8a:	602b      	str	r3, [r5, #0]
 8007b8c:	d032      	beq.n	8007bf4 <__sflush_r+0x98>
 8007b8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b90:	89a3      	ldrh	r3, [r4, #12]
 8007b92:	075a      	lsls	r2, r3, #29
 8007b94:	d505      	bpl.n	8007ba2 <__sflush_r+0x46>
 8007b96:	6863      	ldr	r3, [r4, #4]
 8007b98:	1ac0      	subs	r0, r0, r3
 8007b9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b9c:	b10b      	cbz	r3, 8007ba2 <__sflush_r+0x46>
 8007b9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ba0:	1ac0      	subs	r0, r0, r3
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ba8:	6a21      	ldr	r1, [r4, #32]
 8007baa:	4628      	mov	r0, r5
 8007bac:	47b0      	blx	r6
 8007bae:	1c43      	adds	r3, r0, #1
 8007bb0:	89a3      	ldrh	r3, [r4, #12]
 8007bb2:	d106      	bne.n	8007bc2 <__sflush_r+0x66>
 8007bb4:	6829      	ldr	r1, [r5, #0]
 8007bb6:	291d      	cmp	r1, #29
 8007bb8:	d82c      	bhi.n	8007c14 <__sflush_r+0xb8>
 8007bba:	4a2a      	ldr	r2, [pc, #168]	; (8007c64 <__sflush_r+0x108>)
 8007bbc:	40ca      	lsrs	r2, r1
 8007bbe:	07d6      	lsls	r6, r2, #31
 8007bc0:	d528      	bpl.n	8007c14 <__sflush_r+0xb8>
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	6062      	str	r2, [r4, #4]
 8007bc6:	04d9      	lsls	r1, r3, #19
 8007bc8:	6922      	ldr	r2, [r4, #16]
 8007bca:	6022      	str	r2, [r4, #0]
 8007bcc:	d504      	bpl.n	8007bd8 <__sflush_r+0x7c>
 8007bce:	1c42      	adds	r2, r0, #1
 8007bd0:	d101      	bne.n	8007bd6 <__sflush_r+0x7a>
 8007bd2:	682b      	ldr	r3, [r5, #0]
 8007bd4:	b903      	cbnz	r3, 8007bd8 <__sflush_r+0x7c>
 8007bd6:	6560      	str	r0, [r4, #84]	; 0x54
 8007bd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bda:	602f      	str	r7, [r5, #0]
 8007bdc:	2900      	cmp	r1, #0
 8007bde:	d0ca      	beq.n	8007b76 <__sflush_r+0x1a>
 8007be0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007be4:	4299      	cmp	r1, r3
 8007be6:	d002      	beq.n	8007bee <__sflush_r+0x92>
 8007be8:	4628      	mov	r0, r5
 8007bea:	f7fe ffa1 	bl	8006b30 <_free_r>
 8007bee:	2000      	movs	r0, #0
 8007bf0:	6360      	str	r0, [r4, #52]	; 0x34
 8007bf2:	e7c1      	b.n	8007b78 <__sflush_r+0x1c>
 8007bf4:	6a21      	ldr	r1, [r4, #32]
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	4628      	mov	r0, r5
 8007bfa:	47b0      	blx	r6
 8007bfc:	1c41      	adds	r1, r0, #1
 8007bfe:	d1c7      	bne.n	8007b90 <__sflush_r+0x34>
 8007c00:	682b      	ldr	r3, [r5, #0]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d0c4      	beq.n	8007b90 <__sflush_r+0x34>
 8007c06:	2b1d      	cmp	r3, #29
 8007c08:	d001      	beq.n	8007c0e <__sflush_r+0xb2>
 8007c0a:	2b16      	cmp	r3, #22
 8007c0c:	d101      	bne.n	8007c12 <__sflush_r+0xb6>
 8007c0e:	602f      	str	r7, [r5, #0]
 8007c10:	e7b1      	b.n	8007b76 <__sflush_r+0x1a>
 8007c12:	89a3      	ldrh	r3, [r4, #12]
 8007c14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c18:	81a3      	strh	r3, [r4, #12]
 8007c1a:	e7ad      	b.n	8007b78 <__sflush_r+0x1c>
 8007c1c:	690f      	ldr	r7, [r1, #16]
 8007c1e:	2f00      	cmp	r7, #0
 8007c20:	d0a9      	beq.n	8007b76 <__sflush_r+0x1a>
 8007c22:	0793      	lsls	r3, r2, #30
 8007c24:	680e      	ldr	r6, [r1, #0]
 8007c26:	bf08      	it	eq
 8007c28:	694b      	ldreq	r3, [r1, #20]
 8007c2a:	600f      	str	r7, [r1, #0]
 8007c2c:	bf18      	it	ne
 8007c2e:	2300      	movne	r3, #0
 8007c30:	eba6 0807 	sub.w	r8, r6, r7
 8007c34:	608b      	str	r3, [r1, #8]
 8007c36:	f1b8 0f00 	cmp.w	r8, #0
 8007c3a:	dd9c      	ble.n	8007b76 <__sflush_r+0x1a>
 8007c3c:	6a21      	ldr	r1, [r4, #32]
 8007c3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c40:	4643      	mov	r3, r8
 8007c42:	463a      	mov	r2, r7
 8007c44:	4628      	mov	r0, r5
 8007c46:	47b0      	blx	r6
 8007c48:	2800      	cmp	r0, #0
 8007c4a:	dc06      	bgt.n	8007c5a <__sflush_r+0xfe>
 8007c4c:	89a3      	ldrh	r3, [r4, #12]
 8007c4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c52:	81a3      	strh	r3, [r4, #12]
 8007c54:	f04f 30ff 	mov.w	r0, #4294967295
 8007c58:	e78e      	b.n	8007b78 <__sflush_r+0x1c>
 8007c5a:	4407      	add	r7, r0
 8007c5c:	eba8 0800 	sub.w	r8, r8, r0
 8007c60:	e7e9      	b.n	8007c36 <__sflush_r+0xda>
 8007c62:	bf00      	nop
 8007c64:	20400001 	.word	0x20400001

08007c68 <_fflush_r>:
 8007c68:	b538      	push	{r3, r4, r5, lr}
 8007c6a:	690b      	ldr	r3, [r1, #16]
 8007c6c:	4605      	mov	r5, r0
 8007c6e:	460c      	mov	r4, r1
 8007c70:	b913      	cbnz	r3, 8007c78 <_fflush_r+0x10>
 8007c72:	2500      	movs	r5, #0
 8007c74:	4628      	mov	r0, r5
 8007c76:	bd38      	pop	{r3, r4, r5, pc}
 8007c78:	b118      	cbz	r0, 8007c82 <_fflush_r+0x1a>
 8007c7a:	6983      	ldr	r3, [r0, #24]
 8007c7c:	b90b      	cbnz	r3, 8007c82 <_fflush_r+0x1a>
 8007c7e:	f7ff f937 	bl	8006ef0 <__sinit>
 8007c82:	4b14      	ldr	r3, [pc, #80]	; (8007cd4 <_fflush_r+0x6c>)
 8007c84:	429c      	cmp	r4, r3
 8007c86:	d11b      	bne.n	8007cc0 <_fflush_r+0x58>
 8007c88:	686c      	ldr	r4, [r5, #4]
 8007c8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d0ef      	beq.n	8007c72 <_fflush_r+0xa>
 8007c92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007c94:	07d0      	lsls	r0, r2, #31
 8007c96:	d404      	bmi.n	8007ca2 <_fflush_r+0x3a>
 8007c98:	0599      	lsls	r1, r3, #22
 8007c9a:	d402      	bmi.n	8007ca2 <_fflush_r+0x3a>
 8007c9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c9e:	f7ff f9d7 	bl	8007050 <__retarget_lock_acquire_recursive>
 8007ca2:	4628      	mov	r0, r5
 8007ca4:	4621      	mov	r1, r4
 8007ca6:	f7ff ff59 	bl	8007b5c <__sflush_r>
 8007caa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007cac:	07da      	lsls	r2, r3, #31
 8007cae:	4605      	mov	r5, r0
 8007cb0:	d4e0      	bmi.n	8007c74 <_fflush_r+0xc>
 8007cb2:	89a3      	ldrh	r3, [r4, #12]
 8007cb4:	059b      	lsls	r3, r3, #22
 8007cb6:	d4dd      	bmi.n	8007c74 <_fflush_r+0xc>
 8007cb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cba:	f7ff f9ca 	bl	8007052 <__retarget_lock_release_recursive>
 8007cbe:	e7d9      	b.n	8007c74 <_fflush_r+0xc>
 8007cc0:	4b05      	ldr	r3, [pc, #20]	; (8007cd8 <_fflush_r+0x70>)
 8007cc2:	429c      	cmp	r4, r3
 8007cc4:	d101      	bne.n	8007cca <_fflush_r+0x62>
 8007cc6:	68ac      	ldr	r4, [r5, #8]
 8007cc8:	e7df      	b.n	8007c8a <_fflush_r+0x22>
 8007cca:	4b04      	ldr	r3, [pc, #16]	; (8007cdc <_fflush_r+0x74>)
 8007ccc:	429c      	cmp	r4, r3
 8007cce:	bf08      	it	eq
 8007cd0:	68ec      	ldreq	r4, [r5, #12]
 8007cd2:	e7da      	b.n	8007c8a <_fflush_r+0x22>
 8007cd4:	080082b4 	.word	0x080082b4
 8007cd8:	080082d4 	.word	0x080082d4
 8007cdc:	08008294 	.word	0x08008294

08007ce0 <_lseek_r>:
 8007ce0:	b538      	push	{r3, r4, r5, lr}
 8007ce2:	4d07      	ldr	r5, [pc, #28]	; (8007d00 <_lseek_r+0x20>)
 8007ce4:	4604      	mov	r4, r0
 8007ce6:	4608      	mov	r0, r1
 8007ce8:	4611      	mov	r1, r2
 8007cea:	2200      	movs	r2, #0
 8007cec:	602a      	str	r2, [r5, #0]
 8007cee:	461a      	mov	r2, r3
 8007cf0:	f7f9 f9ec 	bl	80010cc <_lseek>
 8007cf4:	1c43      	adds	r3, r0, #1
 8007cf6:	d102      	bne.n	8007cfe <_lseek_r+0x1e>
 8007cf8:	682b      	ldr	r3, [r5, #0]
 8007cfa:	b103      	cbz	r3, 8007cfe <_lseek_r+0x1e>
 8007cfc:	6023      	str	r3, [r4, #0]
 8007cfe:	bd38      	pop	{r3, r4, r5, pc}
 8007d00:	240002ec 	.word	0x240002ec

08007d04 <__swhatbuf_r>:
 8007d04:	b570      	push	{r4, r5, r6, lr}
 8007d06:	460e      	mov	r6, r1
 8007d08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d0c:	2900      	cmp	r1, #0
 8007d0e:	b096      	sub	sp, #88	; 0x58
 8007d10:	4614      	mov	r4, r2
 8007d12:	461d      	mov	r5, r3
 8007d14:	da07      	bge.n	8007d26 <__swhatbuf_r+0x22>
 8007d16:	2300      	movs	r3, #0
 8007d18:	602b      	str	r3, [r5, #0]
 8007d1a:	89b3      	ldrh	r3, [r6, #12]
 8007d1c:	061a      	lsls	r2, r3, #24
 8007d1e:	d410      	bmi.n	8007d42 <__swhatbuf_r+0x3e>
 8007d20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d24:	e00e      	b.n	8007d44 <__swhatbuf_r+0x40>
 8007d26:	466a      	mov	r2, sp
 8007d28:	f000 f8f4 	bl	8007f14 <_fstat_r>
 8007d2c:	2800      	cmp	r0, #0
 8007d2e:	dbf2      	blt.n	8007d16 <__swhatbuf_r+0x12>
 8007d30:	9a01      	ldr	r2, [sp, #4]
 8007d32:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007d36:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007d3a:	425a      	negs	r2, r3
 8007d3c:	415a      	adcs	r2, r3
 8007d3e:	602a      	str	r2, [r5, #0]
 8007d40:	e7ee      	b.n	8007d20 <__swhatbuf_r+0x1c>
 8007d42:	2340      	movs	r3, #64	; 0x40
 8007d44:	2000      	movs	r0, #0
 8007d46:	6023      	str	r3, [r4, #0]
 8007d48:	b016      	add	sp, #88	; 0x58
 8007d4a:	bd70      	pop	{r4, r5, r6, pc}

08007d4c <__smakebuf_r>:
 8007d4c:	898b      	ldrh	r3, [r1, #12]
 8007d4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d50:	079d      	lsls	r5, r3, #30
 8007d52:	4606      	mov	r6, r0
 8007d54:	460c      	mov	r4, r1
 8007d56:	d507      	bpl.n	8007d68 <__smakebuf_r+0x1c>
 8007d58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007d5c:	6023      	str	r3, [r4, #0]
 8007d5e:	6123      	str	r3, [r4, #16]
 8007d60:	2301      	movs	r3, #1
 8007d62:	6163      	str	r3, [r4, #20]
 8007d64:	b002      	add	sp, #8
 8007d66:	bd70      	pop	{r4, r5, r6, pc}
 8007d68:	ab01      	add	r3, sp, #4
 8007d6a:	466a      	mov	r2, sp
 8007d6c:	f7ff ffca 	bl	8007d04 <__swhatbuf_r>
 8007d70:	9900      	ldr	r1, [sp, #0]
 8007d72:	4605      	mov	r5, r0
 8007d74:	4630      	mov	r0, r6
 8007d76:	f7fe ff2b 	bl	8006bd0 <_malloc_r>
 8007d7a:	b948      	cbnz	r0, 8007d90 <__smakebuf_r+0x44>
 8007d7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d80:	059a      	lsls	r2, r3, #22
 8007d82:	d4ef      	bmi.n	8007d64 <__smakebuf_r+0x18>
 8007d84:	f023 0303 	bic.w	r3, r3, #3
 8007d88:	f043 0302 	orr.w	r3, r3, #2
 8007d8c:	81a3      	strh	r3, [r4, #12]
 8007d8e:	e7e3      	b.n	8007d58 <__smakebuf_r+0xc>
 8007d90:	4b0d      	ldr	r3, [pc, #52]	; (8007dc8 <__smakebuf_r+0x7c>)
 8007d92:	62b3      	str	r3, [r6, #40]	; 0x28
 8007d94:	89a3      	ldrh	r3, [r4, #12]
 8007d96:	6020      	str	r0, [r4, #0]
 8007d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d9c:	81a3      	strh	r3, [r4, #12]
 8007d9e:	9b00      	ldr	r3, [sp, #0]
 8007da0:	6163      	str	r3, [r4, #20]
 8007da2:	9b01      	ldr	r3, [sp, #4]
 8007da4:	6120      	str	r0, [r4, #16]
 8007da6:	b15b      	cbz	r3, 8007dc0 <__smakebuf_r+0x74>
 8007da8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dac:	4630      	mov	r0, r6
 8007dae:	f000 f8c3 	bl	8007f38 <_isatty_r>
 8007db2:	b128      	cbz	r0, 8007dc0 <__smakebuf_r+0x74>
 8007db4:	89a3      	ldrh	r3, [r4, #12]
 8007db6:	f023 0303 	bic.w	r3, r3, #3
 8007dba:	f043 0301 	orr.w	r3, r3, #1
 8007dbe:	81a3      	strh	r3, [r4, #12]
 8007dc0:	89a0      	ldrh	r0, [r4, #12]
 8007dc2:	4305      	orrs	r5, r0
 8007dc4:	81a5      	strh	r5, [r4, #12]
 8007dc6:	e7cd      	b.n	8007d64 <__smakebuf_r+0x18>
 8007dc8:	08006e89 	.word	0x08006e89

08007dcc <memcpy>:
 8007dcc:	440a      	add	r2, r1
 8007dce:	4291      	cmp	r1, r2
 8007dd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007dd4:	d100      	bne.n	8007dd8 <memcpy+0xc>
 8007dd6:	4770      	bx	lr
 8007dd8:	b510      	push	{r4, lr}
 8007dda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007de2:	4291      	cmp	r1, r2
 8007de4:	d1f9      	bne.n	8007dda <memcpy+0xe>
 8007de6:	bd10      	pop	{r4, pc}

08007de8 <memmove>:
 8007de8:	4288      	cmp	r0, r1
 8007dea:	b510      	push	{r4, lr}
 8007dec:	eb01 0402 	add.w	r4, r1, r2
 8007df0:	d902      	bls.n	8007df8 <memmove+0x10>
 8007df2:	4284      	cmp	r4, r0
 8007df4:	4623      	mov	r3, r4
 8007df6:	d807      	bhi.n	8007e08 <memmove+0x20>
 8007df8:	1e43      	subs	r3, r0, #1
 8007dfa:	42a1      	cmp	r1, r4
 8007dfc:	d008      	beq.n	8007e10 <memmove+0x28>
 8007dfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e06:	e7f8      	b.n	8007dfa <memmove+0x12>
 8007e08:	4402      	add	r2, r0
 8007e0a:	4601      	mov	r1, r0
 8007e0c:	428a      	cmp	r2, r1
 8007e0e:	d100      	bne.n	8007e12 <memmove+0x2a>
 8007e10:	bd10      	pop	{r4, pc}
 8007e12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e1a:	e7f7      	b.n	8007e0c <memmove+0x24>

08007e1c <_realloc_r>:
 8007e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e1e:	4607      	mov	r7, r0
 8007e20:	4614      	mov	r4, r2
 8007e22:	460e      	mov	r6, r1
 8007e24:	b921      	cbnz	r1, 8007e30 <_realloc_r+0x14>
 8007e26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007e2a:	4611      	mov	r1, r2
 8007e2c:	f7fe bed0 	b.w	8006bd0 <_malloc_r>
 8007e30:	b922      	cbnz	r2, 8007e3c <_realloc_r+0x20>
 8007e32:	f7fe fe7d 	bl	8006b30 <_free_r>
 8007e36:	4625      	mov	r5, r4
 8007e38:	4628      	mov	r0, r5
 8007e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e3c:	f000 f88c 	bl	8007f58 <_malloc_usable_size_r>
 8007e40:	42a0      	cmp	r0, r4
 8007e42:	d20f      	bcs.n	8007e64 <_realloc_r+0x48>
 8007e44:	4621      	mov	r1, r4
 8007e46:	4638      	mov	r0, r7
 8007e48:	f7fe fec2 	bl	8006bd0 <_malloc_r>
 8007e4c:	4605      	mov	r5, r0
 8007e4e:	2800      	cmp	r0, #0
 8007e50:	d0f2      	beq.n	8007e38 <_realloc_r+0x1c>
 8007e52:	4631      	mov	r1, r6
 8007e54:	4622      	mov	r2, r4
 8007e56:	f7ff ffb9 	bl	8007dcc <memcpy>
 8007e5a:	4631      	mov	r1, r6
 8007e5c:	4638      	mov	r0, r7
 8007e5e:	f7fe fe67 	bl	8006b30 <_free_r>
 8007e62:	e7e9      	b.n	8007e38 <_realloc_r+0x1c>
 8007e64:	4635      	mov	r5, r6
 8007e66:	e7e7      	b.n	8007e38 <_realloc_r+0x1c>

08007e68 <_read_r>:
 8007e68:	b538      	push	{r3, r4, r5, lr}
 8007e6a:	4d07      	ldr	r5, [pc, #28]	; (8007e88 <_read_r+0x20>)
 8007e6c:	4604      	mov	r4, r0
 8007e6e:	4608      	mov	r0, r1
 8007e70:	4611      	mov	r1, r2
 8007e72:	2200      	movs	r2, #0
 8007e74:	602a      	str	r2, [r5, #0]
 8007e76:	461a      	mov	r2, r3
 8007e78:	f7f9 f8c8 	bl	800100c <_read>
 8007e7c:	1c43      	adds	r3, r0, #1
 8007e7e:	d102      	bne.n	8007e86 <_read_r+0x1e>
 8007e80:	682b      	ldr	r3, [r5, #0]
 8007e82:	b103      	cbz	r3, 8007e86 <_read_r+0x1e>
 8007e84:	6023      	str	r3, [r4, #0]
 8007e86:	bd38      	pop	{r3, r4, r5, pc}
 8007e88:	240002ec 	.word	0x240002ec

08007e8c <_raise_r>:
 8007e8c:	291f      	cmp	r1, #31
 8007e8e:	b538      	push	{r3, r4, r5, lr}
 8007e90:	4604      	mov	r4, r0
 8007e92:	460d      	mov	r5, r1
 8007e94:	d904      	bls.n	8007ea0 <_raise_r+0x14>
 8007e96:	2316      	movs	r3, #22
 8007e98:	6003      	str	r3, [r0, #0]
 8007e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e9e:	bd38      	pop	{r3, r4, r5, pc}
 8007ea0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007ea2:	b112      	cbz	r2, 8007eaa <_raise_r+0x1e>
 8007ea4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007ea8:	b94b      	cbnz	r3, 8007ebe <_raise_r+0x32>
 8007eaa:	4620      	mov	r0, r4
 8007eac:	f000 f830 	bl	8007f10 <_getpid_r>
 8007eb0:	462a      	mov	r2, r5
 8007eb2:	4601      	mov	r1, r0
 8007eb4:	4620      	mov	r0, r4
 8007eb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007eba:	f000 b817 	b.w	8007eec <_kill_r>
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d00a      	beq.n	8007ed8 <_raise_r+0x4c>
 8007ec2:	1c59      	adds	r1, r3, #1
 8007ec4:	d103      	bne.n	8007ece <_raise_r+0x42>
 8007ec6:	2316      	movs	r3, #22
 8007ec8:	6003      	str	r3, [r0, #0]
 8007eca:	2001      	movs	r0, #1
 8007ecc:	e7e7      	b.n	8007e9e <_raise_r+0x12>
 8007ece:	2400      	movs	r4, #0
 8007ed0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007ed4:	4628      	mov	r0, r5
 8007ed6:	4798      	blx	r3
 8007ed8:	2000      	movs	r0, #0
 8007eda:	e7e0      	b.n	8007e9e <_raise_r+0x12>

08007edc <raise>:
 8007edc:	4b02      	ldr	r3, [pc, #8]	; (8007ee8 <raise+0xc>)
 8007ede:	4601      	mov	r1, r0
 8007ee0:	6818      	ldr	r0, [r3, #0]
 8007ee2:	f7ff bfd3 	b.w	8007e8c <_raise_r>
 8007ee6:	bf00      	nop
 8007ee8:	24000010 	.word	0x24000010

08007eec <_kill_r>:
 8007eec:	b538      	push	{r3, r4, r5, lr}
 8007eee:	4d07      	ldr	r5, [pc, #28]	; (8007f0c <_kill_r+0x20>)
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	4604      	mov	r4, r0
 8007ef4:	4608      	mov	r0, r1
 8007ef6:	4611      	mov	r1, r2
 8007ef8:	602b      	str	r3, [r5, #0]
 8007efa:	f7f9 f86d 	bl	8000fd8 <_kill>
 8007efe:	1c43      	adds	r3, r0, #1
 8007f00:	d102      	bne.n	8007f08 <_kill_r+0x1c>
 8007f02:	682b      	ldr	r3, [r5, #0]
 8007f04:	b103      	cbz	r3, 8007f08 <_kill_r+0x1c>
 8007f06:	6023      	str	r3, [r4, #0]
 8007f08:	bd38      	pop	{r3, r4, r5, pc}
 8007f0a:	bf00      	nop
 8007f0c:	240002ec 	.word	0x240002ec

08007f10 <_getpid_r>:
 8007f10:	f7f9 b85a 	b.w	8000fc8 <_getpid>

08007f14 <_fstat_r>:
 8007f14:	b538      	push	{r3, r4, r5, lr}
 8007f16:	4d07      	ldr	r5, [pc, #28]	; (8007f34 <_fstat_r+0x20>)
 8007f18:	2300      	movs	r3, #0
 8007f1a:	4604      	mov	r4, r0
 8007f1c:	4608      	mov	r0, r1
 8007f1e:	4611      	mov	r1, r2
 8007f20:	602b      	str	r3, [r5, #0]
 8007f22:	f7f9 f8b8 	bl	8001096 <_fstat>
 8007f26:	1c43      	adds	r3, r0, #1
 8007f28:	d102      	bne.n	8007f30 <_fstat_r+0x1c>
 8007f2a:	682b      	ldr	r3, [r5, #0]
 8007f2c:	b103      	cbz	r3, 8007f30 <_fstat_r+0x1c>
 8007f2e:	6023      	str	r3, [r4, #0]
 8007f30:	bd38      	pop	{r3, r4, r5, pc}
 8007f32:	bf00      	nop
 8007f34:	240002ec 	.word	0x240002ec

08007f38 <_isatty_r>:
 8007f38:	b538      	push	{r3, r4, r5, lr}
 8007f3a:	4d06      	ldr	r5, [pc, #24]	; (8007f54 <_isatty_r+0x1c>)
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	4604      	mov	r4, r0
 8007f40:	4608      	mov	r0, r1
 8007f42:	602b      	str	r3, [r5, #0]
 8007f44:	f7f9 f8b7 	bl	80010b6 <_isatty>
 8007f48:	1c43      	adds	r3, r0, #1
 8007f4a:	d102      	bne.n	8007f52 <_isatty_r+0x1a>
 8007f4c:	682b      	ldr	r3, [r5, #0]
 8007f4e:	b103      	cbz	r3, 8007f52 <_isatty_r+0x1a>
 8007f50:	6023      	str	r3, [r4, #0]
 8007f52:	bd38      	pop	{r3, r4, r5, pc}
 8007f54:	240002ec 	.word	0x240002ec

08007f58 <_malloc_usable_size_r>:
 8007f58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f5c:	1f18      	subs	r0, r3, #4
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	bfbc      	itt	lt
 8007f62:	580b      	ldrlt	r3, [r1, r0]
 8007f64:	18c0      	addlt	r0, r0, r3
 8007f66:	4770      	bx	lr

08007f68 <_init>:
 8007f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f6a:	bf00      	nop
 8007f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f6e:	bc08      	pop	{r3}
 8007f70:	469e      	mov	lr, r3
 8007f72:	4770      	bx	lr

08007f74 <_fini>:
 8007f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f76:	bf00      	nop
 8007f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f7a:	bc08      	pop	{r3}
 8007f7c:	469e      	mov	lr, r3
 8007f7e:	4770      	bx	lr
