
H747_FTP_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010790  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f50  08010a30  08010a30  00020a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011980  08011980  00021980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011988  08011988  00021988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801198c  0801198c  0002198c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000dc  20000000  08011990  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000016a8  200000dc  08011a6c  000300dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20001784  08011a6c  00031784  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002f5b4  00000000  00000000  0003010a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005482  00000000  00000000  0005f6be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000017b0  00000000  00000000  00064b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001610  00000000  00000000  000662f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00044ce6  00000000  00000000  00067900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00020b3f  00000000  00000000  000ac5e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001a50c9  00000000  00000000  000cd125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  002721ee  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006f2c  00000000  00000000  00272244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	200000dc 	.word	0x200000dc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08010a18 	.word	0x08010a18

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	200000e0 	.word	0x200000e0
 80002dc:	08010a18 	.word	0x08010a18

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800068c:	4b3f      	ldr	r3, [pc, #252]	; (800078c <SystemInit+0x104>)
 800068e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000692:	4a3e      	ldr	r2, [pc, #248]	; (800078c <SystemInit+0x104>)
 8000694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800069c:	4b3b      	ldr	r3, [pc, #236]	; (800078c <SystemInit+0x104>)
 800069e:	691b      	ldr	r3, [r3, #16]
 80006a0:	4a3a      	ldr	r2, [pc, #232]	; (800078c <SystemInit+0x104>)
 80006a2:	f043 0310 	orr.w	r3, r3, #16
 80006a6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0x108>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f003 030f 	and.w	r3, r3, #15
 80006b0:	2b06      	cmp	r3, #6
 80006b2:	d807      	bhi.n	80006c4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b4:	4b36      	ldr	r3, [pc, #216]	; (8000790 <SystemInit+0x108>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f023 030f 	bic.w	r3, r3, #15
 80006bc:	4a34      	ldr	r2, [pc, #208]	; (8000790 <SystemInit+0x108>)
 80006be:	f043 0307 	orr.w	r3, r3, #7
 80006c2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c4:	4b33      	ldr	r3, [pc, #204]	; (8000794 <SystemInit+0x10c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x10c>)
 80006ca:	f043 0301 	orr.w	r3, r3, #1
 80006ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006d0:	4b30      	ldr	r3, [pc, #192]	; (8000794 <SystemInit+0x10c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d6:	4b2f      	ldr	r3, [pc, #188]	; (8000794 <SystemInit+0x10c>)
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	492e      	ldr	r1, [pc, #184]	; (8000794 <SystemInit+0x10c>)
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x110>)
 80006de:	4013      	ands	r3, r2
 80006e0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006e2:	4b2b      	ldr	r3, [pc, #172]	; (8000790 <SystemInit+0x108>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f003 0308 	and.w	r3, r3, #8
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d007      	beq.n	80006fe <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ee:	4b28      	ldr	r3, [pc, #160]	; (8000790 <SystemInit+0x108>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f023 030f 	bic.w	r3, r3, #15
 80006f6:	4a26      	ldr	r2, [pc, #152]	; (8000790 <SystemInit+0x108>)
 80006f8:	f043 0307 	orr.w	r3, r3, #7
 80006fc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fe:	4b25      	ldr	r3, [pc, #148]	; (8000794 <SystemInit+0x10c>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000704:	4b23      	ldr	r3, [pc, #140]	; (8000794 <SystemInit+0x10c>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800070a:	4b22      	ldr	r3, [pc, #136]	; (8000794 <SystemInit+0x10c>)
 800070c:	2200      	movs	r2, #0
 800070e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000710:	4b20      	ldr	r3, [pc, #128]	; (8000794 <SystemInit+0x10c>)
 8000712:	4a22      	ldr	r2, [pc, #136]	; (800079c <SystemInit+0x114>)
 8000714:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000716:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <SystemInit+0x10c>)
 8000718:	4a21      	ldr	r2, [pc, #132]	; (80007a0 <SystemInit+0x118>)
 800071a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800071c:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <SystemInit+0x10c>)
 800071e:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <SystemInit+0x11c>)
 8000720:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000722:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <SystemInit+0x10c>)
 8000724:	2200      	movs	r2, #0
 8000726:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000728:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <SystemInit+0x10c>)
 800072a:	4a1e      	ldr	r2, [pc, #120]	; (80007a4 <SystemInit+0x11c>)
 800072c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072e:	4b19      	ldr	r3, [pc, #100]	; (8000794 <SystemInit+0x10c>)
 8000730:	2200      	movs	r2, #0
 8000732:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000734:	4b17      	ldr	r3, [pc, #92]	; (8000794 <SystemInit+0x10c>)
 8000736:	4a1b      	ldr	r2, [pc, #108]	; (80007a4 <SystemInit+0x11c>)
 8000738:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800073a:	4b16      	ldr	r3, [pc, #88]	; (8000794 <SystemInit+0x10c>)
 800073c:	2200      	movs	r2, #0
 800073e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <SystemInit+0x10c>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a13      	ldr	r2, [pc, #76]	; (8000794 <SystemInit+0x10c>)
 8000746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800074a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <SystemInit+0x10c>)
 800074e:	2200      	movs	r2, #0
 8000750:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <SystemInit+0x120>)
 8000754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000756:	4a14      	ldr	r2, [pc, #80]	; (80007a8 <SystemInit+0x120>)
 8000758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800075c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x124>)
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <SystemInit+0x128>)
 8000764:	4013      	ands	r3, r2
 8000766:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800076a:	d202      	bcs.n	8000772 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x12c>)
 800076e:	2201      	movs	r2, #1
 8000770:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <SystemInit+0x130>)
 8000774:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000778:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <SystemInit+0x104>)
 800077c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000780:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	e000ed00 	.word	0xe000ed00
 8000790:	52002000 	.word	0x52002000
 8000794:	58024400 	.word	0x58024400
 8000798:	eaf6ed7f 	.word	0xeaf6ed7f
 800079c:	02020200 	.word	0x02020200
 80007a0:	01ff0000 	.word	0x01ff0000
 80007a4:	01010280 	.word	0x01010280
 80007a8:	580000c0 	.word	0x580000c0
 80007ac:	5c001000 	.word	0x5c001000
 80007b0:	ffff0000 	.word	0xffff0000
 80007b4:	51008108 	.word	0x51008108
 80007b8:	52004000 	.word	0x52004000

080007bc <__io_putchar>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SDMMC1_SD_Init(void);
static void MX_SPI5_Init(void);

int __io_putchar (int ch) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
	uint8_t c = ch;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart8, &c, 1, 1000);
 80007ca:	f107 010f 	add.w	r1, r7, #15
 80007ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d2:	2201      	movs	r2, #1
 80007d4:	4803      	ldr	r0, [pc, #12]	; (80007e4 <__io_putchar+0x28>)
 80007d6:	f009 fa1e 	bl	8009c16 <HAL_UART_Transmit>
	return ch;
 80007da:	687b      	ldr	r3, [r7, #4]
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3710      	adds	r7, #16
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	200002f8 	.word	0x200002f8

080007e8 <cs_sel>:

void cs_sel()
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOK, GPIO_PIN_1, GPIO_PIN_RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2102      	movs	r1, #2
 80007f0:	4802      	ldr	r0, [pc, #8]	; (80007fc <cs_sel+0x14>)
 80007f2:	f004 fc1b 	bl	800502c <HAL_GPIO_WritePin>
}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	58022800 	.word	0x58022800

08000800 <cs_desel>:

void cs_desel()
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOK, GPIO_PIN_1, GPIO_PIN_SET);
 8000804:	2201      	movs	r2, #1
 8000806:	2102      	movs	r1, #2
 8000808:	4802      	ldr	r0, [pc, #8]	; (8000814 <cs_desel+0x14>)
 800080a:	f004 fc0f 	bl	800502c <HAL_GPIO_WritePin>
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	58022800 	.word	0x58022800

08000818 <spi_rb>:

uint8_t spi_rb(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
	uint8_t rbuf;
	HAL_SPI_Receive(&hspi5, &rbuf, 1, 0xFFFFFFFF);
 800081e:	1df9      	adds	r1, r7, #7
 8000820:	f04f 33ff 	mov.w	r3, #4294967295
 8000824:	2201      	movs	r2, #1
 8000826:	4804      	ldr	r0, [pc, #16]	; (8000838 <spi_rb+0x20>)
 8000828:	f008 f9c6 	bl	8008bb8 <HAL_SPI_Receive>
	return rbuf;
 800082c:	79fb      	ldrb	r3, [r7, #7]
}
 800082e:	4618      	mov	r0, r3
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	2000017c 	.word	0x2000017c

0800083c <spi_wb>:

void spi_wb(uint8_t b)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi5, &b, 1, 0xFFFFFFFF);
 8000846:	1df9      	adds	r1, r7, #7
 8000848:	f04f 33ff 	mov.w	r3, #4294967295
 800084c:	2201      	movs	r2, #1
 800084e:	4803      	ldr	r0, [pc, #12]	; (800085c <spi_wb+0x20>)
 8000850:	f007 ffc0 	bl	80087d4 <HAL_SPI_Transmit>
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	2000017c 	.word	0x2000017c

08000860 <Sd_Card_Manager>:

void Sd_Card_Manager()
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
	if(BSP_SD_Init() == MSD_OK)
 8000864:	f00b fb36 	bl	800bed4 <BSP_SD_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d121      	bne.n	80008b2 <Sd_Card_Manager+0x52>
	{
		fresult = f_mount(&fatfs,"",1);
 800086e:	2201      	movs	r2, #1
 8000870:	4911      	ldr	r1, [pc, #68]	; (80008b8 <Sd_Card_Manager+0x58>)
 8000872:	4812      	ldr	r0, [pc, #72]	; (80008bc <Sd_Card_Manager+0x5c>)
 8000874:	f00d fb02 	bl	800de7c <f_mount>
 8000878:	4603      	mov	r3, r0
 800087a:	461a      	mov	r2, r3
 800087c:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <Sd_Card_Manager+0x60>)
 800087e:	701a      	strb	r2, [r3, #0]

		/* Create File with name "stm32.txt" and file access is write */
		fresult = f_open(&myfile,"stm.txt",FA_CREATE_ALWAYS|FA_WRITE);
 8000880:	220a      	movs	r2, #10
 8000882:	4910      	ldr	r1, [pc, #64]	; (80008c4 <Sd_Card_Manager+0x64>)
 8000884:	4810      	ldr	r0, [pc, #64]	; (80008c8 <Sd_Card_Manager+0x68>)
 8000886:	f00d fb3f 	bl	800df08 <f_open>
 800088a:	4603      	mov	r3, r0
 800088c:	461a      	mov	r2, r3
 800088e:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <Sd_Card_Manager+0x60>)
 8000890:	701a      	strb	r2, [r3, #0]

		byte_written = f_printf(&myfile,"%s",write_data);
 8000892:	4a0e      	ldr	r2, [pc, #56]	; (80008cc <Sd_Card_Manager+0x6c>)
 8000894:	490e      	ldr	r1, [pc, #56]	; (80008d0 <Sd_Card_Manager+0x70>)
 8000896:	480c      	ldr	r0, [pc, #48]	; (80008c8 <Sd_Card_Manager+0x68>)
 8000898:	f00e faa2 	bl	800ede0 <f_printf>
 800089c:	4603      	mov	r3, r0
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <Sd_Card_Manager+0x74>)
 80008a2:	701a      	strb	r2, [r3, #0]

		fresult = f_close(&myfile);
 80008a4:	4808      	ldr	r0, [pc, #32]	; (80008c8 <Sd_Card_Manager+0x68>)
 80008a6:	f00e f81f 	bl	800e8e8 <f_close>
 80008aa:	4603      	mov	r3, r0
 80008ac:	461a      	mov	r2, r3
 80008ae:	4b04      	ldr	r3, [pc, #16]	; (80008c0 <Sd_Card_Manager+0x60>)
 80008b0:	701a      	strb	r2, [r3, #0]
	}
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	08010a30 	.word	0x08010a30
 80008bc:	20000b88 	.word	0x20000b88
 80008c0:	20000384 	.word	0x20000384
 80008c4:	08010a34 	.word	0x08010a34
 80008c8:	20000dbc 	.word	0x20000dbc
 80008cc:	20000008 	.word	0x20000008
 80008d0:	08010a3c 	.word	0x08010a3c
 80008d4:	200000f8 	.word	0x200000f8

080008d8 <print_network_information>:

void print_network_information(void)
{
 80008d8:	b5b0      	push	{r4, r5, r7, lr}
 80008da:	b08c      	sub	sp, #48	; 0x30
 80008dc:	af04      	add	r7, sp, #16
	uint8_t tmpstr[6] = {0,};
 80008de:	2300      	movs	r3, #0
 80008e0:	61bb      	str	r3, [r7, #24]
 80008e2:	2300      	movs	r3, #0
 80008e4:	83bb      	strh	r3, [r7, #28]
	ctlwizchip(CW_GET_ID,(void*)tmpstr); // Get WIZCHIP name
 80008e6:	f107 0318 	add.w	r3, r7, #24
 80008ea:	4619      	mov	r1, r3
 80008ec:	2008      	movs	r0, #8
 80008ee:	f003 f913 	bl	8003b18 <ctlwizchip>
	printf("\r\n=======================================\r\n");
 80008f2:	4830      	ldr	r0, [pc, #192]	; (80009b4 <print_network_information+0xdc>)
 80008f4:	f00e fdc2 	bl	800f47c <puts>
	printf(" WIZnet chip:  %s \r\n", tmpstr);
 80008f8:	f107 0318 	add.w	r3, r7, #24
 80008fc:	4619      	mov	r1, r3
 80008fe:	482e      	ldr	r0, [pc, #184]	; (80009b8 <print_network_information+0xe0>)
 8000900:	f00e fd20 	bl	800f344 <iprintf>
	printf("=======================================\r\n");
 8000904:	482d      	ldr	r0, [pc, #180]	; (80009bc <print_network_information+0xe4>)
 8000906:	f00e fdb9 	bl	800f47c <puts>

	wiz_NetInfo gWIZNETINFO;
	wizchip_getnetinfo(&gWIZNETINFO);
 800090a:	463b      	mov	r3, r7
 800090c:	4618      	mov	r0, r3
 800090e:	f003 fd19 	bl	8004344 <wizchip_getnetinfo>
	if (gWIZNETINFO.dhcp == NETINFO_STATIC)
 8000912:	7dbb      	ldrb	r3, [r7, #22]
 8000914:	2b01      	cmp	r3, #1
 8000916:	d103      	bne.n	8000920 <print_network_information+0x48>
		printf("STATIC IP\r\n");
 8000918:	4829      	ldr	r0, [pc, #164]	; (80009c0 <print_network_information+0xe8>)
 800091a:	f00e fdaf 	bl	800f47c <puts>
 800091e:	e002      	b.n	8000926 <print_network_information+0x4e>
	else
		printf("DHCP IP\r\n");
 8000920:	4828      	ldr	r0, [pc, #160]	; (80009c4 <print_network_information+0xec>)
 8000922:	f00e fdab 	bl	800f47c <puts>
	printf("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n\r",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
 8000926:	783b      	ldrb	r3, [r7, #0]
 8000928:	4618      	mov	r0, r3
 800092a:	787b      	ldrb	r3, [r7, #1]
 800092c:	461c      	mov	r4, r3
 800092e:	78bb      	ldrb	r3, [r7, #2]
 8000930:	461d      	mov	r5, r3
 8000932:	78fb      	ldrb	r3, [r7, #3]
 8000934:	793a      	ldrb	r2, [r7, #4]
 8000936:	7979      	ldrb	r1, [r7, #5]
 8000938:	9102      	str	r1, [sp, #8]
 800093a:	9201      	str	r2, [sp, #4]
 800093c:	9300      	str	r3, [sp, #0]
 800093e:	462b      	mov	r3, r5
 8000940:	4622      	mov	r2, r4
 8000942:	4601      	mov	r1, r0
 8000944:	4820      	ldr	r0, [pc, #128]	; (80009c8 <print_network_information+0xf0>)
 8000946:	f00e fcfd 	bl	800f344 <iprintf>
	printf("IP address : %d.%d.%d.%d\n\r",gWIZNETINFO.ip[0],gWIZNETINFO.ip[1],gWIZNETINFO.ip[2],gWIZNETINFO.ip[3]);
 800094a:	79bb      	ldrb	r3, [r7, #6]
 800094c:	4619      	mov	r1, r3
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	461a      	mov	r2, r3
 8000952:	7a3b      	ldrb	r3, [r7, #8]
 8000954:	4618      	mov	r0, r3
 8000956:	7a7b      	ldrb	r3, [r7, #9]
 8000958:	9300      	str	r3, [sp, #0]
 800095a:	4603      	mov	r3, r0
 800095c:	481b      	ldr	r0, [pc, #108]	; (80009cc <print_network_information+0xf4>)
 800095e:	f00e fcf1 	bl	800f344 <iprintf>
	printf("SM Mask	   : %d.%d.%d.%d\n\r",gWIZNETINFO.sn[0],gWIZNETINFO.sn[1],gWIZNETINFO.sn[2],gWIZNETINFO.sn[3]);
 8000962:	7abb      	ldrb	r3, [r7, #10]
 8000964:	4619      	mov	r1, r3
 8000966:	7afb      	ldrb	r3, [r7, #11]
 8000968:	461a      	mov	r2, r3
 800096a:	7b3b      	ldrb	r3, [r7, #12]
 800096c:	4618      	mov	r0, r3
 800096e:	7b7b      	ldrb	r3, [r7, #13]
 8000970:	9300      	str	r3, [sp, #0]
 8000972:	4603      	mov	r3, r0
 8000974:	4816      	ldr	r0, [pc, #88]	; (80009d0 <print_network_information+0xf8>)
 8000976:	f00e fce5 	bl	800f344 <iprintf>
	printf("Gate way   : %d.%d.%d.%d\n\r",gWIZNETINFO.gw[0],gWIZNETINFO.gw[1],gWIZNETINFO.gw[2],gWIZNETINFO.gw[3]);
 800097a:	7bbb      	ldrb	r3, [r7, #14]
 800097c:	4619      	mov	r1, r3
 800097e:	7bfb      	ldrb	r3, [r7, #15]
 8000980:	461a      	mov	r2, r3
 8000982:	7c3b      	ldrb	r3, [r7, #16]
 8000984:	4618      	mov	r0, r3
 8000986:	7c7b      	ldrb	r3, [r7, #17]
 8000988:	9300      	str	r3, [sp, #0]
 800098a:	4603      	mov	r3, r0
 800098c:	4811      	ldr	r0, [pc, #68]	; (80009d4 <print_network_information+0xfc>)
 800098e:	f00e fcd9 	bl	800f344 <iprintf>
	printf("DNS Server : %d.%d.%d.%d\n\r",gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
 8000992:	7cbb      	ldrb	r3, [r7, #18]
 8000994:	4619      	mov	r1, r3
 8000996:	7cfb      	ldrb	r3, [r7, #19]
 8000998:	461a      	mov	r2, r3
 800099a:	7d3b      	ldrb	r3, [r7, #20]
 800099c:	4618      	mov	r0, r3
 800099e:	7d7b      	ldrb	r3, [r7, #21]
 80009a0:	9300      	str	r3, [sp, #0]
 80009a2:	4603      	mov	r3, r0
 80009a4:	480c      	ldr	r0, [pc, #48]	; (80009d8 <print_network_information+0x100>)
 80009a6:	f00e fccd 	bl	800f344 <iprintf>
}
 80009aa:	bf00      	nop
 80009ac:	3720      	adds	r7, #32
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bdb0      	pop	{r4, r5, r7, pc}
 80009b2:	bf00      	nop
 80009b4:	08010a40 	.word	0x08010a40
 80009b8:	08010a6c 	.word	0x08010a6c
 80009bc:	08010a84 	.word	0x08010a84
 80009c0:	08010ab0 	.word	0x08010ab0
 80009c4:	08010abc 	.word	0x08010abc
 80009c8:	08010ac8 	.word	0x08010ac8
 80009cc:	08010af8 	.word	0x08010af8
 80009d0:	08010b14 	.word	0x08010b14
 80009d4:	08010b30 	.word	0x08010b30
 80009d8:	08010b4c 	.word	0x08010b4c

080009dc <Network_init>:

void Network_init(void) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
	uint8_t bufSize[] = {2, 2, 2, 2, 2, 2, 2, 2};
 80009e2:	4a0d      	ldr	r2, [pc, #52]	; (8000a18 <Network_init+0x3c>)
 80009e4:	463b      	mov	r3, r7
 80009e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009ea:	e883 0003 	stmia.w	r3, {r0, r1}

	reg_wizchip_cs_cbfunc(cs_sel, cs_desel);
 80009ee:	490b      	ldr	r1, [pc, #44]	; (8000a1c <Network_init+0x40>)
 80009f0:	480b      	ldr	r0, [pc, #44]	; (8000a20 <Network_init+0x44>)
 80009f2:	f003 f83f 	bl	8003a74 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(spi_rb, spi_wb);
 80009f6:	490b      	ldr	r1, [pc, #44]	; (8000a24 <Network_init+0x48>)
 80009f8:	480b      	ldr	r0, [pc, #44]	; (8000a28 <Network_init+0x4c>)
 80009fa:	f003 f861 	bl	8003ac0 <reg_wizchip_spi_cbfunc>
	//reg_wizchip_spiburst_cbfunc(spi_rb_burst, spi_wb_burst);

	wizchip_init(bufSize, bufSize);
 80009fe:	463a      	mov	r2, r7
 8000a00:	463b      	mov	r3, r7
 8000a02:	4611      	mov	r1, r2
 8000a04:	4618      	mov	r0, r3
 8000a06:	f003 f9ef 	bl	8003de8 <wizchip_init>
	wizchip_setnetinfo(&netInfo);
 8000a0a:	4808      	ldr	r0, [pc, #32]	; (8000a2c <Network_init+0x50>)
 8000a0c:	f003 fc5a 	bl	80042c4 <wizchip_setnetinfo>
}
 8000a10:	bf00      	nop
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	08010b68 	.word	0x08010b68
 8000a1c:	08000801 	.word	0x08000801
 8000a20:	080007e9 	.word	0x080007e9
 8000a24:	0800083d 	.word	0x0800083d
 8000a28:	08000819 	.word	0x08000819
 8000a2c:	20000024 	.word	0x20000024

08000a30 <ls_dir>:
//	}
//	printf("rc=%u FR_%s\r\n", rc, p);
//}

void ls_dir(char* path)
{
 8000a30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000a34:	b0a5      	sub	sp, #148	; 0x94
 8000a36:	af0a      	add	r7, sp, #40	; 0x28
 8000a38:	60f8      	str	r0, [r7, #12]
	FILINFO _Finfo;
	BYTE res;
	long p1, p2;
	UINT s1, s2;
	//while (*ptr == ' ') ptr++;
	res = f_opendir(&Dir, path);
 8000a3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a3e:	68f9      	ldr	r1, [r7, #12]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f00d ffc5 	bl	800e9d0 <f_opendir>
 8000a46:	4603      	mov	r3, r0
 8000a48:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	if (res)
 8000a4c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	f040 808d 	bne.w	8000b70 <ls_dir+0x140>
	{
		//put_rc(res);
		return;
	}
	p1 = s1 = s2 = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000a5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a5c:	663b      	str	r3, [r7, #96]	; 0x60
 8000a5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a60:	667b      	str	r3, [r7, #100]	; 0x64
    _Finfo.lfname = Lfname;
    _Finfo.lfsize = sizeof(Lfname);
#endif

	for(;;) {
		res = f_readdir(&Dir, &_Finfo);
 8000a62:	f107 0210 	add.w	r2, r7, #16
 8000a66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a6a:	4611      	mov	r1, r2
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f00e f848 	bl	800eb02 <f_readdir>
 8000a72:	4603      	mov	r3, r0
 8000a74:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
		if ((res != FR_OK) || !_Finfo.fname[0]) break;
 8000a78:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d171      	bne.n	8000b64 <ls_dir+0x134>
 8000a80:	7e7b      	ldrb	r3, [r7, #25]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d06e      	beq.n	8000b64 <ls_dir+0x134>
		if (_Finfo.fattrib & AM_DIR) {
 8000a86:	7e3b      	ldrb	r3, [r7, #24]
 8000a88:	f003 0310 	and.w	r3, r3, #16
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d003      	beq.n	8000a98 <ls_dir+0x68>
			s2++;
 8000a90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a92:	3301      	adds	r3, #1
 8000a94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000a96:	e006      	b.n	8000aa6 <ls_dir+0x76>
		} else {
			s1++; p1 += _Finfo.fsize;
 8000a98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	663b      	str	r3, [r7, #96]	; 0x60
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000aa2:	4413      	add	r3, r2
 8000aa4:	667b      	str	r3, [r7, #100]	; 0x64
		}
		printf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
					(_Finfo.fattrib & AM_DIR) ? 'D' : '-',
 8000aa6:	7e3b      	ldrb	r3, [r7, #24]
 8000aa8:	f003 0310 	and.w	r3, r3, #16
		printf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d002      	beq.n	8000ab6 <ls_dir+0x86>
 8000ab0:	f04f 0e44 	mov.w	lr, #68	; 0x44
 8000ab4:	e001      	b.n	8000aba <ls_dir+0x8a>
 8000ab6:	f04f 0e2d 	mov.w	lr, #45	; 0x2d
					(_Finfo.fattrib & AM_RDO) ? 'R' : '-',
 8000aba:	7e3b      	ldrb	r3, [r7, #24]
 8000abc:	f003 0301 	and.w	r3, r3, #1
		printf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d002      	beq.n	8000aca <ls_dir+0x9a>
 8000ac4:	f04f 0852 	mov.w	r8, #82	; 0x52
 8000ac8:	e001      	b.n	8000ace <ls_dir+0x9e>
 8000aca:	f04f 082d 	mov.w	r8, #45	; 0x2d
					(_Finfo.fattrib & AM_HID) ? 'H' : '-',
 8000ace:	7e3b      	ldrb	r3, [r7, #24]
 8000ad0:	f003 0302 	and.w	r3, r3, #2
		printf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d002      	beq.n	8000ade <ls_dir+0xae>
 8000ad8:	f04f 0948 	mov.w	r9, #72	; 0x48
 8000adc:	e001      	b.n	8000ae2 <ls_dir+0xb2>
 8000ade:	f04f 092d 	mov.w	r9, #45	; 0x2d
					(_Finfo.fattrib & AM_SYS) ? 'S' : '-',
 8000ae2:	7e3b      	ldrb	r3, [r7, #24]
 8000ae4:	f003 0304 	and.w	r3, r3, #4
		printf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <ls_dir+0xc0>
 8000aec:	2353      	movs	r3, #83	; 0x53
 8000aee:	e000      	b.n	8000af2 <ls_dir+0xc2>
 8000af0:	232d      	movs	r3, #45	; 0x2d
					(_Finfo.fattrib & AM_ARC) ? 'A' : '-',
 8000af2:	7e3a      	ldrb	r2, [r7, #24]
 8000af4:	f002 0220 	and.w	r2, r2, #32
		printf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
 8000af8:	2a00      	cmp	r2, #0
 8000afa:	d001      	beq.n	8000b00 <ls_dir+0xd0>
 8000afc:	2241      	movs	r2, #65	; 0x41
 8000afe:	e000      	b.n	8000b02 <ls_dir+0xd2>
 8000b00:	222d      	movs	r2, #45	; 0x2d
					(_Finfo.fdate >> 9) + 1980, (_Finfo.fdate >> 5) & 15, _Finfo.fdate & 31,
 8000b02:	8ab9      	ldrh	r1, [r7, #20]
 8000b04:	0a49      	lsrs	r1, r1, #9
 8000b06:	b289      	uxth	r1, r1
		printf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
 8000b08:	f201 71bc 	addw	r1, r1, #1980	; 0x7bc
 8000b0c:	60b9      	str	r1, [r7, #8]
					(_Finfo.fdate >> 9) + 1980, (_Finfo.fdate >> 5) & 15, _Finfo.fdate & 31,
 8000b0e:	8ab8      	ldrh	r0, [r7, #20]
		printf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
 8000b10:	0940      	lsrs	r0, r0, #5
 8000b12:	b280      	uxth	r0, r0
 8000b14:	f000 000f 	and.w	r0, r0, #15
					(_Finfo.fdate >> 9) + 1980, (_Finfo.fdate >> 5) & 15, _Finfo.fdate & 31,
 8000b18:	8abc      	ldrh	r4, [r7, #20]
		printf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
 8000b1a:	f004 041f 	and.w	r4, r4, #31
					(_Finfo.ftime >> 11), (_Finfo.ftime >> 5) & 63,
 8000b1e:	8afd      	ldrh	r5, [r7, #22]
		printf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
 8000b20:	0aed      	lsrs	r5, r5, #11
 8000b22:	b2ad      	uxth	r5, r5
 8000b24:	607d      	str	r5, [r7, #4]
					(_Finfo.ftime >> 11), (_Finfo.ftime >> 5) & 63,
 8000b26:	8afd      	ldrh	r5, [r7, #22]
		printf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
 8000b28:	096d      	lsrs	r5, r5, #5
 8000b2a:	b2ad      	uxth	r5, r5
 8000b2c:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 8000b30:	693e      	ldr	r6, [r7, #16]
 8000b32:	f107 0c10 	add.w	ip, r7, #16
 8000b36:	f10c 0109 	add.w	r1, ip, #9
 8000b3a:	9108      	str	r1, [sp, #32]
 8000b3c:	9607      	str	r6, [sp, #28]
 8000b3e:	9506      	str	r5, [sp, #24]
 8000b40:	6879      	ldr	r1, [r7, #4]
 8000b42:	9105      	str	r1, [sp, #20]
 8000b44:	9404      	str	r4, [sp, #16]
 8000b46:	9003      	str	r0, [sp, #12]
 8000b48:	68b9      	ldr	r1, [r7, #8]
 8000b4a:	9102      	str	r1, [sp, #8]
 8000b4c:	9201      	str	r2, [sp, #4]
 8000b4e:	9300      	str	r3, [sp, #0]
 8000b50:	464b      	mov	r3, r9
 8000b52:	4642      	mov	r2, r8
 8000b54:	4671      	mov	r1, lr
 8000b56:	4809      	ldr	r0, [pc, #36]	; (8000b7c <ls_dir+0x14c>)
 8000b58:	f00e fbf4 	bl	800f344 <iprintf>
#if _USE_LFN
		for (p2 = strlen(_Finfo.fname); p2 < 14; p2++)
			xputc(' ');
		xprintf(PSTR("%s\r\n"), Lfname);
#else
		printf("\r\n");
 8000b5c:	4808      	ldr	r0, [pc, #32]	; (8000b80 <ls_dir+0x150>)
 8000b5e:	f00e fc8d 	bl	800f47c <puts>
		res = f_readdir(&Dir, &_Finfo);
 8000b62:	e77e      	b.n	8000a62 <ls_dir+0x32>
#endif
	}
	f_closedir(&Dir);
 8000b64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f00d ffa4 	bl	800eab6 <f_closedir>
 8000b6e:	e000      	b.n	8000b72 <ls_dir+0x142>
		return;
 8000b70:	bf00      	nop
}
 8000b72:	376c      	adds	r7, #108	; 0x6c
 8000b74:	46bd      	mov	sp, r7
 8000b76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000b7a:	bf00      	nop
 8000b7c:	08010b70 	.word	0x08010b70
 8000b80:	08010b9c 	.word	0x08010b9c

08000b84 <main>:

	//}
}

int main(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
	int32_t timeout;

	timeout = 0xFFFF;
 8000b8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b8e:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000b90:	bf00      	nop
 8000b92:	4b36      	ldr	r3, [pc, #216]	; (8000c6c <main+0xe8>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d004      	beq.n	8000ba8 <main+0x24>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	1e5a      	subs	r2, r3, #1
 8000ba2:	607a      	str	r2, [r7, #4]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	dcf4      	bgt.n	8000b92 <main+0xe>
	if ( timeout < 0 )
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	da01      	bge.n	8000bb2 <main+0x2e>
	{
	Error_Handler();
 8000bae:	f000 fa0d 	bl	8000fcc <Error_Handler>
	}

	HAL_Init();
 8000bb2:	f003 fc75 	bl	80044a0 <HAL_Init>

	SystemClock_Config();
 8000bb6:	f000 f87f 	bl	8000cb8 <SystemClock_Config>

	__HAL_RCC_HSEM_CLK_ENABLE();
 8000bba:	4b2c      	ldr	r3, [pc, #176]	; (8000c6c <main+0xe8>)
 8000bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc0:	4a2a      	ldr	r2, [pc, #168]	; (8000c6c <main+0xe8>)
 8000bc2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bca:	4b28      	ldr	r3, [pc, #160]	; (8000c6c <main+0xe8>)
 8000bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bd4:	603b      	str	r3, [r7, #0]
 8000bd6:	683b      	ldr	r3, [r7, #0]

	HAL_HSEM_FastTake(HSEM_ID_0);
 8000bd8:	2000      	movs	r0, #0
 8000bda:	f004 fa5b 	bl	8005094 <HAL_HSEM_FastTake>

	HAL_HSEM_Release(HSEM_ID_0,0);
 8000bde:	2100      	movs	r1, #0
 8000be0:	2000      	movs	r0, #0
 8000be2:	f004 fa71 	bl	80050c8 <HAL_HSEM_Release>

	timeout = 0xFFFF;
 8000be6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bea:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000bec:	bf00      	nop
 8000bee:	4b1f      	ldr	r3, [pc, #124]	; (8000c6c <main+0xe8>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d104      	bne.n	8000c04 <main+0x80>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	1e5a      	subs	r2, r3, #1
 8000bfe:	607a      	str	r2, [r7, #4]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	dcf4      	bgt.n	8000bee <main+0x6a>
	if ( timeout < 0 )
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	da01      	bge.n	8000c0e <main+0x8a>
	{
	Error_Handler();
 8000c0a:	f000 f9df 	bl	8000fcc <Error_Handler>
	}

	MX_GPIO_Init();
 8000c0e:	f000 f939 	bl	8000e84 <MX_GPIO_Init>
	MX_SDMMC1_SD_Init();
 8000c12:	f000 f8cf 	bl	8000db4 <MX_SDMMC1_SD_Init>
	MX_SPI5_Init();
 8000c16:	f000 f8f3 	bl	8000e00 <MX_SPI5_Init>
	MX_UART8_Init();
 8000c1a:	f002 fbed 	bl	80033f8 <MX_UART8_Init>
	MX_FATFS_Init();
 8000c1e:	f00b f93f 	bl	800bea0 <MX_FATFS_Init>

	HAL_Delay(1000);
 8000c22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c26:	f003 fccd 	bl	80045c4 <HAL_Delay>

	Sd_Card_Manager();
 8000c2a:	f7ff fe19 	bl	8000860 <Sd_Card_Manager>

	//fatfs_init();
	HAL_Delay(200);
 8000c2e:	20c8      	movs	r0, #200	; 0xc8
 8000c30:	f003 fcc8 	bl	80045c4 <HAL_Delay>
	//fatfs_head_file("stm.txt");

	printf("DHCP IP \n\r");
 8000c34:	480e      	ldr	r0, [pc, #56]	; (8000c70 <main+0xec>)
 8000c36:	f00e fb85 	bl	800f344 <iprintf>

	Network_init();
 8000c3a:	f7ff fecf 	bl	80009dc <Network_init>

	HAL_Delay(200);
 8000c3e:	20c8      	movs	r0, #200	; 0xc8
 8000c40:	f003 fcc0 	bl	80045c4 <HAL_Delay>

	print_network_information();
 8000c44:	f7ff fe48 	bl	80008d8 <print_network_information>

	HAL_Delay(5000);
 8000c48:	f241 3088 	movw	r0, #5000	; 0x1388
 8000c4c:	f003 fcba 	bl	80045c4 <HAL_Delay>

	printf("FTP Init\r\n");
 8000c50:	4808      	ldr	r0, [pc, #32]	; (8000c74 <main+0xf0>)
 8000c52:	f00e fc13 	bl	800f47c <puts>

	ftpc_init(netInfo.ip);
 8000c56:	4808      	ldr	r0, [pc, #32]	; (8000c78 <main+0xf4>)
 8000c58:	f000 fc3e 	bl	80014d8 <ftpc_init>

	HAL_Delay(200);
 8000c5c:	20c8      	movs	r0, #200	; 0xc8
 8000c5e:	f003 fcb1 	bl	80045c4 <HAL_Delay>

	while (1)
	{
		ftpc_run(gFTPBUF);
 8000c62:	4806      	ldr	r0, [pc, #24]	; (8000c7c <main+0xf8>)
 8000c64:	f000 fc6e 	bl	8001544 <ftpc_run>
 8000c68:	e7fb      	b.n	8000c62 <main+0xde>
 8000c6a:	bf00      	nop
 8000c6c:	58024400 	.word	0x58024400
 8000c70:	08010d08 	.word	0x08010d08
 8000c74:	08010d14 	.word	0x08010d14
 8000c78:	2000002a 	.word	0x2000002a
 8000c7c:	20000388 	.word	0x20000388

08000c80 <HAL_SPI_TxCpltCallback>:
	}
}

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == hspi5.Instance)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <HAL_SPI_TxCpltCallback+0x30>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d109      	bne.n	8000ca8 <HAL_SPI_TxCpltCallback+0x28>
	{
		HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_14);
 8000c94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c98:	4806      	ldr	r0, [pc, #24]	; (8000cb4 <HAL_SPI_TxCpltCallback+0x34>)
 8000c9a:	f004 f9e0 	bl	800505e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_15);
 8000c9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ca2:	4804      	ldr	r0, [pc, #16]	; (8000cb4 <HAL_SPI_TxCpltCallback+0x34>)
 8000ca4:	f004 f9db 	bl	800505e <HAL_GPIO_TogglePin>
	}
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	2000017c 	.word	0x2000017c
 8000cb4:	58022000 	.word	0x58022000

08000cb8 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b09e      	sub	sp, #120	; 0x78
 8000cbc:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000cc4:	2004      	movs	r0, #4
 8000cc6:	f004 fa13 	bl	80050f0 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cca:	2300      	movs	r3, #0
 8000ccc:	607b      	str	r3, [r7, #4]
 8000cce:	4b37      	ldr	r3, [pc, #220]	; (8000dac <SystemClock_Config+0xf4>)
 8000cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd2:	4a36      	ldr	r2, [pc, #216]	; (8000dac <SystemClock_Config+0xf4>)
 8000cd4:	f023 0301 	bic.w	r3, r3, #1
 8000cd8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000cda:	4b34      	ldr	r3, [pc, #208]	; (8000dac <SystemClock_Config+0xf4>)
 8000cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	4b32      	ldr	r3, [pc, #200]	; (8000db0 <SystemClock_Config+0xf8>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	4a31      	ldr	r2, [pc, #196]	; (8000db0 <SystemClock_Config+0xf8>)
 8000cea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cee:	6193      	str	r3, [r2, #24]
 8000cf0:	4b2f      	ldr	r3, [pc, #188]	; (8000db0 <SystemClock_Config+0xf8>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cfc:	bf00      	nop
 8000cfe:	4b2c      	ldr	r3, [pc, #176]	; (8000db0 <SystemClock_Config+0xf8>)
 8000d00:	699b      	ldr	r3, [r3, #24]
 8000d02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d0a:	d1f8      	bne.n	8000cfe <SystemClock_Config+0x46>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d14:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d22:	2302      	movs	r3, #2
 8000d24:	633b      	str	r3, [r7, #48]	; 0x30

  RCC_OscInitStruct.PLL.PLLM = 5;
 8000d26:	2305      	movs	r3, #5
 8000d28:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000d2a:	23a0      	movs	r3, #160	; 0xa0
 8000d2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d32:	2302      	movs	r3, #2
 8000d34:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d36:	2302      	movs	r3, #2
 8000d38:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d3a:	2304      	movs	r3, #4
 8000d3c:	643b      	str	r3, [r7, #64]	; 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000d42:	2308      	movs	r3, #8
 8000d44:	64bb      	str	r3, [r7, #72]	; 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000d46:	f107 0308 	add.w	r3, r7, #8
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f004 fa2a 	bl	80051a4 <HAL_RCC_OscConfig>
 8000d50:	4603      	mov	r3, r0
 8000d52:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 8000d56:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000d5e:	f000 f935 	bl	8000fcc <Error_Handler>
  }

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8000d62:	233f      	movs	r3, #63	; 0x3f
 8000d64:	657b      	str	r3, [r7, #84]	; 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d66:	2303      	movs	r3, #3
 8000d68:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d6e:	2308      	movs	r3, #8
 8000d70:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d72:	2340      	movs	r3, #64	; 0x40
 8000d74:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d76:	2340      	movs	r3, #64	; 0x40
 8000d78:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d7e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d80:	2340      	movs	r3, #64	; 0x40
 8000d82:	673b      	str	r3, [r7, #112]	; 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8000d84:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d88:	2104      	movs	r1, #4
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f004 fe1a 	bl	80059c4 <HAL_RCC_ClockConfig>
 8000d90:	4603      	mov	r3, r0
 8000d92:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 8000d96:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000d9e:	f000 f915 	bl	8000fcc <Error_Handler>

  __HAL_RCC_SYSCFG_CLK_ENABLE() ;

  HAL_EnableCompensationCell();
  */
}
 8000da2:	bf00      	nop
 8000da4:	3778      	adds	r7, #120	; 0x78
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	58000400 	.word	0x58000400
 8000db0:	58024800 	.word	0x58024800

08000db4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	hsd1.Instance = SDMMC1;
 8000db8:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <MX_SDMMC1_SD_Init+0x44>)
 8000dba:	4a10      	ldr	r2, [pc, #64]	; (8000dfc <MX_SDMMC1_SD_Init+0x48>)
 8000dbc:	601a      	str	r2, [r3, #0]
	hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <MX_SDMMC1_SD_Init+0x44>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	605a      	str	r2, [r3, #4]
	hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <MX_SDMMC1_SD_Init+0x44>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
	hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000dca:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <MX_SDMMC1_SD_Init+0x44>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	60da      	str	r2, [r3, #12]
	hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000dd0:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <MX_SDMMC1_SD_Init+0x44>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	611a      	str	r2, [r3, #16]
	hsd1.Init.ClockDiv = 0;
 8000dd6:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <MX_SDMMC1_SD_Init+0x44>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	615a      	str	r2, [r3, #20]
	hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <MX_SDMMC1_SD_Init+0x44>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	619a      	str	r2, [r3, #24]
	if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000de2:	4805      	ldr	r0, [pc, #20]	; (8000df8 <MX_SDMMC1_SD_Init+0x44>)
 8000de4:	f006 f842 	bl	8006e6c <HAL_SD_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_SDMMC1_SD_Init+0x3e>
	{
	Error_Handler();
 8000dee:	f000 f8ed 	bl	8000fcc <Error_Handler>
	}
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	2000020c 	.word	0x2000020c
 8000dfc:	52007000 	.word	0x52007000

08000e00 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
//	if (HAL_SPI_Init(&hspi5) != HAL_OK)
//	{
//	Error_Handler();
//	}

	hspi5.Instance               = SPI5;
 8000e04:	4b1d      	ldr	r3, [pc, #116]	; (8000e7c <MX_SPI5_Init+0x7c>)
 8000e06:	4a1e      	ldr	r2, [pc, #120]	; (8000e80 <MX_SPI5_Init+0x80>)
 8000e08:	601a      	str	r2, [r3, #0]
	hspi5.Init.Mode              = SPI_MODE_MASTER;
 8000e0a:	4b1c      	ldr	r3, [pc, #112]	; (8000e7c <MX_SPI5_Init+0x7c>)
 8000e0c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000e10:	605a      	str	r2, [r3, #4]
	hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000e12:	4b1a      	ldr	r3, [pc, #104]	; (8000e7c <MX_SPI5_Init+0x7c>)
 8000e14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e18:	61da      	str	r2, [r3, #28]
	hspi5.Init.Direction         = SPI_DIRECTION_2LINES;
 8000e1a:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <MX_SPI5_Init+0x7c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
	hspi5.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8000e20:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <MX_SPI5_Init+0x7c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	615a      	str	r2, [r3, #20]
	hspi5.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8000e26:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <MX_SPI5_Init+0x7c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	611a      	str	r2, [r3, #16]
	hspi5.Init.DataSize          = SPI_DATASIZE_8BIT;
 8000e2c:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <MX_SPI5_Init+0x7c>)
 8000e2e:	2207      	movs	r2, #7
 8000e30:	60da      	str	r2, [r3, #12]
	hspi5.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8000e32:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <MX_SPI5_Init+0x7c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	621a      	str	r2, [r3, #32]
	hspi5.Init.TIMode            = SPI_TIMODE_DISABLE;
 8000e38:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <MX_SPI5_Init+0x7c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	625a      	str	r2, [r3, #36]	; 0x24
	hspi5.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8000e3e:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <MX_SPI5_Init+0x7c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	629a      	str	r2, [r3, #40]	; 0x28
	hspi5.Init.CRCPolynomial     = 7;
 8000e44:	4b0d      	ldr	r3, [pc, #52]	; (8000e7c <MX_SPI5_Init+0x7c>)
 8000e46:	2207      	movs	r2, #7
 8000e48:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi5.Init.CRCLength         = SPI_CRC_LENGTH_8BIT;
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <MX_SPI5_Init+0x7c>)
 8000e4c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000e50:	631a      	str	r2, [r3, #48]	; 0x30
	hspi5.Init.NSS               = SPI_NSS_SOFT;
 8000e52:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <MX_SPI5_Init+0x7c>)
 8000e54:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000e58:	619a      	str	r2, [r3, #24]
	hspi5.Init.NSSPMode          = SPI_NSS_PULSE_DISABLE;
 8000e5a:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <MX_SPI5_Init+0x7c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	635a      	str	r2, [r3, #52]	; 0x34
	hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <MX_SPI5_Init+0x7c>)
 8000e62:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000e66:	655a      	str	r2, [r3, #84]	; 0x54
	if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000e68:	4804      	ldr	r0, [pc, #16]	; (8000e7c <MX_SPI5_Init+0x7c>)
 8000e6a:	f007 fbbb 	bl	80085e4 <HAL_SPI_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_SPI5_Init+0x78>
	{
	Error_Handler();
 8000e74:	f000 f8aa 	bl	8000fcc <Error_Handler>
	}
}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	2000017c 	.word	0x2000017c
 8000e80:	40015000 	.word	0x40015000

08000e84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08c      	sub	sp, #48	; 0x30
 8000e88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8a:	f107 031c 	add.w	r3, r7, #28
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
 8000e98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9a:	4b49      	ldr	r3, [pc, #292]	; (8000fc0 <MX_GPIO_Init+0x13c>)
 8000e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea0:	4a47      	ldr	r2, [pc, #284]	; (8000fc0 <MX_GPIO_Init+0x13c>)
 8000ea2:	f043 0304 	orr.w	r3, r3, #4
 8000ea6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eaa:	4b45      	ldr	r3, [pc, #276]	; (8000fc0 <MX_GPIO_Init+0x13c>)
 8000eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb0:	f003 0304 	and.w	r3, r3, #4
 8000eb4:	61bb      	str	r3, [r7, #24]
 8000eb6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eb8:	4b41      	ldr	r3, [pc, #260]	; (8000fc0 <MX_GPIO_Init+0x13c>)
 8000eba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ebe:	4a40      	ldr	r2, [pc, #256]	; (8000fc0 <MX_GPIO_Init+0x13c>)
 8000ec0:	f043 0308 	orr.w	r3, r3, #8
 8000ec4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ec8:	4b3d      	ldr	r3, [pc, #244]	; (8000fc0 <MX_GPIO_Init+0x13c>)
 8000eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ece:	f003 0308 	and.w	r3, r3, #8
 8000ed2:	617b      	str	r3, [r7, #20]
 8000ed4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ed6:	4b3a      	ldr	r3, [pc, #232]	; (8000fc0 <MX_GPIO_Init+0x13c>)
 8000ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000edc:	4a38      	ldr	r2, [pc, #224]	; (8000fc0 <MX_GPIO_Init+0x13c>)
 8000ede:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ee6:	4b36      	ldr	r3, [pc, #216]	; (8000fc0 <MX_GPIO_Init+0x13c>)
 8000ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ef0:	613b      	str	r3, [r7, #16]
 8000ef2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ef4:	4b32      	ldr	r3, [pc, #200]	; (8000fc0 <MX_GPIO_Init+0x13c>)
 8000ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000efa:	4a31      	ldr	r2, [pc, #196]	; (8000fc0 <MX_GPIO_Init+0x13c>)
 8000efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f04:	4b2e      	ldr	r3, [pc, #184]	; (8000fc0 <MX_GPIO_Init+0x13c>)
 8000f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000f12:	4b2b      	ldr	r3, [pc, #172]	; (8000fc0 <MX_GPIO_Init+0x13c>)
 8000f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f18:	4a29      	ldr	r2, [pc, #164]	; (8000fc0 <MX_GPIO_Init+0x13c>)
 8000f1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f22:	4b27      	ldr	r3, [pc, #156]	; (8000fc0 <MX_GPIO_Init+0x13c>)
 8000f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000f30:	4b23      	ldr	r3, [pc, #140]	; (8000fc0 <MX_GPIO_Init+0x13c>)
 8000f32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f36:	4a22      	ldr	r2, [pc, #136]	; (8000fc0 <MX_GPIO_Init+0x13c>)
 8000f38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f40:	4b1f      	ldr	r3, [pc, #124]	; (8000fc0 <MX_GPIO_Init+0x13c>)
 8000f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000f54:	481b      	ldr	r0, [pc, #108]	; (8000fc4 <MX_GPIO_Init+0x140>)
 8000f56:	f004 f869 	bl	800502c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_1, GPIO_PIN_SET);
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	2102      	movs	r1, #2
 8000f5e:	481a      	ldr	r0, [pc, #104]	; (8000fc8 <MX_GPIO_Init+0x144>)
 8000f60:	f004 f864 	bl	800502c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PK5 PK4 PK6 PK3 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3;
 8000f64:	2378      	movs	r3, #120	; 0x78
 8000f66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000f70:	f107 031c 	add.w	r3, r7, #28
 8000f74:	4619      	mov	r1, r3
 8000f76:	4814      	ldr	r0, [pc, #80]	; (8000fc8 <MX_GPIO_Init+0x144>)
 8000f78:	f003 fea8 	bl	8004ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : PI12 PI13 PI14 PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000f7c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000f80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f82:	2301      	movs	r3, #1
 8000f84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f8e:	f107 031c 	add.w	r3, r7, #28
 8000f92:	4619      	mov	r1, r3
 8000f94:	480b      	ldr	r0, [pc, #44]	; (8000fc4 <MX_GPIO_Init+0x140>)
 8000f96:	f003 fe99 	bl	8004ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : PJ5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000faa:	f107 031c 	add.w	r3, r7, #28
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <MX_GPIO_Init+0x144>)
 8000fb2:	f003 fe8b 	bl	8004ccc <HAL_GPIO_Init>

}
 8000fb6:	bf00      	nop
 8000fb8:	3730      	adds	r7, #48	; 0x30
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	58024400 	.word	0x58024400
 8000fc4:	58022000 	.word	0x58022000
 8000fc8:	58022800 	.word	0x58022800

08000fcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
	...

08000fdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	; (800100c <HAL_MspInit+0x30>)
 8000fe4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fe8:	4a08      	ldr	r2, [pc, #32]	; (800100c <HAL_MspInit+0x30>)
 8000fea:	f043 0302 	orr.w	r3, r3, #2
 8000fee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_MspInit+0x30>)
 8000ff4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ff8:	f003 0302 	and.w	r3, r3, #2
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	58024400 	.word	0x58024400

08001010 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08a      	sub	sp, #40	; 0x28
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a2a      	ldr	r2, [pc, #168]	; (80010d8 <HAL_SD_MspInit+0xc8>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d14d      	bne.n	80010ce <HAL_SD_MspInit+0xbe>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001032:	4b2a      	ldr	r3, [pc, #168]	; (80010dc <HAL_SD_MspInit+0xcc>)
 8001034:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001038:	4a28      	ldr	r2, [pc, #160]	; (80010dc <HAL_SD_MspInit+0xcc>)
 800103a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800103e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001042:	4b26      	ldr	r3, [pc, #152]	; (80010dc <HAL_SD_MspInit+0xcc>)
 8001044:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001050:	4b22      	ldr	r3, [pc, #136]	; (80010dc <HAL_SD_MspInit+0xcc>)
 8001052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001056:	4a21      	ldr	r2, [pc, #132]	; (80010dc <HAL_SD_MspInit+0xcc>)
 8001058:	f043 0304 	orr.w	r3, r3, #4
 800105c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001060:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <HAL_SD_MspInit+0xcc>)
 8001062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001066:	f003 0304 	and.w	r3, r3, #4
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800106e:	4b1b      	ldr	r3, [pc, #108]	; (80010dc <HAL_SD_MspInit+0xcc>)
 8001070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001074:	4a19      	ldr	r2, [pc, #100]	; (80010dc <HAL_SD_MspInit+0xcc>)
 8001076:	f043 0308 	orr.w	r3, r3, #8
 800107a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800107e:	4b17      	ldr	r3, [pc, #92]	; (80010dc <HAL_SD_MspInit+0xcc>)
 8001080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001084:	f003 0308 	and.w	r3, r3, #8
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 800108c:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8001090:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	2302      	movs	r3, #2
 8001094:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109a:	2303      	movs	r3, #3
 800109c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800109e:	230c      	movs	r3, #12
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	4619      	mov	r1, r3
 80010a8:	480d      	ldr	r0, [pc, #52]	; (80010e0 <HAL_SD_MspInit+0xd0>)
 80010aa:	f003 fe0f 	bl	8004ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010ae:	2304      	movs	r3, #4
 80010b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ba:	2303      	movs	r3, #3
 80010bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80010be:	230c      	movs	r3, #12
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010c2:	f107 0314 	add.w	r3, r7, #20
 80010c6:	4619      	mov	r1, r3
 80010c8:	4806      	ldr	r0, [pc, #24]	; (80010e4 <HAL_SD_MspInit+0xd4>)
 80010ca:	f003 fdff 	bl	8004ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80010ce:	bf00      	nop
 80010d0:	3728      	adds	r7, #40	; 0x28
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	52007000 	.word	0x52007000
 80010dc:	58024400 	.word	0x58024400
 80010e0:	58020800 	.word	0x58020800
 80010e4:	58020c00 	.word	0x58020c00

080010e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	; 0x28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a2e      	ldr	r2, [pc, #184]	; (80011c0 <HAL_SPI_MspInit+0xd8>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d155      	bne.n	80011b6 <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800110a:	4b2e      	ldr	r3, [pc, #184]	; (80011c4 <HAL_SPI_MspInit+0xdc>)
 800110c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001110:	4a2c      	ldr	r2, [pc, #176]	; (80011c4 <HAL_SPI_MspInit+0xdc>)
 8001112:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001116:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800111a:	4b2a      	ldr	r3, [pc, #168]	; (80011c4 <HAL_SPI_MspInit+0xdc>)
 800111c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001120:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001124:	613b      	str	r3, [r7, #16]
 8001126:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001128:	4b26      	ldr	r3, [pc, #152]	; (80011c4 <HAL_SPI_MspInit+0xdc>)
 800112a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800112e:	4a25      	ldr	r2, [pc, #148]	; (80011c4 <HAL_SPI_MspInit+0xdc>)
 8001130:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001134:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001138:	4b22      	ldr	r3, [pc, #136]	; (80011c4 <HAL_SPI_MspInit+0xdc>)
 800113a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800113e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001146:	4b1f      	ldr	r3, [pc, #124]	; (80011c4 <HAL_SPI_MspInit+0xdc>)
 8001148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800114c:	4a1d      	ldr	r2, [pc, #116]	; (80011c4 <HAL_SPI_MspInit+0xdc>)
 800114e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001152:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001156:	4b1b      	ldr	r3, [pc, #108]	; (80011c4 <HAL_SPI_MspInit+0xdc>)
 8001158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800115c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001160:	60bb      	str	r3, [r7, #8]
 8001162:	68bb      	ldr	r3, [r7, #8]
    /**SPI5 GPIO Configuration
    PK0     ------> SPI5_SCK
    PJ11     ------> SPI5_MISO
    PJ10     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001164:	2301      	movs	r3, #1
 8001166:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001168:	2302      	movs	r3, #2
 800116a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001170:	2300      	movs	r3, #0
 8001172:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001174:	2305      	movs	r3, #5
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	4619      	mov	r1, r3
 800117e:	4812      	ldr	r0, [pc, #72]	; (80011c8 <HAL_SPI_MspInit+0xe0>)
 8001180:	f003 fda4 	bl	8004ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8001184:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118a:	2302      	movs	r3, #2
 800118c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001192:	2300      	movs	r3, #0
 8001194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001196:	2305      	movs	r3, #5
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	4619      	mov	r1, r3
 80011a0:	480a      	ldr	r0, [pc, #40]	; (80011cc <HAL_SPI_MspInit+0xe4>)
 80011a2:	f003 fd93 	bl	8004ccc <HAL_GPIO_Init>

    /* SPI5 interrupt Init */
    HAL_NVIC_SetPriority(SPI5_IRQn, 0, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2100      	movs	r1, #0
 80011aa:	2055      	movs	r0, #85	; 0x55
 80011ac:	f003 fb15 	bl	80047da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 80011b0:	2055      	movs	r0, #85	; 0x55
 80011b2:	f003 fb2c 	bl	800480e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80011b6:	bf00      	nop
 80011b8:	3728      	adds	r7, #40	; 0x28
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40015000 	.word	0x40015000
 80011c4:	58024400 	.word	0x58024400
 80011c8:	58022800 	.word	0x58022800
 80011cc:	58022400 	.word	0x58022400

080011d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08a      	sub	sp, #40	; 0x28
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a1e      	ldr	r2, [pc, #120]	; (8001268 <HAL_UART_MspInit+0x98>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d136      	bne.n	8001260 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 80011f2:	4b1e      	ldr	r3, [pc, #120]	; (800126c <HAL_UART_MspInit+0x9c>)
 80011f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011f8:	4a1c      	ldr	r2, [pc, #112]	; (800126c <HAL_UART_MspInit+0x9c>)
 80011fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011fe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001202:	4b1a      	ldr	r3, [pc, #104]	; (800126c <HAL_UART_MspInit+0x9c>)
 8001204:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001208:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800120c:	613b      	str	r3, [r7, #16]
 800120e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001210:	4b16      	ldr	r3, [pc, #88]	; (800126c <HAL_UART_MspInit+0x9c>)
 8001212:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001216:	4a15      	ldr	r2, [pc, #84]	; (800126c <HAL_UART_MspInit+0x9c>)
 8001218:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800121c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <HAL_UART_MspInit+0x9c>)
 8001222:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001226:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
    /**UART8 GPIO Configuration
    PJ9     ------> UART8_RX
    PJ8     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 800122e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001232:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001234:	2302      	movs	r3, #2
 8001236:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123c:	2300      	movs	r3, #0
 800123e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001240:	2308      	movs	r3, #8
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	4619      	mov	r1, r3
 800124a:	4809      	ldr	r0, [pc, #36]	; (8001270 <HAL_UART_MspInit+0xa0>)
 800124c:	f003 fd3e 	bl	8004ccc <HAL_GPIO_Init>

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8001250:	2200      	movs	r2, #0
 8001252:	2100      	movs	r1, #0
 8001254:	2053      	movs	r0, #83	; 0x53
 8001256:	f003 fac0 	bl	80047da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 800125a:	2053      	movs	r0, #83	; 0x53
 800125c:	f003 fad7 	bl	800480e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }

}
 8001260:	bf00      	nop
 8001262:	3728      	adds	r7, #40	; 0x28
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40007c00 	.word	0x40007c00
 800126c:	58024400 	.word	0x58024400
 8001270:	58022400 	.word	0x58022400

08001274 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001286:	e7fe      	b.n	8001286 <HardFault_Handler+0x4>

08001288 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800128c:	e7fe      	b.n	800128c <MemManage_Handler+0x4>

0800128e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001292:	e7fe      	b.n	8001292 <BusFault_Handler+0x4>

08001294 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001298:	e7fe      	b.n	8001298 <UsageFault_Handler+0x4>

0800129a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012c8:	f003 f95c 	bl	8004584 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80012d4:	4802      	ldr	r0, [pc, #8]	; (80012e0 <UART8_IRQHandler+0x10>)
 80012d6:	f008 fe05 	bl	8009ee4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	200002f8 	.word	0x200002f8

080012e4 <SPI5_IRQHandler>:

/**
  * @brief This function handles SPI5 global interrupt.
  */
void SPI5_IRQHandler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 80012e8:	4802      	ldr	r0, [pc, #8]	; (80012f4 <SPI5_IRQHandler+0x10>)
 80012ea:	f008 f943 	bl	8009574 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI5_IRQn 1 */

  /* USER CODE END SPI5_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	2000017c 	.word	0x2000017c

080012f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
	return 1;
 80012fc:	2301      	movs	r3, #1
}
 80012fe:	4618      	mov	r0, r3
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <_kill>:

int _kill(int pid, int sig)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001312:	f00d ffe5 	bl	800f2e0 <__errno>
 8001316:	4603      	mov	r3, r0
 8001318:	2216      	movs	r2, #22
 800131a:	601a      	str	r2, [r3, #0]
	return -1;
 800131c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001320:	4618      	mov	r0, r3
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <_exit>:

void _exit (int status)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001330:	f04f 31ff 	mov.w	r1, #4294967295
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff ffe7 	bl	8001308 <_kill>
	while (1) {}		/* Make sure we hang here */
 800133a:	e7fe      	b.n	800133a <_exit+0x12>

0800133c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	e00a      	b.n	8001364 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800134e:	f3af 8000 	nop.w
 8001352:	4601      	mov	r1, r0
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	1c5a      	adds	r2, r3, #1
 8001358:	60ba      	str	r2, [r7, #8]
 800135a:	b2ca      	uxtb	r2, r1
 800135c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	3301      	adds	r3, #1
 8001362:	617b      	str	r3, [r7, #20]
 8001364:	697a      	ldr	r2, [r7, #20]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	429a      	cmp	r2, r3
 800136a:	dbf0      	blt.n	800134e <_read+0x12>
	}

return len;
 800136c:	687b      	ldr	r3, [r7, #4]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3718      	adds	r7, #24
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b086      	sub	sp, #24
 800137a:	af00      	add	r7, sp, #0
 800137c:	60f8      	str	r0, [r7, #12]
 800137e:	60b9      	str	r1, [r7, #8]
 8001380:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001382:	2300      	movs	r3, #0
 8001384:	617b      	str	r3, [r7, #20]
 8001386:	e009      	b.n	800139c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	1c5a      	adds	r2, r3, #1
 800138c:	60ba      	str	r2, [r7, #8]
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff fa13 	bl	80007bc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	3301      	adds	r3, #1
 800139a:	617b      	str	r3, [r7, #20]
 800139c:	697a      	ldr	r2, [r7, #20]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	dbf1      	blt.n	8001388 <_write+0x12>
	}
	return len;
 80013a4:	687b      	ldr	r3, [r7, #4]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3718      	adds	r7, #24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <_close>:

int _close(int file)
{
 80013ae:	b480      	push	{r7}
 80013b0:	b083      	sub	sp, #12
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
	return -1;
 80013b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013c6:	b480      	push	{r7}
 80013c8:	b083      	sub	sp, #12
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
 80013ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013d6:	605a      	str	r2, [r3, #4]
	return 0;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <_isatty>:

int _isatty(int file)
{
 80013e6:	b480      	push	{r7}
 80013e8:	b083      	sub	sp, #12
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
	return 1;
 80013ee:	2301      	movs	r3, #1
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
	return 0;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
	...

08001418 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001420:	4a14      	ldr	r2, [pc, #80]	; (8001474 <_sbrk+0x5c>)
 8001422:	4b15      	ldr	r3, [pc, #84]	; (8001478 <_sbrk+0x60>)
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800142c:	4b13      	ldr	r3, [pc, #76]	; (800147c <_sbrk+0x64>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d102      	bne.n	800143a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001434:	4b11      	ldr	r3, [pc, #68]	; (800147c <_sbrk+0x64>)
 8001436:	4a12      	ldr	r2, [pc, #72]	; (8001480 <_sbrk+0x68>)
 8001438:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800143a:	4b10      	ldr	r3, [pc, #64]	; (800147c <_sbrk+0x64>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4413      	add	r3, r2
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	429a      	cmp	r2, r3
 8001446:	d207      	bcs.n	8001458 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001448:	f00d ff4a 	bl	800f2e0 <__errno>
 800144c:	4603      	mov	r3, r0
 800144e:	220c      	movs	r2, #12
 8001450:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001452:	f04f 33ff 	mov.w	r3, #4294967295
 8001456:	e009      	b.n	800146c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001458:	4b08      	ldr	r3, [pc, #32]	; (800147c <_sbrk+0x64>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800145e:	4b07      	ldr	r3, [pc, #28]	; (800147c <_sbrk+0x64>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4413      	add	r3, r2
 8001466:	4a05      	ldr	r2, [pc, #20]	; (800147c <_sbrk+0x64>)
 8001468:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800146a:	68fb      	ldr	r3, [r7, #12]
}
 800146c:	4618      	mov	r0, r3
 800146e:	3718      	adds	r7, #24
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20020000 	.word	0x20020000
 8001478:	00000400 	.word	0x00000400
 800147c:	200000fc 	.word	0x200000fc
 8001480:	20001788 	.word	0x20001788

08001484 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001484:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014bc <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001488:	f7ff f8fe 	bl	8000688 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800148c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800148e:	e003      	b.n	8001498 <LoopCopyDataInit>

08001490 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001490:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001492:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001494:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001496:	3104      	adds	r1, #4

08001498 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001498:	480a      	ldr	r0, [pc, #40]	; (80014c4 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800149a:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 800149c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800149e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80014a0:	d3f6      	bcc.n	8001490 <CopyDataInit>
  ldr  r2, =_sbss
 80014a2:	4a0a      	ldr	r2, [pc, #40]	; (80014cc <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80014a4:	e002      	b.n	80014ac <LoopFillZerobss>

080014a6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80014a6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80014a8:	f842 3b04 	str.w	r3, [r2], #4

080014ac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80014ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80014b0:	d3f9      	bcc.n	80014a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014b2:	f00d ff1b 	bl	800f2ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014b6:	f7ff fb65 	bl	8000b84 <main>
  bx  lr    
 80014ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014bc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80014c0:	08011990 	.word	0x08011990
  ldr  r0, =_sdata
 80014c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80014c8:	200000dc 	.word	0x200000dc
  ldr  r2, =_sbss
 80014cc:	200000dc 	.word	0x200000dc
  ldr  r3, = _ebss
 80014d0:	20001784 	.word	0x20001784

080014d4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014d4:	e7fe      	b.n	80014d4 <ADC3_IRQHandler>
	...

080014d8 <ftpc_init>:
	}
}
*/

void ftpc_init(uint8_t * src_ip)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
	ftpc.dsock_mode = ACTIVE_MODE;
 80014e0:	4b12      	ldr	r3, [pc, #72]	; (800152c <ftpc_init+0x54>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	711a      	strb	r2, [r3, #4]

	local_ip.cVal[0] = src_ip[0];
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	781a      	ldrb	r2, [r3, #0]
 80014ea:	4b11      	ldr	r3, [pc, #68]	; (8001530 <ftpc_init+0x58>)
 80014ec:	701a      	strb	r2, [r3, #0]
	local_ip.cVal[1] = src_ip[1];
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	785a      	ldrb	r2, [r3, #1]
 80014f2:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <ftpc_init+0x58>)
 80014f4:	705a      	strb	r2, [r3, #1]
	local_ip.cVal[2] = src_ip[2];
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	789a      	ldrb	r2, [r3, #2]
 80014fa:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <ftpc_init+0x58>)
 80014fc:	709a      	strb	r2, [r3, #2]
	local_ip.cVal[3] = src_ip[3];
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	78da      	ldrb	r2, [r3, #3]
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <ftpc_init+0x58>)
 8001504:	70da      	strb	r2, [r3, #3]
	local_port = 35000;
 8001506:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <ftpc_init+0x5c>)
 8001508:	f648 02b8 	movw	r2, #35000	; 0x88b8
 800150c:	801a      	strh	r2, [r3, #0]
	strcpy(ftpc.workingdir, "/");
 800150e:	4a0a      	ldr	r2, [pc, #40]	; (8001538 <ftpc_init+0x60>)
 8001510:	4b0a      	ldr	r3, [pc, #40]	; (800153c <ftpc_init+0x64>)
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	8013      	strh	r3, [r2, #0]
	socket(CTRL_SOCK, Sn_MR_TCP, FTP_SRV_destport, 0x0); //- Blocking type - ugly, when sure that FTP server exist
 8001516:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <ftpc_init+0x68>)
 8001518:	881a      	ldrh	r2, [r3, #0]
 800151a:	2300      	movs	r3, #0
 800151c:	2101      	movs	r1, #1
 800151e:	2002      	movs	r0, #2
 8001520:	f001 fa8a 	bl	8002a38 <socket>
}
 8001524:	bf00      	nop
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000fec 	.word	0x20000fec
 8001530:	200012f0 	.word	0x200012f0
 8001534:	200012f4 	.word	0x200012f4
 8001538:	20000ff1 	.word	0x20000ff1
 800153c:	08010d20 	.word	0x08010d20
 8001540:	20000040 	.word	0x20000040

08001544 <ftpc_run>:

uint8_t ftpc_run(uint8_t * dbuf)
{
 8001544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001546:	b0b1      	sub	sp, #196	; 0xc4
 8001548:	af04      	add	r7, sp, #16
 800154a:	6078      	str	r0, [r7, #4]
	uint16_t size = 0;
 800154c:	2300      	movs	r3, #0
 800154e:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
	long ret = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	uint32_t send_byte, recv_byte;
	uint32_t blocklen;
	uint32_t remain_filesize;
	uint32_t remain_datasize;
	uint8_t msg_c;
	uint8_t dat[50]={0,};
 8001558:	2300      	movs	r3, #0
 800155a:	65bb      	str	r3, [r7, #88]	; 0x58
 800155c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001560:	222e      	movs	r2, #46	; 0x2e
 8001562:	2100      	movs	r1, #0
 8001564:	4618      	mov	r0, r3
 8001566:	f00d fee5 	bl	800f334 <memset>

    switch(getSn_SR(CTRL_SOCK))
 800156a:	f44f 7052 	mov.w	r0, #840	; 0x348
 800156e:	f001 ff8d 	bl	800348c <WIZCHIP_READ>
 8001572:	4603      	mov	r3, r0
 8001574:	2b1c      	cmp	r3, #28
 8001576:	f200 847e 	bhi.w	8001e76 <ftpc_run+0x932>
 800157a:	a201      	add	r2, pc, #4	; (adr r2, 8001580 <ftpc_run+0x3c>)
 800157c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001580:	08001df5 	.word	0x08001df5
 8001584:	08001e77 	.word	0x08001e77
 8001588:	08001e77 	.word	0x08001e77
 800158c:	08001e77 	.word	0x08001e77
 8001590:	08001e77 	.word	0x08001e77
 8001594:	08001e77 	.word	0x08001e77
 8001598:	08001e77 	.word	0x08001e77
 800159c:	08001e77 	.word	0x08001e77
 80015a0:	08001e77 	.word	0x08001e77
 80015a4:	08001e77 	.word	0x08001e77
 80015a8:	08001e77 	.word	0x08001e77
 80015ac:	08001e77 	.word	0x08001e77
 80015b0:	08001e77 	.word	0x08001e77
 80015b4:	08001e77 	.word	0x08001e77
 80015b8:	08001e77 	.word	0x08001e77
 80015bc:	08001e77 	.word	0x08001e77
 80015c0:	08001e77 	.word	0x08001e77
 80015c4:	08001e77 	.word	0x08001e77
 80015c8:	08001e77 	.word	0x08001e77
 80015cc:	08001e33 	.word	0x08001e33
 80015d0:	08001e77 	.word	0x08001e77
 80015d4:	08001e77 	.word	0x08001e77
 80015d8:	08001e77 	.word	0x08001e77
 80015dc:	080015f5 	.word	0x080015f5
 80015e0:	08001e77 	.word	0x08001e77
 80015e4:	08001e77 	.word	0x08001e77
 80015e8:	08001e77 	.word	0x08001e77
 80015ec:	08001e77 	.word	0x08001e77
 80015f0:	08001dc7 	.word	0x08001dc7
    {
    	case SOCK_ESTABLISHED :
    		if(!connect_state_control_ftpc){
 80015f4:	4bb5      	ldr	r3, [pc, #724]	; (80018cc <ftpc_run+0x388>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d10a      	bne.n	8001612 <ftpc_run+0xce>
    			printf("%d:[SOCK_ESTABLISHED]FTP Connected\r\n", CTRL_SOCK);
 80015fc:	2102      	movs	r1, #2
 80015fe:	48b4      	ldr	r0, [pc, #720]	; (80018d0 <ftpc_run+0x38c>)
 8001600:	f00d fea0 	bl	800f344 <iprintf>
    			strcpy(ftpc.workingdir, "/");
 8001604:	4ab3      	ldr	r2, [pc, #716]	; (80018d4 <ftpc_run+0x390>)
 8001606:	4bb4      	ldr	r3, [pc, #720]	; (80018d8 <ftpc_run+0x394>)
 8001608:	881b      	ldrh	r3, [r3, #0]
 800160a:	8013      	strh	r3, [r2, #0]
    			connect_state_control_ftpc = 1;
 800160c:	4baf      	ldr	r3, [pc, #700]	; (80018cc <ftpc_run+0x388>)
 800160e:	2201      	movs	r2, #1
 8001610:	701a      	strb	r2, [r3, #0]
    		}
    		if(gMenuStart){
 8001612:	4bb2      	ldr	r3, [pc, #712]	; (80018dc <ftpc_run+0x398>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	f000 82e3 	beq.w	8001be2 <ftpc_run+0x69e>
				gMenuStart = 0;
 800161c:	4baf      	ldr	r3, [pc, #700]	; (80018dc <ftpc_run+0x398>)
 800161e:	2200      	movs	r2, #0
 8001620:	701a      	strb	r2, [r3, #0]
				printf("\r\n----------------------------------------\r\n");
 8001622:	48af      	ldr	r0, [pc, #700]	; (80018e0 <ftpc_run+0x39c>)
 8001624:	f00d ff2a 	bl	800f47c <puts>
				printf("Press menu key\r\n");
 8001628:	48ae      	ldr	r0, [pc, #696]	; (80018e4 <ftpc_run+0x3a0>)
 800162a:	f00d ff27 	bl	800f47c <puts>
				printf("----------------------------------------\r\n");
 800162e:	48ae      	ldr	r0, [pc, #696]	; (80018e8 <ftpc_run+0x3a4>)
 8001630:	f00d ff24 	bl	800f47c <puts>
				printf("1> View FTP Server Directory\r\n");
 8001634:	48ad      	ldr	r0, [pc, #692]	; (80018ec <ftpc_run+0x3a8>)
 8001636:	f00d ff21 	bl	800f47c <puts>
				printf("2> View SDCARD Directory\r\n");
 800163a:	48ad      	ldr	r0, [pc, #692]	; (80018f0 <ftpc_run+0x3ac>)
 800163c:	f00d ff1e 	bl	800f47c <puts>
				printf("3> Sets the type of file to be transferred. Current state : %s\r\n", (ftpc.type==ASCII_TYPE)?"Ascii":"Binary");
 8001640:	4bac      	ldr	r3, [pc, #688]	; (80018f4 <ftpc_run+0x3b0>)
 8001642:	789b      	ldrb	r3, [r3, #2]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d101      	bne.n	800164c <ftpc_run+0x108>
 8001648:	4bab      	ldr	r3, [pc, #684]	; (80018f8 <ftpc_run+0x3b4>)
 800164a:	e000      	b.n	800164e <ftpc_run+0x10a>
 800164c:	4bab      	ldr	r3, [pc, #684]	; (80018fc <ftpc_run+0x3b8>)
 800164e:	4619      	mov	r1, r3
 8001650:	48ab      	ldr	r0, [pc, #684]	; (8001900 <ftpc_run+0x3bc>)
 8001652:	f00d fe77 	bl	800f344 <iprintf>
				printf("4> Sets Data Connection. Current state : %s\r\n", (ftpc.dsock_mode==ACTIVE_MODE)?"Active":"Passive");
 8001656:	4ba7      	ldr	r3, [pc, #668]	; (80018f4 <ftpc_run+0x3b0>)
 8001658:	791b      	ldrb	r3, [r3, #4]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d101      	bne.n	8001662 <ftpc_run+0x11e>
 800165e:	4ba9      	ldr	r3, [pc, #676]	; (8001904 <ftpc_run+0x3c0>)
 8001660:	e000      	b.n	8001664 <ftpc_run+0x120>
 8001662:	4ba9      	ldr	r3, [pc, #676]	; (8001908 <ftpc_run+0x3c4>)
 8001664:	4619      	mov	r1, r3
 8001666:	48a9      	ldr	r0, [pc, #676]	; (800190c <ftpc_run+0x3c8>)
 8001668:	f00d fe6c 	bl	800f344 <iprintf>
				printf("5> Put File to Server\r\n");
 800166c:	48a8      	ldr	r0, [pc, #672]	; (8001910 <ftpc_run+0x3cc>)
 800166e:	f00d ff05 	bl	800f47c <puts>
				printf("6> Get File from Server\r\n");
 8001672:	48a8      	ldr	r0, [pc, #672]	; (8001914 <ftpc_run+0x3d0>)
 8001674:	f00d ff02 	bl	800f47c <puts>
#if defined(F_FILESYSTEM)
				printf("7> Delete File from SDCARD\r\n");
 8001678:	48a7      	ldr	r0, [pc, #668]	; (8001918 <ftpc_run+0x3d4>)
 800167a:	f00d feff 	bl	800f47c <puts>
#endif
				printf("8> Delete File from FTP Server\r\n");
 800167e:	48a7      	ldr	r0, [pc, #668]	; (800191c <ftpc_run+0x3d8>)
 8001680:	f00d fefc 	bl	800f47c <puts>
				printf("9> Execute custom command onto FTP Server\r\n");
 8001684:	48a6      	ldr	r0, [pc, #664]	; (8001920 <ftpc_run+0x3dc>)
 8001686:	f00d fef9 	bl	800f47c <puts>
				printf("T> Test message\r\n");
 800168a:	48a6      	ldr	r0, [pc, #664]	; (8001924 <ftpc_run+0x3e0>)
 800168c:	f00d fef6 	bl	800f47c <puts>
				printf("S> Status board (FreeRam and UpTime)\r\n");
 8001690:	48a5      	ldr	r0, [pc, #660]	; (8001928 <ftpc_run+0x3e4>)
 8001692:	f00d fef3 	bl	800f47c <puts>
				printf("R> Reboot board\r\n");
 8001696:	48a5      	ldr	r0, [pc, #660]	; (800192c <ftpc_run+0x3e8>)
 8001698:	f00d fef0 	bl	800f47c <puts>
				printf("----------------------------------------\r\n");
 800169c:	4892      	ldr	r0, [pc, #584]	; (80018e8 <ftpc_run+0x3a4>)
 800169e:	f00d feed 	bl	800f47c <puts>
				while(1){
					msg_c = uart8_receive();
 80016a2:	f001 fee1 	bl	8003468 <uart8_receive>
 80016a6:	4603      	mov	r3, r0
 80016a8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					if((msg_c=='t')||(msg_c=='T')){
 80016ac:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80016b0:	2b74      	cmp	r3, #116	; 0x74
 80016b2:	d003      	beq.n	80016bc <ftpc_run+0x178>
 80016b4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80016b8:	2b54      	cmp	r3, #84	; 0x54
 80016ba:	d109      	bne.n	80016d0 <ftpc_run+0x18c>
						printf("\r\nTest message: Hello!\r\n");
 80016bc:	489c      	ldr	r0, [pc, #624]	; (8001930 <ftpc_run+0x3ec>)
 80016be:	f00d fedd 	bl	800f47c <puts>
						gMenuStart = 1;
 80016c2:	4b86      	ldr	r3, [pc, #536]	; (80018dc <ftpc_run+0x398>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	701a      	strb	r2, [r3, #0]
						HAL_Delay(100);
 80016c8:	2064      	movs	r0, #100	; 0x64
 80016ca:	f002 ff7b 	bl	80045c4 <HAL_Delay>
						break;
 80016ce:	e288      	b.n	8001be2 <ftpc_run+0x69e>
					}
					else if((msg_c=='s')||(msg_c=='S')){
 80016d0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80016d4:	2b73      	cmp	r3, #115	; 0x73
 80016d6:	d003      	beq.n	80016e0 <ftpc_run+0x19c>
 80016d8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80016dc:	2b53      	cmp	r3, #83	; 0x53
 80016de:	d106      	bne.n	80016ee <ftpc_run+0x1aa>
						//printf("\r\nUptime: %lu sec\r\nFreeRam: %u bytes\r\n", millis()/1000, freeRam());
						gMenuStart = 1;
 80016e0:	4b7e      	ldr	r3, [pc, #504]	; (80018dc <ftpc_run+0x398>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	701a      	strb	r2, [r3, #0]
						HAL_Delay(100);
 80016e6:	2064      	movs	r0, #100	; 0x64
 80016e8:	f002 ff6c 	bl	80045c4 <HAL_Delay>
						break;
 80016ec:	e279      	b.n	8001be2 <ftpc_run+0x69e>
					}
					else if((msg_c=='r')||(msg_c=='R')){
 80016ee:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80016f2:	2b72      	cmp	r3, #114	; 0x72
 80016f4:	d003      	beq.n	80016fe <ftpc_run+0x1ba>
 80016f6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80016fa:	2b52      	cmp	r3, #82	; 0x52
 80016fc:	d10a      	bne.n	8001714 <ftpc_run+0x1d0>
						printf("\r\nReboot the board");
 80016fe:	488d      	ldr	r0, [pc, #564]	; (8001934 <ftpc_run+0x3f0>)
 8001700:	f00d fe20 	bl	800f344 <iprintf>
						while(1)
						{
							HAL_Delay(1000);
 8001704:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001708:	f002 ff5c 	bl	80045c4 <HAL_Delay>
							printf(".");
 800170c:	202e      	movs	r0, #46	; 0x2e
 800170e:	f00d fe31 	bl	800f374 <putchar>
							HAL_Delay(1000);
 8001712:	e7f7      	b.n	8001704 <ftpc_run+0x1c0>
						}
						break;
					}
					else if(msg_c=='1'){
 8001714:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001718:	2b31      	cmp	r3, #49	; 0x31
 800171a:	d157      	bne.n	80017cc <ftpc_run+0x288>
						// View FTP Server Directory
						HAL_Delay(100);
 800171c:	2064      	movs	r0, #100	; 0x64
 800171e:	f002 ff51 	bl	80045c4 <HAL_Delay>
						if(ftpc.dsock_mode==PASSIVE_MODE){
 8001722:	4b74      	ldr	r3, [pc, #464]	; (80018f4 <ftpc_run+0x3b0>)
 8001724:	791b      	ldrb	r3, [r3, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d116      	bne.n	8001758 <ftpc_run+0x214>
							sprintf(dat,"PASV\r\n");
 800172a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800172e:	4982      	ldr	r1, [pc, #520]	; (8001938 <ftpc_run+0x3f4>)
 8001730:	4618      	mov	r0, r3
 8001732:	f00d feab 	bl	800f48c <siprintf>
							send(CTRL_SOCK, (uint8_t *)dat, strlen(dat));
 8001736:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800173a:	4618      	mov	r0, r3
 800173c:	f7fe fdd0 	bl	80002e0 <strlen>
 8001740:	4603      	mov	r3, r0
 8001742:	b29a      	uxth	r2, r3
 8001744:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001748:	4619      	mov	r1, r3
 800174a:	2002      	movs	r0, #2
 800174c:	f001 fca4 	bl	8003098 <send>
							Command.First = f_dir;
 8001750:	4b7a      	ldr	r3, [pc, #488]	; (800193c <ftpc_run+0x3f8>)
 8001752:	2201      	movs	r2, #1
 8001754:	701a      	strb	r2, [r3, #0]
							break;
 8001756:	e244      	b.n	8001be2 <ftpc_run+0x69e>
						}
						else{
							wiz_NetInfo gWIZNETINFO;
							ctlnetwork(CN_GET_NETINFO, (void*) &gWIZNETINFO);
 8001758:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800175c:	4619      	mov	r1, r3
 800175e:	2001      	movs	r0, #1
 8001760:	f002 fab8 	bl	8003cd4 <ctlnetwork>
							sprintf(dat,"PORT %d,%d,%d,%d,%d,%d\r\n", gWIZNETINFO.ip[0], gWIZNETINFO.ip[1], gWIZNETINFO.ip[2], gWIZNETINFO.ip[3], (uint8_t)(local_port>>8), (uint8_t)(local_port&0x00ff));
 8001764:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001768:	461d      	mov	r5, r3
 800176a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800176e:	461e      	mov	r6, r3
 8001770:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001774:	461a      	mov	r2, r3
 8001776:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800177a:	4619      	mov	r1, r3
 800177c:	4b70      	ldr	r3, [pc, #448]	; (8001940 <ftpc_run+0x3fc>)
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	0a1b      	lsrs	r3, r3, #8
 8001782:	b29b      	uxth	r3, r3
 8001784:	b2db      	uxtb	r3, r3
 8001786:	461c      	mov	r4, r3
 8001788:	4b6d      	ldr	r3, [pc, #436]	; (8001940 <ftpc_run+0x3fc>)
 800178a:	881b      	ldrh	r3, [r3, #0]
 800178c:	b2db      	uxtb	r3, r3
 800178e:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8001792:	9303      	str	r3, [sp, #12]
 8001794:	9402      	str	r4, [sp, #8]
 8001796:	9101      	str	r1, [sp, #4]
 8001798:	9200      	str	r2, [sp, #0]
 800179a:	4633      	mov	r3, r6
 800179c:	462a      	mov	r2, r5
 800179e:	4969      	ldr	r1, [pc, #420]	; (8001944 <ftpc_run+0x400>)
 80017a0:	f00d fe74 	bl	800f48c <siprintf>
							send(CTRL_SOCK, (uint8_t *)dat, strlen(dat));
 80017a4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7fe fd99 	bl	80002e0 <strlen>
 80017ae:	4603      	mov	r3, r0
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017b6:	4619      	mov	r1, r3
 80017b8:	2002      	movs	r0, #2
 80017ba:	f001 fc6d 	bl	8003098 <send>
							Command.First = f_dir;
 80017be:	4b5f      	ldr	r3, [pc, #380]	; (800193c <ftpc_run+0x3f8>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	701a      	strb	r2, [r3, #0]

							gModeActivePassiveflag = 1;
 80017c4:	4b60      	ldr	r3, [pc, #384]	; (8001948 <ftpc_run+0x404>)
 80017c6:	2201      	movs	r2, #1
 80017c8:	701a      	strb	r2, [r3, #0]
							break;
 80017ca:	e20a      	b.n	8001be2 <ftpc_run+0x69e>
						}
						break;
					}
					else if(msg_c=='5'){
 80017cc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80017d0:	2b35      	cmp	r3, #53	; 0x35
 80017d2:	d157      	bne.n	8001884 <ftpc_run+0x340>
						// Put File to Server
						HAL_Delay(100);
 80017d4:	2064      	movs	r0, #100	; 0x64
 80017d6:	f002 fef5 	bl	80045c4 <HAL_Delay>
						//uart0_rx_flash();
						if(ftpc.dsock_mode==PASSIVE_MODE){
 80017da:	4b46      	ldr	r3, [pc, #280]	; (80018f4 <ftpc_run+0x3b0>)
 80017dc:	791b      	ldrb	r3, [r3, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d116      	bne.n	8001810 <ftpc_run+0x2cc>
							sprintf(dat,"PASV\r\n");
 80017e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017e6:	4954      	ldr	r1, [pc, #336]	; (8001938 <ftpc_run+0x3f4>)
 80017e8:	4618      	mov	r0, r3
 80017ea:	f00d fe4f 	bl	800f48c <siprintf>
							send(CTRL_SOCK, (uint8_t *)dat, strlen(dat));
 80017ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7fe fd74 	bl	80002e0 <strlen>
 80017f8:	4603      	mov	r3, r0
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001800:	4619      	mov	r1, r3
 8001802:	2002      	movs	r0, #2
 8001804:	f001 fc48 	bl	8003098 <send>
							Command.First = f_put;
 8001808:	4b4c      	ldr	r3, [pc, #304]	; (800193c <ftpc_run+0x3f8>)
 800180a:	2202      	movs	r2, #2
 800180c:	701a      	strb	r2, [r3, #0]
							break;
 800180e:	e1e8      	b.n	8001be2 <ftpc_run+0x69e>
						}
						else{
							wiz_NetInfo gWIZNETINFO;
							ctlnetwork(CN_GET_NETINFO, (void*) &gWIZNETINFO);
 8001810:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001814:	4619      	mov	r1, r3
 8001816:	2001      	movs	r0, #1
 8001818:	f002 fa5c 	bl	8003cd4 <ctlnetwork>
							sprintf(dat,"PORT %d,%d,%d,%d,%d,%d\r\n", gWIZNETINFO.ip[0], gWIZNETINFO.ip[1], gWIZNETINFO.ip[2], gWIZNETINFO.ip[3], (uint8_t)(local_port>>8), (uint8_t)(local_port&0x00ff));
 800181c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001820:	461d      	mov	r5, r3
 8001822:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001826:	461e      	mov	r6, r3
 8001828:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800182c:	461a      	mov	r2, r3
 800182e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001832:	4619      	mov	r1, r3
 8001834:	4b42      	ldr	r3, [pc, #264]	; (8001940 <ftpc_run+0x3fc>)
 8001836:	881b      	ldrh	r3, [r3, #0]
 8001838:	0a1b      	lsrs	r3, r3, #8
 800183a:	b29b      	uxth	r3, r3
 800183c:	b2db      	uxtb	r3, r3
 800183e:	461c      	mov	r4, r3
 8001840:	4b3f      	ldr	r3, [pc, #252]	; (8001940 <ftpc_run+0x3fc>)
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	b2db      	uxtb	r3, r3
 8001846:	f107 0058 	add.w	r0, r7, #88	; 0x58
 800184a:	9303      	str	r3, [sp, #12]
 800184c:	9402      	str	r4, [sp, #8]
 800184e:	9101      	str	r1, [sp, #4]
 8001850:	9200      	str	r2, [sp, #0]
 8001852:	4633      	mov	r3, r6
 8001854:	462a      	mov	r2, r5
 8001856:	493b      	ldr	r1, [pc, #236]	; (8001944 <ftpc_run+0x400>)
 8001858:	f00d fe18 	bl	800f48c <siprintf>
							send(CTRL_SOCK, (uint8_t *)dat, strlen(dat));
 800185c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001860:	4618      	mov	r0, r3
 8001862:	f7fe fd3d 	bl	80002e0 <strlen>
 8001866:	4603      	mov	r3, r0
 8001868:	b29a      	uxth	r2, r3
 800186a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800186e:	4619      	mov	r1, r3
 8001870:	2002      	movs	r0, #2
 8001872:	f001 fc11 	bl	8003098 <send>
							Command.First = f_put;
 8001876:	4b31      	ldr	r3, [pc, #196]	; (800193c <ftpc_run+0x3f8>)
 8001878:	2202      	movs	r2, #2
 800187a:	701a      	strb	r2, [r3, #0]

							gModeActivePassiveflag = 1;
 800187c:	4b32      	ldr	r3, [pc, #200]	; (8001948 <ftpc_run+0x404>)
 800187e:	2201      	movs	r2, #1
 8001880:	701a      	strb	r2, [r3, #0]
							break;
 8001882:	e1ae      	b.n	8001be2 <ftpc_run+0x69e>
						}
					}
					else if(msg_c=='6'){
 8001884:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001888:	2b36      	cmp	r3, #54	; 0x36
 800188a:	f040 8095 	bne.w	80019b8 <ftpc_run+0x474>
						// Get File from Server
						HAL_Delay(100);
 800188e:	2064      	movs	r0, #100	; 0x64
 8001890:	f002 fe98 	bl	80045c4 <HAL_Delay>
						//uart0_rx_flash();
						if(ftpc.dsock_mode==PASSIVE_MODE){
 8001894:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <ftpc_run+0x3b0>)
 8001896:	791b      	ldrb	r3, [r3, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d157      	bne.n	800194c <ftpc_run+0x408>
							sprintf(dat,"PASV\r\n");
 800189c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018a0:	4925      	ldr	r1, [pc, #148]	; (8001938 <ftpc_run+0x3f4>)
 80018a2:	4618      	mov	r0, r3
 80018a4:	f00d fdf2 	bl	800f48c <siprintf>
							send(CTRL_SOCK, (uint8_t *)dat, strlen(dat));
 80018a8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7fe fd17 	bl	80002e0 <strlen>
 80018b2:	4603      	mov	r3, r0
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018ba:	4619      	mov	r1, r3
 80018bc:	2002      	movs	r0, #2
 80018be:	f001 fbeb 	bl	8003098 <send>
							Command.First = f_get;
 80018c2:	4b1e      	ldr	r3, [pc, #120]	; (800193c <ftpc_run+0x3f8>)
 80018c4:	2203      	movs	r2, #3
 80018c6:	701a      	strb	r2, [r3, #0]
							break;
 80018c8:	e18b      	b.n	8001be2 <ftpc_run+0x69e>
 80018ca:	bf00      	nop
 80018cc:	20000100 	.word	0x20000100
 80018d0:	08010d24 	.word	0x08010d24
 80018d4:	20000ff1 	.word	0x20000ff1
 80018d8:	08010d20 	.word	0x08010d20
 80018dc:	20000103 	.word	0x20000103
 80018e0:	08010d4c 	.word	0x08010d4c
 80018e4:	08010d78 	.word	0x08010d78
 80018e8:	08010d88 	.word	0x08010d88
 80018ec:	08010db4 	.word	0x08010db4
 80018f0:	08010dd4 	.word	0x08010dd4
 80018f4:	20000fec 	.word	0x20000fec
 80018f8:	08010df0 	.word	0x08010df0
 80018fc:	08010df8 	.word	0x08010df8
 8001900:	08010e00 	.word	0x08010e00
 8001904:	08010e44 	.word	0x08010e44
 8001908:	08010e4c 	.word	0x08010e4c
 800190c:	08010e54 	.word	0x08010e54
 8001910:	08010e84 	.word	0x08010e84
 8001914:	08010e9c 	.word	0x08010e9c
 8001918:	08010eb8 	.word	0x08010eb8
 800191c:	08010ed4 	.word	0x08010ed4
 8001920:	08010ef4 	.word	0x08010ef4
 8001924:	08010f20 	.word	0x08010f20
 8001928:	08010f34 	.word	0x08010f34
 800192c:	08010f5c 	.word	0x08010f5c
 8001930:	08010f70 	.word	0x08010f70
 8001934:	08010f88 	.word	0x08010f88
 8001938:	08010f9c 	.word	0x08010f9c
 800193c:	20001300 	.word	0x20001300
 8001940:	200012f4 	.word	0x200012f4
 8001944:	08010fa4 	.word	0x08010fa4
 8001948:	20000102 	.word	0x20000102
						}
						else{
							wiz_NetInfo gWIZNETINFO;
							ctlnetwork(CN_GET_NETINFO, (void*) &gWIZNETINFO);
 800194c:	f107 0310 	add.w	r3, r7, #16
 8001950:	4619      	mov	r1, r3
 8001952:	2001      	movs	r0, #1
 8001954:	f002 f9be 	bl	8003cd4 <ctlnetwork>
							sprintf(dat,"PORT %d,%d,%d,%d,%d,%d\r\n", gWIZNETINFO.ip[0], gWIZNETINFO.ip[1], gWIZNETINFO.ip[2], gWIZNETINFO.ip[3], (uint8_t)(local_port>>8), (uint8_t)(local_port&0x00ff));
 8001958:	7dbb      	ldrb	r3, [r7, #22]
 800195a:	461d      	mov	r5, r3
 800195c:	7dfb      	ldrb	r3, [r7, #23]
 800195e:	461e      	mov	r6, r3
 8001960:	7e3b      	ldrb	r3, [r7, #24]
 8001962:	461a      	mov	r2, r3
 8001964:	7e7b      	ldrb	r3, [r7, #25]
 8001966:	4619      	mov	r1, r3
 8001968:	4bca      	ldr	r3, [pc, #808]	; (8001c94 <ftpc_run+0x750>)
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	0a1b      	lsrs	r3, r3, #8
 800196e:	b29b      	uxth	r3, r3
 8001970:	b2db      	uxtb	r3, r3
 8001972:	461c      	mov	r4, r3
 8001974:	4bc7      	ldr	r3, [pc, #796]	; (8001c94 <ftpc_run+0x750>)
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	b2db      	uxtb	r3, r3
 800197a:	f107 0058 	add.w	r0, r7, #88	; 0x58
 800197e:	9303      	str	r3, [sp, #12]
 8001980:	9402      	str	r4, [sp, #8]
 8001982:	9101      	str	r1, [sp, #4]
 8001984:	9200      	str	r2, [sp, #0]
 8001986:	4633      	mov	r3, r6
 8001988:	462a      	mov	r2, r5
 800198a:	49c3      	ldr	r1, [pc, #780]	; (8001c98 <ftpc_run+0x754>)
 800198c:	f00d fd7e 	bl	800f48c <siprintf>
							send(CTRL_SOCK, (uint8_t *)dat, strlen(dat));
 8001990:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001994:	4618      	mov	r0, r3
 8001996:	f7fe fca3 	bl	80002e0 <strlen>
 800199a:	4603      	mov	r3, r0
 800199c:	b29a      	uxth	r2, r3
 800199e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019a2:	4619      	mov	r1, r3
 80019a4:	2002      	movs	r0, #2
 80019a6:	f001 fb77 	bl	8003098 <send>
							Command.First = f_get;
 80019aa:	4bbc      	ldr	r3, [pc, #752]	; (8001c9c <ftpc_run+0x758>)
 80019ac:	2203      	movs	r2, #3
 80019ae:	701a      	strb	r2, [r3, #0]

							gModeActivePassiveflag = 1;
 80019b0:	4bbb      	ldr	r3, [pc, #748]	; (8001ca0 <ftpc_run+0x75c>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	701a      	strb	r2, [r3, #0]
							break;
 80019b6:	e114      	b.n	8001be2 <ftpc_run+0x69e>
						}
					}
					else if(msg_c=='2'){
 80019b8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80019bc:	2b32      	cmp	r3, #50	; 0x32
 80019be:	d112      	bne.n	80019e6 <ftpc_run+0x4a2>
						HAL_Delay(100);
 80019c0:	2064      	movs	r0, #100	; 0x64
 80019c2:	f002 fdff 	bl	80045c4 <HAL_Delay>
#if defined(F_FILESYSTEM)
						printf ("\r\n\r\nSD-Card root file list:\r\n");
 80019c6:	48b7      	ldr	r0, [pc, #732]	; (8001ca4 <ftpc_run+0x760>)
 80019c8:	f00d fd58 	bl	800f47c <puts>
						printf ("===============================================\r\n");
 80019cc:	48b6      	ldr	r0, [pc, #728]	; (8001ca8 <ftpc_run+0x764>)
 80019ce:	f00d fd55 	bl	800f47c <puts>
						ls_dir(ftpc.workingdir); //Works OK
 80019d2:	48b6      	ldr	r0, [pc, #728]	; (8001cac <ftpc_run+0x768>)
 80019d4:	f7ff f82c 	bl	8000a30 <ls_dir>
						printf ("===============================================\r\n\r\n");
 80019d8:	48b5      	ldr	r0, [pc, #724]	; (8001cb0 <ftpc_run+0x76c>)
 80019da:	f00d fd4f 	bl	800f47c <puts>
#else
						if (strncmp(ftpc.workingdir, "/$Recycle.Bin", sizeof("/$Recycle.Bin")) != 0)
							size = sprintf(dbuf, "drwxr-xr-x 1 ftp ftp 0 Dec 31 2014 $Recycle.Bin\r\n-rwxr-xr-x 1 ftp ftp 512 Dec 31 2014 test.txt\r\n");
						printf("\r\n%s\r\n", dbuf);
#endif
						gMenuStart = 1;
 80019de:	4bb5      	ldr	r3, [pc, #724]	; (8001cb4 <ftpc_run+0x770>)
 80019e0:	2201      	movs	r2, #1
 80019e2:	701a      	strb	r2, [r3, #0]
						break;
 80019e4:	e0fd      	b.n	8001be2 <ftpc_run+0x69e>
					}
					else if(msg_c=='3'){
 80019e6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80019ea:	2b33      	cmp	r3, #51	; 0x33
 80019ec:	d14d      	bne.n	8001a8a <ftpc_run+0x546>
						printf("\r\n1> ASCII\r\n");
 80019ee:	48b2      	ldr	r0, [pc, #712]	; (8001cb8 <ftpc_run+0x774>)
 80019f0:	f00d fd44 	bl	800f47c <puts>
						printf("2> BINARY\r\n");
 80019f4:	48b1      	ldr	r0, [pc, #708]	; (8001cbc <ftpc_run+0x778>)
 80019f6:	f00d fd41 	bl	800f47c <puts>
						HAL_Delay(100);
 80019fa:	2064      	movs	r0, #100	; 0x64
 80019fc:	f002 fde2 	bl	80045c4 <HAL_Delay>
						//uart0_rx_flash();
						while(1){
							msg_c = uart8_receive();
 8001a00:	f001 fd32 	bl	8003468 <uart8_receive>
 8001a04:	4603      	mov	r3, r0
 8001a06:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
							HAL_Delay(100);
 8001a0a:	2064      	movs	r0, #100	; 0x64
 8001a0c:	f002 fdda 	bl	80045c4 <HAL_Delay>
							//uart0_rx_flash();
							if(msg_c=='1'){
 8001a10:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001a14:	2b31      	cmp	r3, #49	; 0x31
 8001a16:	d117      	bne.n	8001a48 <ftpc_run+0x504>
								sprintf(dat,"TYPE %c\r\n", TransferAscii);
 8001a18:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a1c:	2241      	movs	r2, #65	; 0x41
 8001a1e:	49a8      	ldr	r1, [pc, #672]	; (8001cc0 <ftpc_run+0x77c>)
 8001a20:	4618      	mov	r0, r3
 8001a22:	f00d fd33 	bl	800f48c <siprintf>
								ftpc.type = ASCII_TYPE;
 8001a26:	4ba7      	ldr	r3, [pc, #668]	; (8001cc4 <ftpc_run+0x780>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	709a      	strb	r2, [r3, #2]
								send(CTRL_SOCK, (uint8_t *)dat, strlen(dat));
 8001a2c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7fe fc55 	bl	80002e0 <strlen>
 8001a36:	4603      	mov	r3, r0
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a3e:	4619      	mov	r1, r3
 8001a40:	2002      	movs	r0, #2
 8001a42:	f001 fb29 	bl	8003098 <send>
								break;
 8001a46:	e01f      	b.n	8001a88 <ftpc_run+0x544>
							}
							else if(msg_c=='2'){
 8001a48:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001a4c:	2b32      	cmp	r3, #50	; 0x32
 8001a4e:	d117      	bne.n	8001a80 <ftpc_run+0x53c>
								sprintf(dat,"TYPE %c\r\n", TransferBinary);
 8001a50:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a54:	2249      	movs	r2, #73	; 0x49
 8001a56:	499a      	ldr	r1, [pc, #616]	; (8001cc0 <ftpc_run+0x77c>)
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f00d fd17 	bl	800f48c <siprintf>
								ftpc.type = IMAGE_TYPE;
 8001a5e:	4b99      	ldr	r3, [pc, #612]	; (8001cc4 <ftpc_run+0x780>)
 8001a60:	2201      	movs	r2, #1
 8001a62:	709a      	strb	r2, [r3, #2]
								send(CTRL_SOCK, (uint8_t *)dat, strlen(dat));
 8001a64:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7fe fc39 	bl	80002e0 <strlen>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a76:	4619      	mov	r1, r3
 8001a78:	2002      	movs	r0, #2
 8001a7a:	f001 fb0d 	bl	8003098 <send>
								break;
 8001a7e:	e003      	b.n	8001a88 <ftpc_run+0x544>
							}
							else{
								printf("\r\nRetry...\r\n");
 8001a80:	4891      	ldr	r0, [pc, #580]	; (8001cc8 <ftpc_run+0x784>)
 8001a82:	f00d fcfb 	bl	800f47c <puts>
							msg_c = uart8_receive();
 8001a86:	e7bb      	b.n	8001a00 <ftpc_run+0x4bc>
							}
						}
						break;
 8001a88:	e0ab      	b.n	8001be2 <ftpc_run+0x69e>
					}
					else if(msg_c=='4'){
 8001a8a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001a8e:	2b34      	cmp	r3, #52	; 0x34
 8001a90:	d128      	bne.n	8001ae4 <ftpc_run+0x5a0>
						printf("\r\n1> ACTIVE\r\n");
 8001a92:	488e      	ldr	r0, [pc, #568]	; (8001ccc <ftpc_run+0x788>)
 8001a94:	f00d fcf2 	bl	800f47c <puts>
						printf("2> PASSIVE(Disabled)\r\n");
 8001a98:	488d      	ldr	r0, [pc, #564]	; (8001cd0 <ftpc_run+0x78c>)
 8001a9a:	f00d fcef 	bl	800f47c <puts>
						HAL_Delay(100);
 8001a9e:	2064      	movs	r0, #100	; 0x64
 8001aa0:	f002 fd90 	bl	80045c4 <HAL_Delay>
						//uart0_rx_flash();
						while(1){
							msg_c=uart8_receive();
 8001aa4:	f001 fce0 	bl	8003468 <uart8_receive>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
							HAL_Delay(100);
 8001aae:	2064      	movs	r0, #100	; 0x64
 8001ab0:	f002 fd88 	bl	80045c4 <HAL_Delay>
							//uart0_rx_flash();
							if(msg_c=='1'){
 8001ab4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001ab8:	2b31      	cmp	r3, #49	; 0x31
 8001aba:	d103      	bne.n	8001ac4 <ftpc_run+0x580>
								ftpc.dsock_mode=ACTIVE_MODE;
 8001abc:	4b81      	ldr	r3, [pc, #516]	; (8001cc4 <ftpc_run+0x780>)
 8001abe:	2201      	movs	r2, #1
 8001ac0:	711a      	strb	r2, [r3, #4]
								break;
 8001ac2:	e00b      	b.n	8001adc <ftpc_run+0x598>
							}
							else if(msg_c=='2'){
 8001ac4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001ac8:	2b32      	cmp	r3, #50	; 0x32
 8001aca:	d103      	bne.n	8001ad4 <ftpc_run+0x590>
								//PASSIVE mode with bugs, so disabled
								//ftpc.dsock_mode=PASSIVE_MODE;
								ftpc.dsock_mode=ACTIVE_MODE;
 8001acc:	4b7d      	ldr	r3, [pc, #500]	; (8001cc4 <ftpc_run+0x780>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	711a      	strb	r2, [r3, #4]
								break;
 8001ad2:	e003      	b.n	8001adc <ftpc_run+0x598>
							}
							else{
								printf("\r\nRetry...\r\n");
 8001ad4:	487c      	ldr	r0, [pc, #496]	; (8001cc8 <ftpc_run+0x784>)
 8001ad6:	f00d fcd1 	bl	800f47c <puts>
							msg_c=uart8_receive();
 8001ada:	e7e3      	b.n	8001aa4 <ftpc_run+0x560>
							}
						}
						gMenuStart = 1;
 8001adc:	4b75      	ldr	r3, [pc, #468]	; (8001cb4 <ftpc_run+0x770>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	701a      	strb	r2, [r3, #0]
						break;
 8001ae2:	e07e      	b.n	8001be2 <ftpc_run+0x69e>
					}
#if defined(F_FILESYSTEM)
					else if(msg_c=='7'){
 8001ae4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001ae8:	2b37      	cmp	r3, #55	; 0x37
 8001aea:	d11e      	bne.n	8001b2a <ftpc_run+0x5e6>
						printf(">del filename (SD-CARD)?");
 8001aec:	4879      	ldr	r0, [pc, #484]	; (8001cd4 <ftpc_run+0x790>)
 8001aee:	f00d fc29 	bl	800f344 <iprintf>
						HAL_Delay(100);
 8001af2:	2064      	movs	r0, #100	; 0x64
 8001af4:	f002 fd66 	bl	80045c4 <HAL_Delay>
						//uart0_rx_flash();
						sprintf(ftpc.filename, "/%s\r\n", User_Keyboard_MSG());
 8001af8:	f000 ff72 	bl	80029e0 <User_Keyboard_MSG>
 8001afc:	4603      	mov	r3, r0
 8001afe:	461a      	mov	r2, r3
 8001b00:	4975      	ldr	r1, [pc, #468]	; (8001cd8 <ftpc_run+0x794>)
 8001b02:	4876      	ldr	r0, [pc, #472]	; (8001cdc <ftpc_run+0x798>)
 8001b04:	f00d fcc2 	bl	800f48c <siprintf>
						if (f_unlink((const char *)ftpc.filename) != 0){
 8001b08:	4874      	ldr	r0, [pc, #464]	; (8001cdc <ftpc_run+0x798>)
 8001b0a:	f00d f837 	bl	800eb7c <f_unlink>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d003      	beq.n	8001b1c <ftpc_run+0x5d8>
							printf("\r\nCould not delete.\r\n");
 8001b14:	4872      	ldr	r0, [pc, #456]	; (8001ce0 <ftpc_run+0x79c>)
 8001b16:	f00d fcb1 	bl	800f47c <puts>
 8001b1a:	e002      	b.n	8001b22 <ftpc_run+0x5de>
						}
						else{
							printf("\r\nDeleted.\r\n");
 8001b1c:	4871      	ldr	r0, [pc, #452]	; (8001ce4 <ftpc_run+0x7a0>)
 8001b1e:	f00d fcad 	bl	800f47c <puts>
						}
						gMenuStart = 1;
 8001b22:	4b64      	ldr	r3, [pc, #400]	; (8001cb4 <ftpc_run+0x770>)
 8001b24:	2201      	movs	r2, #1
 8001b26:	701a      	strb	r2, [r3, #0]
						break;
 8001b28:	e05b      	b.n	8001be2 <ftpc_run+0x69e>
					}
#endif
					else if(msg_c=='8'){
 8001b2a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001b2e:	2b38      	cmp	r3, #56	; 0x38
 8001b30:	d11d      	bne.n	8001b6e <ftpc_run+0x62a>
						HAL_Delay(100);
 8001b32:	2064      	movs	r0, #100	; 0x64
 8001b34:	f002 fd46 	bl	80045c4 <HAL_Delay>
						//uart0_rx_flash();
						printf(">del filename (FTPD)?\r\n");
 8001b38:	486b      	ldr	r0, [pc, #428]	; (8001ce8 <ftpc_run+0x7a4>)
 8001b3a:	f00d fc9f 	bl	800f47c <puts>
						HAL_Delay(100);
 8001b3e:	2064      	movs	r0, #100	; 0x64
 8001b40:	f002 fd40 	bl	80045c4 <HAL_Delay>
						//uart0_rx_flash();
						//sprintf(dat,"DELE %s\r\n", User_Keyboard_MSG());
						sprintf(dat,"DELE %s\r\n", "tan.txt");
 8001b44:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b48:	4a68      	ldr	r2, [pc, #416]	; (8001cec <ftpc_run+0x7a8>)
 8001b4a:	4969      	ldr	r1, [pc, #420]	; (8001cf0 <ftpc_run+0x7ac>)
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f00d fc9d 	bl	800f48c <siprintf>
						send(CTRL_SOCK, (uint8_t *)dat, strlen(dat));
 8001b52:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7fe fbc2 	bl	80002e0 <strlen>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b64:	4619      	mov	r1, r3
 8001b66:	2002      	movs	r0, #2
 8001b68:	f001 fa96 	bl	8003098 <send>

						//Should not used here
						//gModeActivePassiveflag = 1;
						break;
 8001b6c:	e039      	b.n	8001be2 <ftpc_run+0x69e>
					}
					else if(msg_c=='9'){
 8001b6e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001b72:	2b39      	cmp	r3, #57	; 0x39
 8001b74:	d11f      	bne.n	8001bb6 <ftpc_run+0x672>
						HAL_Delay(100);
 8001b76:	2064      	movs	r0, #100	; 0x64
 8001b78:	f002 fd24 	bl	80045c4 <HAL_Delay>
						//uart0_rx_flash();
						printf(">FTPD execute command(HELP etc..)?");
 8001b7c:	485d      	ldr	r0, [pc, #372]	; (8001cf4 <ftpc_run+0x7b0>)
 8001b7e:	f00d fbe1 	bl	800f344 <iprintf>
						HAL_Delay(100);
 8001b82:	2064      	movs	r0, #100	; 0x64
 8001b84:	f002 fd1e 	bl	80045c4 <HAL_Delay>
						//uart0_rx_flash();
						sprintf(dat,"%s\r\n", User_Keyboard_MSG());
 8001b88:	f000 ff2a 	bl	80029e0 <User_Keyboard_MSG>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b92:	4959      	ldr	r1, [pc, #356]	; (8001cf8 <ftpc_run+0x7b4>)
 8001b94:	4618      	mov	r0, r3
 8001b96:	f00d fc79 	bl	800f48c <siprintf>
						send(CTRL_SOCK, (uint8_t *)dat, strlen(dat));
 8001b9a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fb9e 	bl	80002e0 <strlen>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001bac:	4619      	mov	r1, r3
 8001bae:	2002      	movs	r0, #2
 8001bb0:	f001 fa72 	bl	8003098 <send>

						//Should not used here
						//gModeActivePassiveflag = 0;
						break;
 8001bb4:	e015      	b.n	8001be2 <ftpc_run+0x69e>
					}
					else if((msg_c == '\r')||(msg_c == '\n'))
 8001bb6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001bba:	2b0d      	cmp	r3, #13
 8001bbc:	d003      	beq.n	8001bc6 <ftpc_run+0x682>
 8001bbe:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001bc2:	2b0a      	cmp	r3, #10
 8001bc4:	d103      	bne.n	8001bce <ftpc_run+0x68a>
					{
						//Suppress CR and LF symbols
						//gMenuStart = 1;
						HAL_Delay(100);
 8001bc6:	2064      	movs	r0, #100	; 0x64
 8001bc8:	f002 fcfc 	bl	80045c4 <HAL_Delay>
 8001bcc:	e008      	b.n	8001be0 <ftpc_run+0x69c>
						//uart0_rx_flash();
					}
					else{
						printf("\r\n??Unknown command: <%c>\r\nRetry...\r\n", msg_c);
 8001bce:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4849      	ldr	r0, [pc, #292]	; (8001cfc <ftpc_run+0x7b8>)
 8001bd6:	f00d fbb5 	bl	800f344 <iprintf>
						HAL_Delay(100);
 8001bda:	2064      	movs	r0, #100	; 0x64
 8001bdc:	f002 fcf2 	bl	80045c4 <HAL_Delay>
					msg_c = uart8_receive();
 8001be0:	e55f      	b.n	80016a2 <ftpc_run+0x15e>
						//gMenuStart = 1;
						//break;
					}
				}
			}
			if(gDataSockReady){
 8001be2:	4b47      	ldr	r3, [pc, #284]	; (8001d00 <ftpc_run+0x7bc>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 809e 	beq.w	8001d28 <ftpc_run+0x7e4>
				gDataSockReady = 0;
 8001bec:	4b44      	ldr	r3, [pc, #272]	; (8001d00 <ftpc_run+0x7bc>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	701a      	strb	r2, [r3, #0]
				switch(Command.First){
 8001bf2:	4b2a      	ldr	r3, [pc, #168]	; (8001c9c <ftpc_run+0x758>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b03      	cmp	r3, #3
 8001bf8:	d033      	beq.n	8001c62 <ftpc_run+0x71e>
 8001bfa:	2b03      	cmp	r3, #3
 8001bfc:	f300 8090 	bgt.w	8001d20 <ftpc_run+0x7dc>
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d002      	beq.n	8001c0a <ftpc_run+0x6c6>
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d014      	beq.n	8001c32 <ftpc_run+0x6ee>
 8001c08:	e08a      	b.n	8001d20 <ftpc_run+0x7dc>
					case f_dir:
						sprintf(dat,"LIST\r\n");
 8001c0a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c0e:	493d      	ldr	r1, [pc, #244]	; (8001d04 <ftpc_run+0x7c0>)
 8001c10:	4618      	mov	r0, r3
 8001c12:	f00d fc3b 	bl	800f48c <siprintf>
						send(CTRL_SOCK, (uint8_t *)dat, strlen(dat));
 8001c16:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7fe fb60 	bl	80002e0 <strlen>
 8001c20:	4603      	mov	r3, r0
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c28:	4619      	mov	r1, r3
 8001c2a:	2002      	movs	r0, #2
 8001c2c:	f001 fa34 	bl	8003098 <send>
						break;
 8001c30:	e07b      	b.n	8001d2a <ftpc_run+0x7e6>
					case f_put:
						printf(">put file name?");
 8001c32:	4835      	ldr	r0, [pc, #212]	; (8001d08 <ftpc_run+0x7c4>)
 8001c34:	f00d fb86 	bl	800f344 <iprintf>
						//sprintf(dat,"STOR %s\r\n", User_Keyboard_MSG());
						sprintf(dat,"STOR %s\r\n", "stm.txt");
 8001c38:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c3c:	4a33      	ldr	r2, [pc, #204]	; (8001d0c <ftpc_run+0x7c8>)
 8001c3e:	4934      	ldr	r1, [pc, #208]	; (8001d10 <ftpc_run+0x7cc>)
 8001c40:	4618      	mov	r0, r3
 8001c42:	f00d fc23 	bl	800f48c <siprintf>
						send(CTRL_SOCK, (uint8_t *)dat, strlen(dat));
 8001c46:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7fe fb48 	bl	80002e0 <strlen>
 8001c50:	4603      	mov	r3, r0
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c58:	4619      	mov	r1, r3
 8001c5a:	2002      	movs	r0, #2
 8001c5c:	f001 fa1c 	bl	8003098 <send>
						break;
 8001c60:	e063      	b.n	8001d2a <ftpc_run+0x7e6>
					case f_get:
						printf(">get file name?");
 8001c62:	482c      	ldr	r0, [pc, #176]	; (8001d14 <ftpc_run+0x7d0>)
 8001c64:	f00d fb6e 	bl	800f344 <iprintf>
						//sprintf(dat,"RETR %s\r\n", User_Keyboard_MSG());
						sprintf(dat,"RETR %s\r\n", "test.txt");
 8001c68:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c6c:	4a2a      	ldr	r2, [pc, #168]	; (8001d18 <ftpc_run+0x7d4>)
 8001c6e:	492b      	ldr	r1, [pc, #172]	; (8001d1c <ftpc_run+0x7d8>)
 8001c70:	4618      	mov	r0, r3
 8001c72:	f00d fc0b 	bl	800f48c <siprintf>
						send(CTRL_SOCK, (uint8_t *)dat, strlen(dat));
 8001c76:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7fe fb30 	bl	80002e0 <strlen>
 8001c80:	4603      	mov	r3, r0
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c88:	4619      	mov	r1, r3
 8001c8a:	2002      	movs	r0, #2
 8001c8c:	f001 fa04 	bl	8003098 <send>
						break;
 8001c90:	e04b      	b.n	8001d2a <ftpc_run+0x7e6>
 8001c92:	bf00      	nop
 8001c94:	200012f4 	.word	0x200012f4
 8001c98:	08010fa4 	.word	0x08010fa4
 8001c9c:	20001300 	.word	0x20001300
 8001ca0:	20000102 	.word	0x20000102
 8001ca4:	08010fc0 	.word	0x08010fc0
 8001ca8:	08010fe0 	.word	0x08010fe0
 8001cac:	20000ff1 	.word	0x20000ff1
 8001cb0:	08011014 	.word	0x08011014
 8001cb4:	20000103 	.word	0x20000103
 8001cb8:	08011048 	.word	0x08011048
 8001cbc:	08011054 	.word	0x08011054
 8001cc0:	08011060 	.word	0x08011060
 8001cc4:	20000fec 	.word	0x20000fec
 8001cc8:	0801106c 	.word	0x0801106c
 8001ccc:	08011078 	.word	0x08011078
 8001cd0:	08011088 	.word	0x08011088
 8001cd4:	080110a0 	.word	0x080110a0
 8001cd8:	080110bc 	.word	0x080110bc
 8001cdc:	20001055 	.word	0x20001055
 8001ce0:	080110c4 	.word	0x080110c4
 8001ce4:	080110dc 	.word	0x080110dc
 8001ce8:	080110e8 	.word	0x080110e8
 8001cec:	08011100 	.word	0x08011100
 8001cf0:	08011108 	.word	0x08011108
 8001cf4:	08011114 	.word	0x08011114
 8001cf8:	08011138 	.word	0x08011138
 8001cfc:	08011140 	.word	0x08011140
 8001d00:	20000104 	.word	0x20000104
 8001d04:	08011168 	.word	0x08011168
 8001d08:	08011170 	.word	0x08011170
 8001d0c:	08011180 	.word	0x08011180
 8001d10:	08011188 	.word	0x08011188
 8001d14:	08011194 	.word	0x08011194
 8001d18:	080111a4 	.word	0x080111a4
 8001d1c:	080111b0 	.word	0x080111b0
					default:
						printf("Command.First = default\r\n");
 8001d20:	48c9      	ldr	r0, [pc, #804]	; (8002048 <ftpc_run+0xb04>)
 8001d22:	f00d fbab 	bl	800f47c <puts>
						break;
 8001d26:	e000      	b.n	8001d2a <ftpc_run+0x7e6>
				}
			}
 8001d28:	bf00      	nop
    		if((size = getSn_RX_RSR(CTRL_SOCK)) > 0){ // Don't need to check SOCKERR_BUSY because it doesn't not occur.
 8001d2a:	2002      	movs	r0, #2
 8001d2c:	f001 fd53 	bl	80037d6 <getSn_RX_RSR>
 8001d30:	4603      	mov	r3, r0
 8001d32:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8001d36:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f000 809d 	beq.w	8001e7a <ftpc_run+0x936>
    			memset(dbuf, 0, _MAX_SS_FTP);
 8001d40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d44:	2100      	movs	r1, #0
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f00d faf4 	bl	800f334 <memset>
    			if(size > _MAX_SS_FTP) size = _MAX_SS_FTP - 1;
 8001d4c:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001d50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d54:	d903      	bls.n	8001d5e <ftpc_run+0x81a>
 8001d56:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001d5a:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
    			ret = recv(CTRL_SOCK,dbuf,size);
 8001d5e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001d62:	461a      	mov	r2, r3
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	2002      	movs	r0, #2
 8001d68:	f001 fa90 	bl	800328c <recv>
 8001d6c:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
    			dbuf[ret] = '\0';
 8001d70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	4413      	add	r3, r2
 8001d78:	2200      	movs	r2, #0
 8001d7a:	701a      	strb	r2, [r3, #0]
    			if(ret != size)
 8001d7c:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001d80:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d016      	beq.n	8001db6 <ftpc_run+0x872>
    			{
    				if(ret==SOCK_BUSY) return 0;
 8001d88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d101      	bne.n	8001d94 <ftpc_run+0x850>
 8001d90:	2300      	movs	r3, #0
 8001d92:	e3ca      	b.n	800252a <ftpc_run+0xfe6>
    				if(ret < 0){
 8001d94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	da0c      	bge.n	8001db6 <ftpc_run+0x872>
    					printf("%d:recv() error:%ld\r\n",CTRL_SOCK,ret);
 8001d9c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001da0:	2102      	movs	r1, #2
 8001da2:	48aa      	ldr	r0, [pc, #680]	; (800204c <ftpc_run+0xb08>)
 8001da4:	f00d face 	bl	800f344 <iprintf>
    					close(CTRL_SOCK);
 8001da8:	2002      	movs	r0, #2
 8001daa:	f000 ff5b 	bl	8002c64 <close>
    					return ret;
 8001dae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	e3b9      	b.n	800252a <ftpc_run+0xfe6>
    				}
    			}
    			printf("\r\nRcvd Command: %s\r\n", dbuf);
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	48a5      	ldr	r0, [pc, #660]	; (8002050 <ftpc_run+0xb0c>)
 8001dba:	f00d fac3 	bl	800f344 <iprintf>
    			proc_ftpc((char *)dbuf);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 fbd4 	bl	800256c <proc_ftpc>
    		}
    		break;
 8001dc4:	e059      	b.n	8001e7a <ftpc_run+0x936>
    	case SOCK_CLOSE_WAIT :
    		printf("%d:CloseWait\r\n",CTRL_SOCK);
 8001dc6:	2102      	movs	r1, #2
 8001dc8:	48a2      	ldr	r0, [pc, #648]	; (8002054 <ftpc_run+0xb10>)
 8001dca:	f00d fabb 	bl	800f344 <iprintf>
    		if((ret=disconnect(CTRL_SOCK)) != SOCK_OK) return ret;
 8001dce:	2002      	movs	r0, #2
 8001dd0:	f001 f8ec 	bl	8002fac <disconnect>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001dda:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d003      	beq.n	8001dea <ftpc_run+0x8a6>
 8001de2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	e39f      	b.n	800252a <ftpc_run+0xfe6>
    		printf("%d:Closed\r\n",CTRL_SOCK);
 8001dea:	2102      	movs	r1, #2
 8001dec:	489a      	ldr	r0, [pc, #616]	; (8002058 <ftpc_run+0xb14>)
 8001dee:	f00d faa9 	bl	800f344 <iprintf>
    		break;
 8001df2:	e045      	b.n	8001e80 <ftpc_run+0x93c>
    	case SOCK_CLOSED :
    		printf("%d:FTPStart\r\n",CTRL_SOCK);
 8001df4:	2102      	movs	r1, #2
 8001df6:	4899      	ldr	r0, [pc, #612]	; (800205c <ftpc_run+0xb18>)
 8001df8:	f00d faa4 	bl	800f344 <iprintf>
    		if((ret=socket(CTRL_SOCK, Sn_MR_TCP, FTP_SRV_destport, 0x0)) != CTRL_SOCK){
 8001dfc:	4b98      	ldr	r3, [pc, #608]	; (8002060 <ftpc_run+0xb1c>)
 8001dfe:	881a      	ldrh	r2, [r3, #0]
 8001e00:	2300      	movs	r3, #0
 8001e02:	2101      	movs	r1, #1
 8001e04:	2002      	movs	r0, #2
 8001e06:	f000 fe17 	bl	8002a38 <socket>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001e10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d032      	beq.n	8001e7e <ftpc_run+0x93a>
    			printf("%d:socket() error:%ld\r\n", CTRL_SOCK, ret);
 8001e18:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001e1c:	2102      	movs	r1, #2
 8001e1e:	4891      	ldr	r0, [pc, #580]	; (8002064 <ftpc_run+0xb20>)
 8001e20:	f00d fa90 	bl	800f344 <iprintf>
    			close(CTRL_SOCK);
 8001e24:	2002      	movs	r0, #2
 8001e26:	f000 ff1d 	bl	8002c64 <close>
    			return ret;
 8001e2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	e37b      	b.n	800252a <ftpc_run+0xfe6>
    		}
    		break;
    	case SOCK_INIT :
    		printf("%d:[SOCK_INIT]Opened\r\n",CTRL_SOCK);
 8001e32:	2102      	movs	r1, #2
 8001e34:	488c      	ldr	r0, [pc, #560]	; (8002068 <ftpc_run+0xb24>)
 8001e36:	f00d fa85 	bl	800f344 <iprintf>
			if((ret = connect(CTRL_SOCK, FTP_SRV_destip, FTP_SRV_destport)) != SOCK_OK){
 8001e3a:	4b89      	ldr	r3, [pc, #548]	; (8002060 <ftpc_run+0xb1c>)
 8001e3c:	881b      	ldrh	r3, [r3, #0]
 8001e3e:	461a      	mov	r2, r3
 8001e40:	498a      	ldr	r1, [pc, #552]	; (800206c <ftpc_run+0xb28>)
 8001e42:	2002      	movs	r0, #2
 8001e44:	f000 ffd6 	bl	8002df4 <connect>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001e4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d007      	beq.n	8001e66 <ftpc_run+0x922>
				printf("%d:Connect error\r\n",CTRL_SOCK);
 8001e56:	2102      	movs	r1, #2
 8001e58:	4885      	ldr	r0, [pc, #532]	; (8002070 <ftpc_run+0xb2c>)
 8001e5a:	f00d fa73 	bl	800f344 <iprintf>
				return ret;
 8001e5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	e361      	b.n	800252a <ftpc_run+0xfe6>
			}
			connect_state_control_ftpc = 0;
 8001e66:	4b83      	ldr	r3, [pc, #524]	; (8002074 <ftpc_run+0xb30>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	701a      	strb	r2, [r3, #0]
			printf("%d:[SOCK_INIT]Connectting...\r\n",CTRL_SOCK);
 8001e6c:	2102      	movs	r1, #2
 8001e6e:	4882      	ldr	r0, [pc, #520]	; (8002078 <ftpc_run+0xb34>)
 8001e70:	f00d fa68 	bl	800f344 <iprintf>
			break;
 8001e74:	e004      	b.n	8001e80 <ftpc_run+0x93c>
    	default :
    		break;
 8001e76:	bf00      	nop
 8001e78:	e002      	b.n	8001e80 <ftpc_run+0x93c>
    		break;
 8001e7a:	bf00      	nop
 8001e7c:	e000      	b.n	8001e80 <ftpc_run+0x93c>
    		break;
 8001e7e:	bf00      	nop
    }
    switch(getSn_SR(DATA_SOCK)){
 8001e80:	f44f 705a 	mov.w	r0, #872	; 0x368
 8001e84:	f001 fb02 	bl	800348c <WIZCHIP_READ>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b1c      	cmp	r3, #28
 8001e8c:	f200 8349 	bhi.w	8002522 <ftpc_run+0xfde>
 8001e90:	a201      	add	r2, pc, #4	; (adr r2, 8001e98 <ftpc_run+0x954>)
 8001e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e96:	bf00      	nop
 8001e98:	080023b5 	.word	0x080023b5
 8001e9c:	08002523 	.word	0x08002523
 8001ea0:	08002523 	.word	0x08002523
 8001ea4:	08002523 	.word	0x08002523
 8001ea8:	08002523 	.word	0x08002523
 8001eac:	08002523 	.word	0x08002523
 8001eb0:	08002523 	.word	0x08002523
 8001eb4:	08002523 	.word	0x08002523
 8001eb8:	08002523 	.word	0x08002523
 8001ebc:	08002523 	.word	0x08002523
 8001ec0:	08002523 	.word	0x08002523
 8001ec4:	08002523 	.word	0x08002523
 8001ec8:	08002523 	.word	0x08002523
 8001ecc:	08002523 	.word	0x08002523
 8001ed0:	08002523 	.word	0x08002523
 8001ed4:	08002523 	.word	0x08002523
 8001ed8:	08002523 	.word	0x08002523
 8001edc:	08002523 	.word	0x08002523
 8001ee0:	08002523 	.word	0x08002523
 8001ee4:	080024a5 	.word	0x080024a5
 8001ee8:	08002523 	.word	0x08002523
 8001eec:	08002523 	.word	0x08002523
 8001ef0:	08002523 	.word	0x08002523
 8001ef4:	08001f0d 	.word	0x08001f0d
 8001ef8:	08002523 	.word	0x08002523
 8001efc:	08002523 	.word	0x08002523
 8001f00:	08002523 	.word	0x08002523
 8001f04:	08002523 	.word	0x08002523
 8001f08:	0800232d 	.word	0x0800232d
    	case SOCK_ESTABLISHED :
    		if(!connect_state_data_ftpc){
 8001f0c:	4b5b      	ldr	r3, [pc, #364]	; (800207c <ftpc_run+0xb38>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d106      	bne.n	8001f22 <ftpc_run+0x9de>
    			printf("%d:FTP Data socket Connected\r\n", DATA_SOCK);
 8001f14:	2103      	movs	r1, #3
 8001f16:	485a      	ldr	r0, [pc, #360]	; (8002080 <ftpc_run+0xb3c>)
 8001f18:	f00d fa14 	bl	800f344 <iprintf>
    			connect_state_data_ftpc = 1;
 8001f1c:	4b57      	ldr	r3, [pc, #348]	; (800207c <ftpc_run+0xb38>)
 8001f1e:	2201      	movs	r2, #1
 8001f20:	701a      	strb	r2, [r3, #0]
    		}
			if(gDataPutGetStart){
 8001f22:	4b58      	ldr	r3, [pc, #352]	; (8002084 <ftpc_run+0xb40>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 81fc 	beq.w	8002324 <ftpc_run+0xde0>
				switch(Command.Second){
 8001f2c:	4b56      	ldr	r3, [pc, #344]	; (8002088 <ftpc_run+0xb44>)
 8001f2e:	785b      	ldrb	r3, [r3, #1]
 8001f30:	2b03      	cmp	r3, #3
 8001f32:	f000 814f 	beq.w	80021d4 <ftpc_run+0xc90>
 8001f36:	2b03      	cmp	r3, #3
 8001f38:	f300 81f0 	bgt.w	800231c <ftpc_run+0xdd8>
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d003      	beq.n	8001f48 <ftpc_run+0xa04>
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	f000 80ab 	beq.w	800209c <ftpc_run+0xb58>
 8001f46:	e1e9      	b.n	800231c <ftpc_run+0xdd8>
				case s_dir:
					printf("dir waiting...\r\n");
 8001f48:	4850      	ldr	r0, [pc, #320]	; (800208c <ftpc_run+0xb48>)
 8001f4a:	f00d fa97 	bl	800f47c <puts>
					HAL_Delay(1);
 8001f4e:	2001      	movs	r0, #1
 8001f50:	f002 fb38 	bl	80045c4 <HAL_Delay>

					if((remain_datasize = getSn_RX_RSR(DATA_SOCK)) > 0){ //#1 if .. Don't need to check SOCKERR_BUSY because it doesn't not occur.
 8001f54:	2003      	movs	r0, #3
 8001f56:	f001 fc3e 	bl	80037d6 <getSn_RX_RSR>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001f60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f000 81df 	beq.w	8002328 <ftpc_run+0xde4>

						//uint32_t timer_dir_list = millis();

						printf("\r\nFTP server root file list:\r\n");
 8001f6a:	4849      	ldr	r0, [pc, #292]	; (8002090 <ftpc_run+0xb4c>)
 8001f6c:	f00d fa86 	bl	800f47c <puts>
						printf ("===============================================\r\n");
 8001f70:	4848      	ldr	r0, [pc, #288]	; (8002094 <ftpc_run+0xb50>)
 8001f72:	f00d fa83 	bl	800f47c <puts>
						while(1)//#1 while(1)
						{
							if((remain_datasize = getSn_RX_RSR(DATA_SOCK)) > 0){ //#2 if .. Don't need to check SOCKERR_BUSY because it doesn't not occur.
 8001f76:	2003      	movs	r0, #3
 8001f78:	f001 fc2d 	bl	80037d6 <getSn_RX_RSR>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001f82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d052      	beq.n	8002030 <ftpc_run+0xaec>
								//!!Debug only
								//printf("\r\n++SIZE of FILE %lu\r\n", remain_datasize);
								while(1)//#2 while(1)
								{
									memset(dbuf, 0, _MAX_SS_FTP);
 8001f8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f8e:	2100      	movs	r1, #0
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f00d f9cf 	bl	800f334 <memset>
									if(remain_datasize > (_MAX_SS_FTP-1))	recv_byte = _MAX_SS_FTP-1;
 8001f96:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f9e:	d304      	bcc.n	8001faa <ftpc_run+0xa66>
 8001fa0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001fa4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001fa8:	e003      	b.n	8001fb2 <ftpc_run+0xa6e>
									else	recv_byte = remain_datasize;
 8001faa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001fae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
									ret = recv(DATA_SOCK, dbuf, recv_byte);
 8001fb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	461a      	mov	r2, r3
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	2003      	movs	r0, #3
 8001fbe:	f001 f965 	bl	800328c <recv>
 8001fc2:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
									remain_datasize -= ret;
 8001fc6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001fca:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
									//!!Debug only
									//printf("\r\n++ ret: %lu; recv_byte: %lu, remain_datasize: %lu\r\n", ret, recv_byte, remain_datasize);
									if(ret != recv_byte){
 8001fd4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001fd8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d016      	beq.n	800200e <ftpc_run+0xaca>
										if(ret==SOCK_BUSY) return 0;
 8001fe0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <ftpc_run+0xaa8>
 8001fe8:	2300      	movs	r3, #0
 8001fea:	e29e      	b.n	800252a <ftpc_run+0xfe6>
										if(ret < 0){
 8001fec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	da16      	bge.n	8002022 <ftpc_run+0xade>
											printf("%d:recv() error:%ld\r\n",CTRL_SOCK,ret);
 8001ff4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001ff8:	2102      	movs	r1, #2
 8001ffa:	4814      	ldr	r0, [pc, #80]	; (800204c <ftpc_run+0xb08>)
 8001ffc:	f00d f9a2 	bl	800f344 <iprintf>
											close(DATA_SOCK);
 8002000:	2003      	movs	r0, #3
 8002002:	f000 fe2f 	bl	8002c64 <close>
											return ret;
 8002006:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800200a:	b2db      	uxtb	r3, r3
 800200c:	e28d      	b.n	800252a <ftpc_run+0xfe6>
										}
									}
									else
									{
										dbuf[ret] = '\0';
 800200e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	4413      	add	r3, r2
 8002016:	2200      	movs	r2, #0
 8002018:	701a      	strb	r2, [r3, #0]
										//printf("\r\nRcvd Data:\n\r%s\n\r", dbuf);
										printf("%s", dbuf);
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	481e      	ldr	r0, [pc, #120]	; (8002098 <ftpc_run+0xb54>)
 800201e:	f00d f991 	bl	800f344 <iprintf>
									}
									if(remain_datasize <= 0)	break;
 8002022:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002026:	2b00      	cmp	r3, #0
 8002028:	d000      	beq.n	800202c <ftpc_run+0xae8>
									memset(dbuf, 0, _MAX_SS_FTP);
 800202a:	e7ae      	b.n	8001f8a <ftpc_run+0xa46>
									if(remain_datasize <= 0)	break;
 800202c:	bf00      	nop
							if((remain_datasize = getSn_RX_RSR(DATA_SOCK)) > 0){ //#2 if .. Don't need to check SOCKERR_BUSY because it doesn't not occur.
 800202e:	e7a2      	b.n	8001f76 <ftpc_run+0xa32>
							else
							{
								if(1)
								{
									//If on packet ~ 0.5..3sec break receive dir list
									break;
 8002030:	bf00      	nop
								}
							}//#2 if.. else
						}//#1 while(1)
						//Here when all list data received
						printf ("===============================================\r\n");
 8002032:	4818      	ldr	r0, [pc, #96]	; (8002094 <ftpc_run+0xb50>)
 8002034:	f00d fa22 	bl	800f47c <puts>
						gDataPutGetStart = 0;
 8002038:	4b12      	ldr	r3, [pc, #72]	; (8002084 <ftpc_run+0xb40>)
 800203a:	2200      	movs	r2, #0
 800203c:	701a      	strb	r2, [r3, #0]
						Command.Second = s_nocmd;
 800203e:	4b12      	ldr	r3, [pc, #72]	; (8002088 <ftpc_run+0xb44>)
 8002040:	2200      	movs	r2, #0
 8002042:	705a      	strb	r2, [r3, #1]
					}//#1 if((remain_datasize = getSn_RX_RSR(DATA_SOCK)) > 0){

					break;
 8002044:	e170      	b.n	8002328 <ftpc_run+0xde4>
 8002046:	bf00      	nop
 8002048:	080111bc 	.word	0x080111bc
 800204c:	080111d8 	.word	0x080111d8
 8002050:	080111f0 	.word	0x080111f0
 8002054:	08011208 	.word	0x08011208
 8002058:	08011218 	.word	0x08011218
 800205c:	08011224 	.word	0x08011224
 8002060:	20000040 	.word	0x20000040
 8002064:	08011234 	.word	0x08011234
 8002068:	0801124c 	.word	0x0801124c
 800206c:	2000003c 	.word	0x2000003c
 8002070:	08011264 	.word	0x08011264
 8002074:	20000100 	.word	0x20000100
 8002078:	08011278 	.word	0x08011278
 800207c:	20000101 	.word	0x20000101
 8002080:	08011298 	.word	0x08011298
 8002084:	20000105 	.word	0x20000105
 8002088:	20001300 	.word	0x20001300
 800208c:	080112b8 	.word	0x080112b8
 8002090:	080112c8 	.word	0x080112c8
 8002094:	08010fe0 	.word	0x08010fe0
 8002098:	080112e8 	.word	0x080112e8
				case s_put:
					printf("put waiting...\r\n");
 800209c:	48af      	ldr	r0, [pc, #700]	; (800235c <ftpc_run+0xe18>)
 800209e:	f00d f9ed 	bl	800f47c <puts>
					HAL_Delay(1);
 80020a2:	2001      	movs	r0, #1
 80020a4:	f002 fa8e 	bl	80045c4 <HAL_Delay>

					if(strlen(ftpc.workingdir) == 1)
 80020a8:	48ad      	ldr	r0, [pc, #692]	; (8002360 <ftpc_run+0xe1c>)
 80020aa:	f7fe f919 	bl	80002e0 <strlen>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d105      	bne.n	80020c0 <ftpc_run+0xb7c>
						//sprintf(ftpc.filename, "/%s", (uint8_t *)gMsgBuf);
						sprintf(ftpc.filename, "/%s", "stm.txt");
 80020b4:	4aab      	ldr	r2, [pc, #684]	; (8002364 <ftpc_run+0xe20>)
 80020b6:	49ac      	ldr	r1, [pc, #688]	; (8002368 <ftpc_run+0xe24>)
 80020b8:	48ac      	ldr	r0, [pc, #688]	; (800236c <ftpc_run+0xe28>)
 80020ba:	f00d f9e7 	bl	800f48c <siprintf>
 80020be:	e005      	b.n	80020cc <ftpc_run+0xb88>
					else
						//sprintf(ftpc.filename, "%s/%s", ftpc.workingdir, (uint8_t *)gMsgBuf);
						sprintf(ftpc.filename, "%s/%s", ftpc.workingdir, "stm.txt");
 80020c0:	4ba8      	ldr	r3, [pc, #672]	; (8002364 <ftpc_run+0xe20>)
 80020c2:	4aa7      	ldr	r2, [pc, #668]	; (8002360 <ftpc_run+0xe1c>)
 80020c4:	49aa      	ldr	r1, [pc, #680]	; (8002370 <ftpc_run+0xe2c>)
 80020c6:	48a9      	ldr	r0, [pc, #676]	; (800236c <ftpc_run+0xe28>)
 80020c8:	f00d f9e0 	bl	800f48c <siprintf>
#if defined(F_FILESYSTEM)
					f_chdir("/");
 80020cc:	48a9      	ldr	r0, [pc, #676]	; (8002374 <ftpc_run+0xe30>)
 80020ce:	f00c fc35 	bl	800e93c <f_chdir>
					ftpc.fr = f_open(&(ftpc.fil), (const char *)ftpc.filename, FA_READ);
 80020d2:	2201      	movs	r2, #1
 80020d4:	49a5      	ldr	r1, [pc, #660]	; (800236c <ftpc_run+0xe28>)
 80020d6:	48a8      	ldr	r0, [pc, #672]	; (8002378 <ftpc_run+0xe34>)
 80020d8:	f00b ff16 	bl	800df08 <f_open>
 80020dc:	4603      	mov	r3, r0
 80020de:	461a      	mov	r2, r3
 80020e0:	4ba6      	ldr	r3, [pc, #664]	; (800237c <ftpc_run+0xe38>)
 80020e2:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
					if(ftpc.fr == FR_OK){
 80020e6:	4ba5      	ldr	r3, [pc, #660]	; (800237c <ftpc_run+0xe38>)
 80020e8:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d158      	bne.n	80021a2 <ftpc_run+0xc5e>
						remain_filesize = ftpc.fil.fptr;
 80020f0:	4ba2      	ldr	r3, [pc, #648]	; (800237c <ftpc_run+0xe38>)
 80020f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
						//remain_filesize = 25;
						printf("f_open return FR_OK\r\n");
 80020fa:	48a1      	ldr	r0, [pc, #644]	; (8002380 <ftpc_run+0xe3c>)
 80020fc:	f00d f9be 	bl	800f47c <puts>
						//!!Debug only
						printf("\r\n++SIZE of FILE %lu\r\n", remain_filesize);
 8002100:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8002104:	489f      	ldr	r0, [pc, #636]	; (8002384 <ftpc_run+0xe40>)
 8002106:	f00d f91d 	bl	800f344 <iprintf>
						do{
							//wdt_reset();
							memset(dbuf, 0, _MAX_SS_FTP);
 800210a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800210e:	2100      	movs	r1, #0
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f00d f90f 	bl	800f334 <memset>
							if(remain_filesize > _MAX_SS_FTP)
 8002116:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800211a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800211e:	d904      	bls.n	800212a <ftpc_run+0xbe6>
								send_byte = _MAX_SS_FTP;
 8002120:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002124:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002128:	e003      	b.n	8002132 <ftpc_run+0xbee>
							else
								send_byte = remain_filesize;
 800212a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800212e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
							//!!Debug only
							//printf("++SEND BYTE %lu\r\n", send_byte);
							ftpc.fr = f_read(&(ftpc.fil), (void *)dbuf, send_byte , (UINT *)&blocklen);
 8002132:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002136:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	488e      	ldr	r0, [pc, #568]	; (8002378 <ftpc_run+0xe34>)
 800213e:	f00c f8a1 	bl	800e284 <f_read>
 8002142:	4603      	mov	r3, r0
 8002144:	461a      	mov	r2, r3
 8002146:	4b8d      	ldr	r3, [pc, #564]	; (800237c <ftpc_run+0xe38>)
 8002148:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
							if(ftpc.fr != FR_OK){
 800214c:	4b8b      	ldr	r3, [pc, #556]	; (800237c <ftpc_run+0xe38>)
 800214e:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8002152:	2b00      	cmp	r3, #0
 8002154:	d118      	bne.n	8002188 <ftpc_run+0xc44>
								break;
							}
							printf("#");
 8002156:	2023      	movs	r0, #35	; 0x23
 8002158:	f00d f90c 	bl	800f374 <putchar>
							int32_t _send_size;
							_send_size = send(DATA_SOCK, dbuf,(uint16_t) blocklen);
 800215c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002160:	b29b      	uxth	r3, r3
 8002162:	461a      	mov	r2, r3
 8002164:	6879      	ldr	r1, [r7, #4]
 8002166:	2003      	movs	r0, #3
 8002168:	f000 ff96 	bl	8003098 <send>
 800216c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
							//remain_filesize -= blocklen;
							remain_filesize -= (uint32_t)_send_size;
 8002170:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002174:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

							//!!Debug only
							//printf("++REMAIN SIZE of FILE %lu\r\n\r\n", remain_filesize);
						}while(remain_filesize != 0);
 800217e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1c1      	bne.n	800210a <ftpc_run+0xbc6>
 8002186:	e000      	b.n	800218a <ftpc_run+0xc46>
								break;
 8002188:	bf00      	nop
						printf("\r\nFile read finished\r\n");
 800218a:	487f      	ldr	r0, [pc, #508]	; (8002388 <ftpc_run+0xe44>)
 800218c:	f00d f976 	bl	800f47c <puts>
						ftpc.fr = f_close(&(ftpc.fil));
 8002190:	4879      	ldr	r0, [pc, #484]	; (8002378 <ftpc_run+0xe34>)
 8002192:	f00c fba9 	bl	800e8e8 <f_close>
 8002196:	4603      	mov	r3, r0
 8002198:	461a      	mov	r2, r3
 800219a:	4b78      	ldr	r3, [pc, #480]	; (800237c <ftpc_run+0xe38>)
 800219c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80021a0:	e00e      	b.n	80021c0 <ftpc_run+0xc7c>
					}
					else{
						printf("File Open Error: %d\r\n", ftpc.fr);
 80021a2:	4b76      	ldr	r3, [pc, #472]	; (800237c <ftpc_run+0xe38>)
 80021a4:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 80021a8:	4619      	mov	r1, r3
 80021aa:	4878      	ldr	r0, [pc, #480]	; (800238c <ftpc_run+0xe48>)
 80021ac:	f00d f8ca 	bl	800f344 <iprintf>
						ftpc.fr = f_close(&(ftpc.fil));
 80021b0:	4871      	ldr	r0, [pc, #452]	; (8002378 <ftpc_run+0xe34>)
 80021b2:	f00c fb99 	bl	800e8e8 <f_close>
 80021b6:	4603      	mov	r3, r0
 80021b8:	461a      	mov	r2, r3
 80021ba:	4b70      	ldr	r3, [pc, #448]	; (800237c <ftpc_run+0xe38>)
 80021bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
						printf("########## dbuf:%s\r\n", dbuf);
						send(DATA_SOCK, dbuf, blocklen);
						remain_filesize -= blocklen;
					}while(remain_filesize != 0);
#endif
					gDataPutGetStart = 0;
 80021c0:	4b73      	ldr	r3, [pc, #460]	; (8002390 <ftpc_run+0xe4c>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	701a      	strb	r2, [r3, #0]
					Command.Second = s_nocmd;
 80021c6:	4b73      	ldr	r3, [pc, #460]	; (8002394 <ftpc_run+0xe50>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	705a      	strb	r2, [r3, #1]
					disconnect(DATA_SOCK);
 80021cc:	2003      	movs	r0, #3
 80021ce:	f000 feed 	bl	8002fac <disconnect>
					break;
 80021d2:	e0aa      	b.n	800232a <ftpc_run+0xde6>
				case s_get:
					printf("get waiting...\r\n");
 80021d4:	4870      	ldr	r0, [pc, #448]	; (8002398 <ftpc_run+0xe54>)
 80021d6:	f00d f951 	bl	800f47c <puts>
					HAL_Delay(1);
 80021da:	2001      	movs	r0, #1
 80021dc:	f002 f9f2 	bl	80045c4 <HAL_Delay>

					if(strlen(ftpc.workingdir) == 1)
 80021e0:	485f      	ldr	r0, [pc, #380]	; (8002360 <ftpc_run+0xe1c>)
 80021e2:	f7fe f87d 	bl	80002e0 <strlen>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d105      	bne.n	80021f8 <ftpc_run+0xcb4>
						sprintf(ftpc.filename, "/%s", (uint8_t *)gMsgBuf);
 80021ec:	4a6b      	ldr	r2, [pc, #428]	; (800239c <ftpc_run+0xe58>)
 80021ee:	495e      	ldr	r1, [pc, #376]	; (8002368 <ftpc_run+0xe24>)
 80021f0:	485e      	ldr	r0, [pc, #376]	; (800236c <ftpc_run+0xe28>)
 80021f2:	f00d f94b 	bl	800f48c <siprintf>
 80021f6:	e005      	b.n	8002204 <ftpc_run+0xcc0>
					else
						sprintf(ftpc.filename, "%s/%s", ftpc.workingdir, (uint8_t *)gMsgBuf);
 80021f8:	4b68      	ldr	r3, [pc, #416]	; (800239c <ftpc_run+0xe58>)
 80021fa:	4a59      	ldr	r2, [pc, #356]	; (8002360 <ftpc_run+0xe1c>)
 80021fc:	495c      	ldr	r1, [pc, #368]	; (8002370 <ftpc_run+0xe2c>)
 80021fe:	485b      	ldr	r0, [pc, #364]	; (800236c <ftpc_run+0xe28>)
 8002200:	f00d f944 	bl	800f48c <siprintf>
#if defined(F_FILESYSTEM)
					ftpc.fr = f_open(&(ftpc.fil), (const char *)ftpc.filename, FA_CREATE_ALWAYS | FA_WRITE);
 8002204:	220a      	movs	r2, #10
 8002206:	4959      	ldr	r1, [pc, #356]	; (800236c <ftpc_run+0xe28>)
 8002208:	485b      	ldr	r0, [pc, #364]	; (8002378 <ftpc_run+0xe34>)
 800220a:	f00b fe7d 	bl	800df08 <f_open>
 800220e:	4603      	mov	r3, r0
 8002210:	461a      	mov	r2, r3
 8002212:	4b5a      	ldr	r3, [pc, #360]	; (800237c <ftpc_run+0xe38>)
 8002214:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
					if(ftpc.fr == FR_OK){
 8002218:	4b58      	ldr	r3, [pc, #352]	; (800237c <ftpc_run+0xe38>)
 800221a:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 800221e:	2b00      	cmp	r3, #0
 8002220:	d174      	bne.n	800230c <ftpc_run+0xdc8>
						printf("f_open return FR_OK\r\n");
 8002222:	4857      	ldr	r0, [pc, #348]	; (8002380 <ftpc_run+0xe3c>)
 8002224:	f00d f92a 	bl	800f47c <puts>
						while(1){ //while #1..
							//wdt_reset();
							if((remain_datasize = getSn_RX_RSR(DATA_SOCK)) > 0){//if((remain_datasize = getSn_RX_RSR(DATA_SOCK)) > 0){
 8002228:	2003      	movs	r0, #3
 800222a:	f001 fad4 	bl	80037d6 <getSn_RX_RSR>
 800222e:	4603      	mov	r3, r0
 8002230:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002234:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002238:	2b00      	cmp	r3, #0
 800223a:	d04f      	beq.n	80022dc <ftpc_run+0xd98>
								//!!Debug only
								//printf("++Arrive new packet: remain_datasize %lu\r\n\r\n", remain_datasize);
								while(1){//while #2..
									//wdt_reset();
									memset(dbuf, 0, _MAX_SS_FTP);
 800223c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002240:	2100      	movs	r1, #0
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f00d f876 	bl	800f334 <memset>
									if(remain_datasize > _MAX_SS_FTP)	recv_byte = _MAX_SS_FTP;
 8002248:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800224c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002250:	d904      	bls.n	800225c <ftpc_run+0xd18>
 8002252:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002256:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800225a:	e003      	b.n	8002264 <ftpc_run+0xd20>
									else	recv_byte = remain_datasize;
 800225c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002260:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
									ret = recv(DATA_SOCK, dbuf,(uint16_t) recv_byte);
 8002264:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002268:	b29b      	uxth	r3, r3
 800226a:	461a      	mov	r2, r3
 800226c:	6879      	ldr	r1, [r7, #4]
 800226e:	2003      	movs	r0, #3
 8002270:	f001 f80c 	bl	800328c <recv>
 8002274:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
									uint16_t _blocklen;
									ftpc.fr = f_write(&(ftpc.fil), (const void *)dbuf, (UINT)ret, (UINT *)&_blocklen);
 8002278:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800227c:	f107 030e 	add.w	r3, r7, #14
 8002280:	6879      	ldr	r1, [r7, #4]
 8002282:	483d      	ldr	r0, [pc, #244]	; (8002378 <ftpc_run+0xe34>)
 8002284:	f00c f93d 	bl	800e502 <f_write>
 8002288:	4603      	mov	r3, r0
 800228a:	461a      	mov	r2, r3
 800228c:	4b3b      	ldr	r3, [pc, #236]	; (800237c <ftpc_run+0xe38>)
 800228e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
									remain_datasize -= _blocklen;
 8002292:	89fb      	ldrh	r3, [r7, #14]
 8002294:	461a      	mov	r2, r3
 8002296:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800229a:	1a9b      	subs	r3, r3, r2
 800229c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
									if(ftpc.fr != FR_OK){
 80022a0:	4b36      	ldr	r3, [pc, #216]	; (800237c <ftpc_run+0xe38>)
 80022a2:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <ftpc_run+0xd6e>
										printf("f_write failed\r\n");
 80022aa:	483d      	ldr	r0, [pc, #244]	; (80023a0 <ftpc_run+0xe5c>)
 80022ac:	f00d f8e6 	bl	800f47c <puts>
										break;
 80022b0:	e00b      	b.n	80022ca <ftpc_run+0xd86>
									}
									if(remain_datasize <= 0)	break;
 80022b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d006      	beq.n	80022c8 <ftpc_run+0xd84>
									printf("#");
 80022ba:	2023      	movs	r0, #35	; 0x23
 80022bc:	f00d f85a 	bl	800f374 <putchar>
									f_sync(&(ftpc.fil)); //Flush data to SDCARD from cache
 80022c0:	482d      	ldr	r0, [pc, #180]	; (8002378 <ftpc_run+0xe34>)
 80022c2:	f00c fa93 	bl	800e7ec <f_sync>
								while(1){//while #2..
 80022c6:	e7b9      	b.n	800223c <ftpc_run+0xcf8>
									if(remain_datasize <= 0)	break;
 80022c8:	bf00      	nop
									//!!Debug only
									//printf("++remain_datasize: %lu\r\n\r\n", remain_datasize);
								}//while #2..
								if(ftpc.fr != FR_OK){
 80022ca:	4b2c      	ldr	r3, [pc, #176]	; (800237c <ftpc_run+0xe38>)
 80022cc:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0a9      	beq.n	8002228 <ftpc_run+0xce4>
									printf("f_write failed\r\n");
 80022d4:	4832      	ldr	r0, [pc, #200]	; (80023a0 <ftpc_run+0xe5c>)
 80022d6:	f00d f8d1 	bl	800f47c <puts>
									break;
 80022da:	e008      	b.n	80022ee <ftpc_run+0xdaa>
								}
							}//if((remain_datasize = getSn_RX_RSR(DATA_SOCK)) > 0){
							else{
								if(getSn_SR(DATA_SOCK) != SOCK_ESTABLISHED)	break;
 80022dc:	f44f 705a 	mov.w	r0, #872	; 0x368
 80022e0:	f001 f8d4 	bl	800348c <WIZCHIP_READ>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b17      	cmp	r3, #23
 80022e8:	d100      	bne.n	80022ec <ftpc_run+0xda8>
							if((remain_datasize = getSn_RX_RSR(DATA_SOCK)) > 0){//if((remain_datasize = getSn_RX_RSR(DATA_SOCK)) > 0){
 80022ea:	e79d      	b.n	8002228 <ftpc_run+0xce4>
								if(getSn_SR(DATA_SOCK) != SOCK_ESTABLISHED)	break;
 80022ec:	bf00      	nop
							}
						}// //while #1..
						printf("\r\nFile write finished\r\n");
 80022ee:	482d      	ldr	r0, [pc, #180]	; (80023a4 <ftpc_run+0xe60>)
 80022f0:	f00d f8c4 	bl	800f47c <puts>
						ftpc.fr = f_close(&(ftpc.fil));
 80022f4:	4820      	ldr	r0, [pc, #128]	; (8002378 <ftpc_run+0xe34>)
 80022f6:	f00c faf7 	bl	800e8e8 <f_close>
 80022fa:	4603      	mov	r3, r0
 80022fc:	461a      	mov	r2, r3
 80022fe:	4b1f      	ldr	r3, [pc, #124]	; (800237c <ftpc_run+0xe38>)
 8002300:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
						gDataPutGetStart = 0;
 8002304:	4b22      	ldr	r3, [pc, #136]	; (8002390 <ftpc_run+0xe4c>)
 8002306:	2200      	movs	r2, #0
 8002308:	701a      	strb	r2, [r3, #0]
						}
					}
					gDataPutGetStart = 0;
					Command.Second = s_nocmd;
#endif
					break;
 800230a:	e00e      	b.n	800232a <ftpc_run+0xde6>
						printf("File Open Error: %d\r\n", ftpc.fr);
 800230c:	4b1b      	ldr	r3, [pc, #108]	; (800237c <ftpc_run+0xe38>)
 800230e:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8002312:	4619      	mov	r1, r3
 8002314:	481d      	ldr	r0, [pc, #116]	; (800238c <ftpc_run+0xe48>)
 8002316:	f00d f815 	bl	800f344 <iprintf>
					break;
 800231a:	e006      	b.n	800232a <ftpc_run+0xde6>
				default:
					printf("Command.Second = default\r\n");
 800231c:	4822      	ldr	r0, [pc, #136]	; (80023a8 <ftpc_run+0xe64>)
 800231e:	f00d f8ad 	bl	800f47c <puts>
					break;
 8002322:	e002      	b.n	800232a <ftpc_run+0xde6>
				}
			}
 8002324:	bf00      	nop
 8002326:	e0ff      	b.n	8002528 <ftpc_run+0xfe4>
					break;
 8002328:	bf00      	nop
    		break;
 800232a:	e0fd      	b.n	8002528 <ftpc_run+0xfe4>
   		case SOCK_CLOSE_WAIT :
   			printf("%d:CloseWait\r\n",DATA_SOCK);
 800232c:	2103      	movs	r1, #3
 800232e:	481f      	ldr	r0, [pc, #124]	; (80023ac <ftpc_run+0xe68>)
 8002330:	f00d f808 	bl	800f344 <iprintf>
			if((ret=disconnect(DATA_SOCK)) != SOCK_OK) return ret;
 8002334:	2003      	movs	r0, #3
 8002336:	f000 fe39 	bl	8002fac <disconnect>
 800233a:	4603      	mov	r3, r0
 800233c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002340:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002344:	2b01      	cmp	r3, #1
 8002346:	d003      	beq.n	8002350 <ftpc_run+0xe0c>
 8002348:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800234c:	b2db      	uxtb	r3, r3
 800234e:	e0ec      	b.n	800252a <ftpc_run+0xfe6>
			printf("%d:Closed\r\n",DATA_SOCK);
 8002350:	2103      	movs	r1, #3
 8002352:	4817      	ldr	r0, [pc, #92]	; (80023b0 <ftpc_run+0xe6c>)
 8002354:	f00c fff6 	bl	800f344 <iprintf>
   			break;
 8002358:	e0e6      	b.n	8002528 <ftpc_run+0xfe4>
 800235a:	bf00      	nop
 800235c:	080112ec 	.word	0x080112ec
 8002360:	20000ff1 	.word	0x20000ff1
 8002364:	08011180 	.word	0x08011180
 8002368:	080112fc 	.word	0x080112fc
 800236c:	20001055 	.word	0x20001055
 8002370:	08011300 	.word	0x08011300
 8002374:	08010d20 	.word	0x08010d20
 8002378:	200010bc 	.word	0x200010bc
 800237c:	20000fec 	.word	0x20000fec
 8002380:	08011308 	.word	0x08011308
 8002384:	08011320 	.word	0x08011320
 8002388:	08011338 	.word	0x08011338
 800238c:	08011350 	.word	0x08011350
 8002390:	20000105 	.word	0x20000105
 8002394:	20001300 	.word	0x20001300
 8002398:	08011368 	.word	0x08011368
 800239c:	20000108 	.word	0x20000108
 80023a0:	08011378 	.word	0x08011378
 80023a4:	08011388 	.word	0x08011388
 80023a8:	080113a0 	.word	0x080113a0
 80023ac:	08011208 	.word	0x08011208
 80023b0:	08011218 	.word	0x08011218
   		case SOCK_CLOSED :
   			if(ftpc.dsock_state == DATASOCK_READY){
 80023b4:	4b5f      	ldr	r3, [pc, #380]	; (8002534 <ftpc_run+0xff0>)
 80023b6:	78db      	ldrb	r3, [r3, #3]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	f040 80b4 	bne.w	8002526 <ftpc_run+0xfe2>
   				if(ftpc.dsock_mode == PASSIVE_MODE){
 80023be:	4b5d      	ldr	r3, [pc, #372]	; (8002534 <ftpc_run+0xff0>)
 80023c0:	791b      	ldrb	r3, [r3, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d135      	bne.n	8002432 <ftpc_run+0xeee>
   					printf("%d:FTPDataStart [PASSIVE_MODE], port : %u\r\n",DATA_SOCK, local_port);
 80023c6:	4b5c      	ldr	r3, [pc, #368]	; (8002538 <ftpc_run+0xff4>)
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	461a      	mov	r2, r3
 80023cc:	2103      	movs	r1, #3
 80023ce:	485b      	ldr	r0, [pc, #364]	; (800253c <ftpc_run+0xff8>)
 80023d0:	f00c ffb8 	bl	800f344 <iprintf>
   					if((ret=socket(DATA_SOCK, Sn_MR_TCP, local_port, 0x0)) != DATA_SOCK){
 80023d4:	4b58      	ldr	r3, [pc, #352]	; (8002538 <ftpc_run+0xff4>)
 80023d6:	881a      	ldrh	r2, [r3, #0]
 80023d8:	2300      	movs	r3, #0
 80023da:	2101      	movs	r1, #1
 80023dc:	2003      	movs	r0, #3
 80023de:	f000 fb2b 	bl	8002a38 <socket>
 80023e2:	4603      	mov	r3, r0
 80023e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80023e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80023ec:	2b03      	cmp	r3, #3
 80023ee:	d00c      	beq.n	800240a <ftpc_run+0xec6>
   						printf("%d:socket() error:%ld\r\n", DATA_SOCK, ret);
 80023f0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80023f4:	2103      	movs	r1, #3
 80023f6:	4852      	ldr	r0, [pc, #328]	; (8002540 <ftpc_run+0xffc>)
 80023f8:	f00c ffa4 	bl	800f344 <iprintf>
   						close(DATA_SOCK);
 80023fc:	2003      	movs	r0, #3
 80023fe:	f000 fc31 	bl	8002c64 <close>
   						return ret;
 8002402:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002406:	b2db      	uxtb	r3, r3
 8002408:	e08f      	b.n	800252a <ftpc_run+0xfe6>
   					}
   					local_port++;
 800240a:	4b4b      	ldr	r3, [pc, #300]	; (8002538 <ftpc_run+0xff4>)
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	3301      	adds	r3, #1
 8002410:	b29a      	uxth	r2, r3
 8002412:	4b49      	ldr	r3, [pc, #292]	; (8002538 <ftpc_run+0xff4>)
 8002414:	801a      	strh	r2, [r3, #0]
   					if(local_port > 50000)
 8002416:	4b48      	ldr	r3, [pc, #288]	; (8002538 <ftpc_run+0xff4>)
 8002418:	881b      	ldrh	r3, [r3, #0]
 800241a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800241e:	4293      	cmp	r3, r2
 8002420:	d93c      	bls.n	800249c <ftpc_run+0xf58>
   						//local_port = 35000;
   						local_port -= 20000;
 8002422:	4b45      	ldr	r3, [pc, #276]	; (8002538 <ftpc_run+0xff4>)
 8002424:	881a      	ldrh	r2, [r3, #0]
 8002426:	4b47      	ldr	r3, [pc, #284]	; (8002544 <ftpc_run+0x1000>)
 8002428:	4413      	add	r3, r2
 800242a:	b29a      	uxth	r2, r3
 800242c:	4b42      	ldr	r3, [pc, #264]	; (8002538 <ftpc_run+0xff4>)
 800242e:	801a      	strh	r2, [r3, #0]
 8002430:	e034      	b.n	800249c <ftpc_run+0xf58>
   				}else{
   					printf("%d:FTPDataStart [ACTIVE_MODE], port : %u\r\n",DATA_SOCK, local_port);
 8002432:	4b41      	ldr	r3, [pc, #260]	; (8002538 <ftpc_run+0xff4>)
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	461a      	mov	r2, r3
 8002438:	2103      	movs	r1, #3
 800243a:	4843      	ldr	r0, [pc, #268]	; (8002548 <ftpc_run+0x1004>)
 800243c:	f00c ff82 	bl	800f344 <iprintf>
   					if((ret=socket(DATA_SOCK, Sn_MR_TCP, local_port, 0x0)) != DATA_SOCK){
 8002440:	4b3d      	ldr	r3, [pc, #244]	; (8002538 <ftpc_run+0xff4>)
 8002442:	881a      	ldrh	r2, [r3, #0]
 8002444:	2300      	movs	r3, #0
 8002446:	2101      	movs	r1, #1
 8002448:	2003      	movs	r0, #3
 800244a:	f000 faf5 	bl	8002a38 <socket>
 800244e:	4603      	mov	r3, r0
 8002450:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002454:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002458:	2b03      	cmp	r3, #3
 800245a:	d00c      	beq.n	8002476 <ftpc_run+0xf32>
   						printf("%d:socket() error:%ld\r\n", DATA_SOCK, ret);
 800245c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002460:	2103      	movs	r1, #3
 8002462:	4837      	ldr	r0, [pc, #220]	; (8002540 <ftpc_run+0xffc>)
 8002464:	f00c ff6e 	bl	800f344 <iprintf>
   						close(DATA_SOCK);
 8002468:	2003      	movs	r0, #3
 800246a:	f000 fbfb 	bl	8002c64 <close>
   						return ret;
 800246e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002472:	b2db      	uxtb	r3, r3
 8002474:	e059      	b.n	800252a <ftpc_run+0xfe6>
   					}
   					local_port++;
 8002476:	4b30      	ldr	r3, [pc, #192]	; (8002538 <ftpc_run+0xff4>)
 8002478:	881b      	ldrh	r3, [r3, #0]
 800247a:	3301      	adds	r3, #1
 800247c:	b29a      	uxth	r2, r3
 800247e:	4b2e      	ldr	r3, [pc, #184]	; (8002538 <ftpc_run+0xff4>)
 8002480:	801a      	strh	r2, [r3, #0]
   					if(local_port > 50000)
 8002482:	4b2d      	ldr	r3, [pc, #180]	; (8002538 <ftpc_run+0xff4>)
 8002484:	881b      	ldrh	r3, [r3, #0]
 8002486:	f24c 3250 	movw	r2, #50000	; 0xc350
 800248a:	4293      	cmp	r3, r2
 800248c:	d906      	bls.n	800249c <ftpc_run+0xf58>
   						//local_port = 35000;
   						local_port -= 20000;
 800248e:	4b2a      	ldr	r3, [pc, #168]	; (8002538 <ftpc_run+0xff4>)
 8002490:	881a      	ldrh	r2, [r3, #0]
 8002492:	4b2c      	ldr	r3, [pc, #176]	; (8002544 <ftpc_run+0x1000>)
 8002494:	4413      	add	r3, r2
 8002496:	b29a      	uxth	r2, r3
 8002498:	4b27      	ldr	r3, [pc, #156]	; (8002538 <ftpc_run+0xff4>)
 800249a:	801a      	strh	r2, [r3, #0]
   				}
   				ftpc.dsock_state = DATASOCK_START;
 800249c:	4b25      	ldr	r3, [pc, #148]	; (8002534 <ftpc_run+0xff0>)
 800249e:	2202      	movs	r2, #2
 80024a0:	70da      	strb	r2, [r3, #3]
   			}
   			break;
 80024a2:	e040      	b.n	8002526 <ftpc_run+0xfe2>

   		case SOCK_INIT :
   			printf("%d:Opened\r\n",DATA_SOCK);
 80024a4:	2103      	movs	r1, #3
 80024a6:	4829      	ldr	r0, [pc, #164]	; (800254c <ftpc_run+0x1008>)
 80024a8:	f00c ff4c 	bl	800f344 <iprintf>
   			if(ftpc.dsock_mode == ACTIVE_MODE){
 80024ac:	4b21      	ldr	r3, [pc, #132]	; (8002534 <ftpc_run+0xff0>)
 80024ae:	791b      	ldrb	r3, [r3, #4]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d119      	bne.n	80024e8 <ftpc_run+0xfa4>
   				if( (ret = listen(DATA_SOCK)) != SOCK_OK){
 80024b4:	2003      	movs	r0, #3
 80024b6:	f000 fc43 	bl	8002d40 <listen>
 80024ba:	4603      	mov	r3, r0
 80024bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80024c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d007      	beq.n	80024d8 <ftpc_run+0xf94>
   					printf("%d:Listen error\r\n",DATA_SOCK);
 80024c8:	2103      	movs	r1, #3
 80024ca:	4821      	ldr	r0, [pc, #132]	; (8002550 <ftpc_run+0x100c>)
 80024cc:	f00c ff3a 	bl	800f344 <iprintf>
   					return ret;
 80024d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	e028      	b.n	800252a <ftpc_run+0xfe6>
   				}
   				gDataSockReady = 1;
 80024d8:	4b1e      	ldr	r3, [pc, #120]	; (8002554 <ftpc_run+0x1010>)
 80024da:	2201      	movs	r2, #1
 80024dc:	701a      	strb	r2, [r3, #0]
   				printf("%d:Listen ok\r\n",DATA_SOCK);
 80024de:	2103      	movs	r1, #3
 80024e0:	481d      	ldr	r0, [pc, #116]	; (8002558 <ftpc_run+0x1014>)
 80024e2:	f00c ff2f 	bl	800f344 <iprintf>
 80024e6:	e018      	b.n	800251a <ftpc_run+0xfd6>
   			}else{
   				if((ret = connect(DATA_SOCK, remote_ip.cVal, remote_port)) != SOCK_OK){
 80024e8:	4b1c      	ldr	r3, [pc, #112]	; (800255c <ftpc_run+0x1018>)
 80024ea:	881b      	ldrh	r3, [r3, #0]
 80024ec:	461a      	mov	r2, r3
 80024ee:	491c      	ldr	r1, [pc, #112]	; (8002560 <ftpc_run+0x101c>)
 80024f0:	2003      	movs	r0, #3
 80024f2:	f000 fc7f 	bl	8002df4 <connect>
 80024f6:	4603      	mov	r3, r0
 80024f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80024fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002500:	2b01      	cmp	r3, #1
 8002502:	d007      	beq.n	8002514 <ftpc_run+0xfd0>
   					printf("%d:Connect error\r\n", DATA_SOCK);
 8002504:	2103      	movs	r1, #3
 8002506:	4817      	ldr	r0, [pc, #92]	; (8002564 <ftpc_run+0x1020>)
 8002508:	f00c ff1c 	bl	800f344 <iprintf>
   					return ret;
 800250c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002510:	b2db      	uxtb	r3, r3
 8002512:	e00a      	b.n	800252a <ftpc_run+0xfe6>
   				}
   				gDataSockReady = 1;
 8002514:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <ftpc_run+0x1010>)
 8002516:	2201      	movs	r2, #1
 8002518:	701a      	strb	r2, [r3, #0]
   			}
   			connect_state_data_ftpc = 0;
 800251a:	4b13      	ldr	r3, [pc, #76]	; (8002568 <ftpc_run+0x1024>)
 800251c:	2200      	movs	r2, #0
 800251e:	701a      	strb	r2, [r3, #0]
   			break;
 8002520:	e002      	b.n	8002528 <ftpc_run+0xfe4>
   		default :
   			break;
 8002522:	bf00      	nop
 8002524:	e000      	b.n	8002528 <ftpc_run+0xfe4>
   			break;
 8002526:	bf00      	nop
    }
    return 0;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	37b4      	adds	r7, #180	; 0xb4
 800252e:	46bd      	mov	sp, r7
 8002530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002532:	bf00      	nop
 8002534:	20000fec 	.word	0x20000fec
 8002538:	200012f4 	.word	0x200012f4
 800253c:	080113bc 	.word	0x080113bc
 8002540:	08011234 	.word	0x08011234
 8002544:	ffffb1e0 	.word	0xffffb1e0
 8002548:	080113e8 	.word	0x080113e8
 800254c:	08011414 	.word	0x08011414
 8002550:	08011420 	.word	0x08011420
 8002554:	20000104 	.word	0x20000104
 8002558:	08011434 	.word	0x08011434
 800255c:	200012fc 	.word	0x200012fc
 8002560:	200012f8 	.word	0x200012f8
 8002564:	08011264 	.word	0x08011264
 8002568:	20000101 	.word	0x20000101

0800256c <proc_ftpc>:

char proc_ftpc(char * buf)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b08a      	sub	sp, #40	; 0x28
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
	uint16_t Responses;
	uint8_t dat[30]={0,};
 8002574:	2300      	movs	r3, #0
 8002576:	60bb      	str	r3, [r7, #8]
 8002578:	f107 030c 	add.w	r3, r7, #12
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	605a      	str	r2, [r3, #4]
 8002582:	609a      	str	r2, [r3, #8]
 8002584:	60da      	str	r2, [r3, #12]
 8002586:	611a      	str	r2, [r3, #16]
 8002588:	615a      	str	r2, [r3, #20]
 800258a:	831a      	strh	r2, [r3, #24]

	Responses =(buf[0]-'0')*100+(buf[1]-'0')*10+(buf[2]-'0');
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	3b30      	subs	r3, #48	; 0x30
 8002592:	b29b      	uxth	r3, r3
 8002594:	461a      	mov	r2, r3
 8002596:	0092      	lsls	r2, r2, #2
 8002598:	4413      	add	r3, r2
 800259a:	461a      	mov	r2, r3
 800259c:	0091      	lsls	r1, r2, #2
 800259e:	461a      	mov	r2, r3
 80025a0:	460b      	mov	r3, r1
 80025a2:	4413      	add	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3301      	adds	r3, #1
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	3b30      	subs	r3, #48	; 0x30
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	4619      	mov	r1, r3
 80025b4:	0089      	lsls	r1, r1, #2
 80025b6:	440b      	add	r3, r1
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	4413      	add	r3, r2
 80025be:	b29a      	uxth	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3302      	adds	r3, #2
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	4413      	add	r3, r2
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	3b30      	subs	r3, #48	; 0x30
 80025ce:	84fb      	strh	r3, [r7, #38]	; 0x26

	switch(Responses){
 80025d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80025d2:	f240 2226 	movw	r2, #550	; 0x226
 80025d6:	4293      	cmp	r3, r2
 80025d8:	f000 80da 	beq.w	8002790 <proc_ftpc+0x224>
 80025dc:	f240 2226 	movw	r2, #550	; 0x226
 80025e0:	4293      	cmp	r3, r2
 80025e2:	f300 8136 	bgt.w	8002852 <proc_ftpc+0x2e6>
 80025e6:	f240 2212 	movw	r2, #530	; 0x212
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d05e      	beq.n	80026ac <proc_ftpc+0x140>
 80025ee:	f240 2212 	movw	r2, #530	; 0x212
 80025f2:	4293      	cmp	r3, r2
 80025f4:	f300 812d 	bgt.w	8002852 <proc_ftpc+0x2e6>
 80025f8:	f240 124b 	movw	r2, #331	; 0x14b
 80025fc:	4293      	cmp	r3, r2
 80025fe:	f000 8084 	beq.w	800270a <proc_ftpc+0x19e>
 8002602:	f5b3 7fa6 	cmp.w	r3, #332	; 0x14c
 8002606:	f280 8124 	bge.w	8002852 <proc_ftpc+0x2e6>
 800260a:	2bfa      	cmp	r3, #250	; 0xfa
 800260c:	f300 8121 	bgt.w	8002852 <proc_ftpc+0x2e6>
 8002610:	2bdc      	cmp	r3, #220	; 0xdc
 8002612:	da06      	bge.n	8002622 <proc_ftpc+0xb6>
 8002614:	2b96      	cmp	r3, #150	; 0x96
 8002616:	f000 80d5 	beq.w	80027c4 <proc_ftpc+0x258>
 800261a:	2bc8      	cmp	r3, #200	; 0xc8
 800261c:	f000 80bf 	beq.w	800279e <proc_ftpc+0x232>
 8002620:	e117      	b.n	8002852 <proc_ftpc+0x2e6>
 8002622:	3bdc      	subs	r3, #220	; 0xdc
 8002624:	2b1e      	cmp	r3, #30
 8002626:	f200 8114 	bhi.w	8002852 <proc_ftpc+0x2e6>
 800262a:	a201      	add	r2, pc, #4	; (adr r2, 8002630 <proc_ftpc+0xc4>)
 800262c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002630:	080026c9 	.word	0x080026c9
 8002634:	08002853 	.word	0x08002853
 8002638:	08002853 	.word	0x08002853
 800263c:	08002853 	.word	0x08002853
 8002640:	08002853 	.word	0x08002853
 8002644:	08002853 	.word	0x08002853
 8002648:	08002821 	.word	0x08002821
 800264c:	08002829 	.word	0x08002829
 8002650:	08002853 	.word	0x08002853
 8002654:	08002853 	.word	0x08002853
 8002658:	0800274d 	.word	0x0800274d
 800265c:	08002853 	.word	0x08002853
 8002660:	08002853 	.word	0x08002853
 8002664:	08002853 	.word	0x08002853
 8002668:	08002853 	.word	0x08002853
 800266c:	08002853 	.word	0x08002853
 8002670:	08002853 	.word	0x08002853
 8002674:	08002853 	.word	0x08002853
 8002678:	08002853 	.word	0x08002853
 800267c:	08002853 	.word	0x08002853
 8002680:	08002853 	.word	0x08002853
 8002684:	08002853 	.word	0x08002853
 8002688:	08002853 	.word	0x08002853
 800268c:	08002853 	.word	0x08002853
 8002690:	08002853 	.word	0x08002853
 8002694:	08002853 	.word	0x08002853
 8002698:	08002853 	.word	0x08002853
 800269c:	08002853 	.word	0x08002853
 80026a0:	08002853 	.word	0x08002853
 80026a4:	08002853 	.word	0x08002853
 80026a8:	08002783 	.word	0x08002783
		case R_530:	/* 530 Permission denied */
			printf("\r\n??USER/PASS not correct..\r\n");
 80026ac:	4870      	ldr	r0, [pc, #448]	; (8002870 <proc_ftpc+0x304>)
 80026ae:	f00c fee5 	bl	800f47c <puts>

			//var.1 Reboot the board on incorrect user-pass (Used on defined AUTOLOGON_ANONYMOUS)
			printf("\r\nReboot the board");
 80026b2:	4870      	ldr	r0, [pc, #448]	; (8002874 <proc_ftpc+0x308>)
 80026b4:	f00c fe46 	bl	800f344 <iprintf>
			while(1)
			{
				HAL_Delay(1000);
 80026b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026bc:	f001 ff82 	bl	80045c4 <HAL_Delay>
				printf(".");
 80026c0:	202e      	movs	r0, #46	; 0x2e
 80026c2:	f00c fe57 	bl	800f374 <putchar>
				HAL_Delay(1000);
 80026c6:	e7f7      	b.n	80026b8 <proc_ftpc+0x14c>
			//printf("Try re-login\r\n");

			//Should not used here on both variants
			/*break;*/
		case R_220:	/* Service ready for new user. */
			printf("\r\nInput your User ID > ");
 80026c8:	486b      	ldr	r0, [pc, #428]	; (8002878 <proc_ftpc+0x30c>)
 80026ca:	f00c fe3b 	bl	800f344 <iprintf>
#ifdef AUTOLOGON_ANONYMOUS
			HAL_Delay(100),
 80026ce:	2064      	movs	r0, #100	; 0x64
 80026d0:	f001 ff78 	bl	80045c4 <HAL_Delay>
					sprintf(dat,"USER %s\r\n", "u1"); //Use default <user> for test purposes
 80026d4:	f107 0308 	add.w	r3, r7, #8
 80026d8:	4a68      	ldr	r2, [pc, #416]	; (800287c <proc_ftpc+0x310>)
 80026da:	4969      	ldr	r1, [pc, #420]	; (8002880 <proc_ftpc+0x314>)
 80026dc:	4618      	mov	r0, r3
 80026de:	f00c fed5 	bl	800f48c <siprintf>
			printf("u1");
 80026e2:	4866      	ldr	r0, [pc, #408]	; (800287c <proc_ftpc+0x310>)
 80026e4:	f00c fe2e 	bl	800f344 <iprintf>
#else
			sprintf(dat,"USER %s\r\n", User_Keyboard_MSG());
#endif
			printf("\r\n");
 80026e8:	4866      	ldr	r0, [pc, #408]	; (8002884 <proc_ftpc+0x318>)
 80026ea:	f00c fec7 	bl	800f47c <puts>
			send(CTRL_SOCK, (uint8_t *)dat, strlen(dat));
 80026ee:	f107 0308 	add.w	r3, r7, #8
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7fd fdf4 	bl	80002e0 <strlen>
 80026f8:	4603      	mov	r3, r0
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	f107 0308 	add.w	r3, r7, #8
 8002700:	4619      	mov	r1, r3
 8002702:	2002      	movs	r0, #2
 8002704:	f000 fcc8 	bl	8003098 <send>
			break;
 8002708:	e0ac      	b.n	8002864 <proc_ftpc+0x2f8>

		case R_331:	/* User name okay, need password. */
			printf("\r\nInput your Password > ");
 800270a:	485f      	ldr	r0, [pc, #380]	; (8002888 <proc_ftpc+0x31c>)
 800270c:	f00c fe1a 	bl	800f344 <iprintf>
#ifdef AUTOLOGON_ANONYMOUS
			HAL_Delay(100), sprintf(dat,"PASS %s\r\n", "11111"); //Use default <pass> for test purposes
 8002710:	2064      	movs	r0, #100	; 0x64
 8002712:	f001 ff57 	bl	80045c4 <HAL_Delay>
 8002716:	f107 0308 	add.w	r3, r7, #8
 800271a:	4a5c      	ldr	r2, [pc, #368]	; (800288c <proc_ftpc+0x320>)
 800271c:	495c      	ldr	r1, [pc, #368]	; (8002890 <proc_ftpc+0x324>)
 800271e:	4618      	mov	r0, r3
 8002720:	f00c feb4 	bl	800f48c <siprintf>
			printf("11111");
 8002724:	4859      	ldr	r0, [pc, #356]	; (800288c <proc_ftpc+0x320>)
 8002726:	f00c fe0d 	bl	800f344 <iprintf>
#else
			sprintf(dat,"PASS %s\r\n", User_Keyboard_MSG());
#endif
			printf("\r\n");
 800272a:	4856      	ldr	r0, [pc, #344]	; (8002884 <proc_ftpc+0x318>)
 800272c:	f00c fea6 	bl	800f47c <puts>
			send(CTRL_SOCK, (uint8_t *)dat, strlen(dat));
 8002730:	f107 0308 	add.w	r3, r7, #8
 8002734:	4618      	mov	r0, r3
 8002736:	f7fd fdd3 	bl	80002e0 <strlen>
 800273a:	4603      	mov	r3, r0
 800273c:	b29a      	uxth	r2, r3
 800273e:	f107 0308 	add.w	r3, r7, #8
 8002742:	4619      	mov	r1, r3
 8002744:	2002      	movs	r0, #2
 8002746:	f000 fca7 	bl	8003098 <send>
			break;
 800274a:	e08b      	b.n	8002864 <proc_ftpc+0x2f8>
		case R_230:	/* User logged in, proceed */
			printf("\r\nUser logged in, proceed\r\n");
 800274c:	4851      	ldr	r0, [pc, #324]	; (8002894 <proc_ftpc+0x328>)
 800274e:	f00c fe95 	bl	800f47c <puts>

			sprintf(dat,"TYPE %c\r\n", TransferAscii);
 8002752:	f107 0308 	add.w	r3, r7, #8
 8002756:	2241      	movs	r2, #65	; 0x41
 8002758:	494f      	ldr	r1, [pc, #316]	; (8002898 <proc_ftpc+0x32c>)
 800275a:	4618      	mov	r0, r3
 800275c:	f00c fe96 	bl	800f48c <siprintf>
			ftpc.type = ASCII_TYPE;
 8002760:	4b4e      	ldr	r3, [pc, #312]	; (800289c <proc_ftpc+0x330>)
 8002762:	2200      	movs	r2, #0
 8002764:	709a      	strb	r2, [r3, #2]
			send(CTRL_SOCK, (uint8_t *)dat, strlen(dat));
 8002766:	f107 0308 	add.w	r3, r7, #8
 800276a:	4618      	mov	r0, r3
 800276c:	f7fd fdb8 	bl	80002e0 <strlen>
 8002770:	4603      	mov	r3, r0
 8002772:	b29a      	uxth	r2, r3
 8002774:	f107 0308 	add.w	r3, r7, #8
 8002778:	4619      	mov	r1, r3
 800277a:	2002      	movs	r0, #2
 800277c:	f000 fc8c 	bl	8003098 <send>
			break;
 8002780:	e070      	b.n	8002864 <proc_ftpc+0x2f8>
		case R_250:	/* Deleted file success */
			printf("\r\nDeleted file success\r\n");
 8002782:	4847      	ldr	r0, [pc, #284]	; (80028a0 <proc_ftpc+0x334>)
 8002784:	f00c fe7a 	bl	800f47c <puts>
			gMenuStart = 1;
 8002788:	4b46      	ldr	r3, [pc, #280]	; (80028a4 <proc_ftpc+0x338>)
 800278a:	2201      	movs	r2, #1
 800278c:	701a      	strb	r2, [r3, #0]
			break;
 800278e:	e069      	b.n	8002864 <proc_ftpc+0x2f8>
		case R_550:	/*Can't delete file */
			printf("\r\nCan't delete file\r\n");
 8002790:	4845      	ldr	r0, [pc, #276]	; (80028a8 <proc_ftpc+0x33c>)
 8002792:	f00c fe73 	bl	800f47c <puts>
			gMenuStart = 1;
 8002796:	4b43      	ldr	r3, [pc, #268]	; (80028a4 <proc_ftpc+0x338>)
 8002798:	2201      	movs	r2, #1
 800279a:	701a      	strb	r2, [r3, #0]
			break;
 800279c:	e062      	b.n	8002864 <proc_ftpc+0x2f8>
		case R_200:
			if((ftpc.dsock_mode==ACTIVE_MODE)&&gModeActivePassiveflag){
 800279e:	4b3f      	ldr	r3, [pc, #252]	; (800289c <proc_ftpc+0x330>)
 80027a0:	791b      	ldrb	r3, [r3, #4]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d10a      	bne.n	80027bc <proc_ftpc+0x250>
 80027a6:	4b41      	ldr	r3, [pc, #260]	; (80028ac <proc_ftpc+0x340>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d006      	beq.n	80027bc <proc_ftpc+0x250>
				ftpc.dsock_state = DATASOCK_READY;
 80027ae:	4b3b      	ldr	r3, [pc, #236]	; (800289c <proc_ftpc+0x330>)
 80027b0:	2201      	movs	r2, #1
 80027b2:	70da      	strb	r2, [r3, #3]
				gModeActivePassiveflag = 0;
 80027b4:	4b3d      	ldr	r3, [pc, #244]	; (80028ac <proc_ftpc+0x340>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	701a      	strb	r2, [r3, #0]
			}
			else{
				gMenuStart = 1;
			}
			break;
 80027ba:	e053      	b.n	8002864 <proc_ftpc+0x2f8>
				gMenuStart = 1;
 80027bc:	4b39      	ldr	r3, [pc, #228]	; (80028a4 <proc_ftpc+0x338>)
 80027be:	2201      	movs	r2, #1
 80027c0:	701a      	strb	r2, [r3, #0]
			break;
 80027c2:	e04f      	b.n	8002864 <proc_ftpc+0x2f8>
		case R_150:
			switch(Command.First){
 80027c4:	4b3a      	ldr	r3, [pc, #232]	; (80028b0 <proc_ftpc+0x344>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b03      	cmp	r3, #3
 80027ca:	d010      	beq.n	80027ee <proc_ftpc+0x282>
 80027cc:	2b03      	cmp	r3, #3
 80027ce:	dc22      	bgt.n	8002816 <proc_ftpc+0x2aa>
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d002      	beq.n	80027da <proc_ftpc+0x26e>
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d014      	beq.n	8002802 <proc_ftpc+0x296>
 80027d8:	e01d      	b.n	8002816 <proc_ftpc+0x2aa>
			case f_dir:
				Command.First = f_nocmd;
 80027da:	4b35      	ldr	r3, [pc, #212]	; (80028b0 <proc_ftpc+0x344>)
 80027dc:	2200      	movs	r2, #0
 80027de:	701a      	strb	r2, [r3, #0]
				Command.Second = s_dir;
 80027e0:	4b33      	ldr	r3, [pc, #204]	; (80028b0 <proc_ftpc+0x344>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	705a      	strb	r2, [r3, #1]
				gDataPutGetStart = 1;
 80027e6:	4b33      	ldr	r3, [pc, #204]	; (80028b4 <proc_ftpc+0x348>)
 80027e8:	2201      	movs	r2, #1
 80027ea:	701a      	strb	r2, [r3, #0]
				break;
 80027ec:	e017      	b.n	800281e <proc_ftpc+0x2b2>
			case f_get:
				Command.First = f_nocmd;
 80027ee:	4b30      	ldr	r3, [pc, #192]	; (80028b0 <proc_ftpc+0x344>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	701a      	strb	r2, [r3, #0]
				Command.Second = s_get;
 80027f4:	4b2e      	ldr	r3, [pc, #184]	; (80028b0 <proc_ftpc+0x344>)
 80027f6:	2203      	movs	r2, #3
 80027f8:	705a      	strb	r2, [r3, #1]
				gDataPutGetStart = 1;
 80027fa:	4b2e      	ldr	r3, [pc, #184]	; (80028b4 <proc_ftpc+0x348>)
 80027fc:	2201      	movs	r2, #1
 80027fe:	701a      	strb	r2, [r3, #0]
				break;
 8002800:	e00d      	b.n	800281e <proc_ftpc+0x2b2>
			case f_put:
				Command.First = f_nocmd;
 8002802:	4b2b      	ldr	r3, [pc, #172]	; (80028b0 <proc_ftpc+0x344>)
 8002804:	2200      	movs	r2, #0
 8002806:	701a      	strb	r2, [r3, #0]
				Command.Second = s_put;
 8002808:	4b29      	ldr	r3, [pc, #164]	; (80028b0 <proc_ftpc+0x344>)
 800280a:	2202      	movs	r2, #2
 800280c:	705a      	strb	r2, [r3, #1]
				gDataPutGetStart = 1;
 800280e:	4b29      	ldr	r3, [pc, #164]	; (80028b4 <proc_ftpc+0x348>)
 8002810:	2201      	movs	r2, #1
 8002812:	701a      	strb	r2, [r3, #0]
				break;
 8002814:	e003      	b.n	800281e <proc_ftpc+0x2b2>
			default :
				printf("Command.First = default\r\n");
 8002816:	4828      	ldr	r0, [pc, #160]	; (80028b8 <proc_ftpc+0x34c>)
 8002818:	f00c fe30 	bl	800f47c <puts>
				break;
 800281c:	bf00      	nop
			}
			break;
 800281e:	e021      	b.n	8002864 <proc_ftpc+0x2f8>
		case R_226:
			gMenuStart = 1;
 8002820:	4b20      	ldr	r3, [pc, #128]	; (80028a4 <proc_ftpc+0x338>)
 8002822:	2201      	movs	r2, #1
 8002824:	701a      	strb	r2, [r3, #0]
			break;
 8002826:	e01d      	b.n	8002864 <proc_ftpc+0x2f8>
		case R_227:
			if (pportc(buf) == -1){
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 f84f 	bl	80028cc <pportc>
 800282e:	4603      	mov	r3, r0
 8002830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002834:	d103      	bne.n	800283e <proc_ftpc+0x2d2>
				printf("Bad port syntax\r\n");
 8002836:	4821      	ldr	r0, [pc, #132]	; (80028bc <proc_ftpc+0x350>)
 8002838:	f00c fe20 	bl	800f47c <puts>
			else{
				printf("Go Open Data Sock...\r\n ");
				ftpc.dsock_mode = PASSIVE_MODE;
				ftpc.dsock_state = DATASOCK_READY;
			}
			break;
 800283c:	e012      	b.n	8002864 <proc_ftpc+0x2f8>
				printf("Go Open Data Sock...\r\n ");
 800283e:	4820      	ldr	r0, [pc, #128]	; (80028c0 <proc_ftpc+0x354>)
 8002840:	f00c fd80 	bl	800f344 <iprintf>
				ftpc.dsock_mode = PASSIVE_MODE;
 8002844:	4b15      	ldr	r3, [pc, #84]	; (800289c <proc_ftpc+0x330>)
 8002846:	2200      	movs	r2, #0
 8002848:	711a      	strb	r2, [r3, #4]
				ftpc.dsock_state = DATASOCK_READY;
 800284a:	4b14      	ldr	r3, [pc, #80]	; (800289c <proc_ftpc+0x330>)
 800284c:	2201      	movs	r2, #1
 800284e:	70da      	strb	r2, [r3, #3]
			break;
 8002850:	e008      	b.n	8002864 <proc_ftpc+0x2f8>
		default:
			printf("\r\nDefault Status = %d\r\n",(uint16_t)Responses);
 8002852:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002854:	4619      	mov	r1, r3
 8002856:	481b      	ldr	r0, [pc, #108]	; (80028c4 <proc_ftpc+0x358>)
 8002858:	f00c fd74 	bl	800f344 <iprintf>
			gDataSockReady = 1;
 800285c:	4b1a      	ldr	r3, [pc, #104]	; (80028c8 <proc_ftpc+0x35c>)
 800285e:	2201      	movs	r2, #1
 8002860:	701a      	strb	r2, [r3, #0]
			break;
 8002862:	bf00      	nop
		}
	return 1;
 8002864:	2301      	movs	r3, #1
}
 8002866:	4618      	mov	r0, r3
 8002868:	3728      	adds	r7, #40	; 0x28
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	08011444 	.word	0x08011444
 8002874:	08010f88 	.word	0x08010f88
 8002878:	08011464 	.word	0x08011464
 800287c:	0801147c 	.word	0x0801147c
 8002880:	08011480 	.word	0x08011480
 8002884:	0801148c 	.word	0x0801148c
 8002888:	08011490 	.word	0x08011490
 800288c:	080114ac 	.word	0x080114ac
 8002890:	080114b4 	.word	0x080114b4
 8002894:	080114c0 	.word	0x080114c0
 8002898:	08011060 	.word	0x08011060
 800289c:	20000fec 	.word	0x20000fec
 80028a0:	080114dc 	.word	0x080114dc
 80028a4:	20000103 	.word	0x20000103
 80028a8:	080114f4 	.word	0x080114f4
 80028ac:	20000102 	.word	0x20000102
 80028b0:	20001300 	.word	0x20001300
 80028b4:	20000105 	.word	0x20000105
 80028b8:	080111bc 	.word	0x080111bc
 80028bc:	0801150c 	.word	0x0801150c
 80028c0:	08011520 	.word	0x08011520
 80028c4:	08011538 	.word	0x08011538
 80028c8:	20000104 	.word	0x20000104

080028cc <pportc>:

int pportc(char * arg)
{
 80028cc:	b590      	push	{r4, r7, lr}
 80028ce:	b087      	sub	sp, #28
 80028d0:	af02      	add	r7, sp, #8
 80028d2:	6078      	str	r0, [r7, #4]
	int i;
	char* tok=0;
 80028d4:	2300      	movs	r3, #0
 80028d6:	60bb      	str	r3, [r7, #8]
	strtok(arg,"(");
 80028d8:	493a      	ldr	r1, [pc, #232]	; (80029c4 <pportc+0xf8>)
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f00c fdf6 	bl	800f4cc <strtok>
	for (i = 0; i < 4; i++)
 80028e0:	2300      	movs	r3, #0
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	e024      	b.n	8002930 <pportc+0x64>
	{
		if(i==0) tok = strtok(NULL,",\r\n");
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d105      	bne.n	80028f8 <pportc+0x2c>
 80028ec:	4936      	ldr	r1, [pc, #216]	; (80029c8 <pportc+0xfc>)
 80028ee:	2000      	movs	r0, #0
 80028f0:	f00c fdec 	bl	800f4cc <strtok>
 80028f4:	60b8      	str	r0, [r7, #8]
 80028f6:	e004      	b.n	8002902 <pportc+0x36>
		else	 tok = strtok(NULL,",");
 80028f8:	4934      	ldr	r1, [pc, #208]	; (80029cc <pportc+0x100>)
 80028fa:	2000      	movs	r0, #0
 80028fc:	f00c fde6 	bl	800f4cc <strtok>
 8002900:	60b8      	str	r0, [r7, #8]
		remote_ip.cVal[i] = (uint8_t)atoi(tok);
 8002902:	68b8      	ldr	r0, [r7, #8]
 8002904:	f00c fce7 	bl	800f2d6 <atoi>
 8002908:	4603      	mov	r3, r0
 800290a:	b2d9      	uxtb	r1, r3
 800290c:	4a30      	ldr	r2, [pc, #192]	; (80029d0 <pportc+0x104>)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	4413      	add	r3, r2
 8002912:	460a      	mov	r2, r1
 8002914:	701a      	strb	r2, [r3, #0]
		if (!tok){
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d106      	bne.n	800292a <pportc+0x5e>
			printf("bad pport : %s\r\n", arg);
 800291c:	6879      	ldr	r1, [r7, #4]
 800291e:	482d      	ldr	r0, [pc, #180]	; (80029d4 <pportc+0x108>)
 8002920:	f00c fd10 	bl	800f344 <iprintf>
			return -1;
 8002924:	f04f 33ff 	mov.w	r3, #4294967295
 8002928:	e047      	b.n	80029ba <pportc+0xee>
	for (i = 0; i < 4; i++)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	3301      	adds	r3, #1
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2b03      	cmp	r3, #3
 8002934:	ddd7      	ble.n	80028e6 <pportc+0x1a>
		}
	}
	remote_port = 0;
 8002936:	4b28      	ldr	r3, [pc, #160]	; (80029d8 <pportc+0x10c>)
 8002938:	2200      	movs	r2, #0
 800293a:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < 2; i++){
 800293c:	2300      	movs	r3, #0
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	e022      	b.n	8002988 <pportc+0xbc>
		tok = strtok(NULL,",\r\n");
 8002942:	4921      	ldr	r1, [pc, #132]	; (80029c8 <pportc+0xfc>)
 8002944:	2000      	movs	r0, #0
 8002946:	f00c fdc1 	bl	800f4cc <strtok>
 800294a:	60b8      	str	r0, [r7, #8]
		remote_port <<= 8;
 800294c:	4b22      	ldr	r3, [pc, #136]	; (80029d8 <pportc+0x10c>)
 800294e:	881b      	ldrh	r3, [r3, #0]
 8002950:	021b      	lsls	r3, r3, #8
 8002952:	b29a      	uxth	r2, r3
 8002954:	4b20      	ldr	r3, [pc, #128]	; (80029d8 <pportc+0x10c>)
 8002956:	801a      	strh	r2, [r3, #0]
		remote_port += atoi(tok);
 8002958:	68b8      	ldr	r0, [r7, #8]
 800295a:	f00c fcbc 	bl	800f2d6 <atoi>
 800295e:	4603      	mov	r3, r0
 8002960:	b29a      	uxth	r2, r3
 8002962:	4b1d      	ldr	r3, [pc, #116]	; (80029d8 <pportc+0x10c>)
 8002964:	881b      	ldrh	r3, [r3, #0]
 8002966:	4413      	add	r3, r2
 8002968:	b29a      	uxth	r2, r3
 800296a:	4b1b      	ldr	r3, [pc, #108]	; (80029d8 <pportc+0x10c>)
 800296c:	801a      	strh	r2, [r3, #0]
		if (!tok){
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d106      	bne.n	8002982 <pportc+0xb6>
			printf("bad pport : %s\r\n", arg);
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	4817      	ldr	r0, [pc, #92]	; (80029d4 <pportc+0x108>)
 8002978:	f00c fce4 	bl	800f344 <iprintf>
			return -1;
 800297c:	f04f 33ff 	mov.w	r3, #4294967295
 8002980:	e01b      	b.n	80029ba <pportc+0xee>
	for (i = 0; i < 2; i++){
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	3301      	adds	r3, #1
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2b01      	cmp	r3, #1
 800298c:	ddd9      	ble.n	8002942 <pportc+0x76>
		}
	}
	printf("ip : %d.%d.%d.%d, port : %u\r\n", remote_ip.cVal[0], remote_ip.cVal[1], remote_ip.cVal[2], remote_ip.cVal[3], remote_port);
 800298e:	4b10      	ldr	r3, [pc, #64]	; (80029d0 <pportc+0x104>)
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	4619      	mov	r1, r3
 8002994:	4b0e      	ldr	r3, [pc, #56]	; (80029d0 <pportc+0x104>)
 8002996:	785b      	ldrb	r3, [r3, #1]
 8002998:	4618      	mov	r0, r3
 800299a:	4b0d      	ldr	r3, [pc, #52]	; (80029d0 <pportc+0x104>)
 800299c:	789b      	ldrb	r3, [r3, #2]
 800299e:	461c      	mov	r4, r3
 80029a0:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <pportc+0x104>)
 80029a2:	78db      	ldrb	r3, [r3, #3]
 80029a4:	461a      	mov	r2, r3
 80029a6:	4b0c      	ldr	r3, [pc, #48]	; (80029d8 <pportc+0x10c>)
 80029a8:	881b      	ldrh	r3, [r3, #0]
 80029aa:	9301      	str	r3, [sp, #4]
 80029ac:	9200      	str	r2, [sp, #0]
 80029ae:	4623      	mov	r3, r4
 80029b0:	4602      	mov	r2, r0
 80029b2:	480a      	ldr	r0, [pc, #40]	; (80029dc <pportc+0x110>)
 80029b4:	f00c fcc6 	bl	800f344 <iprintf>
	return 0;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3714      	adds	r7, #20
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd90      	pop	{r4, r7, pc}
 80029c2:	bf00      	nop
 80029c4:	08011550 	.word	0x08011550
 80029c8:	08011554 	.word	0x08011554
 80029cc:	08011558 	.word	0x08011558
 80029d0:	200012f8 	.word	0x200012f8
 80029d4:	0801155c 	.word	0x0801155c
 80029d8:	200012fc 	.word	0x200012fc
 80029dc:	08011570 	.word	0x08011570

080029e0 <User_Keyboard_MSG>:

uint8_t* User_Keyboard_MSG()
{
 80029e0:	b590      	push	{r4, r7, lr}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
	uint8_t i=0;
 80029e6:	2300      	movs	r3, #0
 80029e8:	71fb      	strb	r3, [r7, #7]
	//uart0_rx_flash(); //Flash UART RX on enter this function
	memset(gMsgBuf, 0, sizeof(gMsgBuf)); //Clear all Input buffer
 80029ea:	2214      	movs	r2, #20
 80029ec:	2100      	movs	r1, #0
 80029ee:	4811      	ldr	r0, [pc, #68]	; (8002a34 <User_Keyboard_MSG+0x54>)
 80029f0:	f00c fca0 	bl	800f334 <memset>
	do{
		if(i == sizeof(gMsgBuf))
 80029f4:	79fb      	ldrb	r3, [r7, #7]
 80029f6:	2b14      	cmp	r3, #20
 80029f8:	d101      	bne.n	80029fe <User_Keyboard_MSG+0x1e>
		{
			i = 0; //Overflow input buffer protection
 80029fa:	2300      	movs	r3, #0
 80029fc:	71fb      	strb	r3, [r7, #7]
		}
		gMsgBuf[i] = uart8_receive();
 80029fe:	79fc      	ldrb	r4, [r7, #7]
 8002a00:	f000 fd32 	bl	8003468 <uart8_receive>
 8002a04:	4603      	mov	r3, r0
 8002a06:	461a      	mov	r2, r3
 8002a08:	4b0a      	ldr	r3, [pc, #40]	; (8002a34 <User_Keyboard_MSG+0x54>)
 8002a0a:	551a      	strb	r2, [r3, r4]
		i++;
 8002a0c:	79fb      	ldrb	r3, [r7, #7]
 8002a0e:	3301      	adds	r3, #1
 8002a10:	71fb      	strb	r3, [r7, #7]
	}while(gMsgBuf[i-1]!=0x0d); //Wait '\r' symbol
 8002a12:	79fb      	ldrb	r3, [r7, #7]
 8002a14:	3b01      	subs	r3, #1
 8002a16:	4a07      	ldr	r2, [pc, #28]	; (8002a34 <User_Keyboard_MSG+0x54>)
 8002a18:	5cd3      	ldrb	r3, [r2, r3]
 8002a1a:	2b0d      	cmp	r3, #13
 8002a1c:	d1ea      	bne.n	80029f4 <User_Keyboard_MSG+0x14>
	gMsgBuf[i-1]=0;
 8002a1e:	79fb      	ldrb	r3, [r7, #7]
 8002a20:	3b01      	subs	r3, #1
 8002a22:	4a04      	ldr	r2, [pc, #16]	; (8002a34 <User_Keyboard_MSG+0x54>)
 8002a24:	2100      	movs	r1, #0
 8002a26:	54d1      	strb	r1, [r2, r3]
	return gMsgBuf;
 8002a28:	4b02      	ldr	r3, [pc, #8]	; (8002a34 <User_Keyboard_MSG+0x54>)
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd90      	pop	{r4, r7, pc}
 8002a32:	bf00      	nop
 8002a34:	20000108 	.word	0x20000108

08002a38 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8002a38:	b590      	push	{r4, r7, lr}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	4604      	mov	r4, r0
 8002a40:	4608      	mov	r0, r1
 8002a42:	4611      	mov	r1, r2
 8002a44:	461a      	mov	r2, r3
 8002a46:	4623      	mov	r3, r4
 8002a48:	71fb      	strb	r3, [r7, #7]
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	71bb      	strb	r3, [r7, #6]
 8002a4e:	460b      	mov	r3, r1
 8002a50:	80bb      	strh	r3, [r7, #4]
 8002a52:	4613      	mov	r3, r2
 8002a54:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8002a56:	79fb      	ldrb	r3, [r7, #7]
 8002a58:	2b08      	cmp	r3, #8
 8002a5a:	d902      	bls.n	8002a62 <socket+0x2a>
 8002a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a60:	e0f2      	b.n	8002c48 <socket+0x210>
	switch(protocol)
 8002a62:	79bb      	ldrb	r3, [r7, #6]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d005      	beq.n	8002a74 <socket+0x3c>
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	dd11      	ble.n	8002a90 <socket+0x58>
 8002a6c:	3b02      	subs	r3, #2
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d80e      	bhi.n	8002a90 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8002a72:	e011      	b.n	8002a98 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8002a74:	f107 030c 	add.w	r3, r7, #12
 8002a78:	2204      	movs	r2, #4
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002a80:	f000 fd9e 	bl	80035c0 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d105      	bne.n	8002a96 <socket+0x5e>
 8002a8a:	f06f 0302 	mvn.w	r3, #2
 8002a8e:	e0db      	b.n	8002c48 <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8002a90:	f06f 0304 	mvn.w	r3, #4
 8002a94:	e0d8      	b.n	8002c48 <socket+0x210>
	    break;
 8002a96:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8002a98:	78fb      	ldrb	r3, [r7, #3]
 8002a9a:	f003 0304 	and.w	r3, r3, #4
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d002      	beq.n	8002aa8 <socket+0x70>
 8002aa2:	f06f 0305 	mvn.w	r3, #5
 8002aa6:	e0cf      	b.n	8002c48 <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8002aa8:	78fb      	ldrb	r3, [r7, #3]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d025      	beq.n	8002afa <socket+0xc2>
	{
   	switch(protocol)
 8002aae:	79bb      	ldrb	r3, [r7, #6]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d002      	beq.n	8002aba <socket+0x82>
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d008      	beq.n	8002aca <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8002ab8:	e024      	b.n	8002b04 <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8002aba:	78fb      	ldrb	r3, [r7, #3]
 8002abc:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d11c      	bne.n	8002afe <socket+0xc6>
 8002ac4:	f06f 0305 	mvn.w	r3, #5
 8002ac8:	e0be      	b.n	8002c48 <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 8002aca:	78fb      	ldrb	r3, [r7, #3]
 8002acc:	f003 0320 	and.w	r3, r3, #32
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d006      	beq.n	8002ae2 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8002ad4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	db02      	blt.n	8002ae2 <socket+0xaa>
 8002adc:	f06f 0305 	mvn.w	r3, #5
 8002ae0:	e0b2      	b.n	8002c48 <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 8002ae2:	78fb      	ldrb	r3, [r7, #3]
 8002ae4:	f003 0310 	and.w	r3, r3, #16
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00a      	beq.n	8002b02 <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8002aec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	db06      	blt.n	8002b02 <socket+0xca>
 8002af4:	f06f 0305 	mvn.w	r3, #5
 8002af8:	e0a6      	b.n	8002c48 <socket+0x210>
   	}
   }
 8002afa:	bf00      	nop
 8002afc:	e002      	b.n	8002b04 <socket+0xcc>
   	      break;
 8002afe:	bf00      	nop
 8002b00:	e000      	b.n	8002b04 <socket+0xcc>
   	      break;
 8002b02:	bf00      	nop
	close(sn);
 8002b04:	79fb      	ldrb	r3, [r7, #7]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f000 f8ac 	bl	8002c64 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8002b0c:	79fb      	ldrb	r3, [r7, #7]
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	3301      	adds	r3, #1
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	4618      	mov	r0, r3
 8002b16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b1a:	f023 030f 	bic.w	r3, r3, #15
 8002b1e:	b25a      	sxtb	r2, r3
 8002b20:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	b25b      	sxtb	r3, r3
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	f000 fcfa 	bl	8003524 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8002b30:	88bb      	ldrh	r3, [r7, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d110      	bne.n	8002b58 <socket+0x120>
	{
	   port = sock_any_port++;
 8002b36:	4b46      	ldr	r3, [pc, #280]	; (8002c50 <socket+0x218>)
 8002b38:	881b      	ldrh	r3, [r3, #0]
 8002b3a:	1c5a      	adds	r2, r3, #1
 8002b3c:	b291      	uxth	r1, r2
 8002b3e:	4a44      	ldr	r2, [pc, #272]	; (8002c50 <socket+0x218>)
 8002b40:	8011      	strh	r1, [r2, #0]
 8002b42:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8002b44:	4b42      	ldr	r3, [pc, #264]	; (8002c50 <socket+0x218>)
 8002b46:	881b      	ldrh	r3, [r3, #0]
 8002b48:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d103      	bne.n	8002b58 <socket+0x120>
 8002b50:	4b3f      	ldr	r3, [pc, #252]	; (8002c50 <socket+0x218>)
 8002b52:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8002b56:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8002b58:	79fb      	ldrb	r3, [r7, #7]
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b64:	461a      	mov	r2, r3
 8002b66:	88bb      	ldrh	r3, [r7, #4]
 8002b68:	0a1b      	lsrs	r3, r3, #8
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	4619      	mov	r1, r3
 8002b70:	4610      	mov	r0, r2
 8002b72:	f000 fcd7 	bl	8003524 <WIZCHIP_WRITE>
 8002b76:	79fb      	ldrb	r3, [r7, #7]
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b82:	461a      	mov	r2, r3
 8002b84:	88bb      	ldrh	r3, [r7, #4]
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4610      	mov	r0, r2
 8002b8c:	f000 fcca 	bl	8003524 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8002b90:	79fb      	ldrb	r3, [r7, #7]
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	3301      	adds	r3, #1
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 fcc0 	bl	8003524 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002ba4:	bf00      	nop
 8002ba6:	79fb      	ldrb	r3, [r7, #7]
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	3301      	adds	r3, #1
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 fc6a 	bl	800348c <WIZCHIP_READ>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f3      	bne.n	8002ba6 <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8002bbe:	79fb      	ldrb	r3, [r7, #7]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	b21b      	sxth	r3, r3
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	b21a      	sxth	r2, r3
 8002bcc:	4b21      	ldr	r3, [pc, #132]	; (8002c54 <socket+0x21c>)
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	b21b      	sxth	r3, r3
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	b21b      	sxth	r3, r3
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	4b1e      	ldr	r3, [pc, #120]	; (8002c54 <socket+0x21c>)
 8002bda:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8002bdc:	78fb      	ldrb	r3, [r7, #3]
 8002bde:	f003 0201 	and.w	r2, r3, #1
 8002be2:	79fb      	ldrb	r3, [r7, #7]
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	b21a      	sxth	r2, r3
 8002bea:	4b1a      	ldr	r3, [pc, #104]	; (8002c54 <socket+0x21c>)
 8002bec:	881b      	ldrh	r3, [r3, #0]
 8002bee:	b21b      	sxth	r3, r3
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	b21b      	sxth	r3, r3
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	4b17      	ldr	r3, [pc, #92]	; (8002c54 <socket+0x21c>)
 8002bf8:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8002bfa:	79fb      	ldrb	r3, [r7, #7]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	b21b      	sxth	r3, r3
 8002c04:	43db      	mvns	r3, r3
 8002c06:	b21a      	sxth	r2, r3
 8002c08:	4b13      	ldr	r3, [pc, #76]	; (8002c58 <socket+0x220>)
 8002c0a:	881b      	ldrh	r3, [r3, #0]
 8002c0c:	b21b      	sxth	r3, r3
 8002c0e:	4013      	ands	r3, r2
 8002c10:	b21b      	sxth	r3, r3
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	4b10      	ldr	r3, [pc, #64]	; (8002c58 <socket+0x220>)
 8002c16:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8002c18:	79fb      	ldrb	r3, [r7, #7]
 8002c1a:	4a10      	ldr	r2, [pc, #64]	; (8002c5c <socket+0x224>)
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8002c22:	79fb      	ldrb	r3, [r7, #7]
 8002c24:	4a0e      	ldr	r2, [pc, #56]	; (8002c60 <socket+0x228>)
 8002c26:	2100      	movs	r1, #0
 8002c28:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8002c2a:	bf00      	nop
 8002c2c:	79fb      	ldrb	r3, [r7, #7]
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	3301      	adds	r3, #1
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f000 fc27 	bl	800348c <WIZCHIP_READ>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d0f3      	beq.n	8002c2c <socket+0x1f4>
   return (int8_t)sn;
 8002c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3714      	adds	r7, #20
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd90      	pop	{r4, r7, pc}
 8002c50:	20000042 	.word	0x20000042
 8002c54:	2000011c 	.word	0x2000011c
 8002c58:	2000011e 	.word	0x2000011e
 8002c5c:	20000120 	.word	0x20000120
 8002c60:	20000130 	.word	0x20000130

08002c64 <close>:

int8_t close(uint8_t sn)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8002c6e:	79fb      	ldrb	r3, [r7, #7]
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	d902      	bls.n	8002c7a <close+0x16>
 8002c74:	f04f 33ff 	mov.w	r3, #4294967295
 8002c78:	e055      	b.n	8002d26 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8002c7a:	79fb      	ldrb	r3, [r7, #7]
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	3301      	adds	r3, #1
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002c86:	2110      	movs	r1, #16
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f000 fc4b 	bl	8003524 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8002c8e:	bf00      	nop
 8002c90:	79fb      	ldrb	r3, [r7, #7]
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	3301      	adds	r3, #1
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f000 fbf5 	bl	800348c <WIZCHIP_READ>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1f3      	bne.n	8002c90 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8002ca8:	79fb      	ldrb	r3, [r7, #7]
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	3301      	adds	r3, #1
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002cb4:	211f      	movs	r1, #31
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 fc34 	bl	8003524 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8002cbc:	79fb      	ldrb	r3, [r7, #7]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	b21b      	sxth	r3, r3
 8002cc6:	43db      	mvns	r3, r3
 8002cc8:	b21a      	sxth	r2, r3
 8002cca:	4b19      	ldr	r3, [pc, #100]	; (8002d30 <close+0xcc>)
 8002ccc:	881b      	ldrh	r3, [r3, #0]
 8002cce:	b21b      	sxth	r3, r3
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	b21b      	sxth	r3, r3
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	4b16      	ldr	r3, [pc, #88]	; (8002d30 <close+0xcc>)
 8002cd8:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8002cda:	79fb      	ldrb	r3, [r7, #7]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce2:	b21b      	sxth	r3, r3
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	b21a      	sxth	r2, r3
 8002ce8:	4b12      	ldr	r3, [pc, #72]	; (8002d34 <close+0xd0>)
 8002cea:	881b      	ldrh	r3, [r3, #0]
 8002cec:	b21b      	sxth	r3, r3
 8002cee:	4013      	ands	r3, r2
 8002cf0:	b21b      	sxth	r3, r3
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	4b0f      	ldr	r3, [pc, #60]	; (8002d34 <close+0xd0>)
 8002cf6:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8002cf8:	79fb      	ldrb	r3, [r7, #7]
 8002cfa:	4a0f      	ldr	r2, [pc, #60]	; (8002d38 <close+0xd4>)
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8002d02:	79fb      	ldrb	r3, [r7, #7]
 8002d04:	4a0d      	ldr	r2, [pc, #52]	; (8002d3c <close+0xd8>)
 8002d06:	2100      	movs	r1, #0
 8002d08:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8002d0a:	bf00      	nop
 8002d0c:	79fb      	ldrb	r3, [r7, #7]
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	3301      	adds	r3, #1
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f000 fbb7 	bl	800348c <WIZCHIP_READ>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1f3      	bne.n	8002d0c <close+0xa8>
	return SOCK_OK;
 8002d24:	2301      	movs	r3, #1
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	2000011c 	.word	0x2000011c
 8002d34:	2000011e 	.word	0x2000011e
 8002d38:	20000120 	.word	0x20000120
 8002d3c:	20000130 	.word	0x20000130

08002d40 <listen>:

int8_t listen(uint8_t sn)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	4603      	mov	r3, r0
 8002d48:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8002d4a:	79fb      	ldrb	r3, [r7, #7]
 8002d4c:	2b08      	cmp	r3, #8
 8002d4e:	d902      	bls.n	8002d56 <listen+0x16>
 8002d50:	f04f 33ff 	mov.w	r3, #4294967295
 8002d54:	e049      	b.n	8002dea <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002d56:	79fb      	ldrb	r3, [r7, #7]
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 fb94 	bl	800348c <WIZCHIP_READ>
 8002d64:	4603      	mov	r3, r0
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d002      	beq.n	8002d74 <listen+0x34>
 8002d6e:	f06f 0304 	mvn.w	r3, #4
 8002d72:	e03a      	b.n	8002dea <listen+0xaa>
	CHECK_SOCKINIT();
 8002d74:	79fb      	ldrb	r3, [r7, #7]
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	3301      	adds	r3, #1
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002d80:	4618      	mov	r0, r3
 8002d82:	f000 fb83 	bl	800348c <WIZCHIP_READ>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b13      	cmp	r3, #19
 8002d8a:	d002      	beq.n	8002d92 <listen+0x52>
 8002d8c:	f06f 0302 	mvn.w	r3, #2
 8002d90:	e02b      	b.n	8002dea <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 8002d92:	79fb      	ldrb	r3, [r7, #7]
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	3301      	adds	r3, #1
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002d9e:	2102      	movs	r1, #2
 8002da0:	4618      	mov	r0, r3
 8002da2:	f000 fbbf 	bl	8003524 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8002da6:	bf00      	nop
 8002da8:	79fb      	ldrb	r3, [r7, #7]
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	3301      	adds	r3, #1
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002db4:	4618      	mov	r0, r3
 8002db6:	f000 fb69 	bl	800348c <WIZCHIP_READ>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1f3      	bne.n	8002da8 <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8002dc0:	e006      	b.n	8002dd0 <listen+0x90>
   {
         close(sn);
 8002dc2:	79fb      	ldrb	r3, [r7, #7]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff ff4d 	bl	8002c64 <close>
         return SOCKERR_SOCKCLOSED;
 8002dca:	f06f 0303 	mvn.w	r3, #3
 8002dce:	e00c      	b.n	8002dea <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8002dd0:	79fb      	ldrb	r3, [r7, #7]
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f000 fb55 	bl	800348c <WIZCHIP_READ>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b14      	cmp	r3, #20
 8002de6:	d1ec      	bne.n	8002dc2 <listen+0x82>
   }
   return SOCK_OK;
 8002de8:	2301      	movs	r3, #1
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
	...

08002df4 <connect>:


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	6039      	str	r1, [r7, #0]
 8002dfe:	71fb      	strb	r3, [r7, #7]
 8002e00:	4613      	mov	r3, r2
 8002e02:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8002e04:	79fb      	ldrb	r3, [r7, #7]
 8002e06:	2b08      	cmp	r3, #8
 8002e08:	d902      	bls.n	8002e10 <connect+0x1c>
 8002e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e0e:	e0c6      	b.n	8002f9e <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002e10:	79fb      	ldrb	r3, [r7, #7]
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	3301      	adds	r3, #1
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f000 fb37 	bl	800348c <WIZCHIP_READ>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	f003 030f 	and.w	r3, r3, #15
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d002      	beq.n	8002e2e <connect+0x3a>
 8002e28:	f06f 0304 	mvn.w	r3, #4
 8002e2c:	e0b7      	b.n	8002f9e <connect+0x1aa>
   CHECK_SOCKINIT();
 8002e2e:	79fb      	ldrb	r3, [r7, #7]
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	3301      	adds	r3, #1
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 fb26 	bl	800348c <WIZCHIP_READ>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b13      	cmp	r3, #19
 8002e44:	d002      	beq.n	8002e4c <connect+0x58>
 8002e46:	f06f 0302 	mvn.w	r3, #2
 8002e4a:	e0a8      	b.n	8002f9e <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	021b      	lsls	r3, r3, #8
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	3201      	adds	r2, #1
 8002e5a:	7812      	ldrb	r2, [r2, #0]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	021b      	lsls	r3, r3, #8
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	3202      	adds	r2, #2
 8002e68:	7812      	ldrb	r2, [r2, #0]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	021b      	lsls	r3, r3, #8
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	3203      	adds	r2, #3
 8002e76:	7812      	ldrb	r2, [r2, #0]
 8002e78:	4413      	add	r3, r2
 8002e7a:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e82:	d002      	beq.n	8002e8a <connect+0x96>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d102      	bne.n	8002e90 <connect+0x9c>
 8002e8a:	f06f 030b 	mvn.w	r3, #11
 8002e8e:	e086      	b.n	8002f9e <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8002e90:	88bb      	ldrh	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d102      	bne.n	8002e9c <connect+0xa8>
 8002e96:	f06f 030a 	mvn.w	r3, #10
 8002e9a:	e080      	b.n	8002f9e <connect+0x1aa>
	setSn_DIPR(sn,addr);
 8002e9c:	79fb      	ldrb	r3, [r7, #7]
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8002ea8:	2204      	movs	r2, #4
 8002eaa:	6839      	ldr	r1, [r7, #0]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f000 fbe7 	bl	8003680 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 8002eb2:	79fb      	ldrb	r3, [r7, #7]
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	88bb      	ldrh	r3, [r7, #4]
 8002ec2:	0a1b      	lsrs	r3, r3, #8
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4610      	mov	r0, r2
 8002ecc:	f000 fb2a 	bl	8003524 <WIZCHIP_WRITE>
 8002ed0:	79fb      	ldrb	r3, [r7, #7]
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002edc:	461a      	mov	r2, r3
 8002ede:	88bb      	ldrh	r3, [r7, #4]
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	4610      	mov	r0, r2
 8002ee6:	f000 fb1d 	bl	8003524 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 8002eea:	79fb      	ldrb	r3, [r7, #7]
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	3301      	adds	r3, #1
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002ef6:	2104      	movs	r1, #4
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f000 fb13 	bl	8003524 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002efe:	bf00      	nop
 8002f00:	79fb      	ldrb	r3, [r7, #7]
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	3301      	adds	r3, #1
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f000 fabd 	bl	800348c <WIZCHIP_READ>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1f3      	bne.n	8002f00 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8002f18:	4b23      	ldr	r3, [pc, #140]	; (8002fa8 <connect+0x1b4>)
 8002f1a:	881b      	ldrh	r3, [r3, #0]
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	79fb      	ldrb	r3, [r7, #7]
 8002f20:	fa42 f303 	asr.w	r3, r2, r3
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d02b      	beq.n	8002f84 <connect+0x190>
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	e036      	b.n	8002f9e <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8002f30:	79fb      	ldrb	r3, [r7, #7]
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	3301      	adds	r3, #1
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f000 faa5 	bl	800348c <WIZCHIP_READ>
 8002f42:	4603      	mov	r3, r0
 8002f44:	f003 0308 	and.w	r3, r3, #8
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00c      	beq.n	8002f66 <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8002f4c:	79fb      	ldrb	r3, [r7, #7]
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	3301      	adds	r3, #1
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002f58:	2108      	movs	r1, #8
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 fae2 	bl	8003524 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 8002f60:	f06f 030c 	mvn.w	r3, #12
 8002f64:	e01b      	b.n	8002f9e <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 8002f66:	79fb      	ldrb	r3, [r7, #7]
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002f72:	4618      	mov	r0, r3
 8002f74:	f000 fa8a 	bl	800348c <WIZCHIP_READ>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d102      	bne.n	8002f84 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 8002f7e:	f06f 0303 	mvn.w	r3, #3
 8002f82:	e00c      	b.n	8002f9e <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8002f84:	79fb      	ldrb	r3, [r7, #7]
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	3301      	adds	r3, #1
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002f90:	4618      	mov	r0, r3
 8002f92:	f000 fa7b 	bl	800348c <WIZCHIP_READ>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b17      	cmp	r3, #23
 8002f9a:	d1c9      	bne.n	8002f30 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 8002f9c:	2301      	movs	r3, #1
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	2000011c 	.word	0x2000011c

08002fac <disconnect>:

int8_t disconnect(uint8_t sn)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8002fb6:	79fb      	ldrb	r3, [r7, #7]
 8002fb8:	2b08      	cmp	r3, #8
 8002fba:	d902      	bls.n	8002fc2 <disconnect+0x16>
 8002fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc0:	e062      	b.n	8003088 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002fc2:	79fb      	ldrb	r3, [r7, #7]
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 fa5e 	bl	800348c <WIZCHIP_READ>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d002      	beq.n	8002fe0 <disconnect+0x34>
 8002fda:	f06f 0304 	mvn.w	r3, #4
 8002fde:	e053      	b.n	8003088 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8002fe0:	79fb      	ldrb	r3, [r7, #7]
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002fec:	2108      	movs	r1, #8
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f000 fa98 	bl	8003524 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8002ff4:	bf00      	nop
 8002ff6:	79fb      	ldrb	r3, [r7, #7]
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003002:	4618      	mov	r0, r3
 8003004:	f000 fa42 	bl	800348c <WIZCHIP_READ>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1f3      	bne.n	8002ff6 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 800300e:	79fb      	ldrb	r3, [r7, #7]
 8003010:	2201      	movs	r2, #1
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	b21b      	sxth	r3, r3
 8003018:	43db      	mvns	r3, r3
 800301a:	b21a      	sxth	r2, r3
 800301c:	4b1c      	ldr	r3, [pc, #112]	; (8003090 <disconnect+0xe4>)
 800301e:	881b      	ldrh	r3, [r3, #0]
 8003020:	b21b      	sxth	r3, r3
 8003022:	4013      	ands	r3, r2
 8003024:	b21b      	sxth	r3, r3
 8003026:	b29a      	uxth	r2, r3
 8003028:	4b19      	ldr	r3, [pc, #100]	; (8003090 <disconnect+0xe4>)
 800302a:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 800302c:	4b19      	ldr	r3, [pc, #100]	; (8003094 <disconnect+0xe8>)
 800302e:	881b      	ldrh	r3, [r3, #0]
 8003030:	461a      	mov	r2, r3
 8003032:	79fb      	ldrb	r3, [r7, #7]
 8003034:	fa42 f303 	asr.w	r3, r2, r3
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b00      	cmp	r3, #0
 800303e:	d016      	beq.n	800306e <disconnect+0xc2>
 8003040:	2300      	movs	r3, #0
 8003042:	e021      	b.n	8003088 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8003044:	79fb      	ldrb	r3, [r7, #7]
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	3301      	adds	r3, #1
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003050:	4618      	mov	r0, r3
 8003052:	f000 fa1b 	bl	800348c <WIZCHIP_READ>
 8003056:	4603      	mov	r3, r0
 8003058:	f003 0308 	and.w	r3, r3, #8
 800305c:	2b00      	cmp	r3, #0
 800305e:	d006      	beq.n	800306e <disconnect+0xc2>
	   {
	      close(sn);
 8003060:	79fb      	ldrb	r3, [r7, #7]
 8003062:	4618      	mov	r0, r3
 8003064:	f7ff fdfe 	bl	8002c64 <close>
	      return SOCKERR_TIMEOUT;
 8003068:	f06f 030c 	mvn.w	r3, #12
 800306c:	e00c      	b.n	8003088 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 800306e:	79fb      	ldrb	r3, [r7, #7]
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	3301      	adds	r3, #1
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800307a:	4618      	mov	r0, r3
 800307c:	f000 fa06 	bl	800348c <WIZCHIP_READ>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1de      	bne.n	8003044 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 8003086:	2301      	movs	r3, #1
}
 8003088:	4618      	mov	r0, r3
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	2000011e 	.word	0x2000011e
 8003094:	2000011c 	.word	0x2000011c

08003098 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	4603      	mov	r3, r0
 80030a0:	6039      	str	r1, [r7, #0]
 80030a2:	71fb      	strb	r3, [r7, #7]
 80030a4:	4613      	mov	r3, r2
 80030a6:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 80030a8:	2300      	movs	r3, #0
 80030aa:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 80030ac:	2300      	movs	r3, #0
 80030ae:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 80030b0:	79fb      	ldrb	r3, [r7, #7]
 80030b2:	2b08      	cmp	r3, #8
 80030b4:	d902      	bls.n	80030bc <send+0x24>
 80030b6:	f04f 33ff 	mov.w	r3, #4294967295
 80030ba:	e0de      	b.n	800327a <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80030bc:	79fb      	ldrb	r3, [r7, #7]
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	3301      	adds	r3, #1
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	4618      	mov	r0, r3
 80030c6:	f000 f9e1 	bl	800348c <WIZCHIP_READ>
 80030ca:	4603      	mov	r3, r0
 80030cc:	f003 030f 	and.w	r3, r3, #15
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d002      	beq.n	80030da <send+0x42>
 80030d4:	f06f 0304 	mvn.w	r3, #4
 80030d8:	e0cf      	b.n	800327a <send+0x1e2>
   CHECK_SOCKDATA();
 80030da:	88bb      	ldrh	r3, [r7, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d102      	bne.n	80030e6 <send+0x4e>
 80030e0:	f06f 030d 	mvn.w	r3, #13
 80030e4:	e0c9      	b.n	800327a <send+0x1e2>
   tmp = getSn_SR(sn);
 80030e6:	79fb      	ldrb	r3, [r7, #7]
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	3301      	adds	r3, #1
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 f9ca 	bl	800348c <WIZCHIP_READ>
 80030f8:	4603      	mov	r3, r0
 80030fa:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 80030fc:	7bfb      	ldrb	r3, [r7, #15]
 80030fe:	2b17      	cmp	r3, #23
 8003100:	d005      	beq.n	800310e <send+0x76>
 8003102:	7bfb      	ldrb	r3, [r7, #15]
 8003104:	2b1c      	cmp	r3, #28
 8003106:	d002      	beq.n	800310e <send+0x76>
 8003108:	f06f 0306 	mvn.w	r3, #6
 800310c:	e0b5      	b.n	800327a <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 800310e:	4b5d      	ldr	r3, [pc, #372]	; (8003284 <send+0x1ec>)
 8003110:	881b      	ldrh	r3, [r3, #0]
 8003112:	461a      	mov	r2, r3
 8003114:	79fb      	ldrb	r3, [r7, #7]
 8003116:	fa42 f303 	asr.w	r3, r2, r3
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d039      	beq.n	8003196 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8003122:	79fb      	ldrb	r3, [r7, #7]
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	3301      	adds	r3, #1
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800312e:	4618      	mov	r0, r3
 8003130:	f000 f9ac 	bl	800348c <WIZCHIP_READ>
 8003134:	4603      	mov	r3, r0
 8003136:	f003 031f 	and.w	r3, r3, #31
 800313a:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 800313c:	7bfb      	ldrb	r3, [r7, #15]
 800313e:	f003 0310 	and.w	r3, r3, #16
 8003142:	2b00      	cmp	r3, #0
 8003144:	d019      	beq.n	800317a <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8003146:	79fb      	ldrb	r3, [r7, #7]
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	3301      	adds	r3, #1
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003152:	2110      	movs	r1, #16
 8003154:	4618      	mov	r0, r3
 8003156:	f000 f9e5 	bl	8003524 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 800315a:	79fb      	ldrb	r3, [r7, #7]
 800315c:	2201      	movs	r2, #1
 800315e:	fa02 f303 	lsl.w	r3, r2, r3
 8003162:	b21b      	sxth	r3, r3
 8003164:	43db      	mvns	r3, r3
 8003166:	b21a      	sxth	r2, r3
 8003168:	4b46      	ldr	r3, [pc, #280]	; (8003284 <send+0x1ec>)
 800316a:	881b      	ldrh	r3, [r3, #0]
 800316c:	b21b      	sxth	r3, r3
 800316e:	4013      	ands	r3, r2
 8003170:	b21b      	sxth	r3, r3
 8003172:	b29a      	uxth	r2, r3
 8003174:	4b43      	ldr	r3, [pc, #268]	; (8003284 <send+0x1ec>)
 8003176:	801a      	strh	r2, [r3, #0]
 8003178:	e00d      	b.n	8003196 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 800317a:	7bfb      	ldrb	r3, [r7, #15]
 800317c:	f003 0308 	and.w	r3, r3, #8
 8003180:	2b00      	cmp	r3, #0
 8003182:	d006      	beq.n	8003192 <send+0xfa>
      {
         close(sn);
 8003184:	79fb      	ldrb	r3, [r7, #7]
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff fd6c 	bl	8002c64 <close>
         return SOCKERR_TIMEOUT;
 800318c:	f06f 030c 	mvn.w	r3, #12
 8003190:	e073      	b.n	800327a <send+0x1e2>
      }
      else return SOCK_BUSY;
 8003192:	2300      	movs	r3, #0
 8003194:	e071      	b.n	800327a <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 8003196:	79fb      	ldrb	r3, [r7, #7]
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	3301      	adds	r3, #1
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80031a2:	4618      	mov	r0, r3
 80031a4:	f000 f972 	bl	800348c <WIZCHIP_READ>
 80031a8:	4603      	mov	r3, r0
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	029b      	lsls	r3, r3, #10
 80031ae:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80031b0:	88ba      	ldrh	r2, [r7, #4]
 80031b2:	89bb      	ldrh	r3, [r7, #12]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d901      	bls.n	80031bc <send+0x124>
 80031b8:	89bb      	ldrh	r3, [r7, #12]
 80031ba:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80031bc:	79fb      	ldrb	r3, [r7, #7]
 80031be:	4618      	mov	r0, r3
 80031c0:	f000 fabe 	bl	8003740 <getSn_TX_FSR>
 80031c4:	4603      	mov	r3, r0
 80031c6:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 80031c8:	79fb      	ldrb	r3, [r7, #7]
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	3301      	adds	r3, #1
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80031d4:	4618      	mov	r0, r3
 80031d6:	f000 f959 	bl	800348c <WIZCHIP_READ>
 80031da:	4603      	mov	r3, r0
 80031dc:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 80031de:	7bfb      	ldrb	r3, [r7, #15]
 80031e0:	2b17      	cmp	r3, #23
 80031e2:	d009      	beq.n	80031f8 <send+0x160>
 80031e4:	7bfb      	ldrb	r3, [r7, #15]
 80031e6:	2b1c      	cmp	r3, #28
 80031e8:	d006      	beq.n	80031f8 <send+0x160>
      {
         close(sn);
 80031ea:	79fb      	ldrb	r3, [r7, #7]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff fd39 	bl	8002c64 <close>
         return SOCKERR_SOCKSTATUS;
 80031f2:	f06f 0306 	mvn.w	r3, #6
 80031f6:	e040      	b.n	800327a <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80031f8:	4b23      	ldr	r3, [pc, #140]	; (8003288 <send+0x1f0>)
 80031fa:	881b      	ldrh	r3, [r3, #0]
 80031fc:	461a      	mov	r2, r3
 80031fe:	79fb      	ldrb	r3, [r7, #7]
 8003200:	fa42 f303 	asr.w	r3, r2, r3
 8003204:	f003 0301 	and.w	r3, r3, #1
 8003208:	2b00      	cmp	r3, #0
 800320a:	d005      	beq.n	8003218 <send+0x180>
 800320c:	88ba      	ldrh	r2, [r7, #4]
 800320e:	89bb      	ldrh	r3, [r7, #12]
 8003210:	429a      	cmp	r2, r3
 8003212:	d901      	bls.n	8003218 <send+0x180>
 8003214:	2300      	movs	r3, #0
 8003216:	e030      	b.n	800327a <send+0x1e2>
      if(len <= freesize) break;
 8003218:	88ba      	ldrh	r2, [r7, #4]
 800321a:	89bb      	ldrh	r3, [r7, #12]
 800321c:	429a      	cmp	r2, r3
 800321e:	d900      	bls.n	8003222 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8003220:	e7cc      	b.n	80031bc <send+0x124>
      if(len <= freesize) break;
 8003222:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8003224:	88ba      	ldrh	r2, [r7, #4]
 8003226:	79fb      	ldrb	r3, [r7, #7]
 8003228:	6839      	ldr	r1, [r7, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f000 fb1e 	bl	800386c <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8003230:	79fb      	ldrb	r3, [r7, #7]
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	3301      	adds	r3, #1
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800323c:	2120      	movs	r1, #32
 800323e:	4618      	mov	r0, r3
 8003240:	f000 f970 	bl	8003524 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8003244:	bf00      	nop
 8003246:	79fb      	ldrb	r3, [r7, #7]
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	3301      	adds	r3, #1
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003252:	4618      	mov	r0, r3
 8003254:	f000 f91a 	bl	800348c <WIZCHIP_READ>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f3      	bne.n	8003246 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 800325e:	79fb      	ldrb	r3, [r7, #7]
 8003260:	2201      	movs	r2, #1
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	b21a      	sxth	r2, r3
 8003268:	4b06      	ldr	r3, [pc, #24]	; (8003284 <send+0x1ec>)
 800326a:	881b      	ldrh	r3, [r3, #0]
 800326c:	b21b      	sxth	r3, r3
 800326e:	4313      	orrs	r3, r2
 8003270:	b21b      	sxth	r3, r3
 8003272:	b29a      	uxth	r2, r3
 8003274:	4b03      	ldr	r3, [pc, #12]	; (8003284 <send+0x1ec>)
 8003276:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8003278:	88bb      	ldrh	r3, [r7, #4]
}
 800327a:	4618      	mov	r0, r3
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	2000011e 	.word	0x2000011e
 8003288:	2000011c 	.word	0x2000011c

0800328c <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 800328c:	b590      	push	{r4, r7, lr}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	4603      	mov	r3, r0
 8003294:	6039      	str	r1, [r7, #0]
 8003296:	71fb      	strb	r3, [r7, #7]
 8003298:	4613      	mov	r3, r2
 800329a:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 800329c:	2300      	movs	r3, #0
 800329e:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 80032a0:	2300      	movs	r3, #0
 80032a2:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 80032a4:	79fb      	ldrb	r3, [r7, #7]
 80032a6:	2b08      	cmp	r3, #8
 80032a8:	d902      	bls.n	80032b0 <recv+0x24>
 80032aa:	f04f 33ff 	mov.w	r3, #4294967295
 80032ae:	e09c      	b.n	80033ea <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80032b0:	79fb      	ldrb	r3, [r7, #7]
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	3301      	adds	r3, #1
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	4618      	mov	r0, r3
 80032ba:	f000 f8e7 	bl	800348c <WIZCHIP_READ>
 80032be:	4603      	mov	r3, r0
 80032c0:	f003 030f 	and.w	r3, r3, #15
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d002      	beq.n	80032ce <recv+0x42>
 80032c8:	f06f 0304 	mvn.w	r3, #4
 80032cc:	e08d      	b.n	80033ea <recv+0x15e>
   CHECK_SOCKDATA();
 80032ce:	88bb      	ldrh	r3, [r7, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d102      	bne.n	80032da <recv+0x4e>
 80032d4:	f06f 030d 	mvn.w	r3, #13
 80032d8:	e087      	b.n	80033ea <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 80032da:	79fb      	ldrb	r3, [r7, #7]
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	3301      	adds	r3, #1
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 f8d0 	bl	800348c <WIZCHIP_READ>
 80032ec:	4603      	mov	r3, r0
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	029b      	lsls	r3, r3, #10
 80032f2:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 80032f4:	89ba      	ldrh	r2, [r7, #12]
 80032f6:	88bb      	ldrh	r3, [r7, #4]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d201      	bcs.n	8003300 <recv+0x74>
 80032fc:	89bb      	ldrh	r3, [r7, #12]
 80032fe:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8003300:	79fb      	ldrb	r3, [r7, #7]
 8003302:	4618      	mov	r0, r3
 8003304:	f000 fa67 	bl	80037d6 <getSn_RX_RSR>
 8003308:	4603      	mov	r3, r0
 800330a:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 800330c:	79fb      	ldrb	r3, [r7, #7]
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	3301      	adds	r3, #1
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003318:	4618      	mov	r0, r3
 800331a:	f000 f8b7 	bl	800348c <WIZCHIP_READ>
 800331e:	4603      	mov	r3, r0
 8003320:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8003322:	7bfb      	ldrb	r3, [r7, #15]
 8003324:	2b17      	cmp	r3, #23
 8003326:	d026      	beq.n	8003376 <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8003328:	7bfb      	ldrb	r3, [r7, #15]
 800332a:	2b1c      	cmp	r3, #28
 800332c:	d11c      	bne.n	8003368 <recv+0xdc>
            {
               if(recvsize != 0) break;
 800332e:	89bb      	ldrh	r3, [r7, #12]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d133      	bne.n	800339c <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8003334:	79fb      	ldrb	r3, [r7, #7]
 8003336:	4618      	mov	r0, r3
 8003338:	f000 fa02 	bl	8003740 <getSn_TX_FSR>
 800333c:	4603      	mov	r3, r0
 800333e:	461c      	mov	r4, r3
 8003340:	79fb      	ldrb	r3, [r7, #7]
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	3301      	adds	r3, #1
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800334c:	4618      	mov	r0, r3
 800334e:	f000 f89d 	bl	800348c <WIZCHIP_READ>
 8003352:	4603      	mov	r3, r0
 8003354:	029b      	lsls	r3, r3, #10
 8003356:	429c      	cmp	r4, r3
 8003358:	d10d      	bne.n	8003376 <recv+0xea>
               {
                  close(sn);
 800335a:	79fb      	ldrb	r3, [r7, #7]
 800335c:	4618      	mov	r0, r3
 800335e:	f7ff fc81 	bl	8002c64 <close>
                  return SOCKERR_SOCKSTATUS;
 8003362:	f06f 0306 	mvn.w	r3, #6
 8003366:	e040      	b.n	80033ea <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 8003368:	79fb      	ldrb	r3, [r7, #7]
 800336a:	4618      	mov	r0, r3
 800336c:	f7ff fc7a 	bl	8002c64 <close>
               return SOCKERR_SOCKSTATUS;
 8003370:	f06f 0306 	mvn.w	r3, #6
 8003374:	e039      	b.n	80033ea <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8003376:	4b1f      	ldr	r3, [pc, #124]	; (80033f4 <recv+0x168>)
 8003378:	881b      	ldrh	r3, [r3, #0]
 800337a:	461a      	mov	r2, r3
 800337c:	79fb      	ldrb	r3, [r7, #7]
 800337e:	fa42 f303 	asr.w	r3, r2, r3
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d004      	beq.n	8003394 <recv+0x108>
 800338a:	89bb      	ldrh	r3, [r7, #12]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d101      	bne.n	8003394 <recv+0x108>
 8003390:	2300      	movs	r3, #0
 8003392:	e02a      	b.n	80033ea <recv+0x15e>
         if(recvsize != 0) break;
 8003394:	89bb      	ldrh	r3, [r7, #12]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d102      	bne.n	80033a0 <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 800339a:	e7b1      	b.n	8003300 <recv+0x74>
               if(recvsize != 0) break;
 800339c:	bf00      	nop
 800339e:	e000      	b.n	80033a2 <recv+0x116>
         if(recvsize != 0) break;
 80033a0:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 80033a2:	89ba      	ldrh	r2, [r7, #12]
 80033a4:	88bb      	ldrh	r3, [r7, #4]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d201      	bcs.n	80033ae <recv+0x122>
 80033aa:	89bb      	ldrh	r3, [r7, #12]
 80033ac:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 80033ae:	88ba      	ldrh	r2, [r7, #4]
 80033b0:	79fb      	ldrb	r3, [r7, #7]
 80033b2:	6839      	ldr	r1, [r7, #0]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f000 fab5 	bl	8003924 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 80033ba:	79fb      	ldrb	r3, [r7, #7]
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	3301      	adds	r3, #1
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80033c6:	2140      	movs	r1, #64	; 0x40
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 f8ab 	bl	8003524 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80033ce:	bf00      	nop
 80033d0:	79fb      	ldrb	r3, [r7, #7]
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	3301      	adds	r3, #1
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80033dc:	4618      	mov	r0, r3
 80033de:	f000 f855 	bl	800348c <WIZCHIP_READ>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1f3      	bne.n	80033d0 <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80033e8:	88bb      	ldrh	r3, [r7, #4]
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3714      	adds	r7, #20
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd90      	pop	{r4, r7, pc}
 80033f2:	bf00      	nop
 80033f4:	2000011c 	.word	0x2000011c

080033f8 <MX_UART8_Init>:
#include "uart.h"

UART_HandleTypeDef huart8;

void MX_UART8_Init(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
	huart8.Instance = UART8;
 80033fc:	4b18      	ldr	r3, [pc, #96]	; (8003460 <MX_UART8_Init+0x68>)
 80033fe:	4a19      	ldr	r2, [pc, #100]	; (8003464 <MX_UART8_Init+0x6c>)
 8003400:	601a      	str	r2, [r3, #0]
	huart8.Init.BaudRate = 115200;
 8003402:	4b17      	ldr	r3, [pc, #92]	; (8003460 <MX_UART8_Init+0x68>)
 8003404:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003408:	605a      	str	r2, [r3, #4]
	huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800340a:	4b15      	ldr	r3, [pc, #84]	; (8003460 <MX_UART8_Init+0x68>)
 800340c:	2200      	movs	r2, #0
 800340e:	609a      	str	r2, [r3, #8]
	huart8.Init.StopBits = UART_STOPBITS_1;
 8003410:	4b13      	ldr	r3, [pc, #76]	; (8003460 <MX_UART8_Init+0x68>)
 8003412:	2200      	movs	r2, #0
 8003414:	60da      	str	r2, [r3, #12]
	huart8.Init.Parity = UART_PARITY_NONE;
 8003416:	4b12      	ldr	r3, [pc, #72]	; (8003460 <MX_UART8_Init+0x68>)
 8003418:	2200      	movs	r2, #0
 800341a:	611a      	str	r2, [r3, #16]
	huart8.Init.Mode = UART_MODE_TX_RX;
 800341c:	4b10      	ldr	r3, [pc, #64]	; (8003460 <MX_UART8_Init+0x68>)
 800341e:	220c      	movs	r2, #12
 8003420:	615a      	str	r2, [r3, #20]
	huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003422:	4b0f      	ldr	r3, [pc, #60]	; (8003460 <MX_UART8_Init+0x68>)
 8003424:	2200      	movs	r2, #0
 8003426:	619a      	str	r2, [r3, #24]
	huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8003428:	4b0d      	ldr	r3, [pc, #52]	; (8003460 <MX_UART8_Init+0x68>)
 800342a:	2200      	movs	r2, #0
 800342c:	61da      	str	r2, [r3, #28]
	huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800342e:	4b0c      	ldr	r3, [pc, #48]	; (8003460 <MX_UART8_Init+0x68>)
 8003430:	2200      	movs	r2, #0
 8003432:	621a      	str	r2, [r3, #32]
	huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003434:	4b0a      	ldr	r3, [pc, #40]	; (8003460 <MX_UART8_Init+0x68>)
 8003436:	2200      	movs	r2, #0
 8003438:	625a      	str	r2, [r3, #36]	; 0x24
	huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800343a:	4b09      	ldr	r3, [pc, #36]	; (8003460 <MX_UART8_Init+0x68>)
 800343c:	2200      	movs	r2, #0
 800343e:	629a      	str	r2, [r3, #40]	; 0x28

	if (HAL_UART_Init(&huart8) != HAL_OK)
 8003440:	4807      	ldr	r0, [pc, #28]	; (8003460 <MX_UART8_Init+0x68>)
 8003442:	f006 fb98 	bl	8009b76 <HAL_UART_Init>
	{
		//Error_Handler();
	}

	if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003446:	2100      	movs	r1, #0
 8003448:	4805      	ldr	r0, [pc, #20]	; (8003460 <MX_UART8_Init+0x68>)
 800344a:	f007 fe58 	bl	800b0fe <HAL_UARTEx_SetTxFifoThreshold>
	{
		//Error_Handler();
	}

	if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800344e:	2100      	movs	r1, #0
 8003450:	4803      	ldr	r0, [pc, #12]	; (8003460 <MX_UART8_Init+0x68>)
 8003452:	f007 fe92 	bl	800b17a <HAL_UARTEx_SetRxFifoThreshold>
	{
		//Error_Handler();
	}

	if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8003456:	4802      	ldr	r0, [pc, #8]	; (8003460 <MX_UART8_Init+0x68>)
 8003458:	f007 fe18 	bl	800b08c <HAL_UARTEx_DisableFifoMode>
	{
		//Error_Handler();
	}
}
 800345c:	bf00      	nop
 800345e:	bd80      	pop	{r7, pc}
 8003460:	200002f8 	.word	0x200002f8
 8003464:	40007c00 	.word	0x40007c00

08003468 <uart8_receive>:

uint8_t uart8_receive()
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
	HAL_UART_Receive(&huart8, (uint8_t*)&headerUART8, 1, 0xFFFFFFFF);
 800346c:	f04f 33ff 	mov.w	r3, #4294967295
 8003470:	2201      	movs	r2, #1
 8003472:	4904      	ldr	r1, [pc, #16]	; (8003484 <uart8_receive+0x1c>)
 8003474:	4804      	ldr	r0, [pc, #16]	; (8003488 <uart8_receive+0x20>)
 8003476:	f006 fc64 	bl	8009d42 <HAL_UART_Receive>
	return headerUART8;
 800347a:	4b02      	ldr	r3, [pc, #8]	; (8003484 <uart8_receive+0x1c>)
 800347c:	781b      	ldrb	r3, [r3, #0]
}
 800347e:	4618      	mov	r0, r3
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	2000028c 	.word	0x2000028c
 8003488:	200002f8 	.word	0x200002f8

0800348c <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8003494:	4b22      	ldr	r3, [pc, #136]	; (8003520 <WIZCHIP_READ+0x94>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	4798      	blx	r3
   WIZCHIP.CS._select();
 800349a:	4b21      	ldr	r3, [pc, #132]	; (8003520 <WIZCHIP_READ+0x94>)
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80034a0:	4b1f      	ldr	r3, [pc, #124]	; (8003520 <WIZCHIP_READ+0x94>)
 80034a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d003      	beq.n	80034b0 <WIZCHIP_READ+0x24>
 80034a8:	4b1d      	ldr	r3, [pc, #116]	; (8003520 <WIZCHIP_READ+0x94>)
 80034aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d114      	bne.n	80034da <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80034b0:	4b1b      	ldr	r3, [pc, #108]	; (8003520 <WIZCHIP_READ+0x94>)
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	0c12      	lsrs	r2, r2, #16
 80034b8:	b2d2      	uxtb	r2, r2
 80034ba:	4610      	mov	r0, r2
 80034bc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80034be:	4b18      	ldr	r3, [pc, #96]	; (8003520 <WIZCHIP_READ+0x94>)
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	0a12      	lsrs	r2, r2, #8
 80034c6:	b2d2      	uxtb	r2, r2
 80034c8:	4610      	mov	r0, r2
 80034ca:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80034cc:	4b14      	ldr	r3, [pc, #80]	; (8003520 <WIZCHIP_READ+0x94>)
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	b2d2      	uxtb	r2, r2
 80034d4:	4610      	mov	r0, r2
 80034d6:	4798      	blx	r3
 80034d8:	e011      	b.n	80034fe <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	0c1b      	lsrs	r3, r3, #16
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	0a1b      	lsrs	r3, r3, #8
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80034f0:	4b0b      	ldr	r3, [pc, #44]	; (8003520 <WIZCHIP_READ+0x94>)
 80034f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f4:	f107 020c 	add.w	r2, r7, #12
 80034f8:	2103      	movs	r1, #3
 80034fa:	4610      	mov	r0, r2
 80034fc:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80034fe:	4b08      	ldr	r3, [pc, #32]	; (8003520 <WIZCHIP_READ+0x94>)
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	4798      	blx	r3
 8003504:	4603      	mov	r3, r0
 8003506:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8003508:	4b05      	ldr	r3, [pc, #20]	; (8003520 <WIZCHIP_READ+0x94>)
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800350e:	4b04      	ldr	r3, [pc, #16]	; (8003520 <WIZCHIP_READ+0x94>)
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	4798      	blx	r3
   return ret;
 8003514:	7bfb      	ldrb	r3, [r7, #15]
}
 8003516:	4618      	mov	r0, r3
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	20000044 	.word	0x20000044

08003524 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	460b      	mov	r3, r1
 800352e:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8003530:	4b22      	ldr	r3, [pc, #136]	; (80035bc <WIZCHIP_WRITE+0x98>)
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003536:	4b21      	ldr	r3, [pc, #132]	; (80035bc <WIZCHIP_WRITE+0x98>)
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f043 0304 	orr.w	r3, r3, #4
 8003542:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003544:	4b1d      	ldr	r3, [pc, #116]	; (80035bc <WIZCHIP_WRITE+0x98>)
 8003546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003548:	2b00      	cmp	r3, #0
 800354a:	d119      	bne.n	8003580 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800354c:	4b1b      	ldr	r3, [pc, #108]	; (80035bc <WIZCHIP_WRITE+0x98>)
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	0c12      	lsrs	r2, r2, #16
 8003554:	b2d2      	uxtb	r2, r2
 8003556:	4610      	mov	r0, r2
 8003558:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800355a:	4b18      	ldr	r3, [pc, #96]	; (80035bc <WIZCHIP_WRITE+0x98>)
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	0a12      	lsrs	r2, r2, #8
 8003562:	b2d2      	uxtb	r2, r2
 8003564:	4610      	mov	r0, r2
 8003566:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003568:	4b14      	ldr	r3, [pc, #80]	; (80035bc <WIZCHIP_WRITE+0x98>)
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	4610      	mov	r0, r2
 8003572:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8003574:	4b11      	ldr	r3, [pc, #68]	; (80035bc <WIZCHIP_WRITE+0x98>)
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	78fa      	ldrb	r2, [r7, #3]
 800357a:	4610      	mov	r0, r2
 800357c:	4798      	blx	r3
 800357e:	e013      	b.n	80035a8 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	0c1b      	lsrs	r3, r3, #16
 8003584:	b2db      	uxtb	r3, r3
 8003586:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	0a1b      	lsrs	r3, r3, #8
 800358c:	b2db      	uxtb	r3, r3
 800358e:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	b2db      	uxtb	r3, r3
 8003594:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8003596:	78fb      	ldrb	r3, [r7, #3]
 8003598:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 800359a:	4b08      	ldr	r3, [pc, #32]	; (80035bc <WIZCHIP_WRITE+0x98>)
 800359c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359e:	f107 020c 	add.w	r2, r7, #12
 80035a2:	2104      	movs	r1, #4
 80035a4:	4610      	mov	r0, r2
 80035a6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80035a8:	4b04      	ldr	r3, [pc, #16]	; (80035bc <WIZCHIP_WRITE+0x98>)
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80035ae:	4b03      	ldr	r3, [pc, #12]	; (80035bc <WIZCHIP_WRITE+0x98>)
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	4798      	blx	r3
}
 80035b4:	bf00      	nop
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	20000044 	.word	0x20000044

080035c0 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80035c0:	b590      	push	{r4, r7, lr}
 80035c2:	b087      	sub	sp, #28
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	4613      	mov	r3, r2
 80035cc:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80035ce:	4b2b      	ldr	r3, [pc, #172]	; (800367c <WIZCHIP_READ_BUF+0xbc>)
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	4798      	blx	r3
   WIZCHIP.CS._select();
 80035d4:	4b29      	ldr	r3, [pc, #164]	; (800367c <WIZCHIP_READ_BUF+0xbc>)
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80035da:	4b28      	ldr	r3, [pc, #160]	; (800367c <WIZCHIP_READ_BUF+0xbc>)
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <WIZCHIP_READ_BUF+0x2a>
 80035e2:	4b26      	ldr	r3, [pc, #152]	; (800367c <WIZCHIP_READ_BUF+0xbc>)
 80035e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d126      	bne.n	8003638 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80035ea:	4b24      	ldr	r3, [pc, #144]	; (800367c <WIZCHIP_READ_BUF+0xbc>)
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	0c12      	lsrs	r2, r2, #16
 80035f2:	b2d2      	uxtb	r2, r2
 80035f4:	4610      	mov	r0, r2
 80035f6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80035f8:	4b20      	ldr	r3, [pc, #128]	; (800367c <WIZCHIP_READ_BUF+0xbc>)
 80035fa:	6a1b      	ldr	r3, [r3, #32]
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	0a12      	lsrs	r2, r2, #8
 8003600:	b2d2      	uxtb	r2, r2
 8003602:	4610      	mov	r0, r2
 8003604:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003606:	4b1d      	ldr	r3, [pc, #116]	; (800367c <WIZCHIP_READ_BUF+0xbc>)
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	b2d2      	uxtb	r2, r2
 800360e:	4610      	mov	r0, r2
 8003610:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8003612:	2300      	movs	r3, #0
 8003614:	82fb      	strh	r3, [r7, #22]
 8003616:	e00a      	b.n	800362e <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8003618:	4b18      	ldr	r3, [pc, #96]	; (800367c <WIZCHIP_READ_BUF+0xbc>)
 800361a:	69db      	ldr	r3, [r3, #28]
 800361c:	8afa      	ldrh	r2, [r7, #22]
 800361e:	68b9      	ldr	r1, [r7, #8]
 8003620:	188c      	adds	r4, r1, r2
 8003622:	4798      	blx	r3
 8003624:	4603      	mov	r3, r0
 8003626:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8003628:	8afb      	ldrh	r3, [r7, #22]
 800362a:	3301      	adds	r3, #1
 800362c:	82fb      	strh	r3, [r7, #22]
 800362e:	8afa      	ldrh	r2, [r7, #22]
 8003630:	88fb      	ldrh	r3, [r7, #6]
 8003632:	429a      	cmp	r2, r3
 8003634:	d3f0      	bcc.n	8003618 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003636:	e017      	b.n	8003668 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	0c1b      	lsrs	r3, r3, #16
 800363c:	b2db      	uxtb	r3, r3
 800363e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	0a1b      	lsrs	r3, r3, #8
 8003644:	b2db      	uxtb	r3, r3
 8003646:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	b2db      	uxtb	r3, r3
 800364c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800364e:	4b0b      	ldr	r3, [pc, #44]	; (800367c <WIZCHIP_READ_BUF+0xbc>)
 8003650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003652:	f107 0210 	add.w	r2, r7, #16
 8003656:	2103      	movs	r1, #3
 8003658:	4610      	mov	r0, r2
 800365a:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 800365c:	4b07      	ldr	r3, [pc, #28]	; (800367c <WIZCHIP_READ_BUF+0xbc>)
 800365e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003660:	88fa      	ldrh	r2, [r7, #6]
 8003662:	4611      	mov	r1, r2
 8003664:	68b8      	ldr	r0, [r7, #8]
 8003666:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8003668:	4b04      	ldr	r3, [pc, #16]	; (800367c <WIZCHIP_READ_BUF+0xbc>)
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800366e:	4b03      	ldr	r3, [pc, #12]	; (800367c <WIZCHIP_READ_BUF+0xbc>)
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	4798      	blx	r3
}
 8003674:	bf00      	nop
 8003676:	371c      	adds	r7, #28
 8003678:	46bd      	mov	sp, r7
 800367a:	bd90      	pop	{r4, r7, pc}
 800367c:	20000044 	.word	0x20000044

08003680 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	4613      	mov	r3, r2
 800368c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800368e:	4b2b      	ldr	r3, [pc, #172]	; (800373c <WIZCHIP_WRITE_BUF+0xbc>)
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003694:	4b29      	ldr	r3, [pc, #164]	; (800373c <WIZCHIP_WRITE_BUF+0xbc>)
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f043 0304 	orr.w	r3, r3, #4
 80036a0:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80036a2:	4b26      	ldr	r3, [pc, #152]	; (800373c <WIZCHIP_WRITE_BUF+0xbc>)
 80036a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d126      	bne.n	80036f8 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80036aa:	4b24      	ldr	r3, [pc, #144]	; (800373c <WIZCHIP_WRITE_BUF+0xbc>)
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	0c12      	lsrs	r2, r2, #16
 80036b2:	b2d2      	uxtb	r2, r2
 80036b4:	4610      	mov	r0, r2
 80036b6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80036b8:	4b20      	ldr	r3, [pc, #128]	; (800373c <WIZCHIP_WRITE_BUF+0xbc>)
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	0a12      	lsrs	r2, r2, #8
 80036c0:	b2d2      	uxtb	r2, r2
 80036c2:	4610      	mov	r0, r2
 80036c4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80036c6:	4b1d      	ldr	r3, [pc, #116]	; (800373c <WIZCHIP_WRITE_BUF+0xbc>)
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	b2d2      	uxtb	r2, r2
 80036ce:	4610      	mov	r0, r2
 80036d0:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80036d2:	2300      	movs	r3, #0
 80036d4:	82fb      	strh	r3, [r7, #22]
 80036d6:	e00a      	b.n	80036ee <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80036d8:	4b18      	ldr	r3, [pc, #96]	; (800373c <WIZCHIP_WRITE_BUF+0xbc>)
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	8afa      	ldrh	r2, [r7, #22]
 80036de:	68b9      	ldr	r1, [r7, #8]
 80036e0:	440a      	add	r2, r1
 80036e2:	7812      	ldrb	r2, [r2, #0]
 80036e4:	4610      	mov	r0, r2
 80036e6:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80036e8:	8afb      	ldrh	r3, [r7, #22]
 80036ea:	3301      	adds	r3, #1
 80036ec:	82fb      	strh	r3, [r7, #22]
 80036ee:	8afa      	ldrh	r2, [r7, #22]
 80036f0:	88fb      	ldrh	r3, [r7, #6]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d3f0      	bcc.n	80036d8 <WIZCHIP_WRITE_BUF+0x58>
 80036f6:	e017      	b.n	8003728 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	0c1b      	lsrs	r3, r3, #16
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	0a1b      	lsrs	r3, r3, #8
 8003704:	b2db      	uxtb	r3, r3
 8003706:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	b2db      	uxtb	r3, r3
 800370c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800370e:	4b0b      	ldr	r3, [pc, #44]	; (800373c <WIZCHIP_WRITE_BUF+0xbc>)
 8003710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003712:	f107 0210 	add.w	r2, r7, #16
 8003716:	2103      	movs	r1, #3
 8003718:	4610      	mov	r0, r2
 800371a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 800371c:	4b07      	ldr	r3, [pc, #28]	; (800373c <WIZCHIP_WRITE_BUF+0xbc>)
 800371e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003720:	88fa      	ldrh	r2, [r7, #6]
 8003722:	4611      	mov	r1, r2
 8003724:	68b8      	ldr	r0, [r7, #8]
 8003726:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8003728:	4b04      	ldr	r3, [pc, #16]	; (800373c <WIZCHIP_WRITE_BUF+0xbc>)
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800372e:	4b03      	ldr	r3, [pc, #12]	; (800373c <WIZCHIP_WRITE_BUF+0xbc>)
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	4798      	blx	r3
}
 8003734:	bf00      	nop
 8003736:	3718      	adds	r7, #24
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	20000044 	.word	0x20000044

08003740 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8003740:	b590      	push	{r4, r7, lr}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	4603      	mov	r3, r0
 8003748:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800374a:	2300      	movs	r3, #0
 800374c:	81fb      	strh	r3, [r7, #14]
 800374e:	2300      	movs	r3, #0
 8003750:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8003752:	79fb      	ldrb	r3, [r7, #7]
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	3301      	adds	r3, #1
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800375e:	4618      	mov	r0, r3
 8003760:	f7ff fe94 	bl	800348c <WIZCHIP_READ>
 8003764:	4603      	mov	r3, r0
 8003766:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8003768:	89bb      	ldrh	r3, [r7, #12]
 800376a:	021b      	lsls	r3, r3, #8
 800376c:	b29c      	uxth	r4, r3
 800376e:	79fb      	ldrb	r3, [r7, #7]
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	3301      	adds	r3, #1
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800377a:	4618      	mov	r0, r3
 800377c:	f7ff fe86 	bl	800348c <WIZCHIP_READ>
 8003780:	4603      	mov	r3, r0
 8003782:	b29b      	uxth	r3, r3
 8003784:	4423      	add	r3, r4
 8003786:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8003788:	89bb      	ldrh	r3, [r7, #12]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d01a      	beq.n	80037c4 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 800378e:	79fb      	ldrb	r3, [r7, #7]
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	3301      	adds	r3, #1
 8003794:	00db      	lsls	r3, r3, #3
 8003796:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800379a:	4618      	mov	r0, r3
 800379c:	f7ff fe76 	bl	800348c <WIZCHIP_READ>
 80037a0:	4603      	mov	r3, r0
 80037a2:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80037a4:	89fb      	ldrh	r3, [r7, #14]
 80037a6:	021b      	lsls	r3, r3, #8
 80037a8:	b29c      	uxth	r4, r3
 80037aa:	79fb      	ldrb	r3, [r7, #7]
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	3301      	adds	r3, #1
 80037b0:	00db      	lsls	r3, r3, #3
 80037b2:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7ff fe68 	bl	800348c <WIZCHIP_READ>
 80037bc:	4603      	mov	r3, r0
 80037be:	b29b      	uxth	r3, r3
 80037c0:	4423      	add	r3, r4
 80037c2:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80037c4:	89fa      	ldrh	r2, [r7, #14]
 80037c6:	89bb      	ldrh	r3, [r7, #12]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d1c2      	bne.n	8003752 <getSn_TX_FSR+0x12>
   return val;
 80037cc:	89fb      	ldrh	r3, [r7, #14]
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3714      	adds	r7, #20
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd90      	pop	{r4, r7, pc}

080037d6 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80037d6:	b590      	push	{r4, r7, lr}
 80037d8:	b085      	sub	sp, #20
 80037da:	af00      	add	r7, sp, #0
 80037dc:	4603      	mov	r3, r0
 80037de:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80037e0:	2300      	movs	r3, #0
 80037e2:	81fb      	strh	r3, [r7, #14]
 80037e4:	2300      	movs	r3, #0
 80037e6:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80037e8:	79fb      	ldrb	r3, [r7, #7]
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	3301      	adds	r3, #1
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7ff fe49 	bl	800348c <WIZCHIP_READ>
 80037fa:	4603      	mov	r3, r0
 80037fc:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80037fe:	89bb      	ldrh	r3, [r7, #12]
 8003800:	021b      	lsls	r3, r3, #8
 8003802:	b29c      	uxth	r4, r3
 8003804:	79fb      	ldrb	r3, [r7, #7]
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	3301      	adds	r3, #1
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8003810:	4618      	mov	r0, r3
 8003812:	f7ff fe3b 	bl	800348c <WIZCHIP_READ>
 8003816:	4603      	mov	r3, r0
 8003818:	b29b      	uxth	r3, r3
 800381a:	4423      	add	r3, r4
 800381c:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800381e:	89bb      	ldrh	r3, [r7, #12]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d01a      	beq.n	800385a <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8003824:	79fb      	ldrb	r3, [r7, #7]
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	3301      	adds	r3, #1
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8003830:	4618      	mov	r0, r3
 8003832:	f7ff fe2b 	bl	800348c <WIZCHIP_READ>
 8003836:	4603      	mov	r3, r0
 8003838:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800383a:	89fb      	ldrh	r3, [r7, #14]
 800383c:	021b      	lsls	r3, r3, #8
 800383e:	b29c      	uxth	r4, r3
 8003840:	79fb      	ldrb	r3, [r7, #7]
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	3301      	adds	r3, #1
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800384c:	4618      	mov	r0, r3
 800384e:	f7ff fe1d 	bl	800348c <WIZCHIP_READ>
 8003852:	4603      	mov	r3, r0
 8003854:	b29b      	uxth	r3, r3
 8003856:	4423      	add	r3, r4
 8003858:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800385a:	89fa      	ldrh	r2, [r7, #14]
 800385c:	89bb      	ldrh	r3, [r7, #12]
 800385e:	429a      	cmp	r2, r3
 8003860:	d1c2      	bne.n	80037e8 <getSn_RX_RSR+0x12>
   return val;
 8003862:	89fb      	ldrh	r3, [r7, #14]
}
 8003864:	4618      	mov	r0, r3
 8003866:	3714      	adds	r7, #20
 8003868:	46bd      	mov	sp, r7
 800386a:	bd90      	pop	{r4, r7, pc}

0800386c <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800386c:	b590      	push	{r4, r7, lr}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	4603      	mov	r3, r0
 8003874:	6039      	str	r1, [r7, #0]
 8003876:	71fb      	strb	r3, [r7, #7]
 8003878:	4613      	mov	r3, r2
 800387a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800387c:	2300      	movs	r3, #0
 800387e:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8003880:	2300      	movs	r3, #0
 8003882:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8003884:	88bb      	ldrh	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d048      	beq.n	800391c <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 800388a:	79fb      	ldrb	r3, [r7, #7]
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	3301      	adds	r3, #1
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003896:	4618      	mov	r0, r3
 8003898:	f7ff fdf8 	bl	800348c <WIZCHIP_READ>
 800389c:	4603      	mov	r3, r0
 800389e:	b29b      	uxth	r3, r3
 80038a0:	021b      	lsls	r3, r3, #8
 80038a2:	b29c      	uxth	r4, r3
 80038a4:	79fb      	ldrb	r3, [r7, #7]
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	3301      	adds	r3, #1
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7ff fdeb 	bl	800348c <WIZCHIP_READ>
 80038b6:	4603      	mov	r3, r0
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	4423      	add	r3, r4
 80038bc:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 80038be:	89fb      	ldrh	r3, [r7, #14]
 80038c0:	021b      	lsls	r3, r3, #8
 80038c2:	79fa      	ldrb	r2, [r7, #7]
 80038c4:	0092      	lsls	r2, r2, #2
 80038c6:	3202      	adds	r2, #2
 80038c8:	00d2      	lsls	r2, r2, #3
 80038ca:	4413      	add	r3, r2
 80038cc:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80038ce:	88bb      	ldrh	r3, [r7, #4]
 80038d0:	461a      	mov	r2, r3
 80038d2:	6839      	ldr	r1, [r7, #0]
 80038d4:	68b8      	ldr	r0, [r7, #8]
 80038d6:	f7ff fed3 	bl	8003680 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 80038da:	89fa      	ldrh	r2, [r7, #14]
 80038dc:	88bb      	ldrh	r3, [r7, #4]
 80038de:	4413      	add	r3, r2
 80038e0:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 80038e2:	79fb      	ldrb	r3, [r7, #7]
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	3301      	adds	r3, #1
 80038e8:	00db      	lsls	r3, r3, #3
 80038ea:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80038ee:	461a      	mov	r2, r3
 80038f0:	89fb      	ldrh	r3, [r7, #14]
 80038f2:	0a1b      	lsrs	r3, r3, #8
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	4619      	mov	r1, r3
 80038fa:	4610      	mov	r0, r2
 80038fc:	f7ff fe12 	bl	8003524 <WIZCHIP_WRITE>
 8003900:	79fb      	ldrb	r3, [r7, #7]
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	3301      	adds	r3, #1
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 800390c:	461a      	mov	r2, r3
 800390e:	89fb      	ldrh	r3, [r7, #14]
 8003910:	b2db      	uxtb	r3, r3
 8003912:	4619      	mov	r1, r3
 8003914:	4610      	mov	r0, r2
 8003916:	f7ff fe05 	bl	8003524 <WIZCHIP_WRITE>
 800391a:	e000      	b.n	800391e <wiz_send_data+0xb2>
   if(len == 0)  return;
 800391c:	bf00      	nop
}
 800391e:	3714      	adds	r7, #20
 8003920:	46bd      	mov	sp, r7
 8003922:	bd90      	pop	{r4, r7, pc}

08003924 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8003924:	b590      	push	{r4, r7, lr}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	4603      	mov	r3, r0
 800392c:	6039      	str	r1, [r7, #0]
 800392e:	71fb      	strb	r3, [r7, #7]
 8003930:	4613      	mov	r3, r2
 8003932:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8003934:	2300      	movs	r3, #0
 8003936:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8003938:	2300      	movs	r3, #0
 800393a:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 800393c:	88bb      	ldrh	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d048      	beq.n	80039d4 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8003942:	79fb      	ldrb	r3, [r7, #7]
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	3301      	adds	r3, #1
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800394e:	4618      	mov	r0, r3
 8003950:	f7ff fd9c 	bl	800348c <WIZCHIP_READ>
 8003954:	4603      	mov	r3, r0
 8003956:	b29b      	uxth	r3, r3
 8003958:	021b      	lsls	r3, r3, #8
 800395a:	b29c      	uxth	r4, r3
 800395c:	79fb      	ldrb	r3, [r7, #7]
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	3301      	adds	r3, #1
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8003968:	4618      	mov	r0, r3
 800396a:	f7ff fd8f 	bl	800348c <WIZCHIP_READ>
 800396e:	4603      	mov	r3, r0
 8003970:	b29b      	uxth	r3, r3
 8003972:	4423      	add	r3, r4
 8003974:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8003976:	89fb      	ldrh	r3, [r7, #14]
 8003978:	021b      	lsls	r3, r3, #8
 800397a:	79fa      	ldrb	r2, [r7, #7]
 800397c:	0092      	lsls	r2, r2, #2
 800397e:	3203      	adds	r2, #3
 8003980:	00d2      	lsls	r2, r2, #3
 8003982:	4413      	add	r3, r2
 8003984:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8003986:	88bb      	ldrh	r3, [r7, #4]
 8003988:	461a      	mov	r2, r3
 800398a:	6839      	ldr	r1, [r7, #0]
 800398c:	68b8      	ldr	r0, [r7, #8]
 800398e:	f7ff fe17 	bl	80035c0 <WIZCHIP_READ_BUF>
   ptr += len;
 8003992:	89fa      	ldrh	r2, [r7, #14]
 8003994:	88bb      	ldrh	r3, [r7, #4]
 8003996:	4413      	add	r3, r2
 8003998:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 800399a:	79fb      	ldrb	r3, [r7, #7]
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	3301      	adds	r3, #1
 80039a0:	00db      	lsls	r3, r3, #3
 80039a2:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80039a6:	461a      	mov	r2, r3
 80039a8:	89fb      	ldrh	r3, [r7, #14]
 80039aa:	0a1b      	lsrs	r3, r3, #8
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	4619      	mov	r1, r3
 80039b2:	4610      	mov	r0, r2
 80039b4:	f7ff fdb6 	bl	8003524 <WIZCHIP_WRITE>
 80039b8:	79fb      	ldrb	r3, [r7, #7]
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	3301      	adds	r3, #1
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80039c4:	461a      	mov	r2, r3
 80039c6:	89fb      	ldrh	r3, [r7, #14]
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	4619      	mov	r1, r3
 80039cc:	4610      	mov	r0, r2
 80039ce:	f7ff fda9 	bl	8003524 <WIZCHIP_WRITE>
 80039d2:	e000      	b.n	80039d6 <wiz_recv_data+0xb2>
   if(len == 0) return;
 80039d4:	bf00      	nop
}
 80039d6:	3714      	adds	r7, #20
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd90      	pop	{r4, r7, pc}

080039dc <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
 80039e0:	bf00      	nop
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 80039ea:	b480      	push	{r7}
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	bf00      	nop
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	bf00      	nop
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr

08003a06 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8003a06:	b480      	push	{r7}
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	bf00      	nop
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	4618      	mov	r0, r3
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr

08003a2e <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8003a2e:	b480      	push	{r7}
 8003a30:	b083      	sub	sp, #12
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
 8003a36:	460b      	mov	r3, r1
 8003a38:	70fb      	strb	r3, [r7, #3]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	78fa      	ldrb	r2, [r7, #3]
 8003a3e:	701a      	strb	r2, [r3, #0]
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	2300      	movs	r3, #0
 8003a52:	4618      	mov	r0, r3
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	4603      	mov	r3, r0
 8003a64:	71fb      	strb	r3, [r7, #7]
 8003a66:	bf00      	nop
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
	...

08003a74 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d002      	beq.n	8003a8a <reg_wizchip_cs_cbfunc+0x16>
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d106      	bne.n	8003a98 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8003a8a:	4b0a      	ldr	r3, [pc, #40]	; (8003ab4 <reg_wizchip_cs_cbfunc+0x40>)
 8003a8c:	4a0a      	ldr	r2, [pc, #40]	; (8003ab8 <reg_wizchip_cs_cbfunc+0x44>)
 8003a8e:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8003a90:	4b08      	ldr	r3, [pc, #32]	; (8003ab4 <reg_wizchip_cs_cbfunc+0x40>)
 8003a92:	4a0a      	ldr	r2, [pc, #40]	; (8003abc <reg_wizchip_cs_cbfunc+0x48>)
 8003a94:	619a      	str	r2, [r3, #24]
 8003a96:	e006      	b.n	8003aa6 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8003a98:	4a06      	ldr	r2, [pc, #24]	; (8003ab4 <reg_wizchip_cs_cbfunc+0x40>)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8003a9e:	4a05      	ldr	r2, [pc, #20]	; (8003ab4 <reg_wizchip_cs_cbfunc+0x40>)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	6193      	str	r3, [r2, #24]
   }
}
 8003aa4:	bf00      	nop
 8003aa6:	bf00      	nop
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	20000044 	.word	0x20000044
 8003ab8:	080039f9 	.word	0x080039f9
 8003abc:	08003a07 	.word	0x08003a07

08003ac0 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8003aca:	bf00      	nop
 8003acc:	4b0f      	ldr	r3, [pc, #60]	; (8003b0c <reg_wizchip_spi_cbfunc+0x4c>)
 8003ace:	881b      	ldrh	r3, [r3, #0]
 8003ad0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d0f9      	beq.n	8003acc <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d002      	beq.n	8003ae4 <reg_wizchip_spi_cbfunc+0x24>
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d106      	bne.n	8003af2 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8003ae4:	4b09      	ldr	r3, [pc, #36]	; (8003b0c <reg_wizchip_spi_cbfunc+0x4c>)
 8003ae6:	4a0a      	ldr	r2, [pc, #40]	; (8003b10 <reg_wizchip_spi_cbfunc+0x50>)
 8003ae8:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8003aea:	4b08      	ldr	r3, [pc, #32]	; (8003b0c <reg_wizchip_spi_cbfunc+0x4c>)
 8003aec:	4a09      	ldr	r2, [pc, #36]	; (8003b14 <reg_wizchip_spi_cbfunc+0x54>)
 8003aee:	621a      	str	r2, [r3, #32]
 8003af0:	e006      	b.n	8003b00 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8003af2:	4a06      	ldr	r2, [pc, #24]	; (8003b0c <reg_wizchip_spi_cbfunc+0x4c>)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8003af8:	4a04      	ldr	r2, [pc, #16]	; (8003b0c <reg_wizchip_spi_cbfunc+0x4c>)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	6213      	str	r3, [r2, #32]
   }
}
 8003afe:	bf00      	nop
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	20000044 	.word	0x20000044
 8003b10:	08003a4d 	.word	0x08003a4d
 8003b14:	08003a5d 	.word	0x08003a5d

08003b18 <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8003b18:	b590      	push	{r4, r7, lr}
 8003b1a:	b087      	sub	sp, #28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	4603      	mov	r3, r0
 8003b20:	6039      	str	r1, [r7, #0]
 8003b22:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8003b24:	2300      	movs	r3, #0
 8003b26:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8003b28:	2300      	movs	r3, #0
 8003b2a:	60fb      	str	r3, [r7, #12]
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8003b30:	79fb      	ldrb	r3, [r7, #7]
 8003b32:	2b0f      	cmp	r3, #15
 8003b34:	f200 80c2 	bhi.w	8003cbc <ctlwizchip+0x1a4>
 8003b38:	a201      	add	r2, pc, #4	; (adr r2, 8003b40 <ctlwizchip+0x28>)
 8003b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3e:	bf00      	nop
 8003b40:	08003b81 	.word	0x08003b81
 8003b44:	08003b87 	.word	0x08003b87
 8003b48:	08003bb3 	.word	0x08003bb3
 8003b4c:	08003ba7 	.word	0x08003ba7
 8003b50:	08003bc1 	.word	0x08003bc1
 8003b54:	08003bcd 	.word	0x08003bcd
 8003b58:	08003bdb 	.word	0x08003bdb
 8003b5c:	08003c01 	.word	0x08003c01
 8003b60:	08003c27 	.word	0x08003c27
 8003b64:	08003c61 	.word	0x08003c61
 8003b68:	08003c67 	.word	0x08003c67
 8003b6c:	08003c6f 	.word	0x08003c6f
 8003b70:	08003cc3 	.word	0x08003cc3
 8003b74:	08003c77 	.word	0x08003c77
 8003b78:	08003c85 	.word	0x08003c85
 8003b7c:	08003ca1 	.word	0x08003ca1
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8003b80:	f000 f8e6 	bl	8003d50 <wizchip_sw_reset>
         break;
 8003b84:	e09e      	b.n	8003cc4 <ctlwizchip+0x1ac>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d004      	beq.n	8003b96 <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	3308      	adds	r3, #8
 8003b94:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	4611      	mov	r1, r2
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f000 f923 	bl	8003de8 <wizchip_init>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	e08f      	b.n	8003cc6 <ctlwizchip+0x1ae>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	881b      	ldrh	r3, [r3, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 f9a8 	bl	8003f00 <wizchip_clrinterrupt>
         break;
 8003bb0:	e088      	b.n	8003cc4 <ctlwizchip+0x1ac>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8003bb2:	f000 f9d9 	bl	8003f68 <wizchip_getinterrupt>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	461a      	mov	r2, r3
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	801a      	strh	r2, [r3, #0]
         break;
 8003bbe:	e081      	b.n	8003cc4 <ctlwizchip+0x1ac>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	881b      	ldrh	r3, [r3, #0]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f000 f9f4 	bl	8003fb2 <wizchip_setinterruptmask>
         break;         
 8003bca:	e07b      	b.n	8003cc4 <ctlwizchip+0x1ac>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8003bcc:	f000 fa0c 	bl	8003fe8 <wizchip_getinterruptmask>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	801a      	strh	r2, [r3, #0]
         break;
 8003bd8:	e074      	b.n	8003cc4 <ctlwizchip+0x1ac>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	881b      	ldrh	r3, [r3, #0]
 8003bde:	0a1b      	lsrs	r3, r3, #8
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	4619      	mov	r1, r3
 8003be6:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8003bea:	f7ff fc9b 	bl	8003524 <WIZCHIP_WRITE>
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	881b      	ldrh	r3, [r3, #0]
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8003bfa:	f7ff fc93 	bl	8003524 <WIZCHIP_WRITE>
         break;
 8003bfe:	e061      	b.n	8003cc4 <ctlwizchip+0x1ac>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8003c00:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8003c04:	f7ff fc42 	bl	800348c <WIZCHIP_READ>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	021b      	lsls	r3, r3, #8
 8003c0e:	b29c      	uxth	r4, r3
 8003c10:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8003c14:	f7ff fc3a 	bl	800348c <WIZCHIP_READ>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	4423      	add	r3, r4
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	801a      	strh	r2, [r3, #0]
         break;
 8003c24:	e04e      	b.n	8003cc4 <ctlwizchip+0x1ac>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8003c26:	4b2a      	ldr	r3, [pc, #168]	; (8003cd0 <ctlwizchip+0x1b8>)
 8003c28:	789a      	ldrb	r2, [r3, #2]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	3301      	adds	r3, #1
 8003c32:	4a27      	ldr	r2, [pc, #156]	; (8003cd0 <ctlwizchip+0x1b8>)
 8003c34:	78d2      	ldrb	r2, [r2, #3]
 8003c36:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	3302      	adds	r3, #2
 8003c3c:	4a24      	ldr	r2, [pc, #144]	; (8003cd0 <ctlwizchip+0x1b8>)
 8003c3e:	7912      	ldrb	r2, [r2, #4]
 8003c40:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	3303      	adds	r3, #3
 8003c46:	4a22      	ldr	r2, [pc, #136]	; (8003cd0 <ctlwizchip+0x1b8>)
 8003c48:	7952      	ldrb	r2, [r2, #5]
 8003c4a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	3304      	adds	r3, #4
 8003c50:	4a1f      	ldr	r2, [pc, #124]	; (8003cd0 <ctlwizchip+0x1b8>)
 8003c52:	7992      	ldrb	r2, [r2, #6]
 8003c54:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = 0;
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	3305      	adds	r3, #5
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	701a      	strb	r2, [r3, #0]
         break;
 8003c5e:	e031      	b.n	8003cc4 <ctlwizchip+0x1ac>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8003c60:	f000 fa14 	bl	800408c <wizphy_reset>
         break;
 8003c64:	e02e      	b.n	8003cc4 <ctlwizchip+0x1ac>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8003c66:	6838      	ldr	r0, [r7, #0]
 8003c68:	f000 fa37 	bl	80040da <wizphy_setphyconf>
         break;
 8003c6c:	e02a      	b.n	8003cc4 <ctlwizchip+0x1ac>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8003c6e:	6838      	ldr	r0, [r7, #0]
 8003c70:	f000 fa76 	bl	8004160 <wizphy_getphyconf>
         break;
 8003c74:	e026      	b.n	8003cc4 <ctlwizchip+0x1ac>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 fad8 	bl	8004230 <wizphy_setphypmode>
 8003c80:	4603      	mov	r3, r0
 8003c82:	e020      	b.n	8003cc6 <ctlwizchip+0x1ae>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8003c84:	f000 f9e9 	bl	800405a <wizphy_getphypmode>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8003c8c:	7dfb      	ldrb	r3, [r7, #23]
 8003c8e:	2bff      	cmp	r3, #255	; 0xff
 8003c90:	d102      	bne.n	8003c98 <ctlwizchip+0x180>
 8003c92:	f04f 33ff 	mov.w	r3, #4294967295
 8003c96:	e016      	b.n	8003cc6 <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	7dfa      	ldrb	r2, [r7, #23]
 8003c9c:	701a      	strb	r2, [r3, #0]
         break;
 8003c9e:	e011      	b.n	8003cc4 <ctlwizchip+0x1ac>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8003ca0:	f000 f9c5 	bl	800402e <wizphy_getphylink>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8003ca8:	7dfb      	ldrb	r3, [r7, #23]
 8003caa:	2bff      	cmp	r3, #255	; 0xff
 8003cac:	d102      	bne.n	8003cb4 <ctlwizchip+0x19c>
 8003cae:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb2:	e008      	b.n	8003cc6 <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	7dfa      	ldrb	r2, [r7, #23]
 8003cb8:	701a      	strb	r2, [r3, #0]
         break;
 8003cba:	e003      	b.n	8003cc4 <ctlwizchip+0x1ac>
   #endif      
      default:
         return -1;
 8003cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc0:	e001      	b.n	8003cc6 <ctlwizchip+0x1ae>
         break;
 8003cc2:	bf00      	nop
   }
   return 0;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	371c      	adds	r7, #28
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd90      	pop	{r4, r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	20000044 	.word	0x20000044

08003cd4 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	4603      	mov	r3, r0
 8003cdc:	6039      	str	r1, [r7, #0]
 8003cde:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8003ce0:	79fb      	ldrb	r3, [r7, #7]
 8003ce2:	2b05      	cmp	r3, #5
 8003ce4:	d82c      	bhi.n	8003d40 <ctlnetwork+0x6c>
 8003ce6:	a201      	add	r2, pc, #4	; (adr r2, 8003cec <ctlnetwork+0x18>)
 8003ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cec:	08003d05 	.word	0x08003d05
 8003cf0:	08003d0d 	.word	0x08003d0d
 8003cf4:	08003d15 	.word	0x08003d15
 8003cf8:	08003d23 	.word	0x08003d23
 8003cfc:	08003d31 	.word	0x08003d31
 8003d00:	08003d39 	.word	0x08003d39
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8003d04:	6838      	ldr	r0, [r7, #0]
 8003d06:	f000 fadd 	bl	80042c4 <wizchip_setnetinfo>
         break;
 8003d0a:	e01c      	b.n	8003d46 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8003d0c:	6838      	ldr	r0, [r7, #0]
 8003d0e:	f000 fb19 	bl	8004344 <wizchip_getnetinfo>
         break;
 8003d12:	e018      	b.n	8003d46 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f000 fb53 	bl	80043c4 <wizchip_setnetmode>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	e012      	b.n	8003d48 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8003d22:	f000 fb71 	bl	8004408 <wizchip_getnetmode>
 8003d26:	4603      	mov	r3, r0
 8003d28:	461a      	mov	r2, r3
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	701a      	strb	r2, [r3, #0]
         break;
 8003d2e:	e00a      	b.n	8003d46 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8003d30:	6838      	ldr	r0, [r7, #0]
 8003d32:	f000 fb71 	bl	8004418 <wizchip_settimeout>
         break;
 8003d36:	e006      	b.n	8003d46 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8003d38:	6838      	ldr	r0, [r7, #0]
 8003d3a:	f000 fb8e 	bl	800445a <wizchip_gettimeout>
         break;
 8003d3e:	e002      	b.n	8003d46 <ctlnetwork+0x72>
      default:
         return -1;
 8003d40:	f04f 33ff 	mov.w	r3, #4294967295
 8003d44:	e000      	b.n	8003d48 <ctlnetwork+0x74>
   }
   return 0;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3708      	adds	r7, #8
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8003d56:	1d3b      	adds	r3, r7, #4
 8003d58:	2206      	movs	r2, #6
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003d60:	f7ff fc2e 	bl	80035c0 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8003d64:	f107 0314 	add.w	r3, r7, #20
 8003d68:	2204      	movs	r2, #4
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003d70:	f7ff fc26 	bl	80035c0 <WIZCHIP_READ_BUF>
 8003d74:	f107 0310 	add.w	r3, r7, #16
 8003d78:	2204      	movs	r2, #4
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003d80:	f7ff fc1e 	bl	80035c0 <WIZCHIP_READ_BUF>
 8003d84:	f107 030c 	add.w	r3, r7, #12
 8003d88:	2204      	movs	r2, #4
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003d90:	f7ff fc16 	bl	80035c0 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8003d94:	2180      	movs	r1, #128	; 0x80
 8003d96:	2000      	movs	r0, #0
 8003d98:	f7ff fbc4 	bl	8003524 <WIZCHIP_WRITE>
   getMR(); // for delay
 8003d9c:	2000      	movs	r0, #0
 8003d9e:	f7ff fb75 	bl	800348c <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8003da2:	1d3b      	adds	r3, r7, #4
 8003da4:	2206      	movs	r2, #6
 8003da6:	4619      	mov	r1, r3
 8003da8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003dac:	f7ff fc68 	bl	8003680 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8003db0:	f107 0314 	add.w	r3, r7, #20
 8003db4:	2204      	movs	r2, #4
 8003db6:	4619      	mov	r1, r3
 8003db8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003dbc:	f7ff fc60 	bl	8003680 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8003dc0:	f107 0310 	add.w	r3, r7, #16
 8003dc4:	2204      	movs	r2, #4
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003dcc:	f7ff fc58 	bl	8003680 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8003dd0:	f107 030c 	add.w	r3, r7, #12
 8003dd4:	2204      	movs	r2, #4
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003ddc:	f7ff fc50 	bl	8003680 <WIZCHIP_WRITE_BUF>
}
 8003de0:	bf00      	nop
 8003de2:	3718      	adds	r7, #24
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8003df2:	2300      	movs	r3, #0
 8003df4:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8003df6:	f7ff ffab 	bl	8003d50 <wizchip_sw_reset>
   if(txsize)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d03b      	beq.n	8003e78 <wizchip_init+0x90>
   {
      tmp = 0;
 8003e00:	2300      	movs	r3, #0
 8003e02:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003e04:	2300      	movs	r3, #0
 8003e06:	73fb      	strb	r3, [r7, #15]
 8003e08:	e015      	b.n	8003e36 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8003e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	4413      	add	r3, r2
 8003e12:	781a      	ldrb	r2, [r3, #0]
 8003e14:	7bbb      	ldrb	r3, [r7, #14]
 8003e16:	4413      	add	r3, r2
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8003e1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e20:	2b10      	cmp	r3, #16
 8003e22:	dd02      	ble.n	8003e2a <wizchip_init+0x42>
 8003e24:	f04f 33ff 	mov.w	r3, #4294967295
 8003e28:	e066      	b.n	8003ef8 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	3301      	adds	r3, #1
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	73fb      	strb	r3, [r7, #15]
 8003e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e3a:	2b07      	cmp	r3, #7
 8003e3c:	dde5      	ble.n	8003e0a <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003e3e:	2300      	movs	r3, #0
 8003e40:	73fb      	strb	r3, [r7, #15]
 8003e42:	e015      	b.n	8003e70 <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8003e44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	00db      	lsls	r3, r3, #3
 8003e4e:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8003e52:	4618      	mov	r0, r3
 8003e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	4619      	mov	r1, r3
 8003e60:	f7ff fb60 	bl	8003524 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003e64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	73fb      	strb	r3, [r7, #15]
 8003e70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e74:	2b07      	cmp	r3, #7
 8003e76:	dde5      	ble.n	8003e44 <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d03b      	beq.n	8003ef6 <wizchip_init+0x10e>
   {
      tmp = 0;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003e82:	2300      	movs	r3, #0
 8003e84:	73fb      	strb	r3, [r7, #15]
 8003e86:	e015      	b.n	8003eb4 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8003e88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e8c:	683a      	ldr	r2, [r7, #0]
 8003e8e:	4413      	add	r3, r2
 8003e90:	781a      	ldrb	r2, [r3, #0]
 8003e92:	7bbb      	ldrb	r3, [r7, #14]
 8003e94:	4413      	add	r3, r2
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8003e9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e9e:	2b10      	cmp	r3, #16
 8003ea0:	dd02      	ble.n	8003ea8 <wizchip_init+0xc0>
 8003ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ea6:	e027      	b.n	8003ef8 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003ea8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	3301      	adds	r3, #1
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	73fb      	strb	r3, [r7, #15]
 8003eb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eb8:	2b07      	cmp	r3, #7
 8003eba:	dde5      	ble.n	8003e88 <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	73fb      	strb	r3, [r7, #15]
 8003ec0:	e015      	b.n	8003eee <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8003ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	3301      	adds	r3, #1
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	4413      	add	r3, r2
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	4619      	mov	r1, r3
 8003ede:	f7ff fb21 	bl	8003524 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	3301      	adds	r3, #1
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	73fb      	strb	r3, [r7, #15]
 8003eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ef2:	2b07      	cmp	r3, #7
 8003ef4:	dde5      	ble.n	8003ec2 <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3710      	adds	r7, #16
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	4603      	mov	r3, r0
 8003f08:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8003f0a:	88fb      	ldrh	r3, [r7, #6]
 8003f0c:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8003f0e:	88fb      	ldrh	r3, [r7, #6]
 8003f10:	0a1b      	lsrs	r3, r3, #8
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8003f16:	7bfb      	ldrb	r3, [r7, #15]
 8003f18:	f023 030f 	bic.w	r3, r3, #15
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	4619      	mov	r1, r3
 8003f20:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8003f24:	f7ff fafe 	bl	8003524 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8003f28:	2300      	movs	r3, #0
 8003f2a:	73fb      	strb	r3, [r7, #15]
 8003f2c:	e014      	b.n	8003f58 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 8003f2e:	7bba      	ldrb	r2, [r7, #14]
 8003f30:	7bfb      	ldrb	r3, [r7, #15]
 8003f32:	fa42 f303 	asr.w	r3, r2, r3
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d009      	beq.n	8003f52 <wizchip_clrinterrupt+0x52>
 8003f3e:	7bfb      	ldrb	r3, [r7, #15]
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	3301      	adds	r3, #1
 8003f44:	00db      	lsls	r3, r3, #3
 8003f46:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003f4a:	211f      	movs	r1, #31
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7ff fae9 	bl	8003524 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 8003f52:	7bfb      	ldrb	r3, [r7, #15]
 8003f54:	3301      	adds	r3, #1
 8003f56:	73fb      	strb	r3, [r7, #15]
 8003f58:	7bfb      	ldrb	r3, [r7, #15]
 8003f5a:	2b07      	cmp	r3, #7
 8003f5c:	d9e7      	bls.n	8003f2e <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 8003f5e:	bf00      	nop
 8003f60:	bf00      	nop
 8003f62:	3710      	adds	r7, #16
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8003f72:	2300      	movs	r3, #0
 8003f74:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8003f76:	2300      	movs	r3, #0
 8003f78:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8003f7a:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8003f7e:	f7ff fa85 	bl	800348c <WIZCHIP_READ>
 8003f82:	4603      	mov	r3, r0
 8003f84:	f023 030f 	bic.w	r3, r3, #15
 8003f88:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8003f8a:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8003f8e:	f7ff fa7d 	bl	800348c <WIZCHIP_READ>
 8003f92:	4603      	mov	r3, r0
 8003f94:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8003f96:	79bb      	ldrb	r3, [r7, #6]
 8003f98:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8003f9a:	88bb      	ldrh	r3, [r7, #4]
 8003f9c:	021b      	lsls	r3, r3, #8
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	79fb      	ldrb	r3, [r7, #7]
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	4413      	add	r3, r2
 8003fa6:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8003fa8:	88bb      	ldrh	r3, [r7, #4]
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3708      	adds	r7, #8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b084      	sub	sp, #16
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	4603      	mov	r3, r0
 8003fba:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8003fbc:	88fb      	ldrh	r3, [r7, #6]
 8003fbe:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8003fc0:	88fb      	ldrh	r3, [r7, #6]
 8003fc2:	0a1b      	lsrs	r3, r3, #8
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8003fc8:	7bfb      	ldrb	r3, [r7, #15]
 8003fca:	4619      	mov	r1, r3
 8003fcc:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8003fd0:	f7ff faa8 	bl	8003524 <WIZCHIP_WRITE>
   setSIMR(simr);
 8003fd4:	7bbb      	ldrb	r3, [r7, #14]
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8003fdc:	f7ff faa2 	bl	8003524 <WIZCHIP_WRITE>
#endif   
}
 8003fe0:	bf00      	nop
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8003ffa:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8003ffe:	f7ff fa45 	bl	800348c <WIZCHIP_READ>
 8004002:	4603      	mov	r3, r0
 8004004:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8004006:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 800400a:	f7ff fa3f 	bl	800348c <WIZCHIP_READ>
 800400e:	4603      	mov	r3, r0
 8004010:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8004012:	79bb      	ldrb	r3, [r7, #6]
 8004014:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8004016:	88bb      	ldrh	r3, [r7, #4]
 8004018:	021b      	lsls	r3, r3, #8
 800401a:	b29a      	uxth	r2, r3
 800401c:	79fb      	ldrb	r3, [r7, #7]
 800401e:	b29b      	uxth	r3, r3
 8004020:	4413      	add	r3, r2
 8004022:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8004024:	88bb      	ldrh	r3, [r7, #4]
}
 8004026:	4618      	mov	r0, r3
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b082      	sub	sp, #8
 8004032:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8004034:	2300      	movs	r3, #0
 8004036:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8004038:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800403c:	f7ff fa26 	bl	800348c <WIZCHIP_READ>
 8004040:	4603      	mov	r3, r0
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 800404a:	2301      	movs	r3, #1
 800404c:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 800404e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8004052:	4618      	mov	r0, r3
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b082      	sub	sp, #8
 800405e:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8004060:	2300      	movs	r3, #0
 8004062:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8004064:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8004068:	f7ff fa10 	bl	800348c <WIZCHIP_READ>
 800406c:	4603      	mov	r3, r0
 800406e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004072:	2b30      	cmp	r3, #48	; 0x30
 8004074:	d102      	bne.n	800407c <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8004076:	2301      	movs	r3, #1
 8004078:	71fb      	strb	r3, [r7, #7]
 800407a:	e001      	b.n	8004080 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 800407c:	2300      	movs	r3, #0
 800407e:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8004080:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8004084:	4618      	mov	r0, r3
 8004086:	3708      	adds	r7, #8
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8004092:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8004096:	f7ff f9f9 	bl	800348c <WIZCHIP_READ>
 800409a:	4603      	mov	r3, r0
 800409c:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 800409e:	79fb      	ldrb	r3, [r7, #7]
 80040a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040a4:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 80040a6:	79fb      	ldrb	r3, [r7, #7]
 80040a8:	4619      	mov	r1, r3
 80040aa:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80040ae:	f7ff fa39 	bl	8003524 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 80040b2:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80040b6:	f7ff f9e9 	bl	800348c <WIZCHIP_READ>
 80040ba:	4603      	mov	r3, r0
 80040bc:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 80040be:	79fb      	ldrb	r3, [r7, #7]
 80040c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80040c4:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 80040c6:	79fb      	ldrb	r3, [r7, #7]
 80040c8:	4619      	mov	r1, r3
 80040ca:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80040ce:	f7ff fa29 	bl	8003524 <WIZCHIP_WRITE>
}
 80040d2:	bf00      	nop
 80040d4:	3708      	adds	r7, #8
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 80040da:	b580      	push	{r7, lr}
 80040dc:	b084      	sub	sp, #16
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 80040e2:	2300      	movs	r3, #0
 80040e4:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d104      	bne.n	80040f8 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 80040ee:	7bfb      	ldrb	r3, [r7, #15]
 80040f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040f4:	73fb      	strb	r3, [r7, #15]
 80040f6:	e003      	b.n	8004100 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 80040f8:	7bfb      	ldrb	r3, [r7, #15]
 80040fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040fe:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	785b      	ldrb	r3, [r3, #1]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d104      	bne.n	8004112 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8004108:	7bfb      	ldrb	r3, [r7, #15]
 800410a:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800410e:	73fb      	strb	r3, [r7, #15]
 8004110:	e019      	b.n	8004146 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	78db      	ldrb	r3, [r3, #3]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d10d      	bne.n	8004136 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	789b      	ldrb	r3, [r3, #2]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d104      	bne.n	800412c <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8004122:	7bfb      	ldrb	r3, [r7, #15]
 8004124:	f043 0318 	orr.w	r3, r3, #24
 8004128:	73fb      	strb	r3, [r7, #15]
 800412a:	e00c      	b.n	8004146 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 800412c:	7bfb      	ldrb	r3, [r7, #15]
 800412e:	f043 0308 	orr.w	r3, r3, #8
 8004132:	73fb      	strb	r3, [r7, #15]
 8004134:	e007      	b.n	8004146 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	789b      	ldrb	r3, [r3, #2]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d103      	bne.n	8004146 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 800413e:	7bfb      	ldrb	r3, [r7, #15]
 8004140:	f043 0310 	orr.w	r3, r3, #16
 8004144:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8004146:	7bfb      	ldrb	r3, [r7, #15]
 8004148:	4619      	mov	r1, r3
 800414a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800414e:	f7ff f9e9 	bl	8003524 <WIZCHIP_WRITE>
   wizphy_reset();
 8004152:	f7ff ff9b 	bl	800408c <wizphy_reset>
}
 8004156:	bf00      	nop
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
	...

08004160 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8004168:	2300      	movs	r3, #0
 800416a:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 800416c:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8004170:	f7ff f98c 	bl	800348c <WIZCHIP_READ>
 8004174:	4603      	mov	r3, r0
 8004176:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8004178:	7bfb      	ldrb	r3, [r7, #15]
 800417a:	119b      	asrs	r3, r3, #6
 800417c:	b2db      	uxtb	r3, r3
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	b2da      	uxtb	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8004188:	7bfb      	ldrb	r3, [r7, #15]
 800418a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800418e:	2b20      	cmp	r3, #32
 8004190:	d001      	beq.n	8004196 <wizphy_getphyconf+0x36>
 8004192:	2b38      	cmp	r3, #56	; 0x38
 8004194:	d103      	bne.n	800419e <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2201      	movs	r2, #1
 800419a:	705a      	strb	r2, [r3, #1]
         break;
 800419c:	e003      	b.n	80041a6 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	705a      	strb	r2, [r3, #1]
         break;
 80041a4:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80041a6:	7bfb      	ldrb	r3, [r7, #15]
 80041a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041ac:	3b10      	subs	r3, #16
 80041ae:	2b10      	cmp	r3, #16
 80041b0:	bf8c      	ite	hi
 80041b2:	2201      	movhi	r2, #1
 80041b4:	2200      	movls	r2, #0
 80041b6:	b2d2      	uxtb	r2, r2
 80041b8:	2a00      	cmp	r2, #0
 80041ba:	d10e      	bne.n	80041da <wizphy_getphyconf+0x7a>
 80041bc:	2201      	movs	r2, #1
 80041be:	409a      	lsls	r2, r3
 80041c0:	4b19      	ldr	r3, [pc, #100]	; (8004228 <wizphy_getphyconf+0xc8>)
 80041c2:	4013      	ands	r3, r2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	bf14      	ite	ne
 80041c8:	2301      	movne	r3, #1
 80041ca:	2300      	moveq	r3, #0
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d003      	beq.n	80041da <wizphy_getphyconf+0x7a>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	709a      	strb	r2, [r3, #2]
         break;
 80041d8:	e003      	b.n	80041e2 <wizphy_getphyconf+0x82>
      default:
         phyconf->speed = PHY_SPEED_10;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	709a      	strb	r2, [r3, #2]
         break;
 80041e0:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80041e2:	7bfb      	ldrb	r3, [r7, #15]
 80041e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041e8:	3b08      	subs	r3, #8
 80041ea:	2b18      	cmp	r3, #24
 80041ec:	bf8c      	ite	hi
 80041ee:	2201      	movhi	r2, #1
 80041f0:	2200      	movls	r2, #0
 80041f2:	b2d2      	uxtb	r2, r2
 80041f4:	2a00      	cmp	r2, #0
 80041f6:	d10e      	bne.n	8004216 <wizphy_getphyconf+0xb6>
 80041f8:	2201      	movs	r2, #1
 80041fa:	409a      	lsls	r2, r3
 80041fc:	4b0b      	ldr	r3, [pc, #44]	; (800422c <wizphy_getphyconf+0xcc>)
 80041fe:	4013      	ands	r3, r2
 8004200:	2b00      	cmp	r3, #0
 8004202:	bf14      	ite	ne
 8004204:	2301      	movne	r3, #1
 8004206:	2300      	moveq	r3, #0
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d003      	beq.n	8004216 <wizphy_getphyconf+0xb6>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	70da      	strb	r2, [r3, #3]
         break;
 8004214:	e003      	b.n	800421e <wizphy_getphyconf+0xbe>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	70da      	strb	r2, [r3, #3]
         break;
 800421c:	bf00      	nop
   }
}
 800421e:	bf00      	nop
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	00010101 	.word	0x00010101
 800422c:	01010001 	.word	0x01010001

08004230 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	4603      	mov	r3, r0
 8004238:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 800423a:	2300      	movs	r3, #0
 800423c:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 800423e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8004242:	f7ff f923 	bl	800348c <WIZCHIP_READ>
 8004246:	4603      	mov	r3, r0
 8004248:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 800424a:	7bfb      	ldrb	r3, [r7, #15]
 800424c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004250:	2b00      	cmp	r3, #0
 8004252:	d102      	bne.n	800425a <wizphy_setphypmode+0x2a>
 8004254:	f04f 33ff 	mov.w	r3, #4294967295
 8004258:	e030      	b.n	80042bc <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 800425a:	7bfb      	ldrb	r3, [r7, #15]
 800425c:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8004260:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8004262:	79fb      	ldrb	r3, [r7, #7]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d104      	bne.n	8004272 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8004268:	7bfb      	ldrb	r3, [r7, #15]
 800426a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800426e:	73fb      	strb	r3, [r7, #15]
 8004270:	e003      	b.n	800427a <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8004272:	7bfb      	ldrb	r3, [r7, #15]
 8004274:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8004278:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 800427a:	7bfb      	ldrb	r3, [r7, #15]
 800427c:	4619      	mov	r1, r3
 800427e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8004282:	f7ff f94f 	bl	8003524 <WIZCHIP_WRITE>
   wizphy_reset();
 8004286:	f7ff ff01 	bl	800408c <wizphy_reset>
   tmp = getPHYCFGR();
 800428a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800428e:	f7ff f8fd 	bl	800348c <WIZCHIP_READ>
 8004292:	4603      	mov	r3, r0
 8004294:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8004296:	79fb      	ldrb	r3, [r7, #7]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d106      	bne.n	80042aa <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 800429c:	7bfb      	ldrb	r3, [r7, #15]
 800429e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d008      	beq.n	80042b8 <wizphy_setphypmode+0x88>
 80042a6:	2300      	movs	r3, #0
 80042a8:	e008      	b.n	80042bc <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 80042aa:	7bfb      	ldrb	r3, [r7, #15]
 80042ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d001      	beq.n	80042b8 <wizphy_setphypmode+0x88>
 80042b4:	2300      	movs	r3, #0
 80042b6:	e001      	b.n	80042bc <wizphy_setphypmode+0x8c>
   }
   return -1;
 80042b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2206      	movs	r2, #6
 80042d0:	4619      	mov	r1, r3
 80042d2:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80042d6:	f7ff f9d3 	bl	8003680 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	330e      	adds	r3, #14
 80042de:	2204      	movs	r2, #4
 80042e0:	4619      	mov	r1, r3
 80042e2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80042e6:	f7ff f9cb 	bl	8003680 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	330a      	adds	r3, #10
 80042ee:	2204      	movs	r2, #4
 80042f0:	4619      	mov	r1, r3
 80042f2:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80042f6:	f7ff f9c3 	bl	8003680 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	3306      	adds	r3, #6
 80042fe:	2204      	movs	r2, #4
 8004300:	4619      	mov	r1, r3
 8004302:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8004306:	f7ff f9bb 	bl	8003680 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	7c9a      	ldrb	r2, [r3, #18]
 800430e:	4b0b      	ldr	r3, [pc, #44]	; (800433c <wizchip_setnetinfo+0x78>)
 8004310:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	7cda      	ldrb	r2, [r3, #19]
 8004316:	4b09      	ldr	r3, [pc, #36]	; (800433c <wizchip_setnetinfo+0x78>)
 8004318:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	7d1a      	ldrb	r2, [r3, #20]
 800431e:	4b07      	ldr	r3, [pc, #28]	; (800433c <wizchip_setnetinfo+0x78>)
 8004320:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	7d5a      	ldrb	r2, [r3, #21]
 8004326:	4b05      	ldr	r3, [pc, #20]	; (800433c <wizchip_setnetinfo+0x78>)
 8004328:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	7d9a      	ldrb	r2, [r3, #22]
 800432e:	4b04      	ldr	r3, [pc, #16]	; (8004340 <wizchip_setnetinfo+0x7c>)
 8004330:	701a      	strb	r2, [r3, #0]
}
 8004332:	bf00      	nop
 8004334:	3708      	adds	r7, #8
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	20000138 	.word	0x20000138
 8004340:	2000013c 	.word	0x2000013c

08004344 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2206      	movs	r2, #6
 8004350:	4619      	mov	r1, r3
 8004352:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8004356:	f7ff f933 	bl	80035c0 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	330e      	adds	r3, #14
 800435e:	2204      	movs	r2, #4
 8004360:	4619      	mov	r1, r3
 8004362:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004366:	f7ff f92b 	bl	80035c0 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	330a      	adds	r3, #10
 800436e:	2204      	movs	r2, #4
 8004370:	4619      	mov	r1, r3
 8004372:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8004376:	f7ff f923 	bl	80035c0 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	3306      	adds	r3, #6
 800437e:	2204      	movs	r2, #4
 8004380:	4619      	mov	r1, r3
 8004382:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8004386:	f7ff f91b 	bl	80035c0 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 800438a:	4b0c      	ldr	r3, [pc, #48]	; (80043bc <wizchip_getnetinfo+0x78>)
 800438c:	781a      	ldrb	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8004392:	4b0a      	ldr	r3, [pc, #40]	; (80043bc <wizchip_getnetinfo+0x78>)
 8004394:	785a      	ldrb	r2, [r3, #1]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 800439a:	4b08      	ldr	r3, [pc, #32]	; (80043bc <wizchip_getnetinfo+0x78>)
 800439c:	789a      	ldrb	r2, [r3, #2]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 80043a2:	4b06      	ldr	r3, [pc, #24]	; (80043bc <wizchip_getnetinfo+0x78>)
 80043a4:	78da      	ldrb	r2, [r3, #3]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 80043aa:	4b05      	ldr	r3, [pc, #20]	; (80043c0 <wizchip_getnetinfo+0x7c>)
 80043ac:	781a      	ldrb	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	759a      	strb	r2, [r3, #22]
}
 80043b2:	bf00      	nop
 80043b4:	3708      	adds	r7, #8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	20000138 	.word	0x20000138
 80043c0:	2000013c 	.word	0x2000013c

080043c4 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	4603      	mov	r3, r0
 80043cc:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80043ce:	2300      	movs	r3, #0
 80043d0:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 80043d2:	79fb      	ldrb	r3, [r7, #7]
 80043d4:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d002      	beq.n	80043e2 <wizchip_setnetmode+0x1e>
 80043dc:	f04f 33ff 	mov.w	r3, #4294967295
 80043e0:	e00e      	b.n	8004400 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 80043e2:	2000      	movs	r0, #0
 80043e4:	f7ff f852 	bl	800348c <WIZCHIP_READ>
 80043e8:	4603      	mov	r3, r0
 80043ea:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 80043ec:	7bfa      	ldrb	r2, [r7, #15]
 80043ee:	79fb      	ldrb	r3, [r7, #7]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 80043f4:	7bfb      	ldrb	r3, [r7, #15]
 80043f6:	4619      	mov	r1, r3
 80043f8:	2000      	movs	r0, #0
 80043fa:	f7ff f893 	bl	8003524 <WIZCHIP_WRITE>
   return 0;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 800440c:	2000      	movs	r0, #0
 800440e:	f7ff f83d 	bl	800348c <WIZCHIP_READ>
 8004412:	4603      	mov	r3, r0
}
 8004414:	4618      	mov	r0, r3
 8004416:	bd80      	pop	{r7, pc}

08004418 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	4619      	mov	r1, r3
 8004426:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800442a:	f7ff f87b 	bl	8003524 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	885b      	ldrh	r3, [r3, #2]
 8004432:	0a1b      	lsrs	r3, r3, #8
 8004434:	b29b      	uxth	r3, r3
 8004436:	b2db      	uxtb	r3, r3
 8004438:	4619      	mov	r1, r3
 800443a:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 800443e:	f7ff f871 	bl	8003524 <WIZCHIP_WRITE>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	885b      	ldrh	r3, [r3, #2]
 8004446:	b2db      	uxtb	r3, r3
 8004448:	4619      	mov	r1, r3
 800444a:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 800444e:	f7ff f869 	bl	8003524 <WIZCHIP_WRITE>
}
 8004452:	bf00      	nop
 8004454:	3708      	adds	r7, #8
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}

0800445a <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 800445a:	b590      	push	{r4, r7, lr}
 800445c:	b083      	sub	sp, #12
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8004462:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8004466:	f7ff f811 	bl	800348c <WIZCHIP_READ>
 800446a:	4603      	mov	r3, r0
 800446c:	461a      	mov	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8004472:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8004476:	f7ff f809 	bl	800348c <WIZCHIP_READ>
 800447a:	4603      	mov	r3, r0
 800447c:	b29b      	uxth	r3, r3
 800447e:	021b      	lsls	r3, r3, #8
 8004480:	b29c      	uxth	r4, r3
 8004482:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8004486:	f7ff f801 	bl	800348c <WIZCHIP_READ>
 800448a:	4603      	mov	r3, r0
 800448c:	b29b      	uxth	r3, r3
 800448e:	4423      	add	r3, r4
 8004490:	b29a      	uxth	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	805a      	strh	r2, [r3, #2]
}
 8004496:	bf00      	nop
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	bd90      	pop	{r4, r7, pc}
	...

080044a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044a6:	2003      	movs	r0, #3
 80044a8:	f000 f98c 	bl	80047c4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80044ac:	f001 fc40 	bl	8005d30 <HAL_RCC_GetSysClockFreq>
 80044b0:	4602      	mov	r2, r0
 80044b2:	4b15      	ldr	r3, [pc, #84]	; (8004508 <HAL_Init+0x68>)
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	0a1b      	lsrs	r3, r3, #8
 80044b8:	f003 030f 	and.w	r3, r3, #15
 80044bc:	4913      	ldr	r1, [pc, #76]	; (800450c <HAL_Init+0x6c>)
 80044be:	5ccb      	ldrb	r3, [r1, r3]
 80044c0:	f003 031f 	and.w	r3, r3, #31
 80044c4:	fa22 f303 	lsr.w	r3, r2, r3
 80044c8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80044ca:	4b0f      	ldr	r3, [pc, #60]	; (8004508 <HAL_Init+0x68>)
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	f003 030f 	and.w	r3, r3, #15
 80044d2:	4a0e      	ldr	r2, [pc, #56]	; (800450c <HAL_Init+0x6c>)
 80044d4:	5cd3      	ldrb	r3, [r2, r3]
 80044d6:	f003 031f 	and.w	r3, r3, #31
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	fa22 f303 	lsr.w	r3, r2, r3
 80044e0:	4a0b      	ldr	r2, [pc, #44]	; (8004510 <HAL_Init+0x70>)
 80044e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80044e4:	4a0b      	ldr	r2, [pc, #44]	; (8004514 <HAL_Init+0x74>)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80044ea:	2000      	movs	r0, #0
 80044ec:	f000 f814 	bl	8004518 <HAL_InitTick>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e002      	b.n	8004500 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80044fa:	f7fc fd6f 	bl	8000fdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3708      	adds	r7, #8
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	58024400 	.word	0x58024400
 800450c:	08011674 	.word	0x08011674
 8004510:	20000004 	.word	0x20000004
 8004514:	20000000 	.word	0x20000000

08004518 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004520:	4b15      	ldr	r3, [pc, #84]	; (8004578 <HAL_InitTick+0x60>)
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d101      	bne.n	800452c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e021      	b.n	8004570 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800452c:	4b13      	ldr	r3, [pc, #76]	; (800457c <HAL_InitTick+0x64>)
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	4b11      	ldr	r3, [pc, #68]	; (8004578 <HAL_InitTick+0x60>)
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	4619      	mov	r1, r3
 8004536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800453a:	fbb3 f3f1 	udiv	r3, r3, r1
 800453e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004542:	4618      	mov	r0, r3
 8004544:	f000 f971 	bl	800482a <HAL_SYSTICK_Config>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e00e      	b.n	8004570 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2b0f      	cmp	r3, #15
 8004556:	d80a      	bhi.n	800456e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004558:	2200      	movs	r2, #0
 800455a:	6879      	ldr	r1, [r7, #4]
 800455c:	f04f 30ff 	mov.w	r0, #4294967295
 8004560:	f000 f93b 	bl	80047da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004564:	4a06      	ldr	r2, [pc, #24]	; (8004580 <HAL_InitTick+0x68>)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800456a:	2300      	movs	r3, #0
 800456c:	e000      	b.n	8004570 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
}
 8004570:	4618      	mov	r0, r3
 8004572:	3708      	adds	r7, #8
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	20000074 	.word	0x20000074
 800457c:	20000000 	.word	0x20000000
 8004580:	20000070 	.word	0x20000070

08004584 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004584:	b480      	push	{r7}
 8004586:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004588:	4b06      	ldr	r3, [pc, #24]	; (80045a4 <HAL_IncTick+0x20>)
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	461a      	mov	r2, r3
 800458e:	4b06      	ldr	r3, [pc, #24]	; (80045a8 <HAL_IncTick+0x24>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4413      	add	r3, r2
 8004594:	4a04      	ldr	r2, [pc, #16]	; (80045a8 <HAL_IncTick+0x24>)
 8004596:	6013      	str	r3, [r2, #0]
}
 8004598:	bf00      	nop
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	20000074 	.word	0x20000074
 80045a8:	20001304 	.word	0x20001304

080045ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045ac:	b480      	push	{r7}
 80045ae:	af00      	add	r7, sp, #0
  return uwTick;
 80045b0:	4b03      	ldr	r3, [pc, #12]	; (80045c0 <HAL_GetTick+0x14>)
 80045b2:	681b      	ldr	r3, [r3, #0]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	20001304 	.word	0x20001304

080045c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045cc:	f7ff ffee 	bl	80045ac <HAL_GetTick>
 80045d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045dc:	d005      	beq.n	80045ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80045de:	4b0a      	ldr	r3, [pc, #40]	; (8004608 <HAL_Delay+0x44>)
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	461a      	mov	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	4413      	add	r3, r2
 80045e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80045ea:	bf00      	nop
 80045ec:	f7ff ffde 	bl	80045ac <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d8f7      	bhi.n	80045ec <HAL_Delay+0x28>
  {
  }
}
 80045fc:	bf00      	nop
 80045fe:	bf00      	nop
 8004600:	3710      	adds	r7, #16
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	20000074 	.word	0x20000074

0800460c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800460c:	b480      	push	{r7}
 800460e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004610:	4b03      	ldr	r3, [pc, #12]	; (8004620 <HAL_GetREVID+0x14>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	0c1b      	lsrs	r3, r3, #16
}
 8004616:	4618      	mov	r0, r3
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr
 8004620:	5c001000 	.word	0x5c001000

08004624 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f003 0307 	and.w	r3, r3, #7
 8004632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004634:	4b0b      	ldr	r3, [pc, #44]	; (8004664 <__NVIC_SetPriorityGrouping+0x40>)
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800463a:	68ba      	ldr	r2, [r7, #8]
 800463c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004640:	4013      	ands	r3, r2
 8004642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800464c:	4b06      	ldr	r3, [pc, #24]	; (8004668 <__NVIC_SetPriorityGrouping+0x44>)
 800464e:	4313      	orrs	r3, r2
 8004650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004652:	4a04      	ldr	r2, [pc, #16]	; (8004664 <__NVIC_SetPriorityGrouping+0x40>)
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	60d3      	str	r3, [r2, #12]
}
 8004658:	bf00      	nop
 800465a:	3714      	adds	r7, #20
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr
 8004664:	e000ed00 	.word	0xe000ed00
 8004668:	05fa0000 	.word	0x05fa0000

0800466c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800466c:	b480      	push	{r7}
 800466e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004670:	4b04      	ldr	r3, [pc, #16]	; (8004684 <__NVIC_GetPriorityGrouping+0x18>)
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	0a1b      	lsrs	r3, r3, #8
 8004676:	f003 0307 	and.w	r3, r3, #7
}
 800467a:	4618      	mov	r0, r3
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr
 8004684:	e000ed00 	.word	0xe000ed00

08004688 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	4603      	mov	r3, r0
 8004690:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004692:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004696:	2b00      	cmp	r3, #0
 8004698:	db0b      	blt.n	80046b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800469a:	88fb      	ldrh	r3, [r7, #6]
 800469c:	f003 021f 	and.w	r2, r3, #31
 80046a0:	4907      	ldr	r1, [pc, #28]	; (80046c0 <__NVIC_EnableIRQ+0x38>)
 80046a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046a6:	095b      	lsrs	r3, r3, #5
 80046a8:	2001      	movs	r0, #1
 80046aa:	fa00 f202 	lsl.w	r2, r0, r2
 80046ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80046b2:	bf00      	nop
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	e000e100 	.word	0xe000e100

080046c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	4603      	mov	r3, r0
 80046cc:	6039      	str	r1, [r7, #0]
 80046ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80046d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	db0a      	blt.n	80046ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	b2da      	uxtb	r2, r3
 80046dc:	490c      	ldr	r1, [pc, #48]	; (8004710 <__NVIC_SetPriority+0x4c>)
 80046de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046e2:	0112      	lsls	r2, r2, #4
 80046e4:	b2d2      	uxtb	r2, r2
 80046e6:	440b      	add	r3, r1
 80046e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046ec:	e00a      	b.n	8004704 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	b2da      	uxtb	r2, r3
 80046f2:	4908      	ldr	r1, [pc, #32]	; (8004714 <__NVIC_SetPriority+0x50>)
 80046f4:	88fb      	ldrh	r3, [r7, #6]
 80046f6:	f003 030f 	and.w	r3, r3, #15
 80046fa:	3b04      	subs	r3, #4
 80046fc:	0112      	lsls	r2, r2, #4
 80046fe:	b2d2      	uxtb	r2, r2
 8004700:	440b      	add	r3, r1
 8004702:	761a      	strb	r2, [r3, #24]
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr
 8004710:	e000e100 	.word	0xe000e100
 8004714:	e000ed00 	.word	0xe000ed00

08004718 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004718:	b480      	push	{r7}
 800471a:	b089      	sub	sp, #36	; 0x24
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f003 0307 	and.w	r3, r3, #7
 800472a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	f1c3 0307 	rsb	r3, r3, #7
 8004732:	2b04      	cmp	r3, #4
 8004734:	bf28      	it	cs
 8004736:	2304      	movcs	r3, #4
 8004738:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	3304      	adds	r3, #4
 800473e:	2b06      	cmp	r3, #6
 8004740:	d902      	bls.n	8004748 <NVIC_EncodePriority+0x30>
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	3b03      	subs	r3, #3
 8004746:	e000      	b.n	800474a <NVIC_EncodePriority+0x32>
 8004748:	2300      	movs	r3, #0
 800474a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800474c:	f04f 32ff 	mov.w	r2, #4294967295
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	fa02 f303 	lsl.w	r3, r2, r3
 8004756:	43da      	mvns	r2, r3
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	401a      	ands	r2, r3
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004760:	f04f 31ff 	mov.w	r1, #4294967295
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	fa01 f303 	lsl.w	r3, r1, r3
 800476a:	43d9      	mvns	r1, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004770:	4313      	orrs	r3, r2
         );
}
 8004772:	4618      	mov	r0, r3
 8004774:	3724      	adds	r7, #36	; 0x24
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
	...

08004780 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	3b01      	subs	r3, #1
 800478c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004790:	d301      	bcc.n	8004796 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004792:	2301      	movs	r3, #1
 8004794:	e00f      	b.n	80047b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004796:	4a0a      	ldr	r2, [pc, #40]	; (80047c0 <SysTick_Config+0x40>)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	3b01      	subs	r3, #1
 800479c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800479e:	210f      	movs	r1, #15
 80047a0:	f04f 30ff 	mov.w	r0, #4294967295
 80047a4:	f7ff ff8e 	bl	80046c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047a8:	4b05      	ldr	r3, [pc, #20]	; (80047c0 <SysTick_Config+0x40>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047ae:	4b04      	ldr	r3, [pc, #16]	; (80047c0 <SysTick_Config+0x40>)
 80047b0:	2207      	movs	r2, #7
 80047b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3708      	adds	r7, #8
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	e000e010 	.word	0xe000e010

080047c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f7ff ff29 	bl	8004624 <__NVIC_SetPriorityGrouping>
}
 80047d2:	bf00      	nop
 80047d4:	3708      	adds	r7, #8
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047da:	b580      	push	{r7, lr}
 80047dc:	b086      	sub	sp, #24
 80047de:	af00      	add	r7, sp, #0
 80047e0:	4603      	mov	r3, r0
 80047e2:	60b9      	str	r1, [r7, #8]
 80047e4:	607a      	str	r2, [r7, #4]
 80047e6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80047e8:	f7ff ff40 	bl	800466c <__NVIC_GetPriorityGrouping>
 80047ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	68b9      	ldr	r1, [r7, #8]
 80047f2:	6978      	ldr	r0, [r7, #20]
 80047f4:	f7ff ff90 	bl	8004718 <NVIC_EncodePriority>
 80047f8:	4602      	mov	r2, r0
 80047fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80047fe:	4611      	mov	r1, r2
 8004800:	4618      	mov	r0, r3
 8004802:	f7ff ff5f 	bl	80046c4 <__NVIC_SetPriority>
}
 8004806:	bf00      	nop
 8004808:	3718      	adds	r7, #24
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b082      	sub	sp, #8
 8004812:	af00      	add	r7, sp, #0
 8004814:	4603      	mov	r3, r0
 8004816:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004818:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800481c:	4618      	mov	r0, r3
 800481e:	f7ff ff33 	bl	8004688 <__NVIC_EnableIRQ>
}
 8004822:	bf00      	nop
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b082      	sub	sp, #8
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f7ff ffa4 	bl	8004780 <SysTick_Config>
 8004838:	4603      	mov	r3, r0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3708      	adds	r7, #8
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
	...

08004844 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e205      	b.n	8004c62 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b02      	cmp	r3, #2
 8004860:	d004      	beq.n	800486c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2280      	movs	r2, #128	; 0x80
 8004866:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e1fa      	b.n	8004c62 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a8c      	ldr	r2, [pc, #560]	; (8004aa4 <HAL_DMA_Abort_IT+0x260>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d04a      	beq.n	800490c <HAL_DMA_Abort_IT+0xc8>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a8b      	ldr	r2, [pc, #556]	; (8004aa8 <HAL_DMA_Abort_IT+0x264>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d045      	beq.n	800490c <HAL_DMA_Abort_IT+0xc8>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a89      	ldr	r2, [pc, #548]	; (8004aac <HAL_DMA_Abort_IT+0x268>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d040      	beq.n	800490c <HAL_DMA_Abort_IT+0xc8>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a88      	ldr	r2, [pc, #544]	; (8004ab0 <HAL_DMA_Abort_IT+0x26c>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d03b      	beq.n	800490c <HAL_DMA_Abort_IT+0xc8>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a86      	ldr	r2, [pc, #536]	; (8004ab4 <HAL_DMA_Abort_IT+0x270>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d036      	beq.n	800490c <HAL_DMA_Abort_IT+0xc8>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a85      	ldr	r2, [pc, #532]	; (8004ab8 <HAL_DMA_Abort_IT+0x274>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d031      	beq.n	800490c <HAL_DMA_Abort_IT+0xc8>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a83      	ldr	r2, [pc, #524]	; (8004abc <HAL_DMA_Abort_IT+0x278>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d02c      	beq.n	800490c <HAL_DMA_Abort_IT+0xc8>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a82      	ldr	r2, [pc, #520]	; (8004ac0 <HAL_DMA_Abort_IT+0x27c>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d027      	beq.n	800490c <HAL_DMA_Abort_IT+0xc8>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a80      	ldr	r2, [pc, #512]	; (8004ac4 <HAL_DMA_Abort_IT+0x280>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d022      	beq.n	800490c <HAL_DMA_Abort_IT+0xc8>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a7f      	ldr	r2, [pc, #508]	; (8004ac8 <HAL_DMA_Abort_IT+0x284>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d01d      	beq.n	800490c <HAL_DMA_Abort_IT+0xc8>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a7d      	ldr	r2, [pc, #500]	; (8004acc <HAL_DMA_Abort_IT+0x288>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d018      	beq.n	800490c <HAL_DMA_Abort_IT+0xc8>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a7c      	ldr	r2, [pc, #496]	; (8004ad0 <HAL_DMA_Abort_IT+0x28c>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d013      	beq.n	800490c <HAL_DMA_Abort_IT+0xc8>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a7a      	ldr	r2, [pc, #488]	; (8004ad4 <HAL_DMA_Abort_IT+0x290>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d00e      	beq.n	800490c <HAL_DMA_Abort_IT+0xc8>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a79      	ldr	r2, [pc, #484]	; (8004ad8 <HAL_DMA_Abort_IT+0x294>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d009      	beq.n	800490c <HAL_DMA_Abort_IT+0xc8>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a77      	ldr	r2, [pc, #476]	; (8004adc <HAL_DMA_Abort_IT+0x298>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d004      	beq.n	800490c <HAL_DMA_Abort_IT+0xc8>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a76      	ldr	r2, [pc, #472]	; (8004ae0 <HAL_DMA_Abort_IT+0x29c>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d101      	bne.n	8004910 <HAL_DMA_Abort_IT+0xcc>
 800490c:	2301      	movs	r3, #1
 800490e:	e000      	b.n	8004912 <HAL_DMA_Abort_IT+0xce>
 8004910:	2300      	movs	r3, #0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d065      	beq.n	80049e2 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2204      	movs	r2, #4
 800491a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a60      	ldr	r2, [pc, #384]	; (8004aa4 <HAL_DMA_Abort_IT+0x260>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d04a      	beq.n	80049be <HAL_DMA_Abort_IT+0x17a>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a5e      	ldr	r2, [pc, #376]	; (8004aa8 <HAL_DMA_Abort_IT+0x264>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d045      	beq.n	80049be <HAL_DMA_Abort_IT+0x17a>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a5d      	ldr	r2, [pc, #372]	; (8004aac <HAL_DMA_Abort_IT+0x268>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d040      	beq.n	80049be <HAL_DMA_Abort_IT+0x17a>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a5b      	ldr	r2, [pc, #364]	; (8004ab0 <HAL_DMA_Abort_IT+0x26c>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d03b      	beq.n	80049be <HAL_DMA_Abort_IT+0x17a>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a5a      	ldr	r2, [pc, #360]	; (8004ab4 <HAL_DMA_Abort_IT+0x270>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d036      	beq.n	80049be <HAL_DMA_Abort_IT+0x17a>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a58      	ldr	r2, [pc, #352]	; (8004ab8 <HAL_DMA_Abort_IT+0x274>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d031      	beq.n	80049be <HAL_DMA_Abort_IT+0x17a>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a57      	ldr	r2, [pc, #348]	; (8004abc <HAL_DMA_Abort_IT+0x278>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d02c      	beq.n	80049be <HAL_DMA_Abort_IT+0x17a>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a55      	ldr	r2, [pc, #340]	; (8004ac0 <HAL_DMA_Abort_IT+0x27c>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d027      	beq.n	80049be <HAL_DMA_Abort_IT+0x17a>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a54      	ldr	r2, [pc, #336]	; (8004ac4 <HAL_DMA_Abort_IT+0x280>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d022      	beq.n	80049be <HAL_DMA_Abort_IT+0x17a>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a52      	ldr	r2, [pc, #328]	; (8004ac8 <HAL_DMA_Abort_IT+0x284>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d01d      	beq.n	80049be <HAL_DMA_Abort_IT+0x17a>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a51      	ldr	r2, [pc, #324]	; (8004acc <HAL_DMA_Abort_IT+0x288>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d018      	beq.n	80049be <HAL_DMA_Abort_IT+0x17a>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a4f      	ldr	r2, [pc, #316]	; (8004ad0 <HAL_DMA_Abort_IT+0x28c>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d013      	beq.n	80049be <HAL_DMA_Abort_IT+0x17a>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a4e      	ldr	r2, [pc, #312]	; (8004ad4 <HAL_DMA_Abort_IT+0x290>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d00e      	beq.n	80049be <HAL_DMA_Abort_IT+0x17a>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a4c      	ldr	r2, [pc, #304]	; (8004ad8 <HAL_DMA_Abort_IT+0x294>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d009      	beq.n	80049be <HAL_DMA_Abort_IT+0x17a>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a4b      	ldr	r2, [pc, #300]	; (8004adc <HAL_DMA_Abort_IT+0x298>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d004      	beq.n	80049be <HAL_DMA_Abort_IT+0x17a>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a49      	ldr	r2, [pc, #292]	; (8004ae0 <HAL_DMA_Abort_IT+0x29c>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d108      	bne.n	80049d0 <HAL_DMA_Abort_IT+0x18c>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f022 0201 	bic.w	r2, r2, #1
 80049cc:	601a      	str	r2, [r3, #0]
 80049ce:	e147      	b.n	8004c60 <HAL_DMA_Abort_IT+0x41c>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f022 0201 	bic.w	r2, r2, #1
 80049de:	601a      	str	r2, [r3, #0]
 80049e0:	e13e      	b.n	8004c60 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f022 020e 	bic.w	r2, r2, #14
 80049f0:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a2b      	ldr	r2, [pc, #172]	; (8004aa4 <HAL_DMA_Abort_IT+0x260>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d04a      	beq.n	8004a92 <HAL_DMA_Abort_IT+0x24e>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a29      	ldr	r2, [pc, #164]	; (8004aa8 <HAL_DMA_Abort_IT+0x264>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d045      	beq.n	8004a92 <HAL_DMA_Abort_IT+0x24e>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a28      	ldr	r2, [pc, #160]	; (8004aac <HAL_DMA_Abort_IT+0x268>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d040      	beq.n	8004a92 <HAL_DMA_Abort_IT+0x24e>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a26      	ldr	r2, [pc, #152]	; (8004ab0 <HAL_DMA_Abort_IT+0x26c>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d03b      	beq.n	8004a92 <HAL_DMA_Abort_IT+0x24e>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a25      	ldr	r2, [pc, #148]	; (8004ab4 <HAL_DMA_Abort_IT+0x270>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d036      	beq.n	8004a92 <HAL_DMA_Abort_IT+0x24e>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a23      	ldr	r2, [pc, #140]	; (8004ab8 <HAL_DMA_Abort_IT+0x274>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d031      	beq.n	8004a92 <HAL_DMA_Abort_IT+0x24e>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a22      	ldr	r2, [pc, #136]	; (8004abc <HAL_DMA_Abort_IT+0x278>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d02c      	beq.n	8004a92 <HAL_DMA_Abort_IT+0x24e>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a20      	ldr	r2, [pc, #128]	; (8004ac0 <HAL_DMA_Abort_IT+0x27c>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d027      	beq.n	8004a92 <HAL_DMA_Abort_IT+0x24e>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a1f      	ldr	r2, [pc, #124]	; (8004ac4 <HAL_DMA_Abort_IT+0x280>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d022      	beq.n	8004a92 <HAL_DMA_Abort_IT+0x24e>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a1d      	ldr	r2, [pc, #116]	; (8004ac8 <HAL_DMA_Abort_IT+0x284>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d01d      	beq.n	8004a92 <HAL_DMA_Abort_IT+0x24e>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a1c      	ldr	r2, [pc, #112]	; (8004acc <HAL_DMA_Abort_IT+0x288>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d018      	beq.n	8004a92 <HAL_DMA_Abort_IT+0x24e>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a1a      	ldr	r2, [pc, #104]	; (8004ad0 <HAL_DMA_Abort_IT+0x28c>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d013      	beq.n	8004a92 <HAL_DMA_Abort_IT+0x24e>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a19      	ldr	r2, [pc, #100]	; (8004ad4 <HAL_DMA_Abort_IT+0x290>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d00e      	beq.n	8004a92 <HAL_DMA_Abort_IT+0x24e>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a17      	ldr	r2, [pc, #92]	; (8004ad8 <HAL_DMA_Abort_IT+0x294>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d009      	beq.n	8004a92 <HAL_DMA_Abort_IT+0x24e>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a16      	ldr	r2, [pc, #88]	; (8004adc <HAL_DMA_Abort_IT+0x298>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d004      	beq.n	8004a92 <HAL_DMA_Abort_IT+0x24e>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a14      	ldr	r2, [pc, #80]	; (8004ae0 <HAL_DMA_Abort_IT+0x29c>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d128      	bne.n	8004ae4 <HAL_DMA_Abort_IT+0x2a0>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f022 0201 	bic.w	r2, r2, #1
 8004aa0:	601a      	str	r2, [r3, #0]
 8004aa2:	e027      	b.n	8004af4 <HAL_DMA_Abort_IT+0x2b0>
 8004aa4:	40020010 	.word	0x40020010
 8004aa8:	40020028 	.word	0x40020028
 8004aac:	40020040 	.word	0x40020040
 8004ab0:	40020058 	.word	0x40020058
 8004ab4:	40020070 	.word	0x40020070
 8004ab8:	40020088 	.word	0x40020088
 8004abc:	400200a0 	.word	0x400200a0
 8004ac0:	400200b8 	.word	0x400200b8
 8004ac4:	40020410 	.word	0x40020410
 8004ac8:	40020428 	.word	0x40020428
 8004acc:	40020440 	.word	0x40020440
 8004ad0:	40020458 	.word	0x40020458
 8004ad4:	40020470 	.word	0x40020470
 8004ad8:	40020488 	.word	0x40020488
 8004adc:	400204a0 	.word	0x400204a0
 8004ae0:	400204b8 	.word	0x400204b8
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f022 0201 	bic.w	r2, r2, #1
 8004af2:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a5c      	ldr	r2, [pc, #368]	; (8004c6c <HAL_DMA_Abort_IT+0x428>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d072      	beq.n	8004be4 <HAL_DMA_Abort_IT+0x3a0>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a5b      	ldr	r2, [pc, #364]	; (8004c70 <HAL_DMA_Abort_IT+0x42c>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d06d      	beq.n	8004be4 <HAL_DMA_Abort_IT+0x3a0>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a59      	ldr	r2, [pc, #356]	; (8004c74 <HAL_DMA_Abort_IT+0x430>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d068      	beq.n	8004be4 <HAL_DMA_Abort_IT+0x3a0>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a58      	ldr	r2, [pc, #352]	; (8004c78 <HAL_DMA_Abort_IT+0x434>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d063      	beq.n	8004be4 <HAL_DMA_Abort_IT+0x3a0>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a56      	ldr	r2, [pc, #344]	; (8004c7c <HAL_DMA_Abort_IT+0x438>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d05e      	beq.n	8004be4 <HAL_DMA_Abort_IT+0x3a0>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a55      	ldr	r2, [pc, #340]	; (8004c80 <HAL_DMA_Abort_IT+0x43c>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d059      	beq.n	8004be4 <HAL_DMA_Abort_IT+0x3a0>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a53      	ldr	r2, [pc, #332]	; (8004c84 <HAL_DMA_Abort_IT+0x440>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d054      	beq.n	8004be4 <HAL_DMA_Abort_IT+0x3a0>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a52      	ldr	r2, [pc, #328]	; (8004c88 <HAL_DMA_Abort_IT+0x444>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d04f      	beq.n	8004be4 <HAL_DMA_Abort_IT+0x3a0>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a50      	ldr	r2, [pc, #320]	; (8004c8c <HAL_DMA_Abort_IT+0x448>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d04a      	beq.n	8004be4 <HAL_DMA_Abort_IT+0x3a0>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a4f      	ldr	r2, [pc, #316]	; (8004c90 <HAL_DMA_Abort_IT+0x44c>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d045      	beq.n	8004be4 <HAL_DMA_Abort_IT+0x3a0>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a4d      	ldr	r2, [pc, #308]	; (8004c94 <HAL_DMA_Abort_IT+0x450>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d040      	beq.n	8004be4 <HAL_DMA_Abort_IT+0x3a0>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a4c      	ldr	r2, [pc, #304]	; (8004c98 <HAL_DMA_Abort_IT+0x454>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d03b      	beq.n	8004be4 <HAL_DMA_Abort_IT+0x3a0>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a4a      	ldr	r2, [pc, #296]	; (8004c9c <HAL_DMA_Abort_IT+0x458>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d036      	beq.n	8004be4 <HAL_DMA_Abort_IT+0x3a0>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a49      	ldr	r2, [pc, #292]	; (8004ca0 <HAL_DMA_Abort_IT+0x45c>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d031      	beq.n	8004be4 <HAL_DMA_Abort_IT+0x3a0>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a47      	ldr	r2, [pc, #284]	; (8004ca4 <HAL_DMA_Abort_IT+0x460>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d02c      	beq.n	8004be4 <HAL_DMA_Abort_IT+0x3a0>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a46      	ldr	r2, [pc, #280]	; (8004ca8 <HAL_DMA_Abort_IT+0x464>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d027      	beq.n	8004be4 <HAL_DMA_Abort_IT+0x3a0>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a44      	ldr	r2, [pc, #272]	; (8004cac <HAL_DMA_Abort_IT+0x468>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d022      	beq.n	8004be4 <HAL_DMA_Abort_IT+0x3a0>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a43      	ldr	r2, [pc, #268]	; (8004cb0 <HAL_DMA_Abort_IT+0x46c>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d01d      	beq.n	8004be4 <HAL_DMA_Abort_IT+0x3a0>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a41      	ldr	r2, [pc, #260]	; (8004cb4 <HAL_DMA_Abort_IT+0x470>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d018      	beq.n	8004be4 <HAL_DMA_Abort_IT+0x3a0>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a40      	ldr	r2, [pc, #256]	; (8004cb8 <HAL_DMA_Abort_IT+0x474>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d013      	beq.n	8004be4 <HAL_DMA_Abort_IT+0x3a0>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a3e      	ldr	r2, [pc, #248]	; (8004cbc <HAL_DMA_Abort_IT+0x478>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d00e      	beq.n	8004be4 <HAL_DMA_Abort_IT+0x3a0>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a3d      	ldr	r2, [pc, #244]	; (8004cc0 <HAL_DMA_Abort_IT+0x47c>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d009      	beq.n	8004be4 <HAL_DMA_Abort_IT+0x3a0>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a3b      	ldr	r2, [pc, #236]	; (8004cc4 <HAL_DMA_Abort_IT+0x480>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d004      	beq.n	8004be4 <HAL_DMA_Abort_IT+0x3a0>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a3a      	ldr	r2, [pc, #232]	; (8004cc8 <HAL_DMA_Abort_IT+0x484>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d101      	bne.n	8004be8 <HAL_DMA_Abort_IT+0x3a4>
 8004be4:	2301      	movs	r3, #1
 8004be6:	e000      	b.n	8004bea <HAL_DMA_Abort_IT+0x3a6>
 8004be8:	2300      	movs	r3, #0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d028      	beq.n	8004c40 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bf8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bfc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c02:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c08:	f003 031f 	and.w	r3, r3, #31
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	409a      	lsls	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004c1c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00c      	beq.n	8004c40 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c34:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004c3e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d003      	beq.n	8004c60 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	40020010 	.word	0x40020010
 8004c70:	40020028 	.word	0x40020028
 8004c74:	40020040 	.word	0x40020040
 8004c78:	40020058 	.word	0x40020058
 8004c7c:	40020070 	.word	0x40020070
 8004c80:	40020088 	.word	0x40020088
 8004c84:	400200a0 	.word	0x400200a0
 8004c88:	400200b8 	.word	0x400200b8
 8004c8c:	40020410 	.word	0x40020410
 8004c90:	40020428 	.word	0x40020428
 8004c94:	40020440 	.word	0x40020440
 8004c98:	40020458 	.word	0x40020458
 8004c9c:	40020470 	.word	0x40020470
 8004ca0:	40020488 	.word	0x40020488
 8004ca4:	400204a0 	.word	0x400204a0
 8004ca8:	400204b8 	.word	0x400204b8
 8004cac:	58025408 	.word	0x58025408
 8004cb0:	5802541c 	.word	0x5802541c
 8004cb4:	58025430 	.word	0x58025430
 8004cb8:	58025444 	.word	0x58025444
 8004cbc:	58025458 	.word	0x58025458
 8004cc0:	5802546c 	.word	0x5802546c
 8004cc4:	58025480 	.word	0x58025480
 8004cc8:	58025494 	.word	0x58025494

08004ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b089      	sub	sp, #36	; 0x24
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004cda:	4b89      	ldr	r3, [pc, #548]	; (8004f00 <HAL_GPIO_Init+0x234>)
 8004cdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004cde:	e194      	b.n	800500a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	2101      	movs	r1, #1
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8004cec:	4013      	ands	r3, r2
 8004cee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f000 8186 	beq.w	8005004 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d00b      	beq.n	8004d18 <HAL_GPIO_Init+0x4c>
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d007      	beq.n	8004d18 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d0c:	2b11      	cmp	r3, #17
 8004d0e:	d003      	beq.n	8004d18 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	2b12      	cmp	r3, #18
 8004d16:	d130      	bne.n	8004d7a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	2203      	movs	r2, #3
 8004d24:	fa02 f303 	lsl.w	r3, r2, r3
 8004d28:	43db      	mvns	r3, r3
 8004d2a:	69ba      	ldr	r2, [r7, #24]
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	68da      	ldr	r2, [r3, #12]
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	005b      	lsls	r3, r3, #1
 8004d38:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3c:	69ba      	ldr	r2, [r7, #24]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	69ba      	ldr	r2, [r7, #24]
 8004d46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d4e:	2201      	movs	r2, #1
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	fa02 f303 	lsl.w	r3, r2, r3
 8004d56:	43db      	mvns	r3, r3
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	091b      	lsrs	r3, r3, #4
 8004d64:	f003 0201 	and.w	r2, r3, #1
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6e:	69ba      	ldr	r2, [r7, #24]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	69ba      	ldr	r2, [r7, #24]
 8004d78:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	005b      	lsls	r3, r3, #1
 8004d84:	2203      	movs	r2, #3
 8004d86:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8a:	43db      	mvns	r3, r3
 8004d8c:	69ba      	ldr	r2, [r7, #24]
 8004d8e:	4013      	ands	r3, r2
 8004d90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	689a      	ldr	r2, [r3, #8]
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	005b      	lsls	r3, r3, #1
 8004d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9e:	69ba      	ldr	r2, [r7, #24]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	69ba      	ldr	r2, [r7, #24]
 8004da8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d003      	beq.n	8004dba <HAL_GPIO_Init+0xee>
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	2b12      	cmp	r3, #18
 8004db8:	d123      	bne.n	8004e02 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	08da      	lsrs	r2, r3, #3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	3208      	adds	r2, #8
 8004dc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	f003 0307 	and.w	r3, r3, #7
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	220f      	movs	r2, #15
 8004dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd6:	43db      	mvns	r3, r3
 8004dd8:	69ba      	ldr	r2, [r7, #24]
 8004dda:	4013      	ands	r3, r2
 8004ddc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	691a      	ldr	r2, [r3, #16]
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	f003 0307 	and.w	r3, r3, #7
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	fa02 f303 	lsl.w	r3, r2, r3
 8004dee:	69ba      	ldr	r2, [r7, #24]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	08da      	lsrs	r2, r3, #3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	3208      	adds	r2, #8
 8004dfc:	69b9      	ldr	r1, [r7, #24]
 8004dfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	005b      	lsls	r3, r3, #1
 8004e0c:	2203      	movs	r2, #3
 8004e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e12:	43db      	mvns	r3, r3
 8004e14:	69ba      	ldr	r2, [r7, #24]
 8004e16:	4013      	ands	r3, r2
 8004e18:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f003 0203 	and.w	r2, r3, #3
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	005b      	lsls	r3, r3, #1
 8004e26:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2a:	69ba      	ldr	r2, [r7, #24]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	69ba      	ldr	r2, [r7, #24]
 8004e34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	f000 80e0 	beq.w	8005004 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e44:	4b2f      	ldr	r3, [pc, #188]	; (8004f04 <HAL_GPIO_Init+0x238>)
 8004e46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e4a:	4a2e      	ldr	r2, [pc, #184]	; (8004f04 <HAL_GPIO_Init+0x238>)
 8004e4c:	f043 0302 	orr.w	r3, r3, #2
 8004e50:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004e54:	4b2b      	ldr	r3, [pc, #172]	; (8004f04 <HAL_GPIO_Init+0x238>)
 8004e56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e5a:	f003 0302 	and.w	r3, r3, #2
 8004e5e:	60fb      	str	r3, [r7, #12]
 8004e60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e62:	4a29      	ldr	r2, [pc, #164]	; (8004f08 <HAL_GPIO_Init+0x23c>)
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	089b      	lsrs	r3, r3, #2
 8004e68:	3302      	adds	r3, #2
 8004e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	f003 0303 	and.w	r3, r3, #3
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	220f      	movs	r2, #15
 8004e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7e:	43db      	mvns	r3, r3
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	4013      	ands	r3, r2
 8004e84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a20      	ldr	r2, [pc, #128]	; (8004f0c <HAL_GPIO_Init+0x240>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d052      	beq.n	8004f34 <HAL_GPIO_Init+0x268>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a1f      	ldr	r2, [pc, #124]	; (8004f10 <HAL_GPIO_Init+0x244>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d031      	beq.n	8004efa <HAL_GPIO_Init+0x22e>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a1e      	ldr	r2, [pc, #120]	; (8004f14 <HAL_GPIO_Init+0x248>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d02b      	beq.n	8004ef6 <HAL_GPIO_Init+0x22a>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a1d      	ldr	r2, [pc, #116]	; (8004f18 <HAL_GPIO_Init+0x24c>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d025      	beq.n	8004ef2 <HAL_GPIO_Init+0x226>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a1c      	ldr	r2, [pc, #112]	; (8004f1c <HAL_GPIO_Init+0x250>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d01f      	beq.n	8004eee <HAL_GPIO_Init+0x222>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a1b      	ldr	r2, [pc, #108]	; (8004f20 <HAL_GPIO_Init+0x254>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d019      	beq.n	8004eea <HAL_GPIO_Init+0x21e>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a1a      	ldr	r2, [pc, #104]	; (8004f24 <HAL_GPIO_Init+0x258>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d013      	beq.n	8004ee6 <HAL_GPIO_Init+0x21a>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a19      	ldr	r2, [pc, #100]	; (8004f28 <HAL_GPIO_Init+0x25c>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d00d      	beq.n	8004ee2 <HAL_GPIO_Init+0x216>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a18      	ldr	r2, [pc, #96]	; (8004f2c <HAL_GPIO_Init+0x260>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d007      	beq.n	8004ede <HAL_GPIO_Init+0x212>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a17      	ldr	r2, [pc, #92]	; (8004f30 <HAL_GPIO_Init+0x264>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d101      	bne.n	8004eda <HAL_GPIO_Init+0x20e>
 8004ed6:	2309      	movs	r3, #9
 8004ed8:	e02d      	b.n	8004f36 <HAL_GPIO_Init+0x26a>
 8004eda:	230a      	movs	r3, #10
 8004edc:	e02b      	b.n	8004f36 <HAL_GPIO_Init+0x26a>
 8004ede:	2308      	movs	r3, #8
 8004ee0:	e029      	b.n	8004f36 <HAL_GPIO_Init+0x26a>
 8004ee2:	2307      	movs	r3, #7
 8004ee4:	e027      	b.n	8004f36 <HAL_GPIO_Init+0x26a>
 8004ee6:	2306      	movs	r3, #6
 8004ee8:	e025      	b.n	8004f36 <HAL_GPIO_Init+0x26a>
 8004eea:	2305      	movs	r3, #5
 8004eec:	e023      	b.n	8004f36 <HAL_GPIO_Init+0x26a>
 8004eee:	2304      	movs	r3, #4
 8004ef0:	e021      	b.n	8004f36 <HAL_GPIO_Init+0x26a>
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e01f      	b.n	8004f36 <HAL_GPIO_Init+0x26a>
 8004ef6:	2302      	movs	r3, #2
 8004ef8:	e01d      	b.n	8004f36 <HAL_GPIO_Init+0x26a>
 8004efa:	2301      	movs	r3, #1
 8004efc:	e01b      	b.n	8004f36 <HAL_GPIO_Init+0x26a>
 8004efe:	bf00      	nop
 8004f00:	58000080 	.word	0x58000080
 8004f04:	58024400 	.word	0x58024400
 8004f08:	58000400 	.word	0x58000400
 8004f0c:	58020000 	.word	0x58020000
 8004f10:	58020400 	.word	0x58020400
 8004f14:	58020800 	.word	0x58020800
 8004f18:	58020c00 	.word	0x58020c00
 8004f1c:	58021000 	.word	0x58021000
 8004f20:	58021400 	.word	0x58021400
 8004f24:	58021800 	.word	0x58021800
 8004f28:	58021c00 	.word	0x58021c00
 8004f2c:	58022000 	.word	0x58022000
 8004f30:	58022400 	.word	0x58022400
 8004f34:	2300      	movs	r3, #0
 8004f36:	69fa      	ldr	r2, [r7, #28]
 8004f38:	f002 0203 	and.w	r2, r2, #3
 8004f3c:	0092      	lsls	r2, r2, #2
 8004f3e:	4093      	lsls	r3, r2
 8004f40:	69ba      	ldr	r2, [r7, #24]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f46:	4938      	ldr	r1, [pc, #224]	; (8005028 <HAL_GPIO_Init+0x35c>)
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	089b      	lsrs	r3, r3, #2
 8004f4c:	3302      	adds	r3, #2
 8004f4e:	69ba      	ldr	r2, [r7, #24]
 8004f50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	43db      	mvns	r3, r3
 8004f5e:	69ba      	ldr	r2, [r7, #24]
 8004f60:	4013      	ands	r3, r2
 8004f62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d003      	beq.n	8004f78 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004f70:	69ba      	ldr	r2, [r7, #24]
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	69ba      	ldr	r2, [r7, #24]
 8004f7c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	43db      	mvns	r3, r3
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d003      	beq.n	8004fa2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004f9a:	69ba      	ldr	r2, [r7, #24]
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	43db      	mvns	r3, r3
 8004fb4:	69ba      	ldr	r2, [r7, #24]
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d003      	beq.n	8004fce <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004fc6:	69ba      	ldr	r2, [r7, #24]
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004fce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004fd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	43db      	mvns	r3, r3
 8004fe2:	69ba      	ldr	r2, [r7, #24]
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d003      	beq.n	8004ffc <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004ff4:	69ba      	ldr	r2, [r7, #24]
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004ffc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	3301      	adds	r3, #1
 8005008:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	fa22 f303 	lsr.w	r3, r2, r3
 8005014:	2b00      	cmp	r3, #0
 8005016:	f47f ae63 	bne.w	8004ce0 <HAL_GPIO_Init+0x14>
  }
}
 800501a:	bf00      	nop
 800501c:	bf00      	nop
 800501e:	3724      	adds	r7, #36	; 0x24
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr
 8005028:	58000400 	.word	0x58000400

0800502c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	460b      	mov	r3, r1
 8005036:	807b      	strh	r3, [r7, #2]
 8005038:	4613      	mov	r3, r2
 800503a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800503c:	787b      	ldrb	r3, [r7, #1]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d003      	beq.n	800504a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005042:	887a      	ldrh	r2, [r7, #2]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005048:	e003      	b.n	8005052 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800504a:	887b      	ldrh	r3, [r7, #2]
 800504c:	041a      	lsls	r2, r3, #16
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	619a      	str	r2, [r3, #24]
}
 8005052:	bf00      	nop
 8005054:	370c      	adds	r7, #12
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr

0800505e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800505e:	b480      	push	{r7}
 8005060:	b083      	sub	sp, #12
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
 8005066:	460b      	mov	r3, r1
 8005068:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	695a      	ldr	r2, [r3, #20]
 800506e:	887b      	ldrh	r3, [r7, #2]
 8005070:	401a      	ands	r2, r3
 8005072:	887b      	ldrh	r3, [r7, #2]
 8005074:	429a      	cmp	r2, r3
 8005076:	d104      	bne.n	8005082 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005078:	887b      	ldrh	r3, [r7, #2]
 800507a:	041a      	lsls	r2, r3, #16
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8005080:	e002      	b.n	8005088 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8005082:	887a      	ldrh	r2, [r7, #2]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	619a      	str	r2, [r3, #24]
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800509c:	4a08      	ldr	r2, [pc, #32]	; (80050c0 <HAL_HSEM_FastTake+0x2c>)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	3320      	adds	r3, #32
 80050a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050a6:	4a07      	ldr	r2, [pc, #28]	; (80050c4 <HAL_HSEM_FastTake+0x30>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d101      	bne.n	80050b0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80050ac:	2300      	movs	r3, #0
 80050ae:	e000      	b.n	80050b2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	58026400 	.word	0x58026400
 80050c4:	80000300 	.word	0x80000300

080050c8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80050d2:	4906      	ldr	r1, [pc, #24]	; (80050ec <HAL_HSEM_Release+0x24>)
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	58026400 	.word	0x58026400

080050f0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80050f8:	4b29      	ldr	r3, [pc, #164]	; (80051a0 <HAL_PWREx_ConfigSupply+0xb0>)
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	f003 0307 	and.w	r3, r3, #7
 8005100:	2b06      	cmp	r3, #6
 8005102:	d00a      	beq.n	800511a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005104:	4b26      	ldr	r3, [pc, #152]	; (80051a0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	429a      	cmp	r2, r3
 8005110:	d001      	beq.n	8005116 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e040      	b.n	8005198 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005116:	2300      	movs	r3, #0
 8005118:	e03e      	b.n	8005198 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800511a:	4b21      	ldr	r3, [pc, #132]	; (80051a0 <HAL_PWREx_ConfigSupply+0xb0>)
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005122:	491f      	ldr	r1, [pc, #124]	; (80051a0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4313      	orrs	r3, r2
 8005128:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800512a:	f7ff fa3f 	bl	80045ac <HAL_GetTick>
 800512e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005130:	e009      	b.n	8005146 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005132:	f7ff fa3b 	bl	80045ac <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005140:	d901      	bls.n	8005146 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e028      	b.n	8005198 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005146:	4b16      	ldr	r3, [pc, #88]	; (80051a0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800514e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005152:	d1ee      	bne.n	8005132 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2b1e      	cmp	r3, #30
 8005158:	d008      	beq.n	800516c <HAL_PWREx_ConfigSupply+0x7c>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2b2e      	cmp	r3, #46	; 0x2e
 800515e:	d005      	beq.n	800516c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2b1d      	cmp	r3, #29
 8005164:	d002      	beq.n	800516c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2b2d      	cmp	r3, #45	; 0x2d
 800516a:	d114      	bne.n	8005196 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800516c:	f7ff fa1e 	bl	80045ac <HAL_GetTick>
 8005170:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005172:	e009      	b.n	8005188 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005174:	f7ff fa1a 	bl	80045ac <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005182:	d901      	bls.n	8005188 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e007      	b.n	8005198 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005188:	4b05      	ldr	r3, [pc, #20]	; (80051a0 <HAL_PWREx_ConfigSupply+0xb0>)
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005194:	d1ee      	bne.n	8005174 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3710      	adds	r7, #16
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	58024800 	.word	0x58024800

080051a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b08c      	sub	sp, #48	; 0x30
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d101      	bne.n	80051b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e3ff      	b.n	80059b6 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b00      	cmp	r3, #0
 80051c0:	f000 8087 	beq.w	80052d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051c4:	4b99      	ldr	r3, [pc, #612]	; (800542c <HAL_RCC_OscConfig+0x288>)
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80051ce:	4b97      	ldr	r3, [pc, #604]	; (800542c <HAL_RCC_OscConfig+0x288>)
 80051d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80051d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d6:	2b10      	cmp	r3, #16
 80051d8:	d007      	beq.n	80051ea <HAL_RCC_OscConfig+0x46>
 80051da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051dc:	2b18      	cmp	r3, #24
 80051de:	d110      	bne.n	8005202 <HAL_RCC_OscConfig+0x5e>
 80051e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e2:	f003 0303 	and.w	r3, r3, #3
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d10b      	bne.n	8005202 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051ea:	4b90      	ldr	r3, [pc, #576]	; (800542c <HAL_RCC_OscConfig+0x288>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d06c      	beq.n	80052d0 <HAL_RCC_OscConfig+0x12c>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d168      	bne.n	80052d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e3d9      	b.n	80059b6 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800520a:	d106      	bne.n	800521a <HAL_RCC_OscConfig+0x76>
 800520c:	4b87      	ldr	r3, [pc, #540]	; (800542c <HAL_RCC_OscConfig+0x288>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a86      	ldr	r2, [pc, #536]	; (800542c <HAL_RCC_OscConfig+0x288>)
 8005212:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005216:	6013      	str	r3, [r2, #0]
 8005218:	e02e      	b.n	8005278 <HAL_RCC_OscConfig+0xd4>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10c      	bne.n	800523c <HAL_RCC_OscConfig+0x98>
 8005222:	4b82      	ldr	r3, [pc, #520]	; (800542c <HAL_RCC_OscConfig+0x288>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a81      	ldr	r2, [pc, #516]	; (800542c <HAL_RCC_OscConfig+0x288>)
 8005228:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800522c:	6013      	str	r3, [r2, #0]
 800522e:	4b7f      	ldr	r3, [pc, #508]	; (800542c <HAL_RCC_OscConfig+0x288>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a7e      	ldr	r2, [pc, #504]	; (800542c <HAL_RCC_OscConfig+0x288>)
 8005234:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005238:	6013      	str	r3, [r2, #0]
 800523a:	e01d      	b.n	8005278 <HAL_RCC_OscConfig+0xd4>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005244:	d10c      	bne.n	8005260 <HAL_RCC_OscConfig+0xbc>
 8005246:	4b79      	ldr	r3, [pc, #484]	; (800542c <HAL_RCC_OscConfig+0x288>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a78      	ldr	r2, [pc, #480]	; (800542c <HAL_RCC_OscConfig+0x288>)
 800524c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005250:	6013      	str	r3, [r2, #0]
 8005252:	4b76      	ldr	r3, [pc, #472]	; (800542c <HAL_RCC_OscConfig+0x288>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a75      	ldr	r2, [pc, #468]	; (800542c <HAL_RCC_OscConfig+0x288>)
 8005258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800525c:	6013      	str	r3, [r2, #0]
 800525e:	e00b      	b.n	8005278 <HAL_RCC_OscConfig+0xd4>
 8005260:	4b72      	ldr	r3, [pc, #456]	; (800542c <HAL_RCC_OscConfig+0x288>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a71      	ldr	r2, [pc, #452]	; (800542c <HAL_RCC_OscConfig+0x288>)
 8005266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800526a:	6013      	str	r3, [r2, #0]
 800526c:	4b6f      	ldr	r3, [pc, #444]	; (800542c <HAL_RCC_OscConfig+0x288>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a6e      	ldr	r2, [pc, #440]	; (800542c <HAL_RCC_OscConfig+0x288>)
 8005272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005276:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d013      	beq.n	80052a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005280:	f7ff f994 	bl	80045ac <HAL_GetTick>
 8005284:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005286:	e008      	b.n	800529a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005288:	f7ff f990 	bl	80045ac <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	2b64      	cmp	r3, #100	; 0x64
 8005294:	d901      	bls.n	800529a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e38d      	b.n	80059b6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800529a:	4b64      	ldr	r3, [pc, #400]	; (800542c <HAL_RCC_OscConfig+0x288>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d0f0      	beq.n	8005288 <HAL_RCC_OscConfig+0xe4>
 80052a6:	e014      	b.n	80052d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a8:	f7ff f980 	bl	80045ac <HAL_GetTick>
 80052ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80052ae:	e008      	b.n	80052c2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052b0:	f7ff f97c 	bl	80045ac <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	2b64      	cmp	r3, #100	; 0x64
 80052bc:	d901      	bls.n	80052c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e379      	b.n	80059b6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80052c2:	4b5a      	ldr	r3, [pc, #360]	; (800542c <HAL_RCC_OscConfig+0x288>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1f0      	bne.n	80052b0 <HAL_RCC_OscConfig+0x10c>
 80052ce:	e000      	b.n	80052d2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0302 	and.w	r3, r3, #2
 80052da:	2b00      	cmp	r3, #0
 80052dc:	f000 80ae 	beq.w	800543c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052e0:	4b52      	ldr	r3, [pc, #328]	; (800542c <HAL_RCC_OscConfig+0x288>)
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052e8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80052ea:	4b50      	ldr	r3, [pc, #320]	; (800542c <HAL_RCC_OscConfig+0x288>)
 80052ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ee:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80052f0:	6a3b      	ldr	r3, [r7, #32]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d007      	beq.n	8005306 <HAL_RCC_OscConfig+0x162>
 80052f6:	6a3b      	ldr	r3, [r7, #32]
 80052f8:	2b18      	cmp	r3, #24
 80052fa:	d13a      	bne.n	8005372 <HAL_RCC_OscConfig+0x1ce>
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	f003 0303 	and.w	r3, r3, #3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d135      	bne.n	8005372 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005306:	4b49      	ldr	r3, [pc, #292]	; (800542c <HAL_RCC_OscConfig+0x288>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0304 	and.w	r3, r3, #4
 800530e:	2b00      	cmp	r3, #0
 8005310:	d005      	beq.n	800531e <HAL_RCC_OscConfig+0x17a>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d101      	bne.n	800531e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e34b      	b.n	80059b6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800531e:	f7ff f975 	bl	800460c <HAL_GetREVID>
 8005322:	4603      	mov	r3, r0
 8005324:	f241 0203 	movw	r2, #4099	; 0x1003
 8005328:	4293      	cmp	r3, r2
 800532a:	d817      	bhi.n	800535c <HAL_RCC_OscConfig+0x1b8>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	2b40      	cmp	r3, #64	; 0x40
 8005332:	d108      	bne.n	8005346 <HAL_RCC_OscConfig+0x1a2>
 8005334:	4b3d      	ldr	r3, [pc, #244]	; (800542c <HAL_RCC_OscConfig+0x288>)
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800533c:	4a3b      	ldr	r2, [pc, #236]	; (800542c <HAL_RCC_OscConfig+0x288>)
 800533e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005342:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005344:	e07a      	b.n	800543c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005346:	4b39      	ldr	r3, [pc, #228]	; (800542c <HAL_RCC_OscConfig+0x288>)
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	031b      	lsls	r3, r3, #12
 8005354:	4935      	ldr	r1, [pc, #212]	; (800542c <HAL_RCC_OscConfig+0x288>)
 8005356:	4313      	orrs	r3, r2
 8005358:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800535a:	e06f      	b.n	800543c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800535c:	4b33      	ldr	r3, [pc, #204]	; (800542c <HAL_RCC_OscConfig+0x288>)
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	061b      	lsls	r3, r3, #24
 800536a:	4930      	ldr	r1, [pc, #192]	; (800542c <HAL_RCC_OscConfig+0x288>)
 800536c:	4313      	orrs	r3, r2
 800536e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005370:	e064      	b.n	800543c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d045      	beq.n	8005406 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800537a:	4b2c      	ldr	r3, [pc, #176]	; (800542c <HAL_RCC_OscConfig+0x288>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f023 0219 	bic.w	r2, r3, #25
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	4929      	ldr	r1, [pc, #164]	; (800542c <HAL_RCC_OscConfig+0x288>)
 8005388:	4313      	orrs	r3, r2
 800538a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800538c:	f7ff f90e 	bl	80045ac <HAL_GetTick>
 8005390:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005392:	e008      	b.n	80053a6 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005394:	f7ff f90a 	bl	80045ac <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d901      	bls.n	80053a6 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e307      	b.n	80059b6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053a6:	4b21      	ldr	r3, [pc, #132]	; (800542c <HAL_RCC_OscConfig+0x288>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0304 	and.w	r3, r3, #4
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d0f0      	beq.n	8005394 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053b2:	f7ff f92b 	bl	800460c <HAL_GetREVID>
 80053b6:	4603      	mov	r3, r0
 80053b8:	f241 0203 	movw	r2, #4099	; 0x1003
 80053bc:	4293      	cmp	r3, r2
 80053be:	d817      	bhi.n	80053f0 <HAL_RCC_OscConfig+0x24c>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	2b40      	cmp	r3, #64	; 0x40
 80053c6:	d108      	bne.n	80053da <HAL_RCC_OscConfig+0x236>
 80053c8:	4b18      	ldr	r3, [pc, #96]	; (800542c <HAL_RCC_OscConfig+0x288>)
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80053d0:	4a16      	ldr	r2, [pc, #88]	; (800542c <HAL_RCC_OscConfig+0x288>)
 80053d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053d6:	6053      	str	r3, [r2, #4]
 80053d8:	e030      	b.n	800543c <HAL_RCC_OscConfig+0x298>
 80053da:	4b14      	ldr	r3, [pc, #80]	; (800542c <HAL_RCC_OscConfig+0x288>)
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	031b      	lsls	r3, r3, #12
 80053e8:	4910      	ldr	r1, [pc, #64]	; (800542c <HAL_RCC_OscConfig+0x288>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	604b      	str	r3, [r1, #4]
 80053ee:	e025      	b.n	800543c <HAL_RCC_OscConfig+0x298>
 80053f0:	4b0e      	ldr	r3, [pc, #56]	; (800542c <HAL_RCC_OscConfig+0x288>)
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	061b      	lsls	r3, r3, #24
 80053fe:	490b      	ldr	r1, [pc, #44]	; (800542c <HAL_RCC_OscConfig+0x288>)
 8005400:	4313      	orrs	r3, r2
 8005402:	604b      	str	r3, [r1, #4]
 8005404:	e01a      	b.n	800543c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005406:	4b09      	ldr	r3, [pc, #36]	; (800542c <HAL_RCC_OscConfig+0x288>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a08      	ldr	r2, [pc, #32]	; (800542c <HAL_RCC_OscConfig+0x288>)
 800540c:	f023 0301 	bic.w	r3, r3, #1
 8005410:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005412:	f7ff f8cb 	bl	80045ac <HAL_GetTick>
 8005416:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005418:	e00a      	b.n	8005430 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800541a:	f7ff f8c7 	bl	80045ac <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	2b02      	cmp	r3, #2
 8005426:	d903      	bls.n	8005430 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e2c4      	b.n	80059b6 <HAL_RCC_OscConfig+0x812>
 800542c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005430:	4ba4      	ldr	r3, [pc, #656]	; (80056c4 <HAL_RCC_OscConfig+0x520>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0304 	and.w	r3, r3, #4
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1ee      	bne.n	800541a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0310 	and.w	r3, r3, #16
 8005444:	2b00      	cmp	r3, #0
 8005446:	f000 80a9 	beq.w	800559c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800544a:	4b9e      	ldr	r3, [pc, #632]	; (80056c4 <HAL_RCC_OscConfig+0x520>)
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005452:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005454:	4b9b      	ldr	r3, [pc, #620]	; (80056c4 <HAL_RCC_OscConfig+0x520>)
 8005456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005458:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	2b08      	cmp	r3, #8
 800545e:	d007      	beq.n	8005470 <HAL_RCC_OscConfig+0x2cc>
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	2b18      	cmp	r3, #24
 8005464:	d13a      	bne.n	80054dc <HAL_RCC_OscConfig+0x338>
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f003 0303 	and.w	r3, r3, #3
 800546c:	2b01      	cmp	r3, #1
 800546e:	d135      	bne.n	80054dc <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005470:	4b94      	ldr	r3, [pc, #592]	; (80056c4 <HAL_RCC_OscConfig+0x520>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005478:	2b00      	cmp	r3, #0
 800547a:	d005      	beq.n	8005488 <HAL_RCC_OscConfig+0x2e4>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	69db      	ldr	r3, [r3, #28]
 8005480:	2b80      	cmp	r3, #128	; 0x80
 8005482:	d001      	beq.n	8005488 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e296      	b.n	80059b6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005488:	f7ff f8c0 	bl	800460c <HAL_GetREVID>
 800548c:	4603      	mov	r3, r0
 800548e:	f241 0203 	movw	r2, #4099	; 0x1003
 8005492:	4293      	cmp	r3, r2
 8005494:	d817      	bhi.n	80054c6 <HAL_RCC_OscConfig+0x322>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	2b20      	cmp	r3, #32
 800549c:	d108      	bne.n	80054b0 <HAL_RCC_OscConfig+0x30c>
 800549e:	4b89      	ldr	r3, [pc, #548]	; (80056c4 <HAL_RCC_OscConfig+0x520>)
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80054a6:	4a87      	ldr	r2, [pc, #540]	; (80056c4 <HAL_RCC_OscConfig+0x520>)
 80054a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054ac:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80054ae:	e075      	b.n	800559c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80054b0:	4b84      	ldr	r3, [pc, #528]	; (80056c4 <HAL_RCC_OscConfig+0x520>)
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	069b      	lsls	r3, r3, #26
 80054be:	4981      	ldr	r1, [pc, #516]	; (80056c4 <HAL_RCC_OscConfig+0x520>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80054c4:	e06a      	b.n	800559c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80054c6:	4b7f      	ldr	r3, [pc, #508]	; (80056c4 <HAL_RCC_OscConfig+0x520>)
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	061b      	lsls	r3, r3, #24
 80054d4:	497b      	ldr	r1, [pc, #492]	; (80056c4 <HAL_RCC_OscConfig+0x520>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80054da:	e05f      	b.n	800559c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	69db      	ldr	r3, [r3, #28]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d042      	beq.n	800556a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80054e4:	4b77      	ldr	r3, [pc, #476]	; (80056c4 <HAL_RCC_OscConfig+0x520>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a76      	ldr	r2, [pc, #472]	; (80056c4 <HAL_RCC_OscConfig+0x520>)
 80054ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f0:	f7ff f85c 	bl	80045ac <HAL_GetTick>
 80054f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80054f6:	e008      	b.n	800550a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80054f8:	f7ff f858 	bl	80045ac <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	2b02      	cmp	r3, #2
 8005504:	d901      	bls.n	800550a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e255      	b.n	80059b6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800550a:	4b6e      	ldr	r3, [pc, #440]	; (80056c4 <HAL_RCC_OscConfig+0x520>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005512:	2b00      	cmp	r3, #0
 8005514:	d0f0      	beq.n	80054f8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005516:	f7ff f879 	bl	800460c <HAL_GetREVID>
 800551a:	4603      	mov	r3, r0
 800551c:	f241 0203 	movw	r2, #4099	; 0x1003
 8005520:	4293      	cmp	r3, r2
 8005522:	d817      	bhi.n	8005554 <HAL_RCC_OscConfig+0x3b0>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a1b      	ldr	r3, [r3, #32]
 8005528:	2b20      	cmp	r3, #32
 800552a:	d108      	bne.n	800553e <HAL_RCC_OscConfig+0x39a>
 800552c:	4b65      	ldr	r3, [pc, #404]	; (80056c4 <HAL_RCC_OscConfig+0x520>)
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005534:	4a63      	ldr	r2, [pc, #396]	; (80056c4 <HAL_RCC_OscConfig+0x520>)
 8005536:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800553a:	6053      	str	r3, [r2, #4]
 800553c:	e02e      	b.n	800559c <HAL_RCC_OscConfig+0x3f8>
 800553e:	4b61      	ldr	r3, [pc, #388]	; (80056c4 <HAL_RCC_OscConfig+0x520>)
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	069b      	lsls	r3, r3, #26
 800554c:	495d      	ldr	r1, [pc, #372]	; (80056c4 <HAL_RCC_OscConfig+0x520>)
 800554e:	4313      	orrs	r3, r2
 8005550:	604b      	str	r3, [r1, #4]
 8005552:	e023      	b.n	800559c <HAL_RCC_OscConfig+0x3f8>
 8005554:	4b5b      	ldr	r3, [pc, #364]	; (80056c4 <HAL_RCC_OscConfig+0x520>)
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a1b      	ldr	r3, [r3, #32]
 8005560:	061b      	lsls	r3, r3, #24
 8005562:	4958      	ldr	r1, [pc, #352]	; (80056c4 <HAL_RCC_OscConfig+0x520>)
 8005564:	4313      	orrs	r3, r2
 8005566:	60cb      	str	r3, [r1, #12]
 8005568:	e018      	b.n	800559c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800556a:	4b56      	ldr	r3, [pc, #344]	; (80056c4 <HAL_RCC_OscConfig+0x520>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a55      	ldr	r2, [pc, #340]	; (80056c4 <HAL_RCC_OscConfig+0x520>)
 8005570:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005574:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005576:	f7ff f819 	bl	80045ac <HAL_GetTick>
 800557a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800557c:	e008      	b.n	8005590 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800557e:	f7ff f815 	bl	80045ac <HAL_GetTick>
 8005582:	4602      	mov	r2, r0
 8005584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	2b02      	cmp	r3, #2
 800558a:	d901      	bls.n	8005590 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e212      	b.n	80059b6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005590:	4b4c      	ldr	r3, [pc, #304]	; (80056c4 <HAL_RCC_OscConfig+0x520>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1f0      	bne.n	800557e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0308 	and.w	r3, r3, #8
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d036      	beq.n	8005616 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	695b      	ldr	r3, [r3, #20]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d019      	beq.n	80055e4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055b0:	4b44      	ldr	r3, [pc, #272]	; (80056c4 <HAL_RCC_OscConfig+0x520>)
 80055b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055b4:	4a43      	ldr	r2, [pc, #268]	; (80056c4 <HAL_RCC_OscConfig+0x520>)
 80055b6:	f043 0301 	orr.w	r3, r3, #1
 80055ba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055bc:	f7fe fff6 	bl	80045ac <HAL_GetTick>
 80055c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80055c2:	e008      	b.n	80055d6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055c4:	f7fe fff2 	bl	80045ac <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d901      	bls.n	80055d6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e1ef      	b.n	80059b6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80055d6:	4b3b      	ldr	r3, [pc, #236]	; (80056c4 <HAL_RCC_OscConfig+0x520>)
 80055d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055da:	f003 0302 	and.w	r3, r3, #2
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d0f0      	beq.n	80055c4 <HAL_RCC_OscConfig+0x420>
 80055e2:	e018      	b.n	8005616 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055e4:	4b37      	ldr	r3, [pc, #220]	; (80056c4 <HAL_RCC_OscConfig+0x520>)
 80055e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055e8:	4a36      	ldr	r2, [pc, #216]	; (80056c4 <HAL_RCC_OscConfig+0x520>)
 80055ea:	f023 0301 	bic.w	r3, r3, #1
 80055ee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055f0:	f7fe ffdc 	bl	80045ac <HAL_GetTick>
 80055f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80055f6:	e008      	b.n	800560a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055f8:	f7fe ffd8 	bl	80045ac <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	2b02      	cmp	r3, #2
 8005604:	d901      	bls.n	800560a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e1d5      	b.n	80059b6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800560a:	4b2e      	ldr	r3, [pc, #184]	; (80056c4 <HAL_RCC_OscConfig+0x520>)
 800560c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800560e:	f003 0302 	and.w	r3, r3, #2
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1f0      	bne.n	80055f8 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0320 	and.w	r3, r3, #32
 800561e:	2b00      	cmp	r3, #0
 8005620:	d036      	beq.n	8005690 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d019      	beq.n	800565e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800562a:	4b26      	ldr	r3, [pc, #152]	; (80056c4 <HAL_RCC_OscConfig+0x520>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a25      	ldr	r2, [pc, #148]	; (80056c4 <HAL_RCC_OscConfig+0x520>)
 8005630:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005634:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005636:	f7fe ffb9 	bl	80045ac <HAL_GetTick>
 800563a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800563c:	e008      	b.n	8005650 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800563e:	f7fe ffb5 	bl	80045ac <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	2b02      	cmp	r3, #2
 800564a:	d901      	bls.n	8005650 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e1b2      	b.n	80059b6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005650:	4b1c      	ldr	r3, [pc, #112]	; (80056c4 <HAL_RCC_OscConfig+0x520>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d0f0      	beq.n	800563e <HAL_RCC_OscConfig+0x49a>
 800565c:	e018      	b.n	8005690 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800565e:	4b19      	ldr	r3, [pc, #100]	; (80056c4 <HAL_RCC_OscConfig+0x520>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a18      	ldr	r2, [pc, #96]	; (80056c4 <HAL_RCC_OscConfig+0x520>)
 8005664:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005668:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800566a:	f7fe ff9f 	bl	80045ac <HAL_GetTick>
 800566e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005670:	e008      	b.n	8005684 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005672:	f7fe ff9b 	bl	80045ac <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	2b02      	cmp	r3, #2
 800567e:	d901      	bls.n	8005684 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e198      	b.n	80059b6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005684:	4b0f      	ldr	r3, [pc, #60]	; (80056c4 <HAL_RCC_OscConfig+0x520>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1f0      	bne.n	8005672 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0304 	and.w	r3, r3, #4
 8005698:	2b00      	cmp	r3, #0
 800569a:	f000 8085 	beq.w	80057a8 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800569e:	4b0a      	ldr	r3, [pc, #40]	; (80056c8 <HAL_RCC_OscConfig+0x524>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a09      	ldr	r2, [pc, #36]	; (80056c8 <HAL_RCC_OscConfig+0x524>)
 80056a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056aa:	f7fe ff7f 	bl	80045ac <HAL_GetTick>
 80056ae:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056b0:	e00c      	b.n	80056cc <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80056b2:	f7fe ff7b 	bl	80045ac <HAL_GetTick>
 80056b6:	4602      	mov	r2, r0
 80056b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	2b64      	cmp	r3, #100	; 0x64
 80056be:	d905      	bls.n	80056cc <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e178      	b.n	80059b6 <HAL_RCC_OscConfig+0x812>
 80056c4:	58024400 	.word	0x58024400
 80056c8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056cc:	4b96      	ldr	r3, [pc, #600]	; (8005928 <HAL_RCC_OscConfig+0x784>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d0ec      	beq.n	80056b2 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d106      	bne.n	80056ee <HAL_RCC_OscConfig+0x54a>
 80056e0:	4b92      	ldr	r3, [pc, #584]	; (800592c <HAL_RCC_OscConfig+0x788>)
 80056e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e4:	4a91      	ldr	r2, [pc, #580]	; (800592c <HAL_RCC_OscConfig+0x788>)
 80056e6:	f043 0301 	orr.w	r3, r3, #1
 80056ea:	6713      	str	r3, [r2, #112]	; 0x70
 80056ec:	e02d      	b.n	800574a <HAL_RCC_OscConfig+0x5a6>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d10c      	bne.n	8005710 <HAL_RCC_OscConfig+0x56c>
 80056f6:	4b8d      	ldr	r3, [pc, #564]	; (800592c <HAL_RCC_OscConfig+0x788>)
 80056f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056fa:	4a8c      	ldr	r2, [pc, #560]	; (800592c <HAL_RCC_OscConfig+0x788>)
 80056fc:	f023 0301 	bic.w	r3, r3, #1
 8005700:	6713      	str	r3, [r2, #112]	; 0x70
 8005702:	4b8a      	ldr	r3, [pc, #552]	; (800592c <HAL_RCC_OscConfig+0x788>)
 8005704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005706:	4a89      	ldr	r2, [pc, #548]	; (800592c <HAL_RCC_OscConfig+0x788>)
 8005708:	f023 0304 	bic.w	r3, r3, #4
 800570c:	6713      	str	r3, [r2, #112]	; 0x70
 800570e:	e01c      	b.n	800574a <HAL_RCC_OscConfig+0x5a6>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	2b05      	cmp	r3, #5
 8005716:	d10c      	bne.n	8005732 <HAL_RCC_OscConfig+0x58e>
 8005718:	4b84      	ldr	r3, [pc, #528]	; (800592c <HAL_RCC_OscConfig+0x788>)
 800571a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800571c:	4a83      	ldr	r2, [pc, #524]	; (800592c <HAL_RCC_OscConfig+0x788>)
 800571e:	f043 0304 	orr.w	r3, r3, #4
 8005722:	6713      	str	r3, [r2, #112]	; 0x70
 8005724:	4b81      	ldr	r3, [pc, #516]	; (800592c <HAL_RCC_OscConfig+0x788>)
 8005726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005728:	4a80      	ldr	r2, [pc, #512]	; (800592c <HAL_RCC_OscConfig+0x788>)
 800572a:	f043 0301 	orr.w	r3, r3, #1
 800572e:	6713      	str	r3, [r2, #112]	; 0x70
 8005730:	e00b      	b.n	800574a <HAL_RCC_OscConfig+0x5a6>
 8005732:	4b7e      	ldr	r3, [pc, #504]	; (800592c <HAL_RCC_OscConfig+0x788>)
 8005734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005736:	4a7d      	ldr	r2, [pc, #500]	; (800592c <HAL_RCC_OscConfig+0x788>)
 8005738:	f023 0301 	bic.w	r3, r3, #1
 800573c:	6713      	str	r3, [r2, #112]	; 0x70
 800573e:	4b7b      	ldr	r3, [pc, #492]	; (800592c <HAL_RCC_OscConfig+0x788>)
 8005740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005742:	4a7a      	ldr	r2, [pc, #488]	; (800592c <HAL_RCC_OscConfig+0x788>)
 8005744:	f023 0304 	bic.w	r3, r3, #4
 8005748:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d015      	beq.n	800577e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005752:	f7fe ff2b 	bl	80045ac <HAL_GetTick>
 8005756:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005758:	e00a      	b.n	8005770 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800575a:	f7fe ff27 	bl	80045ac <HAL_GetTick>
 800575e:	4602      	mov	r2, r0
 8005760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	f241 3288 	movw	r2, #5000	; 0x1388
 8005768:	4293      	cmp	r3, r2
 800576a:	d901      	bls.n	8005770 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e122      	b.n	80059b6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005770:	4b6e      	ldr	r3, [pc, #440]	; (800592c <HAL_RCC_OscConfig+0x788>)
 8005772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005774:	f003 0302 	and.w	r3, r3, #2
 8005778:	2b00      	cmp	r3, #0
 800577a:	d0ee      	beq.n	800575a <HAL_RCC_OscConfig+0x5b6>
 800577c:	e014      	b.n	80057a8 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800577e:	f7fe ff15 	bl	80045ac <HAL_GetTick>
 8005782:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005784:	e00a      	b.n	800579c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005786:	f7fe ff11 	bl	80045ac <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	f241 3288 	movw	r2, #5000	; 0x1388
 8005794:	4293      	cmp	r3, r2
 8005796:	d901      	bls.n	800579c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8005798:	2303      	movs	r3, #3
 800579a:	e10c      	b.n	80059b6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800579c:	4b63      	ldr	r3, [pc, #396]	; (800592c <HAL_RCC_OscConfig+0x788>)
 800579e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a0:	f003 0302 	and.w	r3, r3, #2
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1ee      	bne.n	8005786 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f000 8101 	beq.w	80059b4 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80057b2:	4b5e      	ldr	r3, [pc, #376]	; (800592c <HAL_RCC_OscConfig+0x788>)
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057ba:	2b18      	cmp	r3, #24
 80057bc:	f000 80bc 	beq.w	8005938 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	f040 8095 	bne.w	80058f4 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057ca:	4b58      	ldr	r3, [pc, #352]	; (800592c <HAL_RCC_OscConfig+0x788>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a57      	ldr	r2, [pc, #348]	; (800592c <HAL_RCC_OscConfig+0x788>)
 80057d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057d6:	f7fe fee9 	bl	80045ac <HAL_GetTick>
 80057da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80057dc:	e008      	b.n	80057f0 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057de:	f7fe fee5 	bl	80045ac <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	d901      	bls.n	80057f0 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e0e2      	b.n	80059b6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80057f0:	4b4e      	ldr	r3, [pc, #312]	; (800592c <HAL_RCC_OscConfig+0x788>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d1f0      	bne.n	80057de <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057fc:	4b4b      	ldr	r3, [pc, #300]	; (800592c <HAL_RCC_OscConfig+0x788>)
 80057fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005800:	4b4b      	ldr	r3, [pc, #300]	; (8005930 <HAL_RCC_OscConfig+0x78c>)
 8005802:	4013      	ands	r3, r2
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800580c:	0112      	lsls	r2, r2, #4
 800580e:	430a      	orrs	r2, r1
 8005810:	4946      	ldr	r1, [pc, #280]	; (800592c <HAL_RCC_OscConfig+0x788>)
 8005812:	4313      	orrs	r3, r2
 8005814:	628b      	str	r3, [r1, #40]	; 0x28
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800581a:	3b01      	subs	r3, #1
 800581c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005824:	3b01      	subs	r3, #1
 8005826:	025b      	lsls	r3, r3, #9
 8005828:	b29b      	uxth	r3, r3
 800582a:	431a      	orrs	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005830:	3b01      	subs	r3, #1
 8005832:	041b      	lsls	r3, r3, #16
 8005834:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005838:	431a      	orrs	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800583e:	3b01      	subs	r3, #1
 8005840:	061b      	lsls	r3, r3, #24
 8005842:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005846:	4939      	ldr	r1, [pc, #228]	; (800592c <HAL_RCC_OscConfig+0x788>)
 8005848:	4313      	orrs	r3, r2
 800584a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800584c:	4b37      	ldr	r3, [pc, #220]	; (800592c <HAL_RCC_OscConfig+0x788>)
 800584e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005850:	4a36      	ldr	r2, [pc, #216]	; (800592c <HAL_RCC_OscConfig+0x788>)
 8005852:	f023 0301 	bic.w	r3, r3, #1
 8005856:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005858:	4b34      	ldr	r3, [pc, #208]	; (800592c <HAL_RCC_OscConfig+0x788>)
 800585a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800585c:	4b35      	ldr	r3, [pc, #212]	; (8005934 <HAL_RCC_OscConfig+0x790>)
 800585e:	4013      	ands	r3, r2
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005864:	00d2      	lsls	r2, r2, #3
 8005866:	4931      	ldr	r1, [pc, #196]	; (800592c <HAL_RCC_OscConfig+0x788>)
 8005868:	4313      	orrs	r3, r2
 800586a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800586c:	4b2f      	ldr	r3, [pc, #188]	; (800592c <HAL_RCC_OscConfig+0x788>)
 800586e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005870:	f023 020c 	bic.w	r2, r3, #12
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005878:	492c      	ldr	r1, [pc, #176]	; (800592c <HAL_RCC_OscConfig+0x788>)
 800587a:	4313      	orrs	r3, r2
 800587c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800587e:	4b2b      	ldr	r3, [pc, #172]	; (800592c <HAL_RCC_OscConfig+0x788>)
 8005880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005882:	f023 0202 	bic.w	r2, r3, #2
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800588a:	4928      	ldr	r1, [pc, #160]	; (800592c <HAL_RCC_OscConfig+0x788>)
 800588c:	4313      	orrs	r3, r2
 800588e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005890:	4b26      	ldr	r3, [pc, #152]	; (800592c <HAL_RCC_OscConfig+0x788>)
 8005892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005894:	4a25      	ldr	r2, [pc, #148]	; (800592c <HAL_RCC_OscConfig+0x788>)
 8005896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800589a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800589c:	4b23      	ldr	r3, [pc, #140]	; (800592c <HAL_RCC_OscConfig+0x788>)
 800589e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a0:	4a22      	ldr	r2, [pc, #136]	; (800592c <HAL_RCC_OscConfig+0x788>)
 80058a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80058a8:	4b20      	ldr	r3, [pc, #128]	; (800592c <HAL_RCC_OscConfig+0x788>)
 80058aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ac:	4a1f      	ldr	r2, [pc, #124]	; (800592c <HAL_RCC_OscConfig+0x788>)
 80058ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80058b4:	4b1d      	ldr	r3, [pc, #116]	; (800592c <HAL_RCC_OscConfig+0x788>)
 80058b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b8:	4a1c      	ldr	r2, [pc, #112]	; (800592c <HAL_RCC_OscConfig+0x788>)
 80058ba:	f043 0301 	orr.w	r3, r3, #1
 80058be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058c0:	4b1a      	ldr	r3, [pc, #104]	; (800592c <HAL_RCC_OscConfig+0x788>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a19      	ldr	r2, [pc, #100]	; (800592c <HAL_RCC_OscConfig+0x788>)
 80058c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058cc:	f7fe fe6e 	bl	80045ac <HAL_GetTick>
 80058d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80058d2:	e008      	b.n	80058e6 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058d4:	f7fe fe6a 	bl	80045ac <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d901      	bls.n	80058e6 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e067      	b.n	80059b6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80058e6:	4b11      	ldr	r3, [pc, #68]	; (800592c <HAL_RCC_OscConfig+0x788>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d0f0      	beq.n	80058d4 <HAL_RCC_OscConfig+0x730>
 80058f2:	e05f      	b.n	80059b4 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058f4:	4b0d      	ldr	r3, [pc, #52]	; (800592c <HAL_RCC_OscConfig+0x788>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a0c      	ldr	r2, [pc, #48]	; (800592c <HAL_RCC_OscConfig+0x788>)
 80058fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005900:	f7fe fe54 	bl	80045ac <HAL_GetTick>
 8005904:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005906:	e008      	b.n	800591a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005908:	f7fe fe50 	bl	80045ac <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	2b02      	cmp	r3, #2
 8005914:	d901      	bls.n	800591a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e04d      	b.n	80059b6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800591a:	4b04      	ldr	r3, [pc, #16]	; (800592c <HAL_RCC_OscConfig+0x788>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1f0      	bne.n	8005908 <HAL_RCC_OscConfig+0x764>
 8005926:	e045      	b.n	80059b4 <HAL_RCC_OscConfig+0x810>
 8005928:	58024800 	.word	0x58024800
 800592c:	58024400 	.word	0x58024400
 8005930:	fffffc0c 	.word	0xfffffc0c
 8005934:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005938:	4b21      	ldr	r3, [pc, #132]	; (80059c0 <HAL_RCC_OscConfig+0x81c>)
 800593a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800593c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800593e:	4b20      	ldr	r3, [pc, #128]	; (80059c0 <HAL_RCC_OscConfig+0x81c>)
 8005940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005942:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005948:	2b01      	cmp	r3, #1
 800594a:	d031      	beq.n	80059b0 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	f003 0203 	and.w	r2, r3, #3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005956:	429a      	cmp	r2, r3
 8005958:	d12a      	bne.n	80059b0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	091b      	lsrs	r3, r3, #4
 800595e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005966:	429a      	cmp	r2, r3
 8005968:	d122      	bne.n	80059b0 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005974:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005976:	429a      	cmp	r2, r3
 8005978:	d11a      	bne.n	80059b0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	0a5b      	lsrs	r3, r3, #9
 800597e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005986:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005988:	429a      	cmp	r2, r3
 800598a:	d111      	bne.n	80059b0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	0c1b      	lsrs	r3, r3, #16
 8005990:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005998:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800599a:	429a      	cmp	r2, r3
 800599c:	d108      	bne.n	80059b0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	0e1b      	lsrs	r3, r3, #24
 80059a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059aa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d001      	beq.n	80059b4 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e000      	b.n	80059b6 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3730      	adds	r7, #48	; 0x30
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	58024400 	.word	0x58024400

080059c4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b086      	sub	sp, #24
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d101      	bne.n	80059d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e19c      	b.n	8005d12 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059d8:	4b8a      	ldr	r3, [pc, #552]	; (8005c04 <HAL_RCC_ClockConfig+0x240>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 030f 	and.w	r3, r3, #15
 80059e0:	683a      	ldr	r2, [r7, #0]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d910      	bls.n	8005a08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059e6:	4b87      	ldr	r3, [pc, #540]	; (8005c04 <HAL_RCC_ClockConfig+0x240>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f023 020f 	bic.w	r2, r3, #15
 80059ee:	4985      	ldr	r1, [pc, #532]	; (8005c04 <HAL_RCC_ClockConfig+0x240>)
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059f6:	4b83      	ldr	r3, [pc, #524]	; (8005c04 <HAL_RCC_ClockConfig+0x240>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 030f 	and.w	r3, r3, #15
 80059fe:	683a      	ldr	r2, [r7, #0]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d001      	beq.n	8005a08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e184      	b.n	8005d12 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0304 	and.w	r3, r3, #4
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d010      	beq.n	8005a36 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	691a      	ldr	r2, [r3, #16]
 8005a18:	4b7b      	ldr	r3, [pc, #492]	; (8005c08 <HAL_RCC_ClockConfig+0x244>)
 8005a1a:	699b      	ldr	r3, [r3, #24]
 8005a1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d908      	bls.n	8005a36 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005a24:	4b78      	ldr	r3, [pc, #480]	; (8005c08 <HAL_RCC_ClockConfig+0x244>)
 8005a26:	699b      	ldr	r3, [r3, #24]
 8005a28:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	4975      	ldr	r1, [pc, #468]	; (8005c08 <HAL_RCC_ClockConfig+0x244>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0308 	and.w	r3, r3, #8
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d010      	beq.n	8005a64 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	695a      	ldr	r2, [r3, #20]
 8005a46:	4b70      	ldr	r3, [pc, #448]	; (8005c08 <HAL_RCC_ClockConfig+0x244>)
 8005a48:	69db      	ldr	r3, [r3, #28]
 8005a4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d908      	bls.n	8005a64 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005a52:	4b6d      	ldr	r3, [pc, #436]	; (8005c08 <HAL_RCC_ClockConfig+0x244>)
 8005a54:	69db      	ldr	r3, [r3, #28]
 8005a56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	695b      	ldr	r3, [r3, #20]
 8005a5e:	496a      	ldr	r1, [pc, #424]	; (8005c08 <HAL_RCC_ClockConfig+0x244>)
 8005a60:	4313      	orrs	r3, r2
 8005a62:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0310 	and.w	r3, r3, #16
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d010      	beq.n	8005a92 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	699a      	ldr	r2, [r3, #24]
 8005a74:	4b64      	ldr	r3, [pc, #400]	; (8005c08 <HAL_RCC_ClockConfig+0x244>)
 8005a76:	69db      	ldr	r3, [r3, #28]
 8005a78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d908      	bls.n	8005a92 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005a80:	4b61      	ldr	r3, [pc, #388]	; (8005c08 <HAL_RCC_ClockConfig+0x244>)
 8005a82:	69db      	ldr	r3, [r3, #28]
 8005a84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	495e      	ldr	r1, [pc, #376]	; (8005c08 <HAL_RCC_ClockConfig+0x244>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0320 	and.w	r3, r3, #32
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d010      	beq.n	8005ac0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	69da      	ldr	r2, [r3, #28]
 8005aa2:	4b59      	ldr	r3, [pc, #356]	; (8005c08 <HAL_RCC_ClockConfig+0x244>)
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
 8005aa6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d908      	bls.n	8005ac0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005aae:	4b56      	ldr	r3, [pc, #344]	; (8005c08 <HAL_RCC_ClockConfig+0x244>)
 8005ab0:	6a1b      	ldr	r3, [r3, #32]
 8005ab2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	69db      	ldr	r3, [r3, #28]
 8005aba:	4953      	ldr	r1, [pc, #332]	; (8005c08 <HAL_RCC_ClockConfig+0x244>)
 8005abc:	4313      	orrs	r3, r2
 8005abe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0302 	and.w	r3, r3, #2
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d010      	beq.n	8005aee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	68da      	ldr	r2, [r3, #12]
 8005ad0:	4b4d      	ldr	r3, [pc, #308]	; (8005c08 <HAL_RCC_ClockConfig+0x244>)
 8005ad2:	699b      	ldr	r3, [r3, #24]
 8005ad4:	f003 030f 	and.w	r3, r3, #15
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d908      	bls.n	8005aee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005adc:	4b4a      	ldr	r3, [pc, #296]	; (8005c08 <HAL_RCC_ClockConfig+0x244>)
 8005ade:	699b      	ldr	r3, [r3, #24]
 8005ae0:	f023 020f 	bic.w	r2, r3, #15
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	4947      	ldr	r1, [pc, #284]	; (8005c08 <HAL_RCC_ClockConfig+0x244>)
 8005aea:	4313      	orrs	r3, r2
 8005aec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0301 	and.w	r3, r3, #1
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d055      	beq.n	8005ba6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005afa:	4b43      	ldr	r3, [pc, #268]	; (8005c08 <HAL_RCC_ClockConfig+0x244>)
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	4940      	ldr	r1, [pc, #256]	; (8005c08 <HAL_RCC_ClockConfig+0x244>)
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d107      	bne.n	8005b24 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b14:	4b3c      	ldr	r3, [pc, #240]	; (8005c08 <HAL_RCC_ClockConfig+0x244>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d121      	bne.n	8005b64 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e0f6      	b.n	8005d12 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	2b03      	cmp	r3, #3
 8005b2a:	d107      	bne.n	8005b3c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005b2c:	4b36      	ldr	r3, [pc, #216]	; (8005c08 <HAL_RCC_ClockConfig+0x244>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d115      	bne.n	8005b64 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e0ea      	b.n	8005d12 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d107      	bne.n	8005b54 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b44:	4b30      	ldr	r3, [pc, #192]	; (8005c08 <HAL_RCC_ClockConfig+0x244>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d109      	bne.n	8005b64 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	e0de      	b.n	8005d12 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b54:	4b2c      	ldr	r3, [pc, #176]	; (8005c08 <HAL_RCC_ClockConfig+0x244>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 0304 	and.w	r3, r3, #4
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d101      	bne.n	8005b64 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e0d6      	b.n	8005d12 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b64:	4b28      	ldr	r3, [pc, #160]	; (8005c08 <HAL_RCC_ClockConfig+0x244>)
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	f023 0207 	bic.w	r2, r3, #7
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	4925      	ldr	r1, [pc, #148]	; (8005c08 <HAL_RCC_ClockConfig+0x244>)
 8005b72:	4313      	orrs	r3, r2
 8005b74:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b76:	f7fe fd19 	bl	80045ac <HAL_GetTick>
 8005b7a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b7c:	e00a      	b.n	8005b94 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b7e:	f7fe fd15 	bl	80045ac <HAL_GetTick>
 8005b82:	4602      	mov	r2, r0
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d901      	bls.n	8005b94 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005b90:	2303      	movs	r3, #3
 8005b92:	e0be      	b.n	8005d12 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b94:	4b1c      	ldr	r3, [pc, #112]	; (8005c08 <HAL_RCC_ClockConfig+0x244>)
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	00db      	lsls	r3, r3, #3
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d1eb      	bne.n	8005b7e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0302 	and.w	r3, r3, #2
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d010      	beq.n	8005bd4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	68da      	ldr	r2, [r3, #12]
 8005bb6:	4b14      	ldr	r3, [pc, #80]	; (8005c08 <HAL_RCC_ClockConfig+0x244>)
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	f003 030f 	and.w	r3, r3, #15
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d208      	bcs.n	8005bd4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bc2:	4b11      	ldr	r3, [pc, #68]	; (8005c08 <HAL_RCC_ClockConfig+0x244>)
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	f023 020f 	bic.w	r2, r3, #15
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	490e      	ldr	r1, [pc, #56]	; (8005c08 <HAL_RCC_ClockConfig+0x244>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005bd4:	4b0b      	ldr	r3, [pc, #44]	; (8005c04 <HAL_RCC_ClockConfig+0x240>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 030f 	and.w	r3, r3, #15
 8005bdc:	683a      	ldr	r2, [r7, #0]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d214      	bcs.n	8005c0c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005be2:	4b08      	ldr	r3, [pc, #32]	; (8005c04 <HAL_RCC_ClockConfig+0x240>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f023 020f 	bic.w	r2, r3, #15
 8005bea:	4906      	ldr	r1, [pc, #24]	; (8005c04 <HAL_RCC_ClockConfig+0x240>)
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bf2:	4b04      	ldr	r3, [pc, #16]	; (8005c04 <HAL_RCC_ClockConfig+0x240>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 030f 	and.w	r3, r3, #15
 8005bfa:	683a      	ldr	r2, [r7, #0]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d005      	beq.n	8005c0c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e086      	b.n	8005d12 <HAL_RCC_ClockConfig+0x34e>
 8005c04:	52002000 	.word	0x52002000
 8005c08:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0304 	and.w	r3, r3, #4
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d010      	beq.n	8005c3a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	691a      	ldr	r2, [r3, #16]
 8005c1c:	4b3f      	ldr	r3, [pc, #252]	; (8005d1c <HAL_RCC_ClockConfig+0x358>)
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d208      	bcs.n	8005c3a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005c28:	4b3c      	ldr	r3, [pc, #240]	; (8005d1c <HAL_RCC_ClockConfig+0x358>)
 8005c2a:	699b      	ldr	r3, [r3, #24]
 8005c2c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	4939      	ldr	r1, [pc, #228]	; (8005d1c <HAL_RCC_ClockConfig+0x358>)
 8005c36:	4313      	orrs	r3, r2
 8005c38:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0308 	and.w	r3, r3, #8
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d010      	beq.n	8005c68 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	695a      	ldr	r2, [r3, #20]
 8005c4a:	4b34      	ldr	r3, [pc, #208]	; (8005d1c <HAL_RCC_ClockConfig+0x358>)
 8005c4c:	69db      	ldr	r3, [r3, #28]
 8005c4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d208      	bcs.n	8005c68 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005c56:	4b31      	ldr	r3, [pc, #196]	; (8005d1c <HAL_RCC_ClockConfig+0x358>)
 8005c58:	69db      	ldr	r3, [r3, #28]
 8005c5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	492e      	ldr	r1, [pc, #184]	; (8005d1c <HAL_RCC_ClockConfig+0x358>)
 8005c64:	4313      	orrs	r3, r2
 8005c66:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0310 	and.w	r3, r3, #16
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d010      	beq.n	8005c96 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	699a      	ldr	r2, [r3, #24]
 8005c78:	4b28      	ldr	r3, [pc, #160]	; (8005d1c <HAL_RCC_ClockConfig+0x358>)
 8005c7a:	69db      	ldr	r3, [r3, #28]
 8005c7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d208      	bcs.n	8005c96 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005c84:	4b25      	ldr	r3, [pc, #148]	; (8005d1c <HAL_RCC_ClockConfig+0x358>)
 8005c86:	69db      	ldr	r3, [r3, #28]
 8005c88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	4922      	ldr	r1, [pc, #136]	; (8005d1c <HAL_RCC_ClockConfig+0x358>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0320 	and.w	r3, r3, #32
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d010      	beq.n	8005cc4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	69da      	ldr	r2, [r3, #28]
 8005ca6:	4b1d      	ldr	r3, [pc, #116]	; (8005d1c <HAL_RCC_ClockConfig+0x358>)
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d208      	bcs.n	8005cc4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005cb2:	4b1a      	ldr	r3, [pc, #104]	; (8005d1c <HAL_RCC_ClockConfig+0x358>)
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	69db      	ldr	r3, [r3, #28]
 8005cbe:	4917      	ldr	r1, [pc, #92]	; (8005d1c <HAL_RCC_ClockConfig+0x358>)
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005cc4:	f000 f834 	bl	8005d30 <HAL_RCC_GetSysClockFreq>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	4b14      	ldr	r3, [pc, #80]	; (8005d1c <HAL_RCC_ClockConfig+0x358>)
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	0a1b      	lsrs	r3, r3, #8
 8005cd0:	f003 030f 	and.w	r3, r3, #15
 8005cd4:	4912      	ldr	r1, [pc, #72]	; (8005d20 <HAL_RCC_ClockConfig+0x35c>)
 8005cd6:	5ccb      	ldrb	r3, [r1, r3]
 8005cd8:	f003 031f 	and.w	r3, r3, #31
 8005cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ce0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ce2:	4b0e      	ldr	r3, [pc, #56]	; (8005d1c <HAL_RCC_ClockConfig+0x358>)
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	f003 030f 	and.w	r3, r3, #15
 8005cea:	4a0d      	ldr	r2, [pc, #52]	; (8005d20 <HAL_RCC_ClockConfig+0x35c>)
 8005cec:	5cd3      	ldrb	r3, [r2, r3]
 8005cee:	f003 031f 	and.w	r3, r3, #31
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8005cf8:	4a0a      	ldr	r2, [pc, #40]	; (8005d24 <HAL_RCC_ClockConfig+0x360>)
 8005cfa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005cfc:	4a0a      	ldr	r2, [pc, #40]	; (8005d28 <HAL_RCC_ClockConfig+0x364>)
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005d02:	4b0a      	ldr	r3, [pc, #40]	; (8005d2c <HAL_RCC_ClockConfig+0x368>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7fe fc06 	bl	8004518 <HAL_InitTick>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3718      	adds	r7, #24
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	58024400 	.word	0x58024400
 8005d20:	08011674 	.word	0x08011674
 8005d24:	20000004 	.word	0x20000004
 8005d28:	20000000 	.word	0x20000000
 8005d2c:	20000070 	.word	0x20000070

08005d30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b089      	sub	sp, #36	; 0x24
 8005d34:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d36:	4bb3      	ldr	r3, [pc, #716]	; (8006004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d3e:	2b18      	cmp	r3, #24
 8005d40:	f200 8155 	bhi.w	8005fee <HAL_RCC_GetSysClockFreq+0x2be>
 8005d44:	a201      	add	r2, pc, #4	; (adr r2, 8005d4c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4a:	bf00      	nop
 8005d4c:	08005db1 	.word	0x08005db1
 8005d50:	08005fef 	.word	0x08005fef
 8005d54:	08005fef 	.word	0x08005fef
 8005d58:	08005fef 	.word	0x08005fef
 8005d5c:	08005fef 	.word	0x08005fef
 8005d60:	08005fef 	.word	0x08005fef
 8005d64:	08005fef 	.word	0x08005fef
 8005d68:	08005fef 	.word	0x08005fef
 8005d6c:	08005dd7 	.word	0x08005dd7
 8005d70:	08005fef 	.word	0x08005fef
 8005d74:	08005fef 	.word	0x08005fef
 8005d78:	08005fef 	.word	0x08005fef
 8005d7c:	08005fef 	.word	0x08005fef
 8005d80:	08005fef 	.word	0x08005fef
 8005d84:	08005fef 	.word	0x08005fef
 8005d88:	08005fef 	.word	0x08005fef
 8005d8c:	08005ddd 	.word	0x08005ddd
 8005d90:	08005fef 	.word	0x08005fef
 8005d94:	08005fef 	.word	0x08005fef
 8005d98:	08005fef 	.word	0x08005fef
 8005d9c:	08005fef 	.word	0x08005fef
 8005da0:	08005fef 	.word	0x08005fef
 8005da4:	08005fef 	.word	0x08005fef
 8005da8:	08005fef 	.word	0x08005fef
 8005dac:	08005de3 	.word	0x08005de3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005db0:	4b94      	ldr	r3, [pc, #592]	; (8006004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0320 	and.w	r3, r3, #32
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d009      	beq.n	8005dd0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005dbc:	4b91      	ldr	r3, [pc, #580]	; (8006004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	08db      	lsrs	r3, r3, #3
 8005dc2:	f003 0303 	and.w	r3, r3, #3
 8005dc6:	4a90      	ldr	r2, [pc, #576]	; (8006008 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8005dcc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005dce:	e111      	b.n	8005ff4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005dd0:	4b8d      	ldr	r3, [pc, #564]	; (8006008 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005dd2:	61bb      	str	r3, [r7, #24]
    break;
 8005dd4:	e10e      	b.n	8005ff4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005dd6:	4b8d      	ldr	r3, [pc, #564]	; (800600c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005dd8:	61bb      	str	r3, [r7, #24]
    break;
 8005dda:	e10b      	b.n	8005ff4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005ddc:	4b8c      	ldr	r3, [pc, #560]	; (8006010 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005dde:	61bb      	str	r3, [r7, #24]
    break;
 8005de0:	e108      	b.n	8005ff4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005de2:	4b88      	ldr	r3, [pc, #544]	; (8006004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de6:	f003 0303 	and.w	r3, r3, #3
 8005dea:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005dec:	4b85      	ldr	r3, [pc, #532]	; (8006004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df0:	091b      	lsrs	r3, r3, #4
 8005df2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005df6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005df8:	4b82      	ldr	r3, [pc, #520]	; (8006004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfc:	f003 0301 	and.w	r3, r3, #1
 8005e00:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005e02:	4b80      	ldr	r3, [pc, #512]	; (8006004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e06:	08db      	lsrs	r3, r3, #3
 8005e08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	fb02 f303 	mul.w	r3, r2, r3
 8005e12:	ee07 3a90 	vmov	s15, r3
 8005e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e1a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f000 80e1 	beq.w	8005fe8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	f000 8083 	beq.w	8005f34 <HAL_RCC_GetSysClockFreq+0x204>
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	f200 80a1 	bhi.w	8005f78 <HAL_RCC_GetSysClockFreq+0x248>
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d003      	beq.n	8005e44 <HAL_RCC_GetSysClockFreq+0x114>
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d056      	beq.n	8005ef0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005e42:	e099      	b.n	8005f78 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e44:	4b6f      	ldr	r3, [pc, #444]	; (8006004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0320 	and.w	r3, r3, #32
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d02d      	beq.n	8005eac <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e50:	4b6c      	ldr	r3, [pc, #432]	; (8006004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	08db      	lsrs	r3, r3, #3
 8005e56:	f003 0303 	and.w	r3, r3, #3
 8005e5a:	4a6b      	ldr	r2, [pc, #428]	; (8006008 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e60:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	ee07 3a90 	vmov	s15, r3
 8005e68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	ee07 3a90 	vmov	s15, r3
 8005e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e7a:	4b62      	ldr	r3, [pc, #392]	; (8006004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e82:	ee07 3a90 	vmov	s15, r3
 8005e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e8e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006014 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ea6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005eaa:	e087      	b.n	8005fbc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	ee07 3a90 	vmov	s15, r3
 8005eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eb6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006018 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005eba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ebe:	4b51      	ldr	r3, [pc, #324]	; (8006004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ec6:	ee07 3a90 	vmov	s15, r3
 8005eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ece:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ed2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006014 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ede:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005eee:	e065      	b.n	8005fbc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	ee07 3a90 	vmov	s15, r3
 8005ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005efa:	eddf 6a48 	vldr	s13, [pc, #288]	; 800601c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005efe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f02:	4b40      	ldr	r3, [pc, #256]	; (8006004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f0a:	ee07 3a90 	vmov	s15, r3
 8005f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f12:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f16:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006014 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f32:	e043      	b.n	8005fbc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	ee07 3a90 	vmov	s15, r3
 8005f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f3e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006020 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005f42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f46:	4b2f      	ldr	r3, [pc, #188]	; (8006004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f4e:	ee07 3a90 	vmov	s15, r3
 8005f52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f56:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f5a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006014 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f76:	e021      	b.n	8005fbc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	ee07 3a90 	vmov	s15, r3
 8005f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f82:	eddf 6a26 	vldr	s13, [pc, #152]	; 800601c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005f86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f8a:	4b1e      	ldr	r3, [pc, #120]	; (8006004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f92:	ee07 3a90 	vmov	s15, r3
 8005f96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f9e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006014 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005fa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005faa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fba:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005fbc:	4b11      	ldr	r3, [pc, #68]	; (8006004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc0:	0a5b      	lsrs	r3, r3, #9
 8005fc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	ee07 3a90 	vmov	s15, r3
 8005fd0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005fd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fe0:	ee17 3a90 	vmov	r3, s15
 8005fe4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005fe6:	e005      	b.n	8005ff4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	61bb      	str	r3, [r7, #24]
    break;
 8005fec:	e002      	b.n	8005ff4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005fee:	4b07      	ldr	r3, [pc, #28]	; (800600c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005ff0:	61bb      	str	r3, [r7, #24]
    break;
 8005ff2:	bf00      	nop
  }

  return sysclockfreq;
 8005ff4:	69bb      	ldr	r3, [r7, #24]
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3724      	adds	r7, #36	; 0x24
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	58024400 	.word	0x58024400
 8006008:	03d09000 	.word	0x03d09000
 800600c:	003d0900 	.word	0x003d0900
 8006010:	017d7840 	.word	0x017d7840
 8006014:	46000000 	.word	0x46000000
 8006018:	4c742400 	.word	0x4c742400
 800601c:	4a742400 	.word	0x4a742400
 8006020:	4bbebc20 	.word	0x4bbebc20

08006024 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800602a:	f7ff fe81 	bl	8005d30 <HAL_RCC_GetSysClockFreq>
 800602e:	4602      	mov	r2, r0
 8006030:	4b10      	ldr	r3, [pc, #64]	; (8006074 <HAL_RCC_GetHCLKFreq+0x50>)
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	0a1b      	lsrs	r3, r3, #8
 8006036:	f003 030f 	and.w	r3, r3, #15
 800603a:	490f      	ldr	r1, [pc, #60]	; (8006078 <HAL_RCC_GetHCLKFreq+0x54>)
 800603c:	5ccb      	ldrb	r3, [r1, r3]
 800603e:	f003 031f 	and.w	r3, r3, #31
 8006042:	fa22 f303 	lsr.w	r3, r2, r3
 8006046:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006048:	4b0a      	ldr	r3, [pc, #40]	; (8006074 <HAL_RCC_GetHCLKFreq+0x50>)
 800604a:	699b      	ldr	r3, [r3, #24]
 800604c:	f003 030f 	and.w	r3, r3, #15
 8006050:	4a09      	ldr	r2, [pc, #36]	; (8006078 <HAL_RCC_GetHCLKFreq+0x54>)
 8006052:	5cd3      	ldrb	r3, [r2, r3]
 8006054:	f003 031f 	and.w	r3, r3, #31
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	fa22 f303 	lsr.w	r3, r2, r3
 800605e:	4a07      	ldr	r2, [pc, #28]	; (800607c <HAL_RCC_GetHCLKFreq+0x58>)
 8006060:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006062:	4a07      	ldr	r2, [pc, #28]	; (8006080 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006068:	4b04      	ldr	r3, [pc, #16]	; (800607c <HAL_RCC_GetHCLKFreq+0x58>)
 800606a:	681b      	ldr	r3, [r3, #0]
}
 800606c:	4618      	mov	r0, r3
 800606e:	3708      	adds	r7, #8
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	58024400 	.word	0x58024400
 8006078:	08011674 	.word	0x08011674
 800607c:	20000004 	.word	0x20000004
 8006080:	20000000 	.word	0x20000000

08006084 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006088:	f7ff ffcc 	bl	8006024 <HAL_RCC_GetHCLKFreq>
 800608c:	4602      	mov	r2, r0
 800608e:	4b06      	ldr	r3, [pc, #24]	; (80060a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006090:	69db      	ldr	r3, [r3, #28]
 8006092:	091b      	lsrs	r3, r3, #4
 8006094:	f003 0307 	and.w	r3, r3, #7
 8006098:	4904      	ldr	r1, [pc, #16]	; (80060ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800609a:	5ccb      	ldrb	r3, [r1, r3]
 800609c:	f003 031f 	and.w	r3, r3, #31
 80060a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	58024400 	.word	0x58024400
 80060ac:	08011674 	.word	0x08011674

080060b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80060b4:	f7ff ffb6 	bl	8006024 <HAL_RCC_GetHCLKFreq>
 80060b8:	4602      	mov	r2, r0
 80060ba:	4b06      	ldr	r3, [pc, #24]	; (80060d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80060bc:	69db      	ldr	r3, [r3, #28]
 80060be:	0a1b      	lsrs	r3, r3, #8
 80060c0:	f003 0307 	and.w	r3, r3, #7
 80060c4:	4904      	ldr	r1, [pc, #16]	; (80060d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80060c6:	5ccb      	ldrb	r3, [r1, r3]
 80060c8:	f003 031f 	and.w	r3, r3, #31
 80060cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	58024400 	.word	0x58024400
 80060d8:	08011674 	.word	0x08011674

080060dc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b090      	sub	sp, #64	; 0x40
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060ea:	d14f      	bne.n	800618c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80060ec:	4ba0      	ldr	r3, [pc, #640]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80060ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060f0:	f003 0307 	and.w	r3, r3, #7
 80060f4:	633b      	str	r3, [r7, #48]	; 0x30
 80060f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f8:	2b04      	cmp	r3, #4
 80060fa:	d844      	bhi.n	8006186 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 80060fc:	a201      	add	r2, pc, #4	; (adr r2, 8006104 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80060fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006102:	bf00      	nop
 8006104:	08006119 	.word	0x08006119
 8006108:	08006129 	.word	0x08006129
 800610c:	08006139 	.word	0x08006139
 8006110:	08006181 	.word	0x08006181
 8006114:	08006149 	.word	0x08006149

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006118:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800611c:	4618      	mov	r0, r3
 800611e:	f000 fd53 	bl	8006bc8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006124:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006126:	e28b      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006128:	f107 0318 	add.w	r3, r7, #24
 800612c:	4618      	mov	r0, r3
 800612e:	f000 faa3 	bl	8006678 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006136:	e283      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006138:	f107 030c 	add.w	r3, r7, #12
 800613c:	4618      	mov	r0, r3
 800613e:	f000 fbef 	bl	8006920 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006146:	e27b      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006148:	4b89      	ldr	r3, [pc, #548]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800614a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800614c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006150:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8006152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006154:	2b00      	cmp	r3, #0
 8006156:	d102      	bne.n	800615e <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006158:	4b86      	ldr	r3, [pc, #536]	; (8006374 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800615a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800615c:	e270      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800615e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006160:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006164:	d102      	bne.n	800616c <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8006166:	4b84      	ldr	r3, [pc, #528]	; (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006168:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800616a:	e269      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800616c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800616e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006172:	d102      	bne.n	800617a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8006174:	4b81      	ldr	r3, [pc, #516]	; (800637c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006176:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006178:	e262      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
            frequency = 0;
 800617a:	2300      	movs	r3, #0
 800617c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800617e:	e25f      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006180:	4b7f      	ldr	r3, [pc, #508]	; (8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006182:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006184:	e25c      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      default :
        {
          frequency = 0;
 8006186:	2300      	movs	r3, #0
 8006188:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800618a:	e259      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006192:	d159      	bne.n	8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8006194:	4b76      	ldr	r3, [pc, #472]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006198:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800619c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800619e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061a4:	d02e      	beq.n	8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 80061a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061ac:	d849      	bhi.n	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80061ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b0:	2bc0      	cmp	r3, #192	; 0xc0
 80061b2:	d043      	beq.n	800623c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80061b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b6:	2bc0      	cmp	r3, #192	; 0xc0
 80061b8:	d843      	bhi.n	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80061ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061bc:	2b80      	cmp	r3, #128	; 0x80
 80061be:	d019      	beq.n	80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 80061c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c2:	2b80      	cmp	r3, #128	; 0x80
 80061c4:	d83d      	bhi.n	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80061c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d003      	beq.n	80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
 80061cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ce:	2b40      	cmp	r3, #64	; 0x40
 80061d0:	d008      	beq.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80061d2:	e036      	b.n	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80061d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061d8:	4618      	mov	r0, r3
 80061da:	f000 fcf5 	bl	8006bc8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80061de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80061e2:	e22d      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061e4:	f107 0318 	add.w	r3, r7, #24
 80061e8:	4618      	mov	r0, r3
 80061ea:	f000 fa45 	bl	8006678 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80061f2:	e225      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061f4:	f107 030c 	add.w	r3, r7, #12
 80061f8:	4618      	mov	r0, r3
 80061fa:	f000 fb91 	bl	8006920 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006202:	e21d      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006204:	4b5a      	ldr	r3, [pc, #360]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006208:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800620c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800620e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006210:	2b00      	cmp	r3, #0
 8006212:	d102      	bne.n	800621a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006214:	4b57      	ldr	r3, [pc, #348]	; (8006374 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006216:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006218:	e212      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800621a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800621c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006220:	d102      	bne.n	8006228 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
            frequency = CSI_VALUE;
 8006222:	4b55      	ldr	r3, [pc, #340]	; (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006224:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006226:	e20b      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8006228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800622a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800622e:	d102      	bne.n	8006236 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
            frequency = HSE_VALUE;
 8006230:	4b52      	ldr	r3, [pc, #328]	; (800637c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006232:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006234:	e204      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
            frequency = 0;
 8006236:	2300      	movs	r3, #0
 8006238:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800623a:	e201      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800623c:	4b50      	ldr	r3, [pc, #320]	; (8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800623e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006240:	e1fe      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      default :
        {
          frequency = 0;
 8006242:	2300      	movs	r3, #0
 8006244:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006246:	e1fb      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800624e:	d15e      	bne.n	800630e <HAL_RCCEx_GetPeriphCLKFreq+0x232>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8006250:	4b47      	ldr	r3, [pc, #284]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006254:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006258:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800625a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006260:	d033      	beq.n	80062ca <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
 8006262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006264:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006268:	d84e      	bhi.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 800626a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006270:	d047      	beq.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x226>
 8006272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006274:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006278:	d846      	bhi.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 800627a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006280:	d01b      	beq.n	80062ba <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
 8006282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006284:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006288:	d83e      	bhi.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 800628a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628c:	2b00      	cmp	r3, #0
 800628e:	d004      	beq.n	800629a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006292:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006296:	d008      	beq.n	80062aa <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8006298:	e036      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800629a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800629e:	4618      	mov	r0, r3
 80062a0:	f000 fc92 	bl	8006bc8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80062a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80062a8:	e1ca      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062aa:	f107 0318 	add.w	r3, r7, #24
 80062ae:	4618      	mov	r0, r3
 80062b0:	f000 f9e2 	bl	8006678 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80062b8:	e1c2      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062ba:	f107 030c 	add.w	r3, r7, #12
 80062be:	4618      	mov	r0, r3
 80062c0:	f000 fb2e 	bl	8006920 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80062c8:	e1ba      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80062ca:	4b29      	ldr	r3, [pc, #164]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80062cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80062d2:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80062d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d102      	bne.n	80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80062da:	4b26      	ldr	r3, [pc, #152]	; (8006374 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80062dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80062de:	e1af      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80062e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062e6:	d102      	bne.n	80062ee <HAL_RCCEx_GetPeriphCLKFreq+0x212>
            frequency = CSI_VALUE;
 80062e8:	4b23      	ldr	r3, [pc, #140]	; (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80062ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80062ec:	e1a8      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80062ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062f4:	d102      	bne.n	80062fc <HAL_RCCEx_GetPeriphCLKFreq+0x220>
            frequency = HSE_VALUE;
 80062f6:	4b21      	ldr	r3, [pc, #132]	; (800637c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80062f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80062fa:	e1a1      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
            frequency = 0;
 80062fc:	2300      	movs	r3, #0
 80062fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006300:	e19e      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006302:	4b1f      	ldr	r3, [pc, #124]	; (8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006304:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006306:	e19b      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      default :
        {
          frequency = 0;
 8006308:	2300      	movs	r3, #0
 800630a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800630c:	e198      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006314:	d168      	bne.n	80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8006316:	4b16      	ldr	r3, [pc, #88]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800631a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800631e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006322:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006326:	d03d      	beq.n	80063a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
 8006328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800632e:	d858      	bhi.n	80063e2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006332:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006336:	d051      	beq.n	80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 8006338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800633e:	d850      	bhi.n	80063e2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006342:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006346:	d025      	beq.n	8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8006348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800634e:	d848      	bhi.n	80063e2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006352:	2b00      	cmp	r3, #0
 8006354:	d004      	beq.n	8006360 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
 8006356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006358:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800635c:	d012      	beq.n	8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
 800635e:	e040      	b.n	80063e2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006360:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006364:	4618      	mov	r0, r3
 8006366:	f000 fc2f 	bl	8006bc8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800636a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800636e:	e167      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8006370:	58024400 	.word	0x58024400
 8006374:	03d09000 	.word	0x03d09000
 8006378:	003d0900 	.word	0x003d0900
 800637c:	017d7840 	.word	0x017d7840
 8006380:	00bb8000 	.word	0x00bb8000
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006384:	f107 0318 	add.w	r3, r7, #24
 8006388:	4618      	mov	r0, r3
 800638a:	f000 f975 	bl	8006678 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006392:	e155      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006394:	f107 030c 	add.w	r3, r7, #12
 8006398:	4618      	mov	r0, r3
 800639a:	f000 fac1 	bl	8006920 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80063a2:	e14d      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80063a4:	4ba0      	ldr	r3, [pc, #640]	; (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80063a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80063ac:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80063ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d102      	bne.n	80063ba <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80063b4:	4b9d      	ldr	r3, [pc, #628]	; (800662c <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 80063b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80063b8:	e142      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80063ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063c0:	d102      	bne.n	80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
            frequency = CSI_VALUE;
 80063c2:	4b9b      	ldr	r3, [pc, #620]	; (8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80063c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80063c6:	e13b      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80063c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063ce:	d102      	bne.n	80063d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
            frequency = HSE_VALUE;
 80063d0:	4b98      	ldr	r3, [pc, #608]	; (8006634 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 80063d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80063d4:	e134      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
            frequency = 0;
 80063d6:	2300      	movs	r3, #0
 80063d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80063da:	e131      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80063dc:	4b96      	ldr	r3, [pc, #600]	; (8006638 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 80063de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80063e0:	e12e      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      default :
        {
          frequency = 0;
 80063e2:	2300      	movs	r3, #0
 80063e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80063e6:	e12b      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ee:	d15e      	bne.n	80064ae <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80063f0:	4b8d      	ldr	r3, [pc, #564]	; (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80063f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063f4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80063f8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80063fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006400:	d033      	beq.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8006402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006404:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006408:	d84e      	bhi.n	80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800640a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800640c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006410:	d047      	beq.n	80064a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8006412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006414:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006418:	d846      	bhi.n	80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800641a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800641c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006420:	d01b      	beq.n	800645a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8006422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006424:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006428:	d83e      	bhi.n	80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800642a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800642c:	2b00      	cmp	r3, #0
 800642e:	d004      	beq.n	800643a <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
 8006430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006436:	d008      	beq.n	800644a <HAL_RCCEx_GetPeriphCLKFreq+0x36e>
 8006438:	e036      	b.n	80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800643a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800643e:	4618      	mov	r0, r3
 8006440:	f000 fbc2 	bl	8006bc8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006446:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006448:	e0fa      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800644a:	f107 0318 	add.w	r3, r7, #24
 800644e:	4618      	mov	r0, r3
 8006450:	f000 f912 	bl	8006678 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006458:	e0f2      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800645a:	f107 030c 	add.w	r3, r7, #12
 800645e:	4618      	mov	r0, r3
 8006460:	f000 fa5e 	bl	8006920 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006468:	e0ea      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800646a:	4b6f      	ldr	r3, [pc, #444]	; (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800646c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800646e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006472:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8006474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006476:	2b00      	cmp	r3, #0
 8006478:	d102      	bne.n	8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800647a:	4b6c      	ldr	r3, [pc, #432]	; (800662c <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 800647c:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800647e:	e0df      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8006480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006482:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006486:	d102      	bne.n	800648e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
            frequency = CSI_VALUE;
 8006488:	4b69      	ldr	r3, [pc, #420]	; (8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 800648a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800648c:	e0d8      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800648e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006490:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006494:	d102      	bne.n	800649c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
            frequency = HSE_VALUE;
 8006496:	4b67      	ldr	r3, [pc, #412]	; (8006634 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8006498:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800649a:	e0d1      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
            frequency = 0;
 800649c:	2300      	movs	r3, #0
 800649e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80064a0:	e0ce      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80064a2:	4b65      	ldr	r3, [pc, #404]	; (8006638 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 80064a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80064a6:	e0cb      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      default :
        {
          frequency = 0;
 80064a8:	2300      	movs	r3, #0
 80064aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80064ac:	e0c8      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80064b4:	d143      	bne.n	800653e <HAL_RCCEx_GetPeriphCLKFreq+0x462>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80064b6:	4b5c      	ldr	r3, [pc, #368]	; (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80064b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80064be:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80064c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064c6:	d01b      	beq.n	8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 80064c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064ce:	d833      	bhi.n	8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
 80064d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d004      	beq.n	80064e0 <HAL_RCCEx_GetPeriphCLKFreq+0x404>
 80064d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064dc:	d008      	beq.n	80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 80064de:	e02b      	b.n	8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064e0:	f107 0318 	add.w	r3, r7, #24
 80064e4:	4618      	mov	r0, r3
 80064e6:	f000 f8c7 	bl	8006678 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80064ee:	e0a7      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064f0:	f107 030c 	add.w	r3, r7, #12
 80064f4:	4618      	mov	r0, r3
 80064f6:	f000 fa13 	bl	8006920 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80064fe:	e09f      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006500:	4b49      	ldr	r3, [pc, #292]	; (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006504:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006508:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800650a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800650c:	2b00      	cmp	r3, #0
 800650e:	d102      	bne.n	8006516 <HAL_RCCEx_GetPeriphCLKFreq+0x43a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006510:	4b46      	ldr	r3, [pc, #280]	; (800662c <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 8006512:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006514:	e094      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8006516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006518:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800651c:	d102      	bne.n	8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x448>
            frequency = CSI_VALUE;
 800651e:	4b44      	ldr	r3, [pc, #272]	; (8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8006520:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006522:	e08d      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8006524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006526:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800652a:	d102      	bne.n	8006532 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
            frequency = HSE_VALUE;
 800652c:	4b41      	ldr	r3, [pc, #260]	; (8006634 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 800652e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006530:	e086      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
            frequency = 0;
 8006532:	2300      	movs	r3, #0
 8006534:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006536:	e083      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      default :
        {
          frequency = 0;
 8006538:	2300      	movs	r3, #0
 800653a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800653c:	e080      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006544:	d11f      	bne.n	8006586 <HAL_RCCEx_GetPeriphCLKFreq+0x4aa>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8006546:	4b38      	ldr	r3, [pc, #224]	; (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800654a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800654e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006552:	2b00      	cmp	r3, #0
 8006554:	d004      	beq.n	8006560 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8006556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800655c:	d008      	beq.n	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
 800655e:	e00f      	b.n	8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006560:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006564:	4618      	mov	r0, r3
 8006566:	f000 fb2f 	bl	8006bc8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800656a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800656e:	e067      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006570:	f107 0318 	add.w	r3, r7, #24
 8006574:	4618      	mov	r0, r3
 8006576:	f000 f87f 	bl	8006678 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800657a:	6a3b      	ldr	r3, [r7, #32]
 800657c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800657e:	e05f      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      default :
        {
          frequency = 0;
 8006580:	2300      	movs	r3, #0
 8006582:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006584:	e05c      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800658c:	d156      	bne.n	800663c <HAL_RCCEx_GetPeriphCLKFreq+0x560>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800658e:	4b26      	ldr	r3, [pc, #152]	; (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006592:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006596:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800659a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800659e:	d03d      	beq.n	800661c <HAL_RCCEx_GetPeriphCLKFreq+0x540>
 80065a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065a6:	d83c      	bhi.n	8006622 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 80065a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ae:	d032      	beq.n	8006616 <HAL_RCCEx_GetPeriphCLKFreq+0x53a>
 80065b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065b6:	d834      	bhi.n	8006622 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 80065b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80065be:	d027      	beq.n	8006610 <HAL_RCCEx_GetPeriphCLKFreq+0x534>
 80065c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80065c6:	d82c      	bhi.n	8006622 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 80065c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065ce:	d017      	beq.n	8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
 80065d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065d6:	d824      	bhi.n	8006622 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 80065d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d004      	beq.n	80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
 80065de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065e4:	d004      	beq.n	80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
 80065e6:	e01c      	b.n	8006622 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80065e8:	f000 f830 	bl	800664c <HAL_RCCEx_GetD3PCLK1Freq>
 80065ec:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80065ee:	e027      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065f0:	f107 0318 	add.w	r3, r7, #24
 80065f4:	4618      	mov	r0, r3
 80065f6:	f000 f83f 	bl	8006678 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065fe:	e01f      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006600:	f107 030c 	add.w	r3, r7, #12
 8006604:	4618      	mov	r0, r3
 8006606:	f000 f98b 	bl	8006920 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800660e:	e017      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8006610:	4b06      	ldr	r3, [pc, #24]	; (800662c <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 8006612:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006614:	e014      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8006616:	4b06      	ldr	r3, [pc, #24]	; (8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8006618:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800661a:	e011      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 800661c:	4b05      	ldr	r3, [pc, #20]	; (8006634 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 800661e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006620:	e00e      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8006622:	2300      	movs	r3, #0
 8006624:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006626:	e00b      	b.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8006628:	58024400 	.word	0x58024400
 800662c:	03d09000 	.word	0x03d09000
 8006630:	003d0900 	.word	0x003d0900
 8006634:	017d7840 	.word	0x017d7840
 8006638:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else
    {
      frequency = 0;
 800663c:	2300      	movs	r3, #0
 800663e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8006640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006642:	4618      	mov	r0, r3
 8006644:	3740      	adds	r7, #64	; 0x40
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop

0800664c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006650:	f7ff fce8 	bl	8006024 <HAL_RCC_GetHCLKFreq>
 8006654:	4602      	mov	r2, r0
 8006656:	4b06      	ldr	r3, [pc, #24]	; (8006670 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	091b      	lsrs	r3, r3, #4
 800665c:	f003 0307 	and.w	r3, r3, #7
 8006660:	4904      	ldr	r1, [pc, #16]	; (8006674 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006662:	5ccb      	ldrb	r3, [r1, r3]
 8006664:	f003 031f 	and.w	r3, r3, #31
 8006668:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800666c:	4618      	mov	r0, r3
 800666e:	bd80      	pop	{r7, pc}
 8006670:	58024400 	.word	0x58024400
 8006674:	08011674 	.word	0x08011674

08006678 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006678:	b480      	push	{r7}
 800667a:	b089      	sub	sp, #36	; 0x24
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006680:	4ba1      	ldr	r3, [pc, #644]	; (8006908 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006684:	f003 0303 	and.w	r3, r3, #3
 8006688:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800668a:	4b9f      	ldr	r3, [pc, #636]	; (8006908 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800668c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800668e:	0b1b      	lsrs	r3, r3, #12
 8006690:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006694:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006696:	4b9c      	ldr	r3, [pc, #624]	; (8006908 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669a:	091b      	lsrs	r3, r3, #4
 800669c:	f003 0301 	and.w	r3, r3, #1
 80066a0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80066a2:	4b99      	ldr	r3, [pc, #612]	; (8006908 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066a6:	08db      	lsrs	r3, r3, #3
 80066a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	fb02 f303 	mul.w	r3, r2, r3
 80066b2:	ee07 3a90 	vmov	s15, r3
 80066b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	f000 8111 	beq.w	80068e8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	f000 8083 	beq.w	80067d4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	f200 80a1 	bhi.w	8006818 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d003      	beq.n	80066e4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d056      	beq.n	8006790 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80066e2:	e099      	b.n	8006818 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066e4:	4b88      	ldr	r3, [pc, #544]	; (8006908 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0320 	and.w	r3, r3, #32
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d02d      	beq.n	800674c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80066f0:	4b85      	ldr	r3, [pc, #532]	; (8006908 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	08db      	lsrs	r3, r3, #3
 80066f6:	f003 0303 	and.w	r3, r3, #3
 80066fa:	4a84      	ldr	r2, [pc, #528]	; (800690c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80066fc:	fa22 f303 	lsr.w	r3, r2, r3
 8006700:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	ee07 3a90 	vmov	s15, r3
 8006708:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	ee07 3a90 	vmov	s15, r3
 8006712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800671a:	4b7b      	ldr	r3, [pc, #492]	; (8006908 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800671c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800671e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006722:	ee07 3a90 	vmov	s15, r3
 8006726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800672a:	ed97 6a03 	vldr	s12, [r7, #12]
 800672e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006910 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800673a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800673e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006746:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800674a:	e087      	b.n	800685c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	ee07 3a90 	vmov	s15, r3
 8006752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006756:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006914 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800675a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800675e:	4b6a      	ldr	r3, [pc, #424]	; (8006908 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006766:	ee07 3a90 	vmov	s15, r3
 800676a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800676e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006772:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006910 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800677a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800677e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800678a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800678e:	e065      	b.n	800685c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	ee07 3a90 	vmov	s15, r3
 8006796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800679a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006918 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800679e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067a2:	4b59      	ldr	r3, [pc, #356]	; (8006908 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067aa:	ee07 3a90 	vmov	s15, r3
 80067ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80067b6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006910 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80067ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80067d2:	e043      	b.n	800685c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	ee07 3a90 	vmov	s15, r3
 80067da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067de:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800691c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80067e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067e6:	4b48      	ldr	r3, [pc, #288]	; (8006908 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067ee:	ee07 3a90 	vmov	s15, r3
 80067f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80067fa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006910 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80067fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006806:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800680a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800680e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006812:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006816:	e021      	b.n	800685c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	ee07 3a90 	vmov	s15, r3
 800681e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006822:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006918 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800682a:	4b37      	ldr	r3, [pc, #220]	; (8006908 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800682c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006832:	ee07 3a90 	vmov	s15, r3
 8006836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800683a:	ed97 6a03 	vldr	s12, [r7, #12]
 800683e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006910 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800684a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800684e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006856:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800685a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800685c:	4b2a      	ldr	r3, [pc, #168]	; (8006908 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800685e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006860:	0a5b      	lsrs	r3, r3, #9
 8006862:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006866:	ee07 3a90 	vmov	s15, r3
 800686a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800686e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006872:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006876:	edd7 6a07 	vldr	s13, [r7, #28]
 800687a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800687e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006882:	ee17 2a90 	vmov	r2, s15
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800688a:	4b1f      	ldr	r3, [pc, #124]	; (8006908 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800688c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800688e:	0c1b      	lsrs	r3, r3, #16
 8006890:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006894:	ee07 3a90 	vmov	s15, r3
 8006898:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800689c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80068a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068b0:	ee17 2a90 	vmov	r2, s15
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80068b8:	4b13      	ldr	r3, [pc, #76]	; (8006908 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068bc:	0e1b      	lsrs	r3, r3, #24
 80068be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068c2:	ee07 3a90 	vmov	s15, r3
 80068c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80068d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068de:	ee17 2a90 	vmov	r2, s15
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80068e6:	e008      	b.n	80068fa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	609a      	str	r2, [r3, #8]
}
 80068fa:	bf00      	nop
 80068fc:	3724      	adds	r7, #36	; 0x24
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	58024400 	.word	0x58024400
 800690c:	03d09000 	.word	0x03d09000
 8006910:	46000000 	.word	0x46000000
 8006914:	4c742400 	.word	0x4c742400
 8006918:	4a742400 	.word	0x4a742400
 800691c:	4bbebc20 	.word	0x4bbebc20

08006920 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006920:	b480      	push	{r7}
 8006922:	b089      	sub	sp, #36	; 0x24
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006928:	4ba1      	ldr	r3, [pc, #644]	; (8006bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800692a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800692c:	f003 0303 	and.w	r3, r3, #3
 8006930:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006932:	4b9f      	ldr	r3, [pc, #636]	; (8006bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006936:	0d1b      	lsrs	r3, r3, #20
 8006938:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800693c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800693e:	4b9c      	ldr	r3, [pc, #624]	; (8006bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006942:	0a1b      	lsrs	r3, r3, #8
 8006944:	f003 0301 	and.w	r3, r3, #1
 8006948:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800694a:	4b99      	ldr	r3, [pc, #612]	; (8006bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800694c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800694e:	08db      	lsrs	r3, r3, #3
 8006950:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006954:	693a      	ldr	r2, [r7, #16]
 8006956:	fb02 f303 	mul.w	r3, r2, r3
 800695a:	ee07 3a90 	vmov	s15, r3
 800695e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006962:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	2b00      	cmp	r3, #0
 800696a:	f000 8111 	beq.w	8006b90 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	2b02      	cmp	r3, #2
 8006972:	f000 8083 	beq.w	8006a7c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	2b02      	cmp	r3, #2
 800697a:	f200 80a1 	bhi.w	8006ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d003      	beq.n	800698c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	2b01      	cmp	r3, #1
 8006988:	d056      	beq.n	8006a38 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800698a:	e099      	b.n	8006ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800698c:	4b88      	ldr	r3, [pc, #544]	; (8006bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 0320 	and.w	r3, r3, #32
 8006994:	2b00      	cmp	r3, #0
 8006996:	d02d      	beq.n	80069f4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006998:	4b85      	ldr	r3, [pc, #532]	; (8006bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	08db      	lsrs	r3, r3, #3
 800699e:	f003 0303 	and.w	r3, r3, #3
 80069a2:	4a84      	ldr	r2, [pc, #528]	; (8006bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80069a4:	fa22 f303 	lsr.w	r3, r2, r3
 80069a8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	ee07 3a90 	vmov	s15, r3
 80069b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	ee07 3a90 	vmov	s15, r3
 80069ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069c2:	4b7b      	ldr	r3, [pc, #492]	; (8006bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069ca:	ee07 3a90 	vmov	s15, r3
 80069ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80069d6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80069da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069ee:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80069f2:	e087      	b.n	8006b04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	ee07 3a90 	vmov	s15, r3
 80069fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069fe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006bbc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006a02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a06:	4b6a      	ldr	r3, [pc, #424]	; (8006bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a0e:	ee07 3a90 	vmov	s15, r3
 8006a12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a16:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a1a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a36:	e065      	b.n	8006b04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	ee07 3a90 	vmov	s15, r3
 8006a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a42:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a4a:	4b59      	ldr	r3, [pc, #356]	; (8006bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a52:	ee07 3a90 	vmov	s15, r3
 8006a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a5e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a7a:	e043      	b.n	8006b04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	ee07 3a90 	vmov	s15, r3
 8006a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a86:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006a8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a8e:	4b48      	ldr	r3, [pc, #288]	; (8006bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a96:	ee07 3a90 	vmov	s15, r3
 8006a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006aa2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006aa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006abe:	e021      	b.n	8006b04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	ee07 3a90 	vmov	s15, r3
 8006ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ad2:	4b37      	ldr	r3, [pc, #220]	; (8006bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ada:	ee07 3a90 	vmov	s15, r3
 8006ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ae2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ae6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006af2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006afe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b02:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006b04:	4b2a      	ldr	r3, [pc, #168]	; (8006bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b08:	0a5b      	lsrs	r3, r3, #9
 8006b0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b0e:	ee07 3a90 	vmov	s15, r3
 8006b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b2a:	ee17 2a90 	vmov	r2, s15
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006b32:	4b1f      	ldr	r3, [pc, #124]	; (8006bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b36:	0c1b      	lsrs	r3, r3, #16
 8006b38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b3c:	ee07 3a90 	vmov	s15, r3
 8006b40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b48:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b58:	ee17 2a90 	vmov	r2, s15
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006b60:	4b13      	ldr	r3, [pc, #76]	; (8006bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b64:	0e1b      	lsrs	r3, r3, #24
 8006b66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b6a:	ee07 3a90 	vmov	s15, r3
 8006b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b86:	ee17 2a90 	vmov	r2, s15
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006b8e:	e008      	b.n	8006ba2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	609a      	str	r2, [r3, #8]
}
 8006ba2:	bf00      	nop
 8006ba4:	3724      	adds	r7, #36	; 0x24
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr
 8006bae:	bf00      	nop
 8006bb0:	58024400 	.word	0x58024400
 8006bb4:	03d09000 	.word	0x03d09000
 8006bb8:	46000000 	.word	0x46000000
 8006bbc:	4c742400 	.word	0x4c742400
 8006bc0:	4a742400 	.word	0x4a742400
 8006bc4:	4bbebc20 	.word	0x4bbebc20

08006bc8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b089      	sub	sp, #36	; 0x24
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006bd0:	4ba0      	ldr	r3, [pc, #640]	; (8006e54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd4:	f003 0303 	and.w	r3, r3, #3
 8006bd8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8006bda:	4b9e      	ldr	r3, [pc, #632]	; (8006e54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bde:	091b      	lsrs	r3, r3, #4
 8006be0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006be4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006be6:	4b9b      	ldr	r3, [pc, #620]	; (8006e54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006bf0:	4b98      	ldr	r3, [pc, #608]	; (8006e54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bf4:	08db      	lsrs	r3, r3, #3
 8006bf6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006bfa:	693a      	ldr	r2, [r7, #16]
 8006bfc:	fb02 f303 	mul.w	r3, r2, r3
 8006c00:	ee07 3a90 	vmov	s15, r3
 8006c04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c08:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f000 8111 	beq.w	8006e36 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	2b02      	cmp	r3, #2
 8006c18:	f000 8083 	beq.w	8006d22 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	f200 80a1 	bhi.w	8006d66 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d003      	beq.n	8006c32 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d056      	beq.n	8006cde <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006c30:	e099      	b.n	8006d66 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c32:	4b88      	ldr	r3, [pc, #544]	; (8006e54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 0320 	and.w	r3, r3, #32
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d02d      	beq.n	8006c9a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006c3e:	4b85      	ldr	r3, [pc, #532]	; (8006e54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	08db      	lsrs	r3, r3, #3
 8006c44:	f003 0303 	and.w	r3, r3, #3
 8006c48:	4a83      	ldr	r2, [pc, #524]	; (8006e58 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c4e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	ee07 3a90 	vmov	s15, r3
 8006c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	ee07 3a90 	vmov	s15, r3
 8006c60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c68:	4b7a      	ldr	r3, [pc, #488]	; (8006e54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c70:	ee07 3a90 	vmov	s15, r3
 8006c74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c78:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c7c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006e5c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006c80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c94:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006c98:	e087      	b.n	8006daa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	ee07 3a90 	vmov	s15, r3
 8006ca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ca4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006e60 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006ca8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cac:	4b69      	ldr	r3, [pc, #420]	; (8006e54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cb4:	ee07 3a90 	vmov	s15, r3
 8006cb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cbc:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cc0:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006e5c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006cc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ccc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cd8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006cdc:	e065      	b.n	8006daa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	ee07 3a90 	vmov	s15, r3
 8006ce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ce8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006e64 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006cec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cf0:	4b58      	ldr	r3, [pc, #352]	; (8006e54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cf8:	ee07 3a90 	vmov	s15, r3
 8006cfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d00:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d04:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006e5c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006d08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d1c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d20:	e043      	b.n	8006daa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	ee07 3a90 	vmov	s15, r3
 8006d28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d2c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006e68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006d30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d34:	4b47      	ldr	r3, [pc, #284]	; (8006e54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d3c:	ee07 3a90 	vmov	s15, r3
 8006d40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d44:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d48:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006e5c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006d4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d60:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d64:	e021      	b.n	8006daa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	ee07 3a90 	vmov	s15, r3
 8006d6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d70:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8006e64 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006d74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d78:	4b36      	ldr	r3, [pc, #216]	; (8006e54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d80:	ee07 3a90 	vmov	s15, r3
 8006d84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d88:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d8c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006e5c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006d90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006da0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006da4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006da8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8006daa:	4b2a      	ldr	r3, [pc, #168]	; (8006e54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dae:	0a5b      	lsrs	r3, r3, #9
 8006db0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006db4:	ee07 3a90 	vmov	s15, r3
 8006db8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006dc0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006dc4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006dc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dd0:	ee17 2a90 	vmov	r2, s15
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8006dd8:	4b1e      	ldr	r3, [pc, #120]	; (8006e54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ddc:	0c1b      	lsrs	r3, r3, #16
 8006dde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006de2:	ee07 3a90 	vmov	s15, r3
 8006de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006dee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006df2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006df6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dfe:	ee17 2a90 	vmov	r2, s15
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8006e06:	4b13      	ldr	r3, [pc, #76]	; (8006e54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e0a:	0e1b      	lsrs	r3, r3, #24
 8006e0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e10:	ee07 3a90 	vmov	s15, r3
 8006e14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e20:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e2c:	ee17 2a90 	vmov	r2, s15
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006e34:	e008      	b.n	8006e48 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	609a      	str	r2, [r3, #8]
}
 8006e48:	bf00      	nop
 8006e4a:	3724      	adds	r7, #36	; 0x24
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr
 8006e54:	58024400 	.word	0x58024400
 8006e58:	03d09000 	.word	0x03d09000
 8006e5c:	46000000 	.word	0x46000000
 8006e60:	4c742400 	.word	0x4c742400
 8006e64:	4a742400 	.word	0x4a742400
 8006e68:	4bbebc20 	.word	0x4bbebc20

08006e6c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b08a      	sub	sp, #40	; 0x28
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d101      	bne.n	8006e7e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e07c      	b.n	8006f78 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d10c      	bne.n	8006ea4 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	699b      	ldr	r3, [r3, #24]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d102      	bne.n	8006e9e <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2202      	movs	r2, #2
 8006e9c:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f7fa f8b6 	bl	8001010 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2203      	movs	r2, #3
 8006ea8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 f867 	bl	8006f80 <HAL_SD_InitCard>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d001      	beq.n	8006ebc <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e05d      	b.n	8006f78 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8006ebc:	f107 0308 	add.w	r3, r7, #8
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 fdbe 	bl	8007a44 <HAL_SD_GetCardStatus>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d001      	beq.n	8006ed2 <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e052      	b.n	8006f78 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8006ed2:	7e3b      	ldrb	r3, [r7, #24]
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8006ed8:	7e7b      	ldrb	r3, [r7, #25]
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d10a      	bne.n	8006efc <HAL_SD_Init+0x90>
 8006ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d102      	bne.n	8006ef2 <HAL_SD_Init+0x86>
 8006eec:	6a3b      	ldr	r3, [r7, #32]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d004      	beq.n	8006efc <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ef8:	65da      	str	r2, [r3, #92]	; 0x5c
 8006efa:	e00b      	b.n	8006f14 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d104      	bne.n	8006f0e <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f0a:	65da      	str	r2, [r3, #92]	; 0x5c
 8006f0c:	e002      	b.n	8006f14 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	4619      	mov	r1, r3
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 fe74 	bl	8007c08 <HAL_SD_ConfigWideBusOperation>
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d001      	beq.n	8006f2a <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e026      	b.n	8006f78 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8006f2a:	f7fd fb3f 	bl	80045ac <HAL_GetTick>
 8006f2e:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006f30:	e011      	b.n	8006f56 <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8006f32:	f7fd fb3b 	bl	80045ac <HAL_GetTick>
 8006f36:	4602      	mov	r2, r0
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f40:	d109      	bne.n	8006f56 <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006f48:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 8006f52:	2303      	movs	r3, #3
 8006f54:	e010      	b.n	8006f78 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 ff00 	bl	8007d5c <HAL_SD_GetCardState>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b04      	cmp	r3, #4
 8006f60:	d1e7      	bne.n	8006f32 <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2201      	movs	r2, #1
 8006f72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3728      	adds	r7, #40	; 0x28
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006f80:	b5b0      	push	{r4, r5, r7, lr}
 8006f82:	b08e      	sub	sp, #56	; 0x38
 8006f84:	af04      	add	r7, sp, #16
 8006f86:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006f90:	2300      	movs	r3, #0
 8006f92:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006f94:	2300      	movs	r3, #0
 8006f96:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006f98:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006f9c:	f7ff f89e 	bl	80060dc <HAL_RCCEx_GetPeriphCLKFreq>
 8006fa0:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa4:	0a1b      	lsrs	r3, r3, #8
 8006fa6:	4a40      	ldr	r2, [pc, #256]	; (80070a8 <HAL_SD_InitCard+0x128>)
 8006fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8006fac:	091b      	lsrs	r3, r3, #4
 8006fae:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	699b      	ldr	r3, [r3, #24]
 8006fb4:	2b02      	cmp	r3, #2
 8006fb6:	d107      	bne.n	8006fc8 <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f042 0210 	orr.w	r2, r2, #16
 8006fc6:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681d      	ldr	r5, [r3, #0]
 8006fcc:	466c      	mov	r4, sp
 8006fce:	f107 0314 	add.w	r3, r7, #20
 8006fd2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006fd6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006fda:	f107 0308 	add.w	r3, r7, #8
 8006fde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006fe0:	4628      	mov	r0, r5
 8006fe2:	f004 f971 	bl	800b2c8 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4618      	mov	r0, r3
 8006fec:	f004 f9b4 	bl	800b358 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8006ff0:	69bb      	ldr	r3, [r7, #24]
 8006ff2:	005b      	lsls	r3, r3, #1
 8006ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ffa:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 8006ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d008      	beq.n	8007014 <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8007002:	4a2a      	ldr	r2, [pc, #168]	; (80070ac <HAL_SD_InitCard+0x12c>)
 8007004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007006:	fbb2 f3f3 	udiv	r3, r2, r3
 800700a:	3301      	adds	r3, #1
 800700c:	4618      	mov	r0, r3
 800700e:	f7fd fad9 	bl	80045c4 <HAL_Delay>
 8007012:	e002      	b.n	800701a <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 8007014:	2002      	movs	r0, #2
 8007016:	f7fd fad5 	bl	80045c4 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 ff7c 	bl	8007f18 <SD_PowerON>
 8007020:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007022:	6a3b      	ldr	r3, [r7, #32]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00b      	beq.n	8007040 <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007034:	6a3b      	ldr	r3, [r7, #32]
 8007036:	431a      	orrs	r2, r3
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	e02e      	b.n	800709e <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 feab 	bl	8007d9c <SD_InitCard>
 8007046:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007048:	6a3b      	ldr	r3, [r7, #32]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00b      	beq.n	8007066 <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2201      	movs	r2, #1
 8007052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800705a:	6a3b      	ldr	r3, [r7, #32]
 800705c:	431a      	orrs	r2, r3
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	e01b      	b.n	800709e <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800706e:	4618      	mov	r0, r3
 8007070:	f004 fa08 	bl	800b484 <SDMMC_CmdBlockLength>
 8007074:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007076:	6a3b      	ldr	r3, [r7, #32]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00f      	beq.n	800709c <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a0b      	ldr	r2, [pc, #44]	; (80070b0 <HAL_SD_InitCard+0x130>)
 8007082:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007088:	6a3b      	ldr	r3, [r7, #32]
 800708a:	431a      	orrs	r2, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	e000      	b.n	800709e <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3728      	adds	r7, #40	; 0x28
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bdb0      	pop	{r4, r5, r7, pc}
 80070a6:	bf00      	nop
 80070a8:	014f8b59 	.word	0x014f8b59
 80070ac:	00012110 	.word	0x00012110
 80070b0:	1fe00fff 	.word	0x1fe00fff

080070b4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b092      	sub	sp, #72	; 0x48
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	607a      	str	r2, [r7, #4]
 80070c0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80070c2:	f7fd fa73 	bl	80045ac <HAL_GetTick>
 80070c6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d107      	bne.n	80070e6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070da:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e167      	b.n	80073b6 <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	f040 815a 	bne.w	80073a8 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2200      	movs	r2, #0
 80070f8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80070fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	441a      	add	r2, r3
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007104:	429a      	cmp	r2, r3
 8007106:	d907      	bls.n	8007118 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800710c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	e14e      	b.n	80073b6 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2203      	movs	r2, #3
 800711c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	2200      	movs	r2, #0
 8007126:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800712c:	2b01      	cmp	r3, #1
 800712e:	d002      	beq.n	8007136 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8007130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007132:	025b      	lsls	r3, r3, #9
 8007134:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007136:	f04f 33ff 	mov.w	r3, #4294967295
 800713a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	025b      	lsls	r3, r3, #9
 8007140:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007142:	2390      	movs	r3, #144	; 0x90
 8007144:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007146:	2302      	movs	r3, #2
 8007148:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800714a:	2300      	movs	r3, #0
 800714c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800714e:	2300      	movs	r3, #0
 8007150:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f107 0214 	add.w	r2, r7, #20
 800715a:	4611      	mov	r1, r2
 800715c:	4618      	mov	r0, r3
 800715e:	f004 f965 	bl	800b42c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68da      	ldr	r2, [r3, #12]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007170:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	2b01      	cmp	r3, #1
 8007176:	d90a      	bls.n	800718e <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2202      	movs	r2, #2
 800717c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007184:	4618      	mov	r0, r3
 8007186:	f004 f9c3 	bl	800b510 <SDMMC_CmdReadMultiBlock>
 800718a:	6478      	str	r0, [r7, #68]	; 0x44
 800718c:	e009      	b.n	80071a2 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2201      	movs	r2, #1
 8007192:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800719a:	4618      	mov	r0, r3
 800719c:	f004 f995 	bl	800b4ca <SDMMC_CmdReadSingleBlock>
 80071a0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80071a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d012      	beq.n	80071ce <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a84      	ldr	r2, [pc, #528]	; (80073c0 <HAL_SD_ReadBlocks+0x30c>)
 80071ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071b6:	431a      	orrs	r2, r3
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2200      	movs	r2, #0
 80071c8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	e0f3      	b.n	80073b6 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80071d2:	e058      	b.n	8007286 <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d033      	beq.n	800724a <HAL_SD_ReadBlocks+0x196>
 80071e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071e4:	2b1f      	cmp	r3, #31
 80071e6:	d930      	bls.n	800724a <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80071e8:	2300      	movs	r3, #0
 80071ea:	643b      	str	r3, [r7, #64]	; 0x40
 80071ec:	e027      	b.n	800723e <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4618      	mov	r0, r3
 80071f4:	f004 f892 	bl	800b31c <SDMMC_ReadFIFO>
 80071f8:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80071fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071fc:	b2da      	uxtb	r2, r3
 80071fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007200:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007204:	3301      	adds	r3, #1
 8007206:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800720a:	0a1b      	lsrs	r3, r3, #8
 800720c:	b2da      	uxtb	r2, r3
 800720e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007210:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007214:	3301      	adds	r3, #1
 8007216:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800721a:	0c1b      	lsrs	r3, r3, #16
 800721c:	b2da      	uxtb	r2, r3
 800721e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007220:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007224:	3301      	adds	r3, #1
 8007226:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800722a:	0e1b      	lsrs	r3, r3, #24
 800722c:	b2da      	uxtb	r2, r3
 800722e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007230:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007234:	3301      	adds	r3, #1
 8007236:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 8007238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800723a:	3301      	adds	r3, #1
 800723c:	643b      	str	r3, [r7, #64]	; 0x40
 800723e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007240:	2b07      	cmp	r3, #7
 8007242:	d9d4      	bls.n	80071ee <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8007244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007246:	3b20      	subs	r3, #32
 8007248:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800724a:	f7fd f9af 	bl	80045ac <HAL_GetTick>
 800724e:	4602      	mov	r2, r0
 8007250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007252:	1ad3      	subs	r3, r2, r3
 8007254:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007256:	429a      	cmp	r2, r3
 8007258:	d902      	bls.n	8007260 <HAL_SD_ReadBlocks+0x1ac>
 800725a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800725c:	2b00      	cmp	r3, #0
 800725e:	d112      	bne.n	8007286 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a56      	ldr	r2, [pc, #344]	; (80073c0 <HAL_SD_ReadBlocks+0x30c>)
 8007266:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2201      	movs	r2, #1
 8007278:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2200      	movs	r2, #0
 8007280:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007282:	2303      	movs	r3, #3
 8007284:	e097      	b.n	80073b6 <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800728c:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8007290:	2b00      	cmp	r3, #0
 8007292:	d09f      	beq.n	80071d4 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	68da      	ldr	r2, [r3, #12]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072a2:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d022      	beq.n	80072f8 <HAL_SD_ReadBlocks+0x244>
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d91f      	bls.n	80072f8 <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072bc:	2b03      	cmp	r3, #3
 80072be:	d01b      	beq.n	80072f8 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4618      	mov	r0, r3
 80072c6:	f004 f98d 	bl	800b5e4 <SDMMC_CmdStopTransfer>
 80072ca:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80072cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d012      	beq.n	80072f8 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a3a      	ldr	r2, [pc, #232]	; (80073c0 <HAL_SD_ReadBlocks+0x30c>)
 80072d8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072e0:	431a      	orrs	r2, r3
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2201      	movs	r2, #1
 80072ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2200      	movs	r2, #0
 80072f2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	e05e      	b.n	80073b6 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072fe:	f003 0308 	and.w	r3, r3, #8
 8007302:	2b00      	cmp	r3, #0
 8007304:	d012      	beq.n	800732c <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a2d      	ldr	r2, [pc, #180]	; (80073c0 <HAL_SD_ReadBlocks+0x30c>)
 800730c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007312:	f043 0208 	orr.w	r2, r3, #8
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2201      	movs	r2, #1
 800731e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2200      	movs	r2, #0
 8007326:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	e044      	b.n	80073b6 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007332:	f003 0302 	and.w	r3, r3, #2
 8007336:	2b00      	cmp	r3, #0
 8007338:	d012      	beq.n	8007360 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a20      	ldr	r2, [pc, #128]	; (80073c0 <HAL_SD_ReadBlocks+0x30c>)
 8007340:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007346:	f043 0202 	orr.w	r2, r3, #2
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2201      	movs	r2, #1
 8007352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2200      	movs	r2, #0
 800735a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	e02a      	b.n	80073b6 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007366:	f003 0320 	and.w	r3, r3, #32
 800736a:	2b00      	cmp	r3, #0
 800736c:	d012      	beq.n	8007394 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a13      	ldr	r2, [pc, #76]	; (80073c0 <HAL_SD_ReadBlocks+0x30c>)
 8007374:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800737a:	f043 0220 	orr.w	r2, r3, #32
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2201      	movs	r2, #1
 8007386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2200      	movs	r2, #0
 800738e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	e010      	b.n	80073b6 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a0a      	ldr	r2, [pc, #40]	; (80073c4 <HAL_SD_ReadBlocks+0x310>)
 800739a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80073a4:	2300      	movs	r3, #0
 80073a6:	e006      	b.n	80073b6 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
  }
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3748      	adds	r7, #72	; 0x48
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	1fe00fff 	.word	0x1fe00fff
 80073c4:	18000f3a 	.word	0x18000f3a

080073c8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b092      	sub	sp, #72	; 0x48
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	607a      	str	r2, [r7, #4]
 80073d4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80073d6:	f7fd f8e9 	bl	80045ac <HAL_GetTick>
 80073da:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d107      	bne.n	80073fa <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	e16b      	b.n	80076d2 <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007400:	b2db      	uxtb	r3, r3
 8007402:	2b01      	cmp	r3, #1
 8007404:	f040 815e 	bne.w	80076c4 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2200      	movs	r2, #0
 800740c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800740e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	441a      	add	r2, r3
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007418:	429a      	cmp	r2, r3
 800741a:	d907      	bls.n	800742c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007420:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	e152      	b.n	80076d2 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2203      	movs	r2, #3
 8007430:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2200      	movs	r2, #0
 800743a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007440:	2b01      	cmp	r3, #1
 8007442:	d002      	beq.n	800744a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8007444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007446:	025b      	lsls	r3, r3, #9
 8007448:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800744a:	f04f 33ff 	mov.w	r3, #4294967295
 800744e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	025b      	lsls	r3, r3, #9
 8007454:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007456:	2390      	movs	r3, #144	; 0x90
 8007458:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800745a:	2300      	movs	r3, #0
 800745c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800745e:	2300      	movs	r3, #0
 8007460:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007462:	2300      	movs	r3, #0
 8007464:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f107 0218 	add.w	r2, r7, #24
 800746e:	4611      	mov	r1, r2
 8007470:	4618      	mov	r0, r3
 8007472:	f003 ffdb 	bl	800b42c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	68da      	ldr	r2, [r3, #12]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007484:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	2b01      	cmp	r3, #1
 800748a:	d90a      	bls.n	80074a2 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2220      	movs	r2, #32
 8007490:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007498:	4618      	mov	r0, r3
 800749a:	f004 f87f 	bl	800b59c <SDMMC_CmdWriteMultiBlock>
 800749e:	6478      	str	r0, [r7, #68]	; 0x44
 80074a0:	e009      	b.n	80074b6 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2210      	movs	r2, #16
 80074a6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80074ae:	4618      	mov	r0, r3
 80074b0:	f004 f851 	bl	800b556 <SDMMC_CmdWriteSingleBlock>
 80074b4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80074b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d012      	beq.n	80074e2 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a86      	ldr	r2, [pc, #536]	; (80076dc <HAL_SD_WriteBlocks+0x314>)
 80074c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074ca:	431a      	orrs	r2, r3
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2200      	movs	r2, #0
 80074dc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	e0f7      	b.n	80076d2 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80074e6:	e05c      	b.n	80075a2 <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d037      	beq.n	8007566 <HAL_SD_WriteBlocks+0x19e>
 80074f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074f8:	2b1f      	cmp	r3, #31
 80074fa:	d934      	bls.n	8007566 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80074fc:	2300      	movs	r3, #0
 80074fe:	643b      	str	r3, [r7, #64]	; 0x40
 8007500:	e02b      	b.n	800755a <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8007502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800750a:	3301      	adds	r3, #1
 800750c:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800750e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	021a      	lsls	r2, r3, #8
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	4313      	orrs	r3, r2
 8007518:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800751a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800751c:	3301      	adds	r3, #1
 800751e:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8007520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	041a      	lsls	r2, r3, #16
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	4313      	orrs	r3, r2
 800752a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800752c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800752e:	3301      	adds	r3, #1
 8007530:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8007532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	061a      	lsls	r2, r3, #24
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	4313      	orrs	r3, r2
 800753c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800753e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007540:	3301      	adds	r3, #1
 8007542:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f107 0214 	add.w	r2, r7, #20
 800754c:	4611      	mov	r1, r2
 800754e:	4618      	mov	r0, r3
 8007550:	f003 fef1 	bl	800b336 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8007554:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007556:	3301      	adds	r3, #1
 8007558:	643b      	str	r3, [r7, #64]	; 0x40
 800755a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800755c:	2b07      	cmp	r3, #7
 800755e:	d9d0      	bls.n	8007502 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8007560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007562:	3b20      	subs	r3, #32
 8007564:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007566:	f7fd f821 	bl	80045ac <HAL_GetTick>
 800756a:	4602      	mov	r2, r0
 800756c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756e:	1ad3      	subs	r3, r2, r3
 8007570:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007572:	429a      	cmp	r2, r3
 8007574:	d902      	bls.n	800757c <HAL_SD_WriteBlocks+0x1b4>
 8007576:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007578:	2b00      	cmp	r3, #0
 800757a:	d112      	bne.n	80075a2 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a56      	ldr	r2, [pc, #344]	; (80076dc <HAL_SD_WriteBlocks+0x314>)
 8007582:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800758a:	431a      	orrs	r2, r3
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2201      	movs	r2, #1
 8007594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2200      	movs	r2, #0
 800759c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800759e:	2303      	movs	r3, #3
 80075a0:	e097      	b.n	80076d2 <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075a8:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d09b      	beq.n	80074e8 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68da      	ldr	r2, [r3, #12]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075be:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d022      	beq.n	8007614 <HAL_SD_WriteBlocks+0x24c>
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d91f      	bls.n	8007614 <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075d8:	2b03      	cmp	r3, #3
 80075da:	d01b      	beq.n	8007614 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4618      	mov	r0, r3
 80075e2:	f003 ffff 	bl	800b5e4 <SDMMC_CmdStopTransfer>
 80075e6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80075e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d012      	beq.n	8007614 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a3a      	ldr	r2, [pc, #232]	; (80076dc <HAL_SD_WriteBlocks+0x314>)
 80075f4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075fc:	431a      	orrs	r2, r3
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2201      	movs	r2, #1
 8007606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2200      	movs	r2, #0
 800760e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	e05e      	b.n	80076d2 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800761a:	f003 0308 	and.w	r3, r3, #8
 800761e:	2b00      	cmp	r3, #0
 8007620:	d012      	beq.n	8007648 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a2d      	ldr	r2, [pc, #180]	; (80076dc <HAL_SD_WriteBlocks+0x314>)
 8007628:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800762e:	f043 0208 	orr.w	r2, r3, #8
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2201      	movs	r2, #1
 800763a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	e044      	b.n	80076d2 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800764e:	f003 0302 	and.w	r3, r3, #2
 8007652:	2b00      	cmp	r3, #0
 8007654:	d012      	beq.n	800767c <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a20      	ldr	r2, [pc, #128]	; (80076dc <HAL_SD_WriteBlocks+0x314>)
 800765c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007662:	f043 0202 	orr.w	r2, r3, #2
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2201      	movs	r2, #1
 800766e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2200      	movs	r2, #0
 8007676:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007678:	2301      	movs	r3, #1
 800767a:	e02a      	b.n	80076d2 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007682:	f003 0310 	and.w	r3, r3, #16
 8007686:	2b00      	cmp	r3, #0
 8007688:	d012      	beq.n	80076b0 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a13      	ldr	r2, [pc, #76]	; (80076dc <HAL_SD_WriteBlocks+0x314>)
 8007690:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007696:	f043 0210 	orr.w	r2, r3, #16
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2201      	movs	r2, #1
 80076a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2200      	movs	r2, #0
 80076aa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	e010      	b.n	80076d2 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a0a      	ldr	r2, [pc, #40]	; (80076e0 <HAL_SD_WriteBlocks+0x318>)
 80076b6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80076c0:	2300      	movs	r3, #0
 80076c2:	e006      	b.n	80076d2 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80076d0:	2301      	movs	r3, #1
  }
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3748      	adds	r7, #72	; 0x48
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	1fe00fff 	.word	0x1fe00fff
 80076e0:	18000f3a 	.word	0x18000f3a

080076e4 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	4603      	mov	r3, r0
 80076ec:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 80076ee:	bf00      	nop
 80076f0:	370c      	adds	r7, #12
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr
	...

080076fc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b083      	sub	sp, #12
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800770a:	0f9b      	lsrs	r3, r3, #30
 800770c:	b2da      	uxtb	r2, r3
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007716:	0e9b      	lsrs	r3, r3, #26
 8007718:	b2db      	uxtb	r3, r3
 800771a:	f003 030f 	and.w	r3, r3, #15
 800771e:	b2da      	uxtb	r2, r3
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007728:	0e1b      	lsrs	r3, r3, #24
 800772a:	b2db      	uxtb	r3, r3
 800772c:	f003 0303 	and.w	r3, r3, #3
 8007730:	b2da      	uxtb	r2, r3
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800773a:	0c1b      	lsrs	r3, r3, #16
 800773c:	b2da      	uxtb	r2, r3
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007746:	0a1b      	lsrs	r3, r3, #8
 8007748:	b2da      	uxtb	r2, r3
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007752:	b2da      	uxtb	r2, r3
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800775c:	0d1b      	lsrs	r3, r3, #20
 800775e:	b29a      	uxth	r2, r3
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007768:	0c1b      	lsrs	r3, r3, #16
 800776a:	b2db      	uxtb	r3, r3
 800776c:	f003 030f 	and.w	r3, r3, #15
 8007770:	b2da      	uxtb	r2, r3
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800777a:	0bdb      	lsrs	r3, r3, #15
 800777c:	b2db      	uxtb	r3, r3
 800777e:	f003 0301 	and.w	r3, r3, #1
 8007782:	b2da      	uxtb	r2, r3
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800778c:	0b9b      	lsrs	r3, r3, #14
 800778e:	b2db      	uxtb	r3, r3
 8007790:	f003 0301 	and.w	r3, r3, #1
 8007794:	b2da      	uxtb	r2, r3
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800779e:	0b5b      	lsrs	r3, r3, #13
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	f003 0301 	and.w	r3, r3, #1
 80077a6:	b2da      	uxtb	r2, r3
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077b0:	0b1b      	lsrs	r3, r3, #12
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	f003 0301 	and.w	r3, r3, #1
 80077b8:	b2da      	uxtb	r2, r3
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	2200      	movs	r2, #0
 80077c2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d163      	bne.n	8007894 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077d0:	009a      	lsls	r2, r3, #2
 80077d2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80077d6:	4013      	ands	r3, r2
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80077dc:	0f92      	lsrs	r2, r2, #30
 80077de:	431a      	orrs	r2, r3
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077e8:	0edb      	lsrs	r3, r3, #27
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	f003 0307 	and.w	r3, r3, #7
 80077f0:	b2da      	uxtb	r2, r3
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077fa:	0e1b      	lsrs	r3, r3, #24
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	f003 0307 	and.w	r3, r3, #7
 8007802:	b2da      	uxtb	r2, r3
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800780c:	0d5b      	lsrs	r3, r3, #21
 800780e:	b2db      	uxtb	r3, r3
 8007810:	f003 0307 	and.w	r3, r3, #7
 8007814:	b2da      	uxtb	r2, r3
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800781e:	0c9b      	lsrs	r3, r3, #18
 8007820:	b2db      	uxtb	r3, r3
 8007822:	f003 0307 	and.w	r3, r3, #7
 8007826:	b2da      	uxtb	r2, r3
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007830:	0bdb      	lsrs	r3, r3, #15
 8007832:	b2db      	uxtb	r3, r3
 8007834:	f003 0307 	and.w	r3, r3, #7
 8007838:	b2da      	uxtb	r2, r3
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	1c5a      	adds	r2, r3, #1
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	7e1b      	ldrb	r3, [r3, #24]
 800784c:	b2db      	uxtb	r3, r3
 800784e:	f003 0307 	and.w	r3, r3, #7
 8007852:	3302      	adds	r3, #2
 8007854:	2201      	movs	r2, #1
 8007856:	fa02 f303 	lsl.w	r3, r2, r3
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800785e:	fb02 f203 	mul.w	r2, r2, r3
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	7a1b      	ldrb	r3, [r3, #8]
 800786a:	b2db      	uxtb	r3, r3
 800786c:	f003 030f 	and.w	r3, r3, #15
 8007870:	2201      	movs	r2, #1
 8007872:	409a      	lsls	r2, r3
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800787c:	687a      	ldr	r2, [r7, #4]
 800787e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007880:	0a52      	lsrs	r2, r2, #9
 8007882:	fb02 f203 	mul.w	r2, r2, r3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007890:	659a      	str	r2, [r3, #88]	; 0x58
 8007892:	e031      	b.n	80078f8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007898:	2b01      	cmp	r3, #1
 800789a:	d11d      	bne.n	80078d8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078a0:	041b      	lsls	r3, r3, #16
 80078a2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078aa:	0c1b      	lsrs	r3, r3, #16
 80078ac:	431a      	orrs	r2, r3
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	691b      	ldr	r3, [r3, #16]
 80078b6:	3301      	adds	r3, #1
 80078b8:	029a      	lsls	r2, r3, #10
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078cc:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	659a      	str	r2, [r3, #88]	; 0x58
 80078d6:	e00f      	b.n	80078f8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a58      	ldr	r2, [pc, #352]	; (8007a40 <HAL_SD_GetCardCSD+0x344>)
 80078de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80078f4:	2301      	movs	r3, #1
 80078f6:	e09d      	b.n	8007a34 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078fc:	0b9b      	lsrs	r3, r3, #14
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	f003 0301 	and.w	r3, r3, #1
 8007904:	b2da      	uxtb	r2, r3
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800790e:	09db      	lsrs	r3, r3, #7
 8007910:	b2db      	uxtb	r3, r3
 8007912:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007916:	b2da      	uxtb	r2, r3
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007920:	b2db      	uxtb	r3, r3
 8007922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007926:	b2da      	uxtb	r2, r3
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007930:	0fdb      	lsrs	r3, r3, #31
 8007932:	b2da      	uxtb	r2, r3
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800793c:	0f5b      	lsrs	r3, r3, #29
 800793e:	b2db      	uxtb	r3, r3
 8007940:	f003 0303 	and.w	r3, r3, #3
 8007944:	b2da      	uxtb	r2, r3
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800794e:	0e9b      	lsrs	r3, r3, #26
 8007950:	b2db      	uxtb	r3, r3
 8007952:	f003 0307 	and.w	r3, r3, #7
 8007956:	b2da      	uxtb	r2, r3
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007960:	0d9b      	lsrs	r3, r3, #22
 8007962:	b2db      	uxtb	r3, r3
 8007964:	f003 030f 	and.w	r3, r3, #15
 8007968:	b2da      	uxtb	r2, r3
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007972:	0d5b      	lsrs	r3, r3, #21
 8007974:	b2db      	uxtb	r3, r3
 8007976:	f003 0301 	and.w	r3, r3, #1
 800797a:	b2da      	uxtb	r2, r3
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	2200      	movs	r2, #0
 8007986:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800798e:	0c1b      	lsrs	r3, r3, #16
 8007990:	b2db      	uxtb	r3, r3
 8007992:	f003 0301 	and.w	r3, r3, #1
 8007996:	b2da      	uxtb	r2, r3
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079a2:	0bdb      	lsrs	r3, r3, #15
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	f003 0301 	and.w	r3, r3, #1
 80079aa:	b2da      	uxtb	r2, r3
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079b6:	0b9b      	lsrs	r3, r3, #14
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	f003 0301 	and.w	r3, r3, #1
 80079be:	b2da      	uxtb	r2, r3
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079ca:	0b5b      	lsrs	r3, r3, #13
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	f003 0301 	and.w	r3, r3, #1
 80079d2:	b2da      	uxtb	r2, r3
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079de:	0b1b      	lsrs	r3, r3, #12
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	f003 0301 	and.w	r3, r3, #1
 80079e6:	b2da      	uxtb	r2, r3
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079f2:	0a9b      	lsrs	r3, r3, #10
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	f003 0303 	and.w	r3, r3, #3
 80079fa:	b2da      	uxtb	r2, r3
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a06:	0a1b      	lsrs	r3, r3, #8
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	f003 0303 	and.w	r3, r3, #3
 8007a0e:	b2da      	uxtb	r2, r3
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a1a:	085b      	lsrs	r3, r3, #1
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a22:	b2da      	uxtb	r2, r3
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007a32:	2300      	movs	r3, #0
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	370c      	adds	r7, #12
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr
 8007a40:	1fe00fff 	.word	0x1fe00fff

08007a44 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b094      	sub	sp, #80	; 0x50
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8007a54:	f107 0308 	add.w	r3, r7, #8
 8007a58:	4619      	mov	r1, r3
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 fb64 	bl	8008128 <SD_SendSDStatus>
 8007a60:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d011      	beq.n	8007a8c <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a4f      	ldr	r2, [pc, #316]	; (8007bac <HAL_SD_GetCardStatus+0x168>)
 8007a6e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a76:	431a      	orrs	r2, r3
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8007a8a:	e070      	b.n	8007b6e <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	099b      	lsrs	r3, r3, #6
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	f003 0303 	and.w	r3, r3, #3
 8007a96:	b2da      	uxtb	r2, r3
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	095b      	lsrs	r3, r3, #5
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	f003 0301 	and.w	r3, r3, #1
 8007aa6:	b2da      	uxtb	r2, r3
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	0a1b      	lsrs	r3, r3, #8
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007ab6:	b29a      	uxth	r2, r3
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	0e1b      	lsrs	r3, r3, #24
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	b29a      	uxth	r2, r3
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	061a      	lsls	r2, r3, #24
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	021b      	lsls	r3, r3, #8
 8007ace:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007ad2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	0a1b      	lsrs	r3, r3, #8
 8007ad8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007adc:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	0e1b      	lsrs	r3, r3, #24
 8007ae2:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	b2da      	uxtb	r2, r3
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	0a1b      	lsrs	r3, r3, #8
 8007af4:	b2da      	uxtb	r2, r3
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	0d1b      	lsrs	r3, r3, #20
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	f003 030f 	and.w	r3, r3, #15
 8007b04:	b2da      	uxtb	r2, r3
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	0c1b      	lsrs	r3, r3, #16
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007b14:	b29a      	uxth	r2, r3
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	b29a      	uxth	r2, r3
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	0a9b      	lsrs	r3, r3, #10
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b30:	b2da      	uxtb	r2, r3
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	0a1b      	lsrs	r3, r3, #8
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	f003 0303 	and.w	r3, r3, #3
 8007b40:	b2da      	uxtb	r2, r3
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	091b      	lsrs	r3, r3, #4
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	f003 030f 	and.w	r3, r3, #15
 8007b50:	b2da      	uxtb	r2, r3
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	f003 030f 	and.w	r3, r3, #15
 8007b5e:	b2da      	uxtb	r2, r3
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8007b64:	69bb      	ldr	r3, [r7, #24]
 8007b66:	0e1b      	lsrs	r3, r3, #24
 8007b68:	b2da      	uxtb	r2, r3
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007b76:	4618      	mov	r0, r3
 8007b78:	f003 fc84 	bl	800b484 <SDMMC_CmdBlockLength>
 8007b7c:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d00d      	beq.n	8007ba0 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a08      	ldr	r2, [pc, #32]	; (8007bac <HAL_SD_GetCardStatus+0x168>)
 8007b8a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b90:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2201      	movs	r2, #1
 8007b96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8007ba0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3750      	adds	r7, #80	; 0x50
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	1fe00fff 	.word	0x1fe00fff

08007bb0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007c08:	b5b0      	push	{r4, r5, r7, lr}
 8007c0a:	b08e      	sub	sp, #56	; 0x38
 8007c0c:	af04      	add	r7, sp, #16
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007c12:	2300      	movs	r3, #0
 8007c14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2203      	movs	r2, #3
 8007c1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c24:	2b03      	cmp	r3, #3
 8007c26:	d02e      	beq.n	8007c86 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c2e:	d106      	bne.n	8007c3e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c34:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	639a      	str	r2, [r3, #56]	; 0x38
 8007c3c:	e029      	b.n	8007c92 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c44:	d10a      	bne.n	8007c5c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 fb66 	bl	8008318 <SD_WideBus_Enable>
 8007c4c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c52:	6a3b      	ldr	r3, [r7, #32]
 8007c54:	431a      	orrs	r2, r3
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	639a      	str	r2, [r3, #56]	; 0x38
 8007c5a:	e01a      	b.n	8007c92 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d10a      	bne.n	8007c78 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 fba3 	bl	80083ae <SD_WideBus_Disable>
 8007c68:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c6e:	6a3b      	ldr	r3, [r7, #32]
 8007c70:	431a      	orrs	r2, r3
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	639a      	str	r2, [r3, #56]	; 0x38
 8007c76:	e00c      	b.n	8007c92 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c7c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	639a      	str	r2, [r3, #56]	; 0x38
 8007c84:	e005      	b.n	8007c92 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c8a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d007      	beq.n	8007caa <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a2e      	ldr	r2, [pc, #184]	; (8007d58 <HAL_SD_ConfigWideBusOperation+0x150>)
 8007ca0:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007ca8:	e034      	b.n	8007d14 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	691b      	ldr	r3, [r3, #16]
 8007cbe:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	695b      	ldr	r3, [r3, #20]
 8007cc4:	2b03      	cmp	r3, #3
 8007cc6:	d903      	bls.n	8007cd0 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	695b      	ldr	r3, [r3, #20]
 8007ccc:	61bb      	str	r3, [r7, #24]
 8007cce:	e012      	b.n	8007cf6 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cd8:	d103      	bne.n	8007ce2 <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	695b      	ldr	r3, [r3, #20]
 8007cde:	61bb      	str	r3, [r7, #24]
 8007ce0:	e009      	b.n	8007cf6 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ce6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cea:	d102      	bne.n	8007cf2 <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 8007cec:	2302      	movs	r3, #2
 8007cee:	61bb      	str	r3, [r7, #24]
 8007cf0:	e001      	b.n	8007cf6 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 8007cf2:	2304      	movs	r3, #4
 8007cf4:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681d      	ldr	r5, [r3, #0]
 8007cfa:	466c      	mov	r4, sp
 8007cfc:	f107 0314 	add.w	r3, r7, #20
 8007d00:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007d04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007d08:	f107 0308 	add.w	r3, r7, #8
 8007d0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007d0e:	4628      	mov	r0, r5
 8007d10:	f003 fada 	bl	800b2c8 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f003 fbb1 	bl	800b484 <SDMMC_CmdBlockLength>
 8007d22:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d24:	6a3b      	ldr	r3, [r7, #32]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d00c      	beq.n	8007d44 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a0a      	ldr	r2, [pc, #40]	; (8007d58 <HAL_SD_ConfigWideBusOperation+0x150>)
 8007d30:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d36:	6a3b      	ldr	r3, [r7, #32]
 8007d38:	431a      	orrs	r2, r3
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2201      	movs	r2, #1
 8007d48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8007d4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3728      	adds	r7, #40	; 0x28
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bdb0      	pop	{r4, r5, r7, pc}
 8007d58:	1fe00fff 	.word	0x1fe00fff

08007d5c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b086      	sub	sp, #24
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007d64:	2300      	movs	r3, #0
 8007d66:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007d68:	f107 030c 	add.w	r3, r7, #12
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 faaa 	bl	80082c8 <SD_SendStatus>
 8007d74:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d005      	beq.n	8007d88 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	431a      	orrs	r2, r3
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	0a5b      	lsrs	r3, r3, #9
 8007d8c:	f003 030f 	and.w	r3, r3, #15
 8007d90:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007d92:	693b      	ldr	r3, [r7, #16]
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3718      	adds	r7, #24
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b090      	sub	sp, #64	; 0x40
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007da4:	2301      	movs	r3, #1
 8007da6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4618      	mov	r0, r3
 8007dae:	f003 fae4 	bl	800b37a <SDMMC_GetPowerState>
 8007db2:	4603      	mov	r3, r0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d102      	bne.n	8007dbe <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007db8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007dbc:	e0a7      	b.n	8007f0e <SD_InitCard+0x172>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dc2:	2b03      	cmp	r3, #3
 8007dc4:	d02e      	beq.n	8007e24 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f003 fd30 	bl	800b830 <SDMMC_CmdSendCID>
 8007dd0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d001      	beq.n	8007ddc <SD_InitCard+0x40>
    {
      return errorstate;
 8007dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dda:	e098      	b.n	8007f0e <SD_InitCard+0x172>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2100      	movs	r1, #0
 8007de2:	4618      	mov	r0, r3
 8007de4:	f003 fb0f 	bl	800b406 <SDMMC_GetResponse>
 8007de8:	4602      	mov	r2, r0
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	2104      	movs	r1, #4
 8007df4:	4618      	mov	r0, r3
 8007df6:	f003 fb06 	bl	800b406 <SDMMC_GetResponse>
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2108      	movs	r1, #8
 8007e06:	4618      	mov	r0, r3
 8007e08:	f003 fafd 	bl	800b406 <SDMMC_GetResponse>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	210c      	movs	r1, #12
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f003 faf4 	bl	800b406 <SDMMC_GetResponse>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e28:	2b03      	cmp	r3, #3
 8007e2a:	d00d      	beq.n	8007e48 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f107 020e 	add.w	r2, r7, #14
 8007e34:	4611      	mov	r1, r2
 8007e36:	4618      	mov	r0, r3
 8007e38:	f003 fd39 	bl	800b8ae <SDMMC_CmdSetRelAdd>
 8007e3c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d001      	beq.n	8007e48 <SD_InitCard+0xac>
    {
      return errorstate;
 8007e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e46:	e062      	b.n	8007f0e <SD_InitCard+0x172>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e4c:	2b03      	cmp	r3, #3
 8007e4e:	d036      	beq.n	8007ebe <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007e50:	89fb      	ldrh	r3, [r7, #14]
 8007e52:	461a      	mov	r2, r3
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e60:	041b      	lsls	r3, r3, #16
 8007e62:	4619      	mov	r1, r3
 8007e64:	4610      	mov	r0, r2
 8007e66:	f003 fd02 	bl	800b86e <SDMMC_CmdSendCSD>
 8007e6a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d001      	beq.n	8007e76 <SD_InitCard+0xda>
    {
      return errorstate;
 8007e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e74:	e04b      	b.n	8007f0e <SD_InitCard+0x172>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	2100      	movs	r1, #0
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f003 fac2 	bl	800b406 <SDMMC_GetResponse>
 8007e82:	4602      	mov	r2, r0
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	2104      	movs	r1, #4
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f003 fab9 	bl	800b406 <SDMMC_GetResponse>
 8007e94:	4602      	mov	r2, r0
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2108      	movs	r1, #8
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f003 fab0 	bl	800b406 <SDMMC_GetResponse>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	210c      	movs	r1, #12
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f003 faa7 	bl	800b406 <SDMMC_GetResponse>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	2104      	movs	r1, #4
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f003 fa9e 	bl	800b406 <SDMMC_GetResponse>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	0d1a      	lsrs	r2, r3, #20
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007ed2:	f107 0310 	add.w	r3, r7, #16
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f7ff fc0f 	bl	80076fc <HAL_SD_GetCardCSD>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d002      	beq.n	8007eea <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007ee4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007ee8:	e011      	b.n	8007f0e <SD_InitCard+0x172>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6819      	ldr	r1, [r3, #0]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ef2:	041b      	lsls	r3, r3, #16
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	f04f 0300 	mov.w	r3, #0
 8007efa:	4608      	mov	r0, r1
 8007efc:	f003 fbae 	bl	800b65c <SDMMC_CmdSelDesel>
 8007f00:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d001      	beq.n	8007f0c <SD_InitCard+0x170>
  {
    return errorstate;
 8007f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f0a:	e000      	b.n	8007f0e <SD_InitCard+0x172>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007f0c:	2300      	movs	r3, #0
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3740      	adds	r7, #64	; 0x40
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
	...

08007f18 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b088      	sub	sp, #32
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f20:	2300      	movs	r3, #0
 8007f22:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8007f24:	2300      	movs	r3, #0
 8007f26:	61fb      	str	r3, [r7, #28]
 8007f28:	2300      	movs	r3, #0
 8007f2a:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 8007f2c:	f7fc fb3e 	bl	80045ac <HAL_GetTick>
 8007f30:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4618      	mov	r0, r3
 8007f38:	f003 fbb4 	bl	800b6a4 <SDMMC_CmdGoIdleState>
 8007f3c:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d001      	beq.n	8007f48 <SD_PowerON+0x30>
  {
    return errorstate;
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	e0e9      	b.n	800811c <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f003 fbc7 	bl	800b6e0 <SDMMC_CmdOperCond>
 8007f52:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d00d      	beq.n	8007f76 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4618      	mov	r0, r3
 8007f66:	f003 fb9d 	bl	800b6a4 <SDMMC_CmdGoIdleState>
 8007f6a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d004      	beq.n	8007f7c <SD_PowerON+0x64>
    {
      return errorstate;
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	e0d2      	b.n	800811c <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2201      	movs	r2, #1
 8007f7a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d137      	bne.n	8007ff4 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2100      	movs	r1, #0
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f003 fbc8 	bl	800b720 <SDMMC_CmdAppCommand>
 8007f90:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d02d      	beq.n	8007ff4 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007f98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007f9c:	e0be      	b.n	800811c <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	2100      	movs	r1, #0
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f003 fbbb 	bl	800b720 <SDMMC_CmdAppCommand>
 8007faa:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d001      	beq.n	8007fb6 <SD_PowerON+0x9e>
    {
      return errorstate;
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	e0b2      	b.n	800811c <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	495a      	ldr	r1, [pc, #360]	; (8008124 <SD_PowerON+0x20c>)
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f003 fbd2 	bl	800b766 <SDMMC_CmdAppOperCommand>
 8007fc2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d002      	beq.n	8007fd0 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007fca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007fce:	e0a5      	b.n	800811c <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2100      	movs	r1, #0
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f003 fa15 	bl	800b406 <SDMMC_GetResponse>
 8007fdc:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007fde:	69fb      	ldr	r3, [r7, #28]
 8007fe0:	0fdb      	lsrs	r3, r3, #31
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d101      	bne.n	8007fea <SD_PowerON+0xd2>
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	e000      	b.n	8007fec <SD_PowerON+0xd4>
 8007fea:	2300      	movs	r3, #0
 8007fec:	61bb      	str	r3, [r7, #24]

    count++;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d802      	bhi.n	8008004 <SD_PowerON+0xec>
 8007ffe:	69bb      	ldr	r3, [r7, #24]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d0cc      	beq.n	8007f9e <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800800a:	4293      	cmp	r3, r2
 800800c:	d902      	bls.n	8008014 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800800e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008012:	e083      	b.n	800811c <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008014:	69fb      	ldr	r3, [r7, #28]
 8008016:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800801a:	2b00      	cmp	r3, #0
 800801c:	d07d      	beq.n	800811a <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2201      	movs	r2, #1
 8008022:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	699b      	ldr	r3, [r3, #24]
 8008028:	2b02      	cmp	r3, #2
 800802a:	d176      	bne.n	800811a <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008032:	2b00      	cmp	r3, #0
 8008034:	d071      	beq.n	800811a <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f44f 7200 	mov.w	r2, #512	; 0x200
 800803c:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f042 0208 	orr.w	r2, r2, #8
 800804c:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4618      	mov	r0, r3
 8008054:	f003 fc92 	bl	800b97c <SDMMC_CmdVoltageSwitch>
 8008058:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d00c      	beq.n	800807a <SD_PowerON+0x162>
        {
          return errorstate;
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	e05b      	b.n	800811c <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008064:	f7fc faa2 	bl	80045ac <HAL_GetTick>
 8008068:	4602      	mov	r2, r0
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008072:	d102      	bne.n	800807a <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8008074:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008078:	e050      	b.n	800811c <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008080:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008084:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008088:	d1ec      	bne.n	8008064 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8008092:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800809a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800809e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080a2:	d002      	beq.n	80080aa <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 80080a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80080a8:	e038      	b.n	800811c <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 80080aa:	2001      	movs	r0, #1
 80080ac:	f7ff fb1a 	bl	80076e4 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f042 0204 	orr.w	r2, r2, #4
 80080be:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 80080c0:	e00a      	b.n	80080d8 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80080c2:	f7fc fa73 	bl	80045ac <HAL_GetTick>
 80080c6:	4602      	mov	r2, r0
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	1ad3      	subs	r3, r2, r3
 80080cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080d0:	d102      	bne.n	80080d8 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 80080d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80080d6:	e021      	b.n	800811c <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080e6:	d1ec      	bne.n	80080c2 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80080f0:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80080fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008100:	d102      	bne.n	8008108 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008102:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008106:	e009      	b.n	800811c <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	2213      	movs	r2, #19
 800810e:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f04f 32ff 	mov.w	r2, #4294967295
 8008118:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800811a:	2300      	movs	r3, #0
}
 800811c:	4618      	mov	r0, r3
 800811e:	3720      	adds	r7, #32
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}
 8008124:	c1100000 	.word	0xc1100000

08008128 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b08c      	sub	sp, #48	; 0x30
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008132:	f7fc fa3b 	bl	80045ac <HAL_GetTick>
 8008136:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	2100      	movs	r1, #0
 8008142:	4618      	mov	r0, r3
 8008144:	f003 f95f 	bl	800b406 <SDMMC_GetResponse>
 8008148:	4603      	mov	r3, r0
 800814a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800814e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008152:	d102      	bne.n	800815a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008154:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008158:	e0b0      	b.n	80082bc <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	2140      	movs	r1, #64	; 0x40
 8008160:	4618      	mov	r0, r3
 8008162:	f003 f98f 	bl	800b484 <SDMMC_CmdBlockLength>
 8008166:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008168:	6a3b      	ldr	r3, [r7, #32]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d005      	beq.n	800817a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008176:	6a3b      	ldr	r3, [r7, #32]
 8008178:	e0a0      	b.n	80082bc <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008182:	041b      	lsls	r3, r3, #16
 8008184:	4619      	mov	r1, r3
 8008186:	4610      	mov	r0, r2
 8008188:	f003 faca 	bl	800b720 <SDMMC_CmdAppCommand>
 800818c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800818e:	6a3b      	ldr	r3, [r7, #32]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d005      	beq.n	80081a0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800819c:	6a3b      	ldr	r3, [r7, #32]
 800819e:	e08d      	b.n	80082bc <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80081a0:	f04f 33ff 	mov.w	r3, #4294967295
 80081a4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80081a6:	2340      	movs	r3, #64	; 0x40
 80081a8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80081aa:	2360      	movs	r3, #96	; 0x60
 80081ac:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80081ae:	2302      	movs	r3, #2
 80081b0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80081b2:	2300      	movs	r3, #0
 80081b4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80081b6:	2301      	movs	r3, #1
 80081b8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f107 0208 	add.w	r2, r7, #8
 80081c2:	4611      	mov	r1, r2
 80081c4:	4618      	mov	r0, r3
 80081c6:	f003 f931 	bl	800b42c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4618      	mov	r0, r3
 80081d0:	f003 fbb2 	bl	800b938 <SDMMC_CmdStatusRegister>
 80081d4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80081d6:	6a3b      	ldr	r3, [r7, #32]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d02b      	beq.n	8008234 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80081e4:	6a3b      	ldr	r3, [r7, #32]
 80081e6:	e069      	b.n	80082bc <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d013      	beq.n	800821e <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 80081f6:	2300      	movs	r3, #0
 80081f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081fa:	e00d      	b.n	8008218 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4618      	mov	r0, r3
 8008202:	f003 f88b 	bl	800b31c <SDMMC_ReadFIFO>
 8008206:	4602      	mov	r2, r0
 8008208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800820a:	601a      	str	r2, [r3, #0]
        pData++;
 800820c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800820e:	3304      	adds	r3, #4
 8008210:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8008212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008214:	3301      	adds	r3, #1
 8008216:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800821a:	2b07      	cmp	r3, #7
 800821c:	d9ee      	bls.n	80081fc <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800821e:	f7fc f9c5 	bl	80045ac <HAL_GetTick>
 8008222:	4602      	mov	r2, r0
 8008224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008226:	1ad3      	subs	r3, r2, r3
 8008228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800822c:	d102      	bne.n	8008234 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800822e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008232:	e043      	b.n	80082bc <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800823a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800823e:	2b00      	cmp	r3, #0
 8008240:	d0d2      	beq.n	80081e8 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008248:	f003 0308 	and.w	r3, r3, #8
 800824c:	2b00      	cmp	r3, #0
 800824e:	d001      	beq.n	8008254 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008250:	2308      	movs	r3, #8
 8008252:	e033      	b.n	80082bc <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800825a:	f003 0302 	and.w	r3, r3, #2
 800825e:	2b00      	cmp	r3, #0
 8008260:	d001      	beq.n	8008266 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008262:	2302      	movs	r3, #2
 8008264:	e02a      	b.n	80082bc <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800826c:	f003 0320 	and.w	r3, r3, #32
 8008270:	2b00      	cmp	r3, #0
 8008272:	d017      	beq.n	80082a4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8008274:	2320      	movs	r3, #32
 8008276:	e021      	b.n	80082bc <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4618      	mov	r0, r3
 800827e:	f003 f84d 	bl	800b31c <SDMMC_ReadFIFO>
 8008282:	4602      	mov	r2, r0
 8008284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008286:	601a      	str	r2, [r3, #0]
    pData++;
 8008288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828a:	3304      	adds	r3, #4
 800828c:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800828e:	f7fc f98d 	bl	80045ac <HAL_GetTick>
 8008292:	4602      	mov	r2, r0
 8008294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008296:	1ad3      	subs	r3, r2, r3
 8008298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800829c:	d102      	bne.n	80082a4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800829e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80082a2:	e00b      	b.n	80082bc <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d1e2      	bne.n	8008278 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a03      	ldr	r2, [pc, #12]	; (80082c4 <SD_SendSDStatus+0x19c>)
 80082b8:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 80082ba:	2300      	movs	r3, #0
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3730      	adds	r7, #48	; 0x30
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}
 80082c4:	18000f3a 	.word	0x18000f3a

080082c8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d102      	bne.n	80082de <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80082d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80082dc:	e018      	b.n	8008310 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082e6:	041b      	lsls	r3, r3, #16
 80082e8:	4619      	mov	r1, r3
 80082ea:	4610      	mov	r0, r2
 80082ec:	f003 fb01 	bl	800b8f2 <SDMMC_CmdSendStatus>
 80082f0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d001      	beq.n	80082fc <SD_SendStatus+0x34>
  {
    return errorstate;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	e009      	b.n	8008310 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	2100      	movs	r1, #0
 8008302:	4618      	mov	r0, r3
 8008304:	f003 f87f 	bl	800b406 <SDMMC_GetResponse>
 8008308:	4602      	mov	r2, r0
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800830e:	2300      	movs	r3, #0
}
 8008310:	4618      	mov	r0, r3
 8008312:	3710      	adds	r7, #16
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b086      	sub	sp, #24
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008320:	2300      	movs	r3, #0
 8008322:	60fb      	str	r3, [r7, #12]
 8008324:	2300      	movs	r3, #0
 8008326:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	2100      	movs	r1, #0
 800832e:	4618      	mov	r0, r3
 8008330:	f003 f869 	bl	800b406 <SDMMC_GetResponse>
 8008334:	4603      	mov	r3, r0
 8008336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800833a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800833e:	d102      	bne.n	8008346 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008340:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008344:	e02f      	b.n	80083a6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008346:	f107 030c 	add.w	r3, r7, #12
 800834a:	4619      	mov	r1, r3
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 f879 	bl	8008444 <SD_FindSCR>
 8008352:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d001      	beq.n	800835e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	e023      	b.n	80083a6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008364:	2b00      	cmp	r3, #0
 8008366:	d01c      	beq.n	80083a2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008370:	041b      	lsls	r3, r3, #16
 8008372:	4619      	mov	r1, r3
 8008374:	4610      	mov	r0, r2
 8008376:	f003 f9d3 	bl	800b720 <SDMMC_CmdAppCommand>
 800837a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d001      	beq.n	8008386 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	e00f      	b.n	80083a6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	2102      	movs	r1, #2
 800838c:	4618      	mov	r0, r3
 800838e:	f003 fa0a 	bl	800b7a6 <SDMMC_CmdBusWidth>
 8008392:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d001      	beq.n	800839e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	e003      	b.n	80083a6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800839e:	2300      	movs	r3, #0
 80083a0:	e001      	b.n	80083a6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80083a2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3718      	adds	r7, #24
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}

080083ae <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80083ae:	b580      	push	{r7, lr}
 80083b0:	b086      	sub	sp, #24
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80083b6:	2300      	movs	r3, #0
 80083b8:	60fb      	str	r3, [r7, #12]
 80083ba:	2300      	movs	r3, #0
 80083bc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	2100      	movs	r1, #0
 80083c4:	4618      	mov	r0, r3
 80083c6:	f003 f81e 	bl	800b406 <SDMMC_GetResponse>
 80083ca:	4603      	mov	r3, r0
 80083cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80083d4:	d102      	bne.n	80083dc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80083d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80083da:	e02f      	b.n	800843c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80083dc:	f107 030c 	add.w	r3, r7, #12
 80083e0:	4619      	mov	r1, r3
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 f82e 	bl	8008444 <SD_FindSCR>
 80083e8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d001      	beq.n	80083f4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	e023      	b.n	800843c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d01c      	beq.n	8008438 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681a      	ldr	r2, [r3, #0]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008406:	041b      	lsls	r3, r3, #16
 8008408:	4619      	mov	r1, r3
 800840a:	4610      	mov	r0, r2
 800840c:	f003 f988 	bl	800b720 <SDMMC_CmdAppCommand>
 8008410:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d001      	beq.n	800841c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	e00f      	b.n	800843c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	2100      	movs	r1, #0
 8008422:	4618      	mov	r0, r3
 8008424:	f003 f9bf 	bl	800b7a6 <SDMMC_CmdBusWidth>
 8008428:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d001      	beq.n	8008434 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	e003      	b.n	800843c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008434:	2300      	movs	r3, #0
 8008436:	e001      	b.n	800843c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008438:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800843c:	4618      	mov	r0, r3
 800843e:	3718      	adds	r7, #24
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b08e      	sub	sp, #56	; 0x38
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800844e:	f7fc f8ad 	bl	80045ac <HAL_GetTick>
 8008452:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008454:	2300      	movs	r3, #0
 8008456:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8008458:	2300      	movs	r3, #0
 800845a:	60bb      	str	r3, [r7, #8]
 800845c:	2300      	movs	r3, #0
 800845e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	2108      	movs	r1, #8
 800846a:	4618      	mov	r0, r3
 800846c:	f003 f80a 	bl	800b484 <SDMMC_CmdBlockLength>
 8008470:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008474:	2b00      	cmp	r3, #0
 8008476:	d001      	beq.n	800847c <SD_FindSCR+0x38>
  {
    return errorstate;
 8008478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800847a:	e0ad      	b.n	80085d8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008484:	041b      	lsls	r3, r3, #16
 8008486:	4619      	mov	r1, r3
 8008488:	4610      	mov	r0, r2
 800848a:	f003 f949 	bl	800b720 <SDMMC_CmdAppCommand>
 800848e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008492:	2b00      	cmp	r3, #0
 8008494:	d001      	beq.n	800849a <SD_FindSCR+0x56>
  {
    return errorstate;
 8008496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008498:	e09e      	b.n	80085d8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800849a:	f04f 33ff 	mov.w	r3, #4294967295
 800849e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80084a0:	2308      	movs	r3, #8
 80084a2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80084a4:	2330      	movs	r3, #48	; 0x30
 80084a6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80084a8:	2302      	movs	r3, #2
 80084aa:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80084ac:	2300      	movs	r3, #0
 80084ae:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80084b0:	2301      	movs	r3, #1
 80084b2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f107 0210 	add.w	r2, r7, #16
 80084bc:	4611      	mov	r1, r2
 80084be:	4618      	mov	r0, r3
 80084c0:	f002 ffb4 	bl	800b42c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4618      	mov	r0, r3
 80084ca:	f003 f98f 	bl	800b7ec <SDMMC_CmdSendSCR>
 80084ce:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80084d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d027      	beq.n	8008526 <SD_FindSCR+0xe2>
  {
    return errorstate;
 80084d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d8:	e07e      	b.n	80085d8 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d113      	bne.n	8008510 <SD_FindSCR+0xcc>
 80084e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d110      	bne.n	8008510 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4618      	mov	r0, r3
 80084f4:	f002 ff12 	bl	800b31c <SDMMC_ReadFIFO>
 80084f8:	4603      	mov	r3, r0
 80084fa:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4618      	mov	r0, r3
 8008502:	f002 ff0b 	bl	800b31c <SDMMC_ReadFIFO>
 8008506:	4603      	mov	r3, r0
 8008508:	60fb      	str	r3, [r7, #12]
      index++;
 800850a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800850c:	3301      	adds	r3, #1
 800850e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008510:	f7fc f84c 	bl	80045ac <HAL_GetTick>
 8008514:	4602      	mov	r2, r0
 8008516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008518:	1ad3      	subs	r3, r2, r3
 800851a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800851e:	d102      	bne.n	8008526 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008520:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008524:	e058      	b.n	80085d8 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800852c:	f240 532a 	movw	r3, #1322	; 0x52a
 8008530:	4013      	ands	r3, r2
 8008532:	2b00      	cmp	r3, #0
 8008534:	d0d1      	beq.n	80084da <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800853c:	f003 0308 	and.w	r3, r3, #8
 8008540:	2b00      	cmp	r3, #0
 8008542:	d005      	beq.n	8008550 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2208      	movs	r2, #8
 800854a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800854c:	2308      	movs	r3, #8
 800854e:	e043      	b.n	80085d8 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008556:	f003 0302 	and.w	r3, r3, #2
 800855a:	2b00      	cmp	r3, #0
 800855c:	d005      	beq.n	800856a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2202      	movs	r2, #2
 8008564:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008566:	2302      	movs	r3, #2
 8008568:	e036      	b.n	80085d8 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008570:	f003 0320 	and.w	r3, r3, #32
 8008574:	2b00      	cmp	r3, #0
 8008576:	d005      	beq.n	8008584 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2220      	movs	r2, #32
 800857e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008580:	2320      	movs	r3, #32
 8008582:	e029      	b.n	80085d8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a15      	ldr	r2, [pc, #84]	; (80085e0 <SD_FindSCR+0x19c>)
 800858a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	061a      	lsls	r2, r3, #24
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	021b      	lsls	r3, r3, #8
 8008594:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008598:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	0a1b      	lsrs	r3, r3, #8
 800859e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80085a2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	0e1b      	lsrs	r3, r3, #24
 80085a8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80085aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ac:	601a      	str	r2, [r3, #0]
    scr++;
 80085ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b0:	3304      	adds	r3, #4
 80085b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	061a      	lsls	r2, r3, #24
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	021b      	lsls	r3, r3, #8
 80085bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80085c0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	0a1b      	lsrs	r3, r3, #8
 80085c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80085ca:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	0e1b      	lsrs	r3, r3, #24
 80085d0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80085d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80085d6:	2300      	movs	r3, #0
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3738      	adds	r7, #56	; 0x38
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}
 80085e0:	18000f3a 	.word	0x18000f3a

080085e4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b084      	sub	sp, #16
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 80085ec:	2300      	movs	r3, #0
 80085ee:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d101      	bne.n	80085fa <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 80085f6:	2301      	movs	r3, #1
 80085f8:	e0e2      	b.n	80087c0 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2200      	movs	r2, #0
 80085fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a70      	ldr	r2, [pc, #448]	; (80087c8 <HAL_SPI_Init+0x1e4>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d00f      	beq.n	800862a <HAL_SPI_Init+0x46>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a6f      	ldr	r2, [pc, #444]	; (80087cc <HAL_SPI_Init+0x1e8>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d00a      	beq.n	800862a <HAL_SPI_Init+0x46>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a6d      	ldr	r2, [pc, #436]	; (80087d0 <HAL_SPI_Init+0x1ec>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d005      	beq.n	800862a <HAL_SPI_Init+0x46>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	68db      	ldr	r3, [r3, #12]
 8008622:	2b0f      	cmp	r3, #15
 8008624:	d901      	bls.n	800862a <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8008626:	2301      	movs	r3, #1
 8008628:	e0ca      	b.n	80087c0 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f001 fa88 	bl	8009b40 <SPI_GetPacketSize>
 8008630:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a64      	ldr	r2, [pc, #400]	; (80087c8 <HAL_SPI_Init+0x1e4>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d00c      	beq.n	8008656 <HAL_SPI_Init+0x72>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a62      	ldr	r2, [pc, #392]	; (80087cc <HAL_SPI_Init+0x1e8>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d007      	beq.n	8008656 <HAL_SPI_Init+0x72>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a61      	ldr	r2, [pc, #388]	; (80087d0 <HAL_SPI_Init+0x1ec>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d002      	beq.n	8008656 <HAL_SPI_Init+0x72>
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	2b08      	cmp	r3, #8
 8008654:	d811      	bhi.n	800867a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800865a:	4a5b      	ldr	r2, [pc, #364]	; (80087c8 <HAL_SPI_Init+0x1e4>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d009      	beq.n	8008674 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a59      	ldr	r2, [pc, #356]	; (80087cc <HAL_SPI_Init+0x1e8>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d004      	beq.n	8008674 <HAL_SPI_Init+0x90>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a58      	ldr	r2, [pc, #352]	; (80087d0 <HAL_SPI_Init+0x1ec>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d104      	bne.n	800867e <HAL_SPI_Init+0x9a>
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	2b10      	cmp	r3, #16
 8008678:	d901      	bls.n	800867e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800867a:	2301      	movs	r3, #1
 800867c:	e0a0      	b.n	80087c0 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008684:	b2db      	uxtb	r3, r3
 8008686:	2b00      	cmp	r3, #0
 8008688:	d106      	bne.n	8008698 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2200      	movs	r2, #0
 800868e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f7f8 fd28 	bl	80010e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2202      	movs	r2, #2
 800869c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f022 0201 	bic.w	r2, r2, #1
 80086ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	699b      	ldr	r3, [r3, #24]
 80086b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80086b8:	d110      	bne.n	80086dc <HAL_SPI_Init+0xf8>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086c2:	d10b      	bne.n	80086dc <HAL_SPI_Init+0xf8>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d107      	bne.n	80086dc <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80086da:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	69da      	ldr	r2, [r3, #28]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e4:	431a      	orrs	r2, r3
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	431a      	orrs	r2, r3
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ee:	ea42 0103 	orr.w	r1, r2, r3
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	68da      	ldr	r2, [r3, #12]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	430a      	orrs	r2, r1
 80086fc:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008706:	431a      	orrs	r2, r3
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800870c:	431a      	orrs	r2, r3
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	699b      	ldr	r3, [r3, #24]
 8008712:	431a      	orrs	r2, r3
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	691b      	ldr	r3, [r3, #16]
 8008718:	431a      	orrs	r2, r3
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	695b      	ldr	r3, [r3, #20]
 800871e:	431a      	orrs	r2, r3
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6a1b      	ldr	r3, [r3, #32]
 8008724:	431a      	orrs	r2, r3
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	431a      	orrs	r2, r3
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008730:	431a      	orrs	r2, r3
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	431a      	orrs	r2, r3
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800873c:	ea42 0103 	orr.w	r1, r2, r3
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	430a      	orrs	r2, r1
 800874a:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d113      	bne.n	800877c <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	689b      	ldr	r3, [r3, #8]
 800875a:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008766:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	689b      	ldr	r3, [r3, #8]
 800876e:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800877a:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f022 0201 	bic.w	r2, r2, #1
 800878a:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008794:	2b00      	cmp	r3, #0
 8008796:	d00a      	beq.n	80087ae <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	68db      	ldr	r3, [r3, #12]
 800879e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	430a      	orrs	r2, r1
 80087ac:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2200      	movs	r2, #0
 80087b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2201      	movs	r2, #1
 80087ba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80087be:	2300      	movs	r3, #0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3710      	adds	r7, #16
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	40013000 	.word	0x40013000
 80087cc:	40003800 	.word	0x40003800
 80087d0:	40003c00 	.word	0x40003c00

080087d4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b08a      	sub	sp, #40	; 0x28
 80087d8:	af02      	add	r7, sp, #8
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	60b9      	str	r1, [r7, #8]
 80087de:	603b      	str	r3, [r7, #0]
 80087e0:	4613      	mov	r3, r2
 80087e2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	3320      	adds	r3, #32
 80087ea:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80087ec:	2300      	movs	r3, #0
 80087ee:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	d101      	bne.n	80087fe <HAL_SPI_Transmit+0x2a>
 80087fa:	2302      	movs	r3, #2
 80087fc:	e1d7      	b.n	8008bae <HAL_SPI_Transmit+0x3da>
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2201      	movs	r2, #1
 8008802:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008806:	f7fb fed1 	bl	80045ac <HAL_GetTick>
 800880a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008812:	b2db      	uxtb	r3, r3
 8008814:	2b01      	cmp	r3, #1
 8008816:	d007      	beq.n	8008828 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8008818:	2302      	movs	r3, #2
 800881a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2200      	movs	r2, #0
 8008820:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008824:	7efb      	ldrb	r3, [r7, #27]
 8008826:	e1c2      	b.n	8008bae <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d002      	beq.n	8008834 <HAL_SPI_Transmit+0x60>
 800882e:	88fb      	ldrh	r3, [r7, #6]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d107      	bne.n	8008844 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8008834:	2301      	movs	r3, #1
 8008836:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2200      	movs	r2, #0
 800883c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008840:	7efb      	ldrb	r3, [r7, #27]
 8008842:	e1b4      	b.n	8008bae <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2203      	movs	r2, #3
 8008848:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2200      	movs	r2, #0
 8008850:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	68ba      	ldr	r2, [r7, #8]
 8008858:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	88fa      	ldrh	r2, [r7, #6]
 800885e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	88fa      	ldrh	r2, [r7, #6]
 8008866:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2200      	movs	r2, #0
 800886e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2200      	movs	r2, #0
 8008874:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2200      	movs	r2, #0
 800887c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2200      	movs	r2, #0
 8008884:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2200      	movs	r2, #0
 800888a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008894:	d107      	bne.n	80088a6 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	685a      	ldr	r2, [r3, #4]
 80088ac:	4b96      	ldr	r3, [pc, #600]	; (8008b08 <HAL_SPI_Transmit+0x334>)
 80088ae:	4013      	ands	r3, r2
 80088b0:	88f9      	ldrh	r1, [r7, #6]
 80088b2:	68fa      	ldr	r2, [r7, #12]
 80088b4:	6812      	ldr	r2, [r2, #0]
 80088b6:	430b      	orrs	r3, r1
 80088b8:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	681a      	ldr	r2, [r3, #0]
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f042 0201 	orr.w	r2, r2, #1
 80088c8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80088d2:	d107      	bne.n	80088e4 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	68db      	ldr	r3, [r3, #12]
 80088e8:	2b0f      	cmp	r3, #15
 80088ea:	d947      	bls.n	800897c <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80088ec:	e03f      	b.n	800896e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	695b      	ldr	r3, [r3, #20]
 80088f4:	f003 0302 	and.w	r3, r3, #2
 80088f8:	2b02      	cmp	r3, #2
 80088fa:	d114      	bne.n	8008926 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	6812      	ldr	r2, [r2, #0]
 8008906:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800890c:	1d1a      	adds	r2, r3, #4
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008918:	b29b      	uxth	r3, r3
 800891a:	3b01      	subs	r3, #1
 800891c:	b29a      	uxth	r2, r3
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008924:	e023      	b.n	800896e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008926:	f7fb fe41 	bl	80045ac <HAL_GetTick>
 800892a:	4602      	mov	r2, r0
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	1ad3      	subs	r3, r2, r3
 8008930:	683a      	ldr	r2, [r7, #0]
 8008932:	429a      	cmp	r2, r3
 8008934:	d803      	bhi.n	800893e <HAL_SPI_Transmit+0x16a>
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800893c:	d102      	bne.n	8008944 <HAL_SPI_Transmit+0x170>
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d114      	bne.n	800896e <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008944:	68f8      	ldr	r0, [r7, #12]
 8008946:	f001 f82d 	bl	80099a4 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2200      	movs	r2, #0
 800894e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008958:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2201      	movs	r2, #1
 8008966:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	e11f      	b.n	8008bae <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008974:	b29b      	uxth	r3, r3
 8008976:	2b00      	cmp	r3, #0
 8008978:	d1b9      	bne.n	80088ee <HAL_SPI_Transmit+0x11a>
 800897a:	e0f2      	b.n	8008b62 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	68db      	ldr	r3, [r3, #12]
 8008980:	2b07      	cmp	r3, #7
 8008982:	f240 80e7 	bls.w	8008b54 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008986:	e05d      	b.n	8008a44 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	695b      	ldr	r3, [r3, #20]
 800898e:	f003 0302 	and.w	r3, r3, #2
 8008992:	2b02      	cmp	r3, #2
 8008994:	d132      	bne.n	80089fc <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800899c:	b29b      	uxth	r3, r3
 800899e:	2b01      	cmp	r3, #1
 80089a0:	d918      	bls.n	80089d4 <HAL_SPI_Transmit+0x200>
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d014      	beq.n	80089d4 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	6812      	ldr	r2, [r2, #0]
 80089b4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089ba:	1d1a      	adds	r2, r3, #4
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	3b02      	subs	r3, #2
 80089ca:	b29a      	uxth	r2, r3
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80089d2:	e037      	b.n	8008a44 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089d8:	881a      	ldrh	r2, [r3, #0]
 80089da:	69fb      	ldr	r3, [r7, #28]
 80089dc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089e2:	1c9a      	adds	r2, r3, #2
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	3b01      	subs	r3, #1
 80089f2:	b29a      	uxth	r2, r3
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80089fa:	e023      	b.n	8008a44 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80089fc:	f7fb fdd6 	bl	80045ac <HAL_GetTick>
 8008a00:	4602      	mov	r2, r0
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	1ad3      	subs	r3, r2, r3
 8008a06:	683a      	ldr	r2, [r7, #0]
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d803      	bhi.n	8008a14 <HAL_SPI_Transmit+0x240>
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a12:	d102      	bne.n	8008a1a <HAL_SPI_Transmit+0x246>
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d114      	bne.n	8008a44 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008a1a:	68f8      	ldr	r0, [r7, #12]
 8008a1c:	f000 ffc2 	bl	80099a4 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2200      	movs	r2, #0
 8008a24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a2e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8008a40:	2301      	movs	r3, #1
 8008a42:	e0b4      	b.n	8008bae <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d19b      	bne.n	8008988 <HAL_SPI_Transmit+0x1b4>
 8008a50:	e087      	b.n	8008b62 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	695b      	ldr	r3, [r3, #20]
 8008a58:	f003 0302 	and.w	r3, r3, #2
 8008a5c:	2b02      	cmp	r3, #2
 8008a5e:	d155      	bne.n	8008b0c <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	2b03      	cmp	r3, #3
 8008a6a:	d918      	bls.n	8008a9e <HAL_SPI_Transmit+0x2ca>
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a70:	2b40      	cmp	r3, #64	; 0x40
 8008a72:	d914      	bls.n	8008a9e <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	6812      	ldr	r2, [r2, #0]
 8008a7e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a84:	1d1a      	adds	r2, r3, #4
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	3b04      	subs	r3, #4
 8008a94:	b29a      	uxth	r2, r3
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008a9c:	e05a      	b.n	8008b54 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008aa4:	b29b      	uxth	r3, r3
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d917      	bls.n	8008ada <HAL_SPI_Transmit+0x306>
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d013      	beq.n	8008ada <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ab6:	881a      	ldrh	r2, [r3, #0]
 8008ab8:	69fb      	ldr	r3, [r7, #28]
 8008aba:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ac0:	1c9a      	adds	r2, r3, #2
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	3b02      	subs	r3, #2
 8008ad0:	b29a      	uxth	r2, r3
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008ad8:	e03c      	b.n	8008b54 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	3320      	adds	r3, #32
 8008ae4:	7812      	ldrb	r2, [r2, #0]
 8008ae6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008aec:	1c5a      	adds	r2, r3, #1
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008af8:	b29b      	uxth	r3, r3
 8008afa:	3b01      	subs	r3, #1
 8008afc:	b29a      	uxth	r2, r3
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008b04:	e026      	b.n	8008b54 <HAL_SPI_Transmit+0x380>
 8008b06:	bf00      	nop
 8008b08:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b0c:	f7fb fd4e 	bl	80045ac <HAL_GetTick>
 8008b10:	4602      	mov	r2, r0
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	1ad3      	subs	r3, r2, r3
 8008b16:	683a      	ldr	r2, [r7, #0]
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d803      	bhi.n	8008b24 <HAL_SPI_Transmit+0x350>
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b22:	d102      	bne.n	8008b2a <HAL_SPI_Transmit+0x356>
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d114      	bne.n	8008b54 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008b2a:	68f8      	ldr	r0, [r7, #12]
 8008b2c:	f000 ff3a 	bl	80099a4 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2200      	movs	r2, #0
 8008b34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b3e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	e02c      	b.n	8008bae <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	f47f af78 	bne.w	8008a52 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	9300      	str	r3, [sp, #0]
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	2108      	movs	r1, #8
 8008b6c:	68f8      	ldr	r0, [r7, #12]
 8008b6e:	f000 ffb9 	bl	8009ae4 <SPI_WaitOnFlagUntilTimeout>
 8008b72:	4603      	mov	r3, r0
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d007      	beq.n	8008b88 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b7e:	f043 0220 	orr.w	r2, r3, #32
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008b88:	68f8      	ldr	r0, [r7, #12]
 8008b8a:	f000 ff0b 	bl	80099a4 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2200      	movs	r2, #0
 8008b92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2201      	movs	r2, #1
 8008b9a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d001      	beq.n	8008bac <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8008ba8:	2301      	movs	r3, #1
 8008baa:	e000      	b.n	8008bae <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8008bac:	7efb      	ldrb	r3, [r7, #27]
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3720      	adds	r7, #32
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop

08008bb8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b08a      	sub	sp, #40	; 0x28
 8008bbc:	af02      	add	r7, sp, #8
 8008bbe:	60f8      	str	r0, [r7, #12]
 8008bc0:	60b9      	str	r1, [r7, #8]
 8008bc2:	603b      	str	r3, [r7, #0]
 8008bc4:	4613      	mov	r3, r2
 8008bc6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	3330      	adds	r3, #48	; 0x30
 8008bd2:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008bdc:	d112      	bne.n	8008c04 <HAL_SPI_Receive+0x4c>
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	689b      	ldr	r3, [r3, #8]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d10e      	bne.n	8008c04 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2204      	movs	r2, #4
 8008bea:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008bee:	88fa      	ldrh	r2, [r7, #6]
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	9300      	str	r3, [sp, #0]
 8008bf4:	4613      	mov	r3, r2
 8008bf6:	68ba      	ldr	r2, [r7, #8]
 8008bf8:	68b9      	ldr	r1, [r7, #8]
 8008bfa:	68f8      	ldr	r0, [r7, #12]
 8008bfc:	f000 f9ce 	bl	8008f9c <HAL_SPI_TransmitReceive>
 8008c00:	4603      	mov	r3, r0
 8008c02:	e1c7      	b.n	8008f94 <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d101      	bne.n	8008c12 <HAL_SPI_Receive+0x5a>
 8008c0e:	2302      	movs	r3, #2
 8008c10:	e1c0      	b.n	8008f94 <HAL_SPI_Receive+0x3dc>
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2201      	movs	r2, #1
 8008c16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c1a:	f7fb fcc7 	bl	80045ac <HAL_GetTick>
 8008c1e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008c26:	b2db      	uxtb	r3, r3
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d007      	beq.n	8008c3c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8008c2c:	2302      	movs	r3, #2
 8008c2e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2200      	movs	r2, #0
 8008c34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008c38:	7ffb      	ldrb	r3, [r7, #31]
 8008c3a:	e1ab      	b.n	8008f94 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d002      	beq.n	8008c48 <HAL_SPI_Receive+0x90>
 8008c42:	88fb      	ldrh	r3, [r7, #6]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d107      	bne.n	8008c58 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008c54:	7ffb      	ldrb	r3, [r7, #31]
 8008c56:	e19d      	b.n	8008f94 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2204      	movs	r2, #4
 8008c5c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2200      	movs	r2, #0
 8008c64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	68ba      	ldr	r2, [r7, #8]
 8008c6c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	88fa      	ldrh	r2, [r7, #6]
 8008c72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	88fa      	ldrh	r2, [r7, #6]
 8008c7a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2200      	movs	r2, #0
 8008c82:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2200      	movs	r2, #0
 8008c88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2200      	movs	r2, #0
 8008c98:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	689b      	ldr	r3, [r3, #8]
 8008ca4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008ca8:	d107      	bne.n	8008cba <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008cb8:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	685a      	ldr	r2, [r3, #4]
 8008cc0:	4b94      	ldr	r3, [pc, #592]	; (8008f14 <HAL_SPI_Receive+0x35c>)
 8008cc2:	4013      	ands	r3, r2
 8008cc4:	88f9      	ldrh	r1, [r7, #6]
 8008cc6:	68fa      	ldr	r2, [r7, #12]
 8008cc8:	6812      	ldr	r2, [r2, #0]
 8008cca:	430b      	orrs	r3, r1
 8008ccc:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f042 0201 	orr.w	r2, r2, #1
 8008cdc:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ce6:	d107      	bne.n	8008cf8 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cf6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	2b0f      	cmp	r3, #15
 8008cfe:	d948      	bls.n	8008d92 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008d00:	e040      	b.n	8008d84 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	695a      	ldr	r2, [r3, #20]
 8008d08:	f248 0308 	movw	r3, #32776	; 0x8008
 8008d0c:	4013      	ands	r3, r2
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d014      	beq.n	8008d3c <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d1a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008d1c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d22:	1d1a      	adds	r2, r3, #4
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	3b01      	subs	r3, #1
 8008d32:	b29a      	uxth	r2, r3
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008d3a:	e023      	b.n	8008d84 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d3c:	f7fb fc36 	bl	80045ac <HAL_GetTick>
 8008d40:	4602      	mov	r2, r0
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	1ad3      	subs	r3, r2, r3
 8008d46:	683a      	ldr	r2, [r7, #0]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d803      	bhi.n	8008d54 <HAL_SPI_Receive+0x19c>
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d52:	d102      	bne.n	8008d5a <HAL_SPI_Receive+0x1a2>
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d114      	bne.n	8008d84 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008d5a:	68f8      	ldr	r0, [r7, #12]
 8008d5c:	f000 fe22 	bl	80099a4 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2200      	movs	r2, #0
 8008d64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d6e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8008d80:	2301      	movs	r3, #1
 8008d82:	e107      	b.n	8008f94 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d1b8      	bne.n	8008d02 <HAL_SPI_Receive+0x14a>
 8008d90:	e0ed      	b.n	8008f6e <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	68db      	ldr	r3, [r3, #12]
 8008d96:	2b07      	cmp	r3, #7
 8008d98:	f240 80e2 	bls.w	8008f60 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008d9c:	e05b      	b.n	8008e56 <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	695b      	ldr	r3, [r3, #20]
 8008da4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d030      	beq.n	8008e0e <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	695b      	ldr	r3, [r3, #20]
 8008db2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d014      	beq.n	8008de4 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681a      	ldr	r2, [r3, #0]
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008dc2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008dc4:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008dca:	1d1a      	adds	r2, r3, #4
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	3b02      	subs	r3, #2
 8008dda:	b29a      	uxth	r2, r3
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008de2:	e038      	b.n	8008e56 <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008de8:	69ba      	ldr	r2, [r7, #24]
 8008dea:	8812      	ldrh	r2, [r2, #0]
 8008dec:	b292      	uxth	r2, r2
 8008dee:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008df4:	1c9a      	adds	r2, r3, #2
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008e00:	b29b      	uxth	r3, r3
 8008e02:	3b01      	subs	r3, #1
 8008e04:	b29a      	uxth	r2, r3
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008e0c:	e023      	b.n	8008e56 <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e0e:	f7fb fbcd 	bl	80045ac <HAL_GetTick>
 8008e12:	4602      	mov	r2, r0
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	1ad3      	subs	r3, r2, r3
 8008e18:	683a      	ldr	r2, [r7, #0]
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d803      	bhi.n	8008e26 <HAL_SPI_Receive+0x26e>
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e24:	d102      	bne.n	8008e2c <HAL_SPI_Receive+0x274>
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d114      	bne.n	8008e56 <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008e2c:	68f8      	ldr	r0, [r7, #12]
 8008e2e:	f000 fdb9 	bl	80099a4 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2200      	movs	r2, #0
 8008e36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e40:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8008e52:	2301      	movs	r3, #1
 8008e54:	e09e      	b.n	8008f94 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d19d      	bne.n	8008d9e <HAL_SPI_Receive+0x1e6>
 8008e62:	e084      	b.n	8008f6e <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	695b      	ldr	r3, [r3, #20]
 8008e6a:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d052      	beq.n	8008f18 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	695b      	ldr	r3, [r3, #20]
 8008e78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d014      	beq.n	8008eaa <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e88:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008e8a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e90:	1d1a      	adds	r2, r3, #4
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008e9c:	b29b      	uxth	r3, r3
 8008e9e:	3b04      	subs	r3, #4
 8008ea0:	b29a      	uxth	r2, r3
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008ea8:	e05a      	b.n	8008f60 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	695b      	ldr	r3, [r3, #20]
 8008eb0:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8008eb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008eb8:	d914      	bls.n	8008ee4 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ebe:	69ba      	ldr	r2, [r7, #24]
 8008ec0:	8812      	ldrh	r2, [r2, #0]
 8008ec2:	b292      	uxth	r2, r2
 8008ec4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008eca:	1c9a      	adds	r2, r3, #2
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	3b02      	subs	r3, #2
 8008eda:	b29a      	uxth	r2, r3
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008ee2:	e03d      	b.n	8008f60 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ef0:	7812      	ldrb	r2, [r2, #0]
 8008ef2:	b2d2      	uxtb	r2, r2
 8008ef4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008efa:	1c5a      	adds	r2, r3, #1
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	3b01      	subs	r3, #1
 8008f0a:	b29a      	uxth	r2, r3
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008f12:	e025      	b.n	8008f60 <HAL_SPI_Receive+0x3a8>
 8008f14:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f18:	f7fb fb48 	bl	80045ac <HAL_GetTick>
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	1ad3      	subs	r3, r2, r3
 8008f22:	683a      	ldr	r2, [r7, #0]
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d803      	bhi.n	8008f30 <HAL_SPI_Receive+0x378>
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f2e:	d102      	bne.n	8008f36 <HAL_SPI_Receive+0x37e>
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d114      	bne.n	8008f60 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008f36:	68f8      	ldr	r0, [r7, #12]
 8008f38:	f000 fd34 	bl	80099a4 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f4a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2201      	movs	r2, #1
 8008f58:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	e019      	b.n	8008f94 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	f47f af7b 	bne.w	8008e64 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008f6e:	68f8      	ldr	r0, [r7, #12]
 8008f70:	f000 fd18 	bl	80099a4 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2200      	movs	r2, #0
 8008f78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d001      	beq.n	8008f92 <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e000      	b.n	8008f94 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 8008f92:	7ffb      	ldrb	r3, [r7, #31]
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3720      	adds	r7, #32
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b08e      	sub	sp, #56	; 0x38
 8008fa0:	af02      	add	r7, sp, #8
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	607a      	str	r2, [r7, #4]
 8008fa8:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008faa:	2300      	movs	r3, #0
 8008fac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	3320      	adds	r3, #32
 8008fb6:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	3330      	adds	r3, #48	; 0x30
 8008fbe:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d101      	bne.n	8008fce <HAL_SPI_TransmitReceive+0x32>
 8008fca:	2302      	movs	r3, #2
 8008fcc:	e2ce      	b.n	800956c <HAL_SPI_TransmitReceive+0x5d0>
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008fd6:	f7fb fae9 	bl	80045ac <HAL_GetTick>
 8008fda:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8008fdc:	887b      	ldrh	r3, [r7, #2]
 8008fde:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8008fe0:	887b      	ldrh	r3, [r7, #2]
 8008fe2:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008fea:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008ff2:	7efb      	ldrb	r3, [r7, #27]
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d014      	beq.n	8009022 <HAL_SPI_TransmitReceive+0x86>
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ffe:	d106      	bne.n	800900e <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	689b      	ldr	r3, [r3, #8]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d102      	bne.n	800900e <HAL_SPI_TransmitReceive+0x72>
 8009008:	7efb      	ldrb	r3, [r7, #27]
 800900a:	2b04      	cmp	r3, #4
 800900c:	d009      	beq.n	8009022 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800900e:	2302      	movs	r3, #2
 8009010:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2200      	movs	r2, #0
 8009018:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800901c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009020:	e2a4      	b.n	800956c <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d005      	beq.n	8009034 <HAL_SPI_TransmitReceive+0x98>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d002      	beq.n	8009034 <HAL_SPI_TransmitReceive+0x98>
 800902e:	887b      	ldrh	r3, [r7, #2]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d109      	bne.n	8009048 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8009034:	2301      	movs	r3, #1
 8009036:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2200      	movs	r2, #0
 800903e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009042:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009046:	e291      	b.n	800956c <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800904e:	b2db      	uxtb	r3, r3
 8009050:	2b04      	cmp	r3, #4
 8009052:	d003      	beq.n	800905c <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2205      	movs	r2, #5
 8009058:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2200      	movs	r2, #0
 8009060:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	687a      	ldr	r2, [r7, #4]
 8009068:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	887a      	ldrh	r2, [r7, #2]
 800906e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	887a      	ldrh	r2, [r7, #2]
 8009076:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	68ba      	ldr	r2, [r7, #8]
 800907e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	887a      	ldrh	r2, [r7, #2]
 8009084:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	887a      	ldrh	r2, [r7, #2]
 800908c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2200      	movs	r2, #0
 8009094:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2200      	movs	r2, #0
 800909a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	685a      	ldr	r2, [r3, #4]
 80090a2:	4b9f      	ldr	r3, [pc, #636]	; (8009320 <HAL_SPI_TransmitReceive+0x384>)
 80090a4:	4013      	ands	r3, r2
 80090a6:	8879      	ldrh	r1, [r7, #2]
 80090a8:	68fa      	ldr	r2, [r7, #12]
 80090aa:	6812      	ldr	r2, [r2, #0]
 80090ac:	430b      	orrs	r3, r1
 80090ae:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	681a      	ldr	r2, [r3, #0]
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f042 0201 	orr.w	r2, r2, #1
 80090be:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80090c8:	d107      	bne.n	80090da <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	681a      	ldr	r2, [r3, #0]
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	68db      	ldr	r3, [r3, #12]
 80090de:	2b0f      	cmp	r3, #15
 80090e0:	d970      	bls.n	80091c4 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80090e2:	e068      	b.n	80091b6 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	695b      	ldr	r3, [r3, #20]
 80090ea:	f003 0302 	and.w	r3, r3, #2
 80090ee:	2b02      	cmp	r3, #2
 80090f0:	d11a      	bne.n	8009128 <HAL_SPI_TransmitReceive+0x18c>
 80090f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d017      	beq.n	8009128 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	6812      	ldr	r2, [r2, #0]
 8009102:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009108:	1d1a      	adds	r2, r3, #4
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009114:	b29b      	uxth	r3, r3
 8009116:	3b01      	subs	r3, #1
 8009118:	b29a      	uxth	r2, r3
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009126:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	695a      	ldr	r2, [r3, #20]
 800912e:	f248 0308 	movw	r3, #32776	; 0x8008
 8009132:	4013      	ands	r3, r2
 8009134:	2b00      	cmp	r3, #0
 8009136:	d01a      	beq.n	800916e <HAL_SPI_TransmitReceive+0x1d2>
 8009138:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800913a:	2b00      	cmp	r3, #0
 800913c:	d017      	beq.n	800916e <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009146:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009148:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800914e:	1d1a      	adds	r2, r3, #4
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800915a:	b29b      	uxth	r3, r3
 800915c:	3b01      	subs	r3, #1
 800915e:	b29a      	uxth	r2, r3
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800916c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800916e:	f7fb fa1d 	bl	80045ac <HAL_GetTick>
 8009172:	4602      	mov	r2, r0
 8009174:	69fb      	ldr	r3, [r7, #28]
 8009176:	1ad3      	subs	r3, r2, r3
 8009178:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800917a:	429a      	cmp	r2, r3
 800917c:	d803      	bhi.n	8009186 <HAL_SPI_TransmitReceive+0x1ea>
 800917e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009184:	d102      	bne.n	800918c <HAL_SPI_TransmitReceive+0x1f0>
 8009186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009188:	2b00      	cmp	r3, #0
 800918a:	d114      	bne.n	80091b6 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800918c:	68f8      	ldr	r0, [r7, #12]
 800918e:	f000 fc09 	bl	80099a4 <SPI_CloseTransfer>
      
        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2200      	movs	r2, #0
 8009196:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2201      	movs	r2, #1
 80091ae:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 80091b2:	2301      	movs	r3, #1
 80091b4:	e1da      	b.n	800956c <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80091b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d193      	bne.n	80090e4 <HAL_SPI_TransmitReceive+0x148>
 80091bc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d190      	bne.n	80090e4 <HAL_SPI_TransmitReceive+0x148>
 80091c2:	e1ac      	b.n	800951e <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	68db      	ldr	r3, [r3, #12]
 80091c8:	2b07      	cmp	r3, #7
 80091ca:	f240 81a0 	bls.w	800950e <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80091ce:	e0a9      	b.n	8009324 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	695b      	ldr	r3, [r3, #20]
 80091d6:	f003 0302 	and.w	r3, r3, #2
 80091da:	2b02      	cmp	r3, #2
 80091dc:	d139      	bne.n	8009252 <HAL_SPI_TransmitReceive+0x2b6>
 80091de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d036      	beq.n	8009252 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80091e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d91c      	bls.n	8009224 <HAL_SPI_TransmitReceive+0x288>
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d018      	beq.n	8009224 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	6812      	ldr	r2, [r2, #0]
 80091fc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009202:	1d1a      	adds	r2, r3, #4
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800920e:	b29b      	uxth	r3, r3
 8009210:	3b02      	subs	r3, #2
 8009212:	b29a      	uxth	r2, r3
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009220:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009222:	e016      	b.n	8009252 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009228:	881a      	ldrh	r2, [r3, #0]
 800922a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009232:	1c9a      	adds	r2, r3, #2
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800923e:	b29b      	uxth	r3, r3
 8009240:	3b01      	subs	r3, #1
 8009242:	b29a      	uxth	r2, r3
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009250:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	695b      	ldr	r3, [r3, #20]
 8009258:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800925c:	2b00      	cmp	r3, #0
 800925e:	d03a      	beq.n	80092d6 <HAL_SPI_TransmitReceive+0x33a>
 8009260:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009262:	2b00      	cmp	r3, #0
 8009264:	d037      	beq.n	80092d6 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	695b      	ldr	r3, [r3, #20]
 800926c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009270:	2b00      	cmp	r3, #0
 8009272:	d018      	beq.n	80092a6 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681a      	ldr	r2, [r3, #0]
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800927c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800927e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009284:	1d1a      	adds	r2, r3, #4
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009290:	b29b      	uxth	r3, r3
 8009292:	3b02      	subs	r3, #2
 8009294:	b29a      	uxth	r2, r3
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80092a2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80092a4:	e017      	b.n	80092d6 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092aa:	6a3a      	ldr	r2, [r7, #32]
 80092ac:	8812      	ldrh	r2, [r2, #0]
 80092ae:	b292      	uxth	r2, r2
 80092b0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092b6:	1c9a      	adds	r2, r3, #2
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	3b01      	subs	r3, #1
 80092c6:	b29a      	uxth	r2, r3
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80092d4:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80092d6:	f7fb f969 	bl	80045ac <HAL_GetTick>
 80092da:	4602      	mov	r2, r0
 80092dc:	69fb      	ldr	r3, [r7, #28]
 80092de:	1ad3      	subs	r3, r2, r3
 80092e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d803      	bhi.n	80092ee <HAL_SPI_TransmitReceive+0x352>
 80092e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092ec:	d102      	bne.n	80092f4 <HAL_SPI_TransmitReceive+0x358>
 80092ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d117      	bne.n	8009324 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80092f4:	68f8      	ldr	r0, [r7, #12]
 80092f6:	f000 fb55 	bl	80099a4 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2200      	movs	r2, #0
 80092fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009308:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	2201      	movs	r2, #1
 8009316:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800931a:	2301      	movs	r3, #1
 800931c:	e126      	b.n	800956c <HAL_SPI_TransmitReceive+0x5d0>
 800931e:	bf00      	nop
 8009320:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009324:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009326:	2b00      	cmp	r3, #0
 8009328:	f47f af52 	bne.w	80091d0 <HAL_SPI_TransmitReceive+0x234>
 800932c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800932e:	2b00      	cmp	r3, #0
 8009330:	f47f af4e 	bne.w	80091d0 <HAL_SPI_TransmitReceive+0x234>
 8009334:	e0f3      	b.n	800951e <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	695b      	ldr	r3, [r3, #20]
 800933c:	f003 0302 	and.w	r3, r3, #2
 8009340:	2b02      	cmp	r3, #2
 8009342:	d15a      	bne.n	80093fa <HAL_SPI_TransmitReceive+0x45e>
 8009344:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009346:	2b00      	cmp	r3, #0
 8009348:	d057      	beq.n	80093fa <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800934a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800934c:	2b03      	cmp	r3, #3
 800934e:	d91c      	bls.n	800938a <HAL_SPI_TransmitReceive+0x3ee>
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009354:	2b40      	cmp	r3, #64	; 0x40
 8009356:	d918      	bls.n	800938a <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	6812      	ldr	r2, [r2, #0]
 8009362:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009368:	1d1a      	adds	r2, r3, #4
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009374:	b29b      	uxth	r3, r3
 8009376:	3b04      	subs	r3, #4
 8009378:	b29a      	uxth	r2, r3
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009386:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009388:	e037      	b.n	80093fa <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800938a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800938c:	2b01      	cmp	r3, #1
 800938e:	d91b      	bls.n	80093c8 <HAL_SPI_TransmitReceive+0x42c>
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009394:	2b00      	cmp	r3, #0
 8009396:	d017      	beq.n	80093c8 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800939c:	881a      	ldrh	r2, [r3, #0]
 800939e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093a6:	1c9a      	adds	r2, r3, #2
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80093b2:	b29b      	uxth	r3, r3
 80093b4:	3b02      	subs	r3, #2
 80093b6:	b29a      	uxth	r2, r3
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80093c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80093c6:	e018      	b.n	80093fa <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	3320      	adds	r3, #32
 80093d2:	7812      	ldrb	r2, [r2, #0]
 80093d4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093da:	1c5a      	adds	r2, r3, #1
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80093e6:	b29b      	uxth	r3, r3
 80093e8:	3b01      	subs	r3, #1
 80093ea:	b29a      	uxth	r2, r3
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80093f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	695b      	ldr	r3, [r3, #20]
 8009400:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009404:	2b00      	cmp	r3, #0
 8009406:	d05e      	beq.n	80094c6 <HAL_SPI_TransmitReceive+0x52a>
 8009408:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800940a:	2b00      	cmp	r3, #0
 800940c:	d05b      	beq.n	80094c6 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	695b      	ldr	r3, [r3, #20]
 8009414:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009418:	2b00      	cmp	r3, #0
 800941a:	d018      	beq.n	800944e <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681a      	ldr	r2, [r3, #0]
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009424:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009426:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800942c:	1d1a      	adds	r2, r3, #4
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009438:	b29b      	uxth	r3, r3
 800943a:	3b04      	subs	r3, #4
 800943c:	b29a      	uxth	r2, r3
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800944a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800944c:	e03b      	b.n	80094c6 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	695b      	ldr	r3, [r3, #20]
 8009454:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8009458:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800945c:	d918      	bls.n	8009490 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009462:	6a3a      	ldr	r2, [r7, #32]
 8009464:	8812      	ldrh	r2, [r2, #0]
 8009466:	b292      	uxth	r2, r2
 8009468:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800946e:	1c9a      	adds	r2, r3, #2
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800947a:	b29b      	uxth	r3, r3
 800947c:	3b02      	subs	r3, #2
 800947e:	b29a      	uxth	r2, r3
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800948c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800948e:	e01a      	b.n	80094c6 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800949c:	7812      	ldrb	r2, [r2, #0]
 800949e:	b2d2      	uxtb	r2, r2
 80094a0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094a6:	1c5a      	adds	r2, r3, #1
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80094b2:	b29b      	uxth	r3, r3
 80094b4:	3b01      	subs	r3, #1
 80094b6:	b29a      	uxth	r2, r3
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80094c4:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80094c6:	f7fb f871 	bl	80045ac <HAL_GetTick>
 80094ca:	4602      	mov	r2, r0
 80094cc:	69fb      	ldr	r3, [r7, #28]
 80094ce:	1ad3      	subs	r3, r2, r3
 80094d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d803      	bhi.n	80094de <HAL_SPI_TransmitReceive+0x542>
 80094d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094dc:	d102      	bne.n	80094e4 <HAL_SPI_TransmitReceive+0x548>
 80094de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d114      	bne.n	800950e <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80094e4:	68f8      	ldr	r0, [r7, #12]
 80094e6:	f000 fa5d 	bl	80099a4 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2200      	movs	r2, #0
 80094ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2201      	movs	r2, #1
 8009506:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800950a:	2301      	movs	r3, #1
 800950c:	e02e      	b.n	800956c <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800950e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009510:	2b00      	cmp	r3, #0
 8009512:	f47f af10 	bne.w	8009336 <HAL_SPI_TransmitReceive+0x39a>
 8009516:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009518:	2b00      	cmp	r3, #0
 800951a:	f47f af0c 	bne.w	8009336 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800951e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009520:	9300      	str	r3, [sp, #0]
 8009522:	69fb      	ldr	r3, [r7, #28]
 8009524:	2200      	movs	r2, #0
 8009526:	2108      	movs	r1, #8
 8009528:	68f8      	ldr	r0, [r7, #12]
 800952a:	f000 fadb 	bl	8009ae4 <SPI_WaitOnFlagUntilTimeout>
 800952e:	4603      	mov	r3, r0
 8009530:	2b00      	cmp	r3, #0
 8009532:	d007      	beq.n	8009544 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800953a:	f043 0220 	orr.w	r2, r3, #32
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009544:	68f8      	ldr	r0, [r7, #12]
 8009546:	f000 fa2d 	bl	80099a4 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2200      	movs	r2, #0
 800954e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2201      	movs	r2, #1
 8009556:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009560:	2b00      	cmp	r3, #0
 8009562:	d001      	beq.n	8009568 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 8009564:	2301      	movs	r3, #1
 8009566:	e001      	b.n	800956c <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 8009568:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800956c:	4618      	mov	r0, r3
 800956e:	3730      	adds	r7, #48	; 0x30
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}

08009574 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b08a      	sub	sp, #40	; 0x28
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	691b      	ldr	r3, [r3, #16]
 8009582:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	695b      	ldr	r3, [r3, #20]
 800958a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800958c:	6a3a      	ldr	r2, [r7, #32]
 800958e:	69fb      	ldr	r3, [r7, #28]
 8009590:	4013      	ands	r3, r2
 8009592:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	689b      	ldr	r3, [r3, #8]
 800959a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800959c:	2300      	movs	r3, #0
 800959e:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80095a6:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	3330      	adds	r3, #48	; 0x30
 80095ae:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80095b0:	69bb      	ldr	r3, [r7, #24]
 80095b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d113      	bne.n	80095e2 <HAL_SPI_IRQHandler+0x6e>
 80095ba:	69bb      	ldr	r3, [r7, #24]
 80095bc:	f003 0320 	and.w	r3, r3, #32
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d10e      	bne.n	80095e2 <HAL_SPI_IRQHandler+0x6e>
 80095c4:	69bb      	ldr	r3, [r7, #24]
 80095c6:	f003 0304 	and.w	r3, r3, #4
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d009      	beq.n	80095e2 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	4798      	blx	r3
    hspi->RxISR(hspi);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	4798      	blx	r3
    handled = 1UL;
 80095de:	2301      	movs	r3, #1
 80095e0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80095e2:	69bb      	ldr	r3, [r7, #24]
 80095e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d10f      	bne.n	800960c <HAL_SPI_IRQHandler+0x98>
 80095ec:	69bb      	ldr	r3, [r7, #24]
 80095ee:	f003 0301 	and.w	r3, r3, #1
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d00a      	beq.n	800960c <HAL_SPI_IRQHandler+0x98>
 80095f6:	69bb      	ldr	r3, [r7, #24]
 80095f8:	f003 0304 	and.w	r3, r3, #4
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d105      	bne.n	800960c <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	4798      	blx	r3
    handled = 1UL;
 8009608:	2301      	movs	r3, #1
 800960a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800960c:	69bb      	ldr	r3, [r7, #24]
 800960e:	f003 0320 	and.w	r3, r3, #32
 8009612:	2b00      	cmp	r3, #0
 8009614:	d10f      	bne.n	8009636 <HAL_SPI_IRQHandler+0xc2>
 8009616:	69bb      	ldr	r3, [r7, #24]
 8009618:	f003 0302 	and.w	r3, r3, #2
 800961c:	2b00      	cmp	r3, #0
 800961e:	d00a      	beq.n	8009636 <HAL_SPI_IRQHandler+0xc2>
 8009620:	69bb      	ldr	r3, [r7, #24]
 8009622:	f003 0304 	and.w	r3, r3, #4
 8009626:	2b00      	cmp	r3, #0
 8009628:	d105      	bne.n	8009636 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	4798      	blx	r3
    handled = 1UL;
 8009632:	2301      	movs	r3, #1
 8009634:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8009636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009638:	2b00      	cmp	r3, #0
 800963a:	f040 816f 	bne.w	800991c <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800963e:	69bb      	ldr	r3, [r7, #24]
 8009640:	f003 0308 	and.w	r3, r3, #8
 8009644:	2b00      	cmp	r3, #0
 8009646:	f000 80a0 	beq.w	800978a <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	699a      	ldr	r2, [r3, #24]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f042 0208 	orr.w	r2, r2, #8
 8009658:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	699a      	ldr	r2, [r3, #24]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f042 0210 	orr.w	r2, r2, #16
 8009668:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	699a      	ldr	r2, [r3, #24]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009678:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	691a      	ldr	r2, [r3, #16]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f022 0208 	bic.w	r2, r2, #8
 8009688:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009690:	2b00      	cmp	r3, #0
 8009692:	d00f      	beq.n	80096b4 <HAL_SPI_IRQHandler+0x140>
 8009694:	7cfb      	ldrb	r3, [r7, #19]
 8009696:	2b04      	cmp	r3, #4
 8009698:	d004      	beq.n	80096a4 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800969e:	69db      	ldr	r3, [r3, #28]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d007      	beq.n	80096b4 <HAL_SPI_IRQHandler+0x140>
 80096a4:	7cfb      	ldrb	r3, [r7, #19]
 80096a6:	2b03      	cmp	r3, #3
 80096a8:	d059      	beq.n	800975e <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096ae:	69db      	ldr	r3, [r3, #28]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d154      	bne.n	800975e <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	689b      	ldr	r3, [r3, #8]
 80096ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d13d      	bne.n	800973e <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 80096c2:	e036      	b.n	8009732 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	68db      	ldr	r3, [r3, #12]
 80096c8:	2b0f      	cmp	r3, #15
 80096ca:	d90b      	bls.n	80096e4 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681a      	ldr	r2, [r3, #0]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80096d6:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096dc:	1d1a      	adds	r2, r3, #4
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	665a      	str	r2, [r3, #100]	; 0x64
 80096e2:	e01d      	b.n	8009720 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	68db      	ldr	r3, [r3, #12]
 80096e8:	2b07      	cmp	r3, #7
 80096ea:	d90b      	bls.n	8009704 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096f0:	68fa      	ldr	r2, [r7, #12]
 80096f2:	8812      	ldrh	r2, [r2, #0]
 80096f4:	b292      	uxth	r2, r2
 80096f6:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096fc:	1c9a      	adds	r2, r3, #2
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	665a      	str	r2, [r3, #100]	; 0x64
 8009702:	e00d      	b.n	8009720 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009710:	7812      	ldrb	r2, [r2, #0]
 8009712:	b2d2      	uxtb	r2, r2
 8009714:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800971a:	1c5a      	adds	r2, r3, #1
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009726:	b29b      	uxth	r3, r3
 8009728:	3b01      	subs	r3, #1
 800972a:	b29a      	uxth	r2, r3
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009738:	b29b      	uxth	r3, r3
 800973a:	2b00      	cmp	r3, #0
 800973c:	d1c2      	bne.n	80096c4 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 f930 	bl	80099a4 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2201      	movs	r2, #1
 8009748:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009752:	2b00      	cmp	r3, #0
 8009754:	d003      	beq.n	800975e <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f000 f900 	bl	800995c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 800975c:	e0e3      	b.n	8009926 <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800975e:	7cfb      	ldrb	r3, [r7, #19]
 8009760:	2b05      	cmp	r3, #5
 8009762:	d103      	bne.n	800976c <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f000 f8ef 	bl	8009948 <HAL_SPI_TxRxCpltCallback>
    {
      /* end of the appropriate call */
    }
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

    return;
 800976a:	e0d9      	b.n	8009920 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800976c:	7cfb      	ldrb	r3, [r7, #19]
 800976e:	2b04      	cmp	r3, #4
 8009770:	d103      	bne.n	800977a <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f000 f8de 	bl	8009934 <HAL_SPI_RxCpltCallback>
    return;
 8009778:	e0d2      	b.n	8009920 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800977a:	7cfb      	ldrb	r3, [r7, #19]
 800977c:	2b03      	cmp	r3, #3
 800977e:	f040 80cf 	bne.w	8009920 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f7f7 fa7c 	bl	8000c80 <HAL_SPI_TxCpltCallback>
    return;
 8009788:	e0ca      	b.n	8009920 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800978a:	69fb      	ldr	r3, [r7, #28]
 800978c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009790:	2b00      	cmp	r3, #0
 8009792:	d00d      	beq.n	80097b0 <HAL_SPI_IRQHandler+0x23c>
 8009794:	6a3b      	ldr	r3, [r7, #32]
 8009796:	f003 0308 	and.w	r3, r3, #8
 800979a:	2b00      	cmp	r3, #0
 800979c:	d008      	beq.n	80097b0 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	699a      	ldr	r2, [r3, #24]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80097ac:	619a      	str	r2, [r3, #24]

    return;
 80097ae:	e0ba      	b.n	8009926 <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80097b0:	69bb      	ldr	r3, [r7, #24]
 80097b2:	f403 7358 	and.w	r3, r3, #864	; 0x360
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	f000 80b5 	beq.w	8009926 <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80097bc:	69bb      	ldr	r3, [r7, #24]
 80097be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d00f      	beq.n	80097e6 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097cc:	f043 0204 	orr.w	r2, r3, #4
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	699a      	ldr	r2, [r3, #24]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097e4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80097e6:	69bb      	ldr	r3, [r7, #24]
 80097e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d00f      	beq.n	8009810 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097f6:	f043 0201 	orr.w	r2, r3, #1
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	699a      	ldr	r2, [r3, #24]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800980e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8009810:	69bb      	ldr	r3, [r7, #24]
 8009812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009816:	2b00      	cmp	r3, #0
 8009818:	d00f      	beq.n	800983a <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009820:	f043 0208 	orr.w	r2, r3, #8
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	699a      	ldr	r2, [r3, #24]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009838:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800983a:	69bb      	ldr	r3, [r7, #24]
 800983c:	f003 0320 	and.w	r3, r3, #32
 8009840:	2b00      	cmp	r3, #0
 8009842:	d00f      	beq.n	8009864 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800984a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	699a      	ldr	r2, [r3, #24]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f042 0220 	orr.w	r2, r2, #32
 8009862:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800986a:	2b00      	cmp	r3, #0
 800986c:	d05a      	beq.n	8009924 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	681a      	ldr	r2, [r3, #0]
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f022 0201 	bic.w	r2, r2, #1
 800987c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	6919      	ldr	r1, [r3, #16]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681a      	ldr	r2, [r3, #0]
 8009888:	4b28      	ldr	r3, [pc, #160]	; (800992c <HAL_SPI_IRQHandler+0x3b8>)
 800988a:	400b      	ands	r3, r1
 800988c:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009894:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009898:	d138      	bne.n	800990c <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	689a      	ldr	r2, [r3, #8]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80098a8:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d013      	beq.n	80098da <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098b6:	4a1e      	ldr	r2, [pc, #120]	; (8009930 <HAL_SPI_IRQHandler+0x3bc>)
 80098b8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098be:	4618      	mov	r0, r3
 80098c0:	f7fa ffc0 	bl	8004844 <HAL_DMA_Abort_IT>
 80098c4:	4603      	mov	r3, r0
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d007      	beq.n	80098da <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d020      	beq.n	8009924 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098e6:	4a12      	ldr	r2, [pc, #72]	; (8009930 <HAL_SPI_IRQHandler+0x3bc>)
 80098e8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098ee:	4618      	mov	r0, r3
 80098f0:	f7fa ffa8 	bl	8004844 <HAL_DMA_Abort_IT>
 80098f4:	4603      	mov	r3, r0
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d014      	beq.n	8009924 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009900:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800990a:	e00b      	b.n	8009924 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2201      	movs	r2, #1
 8009910:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f000 f821 	bl	800995c <HAL_SPI_ErrorCallback>
    return;
 800991a:	e003      	b.n	8009924 <HAL_SPI_IRQHandler+0x3b0>
    return;
 800991c:	bf00      	nop
 800991e:	e002      	b.n	8009926 <HAL_SPI_IRQHandler+0x3b2>
    return;
 8009920:	bf00      	nop
 8009922:	e000      	b.n	8009926 <HAL_SPI_IRQHandler+0x3b2>
    return;
 8009924:	bf00      	nop
  }
}
 8009926:	3728      	adds	r7, #40	; 0x28
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}
 800992c:	fffffc94 	.word	0xfffffc94
 8009930:	08009971 	.word	0x08009971

08009934 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009934:	b480      	push	{r7}
 8009936:	b083      	sub	sp, #12
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800993c:	bf00      	nop
 800993e:	370c      	adds	r7, #12
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr

08009948 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009948:	b480      	push	{r7}
 800994a:	b083      	sub	sp, #12
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009950:	bf00      	nop
 8009952:	370c      	adds	r7, #12
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr

0800995c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800995c:	b480      	push	{r7}
 800995e:	b083      	sub	sp, #12
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009964:	bf00      	nop
 8009966:	370c      	adds	r7, #12
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr

08009970 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b084      	sub	sp, #16
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800997c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2200      	movs	r2, #0
 8009982:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2200      	movs	r2, #0
 800998a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2201      	movs	r2, #1
 8009992:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009996:	68f8      	ldr	r0, [r7, #12]
 8009998:	f7ff ffe0 	bl	800995c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800999c:	bf00      	nop
 800999e:	3710      	adds	r7, #16
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b085      	sub	sp, #20
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	695b      	ldr	r3, [r3, #20]
 80099b2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	699a      	ldr	r2, [r3, #24]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f042 0208 	orr.w	r2, r2, #8
 80099c2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	699a      	ldr	r2, [r3, #24]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f042 0210 	orr.w	r2, r2, #16
 80099d2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	681a      	ldr	r2, [r3, #0]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f022 0201 	bic.w	r2, r2, #1
 80099e2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	6919      	ldr	r1, [r3, #16]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681a      	ldr	r2, [r3, #0]
 80099ee:	4b3c      	ldr	r3, [pc, #240]	; (8009ae0 <SPI_CloseTransfer+0x13c>)
 80099f0:	400b      	ands	r3, r1
 80099f2:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	689a      	ldr	r2, [r3, #8]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009a02:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009a0a:	b2db      	uxtb	r3, r3
 8009a0c:	2b04      	cmp	r3, #4
 8009a0e:	d014      	beq.n	8009a3a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	f003 0320 	and.w	r3, r3, #32
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d00f      	beq.n	8009a3a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a20:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	699a      	ldr	r2, [r3, #24]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f042 0220 	orr.w	r2, r2, #32
 8009a38:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009a40:	b2db      	uxtb	r3, r3
 8009a42:	2b03      	cmp	r3, #3
 8009a44:	d014      	beq.n	8009a70 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d00f      	beq.n	8009a70 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a56:	f043 0204 	orr.w	r2, r3, #4
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	699a      	ldr	r2, [r3, #24]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a6e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d00f      	beq.n	8009a9a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a80:	f043 0201 	orr.w	r2, r3, #1
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	699a      	ldr	r2, [r3, #24]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a98:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d00f      	beq.n	8009ac4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009aaa:	f043 0208 	orr.w	r2, r3, #8
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	699a      	ldr	r2, [r3, #24]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ac2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8009ad4:	bf00      	nop
 8009ad6:	3714      	adds	r7, #20
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr
 8009ae0:	fffffc90 	.word	0xfffffc90

08009ae4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b084      	sub	sp, #16
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	60f8      	str	r0, [r7, #12]
 8009aec:	60b9      	str	r1, [r7, #8]
 8009aee:	603b      	str	r3, [r7, #0]
 8009af0:	4613      	mov	r3, r2
 8009af2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009af4:	e010      	b.n	8009b18 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009af6:	f7fa fd59 	bl	80045ac <HAL_GetTick>
 8009afa:	4602      	mov	r2, r0
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	1ad3      	subs	r3, r2, r3
 8009b00:	69ba      	ldr	r2, [r7, #24]
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d803      	bhi.n	8009b0e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009b06:	69bb      	ldr	r3, [r7, #24]
 8009b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b0c:	d102      	bne.n	8009b14 <SPI_WaitOnFlagUntilTimeout+0x30>
 8009b0e:	69bb      	ldr	r3, [r7, #24]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d101      	bne.n	8009b18 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009b14:	2303      	movs	r3, #3
 8009b16:	e00f      	b.n	8009b38 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	695a      	ldr	r2, [r3, #20]
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	4013      	ands	r3, r2
 8009b22:	68ba      	ldr	r2, [r7, #8]
 8009b24:	429a      	cmp	r2, r3
 8009b26:	bf0c      	ite	eq
 8009b28:	2301      	moveq	r3, #1
 8009b2a:	2300      	movne	r3, #0
 8009b2c:	b2db      	uxtb	r3, r3
 8009b2e:	461a      	mov	r2, r3
 8009b30:	79fb      	ldrb	r3, [r7, #7]
 8009b32:	429a      	cmp	r2, r3
 8009b34:	d0df      	beq.n	8009af6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009b36:	2300      	movs	r3, #0
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3710      	adds	r7, #16
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}

08009b40 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b085      	sub	sp, #20
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b4c:	095b      	lsrs	r3, r3, #5
 8009b4e:	3301      	adds	r3, #1
 8009b50:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	68db      	ldr	r3, [r3, #12]
 8009b56:	3301      	adds	r3, #1
 8009b58:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	3307      	adds	r3, #7
 8009b5e:	08db      	lsrs	r3, r3, #3
 8009b60:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	68fa      	ldr	r2, [r7, #12]
 8009b66:	fb02 f303 	mul.w	r3, r2, r3
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3714      	adds	r7, #20
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b74:	4770      	bx	lr

08009b76 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b76:	b580      	push	{r7, lr}
 8009b78:	b082      	sub	sp, #8
 8009b7a:	af00      	add	r7, sp, #0
 8009b7c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d101      	bne.n	8009b88 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b84:	2301      	movs	r3, #1
 8009b86:	e042      	b.n	8009c0e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d106      	bne.n	8009ba0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2200      	movs	r2, #0
 8009b96:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f7f7 fb18 	bl	80011d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2224      	movs	r2, #36	; 0x24
 8009ba4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	681a      	ldr	r2, [r3, #0]
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f022 0201 	bic.w	r2, r2, #1
 8009bb6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f000 fb25 	bl	800a208 <UART_SetConfig>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	2b01      	cmp	r3, #1
 8009bc2:	d101      	bne.n	8009bc8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	e022      	b.n	8009c0e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d002      	beq.n	8009bd6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f001 f87f 	bl	800acd4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	685a      	ldr	r2, [r3, #4]
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009be4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	689a      	ldr	r2, [r3, #8]
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009bf4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	681a      	ldr	r2, [r3, #0]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f042 0201 	orr.w	r2, r2, #1
 8009c04:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f001 f906 	bl	800ae18 <UART_CheckIdleState>
 8009c0c:	4603      	mov	r3, r0
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3708      	adds	r7, #8
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}

08009c16 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c16:	b580      	push	{r7, lr}
 8009c18:	b08a      	sub	sp, #40	; 0x28
 8009c1a:	af02      	add	r7, sp, #8
 8009c1c:	60f8      	str	r0, [r7, #12]
 8009c1e:	60b9      	str	r1, [r7, #8]
 8009c20:	603b      	str	r3, [r7, #0]
 8009c22:	4613      	mov	r3, r2
 8009c24:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c2c:	2b20      	cmp	r3, #32
 8009c2e:	f040 8083 	bne.w	8009d38 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d002      	beq.n	8009c3e <HAL_UART_Transmit+0x28>
 8009c38:	88fb      	ldrh	r3, [r7, #6]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d101      	bne.n	8009c42 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	e07b      	b.n	8009d3a <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d101      	bne.n	8009c50 <HAL_UART_Transmit+0x3a>
 8009c4c:	2302      	movs	r3, #2
 8009c4e:	e074      	b.n	8009d3a <HAL_UART_Transmit+0x124>
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	2201      	movs	r2, #1
 8009c54:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	2221      	movs	r2, #33	; 0x21
 8009c64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8009c68:	f7fa fca0 	bl	80045ac <HAL_GetTick>
 8009c6c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	88fa      	ldrh	r2, [r7, #6]
 8009c72:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	88fa      	ldrh	r2, [r7, #6]
 8009c7a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	689b      	ldr	r3, [r3, #8]
 8009c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c86:	d108      	bne.n	8009c9a <HAL_UART_Transmit+0x84>
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	691b      	ldr	r3, [r3, #16]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d104      	bne.n	8009c9a <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009c90:	2300      	movs	r3, #0
 8009c92:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	61bb      	str	r3, [r7, #24]
 8009c98:	e003      	b.n	8009ca2 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8009caa:	e02c      	b.n	8009d06 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	9300      	str	r3, [sp, #0]
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	2180      	movs	r1, #128	; 0x80
 8009cb6:	68f8      	ldr	r0, [r7, #12]
 8009cb8:	f001 f8f6 	bl	800aea8 <UART_WaitOnFlagUntilTimeout>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d001      	beq.n	8009cc6 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009cc2:	2303      	movs	r3, #3
 8009cc4:	e039      	b.n	8009d3a <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8009cc6:	69fb      	ldr	r3, [r7, #28]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d10b      	bne.n	8009ce4 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009ccc:	69bb      	ldr	r3, [r7, #24]
 8009cce:	881b      	ldrh	r3, [r3, #0]
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009cda:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009cdc:	69bb      	ldr	r3, [r7, #24]
 8009cde:	3302      	adds	r3, #2
 8009ce0:	61bb      	str	r3, [r7, #24]
 8009ce2:	e007      	b.n	8009cf4 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009ce4:	69fb      	ldr	r3, [r7, #28]
 8009ce6:	781a      	ldrb	r2, [r3, #0]
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009cee:	69fb      	ldr	r3, [r7, #28]
 8009cf0:	3301      	adds	r3, #1
 8009cf2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009cfa:	b29b      	uxth	r3, r3
 8009cfc:	3b01      	subs	r3, #1
 8009cfe:	b29a      	uxth	r2, r3
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009d0c:	b29b      	uxth	r3, r3
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d1cc      	bne.n	8009cac <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	9300      	str	r3, [sp, #0]
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	2140      	movs	r1, #64	; 0x40
 8009d1c:	68f8      	ldr	r0, [r7, #12]
 8009d1e:	f001 f8c3 	bl	800aea8 <UART_WaitOnFlagUntilTimeout>
 8009d22:	4603      	mov	r3, r0
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d001      	beq.n	8009d2c <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8009d28:	2303      	movs	r3, #3
 8009d2a:	e006      	b.n	8009d3a <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	2220      	movs	r2, #32
 8009d30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8009d34:	2300      	movs	r3, #0
 8009d36:	e000      	b.n	8009d3a <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8009d38:	2302      	movs	r3, #2
  }
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3720      	adds	r7, #32
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}

08009d42 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d42:	b580      	push	{r7, lr}
 8009d44:	b08a      	sub	sp, #40	; 0x28
 8009d46:	af02      	add	r7, sp, #8
 8009d48:	60f8      	str	r0, [r7, #12]
 8009d4a:	60b9      	str	r1, [r7, #8]
 8009d4c:	603b      	str	r3, [r7, #0]
 8009d4e:	4613      	mov	r3, r2
 8009d50:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d58:	2b20      	cmp	r3, #32
 8009d5a:	f040 80bd 	bne.w	8009ed8 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d002      	beq.n	8009d6a <HAL_UART_Receive+0x28>
 8009d64:	88fb      	ldrh	r3, [r7, #6]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d101      	bne.n	8009d6e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	e0b5      	b.n	8009eda <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009d74:	2b01      	cmp	r3, #1
 8009d76:	d101      	bne.n	8009d7c <HAL_UART_Receive+0x3a>
 8009d78:	2302      	movs	r3, #2
 8009d7a:	e0ae      	b.n	8009eda <HAL_UART_Receive+0x198>
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2201      	movs	r2, #1
 8009d80:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	2200      	movs	r2, #0
 8009d88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	2222      	movs	r2, #34	; 0x22
 8009d90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8009d94:	f7fa fc0a 	bl	80045ac <HAL_GetTick>
 8009d98:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	88fa      	ldrh	r2, [r7, #6]
 8009d9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	88fa      	ldrh	r2, [r7, #6]
 8009da6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	689b      	ldr	r3, [r3, #8]
 8009dae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009db2:	d10e      	bne.n	8009dd2 <HAL_UART_Receive+0x90>
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	691b      	ldr	r3, [r3, #16]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d105      	bne.n	8009dc8 <HAL_UART_Receive+0x86>
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009dc2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009dc6:	e02d      	b.n	8009e24 <HAL_UART_Receive+0xe2>
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	22ff      	movs	r2, #255	; 0xff
 8009dcc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009dd0:	e028      	b.n	8009e24 <HAL_UART_Receive+0xe2>
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	689b      	ldr	r3, [r3, #8]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d10d      	bne.n	8009df6 <HAL_UART_Receive+0xb4>
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	691b      	ldr	r3, [r3, #16]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d104      	bne.n	8009dec <HAL_UART_Receive+0xaa>
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	22ff      	movs	r2, #255	; 0xff
 8009de6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009dea:	e01b      	b.n	8009e24 <HAL_UART_Receive+0xe2>
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	227f      	movs	r2, #127	; 0x7f
 8009df0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009df4:	e016      	b.n	8009e24 <HAL_UART_Receive+0xe2>
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	689b      	ldr	r3, [r3, #8]
 8009dfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009dfe:	d10d      	bne.n	8009e1c <HAL_UART_Receive+0xda>
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	691b      	ldr	r3, [r3, #16]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d104      	bne.n	8009e12 <HAL_UART_Receive+0xd0>
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	227f      	movs	r2, #127	; 0x7f
 8009e0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009e10:	e008      	b.n	8009e24 <HAL_UART_Receive+0xe2>
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	223f      	movs	r2, #63	; 0x3f
 8009e16:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009e1a:	e003      	b.n	8009e24 <HAL_UART_Receive+0xe2>
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009e2a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	689b      	ldr	r3, [r3, #8]
 8009e30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e34:	d108      	bne.n	8009e48 <HAL_UART_Receive+0x106>
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	691b      	ldr	r3, [r3, #16]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d104      	bne.n	8009e48 <HAL_UART_Receive+0x106>
    {
      pdata8bits  = NULL;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	61bb      	str	r3, [r7, #24]
 8009e46:	e003      	b.n	8009e50 <HAL_UART_Receive+0x10e>
    }
    else
    {
      pdata8bits  = pData;
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2200      	movs	r2, #0
 8009e54:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8009e58:	e032      	b.n	8009ec0 <HAL_UART_Receive+0x17e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	9300      	str	r3, [sp, #0]
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	2200      	movs	r2, #0
 8009e62:	2120      	movs	r1, #32
 8009e64:	68f8      	ldr	r0, [r7, #12]
 8009e66:	f001 f81f 	bl	800aea8 <UART_WaitOnFlagUntilTimeout>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d001      	beq.n	8009e74 <HAL_UART_Receive+0x132>
      {
        return HAL_TIMEOUT;
 8009e70:	2303      	movs	r3, #3
 8009e72:	e032      	b.n	8009eda <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 8009e74:	69fb      	ldr	r3, [r7, #28]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d10c      	bne.n	8009e94 <HAL_UART_Receive+0x152>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e80:	b29a      	uxth	r2, r3
 8009e82:	8a7b      	ldrh	r3, [r7, #18]
 8009e84:	4013      	ands	r3, r2
 8009e86:	b29a      	uxth	r2, r3
 8009e88:	69bb      	ldr	r3, [r7, #24]
 8009e8a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009e8c:	69bb      	ldr	r3, [r7, #24]
 8009e8e:	3302      	adds	r3, #2
 8009e90:	61bb      	str	r3, [r7, #24]
 8009e92:	e00c      	b.n	8009eae <HAL_UART_Receive+0x16c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e9a:	b2da      	uxtb	r2, r3
 8009e9c:	8a7b      	ldrh	r3, [r7, #18]
 8009e9e:	b2db      	uxtb	r3, r3
 8009ea0:	4013      	ands	r3, r2
 8009ea2:	b2da      	uxtb	r2, r3
 8009ea4:	69fb      	ldr	r3, [r7, #28]
 8009ea6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8009ea8:	69fb      	ldr	r3, [r7, #28]
 8009eaa:	3301      	adds	r3, #1
 8009eac:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009eb4:	b29b      	uxth	r3, r3
 8009eb6:	3b01      	subs	r3, #1
 8009eb8:	b29a      	uxth	r2, r3
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ec6:	b29b      	uxth	r3, r3
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d1c6      	bne.n	8009e5a <HAL_UART_Receive+0x118>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2220      	movs	r2, #32
 8009ed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	e000      	b.n	8009eda <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 8009ed8:	2302      	movs	r3, #2
  }
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3720      	adds	r7, #32
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}
	...

08009ee4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b088      	sub	sp, #32
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	69db      	ldr	r3, [r3, #28]
 8009ef2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	689b      	ldr	r3, [r3, #8]
 8009f02:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009f04:	69fa      	ldr	r2, [r7, #28]
 8009f06:	f640 030f 	movw	r3, #2063	; 0x80f
 8009f0a:	4013      	ands	r3, r2
 8009f0c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d118      	bne.n	8009f46 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009f14:	69fb      	ldr	r3, [r7, #28]
 8009f16:	f003 0320 	and.w	r3, r3, #32
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d013      	beq.n	8009f46 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009f1e:	69bb      	ldr	r3, [r7, #24]
 8009f20:	f003 0320 	and.w	r3, r3, #32
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d104      	bne.n	8009f32 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d009      	beq.n	8009f46 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	f000 8144 	beq.w	800a1c4 <HAL_UART_IRQHandler+0x2e0>
      {
        huart->RxISR(huart);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	4798      	blx	r3
      }
      return;
 8009f44:	e13e      	b.n	800a1c4 <HAL_UART_IRQHandler+0x2e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009f46:	693b      	ldr	r3, [r7, #16]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	f000 80e8 	beq.w	800a11e <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009f4e:	697a      	ldr	r2, [r7, #20]
 8009f50:	4ba0      	ldr	r3, [pc, #640]	; (800a1d4 <HAL_UART_IRQHandler+0x2f0>)
 8009f52:	4013      	ands	r3, r2
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d105      	bne.n	8009f64 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009f58:	69ba      	ldr	r2, [r7, #24]
 8009f5a:	4b9f      	ldr	r3, [pc, #636]	; (800a1d8 <HAL_UART_IRQHandler+0x2f4>)
 8009f5c:	4013      	ands	r3, r2
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	f000 80dd 	beq.w	800a11e <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009f64:	69fb      	ldr	r3, [r7, #28]
 8009f66:	f003 0301 	and.w	r3, r3, #1
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d010      	beq.n	8009f90 <HAL_UART_IRQHandler+0xac>
 8009f6e:	69bb      	ldr	r3, [r7, #24]
 8009f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d00b      	beq.n	8009f90 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	2201      	movs	r2, #1
 8009f7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f86:	f043 0201 	orr.w	r2, r3, #1
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f90:	69fb      	ldr	r3, [r7, #28]
 8009f92:	f003 0302 	and.w	r3, r3, #2
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d010      	beq.n	8009fbc <HAL_UART_IRQHandler+0xd8>
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	f003 0301 	and.w	r3, r3, #1
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d00b      	beq.n	8009fbc <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	2202      	movs	r2, #2
 8009faa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fb2:	f043 0204 	orr.w	r2, r3, #4
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009fbc:	69fb      	ldr	r3, [r7, #28]
 8009fbe:	f003 0304 	and.w	r3, r3, #4
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d010      	beq.n	8009fe8 <HAL_UART_IRQHandler+0x104>
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	f003 0301 	and.w	r3, r3, #1
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d00b      	beq.n	8009fe8 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	2204      	movs	r2, #4
 8009fd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fde:	f043 0202 	orr.w	r2, r3, #2
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009fe8:	69fb      	ldr	r3, [r7, #28]
 8009fea:	f003 0308 	and.w	r3, r3, #8
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d015      	beq.n	800a01e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009ff2:	69bb      	ldr	r3, [r7, #24]
 8009ff4:	f003 0320 	and.w	r3, r3, #32
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d104      	bne.n	800a006 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009ffc:	697a      	ldr	r2, [r7, #20]
 8009ffe:	4b75      	ldr	r3, [pc, #468]	; (800a1d4 <HAL_UART_IRQHandler+0x2f0>)
 800a000:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a002:	2b00      	cmp	r3, #0
 800a004:	d00b      	beq.n	800a01e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	2208      	movs	r2, #8
 800a00c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a014:	f043 0208 	orr.w	r2, r3, #8
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a01e:	69fb      	ldr	r3, [r7, #28]
 800a020:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a024:	2b00      	cmp	r3, #0
 800a026:	d011      	beq.n	800a04c <HAL_UART_IRQHandler+0x168>
 800a028:	69bb      	ldr	r3, [r7, #24]
 800a02a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d00c      	beq.n	800a04c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a03a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a042:	f043 0220 	orr.w	r2, r3, #32
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a052:	2b00      	cmp	r3, #0
 800a054:	f000 80b8 	beq.w	800a1c8 <HAL_UART_IRQHandler+0x2e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a058:	69fb      	ldr	r3, [r7, #28]
 800a05a:	f003 0320 	and.w	r3, r3, #32
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d011      	beq.n	800a086 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a062:	69bb      	ldr	r3, [r7, #24]
 800a064:	f003 0320 	and.w	r3, r3, #32
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d104      	bne.n	800a076 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a072:	2b00      	cmp	r3, #0
 800a074:	d007      	beq.n	800a086 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d003      	beq.n	800a086 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a08c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	689b      	ldr	r3, [r3, #8]
 800a094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a098:	2b40      	cmp	r3, #64	; 0x40
 800a09a:	d004      	beq.n	800a0a6 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d031      	beq.n	800a10a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 ff7e 	bl	800afa8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	689b      	ldr	r3, [r3, #8]
 800a0b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0b6:	2b40      	cmp	r3, #64	; 0x40
 800a0b8:	d123      	bne.n	800a102 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	689a      	ldr	r2, [r3, #8]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a0c8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d013      	beq.n	800a0fa <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a0d6:	4a41      	ldr	r2, [pc, #260]	; (800a1dc <HAL_UART_IRQHandler+0x2f8>)
 800a0d8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f7fa fbb0 	bl	8004844 <HAL_DMA_Abort_IT>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d017      	beq.n	800a11a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a0ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0f0:	687a      	ldr	r2, [r7, #4]
 800a0f2:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800a0f4:	4610      	mov	r0, r2
 800a0f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0f8:	e00f      	b.n	800a11a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 f87a 	bl	800a1f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a100:	e00b      	b.n	800a11a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f000 f876 	bl	800a1f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a108:	e007      	b.n	800a11a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f000 f872 	bl	800a1f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2200      	movs	r2, #0
 800a114:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 800a118:	e056      	b.n	800a1c8 <HAL_UART_IRQHandler+0x2e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a11a:	bf00      	nop
    return;
 800a11c:	e054      	b.n	800a1c8 <HAL_UART_IRQHandler+0x2e4>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a11e:	69fb      	ldr	r3, [r7, #28]
 800a120:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a124:	2b00      	cmp	r3, #0
 800a126:	d00d      	beq.n	800a144 <HAL_UART_IRQHandler+0x260>
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d008      	beq.n	800a144 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a13a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f000 ff87 	bl	800b050 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a142:	e044      	b.n	800a1ce <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a144:	69fb      	ldr	r3, [r7, #28]
 800a146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d012      	beq.n	800a174 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a14e:	69bb      	ldr	r3, [r7, #24]
 800a150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a154:	2b00      	cmp	r3, #0
 800a156:	d104      	bne.n	800a162 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d008      	beq.n	800a174 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a166:	2b00      	cmp	r3, #0
 800a168:	d030      	beq.n	800a1cc <HAL_UART_IRQHandler+0x2e8>
    {
      huart->TxISR(huart);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	4798      	blx	r3
    }
    return;
 800a172:	e02b      	b.n	800a1cc <HAL_UART_IRQHandler+0x2e8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a174:	69fb      	ldr	r3, [r7, #28]
 800a176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d008      	beq.n	800a190 <HAL_UART_IRQHandler+0x2ac>
 800a17e:	69bb      	ldr	r3, [r7, #24]
 800a180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a184:	2b00      	cmp	r3, #0
 800a186:	d003      	beq.n	800a190 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f000 ff47 	bl	800b01c <UART_EndTransmit_IT>
    return;
 800a18e:	e01e      	b.n	800a1ce <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a190:	69fb      	ldr	r3, [r7, #28]
 800a192:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a196:	2b00      	cmp	r3, #0
 800a198:	d008      	beq.n	800a1ac <HAL_UART_IRQHandler+0x2c8>
 800a19a:	69bb      	ldr	r3, [r7, #24]
 800a19c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d003      	beq.n	800a1ac <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f000 ff67 	bl	800b078 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a1aa:	e010      	b.n	800a1ce <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a1ac:	69fb      	ldr	r3, [r7, #28]
 800a1ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d00b      	beq.n	800a1ce <HAL_UART_IRQHandler+0x2ea>
 800a1b6:	69bb      	ldr	r3, [r7, #24]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	da08      	bge.n	800a1ce <HAL_UART_IRQHandler+0x2ea>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f000 ff51 	bl	800b064 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a1c2:	e004      	b.n	800a1ce <HAL_UART_IRQHandler+0x2ea>
      return;
 800a1c4:	bf00      	nop
 800a1c6:	e002      	b.n	800a1ce <HAL_UART_IRQHandler+0x2ea>
    return;
 800a1c8:	bf00      	nop
 800a1ca:	e000      	b.n	800a1ce <HAL_UART_IRQHandler+0x2ea>
    return;
 800a1cc:	bf00      	nop
  }
}
 800a1ce:	3720      	adds	r7, #32
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}
 800a1d4:	10000001 	.word	0x10000001
 800a1d8:	04000120 	.word	0x04000120
 800a1dc:	0800aff1 	.word	0x0800aff1

0800a1e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b083      	sub	sp, #12
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a1e8:	bf00      	nop
 800a1ea:	370c      	adds	r7, #12
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr

0800a1f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b083      	sub	sp, #12
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a1fc:	bf00      	nop
 800a1fe:	370c      	adds	r7, #12
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr

0800a208 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a208:	b5b0      	push	{r4, r5, r7, lr}
 800a20a:	b08e      	sub	sp, #56	; 0x38
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a210:	2300      	movs	r3, #0
 800a212:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	689a      	ldr	r2, [r3, #8]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	691b      	ldr	r3, [r3, #16]
 800a21e:	431a      	orrs	r2, r3
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	695b      	ldr	r3, [r3, #20]
 800a224:	431a      	orrs	r2, r3
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	69db      	ldr	r3, [r3, #28]
 800a22a:	4313      	orrs	r3, r2
 800a22c:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a232:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a234:	4313      	orrs	r3, r2
 800a236:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	681a      	ldr	r2, [r3, #0]
 800a23e:	4bc0      	ldr	r3, [pc, #768]	; (800a540 <UART_SetConfig+0x338>)
 800a240:	4013      	ands	r3, r2
 800a242:	687a      	ldr	r2, [r7, #4]
 800a244:	6812      	ldr	r2, [r2, #0]
 800a246:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a248:	430b      	orrs	r3, r1
 800a24a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	685b      	ldr	r3, [r3, #4]
 800a252:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	68da      	ldr	r2, [r3, #12]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	430a      	orrs	r2, r1
 800a260:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	699b      	ldr	r3, [r3, #24]
 800a266:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4ab5      	ldr	r2, [pc, #724]	; (800a544 <UART_SetConfig+0x33c>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d004      	beq.n	800a27c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6a1b      	ldr	r3, [r3, #32]
 800a276:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a278:	4313      	orrs	r3, r2
 800a27a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	689a      	ldr	r2, [r3, #8]
 800a282:	4bb1      	ldr	r3, [pc, #708]	; (800a548 <UART_SetConfig+0x340>)
 800a284:	4013      	ands	r3, r2
 800a286:	687a      	ldr	r2, [r7, #4]
 800a288:	6812      	ldr	r2, [r2, #0]
 800a28a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a28c:	430b      	orrs	r3, r1
 800a28e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a296:	f023 010f 	bic.w	r1, r3, #15
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	430a      	orrs	r2, r1
 800a2a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	4aa8      	ldr	r2, [pc, #672]	; (800a54c <UART_SetConfig+0x344>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d177      	bne.n	800a3a0 <UART_SetConfig+0x198>
 800a2b0:	4ba7      	ldr	r3, [pc, #668]	; (800a550 <UART_SetConfig+0x348>)
 800a2b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a2b8:	2b28      	cmp	r3, #40	; 0x28
 800a2ba:	d86d      	bhi.n	800a398 <UART_SetConfig+0x190>
 800a2bc:	a201      	add	r2, pc, #4	; (adr r2, 800a2c4 <UART_SetConfig+0xbc>)
 800a2be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2c2:	bf00      	nop
 800a2c4:	0800a369 	.word	0x0800a369
 800a2c8:	0800a399 	.word	0x0800a399
 800a2cc:	0800a399 	.word	0x0800a399
 800a2d0:	0800a399 	.word	0x0800a399
 800a2d4:	0800a399 	.word	0x0800a399
 800a2d8:	0800a399 	.word	0x0800a399
 800a2dc:	0800a399 	.word	0x0800a399
 800a2e0:	0800a399 	.word	0x0800a399
 800a2e4:	0800a371 	.word	0x0800a371
 800a2e8:	0800a399 	.word	0x0800a399
 800a2ec:	0800a399 	.word	0x0800a399
 800a2f0:	0800a399 	.word	0x0800a399
 800a2f4:	0800a399 	.word	0x0800a399
 800a2f8:	0800a399 	.word	0x0800a399
 800a2fc:	0800a399 	.word	0x0800a399
 800a300:	0800a399 	.word	0x0800a399
 800a304:	0800a379 	.word	0x0800a379
 800a308:	0800a399 	.word	0x0800a399
 800a30c:	0800a399 	.word	0x0800a399
 800a310:	0800a399 	.word	0x0800a399
 800a314:	0800a399 	.word	0x0800a399
 800a318:	0800a399 	.word	0x0800a399
 800a31c:	0800a399 	.word	0x0800a399
 800a320:	0800a399 	.word	0x0800a399
 800a324:	0800a381 	.word	0x0800a381
 800a328:	0800a399 	.word	0x0800a399
 800a32c:	0800a399 	.word	0x0800a399
 800a330:	0800a399 	.word	0x0800a399
 800a334:	0800a399 	.word	0x0800a399
 800a338:	0800a399 	.word	0x0800a399
 800a33c:	0800a399 	.word	0x0800a399
 800a340:	0800a399 	.word	0x0800a399
 800a344:	0800a389 	.word	0x0800a389
 800a348:	0800a399 	.word	0x0800a399
 800a34c:	0800a399 	.word	0x0800a399
 800a350:	0800a399 	.word	0x0800a399
 800a354:	0800a399 	.word	0x0800a399
 800a358:	0800a399 	.word	0x0800a399
 800a35c:	0800a399 	.word	0x0800a399
 800a360:	0800a399 	.word	0x0800a399
 800a364:	0800a391 	.word	0x0800a391
 800a368:	2301      	movs	r3, #1
 800a36a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a36e:	e222      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a370:	2304      	movs	r3, #4
 800a372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a376:	e21e      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a378:	2308      	movs	r3, #8
 800a37a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a37e:	e21a      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a380:	2310      	movs	r3, #16
 800a382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a386:	e216      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a388:	2320      	movs	r3, #32
 800a38a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a38e:	e212      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a390:	2340      	movs	r3, #64	; 0x40
 800a392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a396:	e20e      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a398:	2380      	movs	r3, #128	; 0x80
 800a39a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a39e:	e20a      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	4a6b      	ldr	r2, [pc, #428]	; (800a554 <UART_SetConfig+0x34c>)
 800a3a6:	4293      	cmp	r3, r2
 800a3a8:	d130      	bne.n	800a40c <UART_SetConfig+0x204>
 800a3aa:	4b69      	ldr	r3, [pc, #420]	; (800a550 <UART_SetConfig+0x348>)
 800a3ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3ae:	f003 0307 	and.w	r3, r3, #7
 800a3b2:	2b05      	cmp	r3, #5
 800a3b4:	d826      	bhi.n	800a404 <UART_SetConfig+0x1fc>
 800a3b6:	a201      	add	r2, pc, #4	; (adr r2, 800a3bc <UART_SetConfig+0x1b4>)
 800a3b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3bc:	0800a3d5 	.word	0x0800a3d5
 800a3c0:	0800a3dd 	.word	0x0800a3dd
 800a3c4:	0800a3e5 	.word	0x0800a3e5
 800a3c8:	0800a3ed 	.word	0x0800a3ed
 800a3cc:	0800a3f5 	.word	0x0800a3f5
 800a3d0:	0800a3fd 	.word	0x0800a3fd
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3da:	e1ec      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a3dc:	2304      	movs	r3, #4
 800a3de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3e2:	e1e8      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a3e4:	2308      	movs	r3, #8
 800a3e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3ea:	e1e4      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a3ec:	2310      	movs	r3, #16
 800a3ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3f2:	e1e0      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a3f4:	2320      	movs	r3, #32
 800a3f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3fa:	e1dc      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a3fc:	2340      	movs	r3, #64	; 0x40
 800a3fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a402:	e1d8      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a404:	2380      	movs	r3, #128	; 0x80
 800a406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a40a:	e1d4      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	4a51      	ldr	r2, [pc, #324]	; (800a558 <UART_SetConfig+0x350>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d130      	bne.n	800a478 <UART_SetConfig+0x270>
 800a416:	4b4e      	ldr	r3, [pc, #312]	; (800a550 <UART_SetConfig+0x348>)
 800a418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a41a:	f003 0307 	and.w	r3, r3, #7
 800a41e:	2b05      	cmp	r3, #5
 800a420:	d826      	bhi.n	800a470 <UART_SetConfig+0x268>
 800a422:	a201      	add	r2, pc, #4	; (adr r2, 800a428 <UART_SetConfig+0x220>)
 800a424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a428:	0800a441 	.word	0x0800a441
 800a42c:	0800a449 	.word	0x0800a449
 800a430:	0800a451 	.word	0x0800a451
 800a434:	0800a459 	.word	0x0800a459
 800a438:	0800a461 	.word	0x0800a461
 800a43c:	0800a469 	.word	0x0800a469
 800a440:	2300      	movs	r3, #0
 800a442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a446:	e1b6      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a448:	2304      	movs	r3, #4
 800a44a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a44e:	e1b2      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a450:	2308      	movs	r3, #8
 800a452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a456:	e1ae      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a458:	2310      	movs	r3, #16
 800a45a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a45e:	e1aa      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a460:	2320      	movs	r3, #32
 800a462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a466:	e1a6      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a468:	2340      	movs	r3, #64	; 0x40
 800a46a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a46e:	e1a2      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a470:	2380      	movs	r3, #128	; 0x80
 800a472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a476:	e19e      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4a37      	ldr	r2, [pc, #220]	; (800a55c <UART_SetConfig+0x354>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d130      	bne.n	800a4e4 <UART_SetConfig+0x2dc>
 800a482:	4b33      	ldr	r3, [pc, #204]	; (800a550 <UART_SetConfig+0x348>)
 800a484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a486:	f003 0307 	and.w	r3, r3, #7
 800a48a:	2b05      	cmp	r3, #5
 800a48c:	d826      	bhi.n	800a4dc <UART_SetConfig+0x2d4>
 800a48e:	a201      	add	r2, pc, #4	; (adr r2, 800a494 <UART_SetConfig+0x28c>)
 800a490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a494:	0800a4ad 	.word	0x0800a4ad
 800a498:	0800a4b5 	.word	0x0800a4b5
 800a49c:	0800a4bd 	.word	0x0800a4bd
 800a4a0:	0800a4c5 	.word	0x0800a4c5
 800a4a4:	0800a4cd 	.word	0x0800a4cd
 800a4a8:	0800a4d5 	.word	0x0800a4d5
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4b2:	e180      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a4b4:	2304      	movs	r3, #4
 800a4b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4ba:	e17c      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a4bc:	2308      	movs	r3, #8
 800a4be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4c2:	e178      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a4c4:	2310      	movs	r3, #16
 800a4c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4ca:	e174      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a4cc:	2320      	movs	r3, #32
 800a4ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4d2:	e170      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a4d4:	2340      	movs	r3, #64	; 0x40
 800a4d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4da:	e16c      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a4dc:	2380      	movs	r3, #128	; 0x80
 800a4de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4e2:	e168      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	4a1d      	ldr	r2, [pc, #116]	; (800a560 <UART_SetConfig+0x358>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d142      	bne.n	800a574 <UART_SetConfig+0x36c>
 800a4ee:	4b18      	ldr	r3, [pc, #96]	; (800a550 <UART_SetConfig+0x348>)
 800a4f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4f2:	f003 0307 	and.w	r3, r3, #7
 800a4f6:	2b05      	cmp	r3, #5
 800a4f8:	d838      	bhi.n	800a56c <UART_SetConfig+0x364>
 800a4fa:	a201      	add	r2, pc, #4	; (adr r2, 800a500 <UART_SetConfig+0x2f8>)
 800a4fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a500:	0800a519 	.word	0x0800a519
 800a504:	0800a521 	.word	0x0800a521
 800a508:	0800a529 	.word	0x0800a529
 800a50c:	0800a531 	.word	0x0800a531
 800a510:	0800a539 	.word	0x0800a539
 800a514:	0800a565 	.word	0x0800a565
 800a518:	2300      	movs	r3, #0
 800a51a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a51e:	e14a      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a520:	2304      	movs	r3, #4
 800a522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a526:	e146      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a528:	2308      	movs	r3, #8
 800a52a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a52e:	e142      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a530:	2310      	movs	r3, #16
 800a532:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a536:	e13e      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a538:	2320      	movs	r3, #32
 800a53a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a53e:	e13a      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a540:	cfff69f3 	.word	0xcfff69f3
 800a544:	58000c00 	.word	0x58000c00
 800a548:	11fff4ff 	.word	0x11fff4ff
 800a54c:	40011000 	.word	0x40011000
 800a550:	58024400 	.word	0x58024400
 800a554:	40004400 	.word	0x40004400
 800a558:	40004800 	.word	0x40004800
 800a55c:	40004c00 	.word	0x40004c00
 800a560:	40005000 	.word	0x40005000
 800a564:	2340      	movs	r3, #64	; 0x40
 800a566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a56a:	e124      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a56c:	2380      	movs	r3, #128	; 0x80
 800a56e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a572:	e120      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	4acc      	ldr	r2, [pc, #816]	; (800a8ac <UART_SetConfig+0x6a4>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d176      	bne.n	800a66c <UART_SetConfig+0x464>
 800a57e:	4bcc      	ldr	r3, [pc, #816]	; (800a8b0 <UART_SetConfig+0x6a8>)
 800a580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a582:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a586:	2b28      	cmp	r3, #40	; 0x28
 800a588:	d86c      	bhi.n	800a664 <UART_SetConfig+0x45c>
 800a58a:	a201      	add	r2, pc, #4	; (adr r2, 800a590 <UART_SetConfig+0x388>)
 800a58c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a590:	0800a635 	.word	0x0800a635
 800a594:	0800a665 	.word	0x0800a665
 800a598:	0800a665 	.word	0x0800a665
 800a59c:	0800a665 	.word	0x0800a665
 800a5a0:	0800a665 	.word	0x0800a665
 800a5a4:	0800a665 	.word	0x0800a665
 800a5a8:	0800a665 	.word	0x0800a665
 800a5ac:	0800a665 	.word	0x0800a665
 800a5b0:	0800a63d 	.word	0x0800a63d
 800a5b4:	0800a665 	.word	0x0800a665
 800a5b8:	0800a665 	.word	0x0800a665
 800a5bc:	0800a665 	.word	0x0800a665
 800a5c0:	0800a665 	.word	0x0800a665
 800a5c4:	0800a665 	.word	0x0800a665
 800a5c8:	0800a665 	.word	0x0800a665
 800a5cc:	0800a665 	.word	0x0800a665
 800a5d0:	0800a645 	.word	0x0800a645
 800a5d4:	0800a665 	.word	0x0800a665
 800a5d8:	0800a665 	.word	0x0800a665
 800a5dc:	0800a665 	.word	0x0800a665
 800a5e0:	0800a665 	.word	0x0800a665
 800a5e4:	0800a665 	.word	0x0800a665
 800a5e8:	0800a665 	.word	0x0800a665
 800a5ec:	0800a665 	.word	0x0800a665
 800a5f0:	0800a64d 	.word	0x0800a64d
 800a5f4:	0800a665 	.word	0x0800a665
 800a5f8:	0800a665 	.word	0x0800a665
 800a5fc:	0800a665 	.word	0x0800a665
 800a600:	0800a665 	.word	0x0800a665
 800a604:	0800a665 	.word	0x0800a665
 800a608:	0800a665 	.word	0x0800a665
 800a60c:	0800a665 	.word	0x0800a665
 800a610:	0800a655 	.word	0x0800a655
 800a614:	0800a665 	.word	0x0800a665
 800a618:	0800a665 	.word	0x0800a665
 800a61c:	0800a665 	.word	0x0800a665
 800a620:	0800a665 	.word	0x0800a665
 800a624:	0800a665 	.word	0x0800a665
 800a628:	0800a665 	.word	0x0800a665
 800a62c:	0800a665 	.word	0x0800a665
 800a630:	0800a65d 	.word	0x0800a65d
 800a634:	2301      	movs	r3, #1
 800a636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a63a:	e0bc      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a63c:	2304      	movs	r3, #4
 800a63e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a642:	e0b8      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a644:	2308      	movs	r3, #8
 800a646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a64a:	e0b4      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a64c:	2310      	movs	r3, #16
 800a64e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a652:	e0b0      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a654:	2320      	movs	r3, #32
 800a656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a65a:	e0ac      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a65c:	2340      	movs	r3, #64	; 0x40
 800a65e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a662:	e0a8      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a664:	2380      	movs	r3, #128	; 0x80
 800a666:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a66a:	e0a4      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	4a90      	ldr	r2, [pc, #576]	; (800a8b4 <UART_SetConfig+0x6ac>)
 800a672:	4293      	cmp	r3, r2
 800a674:	d130      	bne.n	800a6d8 <UART_SetConfig+0x4d0>
 800a676:	4b8e      	ldr	r3, [pc, #568]	; (800a8b0 <UART_SetConfig+0x6a8>)
 800a678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a67a:	f003 0307 	and.w	r3, r3, #7
 800a67e:	2b05      	cmp	r3, #5
 800a680:	d826      	bhi.n	800a6d0 <UART_SetConfig+0x4c8>
 800a682:	a201      	add	r2, pc, #4	; (adr r2, 800a688 <UART_SetConfig+0x480>)
 800a684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a688:	0800a6a1 	.word	0x0800a6a1
 800a68c:	0800a6a9 	.word	0x0800a6a9
 800a690:	0800a6b1 	.word	0x0800a6b1
 800a694:	0800a6b9 	.word	0x0800a6b9
 800a698:	0800a6c1 	.word	0x0800a6c1
 800a69c:	0800a6c9 	.word	0x0800a6c9
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6a6:	e086      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a6a8:	2304      	movs	r3, #4
 800a6aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6ae:	e082      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a6b0:	2308      	movs	r3, #8
 800a6b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6b6:	e07e      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a6b8:	2310      	movs	r3, #16
 800a6ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6be:	e07a      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a6c0:	2320      	movs	r3, #32
 800a6c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6c6:	e076      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a6c8:	2340      	movs	r3, #64	; 0x40
 800a6ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6ce:	e072      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a6d0:	2380      	movs	r3, #128	; 0x80
 800a6d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6d6:	e06e      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4a76      	ldr	r2, [pc, #472]	; (800a8b8 <UART_SetConfig+0x6b0>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d130      	bne.n	800a744 <UART_SetConfig+0x53c>
 800a6e2:	4b73      	ldr	r3, [pc, #460]	; (800a8b0 <UART_SetConfig+0x6a8>)
 800a6e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6e6:	f003 0307 	and.w	r3, r3, #7
 800a6ea:	2b05      	cmp	r3, #5
 800a6ec:	d826      	bhi.n	800a73c <UART_SetConfig+0x534>
 800a6ee:	a201      	add	r2, pc, #4	; (adr r2, 800a6f4 <UART_SetConfig+0x4ec>)
 800a6f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6f4:	0800a70d 	.word	0x0800a70d
 800a6f8:	0800a715 	.word	0x0800a715
 800a6fc:	0800a71d 	.word	0x0800a71d
 800a700:	0800a725 	.word	0x0800a725
 800a704:	0800a72d 	.word	0x0800a72d
 800a708:	0800a735 	.word	0x0800a735
 800a70c:	2300      	movs	r3, #0
 800a70e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a712:	e050      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a714:	2304      	movs	r3, #4
 800a716:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a71a:	e04c      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a71c:	2308      	movs	r3, #8
 800a71e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a722:	e048      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a724:	2310      	movs	r3, #16
 800a726:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a72a:	e044      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a72c:	2320      	movs	r3, #32
 800a72e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a732:	e040      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a734:	2340      	movs	r3, #64	; 0x40
 800a736:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a73a:	e03c      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a73c:	2380      	movs	r3, #128	; 0x80
 800a73e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a742:	e038      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4a5c      	ldr	r2, [pc, #368]	; (800a8bc <UART_SetConfig+0x6b4>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d130      	bne.n	800a7b0 <UART_SetConfig+0x5a8>
 800a74e:	4b58      	ldr	r3, [pc, #352]	; (800a8b0 <UART_SetConfig+0x6a8>)
 800a750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a752:	f003 0307 	and.w	r3, r3, #7
 800a756:	2b05      	cmp	r3, #5
 800a758:	d826      	bhi.n	800a7a8 <UART_SetConfig+0x5a0>
 800a75a:	a201      	add	r2, pc, #4	; (adr r2, 800a760 <UART_SetConfig+0x558>)
 800a75c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a760:	0800a779 	.word	0x0800a779
 800a764:	0800a781 	.word	0x0800a781
 800a768:	0800a789 	.word	0x0800a789
 800a76c:	0800a791 	.word	0x0800a791
 800a770:	0800a799 	.word	0x0800a799
 800a774:	0800a7a1 	.word	0x0800a7a1
 800a778:	2302      	movs	r3, #2
 800a77a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a77e:	e01a      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a780:	2304      	movs	r3, #4
 800a782:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a786:	e016      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a788:	2308      	movs	r3, #8
 800a78a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a78e:	e012      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a790:	2310      	movs	r3, #16
 800a792:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a796:	e00e      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a798:	2320      	movs	r3, #32
 800a79a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a79e:	e00a      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a7a0:	2340      	movs	r3, #64	; 0x40
 800a7a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7a6:	e006      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a7a8:	2380      	movs	r3, #128	; 0x80
 800a7aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7ae:	e002      	b.n	800a7b6 <UART_SetConfig+0x5ae>
 800a7b0:	2380      	movs	r3, #128	; 0x80
 800a7b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4a40      	ldr	r2, [pc, #256]	; (800a8bc <UART_SetConfig+0x6b4>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	f040 80ef 	bne.w	800a9a0 <UART_SetConfig+0x798>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a7c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a7c6:	2b20      	cmp	r3, #32
 800a7c8:	dc46      	bgt.n	800a858 <UART_SetConfig+0x650>
 800a7ca:	2b02      	cmp	r3, #2
 800a7cc:	f2c0 8081 	blt.w	800a8d2 <UART_SetConfig+0x6ca>
 800a7d0:	3b02      	subs	r3, #2
 800a7d2:	2b1e      	cmp	r3, #30
 800a7d4:	d87d      	bhi.n	800a8d2 <UART_SetConfig+0x6ca>
 800a7d6:	a201      	add	r2, pc, #4	; (adr r2, 800a7dc <UART_SetConfig+0x5d4>)
 800a7d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7dc:	0800a85f 	.word	0x0800a85f
 800a7e0:	0800a8d3 	.word	0x0800a8d3
 800a7e4:	0800a867 	.word	0x0800a867
 800a7e8:	0800a8d3 	.word	0x0800a8d3
 800a7ec:	0800a8d3 	.word	0x0800a8d3
 800a7f0:	0800a8d3 	.word	0x0800a8d3
 800a7f4:	0800a877 	.word	0x0800a877
 800a7f8:	0800a8d3 	.word	0x0800a8d3
 800a7fc:	0800a8d3 	.word	0x0800a8d3
 800a800:	0800a8d3 	.word	0x0800a8d3
 800a804:	0800a8d3 	.word	0x0800a8d3
 800a808:	0800a8d3 	.word	0x0800a8d3
 800a80c:	0800a8d3 	.word	0x0800a8d3
 800a810:	0800a8d3 	.word	0x0800a8d3
 800a814:	0800a887 	.word	0x0800a887
 800a818:	0800a8d3 	.word	0x0800a8d3
 800a81c:	0800a8d3 	.word	0x0800a8d3
 800a820:	0800a8d3 	.word	0x0800a8d3
 800a824:	0800a8d3 	.word	0x0800a8d3
 800a828:	0800a8d3 	.word	0x0800a8d3
 800a82c:	0800a8d3 	.word	0x0800a8d3
 800a830:	0800a8d3 	.word	0x0800a8d3
 800a834:	0800a8d3 	.word	0x0800a8d3
 800a838:	0800a8d3 	.word	0x0800a8d3
 800a83c:	0800a8d3 	.word	0x0800a8d3
 800a840:	0800a8d3 	.word	0x0800a8d3
 800a844:	0800a8d3 	.word	0x0800a8d3
 800a848:	0800a8d3 	.word	0x0800a8d3
 800a84c:	0800a8d3 	.word	0x0800a8d3
 800a850:	0800a8d3 	.word	0x0800a8d3
 800a854:	0800a8c5 	.word	0x0800a8c5
 800a858:	2b40      	cmp	r3, #64	; 0x40
 800a85a:	d036      	beq.n	800a8ca <UART_SetConfig+0x6c2>
 800a85c:	e039      	b.n	800a8d2 <UART_SetConfig+0x6ca>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a85e:	f7fb fef5 	bl	800664c <HAL_RCCEx_GetD3PCLK1Freq>
 800a862:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a864:	e03b      	b.n	800a8de <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a866:	f107 0314 	add.w	r3, r7, #20
 800a86a:	4618      	mov	r0, r3
 800a86c:	f7fb ff04 	bl	8006678 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a870:	69bb      	ldr	r3, [r7, #24]
 800a872:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a874:	e033      	b.n	800a8de <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a876:	f107 0308 	add.w	r3, r7, #8
 800a87a:	4618      	mov	r0, r3
 800a87c:	f7fc f850 	bl	8006920 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a884:	e02b      	b.n	800a8de <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a886:	4b0a      	ldr	r3, [pc, #40]	; (800a8b0 <UART_SetConfig+0x6a8>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f003 0320 	and.w	r3, r3, #32
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d009      	beq.n	800a8a6 <UART_SetConfig+0x69e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a892:	4b07      	ldr	r3, [pc, #28]	; (800a8b0 <UART_SetConfig+0x6a8>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	08db      	lsrs	r3, r3, #3
 800a898:	f003 0303 	and.w	r3, r3, #3
 800a89c:	4a08      	ldr	r2, [pc, #32]	; (800a8c0 <UART_SetConfig+0x6b8>)
 800a89e:	fa22 f303 	lsr.w	r3, r2, r3
 800a8a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a8a4:	e01b      	b.n	800a8de <UART_SetConfig+0x6d6>
          pclk = (uint32_t) HSI_VALUE;
 800a8a6:	4b06      	ldr	r3, [pc, #24]	; (800a8c0 <UART_SetConfig+0x6b8>)
 800a8a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a8aa:	e018      	b.n	800a8de <UART_SetConfig+0x6d6>
 800a8ac:	40011400 	.word	0x40011400
 800a8b0:	58024400 	.word	0x58024400
 800a8b4:	40007800 	.word	0x40007800
 800a8b8:	40007c00 	.word	0x40007c00
 800a8bc:	58000c00 	.word	0x58000c00
 800a8c0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a8c4:	4bc4      	ldr	r3, [pc, #784]	; (800abd8 <UART_SetConfig+0x9d0>)
 800a8c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a8c8:	e009      	b.n	800a8de <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a8ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a8ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a8d0:	e005      	b.n	800a8de <UART_SetConfig+0x6d6>
      default:
        pclk = 0U;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a8dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a8de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	f000 81da 	beq.w	800ac9a <UART_SetConfig+0xa92>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ea:	4abc      	ldr	r2, [pc, #752]	; (800abdc <UART_SetConfig+0x9d4>)
 800a8ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8f0:	461a      	mov	r2, r3
 800a8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8f4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8f8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	685a      	ldr	r2, [r3, #4]
 800a8fe:	4613      	mov	r3, r2
 800a900:	005b      	lsls	r3, r3, #1
 800a902:	4413      	add	r3, r2
 800a904:	6a3a      	ldr	r2, [r7, #32]
 800a906:	429a      	cmp	r2, r3
 800a908:	d305      	bcc.n	800a916 <UART_SetConfig+0x70e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	685b      	ldr	r3, [r3, #4]
 800a90e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a910:	6a3a      	ldr	r2, [r7, #32]
 800a912:	429a      	cmp	r2, r3
 800a914:	d903      	bls.n	800a91e <UART_SetConfig+0x716>
      {
        ret = HAL_ERROR;
 800a916:	2301      	movs	r3, #1
 800a918:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a91c:	e1bd      	b.n	800ac9a <UART_SetConfig+0xa92>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a920:	4618      	mov	r0, r3
 800a922:	f04f 0100 	mov.w	r1, #0
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a92a:	4aac      	ldr	r2, [pc, #688]	; (800abdc <UART_SetConfig+0x9d4>)
 800a92c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a930:	b29a      	uxth	r2, r3
 800a932:	f04f 0300 	mov.w	r3, #0
 800a936:	f7f5 fd2b 	bl	8000390 <__aeabi_uldivmod>
 800a93a:	4602      	mov	r2, r0
 800a93c:	460b      	mov	r3, r1
 800a93e:	4610      	mov	r0, r2
 800a940:	4619      	mov	r1, r3
 800a942:	f04f 0200 	mov.w	r2, #0
 800a946:	f04f 0300 	mov.w	r3, #0
 800a94a:	020b      	lsls	r3, r1, #8
 800a94c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a950:	0202      	lsls	r2, r0, #8
 800a952:	6879      	ldr	r1, [r7, #4]
 800a954:	6849      	ldr	r1, [r1, #4]
 800a956:	0849      	lsrs	r1, r1, #1
 800a958:	4608      	mov	r0, r1
 800a95a:	f04f 0100 	mov.w	r1, #0
 800a95e:	1814      	adds	r4, r2, r0
 800a960:	eb43 0501 	adc.w	r5, r3, r1
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	685b      	ldr	r3, [r3, #4]
 800a968:	461a      	mov	r2, r3
 800a96a:	f04f 0300 	mov.w	r3, #0
 800a96e:	4620      	mov	r0, r4
 800a970:	4629      	mov	r1, r5
 800a972:	f7f5 fd0d 	bl	8000390 <__aeabi_uldivmod>
 800a976:	4602      	mov	r2, r0
 800a978:	460b      	mov	r3, r1
 800a97a:	4613      	mov	r3, r2
 800a97c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a97e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a980:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a984:	d308      	bcc.n	800a998 <UART_SetConfig+0x790>
 800a986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a988:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a98c:	d204      	bcs.n	800a998 <UART_SetConfig+0x790>
        {
          huart->Instance->BRR = usartdiv;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a994:	60da      	str	r2, [r3, #12]
 800a996:	e180      	b.n	800ac9a <UART_SetConfig+0xa92>
        }
        else
        {
          ret = HAL_ERROR;
 800a998:	2301      	movs	r3, #1
 800a99a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a99e:	e17c      	b.n	800ac9a <UART_SetConfig+0xa92>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	69db      	ldr	r3, [r3, #28]
 800a9a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a9a8:	f040 80bf 	bne.w	800ab2a <UART_SetConfig+0x922>
  {
    switch (clocksource)
 800a9ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a9b0:	2b20      	cmp	r3, #32
 800a9b2:	dc49      	bgt.n	800aa48 <UART_SetConfig+0x840>
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	db7c      	blt.n	800aab2 <UART_SetConfig+0x8aa>
 800a9b8:	2b20      	cmp	r3, #32
 800a9ba:	d87a      	bhi.n	800aab2 <UART_SetConfig+0x8aa>
 800a9bc:	a201      	add	r2, pc, #4	; (adr r2, 800a9c4 <UART_SetConfig+0x7bc>)
 800a9be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9c2:	bf00      	nop
 800a9c4:	0800aa4f 	.word	0x0800aa4f
 800a9c8:	0800aa57 	.word	0x0800aa57
 800a9cc:	0800aab3 	.word	0x0800aab3
 800a9d0:	0800aab3 	.word	0x0800aab3
 800a9d4:	0800aa5f 	.word	0x0800aa5f
 800a9d8:	0800aab3 	.word	0x0800aab3
 800a9dc:	0800aab3 	.word	0x0800aab3
 800a9e0:	0800aab3 	.word	0x0800aab3
 800a9e4:	0800aa6f 	.word	0x0800aa6f
 800a9e8:	0800aab3 	.word	0x0800aab3
 800a9ec:	0800aab3 	.word	0x0800aab3
 800a9f0:	0800aab3 	.word	0x0800aab3
 800a9f4:	0800aab3 	.word	0x0800aab3
 800a9f8:	0800aab3 	.word	0x0800aab3
 800a9fc:	0800aab3 	.word	0x0800aab3
 800aa00:	0800aab3 	.word	0x0800aab3
 800aa04:	0800aa7f 	.word	0x0800aa7f
 800aa08:	0800aab3 	.word	0x0800aab3
 800aa0c:	0800aab3 	.word	0x0800aab3
 800aa10:	0800aab3 	.word	0x0800aab3
 800aa14:	0800aab3 	.word	0x0800aab3
 800aa18:	0800aab3 	.word	0x0800aab3
 800aa1c:	0800aab3 	.word	0x0800aab3
 800aa20:	0800aab3 	.word	0x0800aab3
 800aa24:	0800aab3 	.word	0x0800aab3
 800aa28:	0800aab3 	.word	0x0800aab3
 800aa2c:	0800aab3 	.word	0x0800aab3
 800aa30:	0800aab3 	.word	0x0800aab3
 800aa34:	0800aab3 	.word	0x0800aab3
 800aa38:	0800aab3 	.word	0x0800aab3
 800aa3c:	0800aab3 	.word	0x0800aab3
 800aa40:	0800aab3 	.word	0x0800aab3
 800aa44:	0800aaa5 	.word	0x0800aaa5
 800aa48:	2b40      	cmp	r3, #64	; 0x40
 800aa4a:	d02e      	beq.n	800aaaa <UART_SetConfig+0x8a2>
 800aa4c:	e031      	b.n	800aab2 <UART_SetConfig+0x8aa>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa4e:	f7fb fb19 	bl	8006084 <HAL_RCC_GetPCLK1Freq>
 800aa52:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800aa54:	e033      	b.n	800aabe <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa56:	f7fb fb2b 	bl	80060b0 <HAL_RCC_GetPCLK2Freq>
 800aa5a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800aa5c:	e02f      	b.n	800aabe <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa5e:	f107 0314 	add.w	r3, r7, #20
 800aa62:	4618      	mov	r0, r3
 800aa64:	f7fb fe08 	bl	8006678 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aa68:	69bb      	ldr	r3, [r7, #24]
 800aa6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa6c:	e027      	b.n	800aabe <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa6e:	f107 0308 	add.w	r3, r7, #8
 800aa72:	4618      	mov	r0, r3
 800aa74:	f7fb ff54 	bl	8006920 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa7c:	e01f      	b.n	800aabe <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa7e:	4b58      	ldr	r3, [pc, #352]	; (800abe0 <UART_SetConfig+0x9d8>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f003 0320 	and.w	r3, r3, #32
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d009      	beq.n	800aa9e <UART_SetConfig+0x896>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aa8a:	4b55      	ldr	r3, [pc, #340]	; (800abe0 <UART_SetConfig+0x9d8>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	08db      	lsrs	r3, r3, #3
 800aa90:	f003 0303 	and.w	r3, r3, #3
 800aa94:	4a53      	ldr	r2, [pc, #332]	; (800abe4 <UART_SetConfig+0x9dc>)
 800aa96:	fa22 f303 	lsr.w	r3, r2, r3
 800aa9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aa9c:	e00f      	b.n	800aabe <UART_SetConfig+0x8b6>
          pclk = (uint32_t) HSI_VALUE;
 800aa9e:	4b51      	ldr	r3, [pc, #324]	; (800abe4 <UART_SetConfig+0x9dc>)
 800aaa0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aaa2:	e00c      	b.n	800aabe <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aaa4:	4b4c      	ldr	r3, [pc, #304]	; (800abd8 <UART_SetConfig+0x9d0>)
 800aaa6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aaa8:	e009      	b.n	800aabe <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aaaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aaae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aab0:	e005      	b.n	800aabe <UART_SetConfig+0x8b6>
      default:
        pclk = 0U;
 800aab2:	2300      	movs	r3, #0
 800aab4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800aab6:	2301      	movs	r3, #1
 800aab8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800aabc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aabe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	f000 80ea 	beq.w	800ac9a <UART_SetConfig+0xa92>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaca:	4a44      	ldr	r2, [pc, #272]	; (800abdc <UART_SetConfig+0x9d4>)
 800aacc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aad0:	461a      	mov	r2, r3
 800aad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aad4:	fbb3 f3f2 	udiv	r3, r3, r2
 800aad8:	005a      	lsls	r2, r3, #1
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	685b      	ldr	r3, [r3, #4]
 800aade:	085b      	lsrs	r3, r3, #1
 800aae0:	441a      	add	r2, r3
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	685b      	ldr	r3, [r3, #4]
 800aae6:	fbb2 f3f3 	udiv	r3, r2, r3
 800aaea:	b29b      	uxth	r3, r3
 800aaec:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aaee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf0:	2b0f      	cmp	r3, #15
 800aaf2:	d916      	bls.n	800ab22 <UART_SetConfig+0x91a>
 800aaf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aafa:	d212      	bcs.n	800ab22 <UART_SetConfig+0x91a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aafe:	b29b      	uxth	r3, r3
 800ab00:	f023 030f 	bic.w	r3, r3, #15
 800ab04:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ab06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab08:	085b      	lsrs	r3, r3, #1
 800ab0a:	b29b      	uxth	r3, r3
 800ab0c:	f003 0307 	and.w	r3, r3, #7
 800ab10:	b29a      	uxth	r2, r3
 800ab12:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ab14:	4313      	orrs	r3, r2
 800ab16:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ab1e:	60da      	str	r2, [r3, #12]
 800ab20:	e0bb      	b.n	800ac9a <UART_SetConfig+0xa92>
      }
      else
      {
        ret = HAL_ERROR;
 800ab22:	2301      	movs	r3, #1
 800ab24:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ab28:	e0b7      	b.n	800ac9a <UART_SetConfig+0xa92>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ab2a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ab2e:	2b20      	cmp	r3, #32
 800ab30:	dc4a      	bgt.n	800abc8 <UART_SetConfig+0x9c0>
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	f2c0 8086 	blt.w	800ac44 <UART_SetConfig+0xa3c>
 800ab38:	2b20      	cmp	r3, #32
 800ab3a:	f200 8083 	bhi.w	800ac44 <UART_SetConfig+0xa3c>
 800ab3e:	a201      	add	r2, pc, #4	; (adr r2, 800ab44 <UART_SetConfig+0x93c>)
 800ab40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab44:	0800abcf 	.word	0x0800abcf
 800ab48:	0800abe9 	.word	0x0800abe9
 800ab4c:	0800ac45 	.word	0x0800ac45
 800ab50:	0800ac45 	.word	0x0800ac45
 800ab54:	0800abf1 	.word	0x0800abf1
 800ab58:	0800ac45 	.word	0x0800ac45
 800ab5c:	0800ac45 	.word	0x0800ac45
 800ab60:	0800ac45 	.word	0x0800ac45
 800ab64:	0800ac01 	.word	0x0800ac01
 800ab68:	0800ac45 	.word	0x0800ac45
 800ab6c:	0800ac45 	.word	0x0800ac45
 800ab70:	0800ac45 	.word	0x0800ac45
 800ab74:	0800ac45 	.word	0x0800ac45
 800ab78:	0800ac45 	.word	0x0800ac45
 800ab7c:	0800ac45 	.word	0x0800ac45
 800ab80:	0800ac45 	.word	0x0800ac45
 800ab84:	0800ac11 	.word	0x0800ac11
 800ab88:	0800ac45 	.word	0x0800ac45
 800ab8c:	0800ac45 	.word	0x0800ac45
 800ab90:	0800ac45 	.word	0x0800ac45
 800ab94:	0800ac45 	.word	0x0800ac45
 800ab98:	0800ac45 	.word	0x0800ac45
 800ab9c:	0800ac45 	.word	0x0800ac45
 800aba0:	0800ac45 	.word	0x0800ac45
 800aba4:	0800ac45 	.word	0x0800ac45
 800aba8:	0800ac45 	.word	0x0800ac45
 800abac:	0800ac45 	.word	0x0800ac45
 800abb0:	0800ac45 	.word	0x0800ac45
 800abb4:	0800ac45 	.word	0x0800ac45
 800abb8:	0800ac45 	.word	0x0800ac45
 800abbc:	0800ac45 	.word	0x0800ac45
 800abc0:	0800ac45 	.word	0x0800ac45
 800abc4:	0800ac37 	.word	0x0800ac37
 800abc8:	2b40      	cmp	r3, #64	; 0x40
 800abca:	d037      	beq.n	800ac3c <UART_SetConfig+0xa34>
 800abcc:	e03a      	b.n	800ac44 <UART_SetConfig+0xa3c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800abce:	f7fb fa59 	bl	8006084 <HAL_RCC_GetPCLK1Freq>
 800abd2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800abd4:	e03c      	b.n	800ac50 <UART_SetConfig+0xa48>
 800abd6:	bf00      	nop
 800abd8:	003d0900 	.word	0x003d0900
 800abdc:	08011684 	.word	0x08011684
 800abe0:	58024400 	.word	0x58024400
 800abe4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800abe8:	f7fb fa62 	bl	80060b0 <HAL_RCC_GetPCLK2Freq>
 800abec:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800abee:	e02f      	b.n	800ac50 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abf0:	f107 0314 	add.w	r3, r7, #20
 800abf4:	4618      	mov	r0, r3
 800abf6:	f7fb fd3f 	bl	8006678 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800abfa:	69bb      	ldr	r3, [r7, #24]
 800abfc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800abfe:	e027      	b.n	800ac50 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac00:	f107 0308 	add.w	r3, r7, #8
 800ac04:	4618      	mov	r0, r3
 800ac06:	f7fb fe8b 	bl	8006920 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac0e:	e01f      	b.n	800ac50 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac10:	4b2c      	ldr	r3, [pc, #176]	; (800acc4 <UART_SetConfig+0xabc>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f003 0320 	and.w	r3, r3, #32
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d009      	beq.n	800ac30 <UART_SetConfig+0xa28>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ac1c:	4b29      	ldr	r3, [pc, #164]	; (800acc4 <UART_SetConfig+0xabc>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	08db      	lsrs	r3, r3, #3
 800ac22:	f003 0303 	and.w	r3, r3, #3
 800ac26:	4a28      	ldr	r2, [pc, #160]	; (800acc8 <UART_SetConfig+0xac0>)
 800ac28:	fa22 f303 	lsr.w	r3, r2, r3
 800ac2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ac2e:	e00f      	b.n	800ac50 <UART_SetConfig+0xa48>
          pclk = (uint32_t) HSI_VALUE;
 800ac30:	4b25      	ldr	r3, [pc, #148]	; (800acc8 <UART_SetConfig+0xac0>)
 800ac32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac34:	e00c      	b.n	800ac50 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ac36:	4b25      	ldr	r3, [pc, #148]	; (800accc <UART_SetConfig+0xac4>)
 800ac38:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac3a:	e009      	b.n	800ac50 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac40:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac42:	e005      	b.n	800ac50 <UART_SetConfig+0xa48>
      default:
        pclk = 0U;
 800ac44:	2300      	movs	r3, #0
 800ac46:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ac48:	2301      	movs	r3, #1
 800ac4a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ac4e:	bf00      	nop
    }

    if (pclk != 0U)
 800ac50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d021      	beq.n	800ac9a <UART_SetConfig+0xa92>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac5a:	4a1d      	ldr	r2, [pc, #116]	; (800acd0 <UART_SetConfig+0xac8>)
 800ac5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac60:	461a      	mov	r2, r3
 800ac62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac64:	fbb3 f2f2 	udiv	r2, r3, r2
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	685b      	ldr	r3, [r3, #4]
 800ac6c:	085b      	lsrs	r3, r3, #1
 800ac6e:	441a      	add	r2, r3
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac78:	b29b      	uxth	r3, r3
 800ac7a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac7e:	2b0f      	cmp	r3, #15
 800ac80:	d908      	bls.n	800ac94 <UART_SetConfig+0xa8c>
 800ac82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac88:	d204      	bcs.n	800ac94 <UART_SetConfig+0xa8c>
      {
        huart->Instance->BRR = usartdiv;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac90:	60da      	str	r2, [r3, #12]
 800ac92:	e002      	b.n	800ac9a <UART_SetConfig+0xa92>
      }
      else
      {
        ret = HAL_ERROR;
 800ac94:	2301      	movs	r3, #1
 800ac96:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2201      	movs	r2, #1
 800ac9e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2201      	movs	r2, #1
 800aca6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2200      	movs	r2, #0
 800acae:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2200      	movs	r2, #0
 800acb4:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800acb6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800acba:	4618      	mov	r0, r3
 800acbc:	3738      	adds	r7, #56	; 0x38
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bdb0      	pop	{r4, r5, r7, pc}
 800acc2:	bf00      	nop
 800acc4:	58024400 	.word	0x58024400
 800acc8:	03d09000 	.word	0x03d09000
 800accc:	003d0900 	.word	0x003d0900
 800acd0:	08011684 	.word	0x08011684

0800acd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800acd4:	b480      	push	{r7}
 800acd6:	b083      	sub	sp, #12
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ace0:	f003 0301 	and.w	r3, r3, #1
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d00a      	beq.n	800acfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	685b      	ldr	r3, [r3, #4]
 800acee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	430a      	orrs	r2, r1
 800acfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad02:	f003 0302 	and.w	r3, r3, #2
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d00a      	beq.n	800ad20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	685b      	ldr	r3, [r3, #4]
 800ad10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	430a      	orrs	r2, r1
 800ad1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad24:	f003 0304 	and.w	r3, r3, #4
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d00a      	beq.n	800ad42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	685b      	ldr	r3, [r3, #4]
 800ad32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	430a      	orrs	r2, r1
 800ad40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad46:	f003 0308 	and.w	r3, r3, #8
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d00a      	beq.n	800ad64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	685b      	ldr	r3, [r3, #4]
 800ad54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	430a      	orrs	r2, r1
 800ad62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad68:	f003 0310 	and.w	r3, r3, #16
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d00a      	beq.n	800ad86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	689b      	ldr	r3, [r3, #8]
 800ad76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	430a      	orrs	r2, r1
 800ad84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad8a:	f003 0320 	and.w	r3, r3, #32
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d00a      	beq.n	800ada8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	689b      	ldr	r3, [r3, #8]
 800ad98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	430a      	orrs	r2, r1
 800ada6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d01a      	beq.n	800adea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	685b      	ldr	r3, [r3, #4]
 800adba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	430a      	orrs	r2, r1
 800adc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800add2:	d10a      	bne.n	800adea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	685b      	ldr	r3, [r3, #4]
 800adda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	430a      	orrs	r2, r1
 800ade8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d00a      	beq.n	800ae0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	685b      	ldr	r3, [r3, #4]
 800adfc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	430a      	orrs	r2, r1
 800ae0a:	605a      	str	r2, [r3, #4]
  }
}
 800ae0c:	bf00      	nop
 800ae0e:	370c      	adds	r7, #12
 800ae10:	46bd      	mov	sp, r7
 800ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae16:	4770      	bx	lr

0800ae18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b086      	sub	sp, #24
 800ae1c:	af02      	add	r7, sp, #8
 800ae1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2200      	movs	r2, #0
 800ae24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800ae28:	f7f9 fbc0 	bl	80045ac <HAL_GetTick>
 800ae2c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f003 0308 	and.w	r3, r3, #8
 800ae38:	2b08      	cmp	r3, #8
 800ae3a:	d10e      	bne.n	800ae5a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ae40:	9300      	str	r3, [sp, #0]
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	2200      	movs	r2, #0
 800ae46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f000 f82c 	bl	800aea8 <UART_WaitOnFlagUntilTimeout>
 800ae50:	4603      	mov	r3, r0
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d001      	beq.n	800ae5a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae56:	2303      	movs	r3, #3
 800ae58:	e022      	b.n	800aea0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	f003 0304 	and.w	r3, r3, #4
 800ae64:	2b04      	cmp	r3, #4
 800ae66:	d10e      	bne.n	800ae86 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ae6c:	9300      	str	r3, [sp, #0]
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2200      	movs	r2, #0
 800ae72:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f000 f816 	bl	800aea8 <UART_WaitOnFlagUntilTimeout>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d001      	beq.n	800ae86 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae82:	2303      	movs	r3, #3
 800ae84:	e00c      	b.n	800aea0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2220      	movs	r2, #32
 800ae8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2220      	movs	r2, #32
 800ae92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ae9e:	2300      	movs	r3, #0
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	3710      	adds	r7, #16
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}

0800aea8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b084      	sub	sp, #16
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	60f8      	str	r0, [r7, #12]
 800aeb0:	60b9      	str	r1, [r7, #8]
 800aeb2:	603b      	str	r3, [r7, #0]
 800aeb4:	4613      	mov	r3, r2
 800aeb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aeb8:	e062      	b.n	800af80 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aeba:	69bb      	ldr	r3, [r7, #24]
 800aebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aec0:	d05e      	beq.n	800af80 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aec2:	f7f9 fb73 	bl	80045ac <HAL_GetTick>
 800aec6:	4602      	mov	r2, r0
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	1ad3      	subs	r3, r2, r3
 800aecc:	69ba      	ldr	r2, [r7, #24]
 800aece:	429a      	cmp	r2, r3
 800aed0:	d302      	bcc.n	800aed8 <UART_WaitOnFlagUntilTimeout+0x30>
 800aed2:	69bb      	ldr	r3, [r7, #24]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d11d      	bne.n	800af14 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	681a      	ldr	r2, [r3, #0]
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800aee6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	689a      	ldr	r2, [r3, #8]
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f022 0201 	bic.w	r2, r2, #1
 800aef6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	2220      	movs	r2, #32
 800aefc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	2220      	movs	r2, #32
 800af04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	2200      	movs	r2, #0
 800af0c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800af10:	2303      	movs	r3, #3
 800af12:	e045      	b.n	800afa0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	f003 0304 	and.w	r3, r3, #4
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d02e      	beq.n	800af80 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	69db      	ldr	r3, [r3, #28]
 800af28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800af30:	d126      	bne.n	800af80 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800af3a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	681a      	ldr	r2, [r3, #0]
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800af4a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	689a      	ldr	r2, [r3, #8]
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f022 0201 	bic.w	r2, r2, #1
 800af5a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	2220      	movs	r2, #32
 800af60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	2220      	movs	r2, #32
 800af68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	2220      	movs	r2, #32
 800af70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	2200      	movs	r2, #0
 800af78:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800af7c:	2303      	movs	r3, #3
 800af7e:	e00f      	b.n	800afa0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	69da      	ldr	r2, [r3, #28]
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	4013      	ands	r3, r2
 800af8a:	68ba      	ldr	r2, [r7, #8]
 800af8c:	429a      	cmp	r2, r3
 800af8e:	bf0c      	ite	eq
 800af90:	2301      	moveq	r3, #1
 800af92:	2300      	movne	r3, #0
 800af94:	b2db      	uxtb	r3, r3
 800af96:	461a      	mov	r2, r3
 800af98:	79fb      	ldrb	r3, [r7, #7]
 800af9a:	429a      	cmp	r2, r3
 800af9c:	d08d      	beq.n	800aeba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800af9e:	2300      	movs	r3, #0
}
 800afa0:	4618      	mov	r0, r3
 800afa2:	3710      	adds	r7, #16
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}

0800afa8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b083      	sub	sp, #12
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	681a      	ldr	r2, [r3, #0]
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800afbe:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	6899      	ldr	r1, [r3, #8]
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681a      	ldr	r2, [r3, #0]
 800afca:	4b08      	ldr	r3, [pc, #32]	; (800afec <UART_EndRxTransfer+0x44>)
 800afcc:	400b      	ands	r3, r1
 800afce:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2220      	movs	r2, #32
 800afd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2200      	movs	r2, #0
 800afdc:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800afde:	bf00      	nop
 800afe0:	370c      	adds	r7, #12
 800afe2:	46bd      	mov	sp, r7
 800afe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe8:	4770      	bx	lr
 800afea:	bf00      	nop
 800afec:	effffffe 	.word	0xeffffffe

0800aff0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b084      	sub	sp, #16
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800affc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	2200      	movs	r2, #0
 800b002:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	2200      	movs	r2, #0
 800b00a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b00e:	68f8      	ldr	r0, [r7, #12]
 800b010:	f7ff f8f0 	bl	800a1f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b014:	bf00      	nop
 800b016:	3710      	adds	r7, #16
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}

0800b01c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b082      	sub	sp, #8
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	681a      	ldr	r2, [r3, #0]
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b032:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2220      	movs	r2, #32
 800b038:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2200      	movs	r2, #0
 800b040:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f7ff f8cc 	bl	800a1e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b048:	bf00      	nop
 800b04a:	3708      	adds	r7, #8
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}

0800b050 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b050:	b480      	push	{r7}
 800b052:	b083      	sub	sp, #12
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b058:	bf00      	nop
 800b05a:	370c      	adds	r7, #12
 800b05c:	46bd      	mov	sp, r7
 800b05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b062:	4770      	bx	lr

0800b064 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b064:	b480      	push	{r7}
 800b066:	b083      	sub	sp, #12
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b06c:	bf00      	nop
 800b06e:	370c      	adds	r7, #12
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr

0800b078 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b078:	b480      	push	{r7}
 800b07a:	b083      	sub	sp, #12
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b080:	bf00      	nop
 800b082:	370c      	adds	r7, #12
 800b084:	46bd      	mov	sp, r7
 800b086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08a:	4770      	bx	lr

0800b08c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b08c:	b480      	push	{r7}
 800b08e:	b085      	sub	sp, #20
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b09a:	2b01      	cmp	r3, #1
 800b09c:	d101      	bne.n	800b0a2 <HAL_UARTEx_DisableFifoMode+0x16>
 800b09e:	2302      	movs	r3, #2
 800b0a0:	e027      	b.n	800b0f2 <HAL_UARTEx_DisableFifoMode+0x66>
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2201      	movs	r2, #1
 800b0a6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2224      	movs	r2, #36	; 0x24
 800b0ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	681a      	ldr	r2, [r3, #0]
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f022 0201 	bic.w	r2, r2, #1
 800b0c8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b0d0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	68fa      	ldr	r2, [r7, #12]
 800b0de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2220      	movs	r2, #32
 800b0e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b0f0:	2300      	movs	r3, #0
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3714      	adds	r7, #20
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fc:	4770      	bx	lr

0800b0fe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b0fe:	b580      	push	{r7, lr}
 800b100:	b084      	sub	sp, #16
 800b102:	af00      	add	r7, sp, #0
 800b104:	6078      	str	r0, [r7, #4]
 800b106:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b10e:	2b01      	cmp	r3, #1
 800b110:	d101      	bne.n	800b116 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b112:	2302      	movs	r3, #2
 800b114:	e02d      	b.n	800b172 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2201      	movs	r2, #1
 800b11a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2224      	movs	r2, #36	; 0x24
 800b122:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	681a      	ldr	r2, [r3, #0]
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f022 0201 	bic.w	r2, r2, #1
 800b13c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	689b      	ldr	r3, [r3, #8]
 800b144:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	683a      	ldr	r2, [r7, #0]
 800b14e:	430a      	orrs	r2, r1
 800b150:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f000 f850 	bl	800b1f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	68fa      	ldr	r2, [r7, #12]
 800b15e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2220      	movs	r2, #32
 800b164:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2200      	movs	r2, #0
 800b16c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b170:	2300      	movs	r3, #0
}
 800b172:	4618      	mov	r0, r3
 800b174:	3710      	adds	r7, #16
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}

0800b17a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b17a:	b580      	push	{r7, lr}
 800b17c:	b084      	sub	sp, #16
 800b17e:	af00      	add	r7, sp, #0
 800b180:	6078      	str	r0, [r7, #4]
 800b182:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b18a:	2b01      	cmp	r3, #1
 800b18c:	d101      	bne.n	800b192 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b18e:	2302      	movs	r3, #2
 800b190:	e02d      	b.n	800b1ee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2201      	movs	r2, #1
 800b196:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2224      	movs	r2, #36	; 0x24
 800b19e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	681a      	ldr	r2, [r3, #0]
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f022 0201 	bic.w	r2, r2, #1
 800b1b8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	689b      	ldr	r3, [r3, #8]
 800b1c0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	683a      	ldr	r2, [r7, #0]
 800b1ca:	430a      	orrs	r2, r1
 800b1cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f000 f812 	bl	800b1f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	68fa      	ldr	r2, [r7, #12]
 800b1da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2220      	movs	r2, #32
 800b1e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b1ec:	2300      	movs	r3, #0
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3710      	adds	r7, #16
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}
	...

0800b1f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b089      	sub	sp, #36	; 0x24
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800b200:	4a2f      	ldr	r2, [pc, #188]	; (800b2c0 <UARTEx_SetNbDataToProcess+0xc8>)
 800b202:	f107 0314 	add.w	r3, r7, #20
 800b206:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b20a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800b20e:	4a2d      	ldr	r2, [pc, #180]	; (800b2c4 <UARTEx_SetNbDataToProcess+0xcc>)
 800b210:	f107 030c 	add.w	r3, r7, #12
 800b214:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b218:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b220:	2b00      	cmp	r3, #0
 800b222:	d108      	bne.n	800b236 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2201      	movs	r2, #1
 800b228:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2201      	movs	r2, #1
 800b230:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b234:	e03d      	b.n	800b2b2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b236:	2310      	movs	r3, #16
 800b238:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b23a:	2310      	movs	r3, #16
 800b23c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	689b      	ldr	r3, [r3, #8]
 800b244:	0e5b      	lsrs	r3, r3, #25
 800b246:	b2db      	uxtb	r3, r3
 800b248:	f003 0307 	and.w	r3, r3, #7
 800b24c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	689b      	ldr	r3, [r3, #8]
 800b254:	0f5b      	lsrs	r3, r3, #29
 800b256:	b2db      	uxtb	r3, r3
 800b258:	f003 0307 	and.w	r3, r3, #7
 800b25c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800b25e:	7fbb      	ldrb	r3, [r7, #30]
 800b260:	7f3a      	ldrb	r2, [r7, #28]
 800b262:	f107 0120 	add.w	r1, r7, #32
 800b266:	440a      	add	r2, r1
 800b268:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800b26c:	fb02 f303 	mul.w	r3, r2, r3
 800b270:	7f3a      	ldrb	r2, [r7, #28]
 800b272:	f107 0120 	add.w	r1, r7, #32
 800b276:	440a      	add	r2, r1
 800b278:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800b27c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b280:	b29a      	uxth	r2, r3
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800b288:	7ffb      	ldrb	r3, [r7, #31]
 800b28a:	7f7a      	ldrb	r2, [r7, #29]
 800b28c:	f107 0120 	add.w	r1, r7, #32
 800b290:	440a      	add	r2, r1
 800b292:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800b296:	fb02 f303 	mul.w	r3, r2, r3
 800b29a:	7f7a      	ldrb	r2, [r7, #29]
 800b29c:	f107 0120 	add.w	r1, r7, #32
 800b2a0:	440a      	add	r2, r1
 800b2a2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800b2a6:	fb93 f3f2 	sdiv	r3, r3, r2
 800b2aa:	b29a      	uxth	r2, r3
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b2b2:	bf00      	nop
 800b2b4:	3724      	adds	r7, #36	; 0x24
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2bc:	4770      	bx	lr
 800b2be:	bf00      	nop
 800b2c0:	08011620 	.word	0x08011620
 800b2c4:	08011628 	.word	0x08011628

0800b2c8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b2c8:	b084      	sub	sp, #16
 800b2ca:	b480      	push	{r7}
 800b2cc:	b085      	sub	sp, #20
 800b2ce:	af00      	add	r7, sp, #0
 800b2d0:	6078      	str	r0, [r7, #4]
 800b2d2:	f107 001c 	add.w	r0, r7, #28
 800b2d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b2de:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800b2e0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b2e2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800b2e6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800b2ea:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800b2ee:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b2f0:	68fa      	ldr	r2, [r7, #12]
 800b2f2:	4313      	orrs	r3, r2
 800b2f4:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	685a      	ldr	r2, [r3, #4]
 800b2fa:	4b07      	ldr	r3, [pc, #28]	; (800b318 <SDMMC_Init+0x50>)
 800b2fc:	4013      	ands	r3, r2
 800b2fe:	68fa      	ldr	r2, [r7, #12]
 800b300:	431a      	orrs	r2, r3
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b306:	2300      	movs	r3, #0
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3714      	adds	r7, #20
 800b30c:	46bd      	mov	sp, r7
 800b30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b312:	b004      	add	sp, #16
 800b314:	4770      	bx	lr
 800b316:	bf00      	nop
 800b318:	ffc02c00 	.word	0xffc02c00

0800b31c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b31c:	b480      	push	{r7}
 800b31e:	b083      	sub	sp, #12
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	370c      	adds	r7, #12
 800b32e:	46bd      	mov	sp, r7
 800b330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b334:	4770      	bx	lr

0800b336 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800b336:	b480      	push	{r7}
 800b338:	b083      	sub	sp, #12
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	6078      	str	r0, [r7, #4]
 800b33e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	681a      	ldr	r2, [r3, #0]
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b34a:	2300      	movs	r3, #0
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	370c      	adds	r7, #12
 800b350:	46bd      	mov	sp, r7
 800b352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b356:	4770      	bx	lr

0800b358 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b358:	b480      	push	{r7}
 800b35a:	b083      	sub	sp, #12
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f043 0203 	orr.w	r2, r3, #3
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b36c:	2300      	movs	r3, #0
}
 800b36e:	4618      	mov	r0, r3
 800b370:	370c      	adds	r7, #12
 800b372:	46bd      	mov	sp, r7
 800b374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b378:	4770      	bx	lr

0800b37a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800b37a:	b480      	push	{r7}
 800b37c:	b083      	sub	sp, #12
 800b37e:	af00      	add	r7, sp, #0
 800b380:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f003 0303 	and.w	r3, r3, #3
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	370c      	adds	r7, #12
 800b38e:	46bd      	mov	sp, r7
 800b390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b394:	4770      	bx	lr
	...

0800b398 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b398:	b480      	push	{r7}
 800b39a:	b085      	sub	sp, #20
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
 800b3a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	681a      	ldr	r2, [r3, #0]
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b3b6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b3bc:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b3c2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b3c4:	68fa      	ldr	r2, [r7, #12]
 800b3c6:	4313      	orrs	r3, r2
 800b3c8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	68da      	ldr	r2, [r3, #12]
 800b3ce:	4b06      	ldr	r3, [pc, #24]	; (800b3e8 <SDMMC_SendCommand+0x50>)
 800b3d0:	4013      	ands	r3, r2
 800b3d2:	68fa      	ldr	r2, [r7, #12]
 800b3d4:	431a      	orrs	r2, r3
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b3da:	2300      	movs	r3, #0
}
 800b3dc:	4618      	mov	r0, r3
 800b3de:	3714      	adds	r7, #20
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr
 800b3e8:	fffee0c0 	.word	0xfffee0c0

0800b3ec <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b083      	sub	sp, #12
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	691b      	ldr	r3, [r3, #16]
 800b3f8:	b2db      	uxtb	r3, r3
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	370c      	adds	r7, #12
 800b3fe:	46bd      	mov	sp, r7
 800b400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b404:	4770      	bx	lr

0800b406 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b406:	b480      	push	{r7}
 800b408:	b085      	sub	sp, #20
 800b40a:	af00      	add	r7, sp, #0
 800b40c:	6078      	str	r0, [r7, #4]
 800b40e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	3314      	adds	r3, #20
 800b414:	461a      	mov	r2, r3
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	4413      	add	r3, r2
 800b41a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	681b      	ldr	r3, [r3, #0]
}
 800b420:	4618      	mov	r0, r3
 800b422:	3714      	adds	r7, #20
 800b424:	46bd      	mov	sp, r7
 800b426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42a:	4770      	bx	lr

0800b42c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800b42c:	b480      	push	{r7}
 800b42e:	b085      	sub	sp, #20
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
 800b434:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b436:	2300      	movs	r3, #0
 800b438:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	681a      	ldr	r2, [r3, #0]
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	685a      	ldr	r2, [r3, #4]
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b452:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b458:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b45e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b460:	68fa      	ldr	r2, [r7, #12]
 800b462:	4313      	orrs	r3, r2
 800b464:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b46a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	431a      	orrs	r2, r3
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b476:	2300      	movs	r3, #0

}
 800b478:	4618      	mov	r0, r3
 800b47a:	3714      	adds	r7, #20
 800b47c:	46bd      	mov	sp, r7
 800b47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b482:	4770      	bx	lr

0800b484 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b088      	sub	sp, #32
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
 800b48c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b492:	2310      	movs	r3, #16
 800b494:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b496:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b49a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b49c:	2300      	movs	r3, #0
 800b49e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b4a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4a6:	f107 0308 	add.w	r3, r7, #8
 800b4aa:	4619      	mov	r1, r3
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	f7ff ff73 	bl	800b398 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b4b2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4b6:	2110      	movs	r1, #16
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f000 faaf 	bl	800ba1c <SDMMC_GetCmdResp1>
 800b4be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4c0:	69fb      	ldr	r3, [r7, #28]
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	3720      	adds	r7, #32
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}

0800b4ca <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b4ca:	b580      	push	{r7, lr}
 800b4cc:	b088      	sub	sp, #32
 800b4ce:	af00      	add	r7, sp, #0
 800b4d0:	6078      	str	r0, [r7, #4]
 800b4d2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b4d8:	2311      	movs	r3, #17
 800b4da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b4dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b4ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4ec:	f107 0308 	add.w	r3, r7, #8
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f7ff ff50 	bl	800b398 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b4f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4fc:	2111      	movs	r1, #17
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f000 fa8c 	bl	800ba1c <SDMMC_GetCmdResp1>
 800b504:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b506:	69fb      	ldr	r3, [r7, #28]
}
 800b508:	4618      	mov	r0, r3
 800b50a:	3720      	adds	r7, #32
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}

0800b510 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b088      	sub	sp, #32
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
 800b518:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b51e:	2312      	movs	r3, #18
 800b520:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b522:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b526:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b528:	2300      	movs	r3, #0
 800b52a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b52c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b530:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b532:	f107 0308 	add.w	r3, r7, #8
 800b536:	4619      	mov	r1, r3
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f7ff ff2d 	bl	800b398 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b53e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b542:	2112      	movs	r1, #18
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f000 fa69 	bl	800ba1c <SDMMC_GetCmdResp1>
 800b54a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b54c:	69fb      	ldr	r3, [r7, #28]
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3720      	adds	r7, #32
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}

0800b556 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b556:	b580      	push	{r7, lr}
 800b558:	b088      	sub	sp, #32
 800b55a:	af00      	add	r7, sp, #0
 800b55c:	6078      	str	r0, [r7, #4]
 800b55e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b564:	2318      	movs	r3, #24
 800b566:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b568:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b56c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b56e:	2300      	movs	r3, #0
 800b570:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b572:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b576:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b578:	f107 0308 	add.w	r3, r7, #8
 800b57c:	4619      	mov	r1, r3
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f7ff ff0a 	bl	800b398 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b584:	f241 3288 	movw	r2, #5000	; 0x1388
 800b588:	2118      	movs	r1, #24
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f000 fa46 	bl	800ba1c <SDMMC_GetCmdResp1>
 800b590:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b592:	69fb      	ldr	r3, [r7, #28]
}
 800b594:	4618      	mov	r0, r3
 800b596:	3720      	adds	r7, #32
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}

0800b59c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b088      	sub	sp, #32
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b5aa:	2319      	movs	r3, #25
 800b5ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b5bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5be:	f107 0308 	add.w	r3, r7, #8
 800b5c2:	4619      	mov	r1, r3
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f7ff fee7 	bl	800b398 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b5ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5ce:	2119      	movs	r1, #25
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f000 fa23 	bl	800ba1c <SDMMC_GetCmdResp1>
 800b5d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5d8:	69fb      	ldr	r3, [r7, #28]
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3720      	adds	r7, #32
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}
	...

0800b5e4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b088      	sub	sp, #32
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b5f0:	230c      	movs	r3, #12
 800b5f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b602:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	68db      	ldr	r3, [r3, #12]
 800b608:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	68db      	ldr	r3, [r3, #12]
 800b614:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b61c:	f107 0308 	add.w	r3, r7, #8
 800b620:	4619      	mov	r1, r3
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f7ff feb8 	bl	800b398 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b628:	4a0b      	ldr	r2, [pc, #44]	; (800b658 <SDMMC_CmdStopTransfer+0x74>)
 800b62a:	210c      	movs	r1, #12
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f000 f9f5 	bl	800ba1c <SDMMC_GetCmdResp1>
 800b632:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	68db      	ldr	r3, [r3, #12]
 800b638:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800b640:	69fb      	ldr	r3, [r7, #28]
 800b642:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b646:	d101      	bne.n	800b64c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800b648:	2300      	movs	r3, #0
 800b64a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800b64c:	69fb      	ldr	r3, [r7, #28]
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3720      	adds	r7, #32
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}
 800b656:	bf00      	nop
 800b658:	05f5e100 	.word	0x05f5e100

0800b65c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b08a      	sub	sp, #40	; 0x28
 800b660:	af00      	add	r7, sp, #0
 800b662:	60f8      	str	r0, [r7, #12]
 800b664:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b66c:	2307      	movs	r3, #7
 800b66e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b670:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b674:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b676:	2300      	movs	r3, #0
 800b678:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b67a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b67e:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b680:	f107 0310 	add.w	r3, r7, #16
 800b684:	4619      	mov	r1, r3
 800b686:	68f8      	ldr	r0, [r7, #12]
 800b688:	f7ff fe86 	bl	800b398 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b68c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b690:	2107      	movs	r1, #7
 800b692:	68f8      	ldr	r0, [r7, #12]
 800b694:	f000 f9c2 	bl	800ba1c <SDMMC_GetCmdResp1>
 800b698:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b69c:	4618      	mov	r0, r3
 800b69e:	3728      	adds	r7, #40	; 0x28
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}

0800b6a4 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b088      	sub	sp, #32
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b6c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6c2:	f107 0308 	add.w	r3, r7, #8
 800b6c6:	4619      	mov	r1, r3
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f7ff fe65 	bl	800b398 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f000 f976 	bl	800b9c0 <SDMMC_GetCmdError>
 800b6d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6d6:	69fb      	ldr	r3, [r7, #28]
}
 800b6d8:	4618      	mov	r0, r3
 800b6da:	3720      	adds	r7, #32
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}

0800b6e0 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b088      	sub	sp, #32
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b6e8:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b6ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b6ee:	2308      	movs	r3, #8
 800b6f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b700:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b702:	f107 0308 	add.w	r3, r7, #8
 800b706:	4619      	mov	r1, r3
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f7ff fe45 	bl	800b398 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f000 fb78 	bl	800be04 <SDMMC_GetCmdResp7>
 800b714:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b716:	69fb      	ldr	r3, [r7, #28]
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3720      	adds	r7, #32
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}

0800b720 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b088      	sub	sp, #32
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b72e:	2337      	movs	r3, #55	; 0x37
 800b730:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b732:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b736:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b738:	2300      	movs	r3, #0
 800b73a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b73c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b740:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b742:	f107 0308 	add.w	r3, r7, #8
 800b746:	4619      	mov	r1, r3
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f7ff fe25 	bl	800b398 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b74e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b752:	2137      	movs	r1, #55	; 0x37
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f000 f961 	bl	800ba1c <SDMMC_GetCmdResp1>
 800b75a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b75c:	69fb      	ldr	r3, [r7, #28]
}
 800b75e:	4618      	mov	r0, r3
 800b760:	3720      	adds	r7, #32
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}

0800b766 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b766:	b580      	push	{r7, lr}
 800b768:	b088      	sub	sp, #32
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	6078      	str	r0, [r7, #4]
 800b76e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b774:	2329      	movs	r3, #41	; 0x29
 800b776:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b778:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b77c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b77e:	2300      	movs	r3, #0
 800b780:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b782:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b786:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b788:	f107 0308 	add.w	r3, r7, #8
 800b78c:	4619      	mov	r1, r3
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f7ff fe02 	bl	800b398 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f000 fa7d 	bl	800bc94 <SDMMC_GetCmdResp3>
 800b79a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b79c:	69fb      	ldr	r3, [r7, #28]
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3720      	adds	r7, #32
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}

0800b7a6 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b7a6:	b580      	push	{r7, lr}
 800b7a8:	b088      	sub	sp, #32
 800b7aa:	af00      	add	r7, sp, #0
 800b7ac:	6078      	str	r0, [r7, #4]
 800b7ae:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b7b4:	2306      	movs	r3, #6
 800b7b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b7c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7c8:	f107 0308 	add.w	r3, r7, #8
 800b7cc:	4619      	mov	r1, r3
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f7ff fde2 	bl	800b398 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b7d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7d8:	2106      	movs	r1, #6
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f000 f91e 	bl	800ba1c <SDMMC_GetCmdResp1>
 800b7e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7e2:	69fb      	ldr	r3, [r7, #28]
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3720      	adds	r7, #32
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}

0800b7ec <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b088      	sub	sp, #32
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b7f8:	2333      	movs	r3, #51	; 0x33
 800b7fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b800:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b802:	2300      	movs	r3, #0
 800b804:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b806:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b80a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b80c:	f107 0308 	add.w	r3, r7, #8
 800b810:	4619      	mov	r1, r3
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f7ff fdc0 	bl	800b398 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b818:	f241 3288 	movw	r2, #5000	; 0x1388
 800b81c:	2133      	movs	r1, #51	; 0x33
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f000 f8fc 	bl	800ba1c <SDMMC_GetCmdResp1>
 800b824:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b826:	69fb      	ldr	r3, [r7, #28]
}
 800b828:	4618      	mov	r0, r3
 800b82a:	3720      	adds	r7, #32
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}

0800b830 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b088      	sub	sp, #32
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b838:	2300      	movs	r3, #0
 800b83a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b83c:	2302      	movs	r3, #2
 800b83e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b840:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b844:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b846:	2300      	movs	r3, #0
 800b848:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b84a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b84e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b850:	f107 0308 	add.w	r3, r7, #8
 800b854:	4619      	mov	r1, r3
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	f7ff fd9e 	bl	800b398 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f000 f9cf 	bl	800bc00 <SDMMC_GetCmdResp2>
 800b862:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b864:	69fb      	ldr	r3, [r7, #28]
}
 800b866:	4618      	mov	r0, r3
 800b868:	3720      	adds	r7, #32
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}

0800b86e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b86e:	b580      	push	{r7, lr}
 800b870:	b088      	sub	sp, #32
 800b872:	af00      	add	r7, sp, #0
 800b874:	6078      	str	r0, [r7, #4]
 800b876:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b87c:	2309      	movs	r3, #9
 800b87e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b880:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b884:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b886:	2300      	movs	r3, #0
 800b888:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b88a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b88e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b890:	f107 0308 	add.w	r3, r7, #8
 800b894:	4619      	mov	r1, r3
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f7ff fd7e 	bl	800b398 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f000 f9af 	bl	800bc00 <SDMMC_GetCmdResp2>
 800b8a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8a4:	69fb      	ldr	r3, [r7, #28]
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3720      	adds	r7, #32
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}

0800b8ae <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b8ae:	b580      	push	{r7, lr}
 800b8b0:	b088      	sub	sp, #32
 800b8b2:	af00      	add	r7, sp, #0
 800b8b4:	6078      	str	r0, [r7, #4]
 800b8b6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b8bc:	2303      	movs	r3, #3
 800b8be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b8c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b8c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b8ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8d0:	f107 0308 	add.w	r3, r7, #8
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f7ff fd5e 	bl	800b398 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b8dc:	683a      	ldr	r2, [r7, #0]
 800b8de:	2103      	movs	r1, #3
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f000 fa17 	bl	800bd14 <SDMMC_GetCmdResp6>
 800b8e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8e8:	69fb      	ldr	r3, [r7, #28]
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	3720      	adds	r7, #32
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}

0800b8f2 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b8f2:	b580      	push	{r7, lr}
 800b8f4:	b088      	sub	sp, #32
 800b8f6:	af00      	add	r7, sp, #0
 800b8f8:	6078      	str	r0, [r7, #4]
 800b8fa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b900:	230d      	movs	r3, #13
 800b902:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b904:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b908:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b90a:	2300      	movs	r3, #0
 800b90c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b90e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b912:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b914:	f107 0308 	add.w	r3, r7, #8
 800b918:	4619      	mov	r1, r3
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f7ff fd3c 	bl	800b398 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b920:	f241 3288 	movw	r2, #5000	; 0x1388
 800b924:	210d      	movs	r1, #13
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f000 f878 	bl	800ba1c <SDMMC_GetCmdResp1>
 800b92c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b92e:	69fb      	ldr	r3, [r7, #28]
}
 800b930:	4618      	mov	r0, r3
 800b932:	3720      	adds	r7, #32
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}

0800b938 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b088      	sub	sp, #32
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b940:	2300      	movs	r3, #0
 800b942:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b944:	230d      	movs	r3, #13
 800b946:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b948:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b94c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b94e:	2300      	movs	r3, #0
 800b950:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b952:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b956:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b958:	f107 0308 	add.w	r3, r7, #8
 800b95c:	4619      	mov	r1, r3
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f7ff fd1a 	bl	800b398 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b964:	f241 3288 	movw	r2, #5000	; 0x1388
 800b968:	210d      	movs	r1, #13
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f000 f856 	bl	800ba1c <SDMMC_GetCmdResp1>
 800b970:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b972:	69fb      	ldr	r3, [r7, #28]
}
 800b974:	4618      	mov	r0, r3
 800b976:	3720      	adds	r7, #32
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}

0800b97c <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b088      	sub	sp, #32
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800b984:	2300      	movs	r3, #0
 800b986:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800b988:	230b      	movs	r3, #11
 800b98a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b98c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b990:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b992:	2300      	movs	r3, #0
 800b994:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b996:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b99a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b99c:	f107 0308 	add.w	r3, r7, #8
 800b9a0:	4619      	mov	r1, r3
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f7ff fcf8 	bl	800b398 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800b9a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9ac:	210b      	movs	r1, #11
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f000 f834 	bl	800ba1c <SDMMC_GetCmdResp1>
 800b9b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9b6:	69fb      	ldr	r3, [r7, #28]
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	3720      	adds	r7, #32
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}

0800b9c0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b085      	sub	sp, #20
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b9c8:	4b11      	ldr	r3, [pc, #68]	; (800ba10 <SDMMC_GetCmdError+0x50>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	4a11      	ldr	r2, [pc, #68]	; (800ba14 <SDMMC_GetCmdError+0x54>)
 800b9ce:	fba2 2303 	umull	r2, r3, r2, r3
 800b9d2:	0a5b      	lsrs	r3, r3, #9
 800b9d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9d8:	fb02 f303 	mul.w	r3, r2, r3
 800b9dc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	1e5a      	subs	r2, r3, #1
 800b9e2:	60fa      	str	r2, [r7, #12]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d102      	bne.n	800b9ee <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b9e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b9ec:	e009      	b.n	800ba02 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d0f1      	beq.n	800b9de <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	4a06      	ldr	r2, [pc, #24]	; (800ba18 <SDMMC_GetCmdError+0x58>)
 800b9fe:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800ba00:	2300      	movs	r3, #0
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3714      	adds	r7, #20
 800ba06:	46bd      	mov	sp, r7
 800ba08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0c:	4770      	bx	lr
 800ba0e:	bf00      	nop
 800ba10:	20000000 	.word	0x20000000
 800ba14:	10624dd3 	.word	0x10624dd3
 800ba18:	002000c5 	.word	0x002000c5

0800ba1c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b088      	sub	sp, #32
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	60f8      	str	r0, [r7, #12]
 800ba24:	460b      	mov	r3, r1
 800ba26:	607a      	str	r2, [r7, #4]
 800ba28:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ba2a:	4b70      	ldr	r3, [pc, #448]	; (800bbec <SDMMC_GetCmdResp1+0x1d0>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	4a70      	ldr	r2, [pc, #448]	; (800bbf0 <SDMMC_GetCmdResp1+0x1d4>)
 800ba30:	fba2 2303 	umull	r2, r3, r2, r3
 800ba34:	0a5a      	lsrs	r2, r3, #9
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	fb02 f303 	mul.w	r3, r2, r3
 800ba3c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ba3e:	69fb      	ldr	r3, [r7, #28]
 800ba40:	1e5a      	subs	r2, r3, #1
 800ba42:	61fa      	str	r2, [r7, #28]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d102      	bne.n	800ba4e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ba48:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ba4c:	e0c9      	b.n	800bbe2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba52:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800ba54:	69ba      	ldr	r2, [r7, #24]
 800ba56:	4b67      	ldr	r3, [pc, #412]	; (800bbf4 <SDMMC_GetCmdResp1+0x1d8>)
 800ba58:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d0ef      	beq.n	800ba3e <SDMMC_GetCmdResp1+0x22>
 800ba5e:	69bb      	ldr	r3, [r7, #24]
 800ba60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d1ea      	bne.n	800ba3e <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba6c:	f003 0304 	and.w	r3, r3, #4
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d004      	beq.n	800ba7e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	2204      	movs	r2, #4
 800ba78:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ba7a:	2304      	movs	r3, #4
 800ba7c:	e0b1      	b.n	800bbe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba82:	f003 0301 	and.w	r3, r3, #1
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d004      	beq.n	800ba94 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	2201      	movs	r2, #1
 800ba8e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba90:	2301      	movs	r3, #1
 800ba92:	e0a6      	b.n	800bbe2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	4a58      	ldr	r2, [pc, #352]	; (800bbf8 <SDMMC_GetCmdResp1+0x1dc>)
 800ba98:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ba9a:	68f8      	ldr	r0, [r7, #12]
 800ba9c:	f7ff fca6 	bl	800b3ec <SDMMC_GetCommandResponse>
 800baa0:	4603      	mov	r3, r0
 800baa2:	461a      	mov	r2, r3
 800baa4:	7afb      	ldrb	r3, [r7, #11]
 800baa6:	4293      	cmp	r3, r2
 800baa8:	d001      	beq.n	800baae <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800baaa:	2301      	movs	r3, #1
 800baac:	e099      	b.n	800bbe2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800baae:	2100      	movs	r1, #0
 800bab0:	68f8      	ldr	r0, [r7, #12]
 800bab2:	f7ff fca8 	bl	800b406 <SDMMC_GetResponse>
 800bab6:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bab8:	697a      	ldr	r2, [r7, #20]
 800baba:	4b50      	ldr	r3, [pc, #320]	; (800bbfc <SDMMC_GetCmdResp1+0x1e0>)
 800babc:	4013      	ands	r3, r2
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d101      	bne.n	800bac6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800bac2:	2300      	movs	r3, #0
 800bac4:	e08d      	b.n	800bbe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bac6:	697b      	ldr	r3, [r7, #20]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	da02      	bge.n	800bad2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bacc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bad0:	e087      	b.n	800bbe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d001      	beq.n	800bae0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800badc:	2340      	movs	r3, #64	; 0x40
 800bade:	e080      	b.n	800bbe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bae0:	697b      	ldr	r3, [r7, #20]
 800bae2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d001      	beq.n	800baee <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800baea:	2380      	movs	r3, #128	; 0x80
 800baec:	e079      	b.n	800bbe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800baee:	697b      	ldr	r3, [r7, #20]
 800baf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d002      	beq.n	800bafe <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800baf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bafc:	e071      	b.n	800bbe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bafe:	697b      	ldr	r3, [r7, #20]
 800bb00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d002      	beq.n	800bb0e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bb08:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb0c:	e069      	b.n	800bbe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d002      	beq.n	800bb1e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bb18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb1c:	e061      	b.n	800bbe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d002      	beq.n	800bb2e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bb28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bb2c:	e059      	b.n	800bbe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bb2e:	697b      	ldr	r3, [r7, #20]
 800bb30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d002      	beq.n	800bb3e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bb38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb3c:	e051      	b.n	800bbe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d002      	beq.n	800bb4e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bb48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bb4c:	e049      	b.n	800bbe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d002      	beq.n	800bb5e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bb58:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bb5c:	e041      	b.n	800bbe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bb5e:	697b      	ldr	r3, [r7, #20]
 800bb60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d002      	beq.n	800bb6e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800bb68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb6c:	e039      	b.n	800bbe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d002      	beq.n	800bb7e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bb78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bb7c:	e031      	b.n	800bbe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d002      	beq.n	800bb8e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bb88:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bb8c:	e029      	b.n	800bbe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d002      	beq.n	800bb9e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bb98:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bb9c:	e021      	b.n	800bbe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bb9e:	697b      	ldr	r3, [r7, #20]
 800bba0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d002      	beq.n	800bbae <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bba8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bbac:	e019      	b.n	800bbe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bbae:	697b      	ldr	r3, [r7, #20]
 800bbb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d002      	beq.n	800bbbe <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bbb8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800bbbc:	e011      	b.n	800bbe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bbbe:	697b      	ldr	r3, [r7, #20]
 800bbc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d002      	beq.n	800bbce <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800bbc8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bbcc:	e009      	b.n	800bbe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800bbce:	697b      	ldr	r3, [r7, #20]
 800bbd0:	f003 0308 	and.w	r3, r3, #8
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d002      	beq.n	800bbde <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800bbd8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800bbdc:	e001      	b.n	800bbe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bbde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3720      	adds	r7, #32
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}
 800bbea:	bf00      	nop
 800bbec:	20000000 	.word	0x20000000
 800bbf0:	10624dd3 	.word	0x10624dd3
 800bbf4:	00200045 	.word	0x00200045
 800bbf8:	002000c5 	.word	0x002000c5
 800bbfc:	fdffe008 	.word	0xfdffe008

0800bc00 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800bc00:	b480      	push	{r7}
 800bc02:	b085      	sub	sp, #20
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bc08:	4b1f      	ldr	r3, [pc, #124]	; (800bc88 <SDMMC_GetCmdResp2+0x88>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	4a1f      	ldr	r2, [pc, #124]	; (800bc8c <SDMMC_GetCmdResp2+0x8c>)
 800bc0e:	fba2 2303 	umull	r2, r3, r2, r3
 800bc12:	0a5b      	lsrs	r3, r3, #9
 800bc14:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc18:	fb02 f303 	mul.w	r3, r2, r3
 800bc1c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	1e5a      	subs	r2, r3, #1
 800bc22:	60fa      	str	r2, [r7, #12]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d102      	bne.n	800bc2e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bc28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bc2c:	e026      	b.n	800bc7c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc32:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d0ef      	beq.n	800bc1e <SDMMC_GetCmdResp2+0x1e>
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d1ea      	bne.n	800bc1e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc4c:	f003 0304 	and.w	r3, r3, #4
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d004      	beq.n	800bc5e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2204      	movs	r2, #4
 800bc58:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bc5a:	2304      	movs	r3, #4
 800bc5c:	e00e      	b.n	800bc7c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc62:	f003 0301 	and.w	r3, r3, #1
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d004      	beq.n	800bc74 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bc70:	2301      	movs	r3, #1
 800bc72:	e003      	b.n	800bc7c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	4a06      	ldr	r2, [pc, #24]	; (800bc90 <SDMMC_GetCmdResp2+0x90>)
 800bc78:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bc7a:	2300      	movs	r3, #0
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	3714      	adds	r7, #20
 800bc80:	46bd      	mov	sp, r7
 800bc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc86:	4770      	bx	lr
 800bc88:	20000000 	.word	0x20000000
 800bc8c:	10624dd3 	.word	0x10624dd3
 800bc90:	002000c5 	.word	0x002000c5

0800bc94 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800bc94:	b480      	push	{r7}
 800bc96:	b085      	sub	sp, #20
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bc9c:	4b1a      	ldr	r3, [pc, #104]	; (800bd08 <SDMMC_GetCmdResp3+0x74>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	4a1a      	ldr	r2, [pc, #104]	; (800bd0c <SDMMC_GetCmdResp3+0x78>)
 800bca2:	fba2 2303 	umull	r2, r3, r2, r3
 800bca6:	0a5b      	lsrs	r3, r3, #9
 800bca8:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcac:	fb02 f303 	mul.w	r3, r2, r3
 800bcb0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	1e5a      	subs	r2, r3, #1
 800bcb6:	60fa      	str	r2, [r7, #12]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d102      	bne.n	800bcc2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bcbc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bcc0:	e01b      	b.n	800bcfa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcc6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d0ef      	beq.n	800bcb2 <SDMMC_GetCmdResp3+0x1e>
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d1ea      	bne.n	800bcb2 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bce0:	f003 0304 	and.w	r3, r3, #4
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d004      	beq.n	800bcf2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2204      	movs	r2, #4
 800bcec:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bcee:	2304      	movs	r3, #4
 800bcf0:	e003      	b.n	800bcfa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	4a06      	ldr	r2, [pc, #24]	; (800bd10 <SDMMC_GetCmdResp3+0x7c>)
 800bcf6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bcf8:	2300      	movs	r3, #0
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3714      	adds	r7, #20
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd04:	4770      	bx	lr
 800bd06:	bf00      	nop
 800bd08:	20000000 	.word	0x20000000
 800bd0c:	10624dd3 	.word	0x10624dd3
 800bd10:	002000c5 	.word	0x002000c5

0800bd14 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b088      	sub	sp, #32
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	60f8      	str	r0, [r7, #12]
 800bd1c:	460b      	mov	r3, r1
 800bd1e:	607a      	str	r2, [r7, #4]
 800bd20:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bd22:	4b35      	ldr	r3, [pc, #212]	; (800bdf8 <SDMMC_GetCmdResp6+0xe4>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	4a35      	ldr	r2, [pc, #212]	; (800bdfc <SDMMC_GetCmdResp6+0xe8>)
 800bd28:	fba2 2303 	umull	r2, r3, r2, r3
 800bd2c:	0a5b      	lsrs	r3, r3, #9
 800bd2e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd32:	fb02 f303 	mul.w	r3, r2, r3
 800bd36:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800bd38:	69fb      	ldr	r3, [r7, #28]
 800bd3a:	1e5a      	subs	r2, r3, #1
 800bd3c:	61fa      	str	r2, [r7, #28]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d102      	bne.n	800bd48 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bd42:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bd46:	e052      	b.n	800bdee <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd4c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd4e:	69bb      	ldr	r3, [r7, #24]
 800bd50:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d0ef      	beq.n	800bd38 <SDMMC_GetCmdResp6+0x24>
 800bd58:	69bb      	ldr	r3, [r7, #24]
 800bd5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d1ea      	bne.n	800bd38 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd66:	f003 0304 	and.w	r3, r3, #4
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d004      	beq.n	800bd78 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	2204      	movs	r2, #4
 800bd72:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bd74:	2304      	movs	r3, #4
 800bd76:	e03a      	b.n	800bdee <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd7c:	f003 0301 	and.w	r3, r3, #1
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d004      	beq.n	800bd8e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	2201      	movs	r2, #1
 800bd88:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	e02f      	b.n	800bdee <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bd8e:	68f8      	ldr	r0, [r7, #12]
 800bd90:	f7ff fb2c 	bl	800b3ec <SDMMC_GetCommandResponse>
 800bd94:	4603      	mov	r3, r0
 800bd96:	461a      	mov	r2, r3
 800bd98:	7afb      	ldrb	r3, [r7, #11]
 800bd9a:	4293      	cmp	r3, r2
 800bd9c:	d001      	beq.n	800bda2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd9e:	2301      	movs	r3, #1
 800bda0:	e025      	b.n	800bdee <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	4a16      	ldr	r2, [pc, #88]	; (800be00 <SDMMC_GetCmdResp6+0xec>)
 800bda6:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bda8:	2100      	movs	r1, #0
 800bdaa:	68f8      	ldr	r0, [r7, #12]
 800bdac:	f7ff fb2b 	bl	800b406 <SDMMC_GetResponse>
 800bdb0:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800bdb2:	697b      	ldr	r3, [r7, #20]
 800bdb4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d106      	bne.n	800bdca <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800bdbc:	697b      	ldr	r3, [r7, #20]
 800bdbe:	0c1b      	lsrs	r3, r3, #16
 800bdc0:	b29a      	uxth	r2, r3
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	e011      	b.n	800bdee <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d002      	beq.n	800bdda <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bdd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bdd8:	e009      	b.n	800bdee <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bdda:	697b      	ldr	r3, [r7, #20]
 800bddc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d002      	beq.n	800bdea <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bde4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bde8:	e001      	b.n	800bdee <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bdea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3720      	adds	r7, #32
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}
 800bdf6:	bf00      	nop
 800bdf8:	20000000 	.word	0x20000000
 800bdfc:	10624dd3 	.word	0x10624dd3
 800be00:	002000c5 	.word	0x002000c5

0800be04 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800be04:	b480      	push	{r7}
 800be06:	b085      	sub	sp, #20
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800be0c:	4b22      	ldr	r3, [pc, #136]	; (800be98 <SDMMC_GetCmdResp7+0x94>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	4a22      	ldr	r2, [pc, #136]	; (800be9c <SDMMC_GetCmdResp7+0x98>)
 800be12:	fba2 2303 	umull	r2, r3, r2, r3
 800be16:	0a5b      	lsrs	r3, r3, #9
 800be18:	f241 3288 	movw	r2, #5000	; 0x1388
 800be1c:	fb02 f303 	mul.w	r3, r2, r3
 800be20:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	1e5a      	subs	r2, r3, #1
 800be26:	60fa      	str	r2, [r7, #12]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d102      	bne.n	800be32 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800be2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800be30:	e02c      	b.n	800be8c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be36:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d0ef      	beq.n	800be22 <SDMMC_GetCmdResp7+0x1e>
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d1ea      	bne.n	800be22 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be50:	f003 0304 	and.w	r3, r3, #4
 800be54:	2b00      	cmp	r3, #0
 800be56:	d004      	beq.n	800be62 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2204      	movs	r2, #4
 800be5c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800be5e:	2304      	movs	r3, #4
 800be60:	e014      	b.n	800be8c <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be66:	f003 0301 	and.w	r3, r3, #1
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d004      	beq.n	800be78 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2201      	movs	r2, #1
 800be72:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800be74:	2301      	movs	r3, #1
 800be76:	e009      	b.n	800be8c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be80:	2b00      	cmp	r3, #0
 800be82:	d002      	beq.n	800be8a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2240      	movs	r2, #64	; 0x40
 800be88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800be8a:	2300      	movs	r3, #0

}
 800be8c:	4618      	mov	r0, r3
 800be8e:	3714      	adds	r7, #20
 800be90:	46bd      	mov	sp, r7
 800be92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be96:	4770      	bx	lr
 800be98:	20000000 	.word	0x20000000
 800be9c:	10624dd3 	.word	0x10624dd3

0800bea0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800bea4:	4904      	ldr	r1, [pc, #16]	; (800beb8 <MX_FATFS_Init+0x18>)
 800bea6:	4805      	ldr	r0, [pc, #20]	; (800bebc <MX_FATFS_Init+0x1c>)
 800bea8:	f003 fa06 	bl	800f2b8 <FATFS_LinkDriver>
 800beac:	4603      	mov	r3, r0
 800beae:	461a      	mov	r2, r3
 800beb0:	4b03      	ldr	r3, [pc, #12]	; (800bec0 <MX_FATFS_Init+0x20>)
 800beb2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800beb4:	bf00      	nop
 800beb6:	bd80      	pop	{r7, pc}
 800beb8:	2000130c 	.word	0x2000130c
 800bebc:	0801169c 	.word	0x0801169c
 800bec0:	20001308 	.word	0x20001308

0800bec4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800bec4:	b480      	push	{r7}
 800bec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800bec8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800beca:	4618      	mov	r0, r3
 800becc:	46bd      	mov	sp, r7
 800bece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed2:	4770      	bx	lr

0800bed4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b082      	sub	sp, #8
 800bed8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800beda:	2300      	movs	r3, #0
 800bedc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800bede:	f000 f86b 	bl	800bfb8 <BSP_SD_IsDetected>
 800bee2:	4603      	mov	r3, r0
 800bee4:	2b01      	cmp	r3, #1
 800bee6:	d001      	beq.n	800beec <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800bee8:	2302      	movs	r3, #2
 800beea:	e005      	b.n	800bef8 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800beec:	4804      	ldr	r0, [pc, #16]	; (800bf00 <BSP_SD_Init+0x2c>)
 800beee:	f7fa ffbd 	bl	8006e6c <HAL_SD_Init>
 800bef2:	4603      	mov	r3, r0
 800bef4:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800bef6:	79fb      	ldrb	r3, [r7, #7]
}
 800bef8:	4618      	mov	r0, r3
 800befa:	3708      	adds	r7, #8
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}
 800bf00:	2000020c 	.word	0x2000020c

0800bf04 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b088      	sub	sp, #32
 800bf08:	af02      	add	r7, sp, #8
 800bf0a:	60f8      	str	r0, [r7, #12]
 800bf0c:	60b9      	str	r1, [r7, #8]
 800bf0e:	607a      	str	r2, [r7, #4]
 800bf10:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800bf12:	2300      	movs	r3, #0
 800bf14:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	9300      	str	r3, [sp, #0]
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	68ba      	ldr	r2, [r7, #8]
 800bf1e:	68f9      	ldr	r1, [r7, #12]
 800bf20:	4806      	ldr	r0, [pc, #24]	; (800bf3c <BSP_SD_ReadBlocks+0x38>)
 800bf22:	f7fb f8c7 	bl	80070b4 <HAL_SD_ReadBlocks>
 800bf26:	4603      	mov	r3, r0
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d001      	beq.n	800bf30 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bf30:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	3718      	adds	r7, #24
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}
 800bf3a:	bf00      	nop
 800bf3c:	2000020c 	.word	0x2000020c

0800bf40 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b088      	sub	sp, #32
 800bf44:	af02      	add	r7, sp, #8
 800bf46:	60f8      	str	r0, [r7, #12]
 800bf48:	60b9      	str	r1, [r7, #8]
 800bf4a:	607a      	str	r2, [r7, #4]
 800bf4c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	9300      	str	r3, [sp, #0]
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	68ba      	ldr	r2, [r7, #8]
 800bf5a:	68f9      	ldr	r1, [r7, #12]
 800bf5c:	4806      	ldr	r0, [pc, #24]	; (800bf78 <BSP_SD_WriteBlocks+0x38>)
 800bf5e:	f7fb fa33 	bl	80073c8 <HAL_SD_WriteBlocks>
 800bf62:	4603      	mov	r3, r0
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d001      	beq.n	800bf6c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800bf68:	2301      	movs	r3, #1
 800bf6a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bf6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf6e:	4618      	mov	r0, r3
 800bf70:	3718      	adds	r7, #24
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}
 800bf76:	bf00      	nop
 800bf78:	2000020c 	.word	0x2000020c

0800bf7c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800bf80:	4805      	ldr	r0, [pc, #20]	; (800bf98 <BSP_SD_GetCardState+0x1c>)
 800bf82:	f7fb feeb 	bl	8007d5c <HAL_SD_GetCardState>
 800bf86:	4603      	mov	r3, r0
 800bf88:	2b04      	cmp	r3, #4
 800bf8a:	bf14      	ite	ne
 800bf8c:	2301      	movne	r3, #1
 800bf8e:	2300      	moveq	r3, #0
 800bf90:	b2db      	uxtb	r3, r3
}
 800bf92:	4618      	mov	r0, r3
 800bf94:	bd80      	pop	{r7, pc}
 800bf96:	bf00      	nop
 800bf98:	2000020c 	.word	0x2000020c

0800bf9c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b082      	sub	sp, #8
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800bfa4:	6879      	ldr	r1, [r7, #4]
 800bfa6:	4803      	ldr	r0, [pc, #12]	; (800bfb4 <BSP_SD_GetCardInfo+0x18>)
 800bfa8:	f7fb fe02 	bl	8007bb0 <HAL_SD_GetCardInfo>
}
 800bfac:	bf00      	nop
 800bfae:	3708      	adds	r7, #8
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}
 800bfb4:	2000020c 	.word	0x2000020c

0800bfb8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800bfb8:	b480      	push	{r7}
 800bfba:	b083      	sub	sp, #12
 800bfbc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 800bfc2:	79fb      	ldrb	r3, [r7, #7]
 800bfc4:	b2db      	uxtb	r3, r3
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	370c      	adds	r7, #12
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd0:	4770      	bx	lr
	...

0800bfd4 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b082      	sub	sp, #8
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	4603      	mov	r3, r0
 800bfdc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800bfde:	4b0b      	ldr	r3, [pc, #44]	; (800c00c <SD_CheckStatus+0x38>)
 800bfe0:	2201      	movs	r2, #1
 800bfe2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800bfe4:	f7ff ffca 	bl	800bf7c <BSP_SD_GetCardState>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d107      	bne.n	800bffe <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800bfee:	4b07      	ldr	r3, [pc, #28]	; (800c00c <SD_CheckStatus+0x38>)
 800bff0:	781b      	ldrb	r3, [r3, #0]
 800bff2:	b2db      	uxtb	r3, r3
 800bff4:	f023 0301 	bic.w	r3, r3, #1
 800bff8:	b2da      	uxtb	r2, r3
 800bffa:	4b04      	ldr	r3, [pc, #16]	; (800c00c <SD_CheckStatus+0x38>)
 800bffc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800bffe:	4b03      	ldr	r3, [pc, #12]	; (800c00c <SD_CheckStatus+0x38>)
 800c000:	781b      	ldrb	r3, [r3, #0]
 800c002:	b2db      	uxtb	r3, r3
}
 800c004:	4618      	mov	r0, r3
 800c006:	3708      	adds	r7, #8
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}
 800c00c:	20000075 	.word	0x20000075

0800c010 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b082      	sub	sp, #8
 800c014:	af00      	add	r7, sp, #0
 800c016:	4603      	mov	r3, r0
 800c018:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800c01a:	4b0b      	ldr	r3, [pc, #44]	; (800c048 <SD_initialize+0x38>)
 800c01c:	2201      	movs	r2, #1
 800c01e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800c020:	f7ff ff58 	bl	800bed4 <BSP_SD_Init>
 800c024:	4603      	mov	r3, r0
 800c026:	2b00      	cmp	r3, #0
 800c028:	d107      	bne.n	800c03a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800c02a:	79fb      	ldrb	r3, [r7, #7]
 800c02c:	4618      	mov	r0, r3
 800c02e:	f7ff ffd1 	bl	800bfd4 <SD_CheckStatus>
 800c032:	4603      	mov	r3, r0
 800c034:	461a      	mov	r2, r3
 800c036:	4b04      	ldr	r3, [pc, #16]	; (800c048 <SD_initialize+0x38>)
 800c038:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800c03a:	4b03      	ldr	r3, [pc, #12]	; (800c048 <SD_initialize+0x38>)
 800c03c:	781b      	ldrb	r3, [r3, #0]
 800c03e:	b2db      	uxtb	r3, r3
}
 800c040:	4618      	mov	r0, r3
 800c042:	3708      	adds	r7, #8
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}
 800c048:	20000075 	.word	0x20000075

0800c04c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b082      	sub	sp, #8
 800c050:	af00      	add	r7, sp, #0
 800c052:	4603      	mov	r3, r0
 800c054:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c056:	79fb      	ldrb	r3, [r7, #7]
 800c058:	4618      	mov	r0, r3
 800c05a:	f7ff ffbb 	bl	800bfd4 <SD_CheckStatus>
 800c05e:	4603      	mov	r3, r0
}
 800c060:	4618      	mov	r0, r3
 800c062:	3708      	adds	r7, #8
 800c064:	46bd      	mov	sp, r7
 800c066:	bd80      	pop	{r7, pc}

0800c068 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b086      	sub	sp, #24
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	60b9      	str	r1, [r7, #8]
 800c070:	607a      	str	r2, [r7, #4]
 800c072:	603b      	str	r3, [r7, #0]
 800c074:	4603      	mov	r3, r0
 800c076:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c078:	2301      	movs	r3, #1
 800c07a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800c07c:	f04f 33ff 	mov.w	r3, #4294967295
 800c080:	683a      	ldr	r2, [r7, #0]
 800c082:	6879      	ldr	r1, [r7, #4]
 800c084:	68b8      	ldr	r0, [r7, #8]
 800c086:	f7ff ff3d 	bl	800bf04 <BSP_SD_ReadBlocks>
 800c08a:	4603      	mov	r3, r0
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d107      	bne.n	800c0a0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800c090:	bf00      	nop
 800c092:	f7ff ff73 	bl	800bf7c <BSP_SD_GetCardState>
 800c096:	4603      	mov	r3, r0
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d1fa      	bne.n	800c092 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800c09c:	2300      	movs	r3, #0
 800c09e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800c0a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	3718      	adds	r7, #24
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd80      	pop	{r7, pc}

0800c0aa <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c0aa:	b580      	push	{r7, lr}
 800c0ac:	b086      	sub	sp, #24
 800c0ae:	af00      	add	r7, sp, #0
 800c0b0:	60b9      	str	r1, [r7, #8]
 800c0b2:	607a      	str	r2, [r7, #4]
 800c0b4:	603b      	str	r3, [r7, #0]
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800c0be:	f04f 33ff 	mov.w	r3, #4294967295
 800c0c2:	683a      	ldr	r2, [r7, #0]
 800c0c4:	6879      	ldr	r1, [r7, #4]
 800c0c6:	68b8      	ldr	r0, [r7, #8]
 800c0c8:	f7ff ff3a 	bl	800bf40 <BSP_SD_WriteBlocks>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d107      	bne.n	800c0e2 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800c0d2:	bf00      	nop
 800c0d4:	f7ff ff52 	bl	800bf7c <BSP_SD_GetCardState>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d1fa      	bne.n	800c0d4 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800c0e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	3718      	adds	r7, #24
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}

0800c0ec <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b08c      	sub	sp, #48	; 0x30
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	603a      	str	r2, [r7, #0]
 800c0f6:	71fb      	strb	r3, [r7, #7]
 800c0f8:	460b      	mov	r3, r1
 800c0fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c102:	4b25      	ldr	r3, [pc, #148]	; (800c198 <SD_ioctl+0xac>)
 800c104:	781b      	ldrb	r3, [r3, #0]
 800c106:	b2db      	uxtb	r3, r3
 800c108:	f003 0301 	and.w	r3, r3, #1
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d001      	beq.n	800c114 <SD_ioctl+0x28>
 800c110:	2303      	movs	r3, #3
 800c112:	e03c      	b.n	800c18e <SD_ioctl+0xa2>

  switch (cmd)
 800c114:	79bb      	ldrb	r3, [r7, #6]
 800c116:	2b03      	cmp	r3, #3
 800c118:	d834      	bhi.n	800c184 <SD_ioctl+0x98>
 800c11a:	a201      	add	r2, pc, #4	; (adr r2, 800c120 <SD_ioctl+0x34>)
 800c11c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c120:	0800c131 	.word	0x0800c131
 800c124:	0800c139 	.word	0x0800c139
 800c128:	0800c151 	.word	0x0800c151
 800c12c:	0800c16b 	.word	0x0800c16b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c130:	2300      	movs	r3, #0
 800c132:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c136:	e028      	b.n	800c18a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c138:	f107 0308 	add.w	r3, r7, #8
 800c13c:	4618      	mov	r0, r3
 800c13e:	f7ff ff2d 	bl	800bf9c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c142:	6a3a      	ldr	r2, [r7, #32]
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c148:	2300      	movs	r3, #0
 800c14a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c14e:	e01c      	b.n	800c18a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c150:	f107 0308 	add.w	r3, r7, #8
 800c154:	4618      	mov	r0, r3
 800c156:	f7ff ff21 	bl	800bf9c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c15c:	b29a      	uxth	r2, r3
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c162:	2300      	movs	r3, #0
 800c164:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c168:	e00f      	b.n	800c18a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c16a:	f107 0308 	add.w	r3, r7, #8
 800c16e:	4618      	mov	r0, r3
 800c170:	f7ff ff14 	bl	800bf9c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c176:	0a5a      	lsrs	r2, r3, #9
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c17c:	2300      	movs	r3, #0
 800c17e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c182:	e002      	b.n	800c18a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c184:	2304      	movs	r3, #4
 800c186:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c18a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c18e:	4618      	mov	r0, r3
 800c190:	3730      	adds	r7, #48	; 0x30
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}
 800c196:	bf00      	nop
 800c198:	20000075 	.word	0x20000075

0800c19c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b084      	sub	sp, #16
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c1a6:	79fb      	ldrb	r3, [r7, #7]
 800c1a8:	4a08      	ldr	r2, [pc, #32]	; (800c1cc <disk_status+0x30>)
 800c1aa:	009b      	lsls	r3, r3, #2
 800c1ac:	4413      	add	r3, r2
 800c1ae:	685b      	ldr	r3, [r3, #4]
 800c1b0:	685b      	ldr	r3, [r3, #4]
 800c1b2:	79fa      	ldrb	r2, [r7, #7]
 800c1b4:	4905      	ldr	r1, [pc, #20]	; (800c1cc <disk_status+0x30>)
 800c1b6:	440a      	add	r2, r1
 800c1b8:	7a12      	ldrb	r2, [r2, #8]
 800c1ba:	4610      	mov	r0, r2
 800c1bc:	4798      	blx	r3
 800c1be:	4603      	mov	r3, r0
 800c1c0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c1c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	3710      	adds	r7, #16
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bd80      	pop	{r7, pc}
 800c1cc:	20000168 	.word	0x20000168

0800c1d0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b084      	sub	sp, #16
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c1de:	79fb      	ldrb	r3, [r7, #7]
 800c1e0:	4a0d      	ldr	r2, [pc, #52]	; (800c218 <disk_initialize+0x48>)
 800c1e2:	5cd3      	ldrb	r3, [r2, r3]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d111      	bne.n	800c20c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c1e8:	79fb      	ldrb	r3, [r7, #7]
 800c1ea:	4a0b      	ldr	r2, [pc, #44]	; (800c218 <disk_initialize+0x48>)
 800c1ec:	2101      	movs	r1, #1
 800c1ee:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c1f0:	79fb      	ldrb	r3, [r7, #7]
 800c1f2:	4a09      	ldr	r2, [pc, #36]	; (800c218 <disk_initialize+0x48>)
 800c1f4:	009b      	lsls	r3, r3, #2
 800c1f6:	4413      	add	r3, r2
 800c1f8:	685b      	ldr	r3, [r3, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	79fa      	ldrb	r2, [r7, #7]
 800c1fe:	4906      	ldr	r1, [pc, #24]	; (800c218 <disk_initialize+0x48>)
 800c200:	440a      	add	r2, r1
 800c202:	7a12      	ldrb	r2, [r2, #8]
 800c204:	4610      	mov	r0, r2
 800c206:	4798      	blx	r3
 800c208:	4603      	mov	r3, r0
 800c20a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c20c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c20e:	4618      	mov	r0, r3
 800c210:	3710      	adds	r7, #16
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}
 800c216:	bf00      	nop
 800c218:	20000168 	.word	0x20000168

0800c21c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c21c:	b590      	push	{r4, r7, lr}
 800c21e:	b087      	sub	sp, #28
 800c220:	af00      	add	r7, sp, #0
 800c222:	60b9      	str	r1, [r7, #8]
 800c224:	607a      	str	r2, [r7, #4]
 800c226:	603b      	str	r3, [r7, #0]
 800c228:	4603      	mov	r3, r0
 800c22a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c22c:	7bfb      	ldrb	r3, [r7, #15]
 800c22e:	4a0a      	ldr	r2, [pc, #40]	; (800c258 <disk_read+0x3c>)
 800c230:	009b      	lsls	r3, r3, #2
 800c232:	4413      	add	r3, r2
 800c234:	685b      	ldr	r3, [r3, #4]
 800c236:	689c      	ldr	r4, [r3, #8]
 800c238:	7bfb      	ldrb	r3, [r7, #15]
 800c23a:	4a07      	ldr	r2, [pc, #28]	; (800c258 <disk_read+0x3c>)
 800c23c:	4413      	add	r3, r2
 800c23e:	7a18      	ldrb	r0, [r3, #8]
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	687a      	ldr	r2, [r7, #4]
 800c244:	68b9      	ldr	r1, [r7, #8]
 800c246:	47a0      	blx	r4
 800c248:	4603      	mov	r3, r0
 800c24a:	75fb      	strb	r3, [r7, #23]
  return res;
 800c24c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c24e:	4618      	mov	r0, r3
 800c250:	371c      	adds	r7, #28
 800c252:	46bd      	mov	sp, r7
 800c254:	bd90      	pop	{r4, r7, pc}
 800c256:	bf00      	nop
 800c258:	20000168 	.word	0x20000168

0800c25c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c25c:	b590      	push	{r4, r7, lr}
 800c25e:	b087      	sub	sp, #28
 800c260:	af00      	add	r7, sp, #0
 800c262:	60b9      	str	r1, [r7, #8]
 800c264:	607a      	str	r2, [r7, #4]
 800c266:	603b      	str	r3, [r7, #0]
 800c268:	4603      	mov	r3, r0
 800c26a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c26c:	7bfb      	ldrb	r3, [r7, #15]
 800c26e:	4a0a      	ldr	r2, [pc, #40]	; (800c298 <disk_write+0x3c>)
 800c270:	009b      	lsls	r3, r3, #2
 800c272:	4413      	add	r3, r2
 800c274:	685b      	ldr	r3, [r3, #4]
 800c276:	68dc      	ldr	r4, [r3, #12]
 800c278:	7bfb      	ldrb	r3, [r7, #15]
 800c27a:	4a07      	ldr	r2, [pc, #28]	; (800c298 <disk_write+0x3c>)
 800c27c:	4413      	add	r3, r2
 800c27e:	7a18      	ldrb	r0, [r3, #8]
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	687a      	ldr	r2, [r7, #4]
 800c284:	68b9      	ldr	r1, [r7, #8]
 800c286:	47a0      	blx	r4
 800c288:	4603      	mov	r3, r0
 800c28a:	75fb      	strb	r3, [r7, #23]
  return res;
 800c28c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c28e:	4618      	mov	r0, r3
 800c290:	371c      	adds	r7, #28
 800c292:	46bd      	mov	sp, r7
 800c294:	bd90      	pop	{r4, r7, pc}
 800c296:	bf00      	nop
 800c298:	20000168 	.word	0x20000168

0800c29c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b084      	sub	sp, #16
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	603a      	str	r2, [r7, #0]
 800c2a6:	71fb      	strb	r3, [r7, #7]
 800c2a8:	460b      	mov	r3, r1
 800c2aa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c2ac:	79fb      	ldrb	r3, [r7, #7]
 800c2ae:	4a09      	ldr	r2, [pc, #36]	; (800c2d4 <disk_ioctl+0x38>)
 800c2b0:	009b      	lsls	r3, r3, #2
 800c2b2:	4413      	add	r3, r2
 800c2b4:	685b      	ldr	r3, [r3, #4]
 800c2b6:	691b      	ldr	r3, [r3, #16]
 800c2b8:	79fa      	ldrb	r2, [r7, #7]
 800c2ba:	4906      	ldr	r1, [pc, #24]	; (800c2d4 <disk_ioctl+0x38>)
 800c2bc:	440a      	add	r2, r1
 800c2be:	7a10      	ldrb	r0, [r2, #8]
 800c2c0:	79b9      	ldrb	r1, [r7, #6]
 800c2c2:	683a      	ldr	r2, [r7, #0]
 800c2c4:	4798      	blx	r3
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	73fb      	strb	r3, [r7, #15]
  return res;
 800c2ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	3710      	adds	r7, #16
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	bd80      	pop	{r7, pc}
 800c2d4:	20000168 	.word	0x20000168

0800c2d8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c2d8:	b480      	push	{r7}
 800c2da:	b085      	sub	sp, #20
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	3301      	adds	r3, #1
 800c2e4:	781b      	ldrb	r3, [r3, #0]
 800c2e6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c2e8:	89fb      	ldrh	r3, [r7, #14]
 800c2ea:	021b      	lsls	r3, r3, #8
 800c2ec:	b21a      	sxth	r2, r3
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	781b      	ldrb	r3, [r3, #0]
 800c2f2:	b21b      	sxth	r3, r3
 800c2f4:	4313      	orrs	r3, r2
 800c2f6:	b21b      	sxth	r3, r3
 800c2f8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c2fa:	89fb      	ldrh	r3, [r7, #14]
}
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	3714      	adds	r7, #20
 800c300:	46bd      	mov	sp, r7
 800c302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c306:	4770      	bx	lr

0800c308 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c308:	b480      	push	{r7}
 800c30a:	b085      	sub	sp, #20
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	3303      	adds	r3, #3
 800c314:	781b      	ldrb	r3, [r3, #0]
 800c316:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	021b      	lsls	r3, r3, #8
 800c31c:	687a      	ldr	r2, [r7, #4]
 800c31e:	3202      	adds	r2, #2
 800c320:	7812      	ldrb	r2, [r2, #0]
 800c322:	4313      	orrs	r3, r2
 800c324:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	021b      	lsls	r3, r3, #8
 800c32a:	687a      	ldr	r2, [r7, #4]
 800c32c:	3201      	adds	r2, #1
 800c32e:	7812      	ldrb	r2, [r2, #0]
 800c330:	4313      	orrs	r3, r2
 800c332:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	021b      	lsls	r3, r3, #8
 800c338:	687a      	ldr	r2, [r7, #4]
 800c33a:	7812      	ldrb	r2, [r2, #0]
 800c33c:	4313      	orrs	r3, r2
 800c33e:	60fb      	str	r3, [r7, #12]
	return rv;
 800c340:	68fb      	ldr	r3, [r7, #12]
}
 800c342:	4618      	mov	r0, r3
 800c344:	3714      	adds	r7, #20
 800c346:	46bd      	mov	sp, r7
 800c348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34c:	4770      	bx	lr

0800c34e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c34e:	b480      	push	{r7}
 800c350:	b083      	sub	sp, #12
 800c352:	af00      	add	r7, sp, #0
 800c354:	6078      	str	r0, [r7, #4]
 800c356:	460b      	mov	r3, r1
 800c358:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	1c5a      	adds	r2, r3, #1
 800c35e:	607a      	str	r2, [r7, #4]
 800c360:	887a      	ldrh	r2, [r7, #2]
 800c362:	b2d2      	uxtb	r2, r2
 800c364:	701a      	strb	r2, [r3, #0]
 800c366:	887b      	ldrh	r3, [r7, #2]
 800c368:	0a1b      	lsrs	r3, r3, #8
 800c36a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	1c5a      	adds	r2, r3, #1
 800c370:	607a      	str	r2, [r7, #4]
 800c372:	887a      	ldrh	r2, [r7, #2]
 800c374:	b2d2      	uxtb	r2, r2
 800c376:	701a      	strb	r2, [r3, #0]
}
 800c378:	bf00      	nop
 800c37a:	370c      	adds	r7, #12
 800c37c:	46bd      	mov	sp, r7
 800c37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c382:	4770      	bx	lr

0800c384 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c384:	b480      	push	{r7}
 800c386:	b083      	sub	sp, #12
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
 800c38c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	1c5a      	adds	r2, r3, #1
 800c392:	607a      	str	r2, [r7, #4]
 800c394:	683a      	ldr	r2, [r7, #0]
 800c396:	b2d2      	uxtb	r2, r2
 800c398:	701a      	strb	r2, [r3, #0]
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	0a1b      	lsrs	r3, r3, #8
 800c39e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	1c5a      	adds	r2, r3, #1
 800c3a4:	607a      	str	r2, [r7, #4]
 800c3a6:	683a      	ldr	r2, [r7, #0]
 800c3a8:	b2d2      	uxtb	r2, r2
 800c3aa:	701a      	strb	r2, [r3, #0]
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	0a1b      	lsrs	r3, r3, #8
 800c3b0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	1c5a      	adds	r2, r3, #1
 800c3b6:	607a      	str	r2, [r7, #4]
 800c3b8:	683a      	ldr	r2, [r7, #0]
 800c3ba:	b2d2      	uxtb	r2, r2
 800c3bc:	701a      	strb	r2, [r3, #0]
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	0a1b      	lsrs	r3, r3, #8
 800c3c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	1c5a      	adds	r2, r3, #1
 800c3c8:	607a      	str	r2, [r7, #4]
 800c3ca:	683a      	ldr	r2, [r7, #0]
 800c3cc:	b2d2      	uxtb	r2, r2
 800c3ce:	701a      	strb	r2, [r3, #0]
}
 800c3d0:	bf00      	nop
 800c3d2:	370c      	adds	r7, #12
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3da:	4770      	bx	lr

0800c3dc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c3dc:	b480      	push	{r7}
 800c3de:	b087      	sub	sp, #28
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	60f8      	str	r0, [r7, #12]
 800c3e4:	60b9      	str	r1, [r7, #8]
 800c3e6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d00d      	beq.n	800c412 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c3f6:	693a      	ldr	r2, [r7, #16]
 800c3f8:	1c53      	adds	r3, r2, #1
 800c3fa:	613b      	str	r3, [r7, #16]
 800c3fc:	697b      	ldr	r3, [r7, #20]
 800c3fe:	1c59      	adds	r1, r3, #1
 800c400:	6179      	str	r1, [r7, #20]
 800c402:	7812      	ldrb	r2, [r2, #0]
 800c404:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	3b01      	subs	r3, #1
 800c40a:	607b      	str	r3, [r7, #4]
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d1f1      	bne.n	800c3f6 <mem_cpy+0x1a>
	}
}
 800c412:	bf00      	nop
 800c414:	371c      	adds	r7, #28
 800c416:	46bd      	mov	sp, r7
 800c418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41c:	4770      	bx	lr

0800c41e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c41e:	b480      	push	{r7}
 800c420:	b087      	sub	sp, #28
 800c422:	af00      	add	r7, sp, #0
 800c424:	60f8      	str	r0, [r7, #12]
 800c426:	60b9      	str	r1, [r7, #8]
 800c428:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c42e:	697b      	ldr	r3, [r7, #20]
 800c430:	1c5a      	adds	r2, r3, #1
 800c432:	617a      	str	r2, [r7, #20]
 800c434:	68ba      	ldr	r2, [r7, #8]
 800c436:	b2d2      	uxtb	r2, r2
 800c438:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	3b01      	subs	r3, #1
 800c43e:	607b      	str	r3, [r7, #4]
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d1f3      	bne.n	800c42e <mem_set+0x10>
}
 800c446:	bf00      	nop
 800c448:	bf00      	nop
 800c44a:	371c      	adds	r7, #28
 800c44c:	46bd      	mov	sp, r7
 800c44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c452:	4770      	bx	lr

0800c454 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c454:	b480      	push	{r7}
 800c456:	b089      	sub	sp, #36	; 0x24
 800c458:	af00      	add	r7, sp, #0
 800c45a:	60f8      	str	r0, [r7, #12]
 800c45c:	60b9      	str	r1, [r7, #8]
 800c45e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	61fb      	str	r3, [r7, #28]
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c468:	2300      	movs	r3, #0
 800c46a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c46c:	69fb      	ldr	r3, [r7, #28]
 800c46e:	1c5a      	adds	r2, r3, #1
 800c470:	61fa      	str	r2, [r7, #28]
 800c472:	781b      	ldrb	r3, [r3, #0]
 800c474:	4619      	mov	r1, r3
 800c476:	69bb      	ldr	r3, [r7, #24]
 800c478:	1c5a      	adds	r2, r3, #1
 800c47a:	61ba      	str	r2, [r7, #24]
 800c47c:	781b      	ldrb	r3, [r3, #0]
 800c47e:	1acb      	subs	r3, r1, r3
 800c480:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	3b01      	subs	r3, #1
 800c486:	607b      	str	r3, [r7, #4]
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d002      	beq.n	800c494 <mem_cmp+0x40>
 800c48e:	697b      	ldr	r3, [r7, #20]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d0eb      	beq.n	800c46c <mem_cmp+0x18>

	return r;
 800c494:	697b      	ldr	r3, [r7, #20]
}
 800c496:	4618      	mov	r0, r3
 800c498:	3724      	adds	r7, #36	; 0x24
 800c49a:	46bd      	mov	sp, r7
 800c49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a0:	4770      	bx	lr

0800c4a2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c4a2:	b480      	push	{r7}
 800c4a4:	b083      	sub	sp, #12
 800c4a6:	af00      	add	r7, sp, #0
 800c4a8:	6078      	str	r0, [r7, #4]
 800c4aa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c4ac:	e002      	b.n	800c4b4 <chk_chr+0x12>
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	3301      	adds	r3, #1
 800c4b2:	607b      	str	r3, [r7, #4]
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	781b      	ldrb	r3, [r3, #0]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d005      	beq.n	800c4c8 <chk_chr+0x26>
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	781b      	ldrb	r3, [r3, #0]
 800c4c0:	461a      	mov	r2, r3
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	4293      	cmp	r3, r2
 800c4c6:	d1f2      	bne.n	800c4ae <chk_chr+0xc>
	return *str;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	781b      	ldrb	r3, [r3, #0]
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	370c      	adds	r7, #12
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d6:	4770      	bx	lr

0800c4d8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c4d8:	b480      	push	{r7}
 800c4da:	b085      	sub	sp, #20
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
 800c4e0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	60bb      	str	r3, [r7, #8]
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	60fb      	str	r3, [r7, #12]
 800c4ea:	e029      	b.n	800c540 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c4ec:	4a27      	ldr	r2, [pc, #156]	; (800c58c <chk_lock+0xb4>)
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	011b      	lsls	r3, r3, #4
 800c4f2:	4413      	add	r3, r2
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d01d      	beq.n	800c536 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c4fa:	4a24      	ldr	r2, [pc, #144]	; (800c58c <chk_lock+0xb4>)
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	011b      	lsls	r3, r3, #4
 800c500:	4413      	add	r3, r2
 800c502:	681a      	ldr	r2, [r3, #0]
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	429a      	cmp	r2, r3
 800c50a:	d116      	bne.n	800c53a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c50c:	4a1f      	ldr	r2, [pc, #124]	; (800c58c <chk_lock+0xb4>)
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	011b      	lsls	r3, r3, #4
 800c512:	4413      	add	r3, r2
 800c514:	3304      	adds	r3, #4
 800c516:	681a      	ldr	r2, [r3, #0]
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c51c:	429a      	cmp	r2, r3
 800c51e:	d10c      	bne.n	800c53a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c520:	4a1a      	ldr	r2, [pc, #104]	; (800c58c <chk_lock+0xb4>)
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	011b      	lsls	r3, r3, #4
 800c526:	4413      	add	r3, r2
 800c528:	3308      	adds	r3, #8
 800c52a:	681a      	ldr	r2, [r3, #0]
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c530:	429a      	cmp	r2, r3
 800c532:	d102      	bne.n	800c53a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c534:	e007      	b.n	800c546 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c536:	2301      	movs	r3, #1
 800c538:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	3301      	adds	r3, #1
 800c53e:	60fb      	str	r3, [r7, #12]
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	2b01      	cmp	r3, #1
 800c544:	d9d2      	bls.n	800c4ec <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	2b02      	cmp	r3, #2
 800c54a:	d109      	bne.n	800c560 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d102      	bne.n	800c558 <chk_lock+0x80>
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	2b02      	cmp	r3, #2
 800c556:	d101      	bne.n	800c55c <chk_lock+0x84>
 800c558:	2300      	movs	r3, #0
 800c55a:	e010      	b.n	800c57e <chk_lock+0xa6>
 800c55c:	2312      	movs	r3, #18
 800c55e:	e00e      	b.n	800c57e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d108      	bne.n	800c578 <chk_lock+0xa0>
 800c566:	4a09      	ldr	r2, [pc, #36]	; (800c58c <chk_lock+0xb4>)
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	011b      	lsls	r3, r3, #4
 800c56c:	4413      	add	r3, r2
 800c56e:	330c      	adds	r3, #12
 800c570:	881b      	ldrh	r3, [r3, #0]
 800c572:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c576:	d101      	bne.n	800c57c <chk_lock+0xa4>
 800c578:	2310      	movs	r3, #16
 800c57a:	e000      	b.n	800c57e <chk_lock+0xa6>
 800c57c:	2300      	movs	r3, #0
}
 800c57e:	4618      	mov	r0, r3
 800c580:	3714      	adds	r7, #20
 800c582:	46bd      	mov	sp, r7
 800c584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c588:	4770      	bx	lr
 800c58a:	bf00      	nop
 800c58c:	20000148 	.word	0x20000148

0800c590 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c590:	b480      	push	{r7}
 800c592:	b083      	sub	sp, #12
 800c594:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c596:	2300      	movs	r3, #0
 800c598:	607b      	str	r3, [r7, #4]
 800c59a:	e002      	b.n	800c5a2 <enq_lock+0x12>
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	3301      	adds	r3, #1
 800c5a0:	607b      	str	r3, [r7, #4]
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2b01      	cmp	r3, #1
 800c5a6:	d806      	bhi.n	800c5b6 <enq_lock+0x26>
 800c5a8:	4a09      	ldr	r2, [pc, #36]	; (800c5d0 <enq_lock+0x40>)
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	011b      	lsls	r3, r3, #4
 800c5ae:	4413      	add	r3, r2
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d1f2      	bne.n	800c59c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2b02      	cmp	r3, #2
 800c5ba:	bf14      	ite	ne
 800c5bc:	2301      	movne	r3, #1
 800c5be:	2300      	moveq	r3, #0
 800c5c0:	b2db      	uxtb	r3, r3
}
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	370c      	adds	r7, #12
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5cc:	4770      	bx	lr
 800c5ce:	bf00      	nop
 800c5d0:	20000148 	.word	0x20000148

0800c5d4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c5d4:	b480      	push	{r7}
 800c5d6:	b085      	sub	sp, #20
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
 800c5dc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c5de:	2300      	movs	r3, #0
 800c5e0:	60fb      	str	r3, [r7, #12]
 800c5e2:	e01f      	b.n	800c624 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c5e4:	4a41      	ldr	r2, [pc, #260]	; (800c6ec <inc_lock+0x118>)
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	011b      	lsls	r3, r3, #4
 800c5ea:	4413      	add	r3, r2
 800c5ec:	681a      	ldr	r2, [r3, #0]
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	429a      	cmp	r2, r3
 800c5f4:	d113      	bne.n	800c61e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c5f6:	4a3d      	ldr	r2, [pc, #244]	; (800c6ec <inc_lock+0x118>)
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	011b      	lsls	r3, r3, #4
 800c5fc:	4413      	add	r3, r2
 800c5fe:	3304      	adds	r3, #4
 800c600:	681a      	ldr	r2, [r3, #0]
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c606:	429a      	cmp	r2, r3
 800c608:	d109      	bne.n	800c61e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c60a:	4a38      	ldr	r2, [pc, #224]	; (800c6ec <inc_lock+0x118>)
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	011b      	lsls	r3, r3, #4
 800c610:	4413      	add	r3, r2
 800c612:	3308      	adds	r3, #8
 800c614:	681a      	ldr	r2, [r3, #0]
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c61a:	429a      	cmp	r2, r3
 800c61c:	d006      	beq.n	800c62c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	3301      	adds	r3, #1
 800c622:	60fb      	str	r3, [r7, #12]
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	2b01      	cmp	r3, #1
 800c628:	d9dc      	bls.n	800c5e4 <inc_lock+0x10>
 800c62a:	e000      	b.n	800c62e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c62c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	2b02      	cmp	r3, #2
 800c632:	d132      	bne.n	800c69a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c634:	2300      	movs	r3, #0
 800c636:	60fb      	str	r3, [r7, #12]
 800c638:	e002      	b.n	800c640 <inc_lock+0x6c>
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	3301      	adds	r3, #1
 800c63e:	60fb      	str	r3, [r7, #12]
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	2b01      	cmp	r3, #1
 800c644:	d806      	bhi.n	800c654 <inc_lock+0x80>
 800c646:	4a29      	ldr	r2, [pc, #164]	; (800c6ec <inc_lock+0x118>)
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	011b      	lsls	r3, r3, #4
 800c64c:	4413      	add	r3, r2
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d1f2      	bne.n	800c63a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	2b02      	cmp	r3, #2
 800c658:	d101      	bne.n	800c65e <inc_lock+0x8a>
 800c65a:	2300      	movs	r3, #0
 800c65c:	e040      	b.n	800c6e0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681a      	ldr	r2, [r3, #0]
 800c662:	4922      	ldr	r1, [pc, #136]	; (800c6ec <inc_lock+0x118>)
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	011b      	lsls	r3, r3, #4
 800c668:	440b      	add	r3, r1
 800c66a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	689a      	ldr	r2, [r3, #8]
 800c670:	491e      	ldr	r1, [pc, #120]	; (800c6ec <inc_lock+0x118>)
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	011b      	lsls	r3, r3, #4
 800c676:	440b      	add	r3, r1
 800c678:	3304      	adds	r3, #4
 800c67a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	695a      	ldr	r2, [r3, #20]
 800c680:	491a      	ldr	r1, [pc, #104]	; (800c6ec <inc_lock+0x118>)
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	011b      	lsls	r3, r3, #4
 800c686:	440b      	add	r3, r1
 800c688:	3308      	adds	r3, #8
 800c68a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c68c:	4a17      	ldr	r2, [pc, #92]	; (800c6ec <inc_lock+0x118>)
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	011b      	lsls	r3, r3, #4
 800c692:	4413      	add	r3, r2
 800c694:	330c      	adds	r3, #12
 800c696:	2200      	movs	r2, #0
 800c698:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d009      	beq.n	800c6b4 <inc_lock+0xe0>
 800c6a0:	4a12      	ldr	r2, [pc, #72]	; (800c6ec <inc_lock+0x118>)
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	011b      	lsls	r3, r3, #4
 800c6a6:	4413      	add	r3, r2
 800c6a8:	330c      	adds	r3, #12
 800c6aa:	881b      	ldrh	r3, [r3, #0]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d001      	beq.n	800c6b4 <inc_lock+0xe0>
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	e015      	b.n	800c6e0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d108      	bne.n	800c6cc <inc_lock+0xf8>
 800c6ba:	4a0c      	ldr	r2, [pc, #48]	; (800c6ec <inc_lock+0x118>)
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	011b      	lsls	r3, r3, #4
 800c6c0:	4413      	add	r3, r2
 800c6c2:	330c      	adds	r3, #12
 800c6c4:	881b      	ldrh	r3, [r3, #0]
 800c6c6:	3301      	adds	r3, #1
 800c6c8:	b29a      	uxth	r2, r3
 800c6ca:	e001      	b.n	800c6d0 <inc_lock+0xfc>
 800c6cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c6d0:	4906      	ldr	r1, [pc, #24]	; (800c6ec <inc_lock+0x118>)
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	011b      	lsls	r3, r3, #4
 800c6d6:	440b      	add	r3, r1
 800c6d8:	330c      	adds	r3, #12
 800c6da:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	3301      	adds	r3, #1
}
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	3714      	adds	r7, #20
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ea:	4770      	bx	lr
 800c6ec:	20000148 	.word	0x20000148

0800c6f0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c6f0:	b480      	push	{r7}
 800c6f2:	b085      	sub	sp, #20
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	3b01      	subs	r3, #1
 800c6fc:	607b      	str	r3, [r7, #4]
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	2b01      	cmp	r3, #1
 800c702:	d825      	bhi.n	800c750 <dec_lock+0x60>
		n = Files[i].ctr;
 800c704:	4a17      	ldr	r2, [pc, #92]	; (800c764 <dec_lock+0x74>)
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	011b      	lsls	r3, r3, #4
 800c70a:	4413      	add	r3, r2
 800c70c:	330c      	adds	r3, #12
 800c70e:	881b      	ldrh	r3, [r3, #0]
 800c710:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c712:	89fb      	ldrh	r3, [r7, #14]
 800c714:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c718:	d101      	bne.n	800c71e <dec_lock+0x2e>
 800c71a:	2300      	movs	r3, #0
 800c71c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c71e:	89fb      	ldrh	r3, [r7, #14]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d002      	beq.n	800c72a <dec_lock+0x3a>
 800c724:	89fb      	ldrh	r3, [r7, #14]
 800c726:	3b01      	subs	r3, #1
 800c728:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c72a:	4a0e      	ldr	r2, [pc, #56]	; (800c764 <dec_lock+0x74>)
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	011b      	lsls	r3, r3, #4
 800c730:	4413      	add	r3, r2
 800c732:	330c      	adds	r3, #12
 800c734:	89fa      	ldrh	r2, [r7, #14]
 800c736:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c738:	89fb      	ldrh	r3, [r7, #14]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d105      	bne.n	800c74a <dec_lock+0x5a>
 800c73e:	4a09      	ldr	r2, [pc, #36]	; (800c764 <dec_lock+0x74>)
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	011b      	lsls	r3, r3, #4
 800c744:	4413      	add	r3, r2
 800c746:	2200      	movs	r2, #0
 800c748:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c74a:	2300      	movs	r3, #0
 800c74c:	737b      	strb	r3, [r7, #13]
 800c74e:	e001      	b.n	800c754 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c750:	2302      	movs	r3, #2
 800c752:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c754:	7b7b      	ldrb	r3, [r7, #13]
}
 800c756:	4618      	mov	r0, r3
 800c758:	3714      	adds	r7, #20
 800c75a:	46bd      	mov	sp, r7
 800c75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c760:	4770      	bx	lr
 800c762:	bf00      	nop
 800c764:	20000148 	.word	0x20000148

0800c768 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c768:	b480      	push	{r7}
 800c76a:	b085      	sub	sp, #20
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c770:	2300      	movs	r3, #0
 800c772:	60fb      	str	r3, [r7, #12]
 800c774:	e010      	b.n	800c798 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c776:	4a0d      	ldr	r2, [pc, #52]	; (800c7ac <clear_lock+0x44>)
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	011b      	lsls	r3, r3, #4
 800c77c:	4413      	add	r3, r2
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	687a      	ldr	r2, [r7, #4]
 800c782:	429a      	cmp	r2, r3
 800c784:	d105      	bne.n	800c792 <clear_lock+0x2a>
 800c786:	4a09      	ldr	r2, [pc, #36]	; (800c7ac <clear_lock+0x44>)
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	011b      	lsls	r3, r3, #4
 800c78c:	4413      	add	r3, r2
 800c78e:	2200      	movs	r2, #0
 800c790:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	3301      	adds	r3, #1
 800c796:	60fb      	str	r3, [r7, #12]
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	2b01      	cmp	r3, #1
 800c79c:	d9eb      	bls.n	800c776 <clear_lock+0xe>
	}
}
 800c79e:	bf00      	nop
 800c7a0:	bf00      	nop
 800c7a2:	3714      	adds	r7, #20
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7aa:	4770      	bx	lr
 800c7ac:	20000148 	.word	0x20000148

0800c7b0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b086      	sub	sp, #24
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	78db      	ldrb	r3, [r3, #3]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d034      	beq.n	800c82e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7c8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	7858      	ldrb	r0, [r3, #1]
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c7d4:	2301      	movs	r3, #1
 800c7d6:	697a      	ldr	r2, [r7, #20]
 800c7d8:	f7ff fd40 	bl	800c25c <disk_write>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d002      	beq.n	800c7e8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	73fb      	strb	r3, [r7, #15]
 800c7e6:	e022      	b.n	800c82e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7f2:	697a      	ldr	r2, [r7, #20]
 800c7f4:	1ad2      	subs	r2, r2, r3
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	69db      	ldr	r3, [r3, #28]
 800c7fa:	429a      	cmp	r2, r3
 800c7fc:	d217      	bcs.n	800c82e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	789b      	ldrb	r3, [r3, #2]
 800c802:	613b      	str	r3, [r7, #16]
 800c804:	e010      	b.n	800c828 <sync_window+0x78>
					wsect += fs->fsize;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	69db      	ldr	r3, [r3, #28]
 800c80a:	697a      	ldr	r2, [r7, #20]
 800c80c:	4413      	add	r3, r2
 800c80e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	7858      	ldrb	r0, [r3, #1]
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c81a:	2301      	movs	r3, #1
 800c81c:	697a      	ldr	r2, [r7, #20]
 800c81e:	f7ff fd1d 	bl	800c25c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c822:	693b      	ldr	r3, [r7, #16]
 800c824:	3b01      	subs	r3, #1
 800c826:	613b      	str	r3, [r7, #16]
 800c828:	693b      	ldr	r3, [r7, #16]
 800c82a:	2b01      	cmp	r3, #1
 800c82c:	d8eb      	bhi.n	800c806 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c82e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c830:	4618      	mov	r0, r3
 800c832:	3718      	adds	r7, #24
 800c834:	46bd      	mov	sp, r7
 800c836:	bd80      	pop	{r7, pc}

0800c838 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b084      	sub	sp, #16
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
 800c840:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c842:	2300      	movs	r3, #0
 800c844:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c84a:	683a      	ldr	r2, [r7, #0]
 800c84c:	429a      	cmp	r2, r3
 800c84e:	d01b      	beq.n	800c888 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f7ff ffad 	bl	800c7b0 <sync_window>
 800c856:	4603      	mov	r3, r0
 800c858:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c85a:	7bfb      	ldrb	r3, [r7, #15]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d113      	bne.n	800c888 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	7858      	ldrb	r0, [r3, #1]
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c86a:	2301      	movs	r3, #1
 800c86c:	683a      	ldr	r2, [r7, #0]
 800c86e:	f7ff fcd5 	bl	800c21c <disk_read>
 800c872:	4603      	mov	r3, r0
 800c874:	2b00      	cmp	r3, #0
 800c876:	d004      	beq.n	800c882 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c878:	f04f 33ff 	mov.w	r3, #4294967295
 800c87c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c87e:	2301      	movs	r3, #1
 800c880:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	683a      	ldr	r2, [r7, #0]
 800c886:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800c888:	7bfb      	ldrb	r3, [r7, #15]
}
 800c88a:	4618      	mov	r0, r3
 800c88c:	3710      	adds	r7, #16
 800c88e:	46bd      	mov	sp, r7
 800c890:	bd80      	pop	{r7, pc}
	...

0800c894 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b084      	sub	sp, #16
 800c898:	af00      	add	r7, sp, #0
 800c89a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c89c:	6878      	ldr	r0, [r7, #4]
 800c89e:	f7ff ff87 	bl	800c7b0 <sync_window>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c8a6:	7bfb      	ldrb	r3, [r7, #15]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d158      	bne.n	800c95e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	781b      	ldrb	r3, [r3, #0]
 800c8b0:	2b03      	cmp	r3, #3
 800c8b2:	d148      	bne.n	800c946 <sync_fs+0xb2>
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	791b      	ldrb	r3, [r3, #4]
 800c8b8:	2b01      	cmp	r3, #1
 800c8ba:	d144      	bne.n	800c946 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	3334      	adds	r3, #52	; 0x34
 800c8c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c8c4:	2100      	movs	r1, #0
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	f7ff fda9 	bl	800c41e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	3334      	adds	r3, #52	; 0x34
 800c8d0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c8d4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c8d8:	4618      	mov	r0, r3
 800c8da:	f7ff fd38 	bl	800c34e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	3334      	adds	r3, #52	; 0x34
 800c8e2:	4921      	ldr	r1, [pc, #132]	; (800c968 <sync_fs+0xd4>)
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	f7ff fd4d 	bl	800c384 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	3334      	adds	r3, #52	; 0x34
 800c8ee:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c8f2:	491e      	ldr	r1, [pc, #120]	; (800c96c <sync_fs+0xd8>)
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f7ff fd45 	bl	800c384 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	3334      	adds	r3, #52	; 0x34
 800c8fe:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	691b      	ldr	r3, [r3, #16]
 800c906:	4619      	mov	r1, r3
 800c908:	4610      	mov	r0, r2
 800c90a:	f7ff fd3b 	bl	800c384 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	3334      	adds	r3, #52	; 0x34
 800c912:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	68db      	ldr	r3, [r3, #12]
 800c91a:	4619      	mov	r1, r3
 800c91c:	4610      	mov	r0, r2
 800c91e:	f7ff fd31 	bl	800c384 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	6a1b      	ldr	r3, [r3, #32]
 800c926:	1c5a      	adds	r2, r3, #1
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	7858      	ldrb	r0, [r3, #1]
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c93a:	2301      	movs	r3, #1
 800c93c:	f7ff fc8e 	bl	800c25c <disk_write>
			fs->fsi_flag = 0;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2200      	movs	r2, #0
 800c944:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	785b      	ldrb	r3, [r3, #1]
 800c94a:	2200      	movs	r2, #0
 800c94c:	2100      	movs	r1, #0
 800c94e:	4618      	mov	r0, r3
 800c950:	f7ff fca4 	bl	800c29c <disk_ioctl>
 800c954:	4603      	mov	r3, r0
 800c956:	2b00      	cmp	r3, #0
 800c958:	d001      	beq.n	800c95e <sync_fs+0xca>
 800c95a:	2301      	movs	r3, #1
 800c95c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c95e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c960:	4618      	mov	r0, r3
 800c962:	3710      	adds	r7, #16
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}
 800c968:	41615252 	.word	0x41615252
 800c96c:	61417272 	.word	0x61417272

0800c970 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c970:	b480      	push	{r7}
 800c972:	b083      	sub	sp, #12
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
 800c978:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	3b02      	subs	r3, #2
 800c97e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	699b      	ldr	r3, [r3, #24]
 800c984:	3b02      	subs	r3, #2
 800c986:	683a      	ldr	r2, [r7, #0]
 800c988:	429a      	cmp	r2, r3
 800c98a:	d301      	bcc.n	800c990 <clust2sect+0x20>
 800c98c:	2300      	movs	r3, #0
 800c98e:	e008      	b.n	800c9a2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	895b      	ldrh	r3, [r3, #10]
 800c994:	461a      	mov	r2, r3
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	fb03 f202 	mul.w	r2, r3, r2
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9a0:	4413      	add	r3, r2
}
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	370c      	adds	r7, #12
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ac:	4770      	bx	lr

0800c9ae <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c9ae:	b580      	push	{r7, lr}
 800c9b0:	b086      	sub	sp, #24
 800c9b2:	af00      	add	r7, sp, #0
 800c9b4:	6078      	str	r0, [r7, #4]
 800c9b6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	2b01      	cmp	r3, #1
 800c9c2:	d904      	bls.n	800c9ce <get_fat+0x20>
 800c9c4:	693b      	ldr	r3, [r7, #16]
 800c9c6:	699b      	ldr	r3, [r3, #24]
 800c9c8:	683a      	ldr	r2, [r7, #0]
 800c9ca:	429a      	cmp	r2, r3
 800c9cc:	d302      	bcc.n	800c9d4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c9ce:	2301      	movs	r3, #1
 800c9d0:	617b      	str	r3, [r7, #20]
 800c9d2:	e08f      	b.n	800caf4 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c9d4:	f04f 33ff 	mov.w	r3, #4294967295
 800c9d8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c9da:	693b      	ldr	r3, [r7, #16]
 800c9dc:	781b      	ldrb	r3, [r3, #0]
 800c9de:	2b03      	cmp	r3, #3
 800c9e0:	d062      	beq.n	800caa8 <get_fat+0xfa>
 800c9e2:	2b03      	cmp	r3, #3
 800c9e4:	dc7c      	bgt.n	800cae0 <get_fat+0x132>
 800c9e6:	2b01      	cmp	r3, #1
 800c9e8:	d002      	beq.n	800c9f0 <get_fat+0x42>
 800c9ea:	2b02      	cmp	r3, #2
 800c9ec:	d042      	beq.n	800ca74 <get_fat+0xc6>
 800c9ee:	e077      	b.n	800cae0 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	60fb      	str	r3, [r7, #12]
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	085b      	lsrs	r3, r3, #1
 800c9f8:	68fa      	ldr	r2, [r7, #12]
 800c9fa:	4413      	add	r3, r2
 800c9fc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c9fe:	693b      	ldr	r3, [r7, #16]
 800ca00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	0a5b      	lsrs	r3, r3, #9
 800ca06:	4413      	add	r3, r2
 800ca08:	4619      	mov	r1, r3
 800ca0a:	6938      	ldr	r0, [r7, #16]
 800ca0c:	f7ff ff14 	bl	800c838 <move_window>
 800ca10:	4603      	mov	r3, r0
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d167      	bne.n	800cae6 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	1c5a      	adds	r2, r3, #1
 800ca1a:	60fa      	str	r2, [r7, #12]
 800ca1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca20:	693a      	ldr	r2, [r7, #16]
 800ca22:	4413      	add	r3, r2
 800ca24:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ca28:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ca2a:	693b      	ldr	r3, [r7, #16]
 800ca2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	0a5b      	lsrs	r3, r3, #9
 800ca32:	4413      	add	r3, r2
 800ca34:	4619      	mov	r1, r3
 800ca36:	6938      	ldr	r0, [r7, #16]
 800ca38:	f7ff fefe 	bl	800c838 <move_window>
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d153      	bne.n	800caea <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca48:	693a      	ldr	r2, [r7, #16]
 800ca4a:	4413      	add	r3, r2
 800ca4c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ca50:	021b      	lsls	r3, r3, #8
 800ca52:	461a      	mov	r2, r3
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	4313      	orrs	r3, r2
 800ca58:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	f003 0301 	and.w	r3, r3, #1
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d002      	beq.n	800ca6a <get_fat+0xbc>
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	091b      	lsrs	r3, r3, #4
 800ca68:	e002      	b.n	800ca70 <get_fat+0xc2>
 800ca6a:	68bb      	ldr	r3, [r7, #8]
 800ca6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ca70:	617b      	str	r3, [r7, #20]
			break;
 800ca72:	e03f      	b.n	800caf4 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ca74:	693b      	ldr	r3, [r7, #16]
 800ca76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	0a1b      	lsrs	r3, r3, #8
 800ca7c:	4413      	add	r3, r2
 800ca7e:	4619      	mov	r1, r3
 800ca80:	6938      	ldr	r0, [r7, #16]
 800ca82:	f7ff fed9 	bl	800c838 <move_window>
 800ca86:	4603      	mov	r3, r0
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d130      	bne.n	800caee <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ca8c:	693b      	ldr	r3, [r7, #16]
 800ca8e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	005b      	lsls	r3, r3, #1
 800ca96:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ca9a:	4413      	add	r3, r2
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f7ff fc1b 	bl	800c2d8 <ld_word>
 800caa2:	4603      	mov	r3, r0
 800caa4:	617b      	str	r3, [r7, #20]
			break;
 800caa6:	e025      	b.n	800caf4 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800caa8:	693b      	ldr	r3, [r7, #16]
 800caaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	09db      	lsrs	r3, r3, #7
 800cab0:	4413      	add	r3, r2
 800cab2:	4619      	mov	r1, r3
 800cab4:	6938      	ldr	r0, [r7, #16]
 800cab6:	f7ff febf 	bl	800c838 <move_window>
 800caba:	4603      	mov	r3, r0
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d118      	bne.n	800caf2 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800cac0:	693b      	ldr	r3, [r7, #16]
 800cac2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	009b      	lsls	r3, r3, #2
 800caca:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cace:	4413      	add	r3, r2
 800cad0:	4618      	mov	r0, r3
 800cad2:	f7ff fc19 	bl	800c308 <ld_dword>
 800cad6:	4603      	mov	r3, r0
 800cad8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800cadc:	617b      	str	r3, [r7, #20]
			break;
 800cade:	e009      	b.n	800caf4 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800cae0:	2301      	movs	r3, #1
 800cae2:	617b      	str	r3, [r7, #20]
 800cae4:	e006      	b.n	800caf4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cae6:	bf00      	nop
 800cae8:	e004      	b.n	800caf4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800caea:	bf00      	nop
 800caec:	e002      	b.n	800caf4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800caee:	bf00      	nop
 800caf0:	e000      	b.n	800caf4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800caf2:	bf00      	nop
		}
	}

	return val;
 800caf4:	697b      	ldr	r3, [r7, #20]
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	3718      	adds	r7, #24
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd80      	pop	{r7, pc}

0800cafe <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800cafe:	b590      	push	{r4, r7, lr}
 800cb00:	b089      	sub	sp, #36	; 0x24
 800cb02:	af00      	add	r7, sp, #0
 800cb04:	60f8      	str	r0, [r7, #12]
 800cb06:	60b9      	str	r1, [r7, #8]
 800cb08:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800cb0a:	2302      	movs	r3, #2
 800cb0c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800cb0e:	68bb      	ldr	r3, [r7, #8]
 800cb10:	2b01      	cmp	r3, #1
 800cb12:	f240 80d2 	bls.w	800ccba <put_fat+0x1bc>
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	699b      	ldr	r3, [r3, #24]
 800cb1a:	68ba      	ldr	r2, [r7, #8]
 800cb1c:	429a      	cmp	r2, r3
 800cb1e:	f080 80cc 	bcs.w	800ccba <put_fat+0x1bc>
		switch (fs->fs_type) {
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	781b      	ldrb	r3, [r3, #0]
 800cb26:	2b03      	cmp	r3, #3
 800cb28:	f000 8096 	beq.w	800cc58 <put_fat+0x15a>
 800cb2c:	2b03      	cmp	r3, #3
 800cb2e:	f300 80cd 	bgt.w	800cccc <put_fat+0x1ce>
 800cb32:	2b01      	cmp	r3, #1
 800cb34:	d002      	beq.n	800cb3c <put_fat+0x3e>
 800cb36:	2b02      	cmp	r3, #2
 800cb38:	d06e      	beq.n	800cc18 <put_fat+0x11a>
 800cb3a:	e0c7      	b.n	800cccc <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800cb3c:	68bb      	ldr	r3, [r7, #8]
 800cb3e:	61bb      	str	r3, [r7, #24]
 800cb40:	69bb      	ldr	r3, [r7, #24]
 800cb42:	085b      	lsrs	r3, r3, #1
 800cb44:	69ba      	ldr	r2, [r7, #24]
 800cb46:	4413      	add	r3, r2
 800cb48:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cb4e:	69bb      	ldr	r3, [r7, #24]
 800cb50:	0a5b      	lsrs	r3, r3, #9
 800cb52:	4413      	add	r3, r2
 800cb54:	4619      	mov	r1, r3
 800cb56:	68f8      	ldr	r0, [r7, #12]
 800cb58:	f7ff fe6e 	bl	800c838 <move_window>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cb60:	7ffb      	ldrb	r3, [r7, #31]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	f040 80ab 	bne.w	800ccbe <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cb6e:	69bb      	ldr	r3, [r7, #24]
 800cb70:	1c59      	adds	r1, r3, #1
 800cb72:	61b9      	str	r1, [r7, #24]
 800cb74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb78:	4413      	add	r3, r2
 800cb7a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	f003 0301 	and.w	r3, r3, #1
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d00d      	beq.n	800cba2 <put_fat+0xa4>
 800cb86:	697b      	ldr	r3, [r7, #20]
 800cb88:	781b      	ldrb	r3, [r3, #0]
 800cb8a:	b25b      	sxtb	r3, r3
 800cb8c:	f003 030f 	and.w	r3, r3, #15
 800cb90:	b25a      	sxtb	r2, r3
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	b2db      	uxtb	r3, r3
 800cb96:	011b      	lsls	r3, r3, #4
 800cb98:	b25b      	sxtb	r3, r3
 800cb9a:	4313      	orrs	r3, r2
 800cb9c:	b25b      	sxtb	r3, r3
 800cb9e:	b2db      	uxtb	r3, r3
 800cba0:	e001      	b.n	800cba6 <put_fat+0xa8>
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	b2db      	uxtb	r3, r3
 800cba6:	697a      	ldr	r2, [r7, #20]
 800cba8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	2201      	movs	r2, #1
 800cbae:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cbb4:	69bb      	ldr	r3, [r7, #24]
 800cbb6:	0a5b      	lsrs	r3, r3, #9
 800cbb8:	4413      	add	r3, r2
 800cbba:	4619      	mov	r1, r3
 800cbbc:	68f8      	ldr	r0, [r7, #12]
 800cbbe:	f7ff fe3b 	bl	800c838 <move_window>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cbc6:	7ffb      	ldrb	r3, [r7, #31]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d17a      	bne.n	800ccc2 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cbd2:	69bb      	ldr	r3, [r7, #24]
 800cbd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbd8:	4413      	add	r3, r2
 800cbda:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800cbdc:	68bb      	ldr	r3, [r7, #8]
 800cbde:	f003 0301 	and.w	r3, r3, #1
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d003      	beq.n	800cbee <put_fat+0xf0>
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	091b      	lsrs	r3, r3, #4
 800cbea:	b2db      	uxtb	r3, r3
 800cbec:	e00e      	b.n	800cc0c <put_fat+0x10e>
 800cbee:	697b      	ldr	r3, [r7, #20]
 800cbf0:	781b      	ldrb	r3, [r3, #0]
 800cbf2:	b25b      	sxtb	r3, r3
 800cbf4:	f023 030f 	bic.w	r3, r3, #15
 800cbf8:	b25a      	sxtb	r2, r3
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	0a1b      	lsrs	r3, r3, #8
 800cbfe:	b25b      	sxtb	r3, r3
 800cc00:	f003 030f 	and.w	r3, r3, #15
 800cc04:	b25b      	sxtb	r3, r3
 800cc06:	4313      	orrs	r3, r2
 800cc08:	b25b      	sxtb	r3, r3
 800cc0a:	b2db      	uxtb	r3, r3
 800cc0c:	697a      	ldr	r2, [r7, #20]
 800cc0e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	2201      	movs	r2, #1
 800cc14:	70da      	strb	r2, [r3, #3]
			break;
 800cc16:	e059      	b.n	800cccc <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cc1c:	68bb      	ldr	r3, [r7, #8]
 800cc1e:	0a1b      	lsrs	r3, r3, #8
 800cc20:	4413      	add	r3, r2
 800cc22:	4619      	mov	r1, r3
 800cc24:	68f8      	ldr	r0, [r7, #12]
 800cc26:	f7ff fe07 	bl	800c838 <move_window>
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cc2e:	7ffb      	ldrb	r3, [r7, #31]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d148      	bne.n	800ccc6 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	005b      	lsls	r3, r3, #1
 800cc3e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800cc42:	4413      	add	r3, r2
 800cc44:	687a      	ldr	r2, [r7, #4]
 800cc46:	b292      	uxth	r2, r2
 800cc48:	4611      	mov	r1, r2
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	f7ff fb7f 	bl	800c34e <st_word>
			fs->wflag = 1;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	2201      	movs	r2, #1
 800cc54:	70da      	strb	r2, [r3, #3]
			break;
 800cc56:	e039      	b.n	800cccc <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cc5c:	68bb      	ldr	r3, [r7, #8]
 800cc5e:	09db      	lsrs	r3, r3, #7
 800cc60:	4413      	add	r3, r2
 800cc62:	4619      	mov	r1, r3
 800cc64:	68f8      	ldr	r0, [r7, #12]
 800cc66:	f7ff fde7 	bl	800c838 <move_window>
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cc6e:	7ffb      	ldrb	r3, [r7, #31]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d12a      	bne.n	800ccca <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	009b      	lsls	r3, r3, #2
 800cc84:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cc88:	4413      	add	r3, r2
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	f7ff fb3c 	bl	800c308 <ld_dword>
 800cc90:	4603      	mov	r3, r0
 800cc92:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800cc96:	4323      	orrs	r3, r4
 800cc98:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cca0:	68bb      	ldr	r3, [r7, #8]
 800cca2:	009b      	lsls	r3, r3, #2
 800cca4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cca8:	4413      	add	r3, r2
 800ccaa:	6879      	ldr	r1, [r7, #4]
 800ccac:	4618      	mov	r0, r3
 800ccae:	f7ff fb69 	bl	800c384 <st_dword>
			fs->wflag = 1;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	2201      	movs	r2, #1
 800ccb6:	70da      	strb	r2, [r3, #3]
			break;
 800ccb8:	e008      	b.n	800cccc <put_fat+0x1ce>
		}
	}
 800ccba:	bf00      	nop
 800ccbc:	e006      	b.n	800cccc <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ccbe:	bf00      	nop
 800ccc0:	e004      	b.n	800cccc <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ccc2:	bf00      	nop
 800ccc4:	e002      	b.n	800cccc <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ccc6:	bf00      	nop
 800ccc8:	e000      	b.n	800cccc <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ccca:	bf00      	nop
	return res;
 800cccc:	7ffb      	ldrb	r3, [r7, #31]
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	3724      	adds	r7, #36	; 0x24
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd90      	pop	{r4, r7, pc}

0800ccd6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ccd6:	b580      	push	{r7, lr}
 800ccd8:	b088      	sub	sp, #32
 800ccda:	af00      	add	r7, sp, #0
 800ccdc:	60f8      	str	r0, [r7, #12]
 800ccde:	60b9      	str	r1, [r7, #8]
 800cce0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800cce2:	2300      	movs	r3, #0
 800cce4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	2b01      	cmp	r3, #1
 800ccf0:	d904      	bls.n	800ccfc <remove_chain+0x26>
 800ccf2:	69bb      	ldr	r3, [r7, #24]
 800ccf4:	699b      	ldr	r3, [r3, #24]
 800ccf6:	68ba      	ldr	r2, [r7, #8]
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	d301      	bcc.n	800cd00 <remove_chain+0x2a>
 800ccfc:	2302      	movs	r3, #2
 800ccfe:	e04b      	b.n	800cd98 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d00c      	beq.n	800cd20 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800cd06:	f04f 32ff 	mov.w	r2, #4294967295
 800cd0a:	6879      	ldr	r1, [r7, #4]
 800cd0c:	69b8      	ldr	r0, [r7, #24]
 800cd0e:	f7ff fef6 	bl	800cafe <put_fat>
 800cd12:	4603      	mov	r3, r0
 800cd14:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800cd16:	7ffb      	ldrb	r3, [r7, #31]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d001      	beq.n	800cd20 <remove_chain+0x4a>
 800cd1c:	7ffb      	ldrb	r3, [r7, #31]
 800cd1e:	e03b      	b.n	800cd98 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800cd20:	68b9      	ldr	r1, [r7, #8]
 800cd22:	68f8      	ldr	r0, [r7, #12]
 800cd24:	f7ff fe43 	bl	800c9ae <get_fat>
 800cd28:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800cd2a:	697b      	ldr	r3, [r7, #20]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d031      	beq.n	800cd94 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800cd30:	697b      	ldr	r3, [r7, #20]
 800cd32:	2b01      	cmp	r3, #1
 800cd34:	d101      	bne.n	800cd3a <remove_chain+0x64>
 800cd36:	2302      	movs	r3, #2
 800cd38:	e02e      	b.n	800cd98 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800cd3a:	697b      	ldr	r3, [r7, #20]
 800cd3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd40:	d101      	bne.n	800cd46 <remove_chain+0x70>
 800cd42:	2301      	movs	r3, #1
 800cd44:	e028      	b.n	800cd98 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800cd46:	2200      	movs	r2, #0
 800cd48:	68b9      	ldr	r1, [r7, #8]
 800cd4a:	69b8      	ldr	r0, [r7, #24]
 800cd4c:	f7ff fed7 	bl	800cafe <put_fat>
 800cd50:	4603      	mov	r3, r0
 800cd52:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800cd54:	7ffb      	ldrb	r3, [r7, #31]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d001      	beq.n	800cd5e <remove_chain+0x88>
 800cd5a:	7ffb      	ldrb	r3, [r7, #31]
 800cd5c:	e01c      	b.n	800cd98 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800cd5e:	69bb      	ldr	r3, [r7, #24]
 800cd60:	691a      	ldr	r2, [r3, #16]
 800cd62:	69bb      	ldr	r3, [r7, #24]
 800cd64:	699b      	ldr	r3, [r3, #24]
 800cd66:	3b02      	subs	r3, #2
 800cd68:	429a      	cmp	r2, r3
 800cd6a:	d20b      	bcs.n	800cd84 <remove_chain+0xae>
			fs->free_clst++;
 800cd6c:	69bb      	ldr	r3, [r7, #24]
 800cd6e:	691b      	ldr	r3, [r3, #16]
 800cd70:	1c5a      	adds	r2, r3, #1
 800cd72:	69bb      	ldr	r3, [r7, #24]
 800cd74:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800cd76:	69bb      	ldr	r3, [r7, #24]
 800cd78:	791b      	ldrb	r3, [r3, #4]
 800cd7a:	f043 0301 	orr.w	r3, r3, #1
 800cd7e:	b2da      	uxtb	r2, r3
 800cd80:	69bb      	ldr	r3, [r7, #24]
 800cd82:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800cd88:	69bb      	ldr	r3, [r7, #24]
 800cd8a:	699b      	ldr	r3, [r3, #24]
 800cd8c:	68ba      	ldr	r2, [r7, #8]
 800cd8e:	429a      	cmp	r2, r3
 800cd90:	d3c6      	bcc.n	800cd20 <remove_chain+0x4a>
 800cd92:	e000      	b.n	800cd96 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800cd94:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800cd96:	2300      	movs	r3, #0
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	3720      	adds	r7, #32
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bd80      	pop	{r7, pc}

0800cda0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b088      	sub	sp, #32
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
 800cda8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d10d      	bne.n	800cdd2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800cdb6:	693b      	ldr	r3, [r7, #16]
 800cdb8:	68db      	ldr	r3, [r3, #12]
 800cdba:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800cdbc:	69bb      	ldr	r3, [r7, #24]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d004      	beq.n	800cdcc <create_chain+0x2c>
 800cdc2:	693b      	ldr	r3, [r7, #16]
 800cdc4:	699b      	ldr	r3, [r3, #24]
 800cdc6:	69ba      	ldr	r2, [r7, #24]
 800cdc8:	429a      	cmp	r2, r3
 800cdca:	d31b      	bcc.n	800ce04 <create_chain+0x64>
 800cdcc:	2301      	movs	r3, #1
 800cdce:	61bb      	str	r3, [r7, #24]
 800cdd0:	e018      	b.n	800ce04 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800cdd2:	6839      	ldr	r1, [r7, #0]
 800cdd4:	6878      	ldr	r0, [r7, #4]
 800cdd6:	f7ff fdea 	bl	800c9ae <get_fat>
 800cdda:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	2b01      	cmp	r3, #1
 800cde0:	d801      	bhi.n	800cde6 <create_chain+0x46>
 800cde2:	2301      	movs	r3, #1
 800cde4:	e070      	b.n	800cec8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdec:	d101      	bne.n	800cdf2 <create_chain+0x52>
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	e06a      	b.n	800cec8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800cdf2:	693b      	ldr	r3, [r7, #16]
 800cdf4:	699b      	ldr	r3, [r3, #24]
 800cdf6:	68fa      	ldr	r2, [r7, #12]
 800cdf8:	429a      	cmp	r2, r3
 800cdfa:	d201      	bcs.n	800ce00 <create_chain+0x60>
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	e063      	b.n	800cec8 <create_chain+0x128>
		scl = clst;
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ce04:	69bb      	ldr	r3, [r7, #24]
 800ce06:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ce08:	69fb      	ldr	r3, [r7, #28]
 800ce0a:	3301      	adds	r3, #1
 800ce0c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ce0e:	693b      	ldr	r3, [r7, #16]
 800ce10:	699b      	ldr	r3, [r3, #24]
 800ce12:	69fa      	ldr	r2, [r7, #28]
 800ce14:	429a      	cmp	r2, r3
 800ce16:	d307      	bcc.n	800ce28 <create_chain+0x88>
				ncl = 2;
 800ce18:	2302      	movs	r3, #2
 800ce1a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ce1c:	69fa      	ldr	r2, [r7, #28]
 800ce1e:	69bb      	ldr	r3, [r7, #24]
 800ce20:	429a      	cmp	r2, r3
 800ce22:	d901      	bls.n	800ce28 <create_chain+0x88>
 800ce24:	2300      	movs	r3, #0
 800ce26:	e04f      	b.n	800cec8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ce28:	69f9      	ldr	r1, [r7, #28]
 800ce2a:	6878      	ldr	r0, [r7, #4]
 800ce2c:	f7ff fdbf 	bl	800c9ae <get_fat>
 800ce30:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d00e      	beq.n	800ce56 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	2b01      	cmp	r3, #1
 800ce3c:	d003      	beq.n	800ce46 <create_chain+0xa6>
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce44:	d101      	bne.n	800ce4a <create_chain+0xaa>
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	e03e      	b.n	800cec8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ce4a:	69fa      	ldr	r2, [r7, #28]
 800ce4c:	69bb      	ldr	r3, [r7, #24]
 800ce4e:	429a      	cmp	r2, r3
 800ce50:	d1da      	bne.n	800ce08 <create_chain+0x68>
 800ce52:	2300      	movs	r3, #0
 800ce54:	e038      	b.n	800cec8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ce56:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ce58:	f04f 32ff 	mov.w	r2, #4294967295
 800ce5c:	69f9      	ldr	r1, [r7, #28]
 800ce5e:	6938      	ldr	r0, [r7, #16]
 800ce60:	f7ff fe4d 	bl	800cafe <put_fat>
 800ce64:	4603      	mov	r3, r0
 800ce66:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ce68:	7dfb      	ldrb	r3, [r7, #23]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d109      	bne.n	800ce82 <create_chain+0xe2>
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d006      	beq.n	800ce82 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ce74:	69fa      	ldr	r2, [r7, #28]
 800ce76:	6839      	ldr	r1, [r7, #0]
 800ce78:	6938      	ldr	r0, [r7, #16]
 800ce7a:	f7ff fe40 	bl	800cafe <put_fat>
 800ce7e:	4603      	mov	r3, r0
 800ce80:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ce82:	7dfb      	ldrb	r3, [r7, #23]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d116      	bne.n	800ceb6 <create_chain+0x116>
		fs->last_clst = ncl;
 800ce88:	693b      	ldr	r3, [r7, #16]
 800ce8a:	69fa      	ldr	r2, [r7, #28]
 800ce8c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ce8e:	693b      	ldr	r3, [r7, #16]
 800ce90:	691a      	ldr	r2, [r3, #16]
 800ce92:	693b      	ldr	r3, [r7, #16]
 800ce94:	699b      	ldr	r3, [r3, #24]
 800ce96:	3b02      	subs	r3, #2
 800ce98:	429a      	cmp	r2, r3
 800ce9a:	d804      	bhi.n	800cea6 <create_chain+0x106>
 800ce9c:	693b      	ldr	r3, [r7, #16]
 800ce9e:	691b      	ldr	r3, [r3, #16]
 800cea0:	1e5a      	subs	r2, r3, #1
 800cea2:	693b      	ldr	r3, [r7, #16]
 800cea4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800cea6:	693b      	ldr	r3, [r7, #16]
 800cea8:	791b      	ldrb	r3, [r3, #4]
 800ceaa:	f043 0301 	orr.w	r3, r3, #1
 800ceae:	b2da      	uxtb	r2, r3
 800ceb0:	693b      	ldr	r3, [r7, #16]
 800ceb2:	711a      	strb	r2, [r3, #4]
 800ceb4:	e007      	b.n	800cec6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ceb6:	7dfb      	ldrb	r3, [r7, #23]
 800ceb8:	2b01      	cmp	r3, #1
 800ceba:	d102      	bne.n	800cec2 <create_chain+0x122>
 800cebc:	f04f 33ff 	mov.w	r3, #4294967295
 800cec0:	e000      	b.n	800cec4 <create_chain+0x124>
 800cec2:	2301      	movs	r3, #1
 800cec4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800cec6:	69fb      	ldr	r3, [r7, #28]
}
 800cec8:	4618      	mov	r0, r3
 800ceca:	3720      	adds	r7, #32
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd80      	pop	{r7, pc}

0800ced0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ced0:	b480      	push	{r7}
 800ced2:	b087      	sub	sp, #28
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
 800ced8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cee4:	3304      	adds	r3, #4
 800cee6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	0a5b      	lsrs	r3, r3, #9
 800ceec:	68fa      	ldr	r2, [r7, #12]
 800ceee:	8952      	ldrh	r2, [r2, #10]
 800cef0:	fbb3 f3f2 	udiv	r3, r3, r2
 800cef4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cef6:	693b      	ldr	r3, [r7, #16]
 800cef8:	1d1a      	adds	r2, r3, #4
 800cefa:	613a      	str	r2, [r7, #16]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800cf00:	68bb      	ldr	r3, [r7, #8]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d101      	bne.n	800cf0a <clmt_clust+0x3a>
 800cf06:	2300      	movs	r3, #0
 800cf08:	e010      	b.n	800cf2c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800cf0a:	697a      	ldr	r2, [r7, #20]
 800cf0c:	68bb      	ldr	r3, [r7, #8]
 800cf0e:	429a      	cmp	r2, r3
 800cf10:	d307      	bcc.n	800cf22 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800cf12:	697a      	ldr	r2, [r7, #20]
 800cf14:	68bb      	ldr	r3, [r7, #8]
 800cf16:	1ad3      	subs	r3, r2, r3
 800cf18:	617b      	str	r3, [r7, #20]
 800cf1a:	693b      	ldr	r3, [r7, #16]
 800cf1c:	3304      	adds	r3, #4
 800cf1e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cf20:	e7e9      	b.n	800cef6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800cf22:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800cf24:	693b      	ldr	r3, [r7, #16]
 800cf26:	681a      	ldr	r2, [r3, #0]
 800cf28:	697b      	ldr	r3, [r7, #20]
 800cf2a:	4413      	add	r3, r2
}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	371c      	adds	r7, #28
 800cf30:	46bd      	mov	sp, r7
 800cf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf36:	4770      	bx	lr

0800cf38 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b086      	sub	sp, #24
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
 800cf40:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cf4e:	d204      	bcs.n	800cf5a <dir_sdi+0x22>
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	f003 031f 	and.w	r3, r3, #31
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d001      	beq.n	800cf5e <dir_sdi+0x26>
		return FR_INT_ERR;
 800cf5a:	2302      	movs	r3, #2
 800cf5c:	e063      	b.n	800d026 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	683a      	ldr	r2, [r7, #0]
 800cf62:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	689b      	ldr	r3, [r3, #8]
 800cf68:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d106      	bne.n	800cf7e <dir_sdi+0x46>
 800cf70:	693b      	ldr	r3, [r7, #16]
 800cf72:	781b      	ldrb	r3, [r3, #0]
 800cf74:	2b02      	cmp	r3, #2
 800cf76:	d902      	bls.n	800cf7e <dir_sdi+0x46>
		clst = fs->dirbase;
 800cf78:	693b      	ldr	r3, [r7, #16]
 800cf7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf7c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800cf7e:	697b      	ldr	r3, [r7, #20]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d10c      	bne.n	800cf9e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	095b      	lsrs	r3, r3, #5
 800cf88:	693a      	ldr	r2, [r7, #16]
 800cf8a:	8912      	ldrh	r2, [r2, #8]
 800cf8c:	4293      	cmp	r3, r2
 800cf8e:	d301      	bcc.n	800cf94 <dir_sdi+0x5c>
 800cf90:	2302      	movs	r3, #2
 800cf92:	e048      	b.n	800d026 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800cf94:	693b      	ldr	r3, [r7, #16]
 800cf96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	61da      	str	r2, [r3, #28]
 800cf9c:	e029      	b.n	800cff2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	895b      	ldrh	r3, [r3, #10]
 800cfa2:	025b      	lsls	r3, r3, #9
 800cfa4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cfa6:	e019      	b.n	800cfdc <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	6979      	ldr	r1, [r7, #20]
 800cfac:	4618      	mov	r0, r3
 800cfae:	f7ff fcfe 	bl	800c9ae <get_fat>
 800cfb2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cfb4:	697b      	ldr	r3, [r7, #20]
 800cfb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfba:	d101      	bne.n	800cfc0 <dir_sdi+0x88>
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	e032      	b.n	800d026 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800cfc0:	697b      	ldr	r3, [r7, #20]
 800cfc2:	2b01      	cmp	r3, #1
 800cfc4:	d904      	bls.n	800cfd0 <dir_sdi+0x98>
 800cfc6:	693b      	ldr	r3, [r7, #16]
 800cfc8:	699b      	ldr	r3, [r3, #24]
 800cfca:	697a      	ldr	r2, [r7, #20]
 800cfcc:	429a      	cmp	r2, r3
 800cfce:	d301      	bcc.n	800cfd4 <dir_sdi+0x9c>
 800cfd0:	2302      	movs	r3, #2
 800cfd2:	e028      	b.n	800d026 <dir_sdi+0xee>
			ofs -= csz;
 800cfd4:	683a      	ldr	r2, [r7, #0]
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	1ad3      	subs	r3, r2, r3
 800cfda:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cfdc:	683a      	ldr	r2, [r7, #0]
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	429a      	cmp	r2, r3
 800cfe2:	d2e1      	bcs.n	800cfa8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800cfe4:	6979      	ldr	r1, [r7, #20]
 800cfe6:	6938      	ldr	r0, [r7, #16]
 800cfe8:	f7ff fcc2 	bl	800c970 <clust2sect>
 800cfec:	4602      	mov	r2, r0
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	697a      	ldr	r2, [r7, #20]
 800cff6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	69db      	ldr	r3, [r3, #28]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d101      	bne.n	800d004 <dir_sdi+0xcc>
 800d000:	2302      	movs	r3, #2
 800d002:	e010      	b.n	800d026 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	69da      	ldr	r2, [r3, #28]
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	0a5b      	lsrs	r3, r3, #9
 800d00c:	441a      	add	r2, r3
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d012:	693b      	ldr	r3, [r7, #16]
 800d014:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d01e:	441a      	add	r2, r3
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d024:	2300      	movs	r3, #0
}
 800d026:	4618      	mov	r0, r3
 800d028:	3718      	adds	r7, #24
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}

0800d02e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d02e:	b580      	push	{r7, lr}
 800d030:	b086      	sub	sp, #24
 800d032:	af00      	add	r7, sp, #0
 800d034:	6078      	str	r0, [r7, #4]
 800d036:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	695b      	ldr	r3, [r3, #20]
 800d042:	3320      	adds	r3, #32
 800d044:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	69db      	ldr	r3, [r3, #28]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d003      	beq.n	800d056 <dir_next+0x28>
 800d04e:	68bb      	ldr	r3, [r7, #8]
 800d050:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d054:	d301      	bcc.n	800d05a <dir_next+0x2c>
 800d056:	2304      	movs	r3, #4
 800d058:	e0aa      	b.n	800d1b0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d05a:	68bb      	ldr	r3, [r7, #8]
 800d05c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d060:	2b00      	cmp	r3, #0
 800d062:	f040 8098 	bne.w	800d196 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	69db      	ldr	r3, [r3, #28]
 800d06a:	1c5a      	adds	r2, r3, #1
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	699b      	ldr	r3, [r3, #24]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d10b      	bne.n	800d090 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	095b      	lsrs	r3, r3, #5
 800d07c:	68fa      	ldr	r2, [r7, #12]
 800d07e:	8912      	ldrh	r2, [r2, #8]
 800d080:	4293      	cmp	r3, r2
 800d082:	f0c0 8088 	bcc.w	800d196 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2200      	movs	r2, #0
 800d08a:	61da      	str	r2, [r3, #28]
 800d08c:	2304      	movs	r3, #4
 800d08e:	e08f      	b.n	800d1b0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d090:	68bb      	ldr	r3, [r7, #8]
 800d092:	0a5b      	lsrs	r3, r3, #9
 800d094:	68fa      	ldr	r2, [r7, #12]
 800d096:	8952      	ldrh	r2, [r2, #10]
 800d098:	3a01      	subs	r2, #1
 800d09a:	4013      	ands	r3, r2
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d17a      	bne.n	800d196 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d0a0:	687a      	ldr	r2, [r7, #4]
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	699b      	ldr	r3, [r3, #24]
 800d0a6:	4619      	mov	r1, r3
 800d0a8:	4610      	mov	r0, r2
 800d0aa:	f7ff fc80 	bl	800c9ae <get_fat>
 800d0ae:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d0b0:	697b      	ldr	r3, [r7, #20]
 800d0b2:	2b01      	cmp	r3, #1
 800d0b4:	d801      	bhi.n	800d0ba <dir_next+0x8c>
 800d0b6:	2302      	movs	r3, #2
 800d0b8:	e07a      	b.n	800d1b0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d0ba:	697b      	ldr	r3, [r7, #20]
 800d0bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0c0:	d101      	bne.n	800d0c6 <dir_next+0x98>
 800d0c2:	2301      	movs	r3, #1
 800d0c4:	e074      	b.n	800d1b0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	699b      	ldr	r3, [r3, #24]
 800d0ca:	697a      	ldr	r2, [r7, #20]
 800d0cc:	429a      	cmp	r2, r3
 800d0ce:	d358      	bcc.n	800d182 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d0d0:	683b      	ldr	r3, [r7, #0]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d104      	bne.n	800d0e0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2200      	movs	r2, #0
 800d0da:	61da      	str	r2, [r3, #28]
 800d0dc:	2304      	movs	r3, #4
 800d0de:	e067      	b.n	800d1b0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d0e0:	687a      	ldr	r2, [r7, #4]
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	699b      	ldr	r3, [r3, #24]
 800d0e6:	4619      	mov	r1, r3
 800d0e8:	4610      	mov	r0, r2
 800d0ea:	f7ff fe59 	bl	800cda0 <create_chain>
 800d0ee:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d0f0:	697b      	ldr	r3, [r7, #20]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d101      	bne.n	800d0fa <dir_next+0xcc>
 800d0f6:	2307      	movs	r3, #7
 800d0f8:	e05a      	b.n	800d1b0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d0fa:	697b      	ldr	r3, [r7, #20]
 800d0fc:	2b01      	cmp	r3, #1
 800d0fe:	d101      	bne.n	800d104 <dir_next+0xd6>
 800d100:	2302      	movs	r3, #2
 800d102:	e055      	b.n	800d1b0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d104:	697b      	ldr	r3, [r7, #20]
 800d106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d10a:	d101      	bne.n	800d110 <dir_next+0xe2>
 800d10c:	2301      	movs	r3, #1
 800d10e:	e04f      	b.n	800d1b0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d110:	68f8      	ldr	r0, [r7, #12]
 800d112:	f7ff fb4d 	bl	800c7b0 <sync_window>
 800d116:	4603      	mov	r3, r0
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d001      	beq.n	800d120 <dir_next+0xf2>
 800d11c:	2301      	movs	r3, #1
 800d11e:	e047      	b.n	800d1b0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	3334      	adds	r3, #52	; 0x34
 800d124:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d128:	2100      	movs	r1, #0
 800d12a:	4618      	mov	r0, r3
 800d12c:	f7ff f977 	bl	800c41e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d130:	2300      	movs	r3, #0
 800d132:	613b      	str	r3, [r7, #16]
 800d134:	6979      	ldr	r1, [r7, #20]
 800d136:	68f8      	ldr	r0, [r7, #12]
 800d138:	f7ff fc1a 	bl	800c970 <clust2sect>
 800d13c:	4602      	mov	r2, r0
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	631a      	str	r2, [r3, #48]	; 0x30
 800d142:	e012      	b.n	800d16a <dir_next+0x13c>
						fs->wflag = 1;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	2201      	movs	r2, #1
 800d148:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d14a:	68f8      	ldr	r0, [r7, #12]
 800d14c:	f7ff fb30 	bl	800c7b0 <sync_window>
 800d150:	4603      	mov	r3, r0
 800d152:	2b00      	cmp	r3, #0
 800d154:	d001      	beq.n	800d15a <dir_next+0x12c>
 800d156:	2301      	movs	r3, #1
 800d158:	e02a      	b.n	800d1b0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d15a:	693b      	ldr	r3, [r7, #16]
 800d15c:	3301      	adds	r3, #1
 800d15e:	613b      	str	r3, [r7, #16]
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d164:	1c5a      	adds	r2, r3, #1
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	631a      	str	r2, [r3, #48]	; 0x30
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	895b      	ldrh	r3, [r3, #10]
 800d16e:	461a      	mov	r2, r3
 800d170:	693b      	ldr	r3, [r7, #16]
 800d172:	4293      	cmp	r3, r2
 800d174:	d3e6      	bcc.n	800d144 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d17a:	693b      	ldr	r3, [r7, #16]
 800d17c:	1ad2      	subs	r2, r2, r3
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	697a      	ldr	r2, [r7, #20]
 800d186:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d188:	6979      	ldr	r1, [r7, #20]
 800d18a:	68f8      	ldr	r0, [r7, #12]
 800d18c:	f7ff fbf0 	bl	800c970 <clust2sect>
 800d190:	4602      	mov	r2, r0
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	68ba      	ldr	r2, [r7, #8]
 800d19a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d1a2:	68bb      	ldr	r3, [r7, #8]
 800d1a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1a8:	441a      	add	r2, r3
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d1ae:	2300      	movs	r3, #0
}
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	3718      	adds	r7, #24
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	bd80      	pop	{r7, pc}

0800d1b8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b086      	sub	sp, #24
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
 800d1c0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d1c8:	2100      	movs	r1, #0
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f7ff feb4 	bl	800cf38 <dir_sdi>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d1d4:	7dfb      	ldrb	r3, [r7, #23]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d12b      	bne.n	800d232 <dir_alloc+0x7a>
		n = 0;
 800d1da:	2300      	movs	r3, #0
 800d1dc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	69db      	ldr	r3, [r3, #28]
 800d1e2:	4619      	mov	r1, r3
 800d1e4:	68f8      	ldr	r0, [r7, #12]
 800d1e6:	f7ff fb27 	bl	800c838 <move_window>
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d1ee:	7dfb      	ldrb	r3, [r7, #23]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d11d      	bne.n	800d230 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	6a1b      	ldr	r3, [r3, #32]
 800d1f8:	781b      	ldrb	r3, [r3, #0]
 800d1fa:	2be5      	cmp	r3, #229	; 0xe5
 800d1fc:	d004      	beq.n	800d208 <dir_alloc+0x50>
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	6a1b      	ldr	r3, [r3, #32]
 800d202:	781b      	ldrb	r3, [r3, #0]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d107      	bne.n	800d218 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d208:	693b      	ldr	r3, [r7, #16]
 800d20a:	3301      	adds	r3, #1
 800d20c:	613b      	str	r3, [r7, #16]
 800d20e:	693a      	ldr	r2, [r7, #16]
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	429a      	cmp	r2, r3
 800d214:	d102      	bne.n	800d21c <dir_alloc+0x64>
 800d216:	e00c      	b.n	800d232 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d218:	2300      	movs	r3, #0
 800d21a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d21c:	2101      	movs	r1, #1
 800d21e:	6878      	ldr	r0, [r7, #4]
 800d220:	f7ff ff05 	bl	800d02e <dir_next>
 800d224:	4603      	mov	r3, r0
 800d226:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d228:	7dfb      	ldrb	r3, [r7, #23]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d0d7      	beq.n	800d1de <dir_alloc+0x26>
 800d22e:	e000      	b.n	800d232 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d230:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d232:	7dfb      	ldrb	r3, [r7, #23]
 800d234:	2b04      	cmp	r3, #4
 800d236:	d101      	bne.n	800d23c <dir_alloc+0x84>
 800d238:	2307      	movs	r3, #7
 800d23a:	75fb      	strb	r3, [r7, #23]
	return res;
 800d23c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d23e:	4618      	mov	r0, r3
 800d240:	3718      	adds	r7, #24
 800d242:	46bd      	mov	sp, r7
 800d244:	bd80      	pop	{r7, pc}

0800d246 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d246:	b580      	push	{r7, lr}
 800d248:	b084      	sub	sp, #16
 800d24a:	af00      	add	r7, sp, #0
 800d24c:	6078      	str	r0, [r7, #4]
 800d24e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	331a      	adds	r3, #26
 800d254:	4618      	mov	r0, r3
 800d256:	f7ff f83f 	bl	800c2d8 <ld_word>
 800d25a:	4603      	mov	r3, r0
 800d25c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	781b      	ldrb	r3, [r3, #0]
 800d262:	2b03      	cmp	r3, #3
 800d264:	d109      	bne.n	800d27a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d266:	683b      	ldr	r3, [r7, #0]
 800d268:	3314      	adds	r3, #20
 800d26a:	4618      	mov	r0, r3
 800d26c:	f7ff f834 	bl	800c2d8 <ld_word>
 800d270:	4603      	mov	r3, r0
 800d272:	041b      	lsls	r3, r3, #16
 800d274:	68fa      	ldr	r2, [r7, #12]
 800d276:	4313      	orrs	r3, r2
 800d278:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d27a:	68fb      	ldr	r3, [r7, #12]
}
 800d27c:	4618      	mov	r0, r3
 800d27e:	3710      	adds	r7, #16
 800d280:	46bd      	mov	sp, r7
 800d282:	bd80      	pop	{r7, pc}

0800d284 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b084      	sub	sp, #16
 800d288:	af00      	add	r7, sp, #0
 800d28a:	60f8      	str	r0, [r7, #12]
 800d28c:	60b9      	str	r1, [r7, #8]
 800d28e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d290:	68bb      	ldr	r3, [r7, #8]
 800d292:	331a      	adds	r3, #26
 800d294:	687a      	ldr	r2, [r7, #4]
 800d296:	b292      	uxth	r2, r2
 800d298:	4611      	mov	r1, r2
 800d29a:	4618      	mov	r0, r3
 800d29c:	f7ff f857 	bl	800c34e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	781b      	ldrb	r3, [r3, #0]
 800d2a4:	2b03      	cmp	r3, #3
 800d2a6:	d109      	bne.n	800d2bc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d2a8:	68bb      	ldr	r3, [r7, #8]
 800d2aa:	f103 0214 	add.w	r2, r3, #20
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	0c1b      	lsrs	r3, r3, #16
 800d2b2:	b29b      	uxth	r3, r3
 800d2b4:	4619      	mov	r1, r3
 800d2b6:	4610      	mov	r0, r2
 800d2b8:	f7ff f849 	bl	800c34e <st_word>
	}
}
 800d2bc:	bf00      	nop
 800d2be:	3710      	adds	r7, #16
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bd80      	pop	{r7, pc}

0800d2c4 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b086      	sub	sp, #24
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
 800d2cc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800d2ce:	2304      	movs	r3, #4
 800d2d0:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800d2d8:	e03c      	b.n	800d354 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	69db      	ldr	r3, [r3, #28]
 800d2de:	4619      	mov	r1, r3
 800d2e0:	6938      	ldr	r0, [r7, #16]
 800d2e2:	f7ff faa9 	bl	800c838 <move_window>
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d2ea:	7dfb      	ldrb	r3, [r7, #23]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d136      	bne.n	800d35e <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	6a1b      	ldr	r3, [r3, #32]
 800d2f4:	781b      	ldrb	r3, [r3, #0]
 800d2f6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800d2f8:	7bfb      	ldrb	r3, [r7, #15]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d102      	bne.n	800d304 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800d2fe:	2304      	movs	r3, #4
 800d300:	75fb      	strb	r3, [r7, #23]
 800d302:	e031      	b.n	800d368 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	6a1b      	ldr	r3, [r3, #32]
 800d308:	330b      	adds	r3, #11
 800d30a:	781b      	ldrb	r3, [r3, #0]
 800d30c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d310:	73bb      	strb	r3, [r7, #14]
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	7bba      	ldrb	r2, [r7, #14]
 800d316:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800d318:	7bfb      	ldrb	r3, [r7, #15]
 800d31a:	2be5      	cmp	r3, #229	; 0xe5
 800d31c:	d011      	beq.n	800d342 <dir_read+0x7e>
 800d31e:	7bfb      	ldrb	r3, [r7, #15]
 800d320:	2b2e      	cmp	r3, #46	; 0x2e
 800d322:	d00e      	beq.n	800d342 <dir_read+0x7e>
 800d324:	7bbb      	ldrb	r3, [r7, #14]
 800d326:	2b0f      	cmp	r3, #15
 800d328:	d00b      	beq.n	800d342 <dir_read+0x7e>
 800d32a:	7bbb      	ldrb	r3, [r7, #14]
 800d32c:	f023 0320 	bic.w	r3, r3, #32
 800d330:	2b08      	cmp	r3, #8
 800d332:	bf0c      	ite	eq
 800d334:	2301      	moveq	r3, #1
 800d336:	2300      	movne	r3, #0
 800d338:	b2db      	uxtb	r3, r3
 800d33a:	461a      	mov	r2, r3
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	4293      	cmp	r3, r2
 800d340:	d00f      	beq.n	800d362 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800d342:	2100      	movs	r1, #0
 800d344:	6878      	ldr	r0, [r7, #4]
 800d346:	f7ff fe72 	bl	800d02e <dir_next>
 800d34a:	4603      	mov	r3, r0
 800d34c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d34e:	7dfb      	ldrb	r3, [r7, #23]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d108      	bne.n	800d366 <dir_read+0xa2>
	while (dp->sect) {
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	69db      	ldr	r3, [r3, #28]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d1be      	bne.n	800d2da <dir_read+0x16>
 800d35c:	e004      	b.n	800d368 <dir_read+0xa4>
		if (res != FR_OK) break;
 800d35e:	bf00      	nop
 800d360:	e002      	b.n	800d368 <dir_read+0xa4>
				break;
 800d362:	bf00      	nop
 800d364:	e000      	b.n	800d368 <dir_read+0xa4>
		if (res != FR_OK) break;
 800d366:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800d368:	7dfb      	ldrb	r3, [r7, #23]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d002      	beq.n	800d374 <dir_read+0xb0>
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2200      	movs	r2, #0
 800d372:	61da      	str	r2, [r3, #28]
	return res;
 800d374:	7dfb      	ldrb	r3, [r7, #23]
}
 800d376:	4618      	mov	r0, r3
 800d378:	3718      	adds	r7, #24
 800d37a:	46bd      	mov	sp, r7
 800d37c:	bd80      	pop	{r7, pc}

0800d37e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d37e:	b580      	push	{r7, lr}
 800d380:	b086      	sub	sp, #24
 800d382:	af00      	add	r7, sp, #0
 800d384:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d38c:	2100      	movs	r1, #0
 800d38e:	6878      	ldr	r0, [r7, #4]
 800d390:	f7ff fdd2 	bl	800cf38 <dir_sdi>
 800d394:	4603      	mov	r3, r0
 800d396:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d398:	7dfb      	ldrb	r3, [r7, #23]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d001      	beq.n	800d3a2 <dir_find+0x24>
 800d39e:	7dfb      	ldrb	r3, [r7, #23]
 800d3a0:	e03e      	b.n	800d420 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	69db      	ldr	r3, [r3, #28]
 800d3a6:	4619      	mov	r1, r3
 800d3a8:	6938      	ldr	r0, [r7, #16]
 800d3aa:	f7ff fa45 	bl	800c838 <move_window>
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d3b2:	7dfb      	ldrb	r3, [r7, #23]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d12f      	bne.n	800d418 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	6a1b      	ldr	r3, [r3, #32]
 800d3bc:	781b      	ldrb	r3, [r3, #0]
 800d3be:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d3c0:	7bfb      	ldrb	r3, [r7, #15]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d102      	bne.n	800d3cc <dir_find+0x4e>
 800d3c6:	2304      	movs	r3, #4
 800d3c8:	75fb      	strb	r3, [r7, #23]
 800d3ca:	e028      	b.n	800d41e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	6a1b      	ldr	r3, [r3, #32]
 800d3d0:	330b      	adds	r3, #11
 800d3d2:	781b      	ldrb	r3, [r3, #0]
 800d3d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d3d8:	b2da      	uxtb	r2, r3
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	6a1b      	ldr	r3, [r3, #32]
 800d3e2:	330b      	adds	r3, #11
 800d3e4:	781b      	ldrb	r3, [r3, #0]
 800d3e6:	f003 0308 	and.w	r3, r3, #8
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d10a      	bne.n	800d404 <dir_find+0x86>
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6a18      	ldr	r0, [r3, #32]
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	3324      	adds	r3, #36	; 0x24
 800d3f6:	220b      	movs	r2, #11
 800d3f8:	4619      	mov	r1, r3
 800d3fa:	f7ff f82b 	bl	800c454 <mem_cmp>
 800d3fe:	4603      	mov	r3, r0
 800d400:	2b00      	cmp	r3, #0
 800d402:	d00b      	beq.n	800d41c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d404:	2100      	movs	r1, #0
 800d406:	6878      	ldr	r0, [r7, #4]
 800d408:	f7ff fe11 	bl	800d02e <dir_next>
 800d40c:	4603      	mov	r3, r0
 800d40e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d410:	7dfb      	ldrb	r3, [r7, #23]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d0c5      	beq.n	800d3a2 <dir_find+0x24>
 800d416:	e002      	b.n	800d41e <dir_find+0xa0>
		if (res != FR_OK) break;
 800d418:	bf00      	nop
 800d41a:	e000      	b.n	800d41e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d41c:	bf00      	nop

	return res;
 800d41e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d420:	4618      	mov	r0, r3
 800d422:	3718      	adds	r7, #24
 800d424:	46bd      	mov	sp, r7
 800d426:	bd80      	pop	{r7, pc}

0800d428 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b084      	sub	sp, #16
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800d436:	2101      	movs	r1, #1
 800d438:	6878      	ldr	r0, [r7, #4]
 800d43a:	f7ff febd 	bl	800d1b8 <dir_alloc>
 800d43e:	4603      	mov	r3, r0
 800d440:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d442:	7bfb      	ldrb	r3, [r7, #15]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d11c      	bne.n	800d482 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	69db      	ldr	r3, [r3, #28]
 800d44c:	4619      	mov	r1, r3
 800d44e:	68b8      	ldr	r0, [r7, #8]
 800d450:	f7ff f9f2 	bl	800c838 <move_window>
 800d454:	4603      	mov	r3, r0
 800d456:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d458:	7bfb      	ldrb	r3, [r7, #15]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d111      	bne.n	800d482 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	6a1b      	ldr	r3, [r3, #32]
 800d462:	2220      	movs	r2, #32
 800d464:	2100      	movs	r1, #0
 800d466:	4618      	mov	r0, r3
 800d468:	f7fe ffd9 	bl	800c41e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	6a18      	ldr	r0, [r3, #32]
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	3324      	adds	r3, #36	; 0x24
 800d474:	220b      	movs	r2, #11
 800d476:	4619      	mov	r1, r3
 800d478:	f7fe ffb0 	bl	800c3dc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800d47c:	68bb      	ldr	r3, [r7, #8]
 800d47e:	2201      	movs	r2, #1
 800d480:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d482:	7bfb      	ldrb	r3, [r7, #15]
}
 800d484:	4618      	mov	r0, r3
 800d486:	3710      	adds	r7, #16
 800d488:	46bd      	mov	sp, r7
 800d48a:	bd80      	pop	{r7, pc}

0800d48c <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b084      	sub	sp, #16
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	69db      	ldr	r3, [r3, #28]
 800d49e:	4619      	mov	r1, r3
 800d4a0:	68f8      	ldr	r0, [r7, #12]
 800d4a2:	f7ff f9c9 	bl	800c838 <move_window>
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 800d4aa:	7afb      	ldrb	r3, [r7, #11]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d106      	bne.n	800d4be <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	6a1b      	ldr	r3, [r3, #32]
 800d4b4:	22e5      	movs	r2, #229	; 0xe5
 800d4b6:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	2201      	movs	r2, #1
 800d4bc:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800d4be:	7afb      	ldrb	r3, [r7, #11]
}
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	3710      	adds	r7, #16
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bd80      	pop	{r7, pc}

0800d4c8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b086      	sub	sp, #24
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
 800d4d0:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	69db      	ldr	r3, [r3, #28]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d04e      	beq.n	800d57e <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	613b      	str	r3, [r7, #16]
 800d4e4:	693b      	ldr	r3, [r7, #16]
 800d4e6:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800d4e8:	e021      	b.n	800d52e <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	6a1a      	ldr	r2, [r3, #32]
 800d4ee:	697b      	ldr	r3, [r7, #20]
 800d4f0:	1c59      	adds	r1, r3, #1
 800d4f2:	6179      	str	r1, [r7, #20]
 800d4f4:	4413      	add	r3, r2
 800d4f6:	781b      	ldrb	r3, [r3, #0]
 800d4f8:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800d4fa:	7bfb      	ldrb	r3, [r7, #15]
 800d4fc:	2b20      	cmp	r3, #32
 800d4fe:	d100      	bne.n	800d502 <get_fileinfo+0x3a>
 800d500:	e015      	b.n	800d52e <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800d502:	7bfb      	ldrb	r3, [r7, #15]
 800d504:	2b05      	cmp	r3, #5
 800d506:	d101      	bne.n	800d50c <get_fileinfo+0x44>
 800d508:	23e5      	movs	r3, #229	; 0xe5
 800d50a:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800d50c:	697b      	ldr	r3, [r7, #20]
 800d50e:	2b09      	cmp	r3, #9
 800d510:	d106      	bne.n	800d520 <get_fileinfo+0x58>
 800d512:	693b      	ldr	r3, [r7, #16]
 800d514:	1c5a      	adds	r2, r3, #1
 800d516:	613a      	str	r2, [r7, #16]
 800d518:	683a      	ldr	r2, [r7, #0]
 800d51a:	4413      	add	r3, r2
 800d51c:	222e      	movs	r2, #46	; 0x2e
 800d51e:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800d520:	693b      	ldr	r3, [r7, #16]
 800d522:	1c5a      	adds	r2, r3, #1
 800d524:	613a      	str	r2, [r7, #16]
 800d526:	683a      	ldr	r2, [r7, #0]
 800d528:	4413      	add	r3, r2
 800d52a:	7bfa      	ldrb	r2, [r7, #15]
 800d52c:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800d52e:	697b      	ldr	r3, [r7, #20]
 800d530:	2b0a      	cmp	r3, #10
 800d532:	d9da      	bls.n	800d4ea <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800d534:	683a      	ldr	r2, [r7, #0]
 800d536:	693b      	ldr	r3, [r7, #16]
 800d538:	4413      	add	r3, r2
 800d53a:	3309      	adds	r3, #9
 800d53c:	2200      	movs	r2, #0
 800d53e:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	6a1b      	ldr	r3, [r3, #32]
 800d544:	7ada      	ldrb	r2, [r3, #11]
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	6a1b      	ldr	r3, [r3, #32]
 800d54e:	331c      	adds	r3, #28
 800d550:	4618      	mov	r0, r3
 800d552:	f7fe fed9 	bl	800c308 <ld_dword>
 800d556:	4602      	mov	r2, r0
 800d558:	683b      	ldr	r3, [r7, #0]
 800d55a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	6a1b      	ldr	r3, [r3, #32]
 800d560:	3316      	adds	r3, #22
 800d562:	4618      	mov	r0, r3
 800d564:	f7fe fed0 	bl	800c308 <ld_dword>
 800d568:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	b29a      	uxth	r2, r3
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	80da      	strh	r2, [r3, #6]
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	0c1b      	lsrs	r3, r3, #16
 800d576:	b29a      	uxth	r2, r3
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	809a      	strh	r2, [r3, #4]
 800d57c:	e000      	b.n	800d580 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d57e:	bf00      	nop
}
 800d580:	3718      	adds	r7, #24
 800d582:	46bd      	mov	sp, r7
 800d584:	bd80      	pop	{r7, pc}
	...

0800d588 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b088      	sub	sp, #32
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
 800d590:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	60fb      	str	r3, [r7, #12]
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	3324      	adds	r3, #36	; 0x24
 800d59c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800d59e:	220b      	movs	r2, #11
 800d5a0:	2120      	movs	r1, #32
 800d5a2:	68b8      	ldr	r0, [r7, #8]
 800d5a4:	f7fe ff3b 	bl	800c41e <mem_set>
	si = i = 0; ni = 8;
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	613b      	str	r3, [r7, #16]
 800d5ac:	693b      	ldr	r3, [r7, #16]
 800d5ae:	61fb      	str	r3, [r7, #28]
 800d5b0:	2308      	movs	r3, #8
 800d5b2:	617b      	str	r3, [r7, #20]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 800d5b4:	68fa      	ldr	r2, [r7, #12]
 800d5b6:	69fb      	ldr	r3, [r7, #28]
 800d5b8:	4413      	add	r3, r2
 800d5ba:	781b      	ldrb	r3, [r3, #0]
 800d5bc:	2b2e      	cmp	r3, #46	; 0x2e
 800d5be:	d12f      	bne.n	800d620 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 800d5c0:	69fb      	ldr	r3, [r7, #28]
 800d5c2:	1c5a      	adds	r2, r3, #1
 800d5c4:	61fa      	str	r2, [r7, #28]
 800d5c6:	68fa      	ldr	r2, [r7, #12]
 800d5c8:	4413      	add	r3, r2
 800d5ca:	781b      	ldrb	r3, [r3, #0]
 800d5cc:	76fb      	strb	r3, [r7, #27]
			if (c != '.' || si >= 3) break;
 800d5ce:	7efb      	ldrb	r3, [r7, #27]
 800d5d0:	2b2e      	cmp	r3, #46	; 0x2e
 800d5d2:	d10a      	bne.n	800d5ea <create_name+0x62>
 800d5d4:	69fb      	ldr	r3, [r7, #28]
 800d5d6:	2b02      	cmp	r3, #2
 800d5d8:	d807      	bhi.n	800d5ea <create_name+0x62>
			sfn[i++] = c;
 800d5da:	693b      	ldr	r3, [r7, #16]
 800d5dc:	1c5a      	adds	r2, r3, #1
 800d5de:	613a      	str	r2, [r7, #16]
 800d5e0:	68ba      	ldr	r2, [r7, #8]
 800d5e2:	4413      	add	r3, r2
 800d5e4:	7efa      	ldrb	r2, [r7, #27]
 800d5e6:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 800d5e8:	e7ea      	b.n	800d5c0 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 800d5ea:	7efb      	ldrb	r3, [r7, #27]
 800d5ec:	2b2f      	cmp	r3, #47	; 0x2f
 800d5ee:	d007      	beq.n	800d600 <create_name+0x78>
 800d5f0:	7efb      	ldrb	r3, [r7, #27]
 800d5f2:	2b5c      	cmp	r3, #92	; 0x5c
 800d5f4:	d004      	beq.n	800d600 <create_name+0x78>
 800d5f6:	7efb      	ldrb	r3, [r7, #27]
 800d5f8:	2b20      	cmp	r3, #32
 800d5fa:	d901      	bls.n	800d600 <create_name+0x78>
 800d5fc:	2306      	movs	r3, #6
 800d5fe:	e084      	b.n	800d70a <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 800d600:	68fa      	ldr	r2, [r7, #12]
 800d602:	69fb      	ldr	r3, [r7, #28]
 800d604:	441a      	add	r2, r3
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 800d60a:	7efb      	ldrb	r3, [r7, #27]
 800d60c:	2b20      	cmp	r3, #32
 800d60e:	d801      	bhi.n	800d614 <create_name+0x8c>
 800d610:	2224      	movs	r2, #36	; 0x24
 800d612:	e000      	b.n	800d616 <create_name+0x8e>
 800d614:	2220      	movs	r2, #32
 800d616:	68bb      	ldr	r3, [r7, #8]
 800d618:	330b      	adds	r3, #11
 800d61a:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800d61c:	2300      	movs	r3, #0
 800d61e:	e074      	b.n	800d70a <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800d620:	69fb      	ldr	r3, [r7, #28]
 800d622:	1c5a      	adds	r2, r3, #1
 800d624:	61fa      	str	r2, [r7, #28]
 800d626:	68fa      	ldr	r2, [r7, #12]
 800d628:	4413      	add	r3, r2
 800d62a:	781b      	ldrb	r3, [r3, #0]
 800d62c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d62e:	7efb      	ldrb	r3, [r7, #27]
 800d630:	2b20      	cmp	r3, #32
 800d632:	d94e      	bls.n	800d6d2 <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800d634:	7efb      	ldrb	r3, [r7, #27]
 800d636:	2b2f      	cmp	r3, #47	; 0x2f
 800d638:	d006      	beq.n	800d648 <create_name+0xc0>
 800d63a:	7efb      	ldrb	r3, [r7, #27]
 800d63c:	2b5c      	cmp	r3, #92	; 0x5c
 800d63e:	d110      	bne.n	800d662 <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d640:	e002      	b.n	800d648 <create_name+0xc0>
 800d642:	69fb      	ldr	r3, [r7, #28]
 800d644:	3301      	adds	r3, #1
 800d646:	61fb      	str	r3, [r7, #28]
 800d648:	68fa      	ldr	r2, [r7, #12]
 800d64a:	69fb      	ldr	r3, [r7, #28]
 800d64c:	4413      	add	r3, r2
 800d64e:	781b      	ldrb	r3, [r3, #0]
 800d650:	2b2f      	cmp	r3, #47	; 0x2f
 800d652:	d0f6      	beq.n	800d642 <create_name+0xba>
 800d654:	68fa      	ldr	r2, [r7, #12]
 800d656:	69fb      	ldr	r3, [r7, #28]
 800d658:	4413      	add	r3, r2
 800d65a:	781b      	ldrb	r3, [r3, #0]
 800d65c:	2b5c      	cmp	r3, #92	; 0x5c
 800d65e:	d0f0      	beq.n	800d642 <create_name+0xba>
			break;
 800d660:	e038      	b.n	800d6d4 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800d662:	7efb      	ldrb	r3, [r7, #27]
 800d664:	2b2e      	cmp	r3, #46	; 0x2e
 800d666:	d003      	beq.n	800d670 <create_name+0xe8>
 800d668:	693a      	ldr	r2, [r7, #16]
 800d66a:	697b      	ldr	r3, [r7, #20]
 800d66c:	429a      	cmp	r2, r3
 800d66e:	d30c      	bcc.n	800d68a <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800d670:	697b      	ldr	r3, [r7, #20]
 800d672:	2b0b      	cmp	r3, #11
 800d674:	d002      	beq.n	800d67c <create_name+0xf4>
 800d676:	7efb      	ldrb	r3, [r7, #27]
 800d678:	2b2e      	cmp	r3, #46	; 0x2e
 800d67a:	d001      	beq.n	800d680 <create_name+0xf8>
 800d67c:	2306      	movs	r3, #6
 800d67e:	e044      	b.n	800d70a <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 800d680:	2308      	movs	r3, #8
 800d682:	613b      	str	r3, [r7, #16]
 800d684:	230b      	movs	r3, #11
 800d686:	617b      	str	r3, [r7, #20]
			continue;
 800d688:	e022      	b.n	800d6d0 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 800d68a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	da04      	bge.n	800d69c <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800d692:	7efb      	ldrb	r3, [r7, #27]
 800d694:	3b80      	subs	r3, #128	; 0x80
 800d696:	4a1f      	ldr	r2, [pc, #124]	; (800d714 <create_name+0x18c>)
 800d698:	5cd3      	ldrb	r3, [r2, r3]
 800d69a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800d69c:	7efb      	ldrb	r3, [r7, #27]
 800d69e:	4619      	mov	r1, r3
 800d6a0:	481d      	ldr	r0, [pc, #116]	; (800d718 <create_name+0x190>)
 800d6a2:	f7fe fefe 	bl	800c4a2 <chk_chr>
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d001      	beq.n	800d6b0 <create_name+0x128>
 800d6ac:	2306      	movs	r3, #6
 800d6ae:	e02c      	b.n	800d70a <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800d6b0:	7efb      	ldrb	r3, [r7, #27]
 800d6b2:	2b60      	cmp	r3, #96	; 0x60
 800d6b4:	d905      	bls.n	800d6c2 <create_name+0x13a>
 800d6b6:	7efb      	ldrb	r3, [r7, #27]
 800d6b8:	2b7a      	cmp	r3, #122	; 0x7a
 800d6ba:	d802      	bhi.n	800d6c2 <create_name+0x13a>
 800d6bc:	7efb      	ldrb	r3, [r7, #27]
 800d6be:	3b20      	subs	r3, #32
 800d6c0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800d6c2:	693b      	ldr	r3, [r7, #16]
 800d6c4:	1c5a      	adds	r2, r3, #1
 800d6c6:	613a      	str	r2, [r7, #16]
 800d6c8:	68ba      	ldr	r2, [r7, #8]
 800d6ca:	4413      	add	r3, r2
 800d6cc:	7efa      	ldrb	r2, [r7, #27]
 800d6ce:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800d6d0:	e7a6      	b.n	800d620 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d6d2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800d6d4:	68fa      	ldr	r2, [r7, #12]
 800d6d6:	69fb      	ldr	r3, [r7, #28]
 800d6d8:	441a      	add	r2, r3
 800d6da:	683b      	ldr	r3, [r7, #0]
 800d6dc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800d6de:	693b      	ldr	r3, [r7, #16]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d101      	bne.n	800d6e8 <create_name+0x160>
 800d6e4:	2306      	movs	r3, #6
 800d6e6:	e010      	b.n	800d70a <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	781b      	ldrb	r3, [r3, #0]
 800d6ec:	2be5      	cmp	r3, #229	; 0xe5
 800d6ee:	d102      	bne.n	800d6f6 <create_name+0x16e>
 800d6f0:	68bb      	ldr	r3, [r7, #8]
 800d6f2:	2205      	movs	r2, #5
 800d6f4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d6f6:	7efb      	ldrb	r3, [r7, #27]
 800d6f8:	2b20      	cmp	r3, #32
 800d6fa:	d801      	bhi.n	800d700 <create_name+0x178>
 800d6fc:	2204      	movs	r2, #4
 800d6fe:	e000      	b.n	800d702 <create_name+0x17a>
 800d700:	2200      	movs	r2, #0
 800d702:	68bb      	ldr	r3, [r7, #8]
 800d704:	330b      	adds	r3, #11
 800d706:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800d708:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800d70a:	4618      	mov	r0, r3
 800d70c:	3720      	adds	r7, #32
 800d70e:	46bd      	mov	sp, r7
 800d710:	bd80      	pop	{r7, pc}
 800d712:	bf00      	nop
 800d714:	080116b0 	.word	0x080116b0
 800d718:	08011630 	.word	0x08011630

0800d71c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b086      	sub	sp, #24
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
 800d724:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d72a:	693b      	ldr	r3, [r7, #16]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 800d730:	683b      	ldr	r3, [r7, #0]
 800d732:	781b      	ldrb	r3, [r3, #0]
 800d734:	2b2f      	cmp	r3, #47	; 0x2f
 800d736:	d00b      	beq.n	800d750 <follow_path+0x34>
 800d738:	683b      	ldr	r3, [r7, #0]
 800d73a:	781b      	ldrb	r3, [r3, #0]
 800d73c:	2b5c      	cmp	r3, #92	; 0x5c
 800d73e:	d007      	beq.n	800d750 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	695a      	ldr	r2, [r3, #20]
 800d744:	693b      	ldr	r3, [r7, #16]
 800d746:	609a      	str	r2, [r3, #8]
 800d748:	e00d      	b.n	800d766 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	3301      	adds	r3, #1
 800d74e:	603b      	str	r3, [r7, #0]
 800d750:	683b      	ldr	r3, [r7, #0]
 800d752:	781b      	ldrb	r3, [r3, #0]
 800d754:	2b2f      	cmp	r3, #47	; 0x2f
 800d756:	d0f8      	beq.n	800d74a <follow_path+0x2e>
 800d758:	683b      	ldr	r3, [r7, #0]
 800d75a:	781b      	ldrb	r3, [r3, #0]
 800d75c:	2b5c      	cmp	r3, #92	; 0x5c
 800d75e:	d0f4      	beq.n	800d74a <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 800d760:	693b      	ldr	r3, [r7, #16]
 800d762:	2200      	movs	r2, #0
 800d764:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	781b      	ldrb	r3, [r3, #0]
 800d76a:	2b1f      	cmp	r3, #31
 800d76c:	d80a      	bhi.n	800d784 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	2280      	movs	r2, #128	; 0x80
 800d772:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d776:	2100      	movs	r1, #0
 800d778:	6878      	ldr	r0, [r7, #4]
 800d77a:	f7ff fbdd 	bl	800cf38 <dir_sdi>
 800d77e:	4603      	mov	r3, r0
 800d780:	75fb      	strb	r3, [r7, #23]
 800d782:	e056      	b.n	800d832 <follow_path+0x116>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d784:	463b      	mov	r3, r7
 800d786:	4619      	mov	r1, r3
 800d788:	6878      	ldr	r0, [r7, #4]
 800d78a:	f7ff fefd 	bl	800d588 <create_name>
 800d78e:	4603      	mov	r3, r0
 800d790:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d792:	7dfb      	ldrb	r3, [r7, #23]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d147      	bne.n	800d828 <follow_path+0x10c>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d798:	6878      	ldr	r0, [r7, #4]
 800d79a:	f7ff fdf0 	bl	800d37e <dir_find>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d7a8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d7aa:	7dfb      	ldrb	r3, [r7, #23]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d01b      	beq.n	800d7e8 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d7b0:	7dfb      	ldrb	r3, [r7, #23]
 800d7b2:	2b04      	cmp	r3, #4
 800d7b4:	d13a      	bne.n	800d82c <follow_path+0x110>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 800d7b6:	7afb      	ldrb	r3, [r7, #11]
 800d7b8:	f003 0320 	and.w	r3, r3, #32
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d00b      	beq.n	800d7d8 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800d7c0:	7afb      	ldrb	r3, [r7, #11]
 800d7c2:	f003 0304 	and.w	r3, r3, #4
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d02c      	beq.n	800d824 <follow_path+0x108>
						dp->fn[NSFLAG] = NS_NONAME;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2280      	movs	r2, #128	; 0x80
 800d7ce:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 800d7d6:	e029      	b.n	800d82c <follow_path+0x110>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d7d8:	7afb      	ldrb	r3, [r7, #11]
 800d7da:	f003 0304 	and.w	r3, r3, #4
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d124      	bne.n	800d82c <follow_path+0x110>
 800d7e2:	2305      	movs	r3, #5
 800d7e4:	75fb      	strb	r3, [r7, #23]
				break;
 800d7e6:	e021      	b.n	800d82c <follow_path+0x110>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d7e8:	7afb      	ldrb	r3, [r7, #11]
 800d7ea:	f003 0304 	and.w	r3, r3, #4
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d11e      	bne.n	800d830 <follow_path+0x114>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d7f2:	693b      	ldr	r3, [r7, #16]
 800d7f4:	799b      	ldrb	r3, [r3, #6]
 800d7f6:	f003 0310 	and.w	r3, r3, #16
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d102      	bne.n	800d804 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 800d7fe:	2305      	movs	r3, #5
 800d800:	75fb      	strb	r3, [r7, #23]
 800d802:	e016      	b.n	800d832 <follow_path+0x116>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	695b      	ldr	r3, [r3, #20]
 800d80e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d812:	4413      	add	r3, r2
 800d814:	4619      	mov	r1, r3
 800d816:	68f8      	ldr	r0, [r7, #12]
 800d818:	f7ff fd15 	bl	800d246 <ld_clust>
 800d81c:	4602      	mov	r2, r0
 800d81e:	693b      	ldr	r3, [r7, #16]
 800d820:	609a      	str	r2, [r3, #8]
 800d822:	e7af      	b.n	800d784 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800d824:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d826:	e7ad      	b.n	800d784 <follow_path+0x68>
			if (res != FR_OK) break;
 800d828:	bf00      	nop
 800d82a:	e002      	b.n	800d832 <follow_path+0x116>
				break;
 800d82c:	bf00      	nop
 800d82e:	e000      	b.n	800d832 <follow_path+0x116>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d830:	bf00      	nop
			}
		}
	}

	return res;
 800d832:	7dfb      	ldrb	r3, [r7, #23]
}
 800d834:	4618      	mov	r0, r3
 800d836:	3718      	adds	r7, #24
 800d838:	46bd      	mov	sp, r7
 800d83a:	bd80      	pop	{r7, pc}

0800d83c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d83c:	b480      	push	{r7}
 800d83e:	b087      	sub	sp, #28
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d844:	f04f 33ff 	mov.w	r3, #4294967295
 800d848:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d031      	beq.n	800d8b6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	617b      	str	r3, [r7, #20]
 800d858:	e002      	b.n	800d860 <get_ldnumber+0x24>
 800d85a:	697b      	ldr	r3, [r7, #20]
 800d85c:	3301      	adds	r3, #1
 800d85e:	617b      	str	r3, [r7, #20]
 800d860:	697b      	ldr	r3, [r7, #20]
 800d862:	781b      	ldrb	r3, [r3, #0]
 800d864:	2b20      	cmp	r3, #32
 800d866:	d903      	bls.n	800d870 <get_ldnumber+0x34>
 800d868:	697b      	ldr	r3, [r7, #20]
 800d86a:	781b      	ldrb	r3, [r3, #0]
 800d86c:	2b3a      	cmp	r3, #58	; 0x3a
 800d86e:	d1f4      	bne.n	800d85a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d870:	697b      	ldr	r3, [r7, #20]
 800d872:	781b      	ldrb	r3, [r3, #0]
 800d874:	2b3a      	cmp	r3, #58	; 0x3a
 800d876:	d11c      	bne.n	800d8b2 <get_ldnumber+0x76>
			tp = *path;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	1c5a      	adds	r2, r3, #1
 800d882:	60fa      	str	r2, [r7, #12]
 800d884:	781b      	ldrb	r3, [r3, #0]
 800d886:	3b30      	subs	r3, #48	; 0x30
 800d888:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	2b09      	cmp	r3, #9
 800d88e:	d80e      	bhi.n	800d8ae <get_ldnumber+0x72>
 800d890:	68fa      	ldr	r2, [r7, #12]
 800d892:	697b      	ldr	r3, [r7, #20]
 800d894:	429a      	cmp	r2, r3
 800d896:	d10a      	bne.n	800d8ae <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d898:	68bb      	ldr	r3, [r7, #8]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d107      	bne.n	800d8ae <get_ldnumber+0x72>
					vol = (int)i;
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d8a2:	697b      	ldr	r3, [r7, #20]
 800d8a4:	3301      	adds	r3, #1
 800d8a6:	617b      	str	r3, [r7, #20]
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	697a      	ldr	r2, [r7, #20]
 800d8ac:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d8ae:	693b      	ldr	r3, [r7, #16]
 800d8b0:	e002      	b.n	800d8b8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d8b6:	693b      	ldr	r3, [r7, #16]
}
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	371c      	adds	r7, #28
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c2:	4770      	bx	lr

0800d8c4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b082      	sub	sp, #8
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
 800d8cc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	70da      	strb	r2, [r3, #3]
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	f04f 32ff 	mov.w	r2, #4294967295
 800d8da:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d8dc:	6839      	ldr	r1, [r7, #0]
 800d8de:	6878      	ldr	r0, [r7, #4]
 800d8e0:	f7fe ffaa 	bl	800c838 <move_window>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d001      	beq.n	800d8ee <check_fs+0x2a>
 800d8ea:	2304      	movs	r3, #4
 800d8ec:	e038      	b.n	800d960 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	3334      	adds	r3, #52	; 0x34
 800d8f2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	f7fe fcee 	bl	800c2d8 <ld_word>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	461a      	mov	r2, r3
 800d900:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d904:	429a      	cmp	r2, r3
 800d906:	d001      	beq.n	800d90c <check_fs+0x48>
 800d908:	2303      	movs	r3, #3
 800d90a:	e029      	b.n	800d960 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d912:	2be9      	cmp	r3, #233	; 0xe9
 800d914:	d009      	beq.n	800d92a <check_fs+0x66>
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d91c:	2beb      	cmp	r3, #235	; 0xeb
 800d91e:	d11e      	bne.n	800d95e <check_fs+0x9a>
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800d926:	2b90      	cmp	r3, #144	; 0x90
 800d928:	d119      	bne.n	800d95e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	3334      	adds	r3, #52	; 0x34
 800d92e:	3336      	adds	r3, #54	; 0x36
 800d930:	4618      	mov	r0, r3
 800d932:	f7fe fce9 	bl	800c308 <ld_dword>
 800d936:	4603      	mov	r3, r0
 800d938:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d93c:	4a0a      	ldr	r2, [pc, #40]	; (800d968 <check_fs+0xa4>)
 800d93e:	4293      	cmp	r3, r2
 800d940:	d101      	bne.n	800d946 <check_fs+0x82>
 800d942:	2300      	movs	r3, #0
 800d944:	e00c      	b.n	800d960 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	3334      	adds	r3, #52	; 0x34
 800d94a:	3352      	adds	r3, #82	; 0x52
 800d94c:	4618      	mov	r0, r3
 800d94e:	f7fe fcdb 	bl	800c308 <ld_dword>
 800d952:	4603      	mov	r3, r0
 800d954:	4a05      	ldr	r2, [pc, #20]	; (800d96c <check_fs+0xa8>)
 800d956:	4293      	cmp	r3, r2
 800d958:	d101      	bne.n	800d95e <check_fs+0x9a>
 800d95a:	2300      	movs	r3, #0
 800d95c:	e000      	b.n	800d960 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d95e:	2302      	movs	r3, #2
}
 800d960:	4618      	mov	r0, r3
 800d962:	3708      	adds	r7, #8
 800d964:	46bd      	mov	sp, r7
 800d966:	bd80      	pop	{r7, pc}
 800d968:	00544146 	.word	0x00544146
 800d96c:	33544146 	.word	0x33544146

0800d970 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b096      	sub	sp, #88	; 0x58
 800d974:	af00      	add	r7, sp, #0
 800d976:	60f8      	str	r0, [r7, #12]
 800d978:	60b9      	str	r1, [r7, #8]
 800d97a:	4613      	mov	r3, r2
 800d97c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d97e:	68bb      	ldr	r3, [r7, #8]
 800d980:	2200      	movs	r2, #0
 800d982:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d984:	68f8      	ldr	r0, [r7, #12]
 800d986:	f7ff ff59 	bl	800d83c <get_ldnumber>
 800d98a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d98c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d98e:	2b00      	cmp	r3, #0
 800d990:	da01      	bge.n	800d996 <find_volume+0x26>
 800d992:	230b      	movs	r3, #11
 800d994:	e231      	b.n	800ddfa <find_volume+0x48a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d996:	4aa8      	ldr	r2, [pc, #672]	; (800dc38 <find_volume+0x2c8>)
 800d998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d99a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d99e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d101      	bne.n	800d9aa <find_volume+0x3a>
 800d9a6:	230c      	movs	r3, #12
 800d9a8:	e227      	b.n	800ddfa <find_volume+0x48a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d9aa:	68bb      	ldr	r3, [r7, #8]
 800d9ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d9ae:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d9b0:	79fb      	ldrb	r3, [r7, #7]
 800d9b2:	f023 0301 	bic.w	r3, r3, #1
 800d9b6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ba:	781b      	ldrb	r3, [r3, #0]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d01a      	beq.n	800d9f6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9c2:	785b      	ldrb	r3, [r3, #1]
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	f7fe fbe9 	bl	800c19c <disk_status>
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d9d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d9d4:	f003 0301 	and.w	r3, r3, #1
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d10c      	bne.n	800d9f6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d9dc:	79fb      	ldrb	r3, [r7, #7]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d007      	beq.n	800d9f2 <find_volume+0x82>
 800d9e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d9e6:	f003 0304 	and.w	r3, r3, #4
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d001      	beq.n	800d9f2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d9ee:	230a      	movs	r3, #10
 800d9f0:	e203      	b.n	800ddfa <find_volume+0x48a>
			}
			return FR_OK;				/* The file system object is valid */
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	e201      	b.n	800ddfa <find_volume+0x48a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d9f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d9fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9fe:	b2da      	uxtb	r2, r3
 800da00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da02:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800da04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da06:	785b      	ldrb	r3, [r3, #1]
 800da08:	4618      	mov	r0, r3
 800da0a:	f7fe fbe1 	bl	800c1d0 <disk_initialize>
 800da0e:	4603      	mov	r3, r0
 800da10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800da14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800da18:	f003 0301 	and.w	r3, r3, #1
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d001      	beq.n	800da24 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800da20:	2303      	movs	r3, #3
 800da22:	e1ea      	b.n	800ddfa <find_volume+0x48a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800da24:	79fb      	ldrb	r3, [r7, #7]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d007      	beq.n	800da3a <find_volume+0xca>
 800da2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800da2e:	f003 0304 	and.w	r3, r3, #4
 800da32:	2b00      	cmp	r3, #0
 800da34:	d001      	beq.n	800da3a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800da36:	230a      	movs	r3, #10
 800da38:	e1df      	b.n	800ddfa <find_volume+0x48a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800da3a:	2300      	movs	r3, #0
 800da3c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800da3e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800da40:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800da42:	f7ff ff3f 	bl	800d8c4 <check_fs>
 800da46:	4603      	mov	r3, r0
 800da48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800da4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800da50:	2b02      	cmp	r3, #2
 800da52:	d14b      	bne.n	800daec <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800da54:	2300      	movs	r3, #0
 800da56:	643b      	str	r3, [r7, #64]	; 0x40
 800da58:	e01f      	b.n	800da9a <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800da5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da5c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800da60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da62:	011b      	lsls	r3, r3, #4
 800da64:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800da68:	4413      	add	r3, r2
 800da6a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800da6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da6e:	3304      	adds	r3, #4
 800da70:	781b      	ldrb	r3, [r3, #0]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d006      	beq.n	800da84 <find_volume+0x114>
 800da76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da78:	3308      	adds	r3, #8
 800da7a:	4618      	mov	r0, r3
 800da7c:	f7fe fc44 	bl	800c308 <ld_dword>
 800da80:	4602      	mov	r2, r0
 800da82:	e000      	b.n	800da86 <find_volume+0x116>
 800da84:	2200      	movs	r2, #0
 800da86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da88:	009b      	lsls	r3, r3, #2
 800da8a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800da8e:	440b      	add	r3, r1
 800da90:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800da94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da96:	3301      	adds	r3, #1
 800da98:	643b      	str	r3, [r7, #64]	; 0x40
 800da9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da9c:	2b03      	cmp	r3, #3
 800da9e:	d9dc      	bls.n	800da5a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800daa0:	2300      	movs	r3, #0
 800daa2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800daa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d002      	beq.n	800dab0 <find_volume+0x140>
 800daaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800daac:	3b01      	subs	r3, #1
 800daae:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800dab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dab2:	009b      	lsls	r3, r3, #2
 800dab4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800dab8:	4413      	add	r3, r2
 800daba:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800dabe:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800dac0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d005      	beq.n	800dad2 <find_volume+0x162>
 800dac6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dac8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800daca:	f7ff fefb 	bl	800d8c4 <check_fs>
 800dace:	4603      	mov	r3, r0
 800dad0:	e000      	b.n	800dad4 <find_volume+0x164>
 800dad2:	2303      	movs	r3, #3
 800dad4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800dad8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dadc:	2b01      	cmp	r3, #1
 800dade:	d905      	bls.n	800daec <find_volume+0x17c>
 800dae0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dae2:	3301      	adds	r3, #1
 800dae4:	643b      	str	r3, [r7, #64]	; 0x40
 800dae6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dae8:	2b03      	cmp	r3, #3
 800daea:	d9e1      	bls.n	800dab0 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800daec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800daf0:	2b04      	cmp	r3, #4
 800daf2:	d101      	bne.n	800daf8 <find_volume+0x188>
 800daf4:	2301      	movs	r3, #1
 800daf6:	e180      	b.n	800ddfa <find_volume+0x48a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800daf8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dafc:	2b01      	cmp	r3, #1
 800dafe:	d901      	bls.n	800db04 <find_volume+0x194>
 800db00:	230d      	movs	r3, #13
 800db02:	e17a      	b.n	800ddfa <find_volume+0x48a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800db04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db06:	3334      	adds	r3, #52	; 0x34
 800db08:	330b      	adds	r3, #11
 800db0a:	4618      	mov	r0, r3
 800db0c:	f7fe fbe4 	bl	800c2d8 <ld_word>
 800db10:	4603      	mov	r3, r0
 800db12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800db16:	d001      	beq.n	800db1c <find_volume+0x1ac>
 800db18:	230d      	movs	r3, #13
 800db1a:	e16e      	b.n	800ddfa <find_volume+0x48a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800db1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db1e:	3334      	adds	r3, #52	; 0x34
 800db20:	3316      	adds	r3, #22
 800db22:	4618      	mov	r0, r3
 800db24:	f7fe fbd8 	bl	800c2d8 <ld_word>
 800db28:	4603      	mov	r3, r0
 800db2a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800db2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d106      	bne.n	800db40 <find_volume+0x1d0>
 800db32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db34:	3334      	adds	r3, #52	; 0x34
 800db36:	3324      	adds	r3, #36	; 0x24
 800db38:	4618      	mov	r0, r3
 800db3a:	f7fe fbe5 	bl	800c308 <ld_dword>
 800db3e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800db40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800db44:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800db46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db48:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800db4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db4e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800db50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db52:	789b      	ldrb	r3, [r3, #2]
 800db54:	2b01      	cmp	r3, #1
 800db56:	d005      	beq.n	800db64 <find_volume+0x1f4>
 800db58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db5a:	789b      	ldrb	r3, [r3, #2]
 800db5c:	2b02      	cmp	r3, #2
 800db5e:	d001      	beq.n	800db64 <find_volume+0x1f4>
 800db60:	230d      	movs	r3, #13
 800db62:	e14a      	b.n	800ddfa <find_volume+0x48a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800db64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db66:	789b      	ldrb	r3, [r3, #2]
 800db68:	461a      	mov	r2, r3
 800db6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db6c:	fb02 f303 	mul.w	r3, r2, r3
 800db70:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800db72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800db78:	b29a      	uxth	r2, r3
 800db7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db7c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800db7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db80:	895b      	ldrh	r3, [r3, #10]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d008      	beq.n	800db98 <find_volume+0x228>
 800db86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db88:	895b      	ldrh	r3, [r3, #10]
 800db8a:	461a      	mov	r2, r3
 800db8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db8e:	895b      	ldrh	r3, [r3, #10]
 800db90:	3b01      	subs	r3, #1
 800db92:	4013      	ands	r3, r2
 800db94:	2b00      	cmp	r3, #0
 800db96:	d001      	beq.n	800db9c <find_volume+0x22c>
 800db98:	230d      	movs	r3, #13
 800db9a:	e12e      	b.n	800ddfa <find_volume+0x48a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800db9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db9e:	3334      	adds	r3, #52	; 0x34
 800dba0:	3311      	adds	r3, #17
 800dba2:	4618      	mov	r0, r3
 800dba4:	f7fe fb98 	bl	800c2d8 <ld_word>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	461a      	mov	r2, r3
 800dbac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbae:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800dbb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbb2:	891b      	ldrh	r3, [r3, #8]
 800dbb4:	f003 030f 	and.w	r3, r3, #15
 800dbb8:	b29b      	uxth	r3, r3
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d001      	beq.n	800dbc2 <find_volume+0x252>
 800dbbe:	230d      	movs	r3, #13
 800dbc0:	e11b      	b.n	800ddfa <find_volume+0x48a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800dbc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbc4:	3334      	adds	r3, #52	; 0x34
 800dbc6:	3313      	adds	r3, #19
 800dbc8:	4618      	mov	r0, r3
 800dbca:	f7fe fb85 	bl	800c2d8 <ld_word>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800dbd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d106      	bne.n	800dbe6 <find_volume+0x276>
 800dbd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbda:	3334      	adds	r3, #52	; 0x34
 800dbdc:	3320      	adds	r3, #32
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f7fe fb92 	bl	800c308 <ld_dword>
 800dbe4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800dbe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbe8:	3334      	adds	r3, #52	; 0x34
 800dbea:	330e      	adds	r3, #14
 800dbec:	4618      	mov	r0, r3
 800dbee:	f7fe fb73 	bl	800c2d8 <ld_word>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800dbf6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d101      	bne.n	800dc00 <find_volume+0x290>
 800dbfc:	230d      	movs	r3, #13
 800dbfe:	e0fc      	b.n	800ddfa <find_volume+0x48a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800dc00:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800dc02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc04:	4413      	add	r3, r2
 800dc06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dc08:	8912      	ldrh	r2, [r2, #8]
 800dc0a:	0912      	lsrs	r2, r2, #4
 800dc0c:	b292      	uxth	r2, r2
 800dc0e:	4413      	add	r3, r2
 800dc10:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800dc12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dc14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc16:	429a      	cmp	r2, r3
 800dc18:	d201      	bcs.n	800dc1e <find_volume+0x2ae>
 800dc1a:	230d      	movs	r3, #13
 800dc1c:	e0ed      	b.n	800ddfa <find_volume+0x48a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800dc1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dc20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc22:	1ad3      	subs	r3, r2, r3
 800dc24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dc26:	8952      	ldrh	r2, [r2, #10]
 800dc28:	fbb3 f3f2 	udiv	r3, r3, r2
 800dc2c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800dc2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d103      	bne.n	800dc3c <find_volume+0x2cc>
 800dc34:	230d      	movs	r3, #13
 800dc36:	e0e0      	b.n	800ddfa <find_volume+0x48a>
 800dc38:	20000140 	.word	0x20000140
		fmt = FS_FAT32;
 800dc3c:	2303      	movs	r3, #3
 800dc3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800dc42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc44:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800dc48:	4293      	cmp	r3, r2
 800dc4a:	d802      	bhi.n	800dc52 <find_volume+0x2e2>
 800dc4c:	2302      	movs	r3, #2
 800dc4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800dc52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc54:	f640 72f5 	movw	r2, #4085	; 0xff5
 800dc58:	4293      	cmp	r3, r2
 800dc5a:	d802      	bhi.n	800dc62 <find_volume+0x2f2>
 800dc5c:	2301      	movs	r3, #1
 800dc5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800dc62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc64:	1c9a      	adds	r2, r3, #2
 800dc66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc68:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800dc6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc6c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dc6e:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800dc70:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800dc72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc74:	441a      	add	r2, r3
 800dc76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc78:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800dc7a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dc7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc7e:	441a      	add	r2, r3
 800dc80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc82:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800dc84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dc88:	2b03      	cmp	r3, #3
 800dc8a:	d11e      	bne.n	800dcca <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800dc8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc8e:	3334      	adds	r3, #52	; 0x34
 800dc90:	332a      	adds	r3, #42	; 0x2a
 800dc92:	4618      	mov	r0, r3
 800dc94:	f7fe fb20 	bl	800c2d8 <ld_word>
 800dc98:	4603      	mov	r3, r0
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d001      	beq.n	800dca2 <find_volume+0x332>
 800dc9e:	230d      	movs	r3, #13
 800dca0:	e0ab      	b.n	800ddfa <find_volume+0x48a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800dca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dca4:	891b      	ldrh	r3, [r3, #8]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d001      	beq.n	800dcae <find_volume+0x33e>
 800dcaa:	230d      	movs	r3, #13
 800dcac:	e0a5      	b.n	800ddfa <find_volume+0x48a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800dcae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcb0:	3334      	adds	r3, #52	; 0x34
 800dcb2:	332c      	adds	r3, #44	; 0x2c
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	f7fe fb27 	bl	800c308 <ld_dword>
 800dcba:	4602      	mov	r2, r0
 800dcbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcbe:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800dcc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcc2:	699b      	ldr	r3, [r3, #24]
 800dcc4:	009b      	lsls	r3, r3, #2
 800dcc6:	647b      	str	r3, [r7, #68]	; 0x44
 800dcc8:	e01f      	b.n	800dd0a <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800dcca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dccc:	891b      	ldrh	r3, [r3, #8]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d101      	bne.n	800dcd6 <find_volume+0x366>
 800dcd2:	230d      	movs	r3, #13
 800dcd4:	e091      	b.n	800ddfa <find_volume+0x48a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800dcd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dcda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcdc:	441a      	add	r2, r3
 800dcde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dce0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800dce2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dce6:	2b02      	cmp	r3, #2
 800dce8:	d103      	bne.n	800dcf2 <find_volume+0x382>
 800dcea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcec:	699b      	ldr	r3, [r3, #24]
 800dcee:	005b      	lsls	r3, r3, #1
 800dcf0:	e00a      	b.n	800dd08 <find_volume+0x398>
 800dcf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcf4:	699a      	ldr	r2, [r3, #24]
 800dcf6:	4613      	mov	r3, r2
 800dcf8:	005b      	lsls	r3, r3, #1
 800dcfa:	4413      	add	r3, r2
 800dcfc:	085a      	lsrs	r2, r3, #1
 800dcfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd00:	699b      	ldr	r3, [r3, #24]
 800dd02:	f003 0301 	and.w	r3, r3, #1
 800dd06:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800dd08:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800dd0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd0c:	69da      	ldr	r2, [r3, #28]
 800dd0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd10:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800dd14:	0a5b      	lsrs	r3, r3, #9
 800dd16:	429a      	cmp	r2, r3
 800dd18:	d201      	bcs.n	800dd1e <find_volume+0x3ae>
 800dd1a:	230d      	movs	r3, #13
 800dd1c:	e06d      	b.n	800ddfa <find_volume+0x48a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800dd1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd20:	f04f 32ff 	mov.w	r2, #4294967295
 800dd24:	611a      	str	r2, [r3, #16]
 800dd26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd28:	691a      	ldr	r2, [r3, #16]
 800dd2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd2c:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800dd2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd30:	2280      	movs	r2, #128	; 0x80
 800dd32:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800dd34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dd38:	2b03      	cmp	r3, #3
 800dd3a:	d149      	bne.n	800ddd0 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800dd3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd3e:	3334      	adds	r3, #52	; 0x34
 800dd40:	3330      	adds	r3, #48	; 0x30
 800dd42:	4618      	mov	r0, r3
 800dd44:	f7fe fac8 	bl	800c2d8 <ld_word>
 800dd48:	4603      	mov	r3, r0
 800dd4a:	2b01      	cmp	r3, #1
 800dd4c:	d140      	bne.n	800ddd0 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800dd4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd50:	3301      	adds	r3, #1
 800dd52:	4619      	mov	r1, r3
 800dd54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dd56:	f7fe fd6f 	bl	800c838 <move_window>
 800dd5a:	4603      	mov	r3, r0
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d137      	bne.n	800ddd0 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800dd60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd62:	2200      	movs	r2, #0
 800dd64:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800dd66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd68:	3334      	adds	r3, #52	; 0x34
 800dd6a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dd6e:	4618      	mov	r0, r3
 800dd70:	f7fe fab2 	bl	800c2d8 <ld_word>
 800dd74:	4603      	mov	r3, r0
 800dd76:	461a      	mov	r2, r3
 800dd78:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	d127      	bne.n	800ddd0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800dd80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd82:	3334      	adds	r3, #52	; 0x34
 800dd84:	4618      	mov	r0, r3
 800dd86:	f7fe fabf 	bl	800c308 <ld_dword>
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	4a1d      	ldr	r2, [pc, #116]	; (800de04 <find_volume+0x494>)
 800dd8e:	4293      	cmp	r3, r2
 800dd90:	d11e      	bne.n	800ddd0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800dd92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd94:	3334      	adds	r3, #52	; 0x34
 800dd96:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	f7fe fab4 	bl	800c308 <ld_dword>
 800dda0:	4603      	mov	r3, r0
 800dda2:	4a19      	ldr	r2, [pc, #100]	; (800de08 <find_volume+0x498>)
 800dda4:	4293      	cmp	r3, r2
 800dda6:	d113      	bne.n	800ddd0 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800dda8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddaa:	3334      	adds	r3, #52	; 0x34
 800ddac:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	f7fe faa9 	bl	800c308 <ld_dword>
 800ddb6:	4602      	mov	r2, r0
 800ddb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddba:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ddbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddbe:	3334      	adds	r3, #52	; 0x34
 800ddc0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	f7fe fa9f 	bl	800c308 <ld_dword>
 800ddca:	4602      	mov	r2, r0
 800ddcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddce:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ddd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddd2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ddd6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ddd8:	4b0c      	ldr	r3, [pc, #48]	; (800de0c <find_volume+0x49c>)
 800ddda:	881b      	ldrh	r3, [r3, #0]
 800dddc:	3301      	adds	r3, #1
 800ddde:	b29a      	uxth	r2, r3
 800dde0:	4b0a      	ldr	r3, [pc, #40]	; (800de0c <find_volume+0x49c>)
 800dde2:	801a      	strh	r2, [r3, #0]
 800dde4:	4b09      	ldr	r3, [pc, #36]	; (800de0c <find_volume+0x49c>)
 800dde6:	881a      	ldrh	r2, [r3, #0]
 800dde8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddea:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 800ddec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddee:	2200      	movs	r2, #0
 800ddf0:	615a      	str	r2, [r3, #20]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ddf2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ddf4:	f7fe fcb8 	bl	800c768 <clear_lock>
#endif
	return FR_OK;
 800ddf8:	2300      	movs	r3, #0
}
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	3758      	adds	r7, #88	; 0x58
 800ddfe:	46bd      	mov	sp, r7
 800de00:	bd80      	pop	{r7, pc}
 800de02:	bf00      	nop
 800de04:	41615252 	.word	0x41615252
 800de08:	61417272 	.word	0x61417272
 800de0c:	20000144 	.word	0x20000144

0800de10 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b084      	sub	sp, #16
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
 800de18:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800de1a:	2309      	movs	r3, #9
 800de1c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d01c      	beq.n	800de5e <validate+0x4e>
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d018      	beq.n	800de5e <validate+0x4e>
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	781b      	ldrb	r3, [r3, #0]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d013      	beq.n	800de5e <validate+0x4e>
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	889a      	ldrh	r2, [r3, #4]
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	88db      	ldrh	r3, [r3, #6]
 800de40:	429a      	cmp	r2, r3
 800de42:	d10c      	bne.n	800de5e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	785b      	ldrb	r3, [r3, #1]
 800de4a:	4618      	mov	r0, r3
 800de4c:	f7fe f9a6 	bl	800c19c <disk_status>
 800de50:	4603      	mov	r3, r0
 800de52:	f003 0301 	and.w	r3, r3, #1
 800de56:	2b00      	cmp	r3, #0
 800de58:	d101      	bne.n	800de5e <validate+0x4e>
			res = FR_OK;
 800de5a:	2300      	movs	r3, #0
 800de5c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800de5e:	7bfb      	ldrb	r3, [r7, #15]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d102      	bne.n	800de6a <validate+0x5a>
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	e000      	b.n	800de6c <validate+0x5c>
 800de6a:	2300      	movs	r3, #0
 800de6c:	683a      	ldr	r2, [r7, #0]
 800de6e:	6013      	str	r3, [r2, #0]
	return res;
 800de70:	7bfb      	ldrb	r3, [r7, #15]
}
 800de72:	4618      	mov	r0, r3
 800de74:	3710      	adds	r7, #16
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}
	...

0800de7c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b088      	sub	sp, #32
 800de80:	af00      	add	r7, sp, #0
 800de82:	60f8      	str	r0, [r7, #12]
 800de84:	60b9      	str	r1, [r7, #8]
 800de86:	4613      	mov	r3, r2
 800de88:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800de8a:	68bb      	ldr	r3, [r7, #8]
 800de8c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800de8e:	f107 0310 	add.w	r3, r7, #16
 800de92:	4618      	mov	r0, r3
 800de94:	f7ff fcd2 	bl	800d83c <get_ldnumber>
 800de98:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800de9a:	69fb      	ldr	r3, [r7, #28]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	da01      	bge.n	800dea4 <f_mount+0x28>
 800dea0:	230b      	movs	r3, #11
 800dea2:	e02b      	b.n	800defc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800dea4:	4a17      	ldr	r2, [pc, #92]	; (800df04 <f_mount+0x88>)
 800dea6:	69fb      	ldr	r3, [r7, #28]
 800dea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800deac:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800deae:	69bb      	ldr	r3, [r7, #24]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d005      	beq.n	800dec0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800deb4:	69b8      	ldr	r0, [r7, #24]
 800deb6:	f7fe fc57 	bl	800c768 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800deba:	69bb      	ldr	r3, [r7, #24]
 800debc:	2200      	movs	r2, #0
 800debe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d002      	beq.n	800decc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	2200      	movs	r2, #0
 800deca:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800decc:	68fa      	ldr	r2, [r7, #12]
 800dece:	490d      	ldr	r1, [pc, #52]	; (800df04 <f_mount+0x88>)
 800ded0:	69fb      	ldr	r3, [r7, #28]
 800ded2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d002      	beq.n	800dee2 <f_mount+0x66>
 800dedc:	79fb      	ldrb	r3, [r7, #7]
 800dede:	2b01      	cmp	r3, #1
 800dee0:	d001      	beq.n	800dee6 <f_mount+0x6a>
 800dee2:	2300      	movs	r3, #0
 800dee4:	e00a      	b.n	800defc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800dee6:	f107 010c 	add.w	r1, r7, #12
 800deea:	f107 0308 	add.w	r3, r7, #8
 800deee:	2200      	movs	r2, #0
 800def0:	4618      	mov	r0, r3
 800def2:	f7ff fd3d 	bl	800d970 <find_volume>
 800def6:	4603      	mov	r3, r0
 800def8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800defa:	7dfb      	ldrb	r3, [r7, #23]
}
 800defc:	4618      	mov	r0, r3
 800defe:	3720      	adds	r7, #32
 800df00:	46bd      	mov	sp, r7
 800df02:	bd80      	pop	{r7, pc}
 800df04:	20000140 	.word	0x20000140

0800df08 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b098      	sub	sp, #96	; 0x60
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	60f8      	str	r0, [r7, #12]
 800df10:	60b9      	str	r1, [r7, #8]
 800df12:	4613      	mov	r3, r2
 800df14:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d101      	bne.n	800df20 <f_open+0x18>
 800df1c:	2309      	movs	r3, #9
 800df1e:	e1ad      	b.n	800e27c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800df20:	79fb      	ldrb	r3, [r7, #7]
 800df22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800df26:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800df28:	79fa      	ldrb	r2, [r7, #7]
 800df2a:	f107 0110 	add.w	r1, r7, #16
 800df2e:	f107 0308 	add.w	r3, r7, #8
 800df32:	4618      	mov	r0, r3
 800df34:	f7ff fd1c 	bl	800d970 <find_volume>
 800df38:	4603      	mov	r3, r0
 800df3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800df3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800df42:	2b00      	cmp	r3, #0
 800df44:	f040 8191 	bne.w	800e26a <f_open+0x362>
		dj.obj.fs = fs;
 800df48:	693b      	ldr	r3, [r7, #16]
 800df4a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800df4c:	68ba      	ldr	r2, [r7, #8]
 800df4e:	f107 0314 	add.w	r3, r7, #20
 800df52:	4611      	mov	r1, r2
 800df54:	4618      	mov	r0, r3
 800df56:	f7ff fbe1 	bl	800d71c <follow_path>
 800df5a:	4603      	mov	r3, r0
 800df5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800df60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800df64:	2b00      	cmp	r3, #0
 800df66:	d11a      	bne.n	800df9e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800df68:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800df6c:	b25b      	sxtb	r3, r3
 800df6e:	2b00      	cmp	r3, #0
 800df70:	da03      	bge.n	800df7a <f_open+0x72>
				res = FR_INVALID_NAME;
 800df72:	2306      	movs	r3, #6
 800df74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800df78:	e011      	b.n	800df9e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800df7a:	79fb      	ldrb	r3, [r7, #7]
 800df7c:	f023 0301 	bic.w	r3, r3, #1
 800df80:	2b00      	cmp	r3, #0
 800df82:	bf14      	ite	ne
 800df84:	2301      	movne	r3, #1
 800df86:	2300      	moveq	r3, #0
 800df88:	b2db      	uxtb	r3, r3
 800df8a:	461a      	mov	r2, r3
 800df8c:	f107 0314 	add.w	r3, r7, #20
 800df90:	4611      	mov	r1, r2
 800df92:	4618      	mov	r0, r3
 800df94:	f7fe faa0 	bl	800c4d8 <chk_lock>
 800df98:	4603      	mov	r3, r0
 800df9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800df9e:	79fb      	ldrb	r3, [r7, #7]
 800dfa0:	f003 031c 	and.w	r3, r3, #28
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d07f      	beq.n	800e0a8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800dfa8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d017      	beq.n	800dfe0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800dfb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dfb4:	2b04      	cmp	r3, #4
 800dfb6:	d10e      	bne.n	800dfd6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800dfb8:	f7fe faea 	bl	800c590 <enq_lock>
 800dfbc:	4603      	mov	r3, r0
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d006      	beq.n	800dfd0 <f_open+0xc8>
 800dfc2:	f107 0314 	add.w	r3, r7, #20
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	f7ff fa2e 	bl	800d428 <dir_register>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	e000      	b.n	800dfd2 <f_open+0xca>
 800dfd0:	2312      	movs	r3, #18
 800dfd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800dfd6:	79fb      	ldrb	r3, [r7, #7]
 800dfd8:	f043 0308 	orr.w	r3, r3, #8
 800dfdc:	71fb      	strb	r3, [r7, #7]
 800dfde:	e010      	b.n	800e002 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800dfe0:	7ebb      	ldrb	r3, [r7, #26]
 800dfe2:	f003 0311 	and.w	r3, r3, #17
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d003      	beq.n	800dff2 <f_open+0xea>
					res = FR_DENIED;
 800dfea:	2307      	movs	r3, #7
 800dfec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800dff0:	e007      	b.n	800e002 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800dff2:	79fb      	ldrb	r3, [r7, #7]
 800dff4:	f003 0304 	and.w	r3, r3, #4
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d002      	beq.n	800e002 <f_open+0xfa>
 800dffc:	2308      	movs	r3, #8
 800dffe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e002:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e006:	2b00      	cmp	r3, #0
 800e008:	d168      	bne.n	800e0dc <f_open+0x1d4>
 800e00a:	79fb      	ldrb	r3, [r7, #7]
 800e00c:	f003 0308 	and.w	r3, r3, #8
 800e010:	2b00      	cmp	r3, #0
 800e012:	d063      	beq.n	800e0dc <f_open+0x1d4>
				dw = GET_FATTIME();
 800e014:	f7fd ff56 	bl	800bec4 <get_fattime>
 800e018:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e01a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e01c:	330e      	adds	r3, #14
 800e01e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e020:	4618      	mov	r0, r3
 800e022:	f7fe f9af 	bl	800c384 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e028:	3316      	adds	r3, #22
 800e02a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e02c:	4618      	mov	r0, r3
 800e02e:	f7fe f9a9 	bl	800c384 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e034:	330b      	adds	r3, #11
 800e036:	2220      	movs	r2, #32
 800e038:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e03a:	693b      	ldr	r3, [r7, #16]
 800e03c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e03e:	4611      	mov	r1, r2
 800e040:	4618      	mov	r0, r3
 800e042:	f7ff f900 	bl	800d246 <ld_clust>
 800e046:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e048:	693b      	ldr	r3, [r7, #16]
 800e04a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e04c:	2200      	movs	r2, #0
 800e04e:	4618      	mov	r0, r3
 800e050:	f7ff f918 	bl	800d284 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e056:	331c      	adds	r3, #28
 800e058:	2100      	movs	r1, #0
 800e05a:	4618      	mov	r0, r3
 800e05c:	f7fe f992 	bl	800c384 <st_dword>
					fs->wflag = 1;
 800e060:	693b      	ldr	r3, [r7, #16]
 800e062:	2201      	movs	r2, #1
 800e064:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d037      	beq.n	800e0dc <f_open+0x1d4>
						dw = fs->winsect;
 800e06c:	693b      	ldr	r3, [r7, #16]
 800e06e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e070:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800e072:	f107 0314 	add.w	r3, r7, #20
 800e076:	2200      	movs	r2, #0
 800e078:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e07a:	4618      	mov	r0, r3
 800e07c:	f7fe fe2b 	bl	800ccd6 <remove_chain>
 800e080:	4603      	mov	r3, r0
 800e082:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800e086:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d126      	bne.n	800e0dc <f_open+0x1d4>
							res = move_window(fs, dw);
 800e08e:	693b      	ldr	r3, [r7, #16]
 800e090:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e092:	4618      	mov	r0, r3
 800e094:	f7fe fbd0 	bl	800c838 <move_window>
 800e098:	4603      	mov	r3, r0
 800e09a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e09e:	693b      	ldr	r3, [r7, #16]
 800e0a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e0a2:	3a01      	subs	r2, #1
 800e0a4:	60da      	str	r2, [r3, #12]
 800e0a6:	e019      	b.n	800e0dc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e0a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d115      	bne.n	800e0dc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e0b0:	7ebb      	ldrb	r3, [r7, #26]
 800e0b2:	f003 0310 	and.w	r3, r3, #16
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d003      	beq.n	800e0c2 <f_open+0x1ba>
					res = FR_NO_FILE;
 800e0ba:	2304      	movs	r3, #4
 800e0bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e0c0:	e00c      	b.n	800e0dc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e0c2:	79fb      	ldrb	r3, [r7, #7]
 800e0c4:	f003 0302 	and.w	r3, r3, #2
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d007      	beq.n	800e0dc <f_open+0x1d4>
 800e0cc:	7ebb      	ldrb	r3, [r7, #26]
 800e0ce:	f003 0301 	and.w	r3, r3, #1
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d002      	beq.n	800e0dc <f_open+0x1d4>
						res = FR_DENIED;
 800e0d6:	2307      	movs	r3, #7
 800e0d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800e0dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d128      	bne.n	800e136 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e0e4:	79fb      	ldrb	r3, [r7, #7]
 800e0e6:	f003 0308 	and.w	r3, r3, #8
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d003      	beq.n	800e0f6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800e0ee:	79fb      	ldrb	r3, [r7, #7]
 800e0f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0f4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e0f6:	693b      	ldr	r3, [r7, #16]
 800e0f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e0fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e104:	79fb      	ldrb	r3, [r7, #7]
 800e106:	f023 0301 	bic.w	r3, r3, #1
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	bf14      	ite	ne
 800e10e:	2301      	movne	r3, #1
 800e110:	2300      	moveq	r3, #0
 800e112:	b2db      	uxtb	r3, r3
 800e114:	461a      	mov	r2, r3
 800e116:	f107 0314 	add.w	r3, r7, #20
 800e11a:	4611      	mov	r1, r2
 800e11c:	4618      	mov	r0, r3
 800e11e:	f7fe fa59 	bl	800c5d4 <inc_lock>
 800e122:	4602      	mov	r2, r0
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	691b      	ldr	r3, [r3, #16]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d102      	bne.n	800e136 <f_open+0x22e>
 800e130:	2302      	movs	r3, #2
 800e132:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e136:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	f040 8095 	bne.w	800e26a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e140:	693b      	ldr	r3, [r7, #16]
 800e142:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e144:	4611      	mov	r1, r2
 800e146:	4618      	mov	r0, r3
 800e148:	f7ff f87d 	bl	800d246 <ld_clust>
 800e14c:	4602      	mov	r2, r0
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e154:	331c      	adds	r3, #28
 800e156:	4618      	mov	r0, r3
 800e158:	f7fe f8d6 	bl	800c308 <ld_dword>
 800e15c:	4602      	mov	r2, r0
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	2200      	movs	r2, #0
 800e166:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e168:	693a      	ldr	r2, [r7, #16]
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e16e:	693b      	ldr	r3, [r7, #16]
 800e170:	88da      	ldrh	r2, [r3, #6]
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	79fa      	ldrb	r2, [r7, #7]
 800e17a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	2200      	movs	r2, #0
 800e180:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	2200      	movs	r2, #0
 800e186:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	2200      	movs	r2, #0
 800e18c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	3330      	adds	r3, #48	; 0x30
 800e192:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e196:	2100      	movs	r1, #0
 800e198:	4618      	mov	r0, r3
 800e19a:	f7fe f940 	bl	800c41e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e19e:	79fb      	ldrb	r3, [r7, #7]
 800e1a0:	f003 0320 	and.w	r3, r3, #32
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d060      	beq.n	800e26a <f_open+0x362>
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	68db      	ldr	r3, [r3, #12]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d05c      	beq.n	800e26a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	68da      	ldr	r2, [r3, #12]
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e1b8:	693b      	ldr	r3, [r7, #16]
 800e1ba:	895b      	ldrh	r3, [r3, #10]
 800e1bc:	025b      	lsls	r3, r3, #9
 800e1be:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	689b      	ldr	r3, [r3, #8]
 800e1c4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	68db      	ldr	r3, [r3, #12]
 800e1ca:	657b      	str	r3, [r7, #84]	; 0x54
 800e1cc:	e016      	b.n	800e1fc <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	f7fe fbeb 	bl	800c9ae <get_fat>
 800e1d8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800e1da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e1dc:	2b01      	cmp	r3, #1
 800e1de:	d802      	bhi.n	800e1e6 <f_open+0x2de>
 800e1e0:	2302      	movs	r3, #2
 800e1e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e1e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e1e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1ec:	d102      	bne.n	800e1f4 <f_open+0x2ec>
 800e1ee:	2301      	movs	r3, #1
 800e1f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e1f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e1f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e1f8:	1ad3      	subs	r3, r2, r3
 800e1fa:	657b      	str	r3, [r7, #84]	; 0x54
 800e1fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e200:	2b00      	cmp	r3, #0
 800e202:	d103      	bne.n	800e20c <f_open+0x304>
 800e204:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e206:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e208:	429a      	cmp	r2, r3
 800e20a:	d8e0      	bhi.n	800e1ce <f_open+0x2c6>
				}
				fp->clust = clst;
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e210:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e212:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e216:	2b00      	cmp	r3, #0
 800e218:	d127      	bne.n	800e26a <f_open+0x362>
 800e21a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e21c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e220:	2b00      	cmp	r3, #0
 800e222:	d022      	beq.n	800e26a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e224:	693b      	ldr	r3, [r7, #16]
 800e226:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e228:	4618      	mov	r0, r3
 800e22a:	f7fe fba1 	bl	800c970 <clust2sect>
 800e22e:	6478      	str	r0, [r7, #68]	; 0x44
 800e230:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e232:	2b00      	cmp	r3, #0
 800e234:	d103      	bne.n	800e23e <f_open+0x336>
						res = FR_INT_ERR;
 800e236:	2302      	movs	r3, #2
 800e238:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e23c:	e015      	b.n	800e26a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e23e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e240:	0a5a      	lsrs	r2, r3, #9
 800e242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e244:	441a      	add	r2, r3
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e24a:	693b      	ldr	r3, [r7, #16]
 800e24c:	7858      	ldrb	r0, [r3, #1]
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	6a1a      	ldr	r2, [r3, #32]
 800e258:	2301      	movs	r3, #1
 800e25a:	f7fd ffdf 	bl	800c21c <disk_read>
 800e25e:	4603      	mov	r3, r0
 800e260:	2b00      	cmp	r3, #0
 800e262:	d002      	beq.n	800e26a <f_open+0x362>
 800e264:	2301      	movs	r3, #1
 800e266:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e26a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d002      	beq.n	800e278 <f_open+0x370>
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	2200      	movs	r2, #0
 800e276:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e278:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800e27c:	4618      	mov	r0, r3
 800e27e:	3760      	adds	r7, #96	; 0x60
 800e280:	46bd      	mov	sp, r7
 800e282:	bd80      	pop	{r7, pc}

0800e284 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e284:	b580      	push	{r7, lr}
 800e286:	b08e      	sub	sp, #56	; 0x38
 800e288:	af00      	add	r7, sp, #0
 800e28a:	60f8      	str	r0, [r7, #12]
 800e28c:	60b9      	str	r1, [r7, #8]
 800e28e:	607a      	str	r2, [r7, #4]
 800e290:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e292:	68bb      	ldr	r3, [r7, #8]
 800e294:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800e296:	683b      	ldr	r3, [r7, #0]
 800e298:	2200      	movs	r2, #0
 800e29a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	f107 0214 	add.w	r2, r7, #20
 800e2a2:	4611      	mov	r1, r2
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	f7ff fdb3 	bl	800de10 <validate>
 800e2aa:	4603      	mov	r3, r0
 800e2ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e2b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d107      	bne.n	800e2c8 <f_read+0x44>
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	7d5b      	ldrb	r3, [r3, #21]
 800e2bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e2c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d002      	beq.n	800e2ce <f_read+0x4a>
 800e2c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e2cc:	e115      	b.n	800e4fa <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	7d1b      	ldrb	r3, [r3, #20]
 800e2d2:	f003 0301 	and.w	r3, r3, #1
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d101      	bne.n	800e2de <f_read+0x5a>
 800e2da:	2307      	movs	r3, #7
 800e2dc:	e10d      	b.n	800e4fa <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	68da      	ldr	r2, [r3, #12]
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	699b      	ldr	r3, [r3, #24]
 800e2e6:	1ad3      	subs	r3, r2, r3
 800e2e8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e2ea:	687a      	ldr	r2, [r7, #4]
 800e2ec:	6a3b      	ldr	r3, [r7, #32]
 800e2ee:	429a      	cmp	r2, r3
 800e2f0:	f240 80fe 	bls.w	800e4f0 <f_read+0x26c>
 800e2f4:	6a3b      	ldr	r3, [r7, #32]
 800e2f6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800e2f8:	e0fa      	b.n	800e4f0 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	699b      	ldr	r3, [r3, #24]
 800e2fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e302:	2b00      	cmp	r3, #0
 800e304:	f040 80c6 	bne.w	800e494 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	699b      	ldr	r3, [r3, #24]
 800e30c:	0a5b      	lsrs	r3, r3, #9
 800e30e:	697a      	ldr	r2, [r7, #20]
 800e310:	8952      	ldrh	r2, [r2, #10]
 800e312:	3a01      	subs	r2, #1
 800e314:	4013      	ands	r3, r2
 800e316:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800e318:	69fb      	ldr	r3, [r7, #28]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d12f      	bne.n	800e37e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	699b      	ldr	r3, [r3, #24]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d103      	bne.n	800e32e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	689b      	ldr	r3, [r3, #8]
 800e32a:	633b      	str	r3, [r7, #48]	; 0x30
 800e32c:	e013      	b.n	800e356 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e332:	2b00      	cmp	r3, #0
 800e334:	d007      	beq.n	800e346 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	699b      	ldr	r3, [r3, #24]
 800e33a:	4619      	mov	r1, r3
 800e33c:	68f8      	ldr	r0, [r7, #12]
 800e33e:	f7fe fdc7 	bl	800ced0 <clmt_clust>
 800e342:	6338      	str	r0, [r7, #48]	; 0x30
 800e344:	e007      	b.n	800e356 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e346:	68fa      	ldr	r2, [r7, #12]
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	69db      	ldr	r3, [r3, #28]
 800e34c:	4619      	mov	r1, r3
 800e34e:	4610      	mov	r0, r2
 800e350:	f7fe fb2d 	bl	800c9ae <get_fat>
 800e354:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e358:	2b01      	cmp	r3, #1
 800e35a:	d804      	bhi.n	800e366 <f_read+0xe2>
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	2202      	movs	r2, #2
 800e360:	755a      	strb	r2, [r3, #21]
 800e362:	2302      	movs	r3, #2
 800e364:	e0c9      	b.n	800e4fa <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e36c:	d104      	bne.n	800e378 <f_read+0xf4>
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	2201      	movs	r2, #1
 800e372:	755a      	strb	r2, [r3, #21]
 800e374:	2301      	movs	r3, #1
 800e376:	e0c0      	b.n	800e4fa <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e37c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e37e:	697a      	ldr	r2, [r7, #20]
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	69db      	ldr	r3, [r3, #28]
 800e384:	4619      	mov	r1, r3
 800e386:	4610      	mov	r0, r2
 800e388:	f7fe faf2 	bl	800c970 <clust2sect>
 800e38c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e38e:	69bb      	ldr	r3, [r7, #24]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d104      	bne.n	800e39e <f_read+0x11a>
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	2202      	movs	r2, #2
 800e398:	755a      	strb	r2, [r3, #21]
 800e39a:	2302      	movs	r3, #2
 800e39c:	e0ad      	b.n	800e4fa <f_read+0x276>
			sect += csect;
 800e39e:	69ba      	ldr	r2, [r7, #24]
 800e3a0:	69fb      	ldr	r3, [r7, #28]
 800e3a2:	4413      	add	r3, r2
 800e3a4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	0a5b      	lsrs	r3, r3, #9
 800e3aa:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d039      	beq.n	800e426 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e3b2:	69fa      	ldr	r2, [r7, #28]
 800e3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3b6:	4413      	add	r3, r2
 800e3b8:	697a      	ldr	r2, [r7, #20]
 800e3ba:	8952      	ldrh	r2, [r2, #10]
 800e3bc:	4293      	cmp	r3, r2
 800e3be:	d905      	bls.n	800e3cc <f_read+0x148>
					cc = fs->csize - csect;
 800e3c0:	697b      	ldr	r3, [r7, #20]
 800e3c2:	895b      	ldrh	r3, [r3, #10]
 800e3c4:	461a      	mov	r2, r3
 800e3c6:	69fb      	ldr	r3, [r7, #28]
 800e3c8:	1ad3      	subs	r3, r2, r3
 800e3ca:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e3cc:	697b      	ldr	r3, [r7, #20]
 800e3ce:	7858      	ldrb	r0, [r3, #1]
 800e3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3d2:	69ba      	ldr	r2, [r7, #24]
 800e3d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e3d6:	f7fd ff21 	bl	800c21c <disk_read>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d004      	beq.n	800e3ea <f_read+0x166>
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	2201      	movs	r2, #1
 800e3e4:	755a      	strb	r2, [r3, #21]
 800e3e6:	2301      	movs	r3, #1
 800e3e8:	e087      	b.n	800e4fa <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	7d1b      	ldrb	r3, [r3, #20]
 800e3ee:	b25b      	sxtb	r3, r3
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	da14      	bge.n	800e41e <f_read+0x19a>
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	6a1a      	ldr	r2, [r3, #32]
 800e3f8:	69bb      	ldr	r3, [r7, #24]
 800e3fa:	1ad3      	subs	r3, r2, r3
 800e3fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e3fe:	429a      	cmp	r2, r3
 800e400:	d90d      	bls.n	800e41e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	6a1a      	ldr	r2, [r3, #32]
 800e406:	69bb      	ldr	r3, [r7, #24]
 800e408:	1ad3      	subs	r3, r2, r3
 800e40a:	025b      	lsls	r3, r3, #9
 800e40c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e40e:	18d0      	adds	r0, r2, r3
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	3330      	adds	r3, #48	; 0x30
 800e414:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e418:	4619      	mov	r1, r3
 800e41a:	f7fd ffdf 	bl	800c3dc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800e41e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e420:	025b      	lsls	r3, r3, #9
 800e422:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800e424:	e050      	b.n	800e4c8 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	6a1b      	ldr	r3, [r3, #32]
 800e42a:	69ba      	ldr	r2, [r7, #24]
 800e42c:	429a      	cmp	r2, r3
 800e42e:	d02e      	beq.n	800e48e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	7d1b      	ldrb	r3, [r3, #20]
 800e434:	b25b      	sxtb	r3, r3
 800e436:	2b00      	cmp	r3, #0
 800e438:	da18      	bge.n	800e46c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e43a:	697b      	ldr	r3, [r7, #20]
 800e43c:	7858      	ldrb	r0, [r3, #1]
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	6a1a      	ldr	r2, [r3, #32]
 800e448:	2301      	movs	r3, #1
 800e44a:	f7fd ff07 	bl	800c25c <disk_write>
 800e44e:	4603      	mov	r3, r0
 800e450:	2b00      	cmp	r3, #0
 800e452:	d004      	beq.n	800e45e <f_read+0x1da>
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	2201      	movs	r2, #1
 800e458:	755a      	strb	r2, [r3, #21]
 800e45a:	2301      	movs	r3, #1
 800e45c:	e04d      	b.n	800e4fa <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	7d1b      	ldrb	r3, [r3, #20]
 800e462:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e466:	b2da      	uxtb	r2, r3
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e46c:	697b      	ldr	r3, [r7, #20]
 800e46e:	7858      	ldrb	r0, [r3, #1]
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e476:	2301      	movs	r3, #1
 800e478:	69ba      	ldr	r2, [r7, #24]
 800e47a:	f7fd fecf 	bl	800c21c <disk_read>
 800e47e:	4603      	mov	r3, r0
 800e480:	2b00      	cmp	r3, #0
 800e482:	d004      	beq.n	800e48e <f_read+0x20a>
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	2201      	movs	r2, #1
 800e488:	755a      	strb	r2, [r3, #21]
 800e48a:	2301      	movs	r3, #1
 800e48c:	e035      	b.n	800e4fa <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	69ba      	ldr	r2, [r7, #24]
 800e492:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	699b      	ldr	r3, [r3, #24]
 800e498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e49c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800e4a0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800e4a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	429a      	cmp	r2, r3
 800e4a8:	d901      	bls.n	800e4ae <f_read+0x22a>
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	699b      	ldr	r3, [r3, #24]
 800e4b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e4bc:	4413      	add	r3, r2
 800e4be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e4c0:	4619      	mov	r1, r3
 800e4c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e4c4:	f7fd ff8a 	bl	800c3dc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800e4c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4cc:	4413      	add	r3, r2
 800e4ce:	627b      	str	r3, [r7, #36]	; 0x24
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	699a      	ldr	r2, [r3, #24]
 800e4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4d6:	441a      	add	r2, r3
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	619a      	str	r2, [r3, #24]
 800e4dc:	683b      	ldr	r3, [r7, #0]
 800e4de:	681a      	ldr	r2, [r3, #0]
 800e4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4e2:	441a      	add	r2, r3
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	601a      	str	r2, [r3, #0]
 800e4e8:	687a      	ldr	r2, [r7, #4]
 800e4ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ec:	1ad3      	subs	r3, r2, r3
 800e4ee:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	f47f af01 	bne.w	800e2fa <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800e4f8:	2300      	movs	r3, #0
}
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	3738      	adds	r7, #56	; 0x38
 800e4fe:	46bd      	mov	sp, r7
 800e500:	bd80      	pop	{r7, pc}

0800e502 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800e502:	b580      	push	{r7, lr}
 800e504:	b08c      	sub	sp, #48	; 0x30
 800e506:	af00      	add	r7, sp, #0
 800e508:	60f8      	str	r0, [r7, #12]
 800e50a:	60b9      	str	r1, [r7, #8]
 800e50c:	607a      	str	r2, [r7, #4]
 800e50e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800e510:	68bb      	ldr	r3, [r7, #8]
 800e512:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800e514:	683b      	ldr	r3, [r7, #0]
 800e516:	2200      	movs	r2, #0
 800e518:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	f107 0210 	add.w	r2, r7, #16
 800e520:	4611      	mov	r1, r2
 800e522:	4618      	mov	r0, r3
 800e524:	f7ff fc74 	bl	800de10 <validate>
 800e528:	4603      	mov	r3, r0
 800e52a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e52e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e532:	2b00      	cmp	r3, #0
 800e534:	d107      	bne.n	800e546 <f_write+0x44>
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	7d5b      	ldrb	r3, [r3, #21]
 800e53a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e53e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e542:	2b00      	cmp	r3, #0
 800e544:	d002      	beq.n	800e54c <f_write+0x4a>
 800e546:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e54a:	e14b      	b.n	800e7e4 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	7d1b      	ldrb	r3, [r3, #20]
 800e550:	f003 0302 	and.w	r3, r3, #2
 800e554:	2b00      	cmp	r3, #0
 800e556:	d101      	bne.n	800e55c <f_write+0x5a>
 800e558:	2307      	movs	r3, #7
 800e55a:	e143      	b.n	800e7e4 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	699a      	ldr	r2, [r3, #24]
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	441a      	add	r2, r3
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	699b      	ldr	r3, [r3, #24]
 800e568:	429a      	cmp	r2, r3
 800e56a:	f080 812d 	bcs.w	800e7c8 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	699b      	ldr	r3, [r3, #24]
 800e572:	43db      	mvns	r3, r3
 800e574:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800e576:	e127      	b.n	800e7c8 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	699b      	ldr	r3, [r3, #24]
 800e57c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e580:	2b00      	cmp	r3, #0
 800e582:	f040 80e3 	bne.w	800e74c <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	699b      	ldr	r3, [r3, #24]
 800e58a:	0a5b      	lsrs	r3, r3, #9
 800e58c:	693a      	ldr	r2, [r7, #16]
 800e58e:	8952      	ldrh	r2, [r2, #10]
 800e590:	3a01      	subs	r2, #1
 800e592:	4013      	ands	r3, r2
 800e594:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800e596:	69bb      	ldr	r3, [r7, #24]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d143      	bne.n	800e624 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	699b      	ldr	r3, [r3, #24]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d10c      	bne.n	800e5be <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	689b      	ldr	r3, [r3, #8]
 800e5a8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800e5aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d11a      	bne.n	800e5e6 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	2100      	movs	r1, #0
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	f7fe fbf3 	bl	800cda0 <create_chain>
 800e5ba:	62b8      	str	r0, [r7, #40]	; 0x28
 800e5bc:	e013      	b.n	800e5e6 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d007      	beq.n	800e5d6 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	699b      	ldr	r3, [r3, #24]
 800e5ca:	4619      	mov	r1, r3
 800e5cc:	68f8      	ldr	r0, [r7, #12]
 800e5ce:	f7fe fc7f 	bl	800ced0 <clmt_clust>
 800e5d2:	62b8      	str	r0, [r7, #40]	; 0x28
 800e5d4:	e007      	b.n	800e5e6 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800e5d6:	68fa      	ldr	r2, [r7, #12]
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	69db      	ldr	r3, [r3, #28]
 800e5dc:	4619      	mov	r1, r3
 800e5de:	4610      	mov	r0, r2
 800e5e0:	f7fe fbde 	bl	800cda0 <create_chain>
 800e5e4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	f000 80f2 	beq.w	800e7d2 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e5ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5f0:	2b01      	cmp	r3, #1
 800e5f2:	d104      	bne.n	800e5fe <f_write+0xfc>
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	2202      	movs	r2, #2
 800e5f8:	755a      	strb	r2, [r3, #21]
 800e5fa:	2302      	movs	r3, #2
 800e5fc:	e0f2      	b.n	800e7e4 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e600:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e604:	d104      	bne.n	800e610 <f_write+0x10e>
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	2201      	movs	r2, #1
 800e60a:	755a      	strb	r2, [r3, #21]
 800e60c:	2301      	movs	r3, #1
 800e60e:	e0e9      	b.n	800e7e4 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e614:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	689b      	ldr	r3, [r3, #8]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d102      	bne.n	800e624 <f_write+0x122>
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e622:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	7d1b      	ldrb	r3, [r3, #20]
 800e628:	b25b      	sxtb	r3, r3
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	da18      	bge.n	800e660 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e62e:	693b      	ldr	r3, [r7, #16]
 800e630:	7858      	ldrb	r0, [r3, #1]
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	6a1a      	ldr	r2, [r3, #32]
 800e63c:	2301      	movs	r3, #1
 800e63e:	f7fd fe0d 	bl	800c25c <disk_write>
 800e642:	4603      	mov	r3, r0
 800e644:	2b00      	cmp	r3, #0
 800e646:	d004      	beq.n	800e652 <f_write+0x150>
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	2201      	movs	r2, #1
 800e64c:	755a      	strb	r2, [r3, #21]
 800e64e:	2301      	movs	r3, #1
 800e650:	e0c8      	b.n	800e7e4 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	7d1b      	ldrb	r3, [r3, #20]
 800e656:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e65a:	b2da      	uxtb	r2, r3
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e660:	693a      	ldr	r2, [r7, #16]
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	69db      	ldr	r3, [r3, #28]
 800e666:	4619      	mov	r1, r3
 800e668:	4610      	mov	r0, r2
 800e66a:	f7fe f981 	bl	800c970 <clust2sect>
 800e66e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e670:	697b      	ldr	r3, [r7, #20]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d104      	bne.n	800e680 <f_write+0x17e>
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	2202      	movs	r2, #2
 800e67a:	755a      	strb	r2, [r3, #21]
 800e67c:	2302      	movs	r3, #2
 800e67e:	e0b1      	b.n	800e7e4 <f_write+0x2e2>
			sect += csect;
 800e680:	697a      	ldr	r2, [r7, #20]
 800e682:	69bb      	ldr	r3, [r7, #24]
 800e684:	4413      	add	r3, r2
 800e686:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	0a5b      	lsrs	r3, r3, #9
 800e68c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800e68e:	6a3b      	ldr	r3, [r7, #32]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d03c      	beq.n	800e70e <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e694:	69ba      	ldr	r2, [r7, #24]
 800e696:	6a3b      	ldr	r3, [r7, #32]
 800e698:	4413      	add	r3, r2
 800e69a:	693a      	ldr	r2, [r7, #16]
 800e69c:	8952      	ldrh	r2, [r2, #10]
 800e69e:	4293      	cmp	r3, r2
 800e6a0:	d905      	bls.n	800e6ae <f_write+0x1ac>
					cc = fs->csize - csect;
 800e6a2:	693b      	ldr	r3, [r7, #16]
 800e6a4:	895b      	ldrh	r3, [r3, #10]
 800e6a6:	461a      	mov	r2, r3
 800e6a8:	69bb      	ldr	r3, [r7, #24]
 800e6aa:	1ad3      	subs	r3, r2, r3
 800e6ac:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e6ae:	693b      	ldr	r3, [r7, #16]
 800e6b0:	7858      	ldrb	r0, [r3, #1]
 800e6b2:	6a3b      	ldr	r3, [r7, #32]
 800e6b4:	697a      	ldr	r2, [r7, #20]
 800e6b6:	69f9      	ldr	r1, [r7, #28]
 800e6b8:	f7fd fdd0 	bl	800c25c <disk_write>
 800e6bc:	4603      	mov	r3, r0
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d004      	beq.n	800e6cc <f_write+0x1ca>
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	2201      	movs	r2, #1
 800e6c6:	755a      	strb	r2, [r3, #21]
 800e6c8:	2301      	movs	r3, #1
 800e6ca:	e08b      	b.n	800e7e4 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	6a1a      	ldr	r2, [r3, #32]
 800e6d0:	697b      	ldr	r3, [r7, #20]
 800e6d2:	1ad3      	subs	r3, r2, r3
 800e6d4:	6a3a      	ldr	r2, [r7, #32]
 800e6d6:	429a      	cmp	r2, r3
 800e6d8:	d915      	bls.n	800e706 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	6a1a      	ldr	r2, [r3, #32]
 800e6e4:	697b      	ldr	r3, [r7, #20]
 800e6e6:	1ad3      	subs	r3, r2, r3
 800e6e8:	025b      	lsls	r3, r3, #9
 800e6ea:	69fa      	ldr	r2, [r7, #28]
 800e6ec:	4413      	add	r3, r2
 800e6ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e6f2:	4619      	mov	r1, r3
 800e6f4:	f7fd fe72 	bl	800c3dc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	7d1b      	ldrb	r3, [r3, #20]
 800e6fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e700:	b2da      	uxtb	r2, r3
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e706:	6a3b      	ldr	r3, [r7, #32]
 800e708:	025b      	lsls	r3, r3, #9
 800e70a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800e70c:	e03f      	b.n	800e78e <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	6a1b      	ldr	r3, [r3, #32]
 800e712:	697a      	ldr	r2, [r7, #20]
 800e714:	429a      	cmp	r2, r3
 800e716:	d016      	beq.n	800e746 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	699a      	ldr	r2, [r3, #24]
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e720:	429a      	cmp	r2, r3
 800e722:	d210      	bcs.n	800e746 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800e724:	693b      	ldr	r3, [r7, #16]
 800e726:	7858      	ldrb	r0, [r3, #1]
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e72e:	2301      	movs	r3, #1
 800e730:	697a      	ldr	r2, [r7, #20]
 800e732:	f7fd fd73 	bl	800c21c <disk_read>
 800e736:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d004      	beq.n	800e746 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	2201      	movs	r2, #1
 800e740:	755a      	strb	r2, [r3, #21]
 800e742:	2301      	movs	r3, #1
 800e744:	e04e      	b.n	800e7e4 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	697a      	ldr	r2, [r7, #20]
 800e74a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	699b      	ldr	r3, [r3, #24]
 800e750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e754:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800e758:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e75a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	429a      	cmp	r2, r3
 800e760:	d901      	bls.n	800e766 <f_write+0x264>
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	699b      	ldr	r3, [r3, #24]
 800e770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e774:	4413      	add	r3, r2
 800e776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e778:	69f9      	ldr	r1, [r7, #28]
 800e77a:	4618      	mov	r0, r3
 800e77c:	f7fd fe2e 	bl	800c3dc <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	7d1b      	ldrb	r3, [r3, #20]
 800e784:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e788:	b2da      	uxtb	r2, r3
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e78e:	69fa      	ldr	r2, [r7, #28]
 800e790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e792:	4413      	add	r3, r2
 800e794:	61fb      	str	r3, [r7, #28]
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	699a      	ldr	r2, [r3, #24]
 800e79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e79c:	441a      	add	r2, r3
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	619a      	str	r2, [r3, #24]
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	68da      	ldr	r2, [r3, #12]
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	699b      	ldr	r3, [r3, #24]
 800e7aa:	429a      	cmp	r2, r3
 800e7ac:	bf38      	it	cc
 800e7ae:	461a      	movcc	r2, r3
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	60da      	str	r2, [r3, #12]
 800e7b4:	683b      	ldr	r3, [r7, #0]
 800e7b6:	681a      	ldr	r2, [r3, #0]
 800e7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ba:	441a      	add	r2, r3
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	601a      	str	r2, [r3, #0]
 800e7c0:	687a      	ldr	r2, [r7, #4]
 800e7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7c4:	1ad3      	subs	r3, r2, r3
 800e7c6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	f47f aed4 	bne.w	800e578 <f_write+0x76>
 800e7d0:	e000      	b.n	800e7d4 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e7d2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	7d1b      	ldrb	r3, [r3, #20]
 800e7d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7dc:	b2da      	uxtb	r2, r3
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800e7e2:	2300      	movs	r3, #0
}
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	3730      	adds	r7, #48	; 0x30
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	bd80      	pop	{r7, pc}

0800e7ec <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b086      	sub	sp, #24
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	f107 0208 	add.w	r2, r7, #8
 800e7fa:	4611      	mov	r1, r2
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	f7ff fb07 	bl	800de10 <validate>
 800e802:	4603      	mov	r3, r0
 800e804:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e806:	7dfb      	ldrb	r3, [r7, #23]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d168      	bne.n	800e8de <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	7d1b      	ldrb	r3, [r3, #20]
 800e810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e814:	2b00      	cmp	r3, #0
 800e816:	d062      	beq.n	800e8de <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	7d1b      	ldrb	r3, [r3, #20]
 800e81c:	b25b      	sxtb	r3, r3
 800e81e:	2b00      	cmp	r3, #0
 800e820:	da15      	bge.n	800e84e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e822:	68bb      	ldr	r3, [r7, #8]
 800e824:	7858      	ldrb	r0, [r3, #1]
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	6a1a      	ldr	r2, [r3, #32]
 800e830:	2301      	movs	r3, #1
 800e832:	f7fd fd13 	bl	800c25c <disk_write>
 800e836:	4603      	mov	r3, r0
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d001      	beq.n	800e840 <f_sync+0x54>
 800e83c:	2301      	movs	r3, #1
 800e83e:	e04f      	b.n	800e8e0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	7d1b      	ldrb	r3, [r3, #20]
 800e844:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e848:	b2da      	uxtb	r2, r3
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e84e:	f7fd fb39 	bl	800bec4 <get_fattime>
 800e852:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e854:	68ba      	ldr	r2, [r7, #8]
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e85a:	4619      	mov	r1, r3
 800e85c:	4610      	mov	r0, r2
 800e85e:	f7fd ffeb 	bl	800c838 <move_window>
 800e862:	4603      	mov	r3, r0
 800e864:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e866:	7dfb      	ldrb	r3, [r7, #23]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d138      	bne.n	800e8de <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e870:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	330b      	adds	r3, #11
 800e876:	781a      	ldrb	r2, [r3, #0]
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	330b      	adds	r3, #11
 800e87c:	f042 0220 	orr.w	r2, r2, #32
 800e880:	b2d2      	uxtb	r2, r2
 800e882:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	6818      	ldr	r0, [r3, #0]
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	689b      	ldr	r3, [r3, #8]
 800e88c:	461a      	mov	r2, r3
 800e88e:	68f9      	ldr	r1, [r7, #12]
 800e890:	f7fe fcf8 	bl	800d284 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	f103 021c 	add.w	r2, r3, #28
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	68db      	ldr	r3, [r3, #12]
 800e89e:	4619      	mov	r1, r3
 800e8a0:	4610      	mov	r0, r2
 800e8a2:	f7fd fd6f 	bl	800c384 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	3316      	adds	r3, #22
 800e8aa:	6939      	ldr	r1, [r7, #16]
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	f7fd fd69 	bl	800c384 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	3312      	adds	r3, #18
 800e8b6:	2100      	movs	r1, #0
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	f7fd fd48 	bl	800c34e <st_word>
					fs->wflag = 1;
 800e8be:	68bb      	ldr	r3, [r7, #8]
 800e8c0:	2201      	movs	r2, #1
 800e8c2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e8c4:	68bb      	ldr	r3, [r7, #8]
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	f7fd ffe4 	bl	800c894 <sync_fs>
 800e8cc:	4603      	mov	r3, r0
 800e8ce:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	7d1b      	ldrb	r3, [r3, #20]
 800e8d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e8d8:	b2da      	uxtb	r2, r3
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e8de:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	3718      	adds	r7, #24
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	bd80      	pop	{r7, pc}

0800e8e8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b084      	sub	sp, #16
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e8f0:	6878      	ldr	r0, [r7, #4]
 800e8f2:	f7ff ff7b 	bl	800e7ec <f_sync>
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e8fa:	7bfb      	ldrb	r3, [r7, #15]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d118      	bne.n	800e932 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	f107 0208 	add.w	r2, r7, #8
 800e906:	4611      	mov	r1, r2
 800e908:	4618      	mov	r0, r3
 800e90a:	f7ff fa81 	bl	800de10 <validate>
 800e90e:	4603      	mov	r3, r0
 800e910:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e912:	7bfb      	ldrb	r3, [r7, #15]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d10c      	bne.n	800e932 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	691b      	ldr	r3, [r3, #16]
 800e91c:	4618      	mov	r0, r3
 800e91e:	f7fd fee7 	bl	800c6f0 <dec_lock>
 800e922:	4603      	mov	r3, r0
 800e924:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e926:	7bfb      	ldrb	r3, [r7, #15]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d102      	bne.n	800e932 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2200      	movs	r2, #0
 800e930:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e932:	7bfb      	ldrb	r3, [r7, #15]
}
 800e934:	4618      	mov	r0, r3
 800e936:	3710      	adds	r7, #16
 800e938:	46bd      	mov	sp, r7
 800e93a:	bd80      	pop	{r7, pc}

0800e93c <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800e93c:	b590      	push	{r4, r7, lr}
 800e93e:	b091      	sub	sp, #68	; 0x44
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800e944:	f107 0108 	add.w	r1, r7, #8
 800e948:	1d3b      	adds	r3, r7, #4
 800e94a:	2200      	movs	r2, #0
 800e94c:	4618      	mov	r0, r3
 800e94e:	f7ff f80f 	bl	800d970 <find_volume>
 800e952:	4603      	mov	r3, r0
 800e954:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800e958:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d131      	bne.n	800e9c4 <f_chdir+0x88>
		dj.obj.fs = fs;
 800e960:	68bb      	ldr	r3, [r7, #8]
 800e962:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 800e964:	687a      	ldr	r2, [r7, #4]
 800e966:	f107 030c 	add.w	r3, r7, #12
 800e96a:	4611      	mov	r1, r2
 800e96c:	4618      	mov	r0, r3
 800e96e:	f7fe fed5 	bl	800d71c <follow_path>
 800e972:	4603      	mov	r3, r0
 800e974:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 800e978:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d11a      	bne.n	800e9b6 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800e980:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800e984:	b25b      	sxtb	r3, r3
 800e986:	2b00      	cmp	r3, #0
 800e988:	da03      	bge.n	800e992 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 800e98a:	68bb      	ldr	r3, [r7, #8]
 800e98c:	697a      	ldr	r2, [r7, #20]
 800e98e:	615a      	str	r2, [r3, #20]
 800e990:	e011      	b.n	800e9b6 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 800e992:	7cbb      	ldrb	r3, [r7, #18]
 800e994:	f003 0310 	and.w	r3, r3, #16
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d009      	beq.n	800e9b0 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 800e99c:	68bb      	ldr	r3, [r7, #8]
 800e99e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9a0:	68bc      	ldr	r4, [r7, #8]
 800e9a2:	4611      	mov	r1, r2
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	f7fe fc4e 	bl	800d246 <ld_clust>
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	6163      	str	r3, [r4, #20]
 800e9ae:	e002      	b.n	800e9b6 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 800e9b0:	2305      	movs	r3, #5
 800e9b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800e9b6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e9ba:	2b04      	cmp	r3, #4
 800e9bc:	d102      	bne.n	800e9c4 <f_chdir+0x88>
 800e9be:	2305      	movs	r3, #5
 800e9c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 800e9c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	3744      	adds	r7, #68	; 0x44
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	bd90      	pop	{r4, r7, pc}

0800e9d0 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b086      	sub	sp, #24
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
 800e9d8:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d101      	bne.n	800e9e4 <f_opendir+0x14>
 800e9e0:	2309      	movs	r3, #9
 800e9e2:	e064      	b.n	800eaae <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800e9e8:	f107 010c 	add.w	r1, r7, #12
 800e9ec:	463b      	mov	r3, r7
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	f7fe ffbd 	bl	800d970 <find_volume>
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e9fa:	7dfb      	ldrb	r3, [r7, #23]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d14f      	bne.n	800eaa0 <f_opendir+0xd0>
		obj->fs = fs;
 800ea00:	68fa      	ldr	r2, [r7, #12]
 800ea02:	693b      	ldr	r3, [r7, #16]
 800ea04:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800ea06:	683b      	ldr	r3, [r7, #0]
 800ea08:	4619      	mov	r1, r3
 800ea0a:	6878      	ldr	r0, [r7, #4]
 800ea0c:	f7fe fe86 	bl	800d71c <follow_path>
 800ea10:	4603      	mov	r3, r0
 800ea12:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800ea14:	7dfb      	ldrb	r3, [r7, #23]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d13d      	bne.n	800ea96 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ea20:	b25b      	sxtb	r3, r3
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	db12      	blt.n	800ea4c <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800ea26:	693b      	ldr	r3, [r7, #16]
 800ea28:	799b      	ldrb	r3, [r3, #6]
 800ea2a:	f003 0310 	and.w	r3, r3, #16
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d00a      	beq.n	800ea48 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800ea32:	68fa      	ldr	r2, [r7, #12]
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	6a1b      	ldr	r3, [r3, #32]
 800ea38:	4619      	mov	r1, r3
 800ea3a:	4610      	mov	r0, r2
 800ea3c:	f7fe fc03 	bl	800d246 <ld_clust>
 800ea40:	4602      	mov	r2, r0
 800ea42:	693b      	ldr	r3, [r7, #16]
 800ea44:	609a      	str	r2, [r3, #8]
 800ea46:	e001      	b.n	800ea4c <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800ea48:	2305      	movs	r3, #5
 800ea4a:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800ea4c:	7dfb      	ldrb	r3, [r7, #23]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d121      	bne.n	800ea96 <f_opendir+0xc6>
				obj->id = fs->id;
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	88da      	ldrh	r2, [r3, #6]
 800ea56:	693b      	ldr	r3, [r7, #16]
 800ea58:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800ea5a:	2100      	movs	r1, #0
 800ea5c:	6878      	ldr	r0, [r7, #4]
 800ea5e:	f7fe fa6b 	bl	800cf38 <dir_sdi>
 800ea62:	4603      	mov	r3, r0
 800ea64:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800ea66:	7dfb      	ldrb	r3, [r7, #23]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d114      	bne.n	800ea96 <f_opendir+0xc6>
					if (obj->sclust) {
 800ea6c:	693b      	ldr	r3, [r7, #16]
 800ea6e:	689b      	ldr	r3, [r3, #8]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d00d      	beq.n	800ea90 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800ea74:	2100      	movs	r1, #0
 800ea76:	6878      	ldr	r0, [r7, #4]
 800ea78:	f7fd fdac 	bl	800c5d4 <inc_lock>
 800ea7c:	4602      	mov	r2, r0
 800ea7e:	693b      	ldr	r3, [r7, #16]
 800ea80:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800ea82:	693b      	ldr	r3, [r7, #16]
 800ea84:	691b      	ldr	r3, [r3, #16]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d105      	bne.n	800ea96 <f_opendir+0xc6>
 800ea8a:	2312      	movs	r3, #18
 800ea8c:	75fb      	strb	r3, [r7, #23]
 800ea8e:	e002      	b.n	800ea96 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800ea90:	693b      	ldr	r3, [r7, #16]
 800ea92:	2200      	movs	r2, #0
 800ea94:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800ea96:	7dfb      	ldrb	r3, [r7, #23]
 800ea98:	2b04      	cmp	r3, #4
 800ea9a:	d101      	bne.n	800eaa0 <f_opendir+0xd0>
 800ea9c:	2305      	movs	r3, #5
 800ea9e:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800eaa0:	7dfb      	ldrb	r3, [r7, #23]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d002      	beq.n	800eaac <f_opendir+0xdc>
 800eaa6:	693b      	ldr	r3, [r7, #16]
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800eaac:	7dfb      	ldrb	r3, [r7, #23]
}
 800eaae:	4618      	mov	r0, r3
 800eab0:	3718      	adds	r7, #24
 800eab2:	46bd      	mov	sp, r7
 800eab4:	bd80      	pop	{r7, pc}

0800eab6 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800eab6:	b580      	push	{r7, lr}
 800eab8:	b084      	sub	sp, #16
 800eaba:	af00      	add	r7, sp, #0
 800eabc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	f107 0208 	add.w	r2, r7, #8
 800eac4:	4611      	mov	r1, r2
 800eac6:	4618      	mov	r0, r3
 800eac8:	f7ff f9a2 	bl	800de10 <validate>
 800eacc:	4603      	mov	r3, r0
 800eace:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ead0:	7bfb      	ldrb	r3, [r7, #15]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d110      	bne.n	800eaf8 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	691b      	ldr	r3, [r3, #16]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d006      	beq.n	800eaec <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	691b      	ldr	r3, [r3, #16]
 800eae2:	4618      	mov	r0, r3
 800eae4:	f7fd fe04 	bl	800c6f0 <dec_lock>
 800eae8:	4603      	mov	r3, r0
 800eaea:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800eaec:	7bfb      	ldrb	r3, [r7, #15]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d102      	bne.n	800eaf8 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800eaf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800eafa:	4618      	mov	r0, r3
 800eafc:	3710      	adds	r7, #16
 800eafe:	46bd      	mov	sp, r7
 800eb00:	bd80      	pop	{r7, pc}

0800eb02 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800eb02:	b580      	push	{r7, lr}
 800eb04:	b084      	sub	sp, #16
 800eb06:	af00      	add	r7, sp, #0
 800eb08:	6078      	str	r0, [r7, #4]
 800eb0a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	f107 0208 	add.w	r2, r7, #8
 800eb12:	4611      	mov	r1, r2
 800eb14:	4618      	mov	r0, r3
 800eb16:	f7ff f97b 	bl	800de10 <validate>
 800eb1a:	4603      	mov	r3, r0
 800eb1c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800eb1e:	7bfb      	ldrb	r3, [r7, #15]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d126      	bne.n	800eb72 <f_readdir+0x70>
		if (!fno) {
 800eb24:	683b      	ldr	r3, [r7, #0]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d106      	bne.n	800eb38 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800eb2a:	2100      	movs	r1, #0
 800eb2c:	6878      	ldr	r0, [r7, #4]
 800eb2e:	f7fe fa03 	bl	800cf38 <dir_sdi>
 800eb32:	4603      	mov	r3, r0
 800eb34:	73fb      	strb	r3, [r7, #15]
 800eb36:	e01c      	b.n	800eb72 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800eb38:	2100      	movs	r1, #0
 800eb3a:	6878      	ldr	r0, [r7, #4]
 800eb3c:	f7fe fbc2 	bl	800d2c4 <dir_read>
 800eb40:	4603      	mov	r3, r0
 800eb42:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800eb44:	7bfb      	ldrb	r3, [r7, #15]
 800eb46:	2b04      	cmp	r3, #4
 800eb48:	d101      	bne.n	800eb4e <f_readdir+0x4c>
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800eb4e:	7bfb      	ldrb	r3, [r7, #15]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d10e      	bne.n	800eb72 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800eb54:	6839      	ldr	r1, [r7, #0]
 800eb56:	6878      	ldr	r0, [r7, #4]
 800eb58:	f7fe fcb6 	bl	800d4c8 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800eb5c:	2100      	movs	r1, #0
 800eb5e:	6878      	ldr	r0, [r7, #4]
 800eb60:	f7fe fa65 	bl	800d02e <dir_next>
 800eb64:	4603      	mov	r3, r0
 800eb66:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800eb68:	7bfb      	ldrb	r3, [r7, #15]
 800eb6a:	2b04      	cmp	r3, #4
 800eb6c:	d101      	bne.n	800eb72 <f_readdir+0x70>
 800eb6e:	2300      	movs	r3, #0
 800eb70:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800eb72:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb74:	4618      	mov	r0, r3
 800eb76:	3710      	adds	r7, #16
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	bd80      	pop	{r7, pc}

0800eb7c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b09e      	sub	sp, #120	; 0x78
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800eb84:	2300      	movs	r3, #0
 800eb86:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800eb88:	f107 010c 	add.w	r1, r7, #12
 800eb8c:	1d3b      	adds	r3, r7, #4
 800eb8e:	2202      	movs	r2, #2
 800eb90:	4618      	mov	r0, r3
 800eb92:	f7fe feed 	bl	800d970 <find_volume>
 800eb96:	4603      	mov	r3, r0
 800eb98:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 800eba0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	f040 80a4 	bne.w	800ecf2 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800ebaa:	687a      	ldr	r2, [r7, #4]
 800ebac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ebb0:	4611      	mov	r1, r2
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	f7fe fdb2 	bl	800d71c <follow_path>
 800ebb8:	4603      	mov	r3, r0
 800ebba:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 800ebbe:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d108      	bne.n	800ebd8 <f_unlink+0x5c>
 800ebc6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ebca:	f003 0320 	and.w	r3, r3, #32
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d002      	beq.n	800ebd8 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 800ebd2:	2306      	movs	r3, #6
 800ebd4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800ebd8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d108      	bne.n	800ebf2 <f_unlink+0x76>
 800ebe0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ebe4:	2102      	movs	r1, #2
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f7fd fc76 	bl	800c4d8 <chk_lock>
 800ebec:	4603      	mov	r3, r0
 800ebee:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800ebf2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d17b      	bne.n	800ecf2 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800ebfa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ebfe:	b25b      	sxtb	r3, r3
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	da03      	bge.n	800ec0c <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800ec04:	2306      	movs	r3, #6
 800ec06:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800ec0a:	e008      	b.n	800ec1e <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800ec0c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800ec10:	f003 0301 	and.w	r3, r3, #1
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d002      	beq.n	800ec1e <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800ec18:	2307      	movs	r3, #7
 800ec1a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 800ec1e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d13d      	bne.n	800eca2 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ec2a:	4611      	mov	r1, r2
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	f7fe fb0a 	bl	800d246 <ld_clust>
 800ec32:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800ec34:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800ec38:	f003 0310 	and.w	r3, r3, #16
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d030      	beq.n	800eca2 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	695b      	ldr	r3, [r3, #20]
 800ec44:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ec46:	429a      	cmp	r2, r3
 800ec48:	d103      	bne.n	800ec52 <f_unlink+0xd6>
						res = FR_DENIED;
 800ec4a:	2307      	movs	r3, #7
 800ec4c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800ec50:	e027      	b.n	800eca2 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800ec56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ec58:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800ec5a:	f107 0310 	add.w	r3, r7, #16
 800ec5e:	2100      	movs	r1, #0
 800ec60:	4618      	mov	r0, r3
 800ec62:	f7fe f969 	bl	800cf38 <dir_sdi>
 800ec66:	4603      	mov	r3, r0
 800ec68:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 800ec6c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d116      	bne.n	800eca2 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 800ec74:	f107 0310 	add.w	r3, r7, #16
 800ec78:	2100      	movs	r1, #0
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	f7fe fb22 	bl	800d2c4 <dir_read>
 800ec80:	4603      	mov	r3, r0
 800ec82:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800ec86:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d102      	bne.n	800ec94 <f_unlink+0x118>
 800ec8e:	2307      	movs	r3, #7
 800ec90:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800ec94:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ec98:	2b04      	cmp	r3, #4
 800ec9a:	d102      	bne.n	800eca2 <f_unlink+0x126>
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800eca2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d123      	bne.n	800ecf2 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800ecaa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ecae:	4618      	mov	r0, r3
 800ecb0:	f7fe fbec 	bl	800d48c <dir_remove>
 800ecb4:	4603      	mov	r3, r0
 800ecb6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800ecba:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d10c      	bne.n	800ecdc <f_unlink+0x160>
 800ecc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d009      	beq.n	800ecdc <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800ecc8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800eccc:	2200      	movs	r2, #0
 800ecce:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	f7fe f800 	bl	800ccd6 <remove_chain>
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800ecdc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d106      	bne.n	800ecf2 <f_unlink+0x176>
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	4618      	mov	r0, r3
 800ece8:	f7fd fdd4 	bl	800c894 <sync_fs>
 800ecec:	4603      	mov	r3, r0
 800ecee:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800ecf2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	3778      	adds	r7, #120	; 0x78
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bd80      	pop	{r7, pc}

0800ecfe <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800ecfe:	b580      	push	{r7, lr}
 800ed00:	b084      	sub	sp, #16
 800ed02:	af00      	add	r7, sp, #0
 800ed04:	6078      	str	r0, [r7, #4]
 800ed06:	460b      	mov	r3, r1
 800ed08:	70fb      	strb	r3, [r7, #3]

	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
		putc_bfd(pb, '\r');
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	685b      	ldr	r3, [r3, #4]
 800ed0e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	db25      	blt.n	800ed62 <putc_bfd+0x64>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	1c5a      	adds	r2, r3, #1
 800ed1a:	60fa      	str	r2, [r7, #12]
 800ed1c:	687a      	ldr	r2, [r7, #4]
 800ed1e:	4413      	add	r3, r2
 800ed20:	78fa      	ldrb	r2, [r7, #3]
 800ed22:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	2b3c      	cmp	r3, #60	; 0x3c
 800ed28:	dd12      	ble.n	800ed50 <putc_bfd+0x52>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	6818      	ldr	r0, [r3, #0]
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	f103 010c 	add.w	r1, r3, #12
 800ed34:	68fa      	ldr	r2, [r7, #12]
 800ed36:	f107 0308 	add.w	r3, r7, #8
 800ed3a:	f7ff fbe2 	bl	800e502 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800ed3e:	68ba      	ldr	r2, [r7, #8]
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	429a      	cmp	r2, r3
 800ed44:	d101      	bne.n	800ed4a <putc_bfd+0x4c>
 800ed46:	2300      	movs	r3, #0
 800ed48:	e001      	b.n	800ed4e <putc_bfd+0x50>
 800ed4a:	f04f 33ff 	mov.w	r3, #4294967295
 800ed4e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	68fa      	ldr	r2, [r7, #12]
 800ed54:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	689b      	ldr	r3, [r3, #8]
 800ed5a:	1c5a      	adds	r2, r3, #1
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	609a      	str	r2, [r3, #8]
 800ed60:	e000      	b.n	800ed64 <putc_bfd+0x66>
	if (i < 0) return;
 800ed62:	bf00      	nop
}
 800ed64:	3710      	adds	r7, #16
 800ed66:	46bd      	mov	sp, r7
 800ed68:	bd80      	pop	{r7, pc}

0800ed6a <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800ed6a:	b580      	push	{r7, lr}
 800ed6c:	b084      	sub	sp, #16
 800ed6e:	af00      	add	r7, sp, #0
 800ed70:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	685b      	ldr	r3, [r3, #4]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	db16      	blt.n	800eda8 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	6818      	ldr	r0, [r3, #0]
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	f103 010c 	add.w	r1, r3, #12
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	685b      	ldr	r3, [r3, #4]
 800ed88:	461a      	mov	r2, r3
 800ed8a:	f107 030c 	add.w	r3, r7, #12
 800ed8e:	f7ff fbb8 	bl	800e502 <f_write>
 800ed92:	4603      	mov	r3, r0
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d107      	bne.n	800eda8 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	685b      	ldr	r3, [r3, #4]
 800ed9c:	68fa      	ldr	r2, [r7, #12]
 800ed9e:	4293      	cmp	r3, r2
 800eda0:	d102      	bne.n	800eda8 <putc_flush+0x3e>
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	689b      	ldr	r3, [r3, #8]
 800eda6:	e001      	b.n	800edac <putc_flush+0x42>
	return EOF;
 800eda8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800edac:	4618      	mov	r0, r3
 800edae:	3710      	adds	r7, #16
 800edb0:	46bd      	mov	sp, r7
 800edb2:	bd80      	pop	{r7, pc}

0800edb4 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800edb4:	b480      	push	{r7}
 800edb6:	b083      	sub	sp, #12
 800edb8:	af00      	add	r7, sp, #0
 800edba:	6078      	str	r0, [r7, #4]
 800edbc:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	683a      	ldr	r2, [r7, #0]
 800edc2:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	2200      	movs	r2, #0
 800edc8:	605a      	str	r2, [r3, #4]
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	685a      	ldr	r2, [r3, #4]
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	609a      	str	r2, [r3, #8]
}
 800edd2:	bf00      	nop
 800edd4:	370c      	adds	r7, #12
 800edd6:	46bd      	mov	sp, r7
 800edd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eddc:	4770      	bx	lr
	...

0800ede0 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800ede0:	b40e      	push	{r1, r2, r3}
 800ede2:	b580      	push	{r7, lr}
 800ede4:	b0a7      	sub	sp, #156	; 0x9c
 800ede6:	af00      	add	r7, sp, #0
 800ede8:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800edea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800edee:	6879      	ldr	r1, [r7, #4]
 800edf0:	4618      	mov	r0, r3
 800edf2:	f7ff ffdf 	bl	800edb4 <putc_init>

	va_start(arp, fmt);
 800edf6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800edfa:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800edfc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ee00:	1c5a      	adds	r2, r3, #1
 800ee02:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ee06:	781b      	ldrb	r3, [r3, #0]
 800ee08:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800ee0c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	f000 81f4 	beq.w	800f1fe <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 800ee16:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ee1a:	2b25      	cmp	r3, #37	; 0x25
 800ee1c:	d008      	beq.n	800ee30 <f_printf+0x50>
			putc_bfd(&pb, c);
 800ee1e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800ee22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ee26:	4611      	mov	r1, r2
 800ee28:	4618      	mov	r0, r3
 800ee2a:	f7ff ff68 	bl	800ecfe <putc_bfd>
			continue;
 800ee2e:	e1e5      	b.n	800f1fc <f_printf+0x41c>
		}
		w = f = 0;
 800ee30:	2300      	movs	r3, #0
 800ee32:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800ee36:	2300      	movs	r3, #0
 800ee38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800ee3c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ee40:	1c5a      	adds	r2, r3, #1
 800ee42:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ee46:	781b      	ldrb	r3, [r3, #0]
 800ee48:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800ee4c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ee50:	2b30      	cmp	r3, #48	; 0x30
 800ee52:	d10b      	bne.n	800ee6c <f_printf+0x8c>
			f = 1; c = *fmt++;
 800ee54:	2301      	movs	r3, #1
 800ee56:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800ee5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ee5e:	1c5a      	adds	r2, r3, #1
 800ee60:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ee64:	781b      	ldrb	r3, [r3, #0]
 800ee66:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800ee6a:	e024      	b.n	800eeb6 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800ee6c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ee70:	2b2d      	cmp	r3, #45	; 0x2d
 800ee72:	d120      	bne.n	800eeb6 <f_printf+0xd6>
				f = 2; c = *fmt++;
 800ee74:	2302      	movs	r3, #2
 800ee76:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800ee7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ee7e:	1c5a      	adds	r2, r3, #1
 800ee80:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ee84:	781b      	ldrb	r3, [r3, #0]
 800ee86:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800ee8a:	e014      	b.n	800eeb6 <f_printf+0xd6>
			w = w * 10 + c - '0';
 800ee8c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ee90:	4613      	mov	r3, r2
 800ee92:	009b      	lsls	r3, r3, #2
 800ee94:	4413      	add	r3, r2
 800ee96:	005b      	lsls	r3, r3, #1
 800ee98:	461a      	mov	r2, r3
 800ee9a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ee9e:	4413      	add	r3, r2
 800eea0:	3b30      	subs	r3, #48	; 0x30
 800eea2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800eea6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800eeaa:	1c5a      	adds	r2, r3, #1
 800eeac:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800eeb0:	781b      	ldrb	r3, [r3, #0]
 800eeb2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800eeb6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800eeba:	2b2f      	cmp	r3, #47	; 0x2f
 800eebc:	d903      	bls.n	800eec6 <f_printf+0xe6>
 800eebe:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800eec2:	2b39      	cmp	r3, #57	; 0x39
 800eec4:	d9e2      	bls.n	800ee8c <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800eec6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800eeca:	2b6c      	cmp	r3, #108	; 0x6c
 800eecc:	d003      	beq.n	800eed6 <f_printf+0xf6>
 800eece:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800eed2:	2b4c      	cmp	r3, #76	; 0x4c
 800eed4:	d10d      	bne.n	800eef2 <f_printf+0x112>
			f |= 4; c = *fmt++;
 800eed6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800eeda:	f043 0304 	orr.w	r3, r3, #4
 800eede:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800eee2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800eee6:	1c5a      	adds	r2, r3, #1
 800eee8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800eeec:	781b      	ldrb	r3, [r3, #0]
 800eeee:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800eef2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	f000 8183 	beq.w	800f202 <f_printf+0x422>
		d = c;
 800eefc:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ef00:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800ef04:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ef08:	2b60      	cmp	r3, #96	; 0x60
 800ef0a:	d908      	bls.n	800ef1e <f_printf+0x13e>
 800ef0c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ef10:	2b7a      	cmp	r3, #122	; 0x7a
 800ef12:	d804      	bhi.n	800ef1e <f_printf+0x13e>
 800ef14:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ef18:	3b20      	subs	r3, #32
 800ef1a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800ef1e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ef22:	3b42      	subs	r3, #66	; 0x42
 800ef24:	2b16      	cmp	r3, #22
 800ef26:	f200 8098 	bhi.w	800f05a <f_printf+0x27a>
 800ef2a:	a201      	add	r2, pc, #4	; (adr r2, 800ef30 <f_printf+0x150>)
 800ef2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef30:	0800f03b 	.word	0x0800f03b
 800ef34:	0800f023 	.word	0x0800f023
 800ef38:	0800f04b 	.word	0x0800f04b
 800ef3c:	0800f05b 	.word	0x0800f05b
 800ef40:	0800f05b 	.word	0x0800f05b
 800ef44:	0800f05b 	.word	0x0800f05b
 800ef48:	0800f05b 	.word	0x0800f05b
 800ef4c:	0800f05b 	.word	0x0800f05b
 800ef50:	0800f05b 	.word	0x0800f05b
 800ef54:	0800f05b 	.word	0x0800f05b
 800ef58:	0800f05b 	.word	0x0800f05b
 800ef5c:	0800f05b 	.word	0x0800f05b
 800ef60:	0800f05b 	.word	0x0800f05b
 800ef64:	0800f043 	.word	0x0800f043
 800ef68:	0800f05b 	.word	0x0800f05b
 800ef6c:	0800f05b 	.word	0x0800f05b
 800ef70:	0800f05b 	.word	0x0800f05b
 800ef74:	0800ef8d 	.word	0x0800ef8d
 800ef78:	0800f05b 	.word	0x0800f05b
 800ef7c:	0800f04b 	.word	0x0800f04b
 800ef80:	0800f05b 	.word	0x0800f05b
 800ef84:	0800f05b 	.word	0x0800f05b
 800ef88:	0800f053 	.word	0x0800f053
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800ef8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef8e:	1d1a      	adds	r2, r3, #4
 800ef90:	67ba      	str	r2, [r7, #120]	; 0x78
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800ef96:	2300      	movs	r3, #0
 800ef98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ef9c:	e004      	b.n	800efa8 <f_printf+0x1c8>
 800ef9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800efa2:	3301      	adds	r3, #1
 800efa4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800efa8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800efaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800efae:	4413      	add	r3, r2
 800efb0:	781b      	ldrb	r3, [r3, #0]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d1f3      	bne.n	800ef9e <f_printf+0x1be>
			if (!(f & 2)) {
 800efb6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800efba:	f003 0302 	and.w	r3, r3, #2
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d11a      	bne.n	800eff8 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800efc2:	e005      	b.n	800efd0 <f_printf+0x1f0>
 800efc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800efc8:	2120      	movs	r1, #32
 800efca:	4618      	mov	r0, r3
 800efcc:	f7ff fe97 	bl	800ecfe <putc_bfd>
 800efd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800efd4:	1c5a      	adds	r2, r3, #1
 800efd6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800efda:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800efde:	429a      	cmp	r2, r3
 800efe0:	d8f0      	bhi.n	800efc4 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800efe2:	e009      	b.n	800eff8 <f_printf+0x218>
 800efe4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800efe6:	1c5a      	adds	r2, r3, #1
 800efe8:	67fa      	str	r2, [r7, #124]	; 0x7c
 800efea:	781a      	ldrb	r2, [r3, #0]
 800efec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800eff0:	4611      	mov	r1, r2
 800eff2:	4618      	mov	r0, r3
 800eff4:	f7ff fe83 	bl	800ecfe <putc_bfd>
 800eff8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800effa:	781b      	ldrb	r3, [r3, #0]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d1f1      	bne.n	800efe4 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800f000:	e005      	b.n	800f00e <f_printf+0x22e>
 800f002:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f006:	2120      	movs	r1, #32
 800f008:	4618      	mov	r0, r3
 800f00a:	f7ff fe78 	bl	800ecfe <putc_bfd>
 800f00e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f012:	1c5a      	adds	r2, r3, #1
 800f014:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800f018:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f01c:	429a      	cmp	r2, r3
 800f01e:	d8f0      	bhi.n	800f002 <f_printf+0x222>
			continue;
 800f020:	e0ec      	b.n	800f1fc <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800f022:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f024:	1d1a      	adds	r2, r3, #4
 800f026:	67ba      	str	r2, [r7, #120]	; 0x78
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	b2da      	uxtb	r2, r3
 800f02c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f030:	4611      	mov	r1, r2
 800f032:	4618      	mov	r0, r3
 800f034:	f7ff fe63 	bl	800ecfe <putc_bfd>
 800f038:	e0e0      	b.n	800f1fc <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 800f03a:	2302      	movs	r3, #2
 800f03c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800f040:	e014      	b.n	800f06c <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800f042:	2308      	movs	r3, #8
 800f044:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800f048:	e010      	b.n	800f06c <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800f04a:	230a      	movs	r3, #10
 800f04c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800f050:	e00c      	b.n	800f06c <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800f052:	2310      	movs	r3, #16
 800f054:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800f058:	e008      	b.n	800f06c <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800f05a:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800f05e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f062:	4611      	mov	r1, r2
 800f064:	4618      	mov	r0, r3
 800f066:	f7ff fe4a 	bl	800ecfe <putc_bfd>
 800f06a:	e0c7      	b.n	800f1fc <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800f06c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800f070:	f003 0304 	and.w	r3, r3, #4
 800f074:	2b00      	cmp	r3, #0
 800f076:	d004      	beq.n	800f082 <f_printf+0x2a2>
 800f078:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f07a:	1d1a      	adds	r2, r3, #4
 800f07c:	67ba      	str	r2, [r7, #120]	; 0x78
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	e00c      	b.n	800f09c <f_printf+0x2bc>
 800f082:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800f086:	2b44      	cmp	r3, #68	; 0x44
 800f088:	d104      	bne.n	800f094 <f_printf+0x2b4>
 800f08a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f08c:	1d1a      	adds	r2, r3, #4
 800f08e:	67ba      	str	r2, [r7, #120]	; 0x78
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	e003      	b.n	800f09c <f_printf+0x2bc>
 800f094:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f096:	1d1a      	adds	r2, r3, #4
 800f098:	67ba      	str	r2, [r7, #120]	; 0x78
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800f0a0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800f0a4:	2b44      	cmp	r3, #68	; 0x44
 800f0a6:	d10e      	bne.n	800f0c6 <f_printf+0x2e6>
 800f0a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	da0a      	bge.n	800f0c6 <f_printf+0x2e6>
			v = 0 - v;
 800f0b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f0b4:	425b      	negs	r3, r3
 800f0b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800f0ba:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800f0be:	f043 0308 	orr.w	r3, r3, #8
 800f0c2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800f0cc:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800f0d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f0d4:	fbb3 f1f2 	udiv	r1, r3, r2
 800f0d8:	fb02 f201 	mul.w	r2, r2, r1
 800f0dc:	1a9b      	subs	r3, r3, r2
 800f0de:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800f0e2:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800f0e6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f0ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800f0ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800f0f2:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800f0f6:	2b09      	cmp	r3, #9
 800f0f8:	d90b      	bls.n	800f112 <f_printf+0x332>
 800f0fa:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800f0fe:	2b78      	cmp	r3, #120	; 0x78
 800f100:	d101      	bne.n	800f106 <f_printf+0x326>
 800f102:	2227      	movs	r2, #39	; 0x27
 800f104:	e000      	b.n	800f108 <f_printf+0x328>
 800f106:	2207      	movs	r2, #7
 800f108:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800f10c:	4413      	add	r3, r2
 800f10e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800f112:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f116:	1c5a      	adds	r2, r3, #1
 800f118:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800f11c:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800f120:	3230      	adds	r2, #48	; 0x30
 800f122:	b2d2      	uxtb	r2, r2
 800f124:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800f128:	440b      	add	r3, r1
 800f12a:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800f12e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f132:	2b00      	cmp	r3, #0
 800f134:	d003      	beq.n	800f13e <f_printf+0x35e>
 800f136:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f13a:	2b1f      	cmp	r3, #31
 800f13c:	d9c6      	bls.n	800f0cc <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800f13e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800f142:	f003 0308 	and.w	r3, r3, #8
 800f146:	2b00      	cmp	r3, #0
 800f148:	d00a      	beq.n	800f160 <f_printf+0x380>
 800f14a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f14e:	1c5a      	adds	r2, r3, #1
 800f150:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800f154:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800f158:	4413      	add	r3, r2
 800f15a:	222d      	movs	r2, #45	; 0x2d
 800f15c:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800f160:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f164:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f168:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800f16c:	f003 0301 	and.w	r3, r3, #1
 800f170:	2b00      	cmp	r3, #0
 800f172:	d001      	beq.n	800f178 <f_printf+0x398>
 800f174:	2330      	movs	r3, #48	; 0x30
 800f176:	e000      	b.n	800f17a <f_printf+0x39a>
 800f178:	2320      	movs	r3, #32
 800f17a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800f17e:	e007      	b.n	800f190 <f_printf+0x3b0>
 800f180:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800f184:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f188:	4611      	mov	r1, r2
 800f18a:	4618      	mov	r0, r3
 800f18c:	f7ff fdb7 	bl	800ecfe <putc_bfd>
 800f190:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800f194:	f003 0302 	and.w	r3, r3, #2
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d108      	bne.n	800f1ae <f_printf+0x3ce>
 800f19c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f1a0:	1c5a      	adds	r2, r3, #1
 800f1a2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800f1a6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f1aa:	429a      	cmp	r2, r3
 800f1ac:	d8e8      	bhi.n	800f180 <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 800f1ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f1b2:	3b01      	subs	r3, #1
 800f1b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f1b8:	f107 020c 	add.w	r2, r7, #12
 800f1bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f1c0:	4413      	add	r3, r2
 800f1c2:	781a      	ldrb	r2, [r3, #0]
 800f1c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f1c8:	4611      	mov	r1, r2
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	f7ff fd97 	bl	800ecfe <putc_bfd>
		} while (i);
 800f1d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d1ea      	bne.n	800f1ae <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 800f1d8:	e007      	b.n	800f1ea <f_printf+0x40a>
 800f1da:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800f1de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f1e2:	4611      	mov	r1, r2
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	f7ff fd8a 	bl	800ecfe <putc_bfd>
 800f1ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f1ee:	1c5a      	adds	r2, r3, #1
 800f1f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800f1f4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f1f8:	429a      	cmp	r2, r3
 800f1fa:	d8ee      	bhi.n	800f1da <f_printf+0x3fa>
		c = *fmt++;
 800f1fc:	e5fe      	b.n	800edfc <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800f1fe:	bf00      	nop
 800f200:	e000      	b.n	800f204 <f_printf+0x424>
		if (!c) break;
 800f202:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800f204:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f208:	4618      	mov	r0, r3
 800f20a:	f7ff fdae 	bl	800ed6a <putc_flush>
 800f20e:	4603      	mov	r3, r0
}
 800f210:	4618      	mov	r0, r3
 800f212:	379c      	adds	r7, #156	; 0x9c
 800f214:	46bd      	mov	sp, r7
 800f216:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f21a:	b003      	add	sp, #12
 800f21c:	4770      	bx	lr
 800f21e:	bf00      	nop

0800f220 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f220:	b480      	push	{r7}
 800f222:	b087      	sub	sp, #28
 800f224:	af00      	add	r7, sp, #0
 800f226:	60f8      	str	r0, [r7, #12]
 800f228:	60b9      	str	r1, [r7, #8]
 800f22a:	4613      	mov	r3, r2
 800f22c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f22e:	2301      	movs	r3, #1
 800f230:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f232:	2300      	movs	r3, #0
 800f234:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f236:	4b1f      	ldr	r3, [pc, #124]	; (800f2b4 <FATFS_LinkDriverEx+0x94>)
 800f238:	7a5b      	ldrb	r3, [r3, #9]
 800f23a:	b2db      	uxtb	r3, r3
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d131      	bne.n	800f2a4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f240:	4b1c      	ldr	r3, [pc, #112]	; (800f2b4 <FATFS_LinkDriverEx+0x94>)
 800f242:	7a5b      	ldrb	r3, [r3, #9]
 800f244:	b2db      	uxtb	r3, r3
 800f246:	461a      	mov	r2, r3
 800f248:	4b1a      	ldr	r3, [pc, #104]	; (800f2b4 <FATFS_LinkDriverEx+0x94>)
 800f24a:	2100      	movs	r1, #0
 800f24c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f24e:	4b19      	ldr	r3, [pc, #100]	; (800f2b4 <FATFS_LinkDriverEx+0x94>)
 800f250:	7a5b      	ldrb	r3, [r3, #9]
 800f252:	b2db      	uxtb	r3, r3
 800f254:	4a17      	ldr	r2, [pc, #92]	; (800f2b4 <FATFS_LinkDriverEx+0x94>)
 800f256:	009b      	lsls	r3, r3, #2
 800f258:	4413      	add	r3, r2
 800f25a:	68fa      	ldr	r2, [r7, #12]
 800f25c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f25e:	4b15      	ldr	r3, [pc, #84]	; (800f2b4 <FATFS_LinkDriverEx+0x94>)
 800f260:	7a5b      	ldrb	r3, [r3, #9]
 800f262:	b2db      	uxtb	r3, r3
 800f264:	461a      	mov	r2, r3
 800f266:	4b13      	ldr	r3, [pc, #76]	; (800f2b4 <FATFS_LinkDriverEx+0x94>)
 800f268:	4413      	add	r3, r2
 800f26a:	79fa      	ldrb	r2, [r7, #7]
 800f26c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f26e:	4b11      	ldr	r3, [pc, #68]	; (800f2b4 <FATFS_LinkDriverEx+0x94>)
 800f270:	7a5b      	ldrb	r3, [r3, #9]
 800f272:	b2db      	uxtb	r3, r3
 800f274:	1c5a      	adds	r2, r3, #1
 800f276:	b2d1      	uxtb	r1, r2
 800f278:	4a0e      	ldr	r2, [pc, #56]	; (800f2b4 <FATFS_LinkDriverEx+0x94>)
 800f27a:	7251      	strb	r1, [r2, #9]
 800f27c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f27e:	7dbb      	ldrb	r3, [r7, #22]
 800f280:	3330      	adds	r3, #48	; 0x30
 800f282:	b2da      	uxtb	r2, r3
 800f284:	68bb      	ldr	r3, [r7, #8]
 800f286:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f288:	68bb      	ldr	r3, [r7, #8]
 800f28a:	3301      	adds	r3, #1
 800f28c:	223a      	movs	r2, #58	; 0x3a
 800f28e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f290:	68bb      	ldr	r3, [r7, #8]
 800f292:	3302      	adds	r3, #2
 800f294:	222f      	movs	r2, #47	; 0x2f
 800f296:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f298:	68bb      	ldr	r3, [r7, #8]
 800f29a:	3303      	adds	r3, #3
 800f29c:	2200      	movs	r2, #0
 800f29e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f2a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	371c      	adds	r7, #28
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b0:	4770      	bx	lr
 800f2b2:	bf00      	nop
 800f2b4:	20000168 	.word	0x20000168

0800f2b8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b082      	sub	sp, #8
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
 800f2c0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	6839      	ldr	r1, [r7, #0]
 800f2c6:	6878      	ldr	r0, [r7, #4]
 800f2c8:	f7ff ffaa 	bl	800f220 <FATFS_LinkDriverEx>
 800f2cc:	4603      	mov	r3, r0
}
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	3708      	adds	r7, #8
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	bd80      	pop	{r7, pc}

0800f2d6 <atoi>:
 800f2d6:	220a      	movs	r2, #10
 800f2d8:	2100      	movs	r1, #0
 800f2da:	f000 b9d7 	b.w	800f68c <strtol>
	...

0800f2e0 <__errno>:
 800f2e0:	4b01      	ldr	r3, [pc, #4]	; (800f2e8 <__errno+0x8>)
 800f2e2:	6818      	ldr	r0, [r3, #0]
 800f2e4:	4770      	bx	lr
 800f2e6:	bf00      	nop
 800f2e8:	20000078 	.word	0x20000078

0800f2ec <__libc_init_array>:
 800f2ec:	b570      	push	{r4, r5, r6, lr}
 800f2ee:	4d0d      	ldr	r5, [pc, #52]	; (800f324 <__libc_init_array+0x38>)
 800f2f0:	4c0d      	ldr	r4, [pc, #52]	; (800f328 <__libc_init_array+0x3c>)
 800f2f2:	1b64      	subs	r4, r4, r5
 800f2f4:	10a4      	asrs	r4, r4, #2
 800f2f6:	2600      	movs	r6, #0
 800f2f8:	42a6      	cmp	r6, r4
 800f2fa:	d109      	bne.n	800f310 <__libc_init_array+0x24>
 800f2fc:	4d0b      	ldr	r5, [pc, #44]	; (800f32c <__libc_init_array+0x40>)
 800f2fe:	4c0c      	ldr	r4, [pc, #48]	; (800f330 <__libc_init_array+0x44>)
 800f300:	f001 fb8a 	bl	8010a18 <_init>
 800f304:	1b64      	subs	r4, r4, r5
 800f306:	10a4      	asrs	r4, r4, #2
 800f308:	2600      	movs	r6, #0
 800f30a:	42a6      	cmp	r6, r4
 800f30c:	d105      	bne.n	800f31a <__libc_init_array+0x2e>
 800f30e:	bd70      	pop	{r4, r5, r6, pc}
 800f310:	f855 3b04 	ldr.w	r3, [r5], #4
 800f314:	4798      	blx	r3
 800f316:	3601      	adds	r6, #1
 800f318:	e7ee      	b.n	800f2f8 <__libc_init_array+0xc>
 800f31a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f31e:	4798      	blx	r3
 800f320:	3601      	adds	r6, #1
 800f322:	e7f2      	b.n	800f30a <__libc_init_array+0x1e>
 800f324:	08011988 	.word	0x08011988
 800f328:	08011988 	.word	0x08011988
 800f32c:	08011988 	.word	0x08011988
 800f330:	0801198c 	.word	0x0801198c

0800f334 <memset>:
 800f334:	4402      	add	r2, r0
 800f336:	4603      	mov	r3, r0
 800f338:	4293      	cmp	r3, r2
 800f33a:	d100      	bne.n	800f33e <memset+0xa>
 800f33c:	4770      	bx	lr
 800f33e:	f803 1b01 	strb.w	r1, [r3], #1
 800f342:	e7f9      	b.n	800f338 <memset+0x4>

0800f344 <iprintf>:
 800f344:	b40f      	push	{r0, r1, r2, r3}
 800f346:	4b0a      	ldr	r3, [pc, #40]	; (800f370 <iprintf+0x2c>)
 800f348:	b513      	push	{r0, r1, r4, lr}
 800f34a:	681c      	ldr	r4, [r3, #0]
 800f34c:	b124      	cbz	r4, 800f358 <iprintf+0x14>
 800f34e:	69a3      	ldr	r3, [r4, #24]
 800f350:	b913      	cbnz	r3, 800f358 <iprintf+0x14>
 800f352:	4620      	mov	r0, r4
 800f354:	f000 fb9c 	bl	800fa90 <__sinit>
 800f358:	ab05      	add	r3, sp, #20
 800f35a:	9a04      	ldr	r2, [sp, #16]
 800f35c:	68a1      	ldr	r1, [r4, #8]
 800f35e:	9301      	str	r3, [sp, #4]
 800f360:	4620      	mov	r0, r4
 800f362:	f000 fee3 	bl	801012c <_vfiprintf_r>
 800f366:	b002      	add	sp, #8
 800f368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f36c:	b004      	add	sp, #16
 800f36e:	4770      	bx	lr
 800f370:	20000078 	.word	0x20000078

0800f374 <putchar>:
 800f374:	4b09      	ldr	r3, [pc, #36]	; (800f39c <putchar+0x28>)
 800f376:	b513      	push	{r0, r1, r4, lr}
 800f378:	681c      	ldr	r4, [r3, #0]
 800f37a:	4601      	mov	r1, r0
 800f37c:	b134      	cbz	r4, 800f38c <putchar+0x18>
 800f37e:	69a3      	ldr	r3, [r4, #24]
 800f380:	b923      	cbnz	r3, 800f38c <putchar+0x18>
 800f382:	9001      	str	r0, [sp, #4]
 800f384:	4620      	mov	r0, r4
 800f386:	f000 fb83 	bl	800fa90 <__sinit>
 800f38a:	9901      	ldr	r1, [sp, #4]
 800f38c:	68a2      	ldr	r2, [r4, #8]
 800f38e:	4620      	mov	r0, r4
 800f390:	b002      	add	sp, #8
 800f392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f396:	f001 b98d 	b.w	80106b4 <_putc_r>
 800f39a:	bf00      	nop
 800f39c:	20000078 	.word	0x20000078

0800f3a0 <_puts_r>:
 800f3a0:	b570      	push	{r4, r5, r6, lr}
 800f3a2:	460e      	mov	r6, r1
 800f3a4:	4605      	mov	r5, r0
 800f3a6:	b118      	cbz	r0, 800f3b0 <_puts_r+0x10>
 800f3a8:	6983      	ldr	r3, [r0, #24]
 800f3aa:	b90b      	cbnz	r3, 800f3b0 <_puts_r+0x10>
 800f3ac:	f000 fb70 	bl	800fa90 <__sinit>
 800f3b0:	69ab      	ldr	r3, [r5, #24]
 800f3b2:	68ac      	ldr	r4, [r5, #8]
 800f3b4:	b913      	cbnz	r3, 800f3bc <_puts_r+0x1c>
 800f3b6:	4628      	mov	r0, r5
 800f3b8:	f000 fb6a 	bl	800fa90 <__sinit>
 800f3bc:	4b2c      	ldr	r3, [pc, #176]	; (800f470 <_puts_r+0xd0>)
 800f3be:	429c      	cmp	r4, r3
 800f3c0:	d120      	bne.n	800f404 <_puts_r+0x64>
 800f3c2:	686c      	ldr	r4, [r5, #4]
 800f3c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f3c6:	07db      	lsls	r3, r3, #31
 800f3c8:	d405      	bmi.n	800f3d6 <_puts_r+0x36>
 800f3ca:	89a3      	ldrh	r3, [r4, #12]
 800f3cc:	0598      	lsls	r0, r3, #22
 800f3ce:	d402      	bmi.n	800f3d6 <_puts_r+0x36>
 800f3d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f3d2:	f000 fc0d 	bl	800fbf0 <__retarget_lock_acquire_recursive>
 800f3d6:	89a3      	ldrh	r3, [r4, #12]
 800f3d8:	0719      	lsls	r1, r3, #28
 800f3da:	d51d      	bpl.n	800f418 <_puts_r+0x78>
 800f3dc:	6923      	ldr	r3, [r4, #16]
 800f3de:	b1db      	cbz	r3, 800f418 <_puts_r+0x78>
 800f3e0:	3e01      	subs	r6, #1
 800f3e2:	68a3      	ldr	r3, [r4, #8]
 800f3e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f3e8:	3b01      	subs	r3, #1
 800f3ea:	60a3      	str	r3, [r4, #8]
 800f3ec:	bb39      	cbnz	r1, 800f43e <_puts_r+0x9e>
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	da38      	bge.n	800f464 <_puts_r+0xc4>
 800f3f2:	4622      	mov	r2, r4
 800f3f4:	210a      	movs	r1, #10
 800f3f6:	4628      	mov	r0, r5
 800f3f8:	f000 f952 	bl	800f6a0 <__swbuf_r>
 800f3fc:	3001      	adds	r0, #1
 800f3fe:	d011      	beq.n	800f424 <_puts_r+0x84>
 800f400:	250a      	movs	r5, #10
 800f402:	e011      	b.n	800f428 <_puts_r+0x88>
 800f404:	4b1b      	ldr	r3, [pc, #108]	; (800f474 <_puts_r+0xd4>)
 800f406:	429c      	cmp	r4, r3
 800f408:	d101      	bne.n	800f40e <_puts_r+0x6e>
 800f40a:	68ac      	ldr	r4, [r5, #8]
 800f40c:	e7da      	b.n	800f3c4 <_puts_r+0x24>
 800f40e:	4b1a      	ldr	r3, [pc, #104]	; (800f478 <_puts_r+0xd8>)
 800f410:	429c      	cmp	r4, r3
 800f412:	bf08      	it	eq
 800f414:	68ec      	ldreq	r4, [r5, #12]
 800f416:	e7d5      	b.n	800f3c4 <_puts_r+0x24>
 800f418:	4621      	mov	r1, r4
 800f41a:	4628      	mov	r0, r5
 800f41c:	f000 f992 	bl	800f744 <__swsetup_r>
 800f420:	2800      	cmp	r0, #0
 800f422:	d0dd      	beq.n	800f3e0 <_puts_r+0x40>
 800f424:	f04f 35ff 	mov.w	r5, #4294967295
 800f428:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f42a:	07da      	lsls	r2, r3, #31
 800f42c:	d405      	bmi.n	800f43a <_puts_r+0x9a>
 800f42e:	89a3      	ldrh	r3, [r4, #12]
 800f430:	059b      	lsls	r3, r3, #22
 800f432:	d402      	bmi.n	800f43a <_puts_r+0x9a>
 800f434:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f436:	f000 fbdc 	bl	800fbf2 <__retarget_lock_release_recursive>
 800f43a:	4628      	mov	r0, r5
 800f43c:	bd70      	pop	{r4, r5, r6, pc}
 800f43e:	2b00      	cmp	r3, #0
 800f440:	da04      	bge.n	800f44c <_puts_r+0xac>
 800f442:	69a2      	ldr	r2, [r4, #24]
 800f444:	429a      	cmp	r2, r3
 800f446:	dc06      	bgt.n	800f456 <_puts_r+0xb6>
 800f448:	290a      	cmp	r1, #10
 800f44a:	d004      	beq.n	800f456 <_puts_r+0xb6>
 800f44c:	6823      	ldr	r3, [r4, #0]
 800f44e:	1c5a      	adds	r2, r3, #1
 800f450:	6022      	str	r2, [r4, #0]
 800f452:	7019      	strb	r1, [r3, #0]
 800f454:	e7c5      	b.n	800f3e2 <_puts_r+0x42>
 800f456:	4622      	mov	r2, r4
 800f458:	4628      	mov	r0, r5
 800f45a:	f000 f921 	bl	800f6a0 <__swbuf_r>
 800f45e:	3001      	adds	r0, #1
 800f460:	d1bf      	bne.n	800f3e2 <_puts_r+0x42>
 800f462:	e7df      	b.n	800f424 <_puts_r+0x84>
 800f464:	6823      	ldr	r3, [r4, #0]
 800f466:	250a      	movs	r5, #10
 800f468:	1c5a      	adds	r2, r3, #1
 800f46a:	6022      	str	r2, [r4, #0]
 800f46c:	701d      	strb	r5, [r3, #0]
 800f46e:	e7db      	b.n	800f428 <_puts_r+0x88>
 800f470:	0801190c 	.word	0x0801190c
 800f474:	0801192c 	.word	0x0801192c
 800f478:	080118ec 	.word	0x080118ec

0800f47c <puts>:
 800f47c:	4b02      	ldr	r3, [pc, #8]	; (800f488 <puts+0xc>)
 800f47e:	4601      	mov	r1, r0
 800f480:	6818      	ldr	r0, [r3, #0]
 800f482:	f7ff bf8d 	b.w	800f3a0 <_puts_r>
 800f486:	bf00      	nop
 800f488:	20000078 	.word	0x20000078

0800f48c <siprintf>:
 800f48c:	b40e      	push	{r1, r2, r3}
 800f48e:	b500      	push	{lr}
 800f490:	b09c      	sub	sp, #112	; 0x70
 800f492:	ab1d      	add	r3, sp, #116	; 0x74
 800f494:	9002      	str	r0, [sp, #8]
 800f496:	9006      	str	r0, [sp, #24]
 800f498:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f49c:	4809      	ldr	r0, [pc, #36]	; (800f4c4 <siprintf+0x38>)
 800f49e:	9107      	str	r1, [sp, #28]
 800f4a0:	9104      	str	r1, [sp, #16]
 800f4a2:	4909      	ldr	r1, [pc, #36]	; (800f4c8 <siprintf+0x3c>)
 800f4a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4a8:	9105      	str	r1, [sp, #20]
 800f4aa:	6800      	ldr	r0, [r0, #0]
 800f4ac:	9301      	str	r3, [sp, #4]
 800f4ae:	a902      	add	r1, sp, #8
 800f4b0:	f000 fd12 	bl	800fed8 <_svfiprintf_r>
 800f4b4:	9b02      	ldr	r3, [sp, #8]
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	701a      	strb	r2, [r3, #0]
 800f4ba:	b01c      	add	sp, #112	; 0x70
 800f4bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f4c0:	b003      	add	sp, #12
 800f4c2:	4770      	bx	lr
 800f4c4:	20000078 	.word	0x20000078
 800f4c8:	ffff0208 	.word	0xffff0208

0800f4cc <strtok>:
 800f4cc:	4b16      	ldr	r3, [pc, #88]	; (800f528 <strtok+0x5c>)
 800f4ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f4d0:	681e      	ldr	r6, [r3, #0]
 800f4d2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800f4d4:	4605      	mov	r5, r0
 800f4d6:	b9fc      	cbnz	r4, 800f518 <strtok+0x4c>
 800f4d8:	2050      	movs	r0, #80	; 0x50
 800f4da:	9101      	str	r1, [sp, #4]
 800f4dc:	f000 fbee 	bl	800fcbc <malloc>
 800f4e0:	9901      	ldr	r1, [sp, #4]
 800f4e2:	65b0      	str	r0, [r6, #88]	; 0x58
 800f4e4:	4602      	mov	r2, r0
 800f4e6:	b920      	cbnz	r0, 800f4f2 <strtok+0x26>
 800f4e8:	4b10      	ldr	r3, [pc, #64]	; (800f52c <strtok+0x60>)
 800f4ea:	4811      	ldr	r0, [pc, #68]	; (800f530 <strtok+0x64>)
 800f4ec:	2157      	movs	r1, #87	; 0x57
 800f4ee:	f000 f997 	bl	800f820 <__assert_func>
 800f4f2:	e9c0 4400 	strd	r4, r4, [r0]
 800f4f6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800f4fa:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800f4fe:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800f502:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800f506:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800f50a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800f50e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800f512:	6184      	str	r4, [r0, #24]
 800f514:	7704      	strb	r4, [r0, #28]
 800f516:	6244      	str	r4, [r0, #36]	; 0x24
 800f518:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800f51a:	2301      	movs	r3, #1
 800f51c:	4628      	mov	r0, r5
 800f51e:	b002      	add	sp, #8
 800f520:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f524:	f000 b806 	b.w	800f534 <__strtok_r>
 800f528:	20000078 	.word	0x20000078
 800f52c:	08011734 	.word	0x08011734
 800f530:	0801174b 	.word	0x0801174b

0800f534 <__strtok_r>:
 800f534:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f536:	b908      	cbnz	r0, 800f53c <__strtok_r+0x8>
 800f538:	6810      	ldr	r0, [r2, #0]
 800f53a:	b188      	cbz	r0, 800f560 <__strtok_r+0x2c>
 800f53c:	4604      	mov	r4, r0
 800f53e:	4620      	mov	r0, r4
 800f540:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f544:	460f      	mov	r7, r1
 800f546:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f54a:	b91e      	cbnz	r6, 800f554 <__strtok_r+0x20>
 800f54c:	b965      	cbnz	r5, 800f568 <__strtok_r+0x34>
 800f54e:	6015      	str	r5, [r2, #0]
 800f550:	4628      	mov	r0, r5
 800f552:	e005      	b.n	800f560 <__strtok_r+0x2c>
 800f554:	42b5      	cmp	r5, r6
 800f556:	d1f6      	bne.n	800f546 <__strtok_r+0x12>
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d1f0      	bne.n	800f53e <__strtok_r+0xa>
 800f55c:	6014      	str	r4, [r2, #0]
 800f55e:	7003      	strb	r3, [r0, #0]
 800f560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f562:	461c      	mov	r4, r3
 800f564:	e00c      	b.n	800f580 <__strtok_r+0x4c>
 800f566:	b915      	cbnz	r5, 800f56e <__strtok_r+0x3a>
 800f568:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f56c:	460e      	mov	r6, r1
 800f56e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800f572:	42ab      	cmp	r3, r5
 800f574:	d1f7      	bne.n	800f566 <__strtok_r+0x32>
 800f576:	2b00      	cmp	r3, #0
 800f578:	d0f3      	beq.n	800f562 <__strtok_r+0x2e>
 800f57a:	2300      	movs	r3, #0
 800f57c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800f580:	6014      	str	r4, [r2, #0]
 800f582:	e7ed      	b.n	800f560 <__strtok_r+0x2c>

0800f584 <_strtol_l.isra.0>:
 800f584:	2b01      	cmp	r3, #1
 800f586:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f58a:	d001      	beq.n	800f590 <_strtol_l.isra.0+0xc>
 800f58c:	2b24      	cmp	r3, #36	; 0x24
 800f58e:	d906      	bls.n	800f59e <_strtol_l.isra.0+0x1a>
 800f590:	f7ff fea6 	bl	800f2e0 <__errno>
 800f594:	2316      	movs	r3, #22
 800f596:	6003      	str	r3, [r0, #0]
 800f598:	2000      	movs	r0, #0
 800f59a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f59e:	4f3a      	ldr	r7, [pc, #232]	; (800f688 <_strtol_l.isra.0+0x104>)
 800f5a0:	468e      	mov	lr, r1
 800f5a2:	4676      	mov	r6, lr
 800f5a4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800f5a8:	5de5      	ldrb	r5, [r4, r7]
 800f5aa:	f015 0508 	ands.w	r5, r5, #8
 800f5ae:	d1f8      	bne.n	800f5a2 <_strtol_l.isra.0+0x1e>
 800f5b0:	2c2d      	cmp	r4, #45	; 0x2d
 800f5b2:	d134      	bne.n	800f61e <_strtol_l.isra.0+0x9a>
 800f5b4:	f89e 4000 	ldrb.w	r4, [lr]
 800f5b8:	f04f 0801 	mov.w	r8, #1
 800f5bc:	f106 0e02 	add.w	lr, r6, #2
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d05c      	beq.n	800f67e <_strtol_l.isra.0+0xfa>
 800f5c4:	2b10      	cmp	r3, #16
 800f5c6:	d10c      	bne.n	800f5e2 <_strtol_l.isra.0+0x5e>
 800f5c8:	2c30      	cmp	r4, #48	; 0x30
 800f5ca:	d10a      	bne.n	800f5e2 <_strtol_l.isra.0+0x5e>
 800f5cc:	f89e 4000 	ldrb.w	r4, [lr]
 800f5d0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f5d4:	2c58      	cmp	r4, #88	; 0x58
 800f5d6:	d14d      	bne.n	800f674 <_strtol_l.isra.0+0xf0>
 800f5d8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800f5dc:	2310      	movs	r3, #16
 800f5de:	f10e 0e02 	add.w	lr, lr, #2
 800f5e2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800f5e6:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f5ea:	2600      	movs	r6, #0
 800f5ec:	fbbc f9f3 	udiv	r9, ip, r3
 800f5f0:	4635      	mov	r5, r6
 800f5f2:	fb03 ca19 	mls	sl, r3, r9, ip
 800f5f6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800f5fa:	2f09      	cmp	r7, #9
 800f5fc:	d818      	bhi.n	800f630 <_strtol_l.isra.0+0xac>
 800f5fe:	463c      	mov	r4, r7
 800f600:	42a3      	cmp	r3, r4
 800f602:	dd24      	ble.n	800f64e <_strtol_l.isra.0+0xca>
 800f604:	2e00      	cmp	r6, #0
 800f606:	db1f      	blt.n	800f648 <_strtol_l.isra.0+0xc4>
 800f608:	45a9      	cmp	r9, r5
 800f60a:	d31d      	bcc.n	800f648 <_strtol_l.isra.0+0xc4>
 800f60c:	d101      	bne.n	800f612 <_strtol_l.isra.0+0x8e>
 800f60e:	45a2      	cmp	sl, r4
 800f610:	db1a      	blt.n	800f648 <_strtol_l.isra.0+0xc4>
 800f612:	fb05 4503 	mla	r5, r5, r3, r4
 800f616:	2601      	movs	r6, #1
 800f618:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800f61c:	e7eb      	b.n	800f5f6 <_strtol_l.isra.0+0x72>
 800f61e:	2c2b      	cmp	r4, #43	; 0x2b
 800f620:	bf08      	it	eq
 800f622:	f89e 4000 	ldrbeq.w	r4, [lr]
 800f626:	46a8      	mov	r8, r5
 800f628:	bf08      	it	eq
 800f62a:	f106 0e02 	addeq.w	lr, r6, #2
 800f62e:	e7c7      	b.n	800f5c0 <_strtol_l.isra.0+0x3c>
 800f630:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800f634:	2f19      	cmp	r7, #25
 800f636:	d801      	bhi.n	800f63c <_strtol_l.isra.0+0xb8>
 800f638:	3c37      	subs	r4, #55	; 0x37
 800f63a:	e7e1      	b.n	800f600 <_strtol_l.isra.0+0x7c>
 800f63c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800f640:	2f19      	cmp	r7, #25
 800f642:	d804      	bhi.n	800f64e <_strtol_l.isra.0+0xca>
 800f644:	3c57      	subs	r4, #87	; 0x57
 800f646:	e7db      	b.n	800f600 <_strtol_l.isra.0+0x7c>
 800f648:	f04f 36ff 	mov.w	r6, #4294967295
 800f64c:	e7e4      	b.n	800f618 <_strtol_l.isra.0+0x94>
 800f64e:	2e00      	cmp	r6, #0
 800f650:	da05      	bge.n	800f65e <_strtol_l.isra.0+0xda>
 800f652:	2322      	movs	r3, #34	; 0x22
 800f654:	6003      	str	r3, [r0, #0]
 800f656:	4665      	mov	r5, ip
 800f658:	b942      	cbnz	r2, 800f66c <_strtol_l.isra.0+0xe8>
 800f65a:	4628      	mov	r0, r5
 800f65c:	e79d      	b.n	800f59a <_strtol_l.isra.0+0x16>
 800f65e:	f1b8 0f00 	cmp.w	r8, #0
 800f662:	d000      	beq.n	800f666 <_strtol_l.isra.0+0xe2>
 800f664:	426d      	negs	r5, r5
 800f666:	2a00      	cmp	r2, #0
 800f668:	d0f7      	beq.n	800f65a <_strtol_l.isra.0+0xd6>
 800f66a:	b10e      	cbz	r6, 800f670 <_strtol_l.isra.0+0xec>
 800f66c:	f10e 31ff 	add.w	r1, lr, #4294967295
 800f670:	6011      	str	r1, [r2, #0]
 800f672:	e7f2      	b.n	800f65a <_strtol_l.isra.0+0xd6>
 800f674:	2430      	movs	r4, #48	; 0x30
 800f676:	2b00      	cmp	r3, #0
 800f678:	d1b3      	bne.n	800f5e2 <_strtol_l.isra.0+0x5e>
 800f67a:	2308      	movs	r3, #8
 800f67c:	e7b1      	b.n	800f5e2 <_strtol_l.isra.0+0x5e>
 800f67e:	2c30      	cmp	r4, #48	; 0x30
 800f680:	d0a4      	beq.n	800f5cc <_strtol_l.isra.0+0x48>
 800f682:	230a      	movs	r3, #10
 800f684:	e7ad      	b.n	800f5e2 <_strtol_l.isra.0+0x5e>
 800f686:	bf00      	nop
 800f688:	080117e9 	.word	0x080117e9

0800f68c <strtol>:
 800f68c:	4613      	mov	r3, r2
 800f68e:	460a      	mov	r2, r1
 800f690:	4601      	mov	r1, r0
 800f692:	4802      	ldr	r0, [pc, #8]	; (800f69c <strtol+0x10>)
 800f694:	6800      	ldr	r0, [r0, #0]
 800f696:	f7ff bf75 	b.w	800f584 <_strtol_l.isra.0>
 800f69a:	bf00      	nop
 800f69c:	20000078 	.word	0x20000078

0800f6a0 <__swbuf_r>:
 800f6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6a2:	460e      	mov	r6, r1
 800f6a4:	4614      	mov	r4, r2
 800f6a6:	4605      	mov	r5, r0
 800f6a8:	b118      	cbz	r0, 800f6b2 <__swbuf_r+0x12>
 800f6aa:	6983      	ldr	r3, [r0, #24]
 800f6ac:	b90b      	cbnz	r3, 800f6b2 <__swbuf_r+0x12>
 800f6ae:	f000 f9ef 	bl	800fa90 <__sinit>
 800f6b2:	4b21      	ldr	r3, [pc, #132]	; (800f738 <__swbuf_r+0x98>)
 800f6b4:	429c      	cmp	r4, r3
 800f6b6:	d12b      	bne.n	800f710 <__swbuf_r+0x70>
 800f6b8:	686c      	ldr	r4, [r5, #4]
 800f6ba:	69a3      	ldr	r3, [r4, #24]
 800f6bc:	60a3      	str	r3, [r4, #8]
 800f6be:	89a3      	ldrh	r3, [r4, #12]
 800f6c0:	071a      	lsls	r2, r3, #28
 800f6c2:	d52f      	bpl.n	800f724 <__swbuf_r+0x84>
 800f6c4:	6923      	ldr	r3, [r4, #16]
 800f6c6:	b36b      	cbz	r3, 800f724 <__swbuf_r+0x84>
 800f6c8:	6923      	ldr	r3, [r4, #16]
 800f6ca:	6820      	ldr	r0, [r4, #0]
 800f6cc:	1ac0      	subs	r0, r0, r3
 800f6ce:	6963      	ldr	r3, [r4, #20]
 800f6d0:	b2f6      	uxtb	r6, r6
 800f6d2:	4283      	cmp	r3, r0
 800f6d4:	4637      	mov	r7, r6
 800f6d6:	dc04      	bgt.n	800f6e2 <__swbuf_r+0x42>
 800f6d8:	4621      	mov	r1, r4
 800f6da:	4628      	mov	r0, r5
 800f6dc:	f000 f944 	bl	800f968 <_fflush_r>
 800f6e0:	bb30      	cbnz	r0, 800f730 <__swbuf_r+0x90>
 800f6e2:	68a3      	ldr	r3, [r4, #8]
 800f6e4:	3b01      	subs	r3, #1
 800f6e6:	60a3      	str	r3, [r4, #8]
 800f6e8:	6823      	ldr	r3, [r4, #0]
 800f6ea:	1c5a      	adds	r2, r3, #1
 800f6ec:	6022      	str	r2, [r4, #0]
 800f6ee:	701e      	strb	r6, [r3, #0]
 800f6f0:	6963      	ldr	r3, [r4, #20]
 800f6f2:	3001      	adds	r0, #1
 800f6f4:	4283      	cmp	r3, r0
 800f6f6:	d004      	beq.n	800f702 <__swbuf_r+0x62>
 800f6f8:	89a3      	ldrh	r3, [r4, #12]
 800f6fa:	07db      	lsls	r3, r3, #31
 800f6fc:	d506      	bpl.n	800f70c <__swbuf_r+0x6c>
 800f6fe:	2e0a      	cmp	r6, #10
 800f700:	d104      	bne.n	800f70c <__swbuf_r+0x6c>
 800f702:	4621      	mov	r1, r4
 800f704:	4628      	mov	r0, r5
 800f706:	f000 f92f 	bl	800f968 <_fflush_r>
 800f70a:	b988      	cbnz	r0, 800f730 <__swbuf_r+0x90>
 800f70c:	4638      	mov	r0, r7
 800f70e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f710:	4b0a      	ldr	r3, [pc, #40]	; (800f73c <__swbuf_r+0x9c>)
 800f712:	429c      	cmp	r4, r3
 800f714:	d101      	bne.n	800f71a <__swbuf_r+0x7a>
 800f716:	68ac      	ldr	r4, [r5, #8]
 800f718:	e7cf      	b.n	800f6ba <__swbuf_r+0x1a>
 800f71a:	4b09      	ldr	r3, [pc, #36]	; (800f740 <__swbuf_r+0xa0>)
 800f71c:	429c      	cmp	r4, r3
 800f71e:	bf08      	it	eq
 800f720:	68ec      	ldreq	r4, [r5, #12]
 800f722:	e7ca      	b.n	800f6ba <__swbuf_r+0x1a>
 800f724:	4621      	mov	r1, r4
 800f726:	4628      	mov	r0, r5
 800f728:	f000 f80c 	bl	800f744 <__swsetup_r>
 800f72c:	2800      	cmp	r0, #0
 800f72e:	d0cb      	beq.n	800f6c8 <__swbuf_r+0x28>
 800f730:	f04f 37ff 	mov.w	r7, #4294967295
 800f734:	e7ea      	b.n	800f70c <__swbuf_r+0x6c>
 800f736:	bf00      	nop
 800f738:	0801190c 	.word	0x0801190c
 800f73c:	0801192c 	.word	0x0801192c
 800f740:	080118ec 	.word	0x080118ec

0800f744 <__swsetup_r>:
 800f744:	4b32      	ldr	r3, [pc, #200]	; (800f810 <__swsetup_r+0xcc>)
 800f746:	b570      	push	{r4, r5, r6, lr}
 800f748:	681d      	ldr	r5, [r3, #0]
 800f74a:	4606      	mov	r6, r0
 800f74c:	460c      	mov	r4, r1
 800f74e:	b125      	cbz	r5, 800f75a <__swsetup_r+0x16>
 800f750:	69ab      	ldr	r3, [r5, #24]
 800f752:	b913      	cbnz	r3, 800f75a <__swsetup_r+0x16>
 800f754:	4628      	mov	r0, r5
 800f756:	f000 f99b 	bl	800fa90 <__sinit>
 800f75a:	4b2e      	ldr	r3, [pc, #184]	; (800f814 <__swsetup_r+0xd0>)
 800f75c:	429c      	cmp	r4, r3
 800f75e:	d10f      	bne.n	800f780 <__swsetup_r+0x3c>
 800f760:	686c      	ldr	r4, [r5, #4]
 800f762:	89a3      	ldrh	r3, [r4, #12]
 800f764:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f768:	0719      	lsls	r1, r3, #28
 800f76a:	d42c      	bmi.n	800f7c6 <__swsetup_r+0x82>
 800f76c:	06dd      	lsls	r5, r3, #27
 800f76e:	d411      	bmi.n	800f794 <__swsetup_r+0x50>
 800f770:	2309      	movs	r3, #9
 800f772:	6033      	str	r3, [r6, #0]
 800f774:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f778:	81a3      	strh	r3, [r4, #12]
 800f77a:	f04f 30ff 	mov.w	r0, #4294967295
 800f77e:	e03e      	b.n	800f7fe <__swsetup_r+0xba>
 800f780:	4b25      	ldr	r3, [pc, #148]	; (800f818 <__swsetup_r+0xd4>)
 800f782:	429c      	cmp	r4, r3
 800f784:	d101      	bne.n	800f78a <__swsetup_r+0x46>
 800f786:	68ac      	ldr	r4, [r5, #8]
 800f788:	e7eb      	b.n	800f762 <__swsetup_r+0x1e>
 800f78a:	4b24      	ldr	r3, [pc, #144]	; (800f81c <__swsetup_r+0xd8>)
 800f78c:	429c      	cmp	r4, r3
 800f78e:	bf08      	it	eq
 800f790:	68ec      	ldreq	r4, [r5, #12]
 800f792:	e7e6      	b.n	800f762 <__swsetup_r+0x1e>
 800f794:	0758      	lsls	r0, r3, #29
 800f796:	d512      	bpl.n	800f7be <__swsetup_r+0x7a>
 800f798:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f79a:	b141      	cbz	r1, 800f7ae <__swsetup_r+0x6a>
 800f79c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f7a0:	4299      	cmp	r1, r3
 800f7a2:	d002      	beq.n	800f7aa <__swsetup_r+0x66>
 800f7a4:	4630      	mov	r0, r6
 800f7a6:	f000 fa91 	bl	800fccc <_free_r>
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	6363      	str	r3, [r4, #52]	; 0x34
 800f7ae:	89a3      	ldrh	r3, [r4, #12]
 800f7b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f7b4:	81a3      	strh	r3, [r4, #12]
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	6063      	str	r3, [r4, #4]
 800f7ba:	6923      	ldr	r3, [r4, #16]
 800f7bc:	6023      	str	r3, [r4, #0]
 800f7be:	89a3      	ldrh	r3, [r4, #12]
 800f7c0:	f043 0308 	orr.w	r3, r3, #8
 800f7c4:	81a3      	strh	r3, [r4, #12]
 800f7c6:	6923      	ldr	r3, [r4, #16]
 800f7c8:	b94b      	cbnz	r3, 800f7de <__swsetup_r+0x9a>
 800f7ca:	89a3      	ldrh	r3, [r4, #12]
 800f7cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f7d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f7d4:	d003      	beq.n	800f7de <__swsetup_r+0x9a>
 800f7d6:	4621      	mov	r1, r4
 800f7d8:	4630      	mov	r0, r6
 800f7da:	f000 fa2f 	bl	800fc3c <__smakebuf_r>
 800f7de:	89a0      	ldrh	r0, [r4, #12]
 800f7e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f7e4:	f010 0301 	ands.w	r3, r0, #1
 800f7e8:	d00a      	beq.n	800f800 <__swsetup_r+0xbc>
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	60a3      	str	r3, [r4, #8]
 800f7ee:	6963      	ldr	r3, [r4, #20]
 800f7f0:	425b      	negs	r3, r3
 800f7f2:	61a3      	str	r3, [r4, #24]
 800f7f4:	6923      	ldr	r3, [r4, #16]
 800f7f6:	b943      	cbnz	r3, 800f80a <__swsetup_r+0xc6>
 800f7f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f7fc:	d1ba      	bne.n	800f774 <__swsetup_r+0x30>
 800f7fe:	bd70      	pop	{r4, r5, r6, pc}
 800f800:	0781      	lsls	r1, r0, #30
 800f802:	bf58      	it	pl
 800f804:	6963      	ldrpl	r3, [r4, #20]
 800f806:	60a3      	str	r3, [r4, #8]
 800f808:	e7f4      	b.n	800f7f4 <__swsetup_r+0xb0>
 800f80a:	2000      	movs	r0, #0
 800f80c:	e7f7      	b.n	800f7fe <__swsetup_r+0xba>
 800f80e:	bf00      	nop
 800f810:	20000078 	.word	0x20000078
 800f814:	0801190c 	.word	0x0801190c
 800f818:	0801192c 	.word	0x0801192c
 800f81c:	080118ec 	.word	0x080118ec

0800f820 <__assert_func>:
 800f820:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f822:	4614      	mov	r4, r2
 800f824:	461a      	mov	r2, r3
 800f826:	4b09      	ldr	r3, [pc, #36]	; (800f84c <__assert_func+0x2c>)
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	4605      	mov	r5, r0
 800f82c:	68d8      	ldr	r0, [r3, #12]
 800f82e:	b14c      	cbz	r4, 800f844 <__assert_func+0x24>
 800f830:	4b07      	ldr	r3, [pc, #28]	; (800f850 <__assert_func+0x30>)
 800f832:	9100      	str	r1, [sp, #0]
 800f834:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f838:	4906      	ldr	r1, [pc, #24]	; (800f854 <__assert_func+0x34>)
 800f83a:	462b      	mov	r3, r5
 800f83c:	f000 f9a6 	bl	800fb8c <fiprintf>
 800f840:	f000 ffe6 	bl	8010810 <abort>
 800f844:	4b04      	ldr	r3, [pc, #16]	; (800f858 <__assert_func+0x38>)
 800f846:	461c      	mov	r4, r3
 800f848:	e7f3      	b.n	800f832 <__assert_func+0x12>
 800f84a:	bf00      	nop
 800f84c:	20000078 	.word	0x20000078
 800f850:	080117ac 	.word	0x080117ac
 800f854:	080117b9 	.word	0x080117b9
 800f858:	080117e7 	.word	0x080117e7

0800f85c <__sflush_r>:
 800f85c:	898a      	ldrh	r2, [r1, #12]
 800f85e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f862:	4605      	mov	r5, r0
 800f864:	0710      	lsls	r0, r2, #28
 800f866:	460c      	mov	r4, r1
 800f868:	d458      	bmi.n	800f91c <__sflush_r+0xc0>
 800f86a:	684b      	ldr	r3, [r1, #4]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	dc05      	bgt.n	800f87c <__sflush_r+0x20>
 800f870:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f872:	2b00      	cmp	r3, #0
 800f874:	dc02      	bgt.n	800f87c <__sflush_r+0x20>
 800f876:	2000      	movs	r0, #0
 800f878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f87c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f87e:	2e00      	cmp	r6, #0
 800f880:	d0f9      	beq.n	800f876 <__sflush_r+0x1a>
 800f882:	2300      	movs	r3, #0
 800f884:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f888:	682f      	ldr	r7, [r5, #0]
 800f88a:	602b      	str	r3, [r5, #0]
 800f88c:	d032      	beq.n	800f8f4 <__sflush_r+0x98>
 800f88e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f890:	89a3      	ldrh	r3, [r4, #12]
 800f892:	075a      	lsls	r2, r3, #29
 800f894:	d505      	bpl.n	800f8a2 <__sflush_r+0x46>
 800f896:	6863      	ldr	r3, [r4, #4]
 800f898:	1ac0      	subs	r0, r0, r3
 800f89a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f89c:	b10b      	cbz	r3, 800f8a2 <__sflush_r+0x46>
 800f89e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f8a0:	1ac0      	subs	r0, r0, r3
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	4602      	mov	r2, r0
 800f8a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f8a8:	6a21      	ldr	r1, [r4, #32]
 800f8aa:	4628      	mov	r0, r5
 800f8ac:	47b0      	blx	r6
 800f8ae:	1c43      	adds	r3, r0, #1
 800f8b0:	89a3      	ldrh	r3, [r4, #12]
 800f8b2:	d106      	bne.n	800f8c2 <__sflush_r+0x66>
 800f8b4:	6829      	ldr	r1, [r5, #0]
 800f8b6:	291d      	cmp	r1, #29
 800f8b8:	d82c      	bhi.n	800f914 <__sflush_r+0xb8>
 800f8ba:	4a2a      	ldr	r2, [pc, #168]	; (800f964 <__sflush_r+0x108>)
 800f8bc:	40ca      	lsrs	r2, r1
 800f8be:	07d6      	lsls	r6, r2, #31
 800f8c0:	d528      	bpl.n	800f914 <__sflush_r+0xb8>
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	6062      	str	r2, [r4, #4]
 800f8c6:	04d9      	lsls	r1, r3, #19
 800f8c8:	6922      	ldr	r2, [r4, #16]
 800f8ca:	6022      	str	r2, [r4, #0]
 800f8cc:	d504      	bpl.n	800f8d8 <__sflush_r+0x7c>
 800f8ce:	1c42      	adds	r2, r0, #1
 800f8d0:	d101      	bne.n	800f8d6 <__sflush_r+0x7a>
 800f8d2:	682b      	ldr	r3, [r5, #0]
 800f8d4:	b903      	cbnz	r3, 800f8d8 <__sflush_r+0x7c>
 800f8d6:	6560      	str	r0, [r4, #84]	; 0x54
 800f8d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f8da:	602f      	str	r7, [r5, #0]
 800f8dc:	2900      	cmp	r1, #0
 800f8de:	d0ca      	beq.n	800f876 <__sflush_r+0x1a>
 800f8e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f8e4:	4299      	cmp	r1, r3
 800f8e6:	d002      	beq.n	800f8ee <__sflush_r+0x92>
 800f8e8:	4628      	mov	r0, r5
 800f8ea:	f000 f9ef 	bl	800fccc <_free_r>
 800f8ee:	2000      	movs	r0, #0
 800f8f0:	6360      	str	r0, [r4, #52]	; 0x34
 800f8f2:	e7c1      	b.n	800f878 <__sflush_r+0x1c>
 800f8f4:	6a21      	ldr	r1, [r4, #32]
 800f8f6:	2301      	movs	r3, #1
 800f8f8:	4628      	mov	r0, r5
 800f8fa:	47b0      	blx	r6
 800f8fc:	1c41      	adds	r1, r0, #1
 800f8fe:	d1c7      	bne.n	800f890 <__sflush_r+0x34>
 800f900:	682b      	ldr	r3, [r5, #0]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d0c4      	beq.n	800f890 <__sflush_r+0x34>
 800f906:	2b1d      	cmp	r3, #29
 800f908:	d001      	beq.n	800f90e <__sflush_r+0xb2>
 800f90a:	2b16      	cmp	r3, #22
 800f90c:	d101      	bne.n	800f912 <__sflush_r+0xb6>
 800f90e:	602f      	str	r7, [r5, #0]
 800f910:	e7b1      	b.n	800f876 <__sflush_r+0x1a>
 800f912:	89a3      	ldrh	r3, [r4, #12]
 800f914:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f918:	81a3      	strh	r3, [r4, #12]
 800f91a:	e7ad      	b.n	800f878 <__sflush_r+0x1c>
 800f91c:	690f      	ldr	r7, [r1, #16]
 800f91e:	2f00      	cmp	r7, #0
 800f920:	d0a9      	beq.n	800f876 <__sflush_r+0x1a>
 800f922:	0793      	lsls	r3, r2, #30
 800f924:	680e      	ldr	r6, [r1, #0]
 800f926:	bf08      	it	eq
 800f928:	694b      	ldreq	r3, [r1, #20]
 800f92a:	600f      	str	r7, [r1, #0]
 800f92c:	bf18      	it	ne
 800f92e:	2300      	movne	r3, #0
 800f930:	eba6 0807 	sub.w	r8, r6, r7
 800f934:	608b      	str	r3, [r1, #8]
 800f936:	f1b8 0f00 	cmp.w	r8, #0
 800f93a:	dd9c      	ble.n	800f876 <__sflush_r+0x1a>
 800f93c:	6a21      	ldr	r1, [r4, #32]
 800f93e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f940:	4643      	mov	r3, r8
 800f942:	463a      	mov	r2, r7
 800f944:	4628      	mov	r0, r5
 800f946:	47b0      	blx	r6
 800f948:	2800      	cmp	r0, #0
 800f94a:	dc06      	bgt.n	800f95a <__sflush_r+0xfe>
 800f94c:	89a3      	ldrh	r3, [r4, #12]
 800f94e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f952:	81a3      	strh	r3, [r4, #12]
 800f954:	f04f 30ff 	mov.w	r0, #4294967295
 800f958:	e78e      	b.n	800f878 <__sflush_r+0x1c>
 800f95a:	4407      	add	r7, r0
 800f95c:	eba8 0800 	sub.w	r8, r8, r0
 800f960:	e7e9      	b.n	800f936 <__sflush_r+0xda>
 800f962:	bf00      	nop
 800f964:	20400001 	.word	0x20400001

0800f968 <_fflush_r>:
 800f968:	b538      	push	{r3, r4, r5, lr}
 800f96a:	690b      	ldr	r3, [r1, #16]
 800f96c:	4605      	mov	r5, r0
 800f96e:	460c      	mov	r4, r1
 800f970:	b913      	cbnz	r3, 800f978 <_fflush_r+0x10>
 800f972:	2500      	movs	r5, #0
 800f974:	4628      	mov	r0, r5
 800f976:	bd38      	pop	{r3, r4, r5, pc}
 800f978:	b118      	cbz	r0, 800f982 <_fflush_r+0x1a>
 800f97a:	6983      	ldr	r3, [r0, #24]
 800f97c:	b90b      	cbnz	r3, 800f982 <_fflush_r+0x1a>
 800f97e:	f000 f887 	bl	800fa90 <__sinit>
 800f982:	4b14      	ldr	r3, [pc, #80]	; (800f9d4 <_fflush_r+0x6c>)
 800f984:	429c      	cmp	r4, r3
 800f986:	d11b      	bne.n	800f9c0 <_fflush_r+0x58>
 800f988:	686c      	ldr	r4, [r5, #4]
 800f98a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d0ef      	beq.n	800f972 <_fflush_r+0xa>
 800f992:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f994:	07d0      	lsls	r0, r2, #31
 800f996:	d404      	bmi.n	800f9a2 <_fflush_r+0x3a>
 800f998:	0599      	lsls	r1, r3, #22
 800f99a:	d402      	bmi.n	800f9a2 <_fflush_r+0x3a>
 800f99c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f99e:	f000 f927 	bl	800fbf0 <__retarget_lock_acquire_recursive>
 800f9a2:	4628      	mov	r0, r5
 800f9a4:	4621      	mov	r1, r4
 800f9a6:	f7ff ff59 	bl	800f85c <__sflush_r>
 800f9aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f9ac:	07da      	lsls	r2, r3, #31
 800f9ae:	4605      	mov	r5, r0
 800f9b0:	d4e0      	bmi.n	800f974 <_fflush_r+0xc>
 800f9b2:	89a3      	ldrh	r3, [r4, #12]
 800f9b4:	059b      	lsls	r3, r3, #22
 800f9b6:	d4dd      	bmi.n	800f974 <_fflush_r+0xc>
 800f9b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f9ba:	f000 f91a 	bl	800fbf2 <__retarget_lock_release_recursive>
 800f9be:	e7d9      	b.n	800f974 <_fflush_r+0xc>
 800f9c0:	4b05      	ldr	r3, [pc, #20]	; (800f9d8 <_fflush_r+0x70>)
 800f9c2:	429c      	cmp	r4, r3
 800f9c4:	d101      	bne.n	800f9ca <_fflush_r+0x62>
 800f9c6:	68ac      	ldr	r4, [r5, #8]
 800f9c8:	e7df      	b.n	800f98a <_fflush_r+0x22>
 800f9ca:	4b04      	ldr	r3, [pc, #16]	; (800f9dc <_fflush_r+0x74>)
 800f9cc:	429c      	cmp	r4, r3
 800f9ce:	bf08      	it	eq
 800f9d0:	68ec      	ldreq	r4, [r5, #12]
 800f9d2:	e7da      	b.n	800f98a <_fflush_r+0x22>
 800f9d4:	0801190c 	.word	0x0801190c
 800f9d8:	0801192c 	.word	0x0801192c
 800f9dc:	080118ec 	.word	0x080118ec

0800f9e0 <std>:
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	b510      	push	{r4, lr}
 800f9e4:	4604      	mov	r4, r0
 800f9e6:	e9c0 3300 	strd	r3, r3, [r0]
 800f9ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f9ee:	6083      	str	r3, [r0, #8]
 800f9f0:	8181      	strh	r1, [r0, #12]
 800f9f2:	6643      	str	r3, [r0, #100]	; 0x64
 800f9f4:	81c2      	strh	r2, [r0, #14]
 800f9f6:	6183      	str	r3, [r0, #24]
 800f9f8:	4619      	mov	r1, r3
 800f9fa:	2208      	movs	r2, #8
 800f9fc:	305c      	adds	r0, #92	; 0x5c
 800f9fe:	f7ff fc99 	bl	800f334 <memset>
 800fa02:	4b05      	ldr	r3, [pc, #20]	; (800fa18 <std+0x38>)
 800fa04:	6263      	str	r3, [r4, #36]	; 0x24
 800fa06:	4b05      	ldr	r3, [pc, #20]	; (800fa1c <std+0x3c>)
 800fa08:	62a3      	str	r3, [r4, #40]	; 0x28
 800fa0a:	4b05      	ldr	r3, [pc, #20]	; (800fa20 <std+0x40>)
 800fa0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fa0e:	4b05      	ldr	r3, [pc, #20]	; (800fa24 <std+0x44>)
 800fa10:	6224      	str	r4, [r4, #32]
 800fa12:	6323      	str	r3, [r4, #48]	; 0x30
 800fa14:	bd10      	pop	{r4, pc}
 800fa16:	bf00      	nop
 800fa18:	08010765 	.word	0x08010765
 800fa1c:	08010787 	.word	0x08010787
 800fa20:	080107bf 	.word	0x080107bf
 800fa24:	080107e3 	.word	0x080107e3

0800fa28 <_cleanup_r>:
 800fa28:	4901      	ldr	r1, [pc, #4]	; (800fa30 <_cleanup_r+0x8>)
 800fa2a:	f000 b8c1 	b.w	800fbb0 <_fwalk_reent>
 800fa2e:	bf00      	nop
 800fa30:	0800f969 	.word	0x0800f969

0800fa34 <__sfmoreglue>:
 800fa34:	b570      	push	{r4, r5, r6, lr}
 800fa36:	1e4a      	subs	r2, r1, #1
 800fa38:	2568      	movs	r5, #104	; 0x68
 800fa3a:	4355      	muls	r5, r2
 800fa3c:	460e      	mov	r6, r1
 800fa3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fa42:	f000 f993 	bl	800fd6c <_malloc_r>
 800fa46:	4604      	mov	r4, r0
 800fa48:	b140      	cbz	r0, 800fa5c <__sfmoreglue+0x28>
 800fa4a:	2100      	movs	r1, #0
 800fa4c:	e9c0 1600 	strd	r1, r6, [r0]
 800fa50:	300c      	adds	r0, #12
 800fa52:	60a0      	str	r0, [r4, #8]
 800fa54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fa58:	f7ff fc6c 	bl	800f334 <memset>
 800fa5c:	4620      	mov	r0, r4
 800fa5e:	bd70      	pop	{r4, r5, r6, pc}

0800fa60 <__sfp_lock_acquire>:
 800fa60:	4801      	ldr	r0, [pc, #4]	; (800fa68 <__sfp_lock_acquire+0x8>)
 800fa62:	f000 b8c5 	b.w	800fbf0 <__retarget_lock_acquire_recursive>
 800fa66:	bf00      	nop
 800fa68:	2000177c 	.word	0x2000177c

0800fa6c <__sfp_lock_release>:
 800fa6c:	4801      	ldr	r0, [pc, #4]	; (800fa74 <__sfp_lock_release+0x8>)
 800fa6e:	f000 b8c0 	b.w	800fbf2 <__retarget_lock_release_recursive>
 800fa72:	bf00      	nop
 800fa74:	2000177c 	.word	0x2000177c

0800fa78 <__sinit_lock_acquire>:
 800fa78:	4801      	ldr	r0, [pc, #4]	; (800fa80 <__sinit_lock_acquire+0x8>)
 800fa7a:	f000 b8b9 	b.w	800fbf0 <__retarget_lock_acquire_recursive>
 800fa7e:	bf00      	nop
 800fa80:	20001777 	.word	0x20001777

0800fa84 <__sinit_lock_release>:
 800fa84:	4801      	ldr	r0, [pc, #4]	; (800fa8c <__sinit_lock_release+0x8>)
 800fa86:	f000 b8b4 	b.w	800fbf2 <__retarget_lock_release_recursive>
 800fa8a:	bf00      	nop
 800fa8c:	20001777 	.word	0x20001777

0800fa90 <__sinit>:
 800fa90:	b510      	push	{r4, lr}
 800fa92:	4604      	mov	r4, r0
 800fa94:	f7ff fff0 	bl	800fa78 <__sinit_lock_acquire>
 800fa98:	69a3      	ldr	r3, [r4, #24]
 800fa9a:	b11b      	cbz	r3, 800faa4 <__sinit+0x14>
 800fa9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800faa0:	f7ff bff0 	b.w	800fa84 <__sinit_lock_release>
 800faa4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800faa8:	6523      	str	r3, [r4, #80]	; 0x50
 800faaa:	4b13      	ldr	r3, [pc, #76]	; (800faf8 <__sinit+0x68>)
 800faac:	4a13      	ldr	r2, [pc, #76]	; (800fafc <__sinit+0x6c>)
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	62a2      	str	r2, [r4, #40]	; 0x28
 800fab2:	42a3      	cmp	r3, r4
 800fab4:	bf04      	itt	eq
 800fab6:	2301      	moveq	r3, #1
 800fab8:	61a3      	streq	r3, [r4, #24]
 800faba:	4620      	mov	r0, r4
 800fabc:	f000 f820 	bl	800fb00 <__sfp>
 800fac0:	6060      	str	r0, [r4, #4]
 800fac2:	4620      	mov	r0, r4
 800fac4:	f000 f81c 	bl	800fb00 <__sfp>
 800fac8:	60a0      	str	r0, [r4, #8]
 800faca:	4620      	mov	r0, r4
 800facc:	f000 f818 	bl	800fb00 <__sfp>
 800fad0:	2200      	movs	r2, #0
 800fad2:	60e0      	str	r0, [r4, #12]
 800fad4:	2104      	movs	r1, #4
 800fad6:	6860      	ldr	r0, [r4, #4]
 800fad8:	f7ff ff82 	bl	800f9e0 <std>
 800fadc:	68a0      	ldr	r0, [r4, #8]
 800fade:	2201      	movs	r2, #1
 800fae0:	2109      	movs	r1, #9
 800fae2:	f7ff ff7d 	bl	800f9e0 <std>
 800fae6:	68e0      	ldr	r0, [r4, #12]
 800fae8:	2202      	movs	r2, #2
 800faea:	2112      	movs	r1, #18
 800faec:	f7ff ff78 	bl	800f9e0 <std>
 800faf0:	2301      	movs	r3, #1
 800faf2:	61a3      	str	r3, [r4, #24]
 800faf4:	e7d2      	b.n	800fa9c <__sinit+0xc>
 800faf6:	bf00      	nop
 800faf8:	08011730 	.word	0x08011730
 800fafc:	0800fa29 	.word	0x0800fa29

0800fb00 <__sfp>:
 800fb00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb02:	4607      	mov	r7, r0
 800fb04:	f7ff ffac 	bl	800fa60 <__sfp_lock_acquire>
 800fb08:	4b1e      	ldr	r3, [pc, #120]	; (800fb84 <__sfp+0x84>)
 800fb0a:	681e      	ldr	r6, [r3, #0]
 800fb0c:	69b3      	ldr	r3, [r6, #24]
 800fb0e:	b913      	cbnz	r3, 800fb16 <__sfp+0x16>
 800fb10:	4630      	mov	r0, r6
 800fb12:	f7ff ffbd 	bl	800fa90 <__sinit>
 800fb16:	3648      	adds	r6, #72	; 0x48
 800fb18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fb1c:	3b01      	subs	r3, #1
 800fb1e:	d503      	bpl.n	800fb28 <__sfp+0x28>
 800fb20:	6833      	ldr	r3, [r6, #0]
 800fb22:	b30b      	cbz	r3, 800fb68 <__sfp+0x68>
 800fb24:	6836      	ldr	r6, [r6, #0]
 800fb26:	e7f7      	b.n	800fb18 <__sfp+0x18>
 800fb28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fb2c:	b9d5      	cbnz	r5, 800fb64 <__sfp+0x64>
 800fb2e:	4b16      	ldr	r3, [pc, #88]	; (800fb88 <__sfp+0x88>)
 800fb30:	60e3      	str	r3, [r4, #12]
 800fb32:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fb36:	6665      	str	r5, [r4, #100]	; 0x64
 800fb38:	f000 f859 	bl	800fbee <__retarget_lock_init_recursive>
 800fb3c:	f7ff ff96 	bl	800fa6c <__sfp_lock_release>
 800fb40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fb44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fb48:	6025      	str	r5, [r4, #0]
 800fb4a:	61a5      	str	r5, [r4, #24]
 800fb4c:	2208      	movs	r2, #8
 800fb4e:	4629      	mov	r1, r5
 800fb50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fb54:	f7ff fbee 	bl	800f334 <memset>
 800fb58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fb5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fb60:	4620      	mov	r0, r4
 800fb62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb64:	3468      	adds	r4, #104	; 0x68
 800fb66:	e7d9      	b.n	800fb1c <__sfp+0x1c>
 800fb68:	2104      	movs	r1, #4
 800fb6a:	4638      	mov	r0, r7
 800fb6c:	f7ff ff62 	bl	800fa34 <__sfmoreglue>
 800fb70:	4604      	mov	r4, r0
 800fb72:	6030      	str	r0, [r6, #0]
 800fb74:	2800      	cmp	r0, #0
 800fb76:	d1d5      	bne.n	800fb24 <__sfp+0x24>
 800fb78:	f7ff ff78 	bl	800fa6c <__sfp_lock_release>
 800fb7c:	230c      	movs	r3, #12
 800fb7e:	603b      	str	r3, [r7, #0]
 800fb80:	e7ee      	b.n	800fb60 <__sfp+0x60>
 800fb82:	bf00      	nop
 800fb84:	08011730 	.word	0x08011730
 800fb88:	ffff0001 	.word	0xffff0001

0800fb8c <fiprintf>:
 800fb8c:	b40e      	push	{r1, r2, r3}
 800fb8e:	b503      	push	{r0, r1, lr}
 800fb90:	4601      	mov	r1, r0
 800fb92:	ab03      	add	r3, sp, #12
 800fb94:	4805      	ldr	r0, [pc, #20]	; (800fbac <fiprintf+0x20>)
 800fb96:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb9a:	6800      	ldr	r0, [r0, #0]
 800fb9c:	9301      	str	r3, [sp, #4]
 800fb9e:	f000 fac5 	bl	801012c <_vfiprintf_r>
 800fba2:	b002      	add	sp, #8
 800fba4:	f85d eb04 	ldr.w	lr, [sp], #4
 800fba8:	b003      	add	sp, #12
 800fbaa:	4770      	bx	lr
 800fbac:	20000078 	.word	0x20000078

0800fbb0 <_fwalk_reent>:
 800fbb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fbb4:	4606      	mov	r6, r0
 800fbb6:	4688      	mov	r8, r1
 800fbb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fbbc:	2700      	movs	r7, #0
 800fbbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fbc2:	f1b9 0901 	subs.w	r9, r9, #1
 800fbc6:	d505      	bpl.n	800fbd4 <_fwalk_reent+0x24>
 800fbc8:	6824      	ldr	r4, [r4, #0]
 800fbca:	2c00      	cmp	r4, #0
 800fbcc:	d1f7      	bne.n	800fbbe <_fwalk_reent+0xe>
 800fbce:	4638      	mov	r0, r7
 800fbd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbd4:	89ab      	ldrh	r3, [r5, #12]
 800fbd6:	2b01      	cmp	r3, #1
 800fbd8:	d907      	bls.n	800fbea <_fwalk_reent+0x3a>
 800fbda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fbde:	3301      	adds	r3, #1
 800fbe0:	d003      	beq.n	800fbea <_fwalk_reent+0x3a>
 800fbe2:	4629      	mov	r1, r5
 800fbe4:	4630      	mov	r0, r6
 800fbe6:	47c0      	blx	r8
 800fbe8:	4307      	orrs	r7, r0
 800fbea:	3568      	adds	r5, #104	; 0x68
 800fbec:	e7e9      	b.n	800fbc2 <_fwalk_reent+0x12>

0800fbee <__retarget_lock_init_recursive>:
 800fbee:	4770      	bx	lr

0800fbf0 <__retarget_lock_acquire_recursive>:
 800fbf0:	4770      	bx	lr

0800fbf2 <__retarget_lock_release_recursive>:
 800fbf2:	4770      	bx	lr

0800fbf4 <__swhatbuf_r>:
 800fbf4:	b570      	push	{r4, r5, r6, lr}
 800fbf6:	460e      	mov	r6, r1
 800fbf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbfc:	2900      	cmp	r1, #0
 800fbfe:	b096      	sub	sp, #88	; 0x58
 800fc00:	4614      	mov	r4, r2
 800fc02:	461d      	mov	r5, r3
 800fc04:	da07      	bge.n	800fc16 <__swhatbuf_r+0x22>
 800fc06:	2300      	movs	r3, #0
 800fc08:	602b      	str	r3, [r5, #0]
 800fc0a:	89b3      	ldrh	r3, [r6, #12]
 800fc0c:	061a      	lsls	r2, r3, #24
 800fc0e:	d410      	bmi.n	800fc32 <__swhatbuf_r+0x3e>
 800fc10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fc14:	e00e      	b.n	800fc34 <__swhatbuf_r+0x40>
 800fc16:	466a      	mov	r2, sp
 800fc18:	f000 fe12 	bl	8010840 <_fstat_r>
 800fc1c:	2800      	cmp	r0, #0
 800fc1e:	dbf2      	blt.n	800fc06 <__swhatbuf_r+0x12>
 800fc20:	9a01      	ldr	r2, [sp, #4]
 800fc22:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fc26:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fc2a:	425a      	negs	r2, r3
 800fc2c:	415a      	adcs	r2, r3
 800fc2e:	602a      	str	r2, [r5, #0]
 800fc30:	e7ee      	b.n	800fc10 <__swhatbuf_r+0x1c>
 800fc32:	2340      	movs	r3, #64	; 0x40
 800fc34:	2000      	movs	r0, #0
 800fc36:	6023      	str	r3, [r4, #0]
 800fc38:	b016      	add	sp, #88	; 0x58
 800fc3a:	bd70      	pop	{r4, r5, r6, pc}

0800fc3c <__smakebuf_r>:
 800fc3c:	898b      	ldrh	r3, [r1, #12]
 800fc3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fc40:	079d      	lsls	r5, r3, #30
 800fc42:	4606      	mov	r6, r0
 800fc44:	460c      	mov	r4, r1
 800fc46:	d507      	bpl.n	800fc58 <__smakebuf_r+0x1c>
 800fc48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fc4c:	6023      	str	r3, [r4, #0]
 800fc4e:	6123      	str	r3, [r4, #16]
 800fc50:	2301      	movs	r3, #1
 800fc52:	6163      	str	r3, [r4, #20]
 800fc54:	b002      	add	sp, #8
 800fc56:	bd70      	pop	{r4, r5, r6, pc}
 800fc58:	ab01      	add	r3, sp, #4
 800fc5a:	466a      	mov	r2, sp
 800fc5c:	f7ff ffca 	bl	800fbf4 <__swhatbuf_r>
 800fc60:	9900      	ldr	r1, [sp, #0]
 800fc62:	4605      	mov	r5, r0
 800fc64:	4630      	mov	r0, r6
 800fc66:	f000 f881 	bl	800fd6c <_malloc_r>
 800fc6a:	b948      	cbnz	r0, 800fc80 <__smakebuf_r+0x44>
 800fc6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc70:	059a      	lsls	r2, r3, #22
 800fc72:	d4ef      	bmi.n	800fc54 <__smakebuf_r+0x18>
 800fc74:	f023 0303 	bic.w	r3, r3, #3
 800fc78:	f043 0302 	orr.w	r3, r3, #2
 800fc7c:	81a3      	strh	r3, [r4, #12]
 800fc7e:	e7e3      	b.n	800fc48 <__smakebuf_r+0xc>
 800fc80:	4b0d      	ldr	r3, [pc, #52]	; (800fcb8 <__smakebuf_r+0x7c>)
 800fc82:	62b3      	str	r3, [r6, #40]	; 0x28
 800fc84:	89a3      	ldrh	r3, [r4, #12]
 800fc86:	6020      	str	r0, [r4, #0]
 800fc88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc8c:	81a3      	strh	r3, [r4, #12]
 800fc8e:	9b00      	ldr	r3, [sp, #0]
 800fc90:	6163      	str	r3, [r4, #20]
 800fc92:	9b01      	ldr	r3, [sp, #4]
 800fc94:	6120      	str	r0, [r4, #16]
 800fc96:	b15b      	cbz	r3, 800fcb0 <__smakebuf_r+0x74>
 800fc98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc9c:	4630      	mov	r0, r6
 800fc9e:	f000 fde1 	bl	8010864 <_isatty_r>
 800fca2:	b128      	cbz	r0, 800fcb0 <__smakebuf_r+0x74>
 800fca4:	89a3      	ldrh	r3, [r4, #12]
 800fca6:	f023 0303 	bic.w	r3, r3, #3
 800fcaa:	f043 0301 	orr.w	r3, r3, #1
 800fcae:	81a3      	strh	r3, [r4, #12]
 800fcb0:	89a0      	ldrh	r0, [r4, #12]
 800fcb2:	4305      	orrs	r5, r0
 800fcb4:	81a5      	strh	r5, [r4, #12]
 800fcb6:	e7cd      	b.n	800fc54 <__smakebuf_r+0x18>
 800fcb8:	0800fa29 	.word	0x0800fa29

0800fcbc <malloc>:
 800fcbc:	4b02      	ldr	r3, [pc, #8]	; (800fcc8 <malloc+0xc>)
 800fcbe:	4601      	mov	r1, r0
 800fcc0:	6818      	ldr	r0, [r3, #0]
 800fcc2:	f000 b853 	b.w	800fd6c <_malloc_r>
 800fcc6:	bf00      	nop
 800fcc8:	20000078 	.word	0x20000078

0800fccc <_free_r>:
 800fccc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fcce:	2900      	cmp	r1, #0
 800fcd0:	d048      	beq.n	800fd64 <_free_r+0x98>
 800fcd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fcd6:	9001      	str	r0, [sp, #4]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	f1a1 0404 	sub.w	r4, r1, #4
 800fcde:	bfb8      	it	lt
 800fce0:	18e4      	addlt	r4, r4, r3
 800fce2:	f000 fe09 	bl	80108f8 <__malloc_lock>
 800fce6:	4a20      	ldr	r2, [pc, #128]	; (800fd68 <_free_r+0x9c>)
 800fce8:	9801      	ldr	r0, [sp, #4]
 800fcea:	6813      	ldr	r3, [r2, #0]
 800fcec:	4615      	mov	r5, r2
 800fcee:	b933      	cbnz	r3, 800fcfe <_free_r+0x32>
 800fcf0:	6063      	str	r3, [r4, #4]
 800fcf2:	6014      	str	r4, [r2, #0]
 800fcf4:	b003      	add	sp, #12
 800fcf6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fcfa:	f000 be03 	b.w	8010904 <__malloc_unlock>
 800fcfe:	42a3      	cmp	r3, r4
 800fd00:	d90b      	bls.n	800fd1a <_free_r+0x4e>
 800fd02:	6821      	ldr	r1, [r4, #0]
 800fd04:	1862      	adds	r2, r4, r1
 800fd06:	4293      	cmp	r3, r2
 800fd08:	bf04      	itt	eq
 800fd0a:	681a      	ldreq	r2, [r3, #0]
 800fd0c:	685b      	ldreq	r3, [r3, #4]
 800fd0e:	6063      	str	r3, [r4, #4]
 800fd10:	bf04      	itt	eq
 800fd12:	1852      	addeq	r2, r2, r1
 800fd14:	6022      	streq	r2, [r4, #0]
 800fd16:	602c      	str	r4, [r5, #0]
 800fd18:	e7ec      	b.n	800fcf4 <_free_r+0x28>
 800fd1a:	461a      	mov	r2, r3
 800fd1c:	685b      	ldr	r3, [r3, #4]
 800fd1e:	b10b      	cbz	r3, 800fd24 <_free_r+0x58>
 800fd20:	42a3      	cmp	r3, r4
 800fd22:	d9fa      	bls.n	800fd1a <_free_r+0x4e>
 800fd24:	6811      	ldr	r1, [r2, #0]
 800fd26:	1855      	adds	r5, r2, r1
 800fd28:	42a5      	cmp	r5, r4
 800fd2a:	d10b      	bne.n	800fd44 <_free_r+0x78>
 800fd2c:	6824      	ldr	r4, [r4, #0]
 800fd2e:	4421      	add	r1, r4
 800fd30:	1854      	adds	r4, r2, r1
 800fd32:	42a3      	cmp	r3, r4
 800fd34:	6011      	str	r1, [r2, #0]
 800fd36:	d1dd      	bne.n	800fcf4 <_free_r+0x28>
 800fd38:	681c      	ldr	r4, [r3, #0]
 800fd3a:	685b      	ldr	r3, [r3, #4]
 800fd3c:	6053      	str	r3, [r2, #4]
 800fd3e:	4421      	add	r1, r4
 800fd40:	6011      	str	r1, [r2, #0]
 800fd42:	e7d7      	b.n	800fcf4 <_free_r+0x28>
 800fd44:	d902      	bls.n	800fd4c <_free_r+0x80>
 800fd46:	230c      	movs	r3, #12
 800fd48:	6003      	str	r3, [r0, #0]
 800fd4a:	e7d3      	b.n	800fcf4 <_free_r+0x28>
 800fd4c:	6825      	ldr	r5, [r4, #0]
 800fd4e:	1961      	adds	r1, r4, r5
 800fd50:	428b      	cmp	r3, r1
 800fd52:	bf04      	itt	eq
 800fd54:	6819      	ldreq	r1, [r3, #0]
 800fd56:	685b      	ldreq	r3, [r3, #4]
 800fd58:	6063      	str	r3, [r4, #4]
 800fd5a:	bf04      	itt	eq
 800fd5c:	1949      	addeq	r1, r1, r5
 800fd5e:	6021      	streq	r1, [r4, #0]
 800fd60:	6054      	str	r4, [r2, #4]
 800fd62:	e7c7      	b.n	800fcf4 <_free_r+0x28>
 800fd64:	b003      	add	sp, #12
 800fd66:	bd30      	pop	{r4, r5, pc}
 800fd68:	20000174 	.word	0x20000174

0800fd6c <_malloc_r>:
 800fd6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd6e:	1ccd      	adds	r5, r1, #3
 800fd70:	f025 0503 	bic.w	r5, r5, #3
 800fd74:	3508      	adds	r5, #8
 800fd76:	2d0c      	cmp	r5, #12
 800fd78:	bf38      	it	cc
 800fd7a:	250c      	movcc	r5, #12
 800fd7c:	2d00      	cmp	r5, #0
 800fd7e:	4606      	mov	r6, r0
 800fd80:	db01      	blt.n	800fd86 <_malloc_r+0x1a>
 800fd82:	42a9      	cmp	r1, r5
 800fd84:	d903      	bls.n	800fd8e <_malloc_r+0x22>
 800fd86:	230c      	movs	r3, #12
 800fd88:	6033      	str	r3, [r6, #0]
 800fd8a:	2000      	movs	r0, #0
 800fd8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd8e:	f000 fdb3 	bl	80108f8 <__malloc_lock>
 800fd92:	4921      	ldr	r1, [pc, #132]	; (800fe18 <_malloc_r+0xac>)
 800fd94:	680a      	ldr	r2, [r1, #0]
 800fd96:	4614      	mov	r4, r2
 800fd98:	b99c      	cbnz	r4, 800fdc2 <_malloc_r+0x56>
 800fd9a:	4f20      	ldr	r7, [pc, #128]	; (800fe1c <_malloc_r+0xb0>)
 800fd9c:	683b      	ldr	r3, [r7, #0]
 800fd9e:	b923      	cbnz	r3, 800fdaa <_malloc_r+0x3e>
 800fda0:	4621      	mov	r1, r4
 800fda2:	4630      	mov	r0, r6
 800fda4:	f000 fcce 	bl	8010744 <_sbrk_r>
 800fda8:	6038      	str	r0, [r7, #0]
 800fdaa:	4629      	mov	r1, r5
 800fdac:	4630      	mov	r0, r6
 800fdae:	f000 fcc9 	bl	8010744 <_sbrk_r>
 800fdb2:	1c43      	adds	r3, r0, #1
 800fdb4:	d123      	bne.n	800fdfe <_malloc_r+0x92>
 800fdb6:	230c      	movs	r3, #12
 800fdb8:	6033      	str	r3, [r6, #0]
 800fdba:	4630      	mov	r0, r6
 800fdbc:	f000 fda2 	bl	8010904 <__malloc_unlock>
 800fdc0:	e7e3      	b.n	800fd8a <_malloc_r+0x1e>
 800fdc2:	6823      	ldr	r3, [r4, #0]
 800fdc4:	1b5b      	subs	r3, r3, r5
 800fdc6:	d417      	bmi.n	800fdf8 <_malloc_r+0x8c>
 800fdc8:	2b0b      	cmp	r3, #11
 800fdca:	d903      	bls.n	800fdd4 <_malloc_r+0x68>
 800fdcc:	6023      	str	r3, [r4, #0]
 800fdce:	441c      	add	r4, r3
 800fdd0:	6025      	str	r5, [r4, #0]
 800fdd2:	e004      	b.n	800fdde <_malloc_r+0x72>
 800fdd4:	6863      	ldr	r3, [r4, #4]
 800fdd6:	42a2      	cmp	r2, r4
 800fdd8:	bf0c      	ite	eq
 800fdda:	600b      	streq	r3, [r1, #0]
 800fddc:	6053      	strne	r3, [r2, #4]
 800fdde:	4630      	mov	r0, r6
 800fde0:	f000 fd90 	bl	8010904 <__malloc_unlock>
 800fde4:	f104 000b 	add.w	r0, r4, #11
 800fde8:	1d23      	adds	r3, r4, #4
 800fdea:	f020 0007 	bic.w	r0, r0, #7
 800fdee:	1ac2      	subs	r2, r0, r3
 800fdf0:	d0cc      	beq.n	800fd8c <_malloc_r+0x20>
 800fdf2:	1a1b      	subs	r3, r3, r0
 800fdf4:	50a3      	str	r3, [r4, r2]
 800fdf6:	e7c9      	b.n	800fd8c <_malloc_r+0x20>
 800fdf8:	4622      	mov	r2, r4
 800fdfa:	6864      	ldr	r4, [r4, #4]
 800fdfc:	e7cc      	b.n	800fd98 <_malloc_r+0x2c>
 800fdfe:	1cc4      	adds	r4, r0, #3
 800fe00:	f024 0403 	bic.w	r4, r4, #3
 800fe04:	42a0      	cmp	r0, r4
 800fe06:	d0e3      	beq.n	800fdd0 <_malloc_r+0x64>
 800fe08:	1a21      	subs	r1, r4, r0
 800fe0a:	4630      	mov	r0, r6
 800fe0c:	f000 fc9a 	bl	8010744 <_sbrk_r>
 800fe10:	3001      	adds	r0, #1
 800fe12:	d1dd      	bne.n	800fdd0 <_malloc_r+0x64>
 800fe14:	e7cf      	b.n	800fdb6 <_malloc_r+0x4a>
 800fe16:	bf00      	nop
 800fe18:	20000174 	.word	0x20000174
 800fe1c:	20000178 	.word	0x20000178

0800fe20 <__ssputs_r>:
 800fe20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe24:	688e      	ldr	r6, [r1, #8]
 800fe26:	429e      	cmp	r6, r3
 800fe28:	4682      	mov	sl, r0
 800fe2a:	460c      	mov	r4, r1
 800fe2c:	4690      	mov	r8, r2
 800fe2e:	461f      	mov	r7, r3
 800fe30:	d838      	bhi.n	800fea4 <__ssputs_r+0x84>
 800fe32:	898a      	ldrh	r2, [r1, #12]
 800fe34:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fe38:	d032      	beq.n	800fea0 <__ssputs_r+0x80>
 800fe3a:	6825      	ldr	r5, [r4, #0]
 800fe3c:	6909      	ldr	r1, [r1, #16]
 800fe3e:	eba5 0901 	sub.w	r9, r5, r1
 800fe42:	6965      	ldr	r5, [r4, #20]
 800fe44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fe48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fe4c:	3301      	adds	r3, #1
 800fe4e:	444b      	add	r3, r9
 800fe50:	106d      	asrs	r5, r5, #1
 800fe52:	429d      	cmp	r5, r3
 800fe54:	bf38      	it	cc
 800fe56:	461d      	movcc	r5, r3
 800fe58:	0553      	lsls	r3, r2, #21
 800fe5a:	d531      	bpl.n	800fec0 <__ssputs_r+0xa0>
 800fe5c:	4629      	mov	r1, r5
 800fe5e:	f7ff ff85 	bl	800fd6c <_malloc_r>
 800fe62:	4606      	mov	r6, r0
 800fe64:	b950      	cbnz	r0, 800fe7c <__ssputs_r+0x5c>
 800fe66:	230c      	movs	r3, #12
 800fe68:	f8ca 3000 	str.w	r3, [sl]
 800fe6c:	89a3      	ldrh	r3, [r4, #12]
 800fe6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe72:	81a3      	strh	r3, [r4, #12]
 800fe74:	f04f 30ff 	mov.w	r0, #4294967295
 800fe78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe7c:	6921      	ldr	r1, [r4, #16]
 800fe7e:	464a      	mov	r2, r9
 800fe80:	f000 fd12 	bl	80108a8 <memcpy>
 800fe84:	89a3      	ldrh	r3, [r4, #12]
 800fe86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fe8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe8e:	81a3      	strh	r3, [r4, #12]
 800fe90:	6126      	str	r6, [r4, #16]
 800fe92:	6165      	str	r5, [r4, #20]
 800fe94:	444e      	add	r6, r9
 800fe96:	eba5 0509 	sub.w	r5, r5, r9
 800fe9a:	6026      	str	r6, [r4, #0]
 800fe9c:	60a5      	str	r5, [r4, #8]
 800fe9e:	463e      	mov	r6, r7
 800fea0:	42be      	cmp	r6, r7
 800fea2:	d900      	bls.n	800fea6 <__ssputs_r+0x86>
 800fea4:	463e      	mov	r6, r7
 800fea6:	4632      	mov	r2, r6
 800fea8:	6820      	ldr	r0, [r4, #0]
 800feaa:	4641      	mov	r1, r8
 800feac:	f000 fd0a 	bl	80108c4 <memmove>
 800feb0:	68a3      	ldr	r3, [r4, #8]
 800feb2:	6822      	ldr	r2, [r4, #0]
 800feb4:	1b9b      	subs	r3, r3, r6
 800feb6:	4432      	add	r2, r6
 800feb8:	60a3      	str	r3, [r4, #8]
 800feba:	6022      	str	r2, [r4, #0]
 800febc:	2000      	movs	r0, #0
 800febe:	e7db      	b.n	800fe78 <__ssputs_r+0x58>
 800fec0:	462a      	mov	r2, r5
 800fec2:	f000 fd25 	bl	8010910 <_realloc_r>
 800fec6:	4606      	mov	r6, r0
 800fec8:	2800      	cmp	r0, #0
 800feca:	d1e1      	bne.n	800fe90 <__ssputs_r+0x70>
 800fecc:	6921      	ldr	r1, [r4, #16]
 800fece:	4650      	mov	r0, sl
 800fed0:	f7ff fefc 	bl	800fccc <_free_r>
 800fed4:	e7c7      	b.n	800fe66 <__ssputs_r+0x46>
	...

0800fed8 <_svfiprintf_r>:
 800fed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fedc:	4698      	mov	r8, r3
 800fede:	898b      	ldrh	r3, [r1, #12]
 800fee0:	061b      	lsls	r3, r3, #24
 800fee2:	b09d      	sub	sp, #116	; 0x74
 800fee4:	4607      	mov	r7, r0
 800fee6:	460d      	mov	r5, r1
 800fee8:	4614      	mov	r4, r2
 800feea:	d50e      	bpl.n	800ff0a <_svfiprintf_r+0x32>
 800feec:	690b      	ldr	r3, [r1, #16]
 800feee:	b963      	cbnz	r3, 800ff0a <_svfiprintf_r+0x32>
 800fef0:	2140      	movs	r1, #64	; 0x40
 800fef2:	f7ff ff3b 	bl	800fd6c <_malloc_r>
 800fef6:	6028      	str	r0, [r5, #0]
 800fef8:	6128      	str	r0, [r5, #16]
 800fefa:	b920      	cbnz	r0, 800ff06 <_svfiprintf_r+0x2e>
 800fefc:	230c      	movs	r3, #12
 800fefe:	603b      	str	r3, [r7, #0]
 800ff00:	f04f 30ff 	mov.w	r0, #4294967295
 800ff04:	e0d1      	b.n	80100aa <_svfiprintf_r+0x1d2>
 800ff06:	2340      	movs	r3, #64	; 0x40
 800ff08:	616b      	str	r3, [r5, #20]
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	9309      	str	r3, [sp, #36]	; 0x24
 800ff0e:	2320      	movs	r3, #32
 800ff10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ff14:	f8cd 800c 	str.w	r8, [sp, #12]
 800ff18:	2330      	movs	r3, #48	; 0x30
 800ff1a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80100c4 <_svfiprintf_r+0x1ec>
 800ff1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ff22:	f04f 0901 	mov.w	r9, #1
 800ff26:	4623      	mov	r3, r4
 800ff28:	469a      	mov	sl, r3
 800ff2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff2e:	b10a      	cbz	r2, 800ff34 <_svfiprintf_r+0x5c>
 800ff30:	2a25      	cmp	r2, #37	; 0x25
 800ff32:	d1f9      	bne.n	800ff28 <_svfiprintf_r+0x50>
 800ff34:	ebba 0b04 	subs.w	fp, sl, r4
 800ff38:	d00b      	beq.n	800ff52 <_svfiprintf_r+0x7a>
 800ff3a:	465b      	mov	r3, fp
 800ff3c:	4622      	mov	r2, r4
 800ff3e:	4629      	mov	r1, r5
 800ff40:	4638      	mov	r0, r7
 800ff42:	f7ff ff6d 	bl	800fe20 <__ssputs_r>
 800ff46:	3001      	adds	r0, #1
 800ff48:	f000 80aa 	beq.w	80100a0 <_svfiprintf_r+0x1c8>
 800ff4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ff4e:	445a      	add	r2, fp
 800ff50:	9209      	str	r2, [sp, #36]	; 0x24
 800ff52:	f89a 3000 	ldrb.w	r3, [sl]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	f000 80a2 	beq.w	80100a0 <_svfiprintf_r+0x1c8>
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	f04f 32ff 	mov.w	r2, #4294967295
 800ff62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ff66:	f10a 0a01 	add.w	sl, sl, #1
 800ff6a:	9304      	str	r3, [sp, #16]
 800ff6c:	9307      	str	r3, [sp, #28]
 800ff6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ff72:	931a      	str	r3, [sp, #104]	; 0x68
 800ff74:	4654      	mov	r4, sl
 800ff76:	2205      	movs	r2, #5
 800ff78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff7c:	4851      	ldr	r0, [pc, #324]	; (80100c4 <_svfiprintf_r+0x1ec>)
 800ff7e:	f7f0 f9b7 	bl	80002f0 <memchr>
 800ff82:	9a04      	ldr	r2, [sp, #16]
 800ff84:	b9d8      	cbnz	r0, 800ffbe <_svfiprintf_r+0xe6>
 800ff86:	06d0      	lsls	r0, r2, #27
 800ff88:	bf44      	itt	mi
 800ff8a:	2320      	movmi	r3, #32
 800ff8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff90:	0711      	lsls	r1, r2, #28
 800ff92:	bf44      	itt	mi
 800ff94:	232b      	movmi	r3, #43	; 0x2b
 800ff96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff9a:	f89a 3000 	ldrb.w	r3, [sl]
 800ff9e:	2b2a      	cmp	r3, #42	; 0x2a
 800ffa0:	d015      	beq.n	800ffce <_svfiprintf_r+0xf6>
 800ffa2:	9a07      	ldr	r2, [sp, #28]
 800ffa4:	4654      	mov	r4, sl
 800ffa6:	2000      	movs	r0, #0
 800ffa8:	f04f 0c0a 	mov.w	ip, #10
 800ffac:	4621      	mov	r1, r4
 800ffae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ffb2:	3b30      	subs	r3, #48	; 0x30
 800ffb4:	2b09      	cmp	r3, #9
 800ffb6:	d94e      	bls.n	8010056 <_svfiprintf_r+0x17e>
 800ffb8:	b1b0      	cbz	r0, 800ffe8 <_svfiprintf_r+0x110>
 800ffba:	9207      	str	r2, [sp, #28]
 800ffbc:	e014      	b.n	800ffe8 <_svfiprintf_r+0x110>
 800ffbe:	eba0 0308 	sub.w	r3, r0, r8
 800ffc2:	fa09 f303 	lsl.w	r3, r9, r3
 800ffc6:	4313      	orrs	r3, r2
 800ffc8:	9304      	str	r3, [sp, #16]
 800ffca:	46a2      	mov	sl, r4
 800ffcc:	e7d2      	b.n	800ff74 <_svfiprintf_r+0x9c>
 800ffce:	9b03      	ldr	r3, [sp, #12]
 800ffd0:	1d19      	adds	r1, r3, #4
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	9103      	str	r1, [sp, #12]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	bfbb      	ittet	lt
 800ffda:	425b      	neglt	r3, r3
 800ffdc:	f042 0202 	orrlt.w	r2, r2, #2
 800ffe0:	9307      	strge	r3, [sp, #28]
 800ffe2:	9307      	strlt	r3, [sp, #28]
 800ffe4:	bfb8      	it	lt
 800ffe6:	9204      	strlt	r2, [sp, #16]
 800ffe8:	7823      	ldrb	r3, [r4, #0]
 800ffea:	2b2e      	cmp	r3, #46	; 0x2e
 800ffec:	d10c      	bne.n	8010008 <_svfiprintf_r+0x130>
 800ffee:	7863      	ldrb	r3, [r4, #1]
 800fff0:	2b2a      	cmp	r3, #42	; 0x2a
 800fff2:	d135      	bne.n	8010060 <_svfiprintf_r+0x188>
 800fff4:	9b03      	ldr	r3, [sp, #12]
 800fff6:	1d1a      	adds	r2, r3, #4
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	9203      	str	r2, [sp, #12]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	bfb8      	it	lt
 8010000:	f04f 33ff 	movlt.w	r3, #4294967295
 8010004:	3402      	adds	r4, #2
 8010006:	9305      	str	r3, [sp, #20]
 8010008:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80100d4 <_svfiprintf_r+0x1fc>
 801000c:	7821      	ldrb	r1, [r4, #0]
 801000e:	2203      	movs	r2, #3
 8010010:	4650      	mov	r0, sl
 8010012:	f7f0 f96d 	bl	80002f0 <memchr>
 8010016:	b140      	cbz	r0, 801002a <_svfiprintf_r+0x152>
 8010018:	2340      	movs	r3, #64	; 0x40
 801001a:	eba0 000a 	sub.w	r0, r0, sl
 801001e:	fa03 f000 	lsl.w	r0, r3, r0
 8010022:	9b04      	ldr	r3, [sp, #16]
 8010024:	4303      	orrs	r3, r0
 8010026:	3401      	adds	r4, #1
 8010028:	9304      	str	r3, [sp, #16]
 801002a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801002e:	4826      	ldr	r0, [pc, #152]	; (80100c8 <_svfiprintf_r+0x1f0>)
 8010030:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010034:	2206      	movs	r2, #6
 8010036:	f7f0 f95b 	bl	80002f0 <memchr>
 801003a:	2800      	cmp	r0, #0
 801003c:	d038      	beq.n	80100b0 <_svfiprintf_r+0x1d8>
 801003e:	4b23      	ldr	r3, [pc, #140]	; (80100cc <_svfiprintf_r+0x1f4>)
 8010040:	bb1b      	cbnz	r3, 801008a <_svfiprintf_r+0x1b2>
 8010042:	9b03      	ldr	r3, [sp, #12]
 8010044:	3307      	adds	r3, #7
 8010046:	f023 0307 	bic.w	r3, r3, #7
 801004a:	3308      	adds	r3, #8
 801004c:	9303      	str	r3, [sp, #12]
 801004e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010050:	4433      	add	r3, r6
 8010052:	9309      	str	r3, [sp, #36]	; 0x24
 8010054:	e767      	b.n	800ff26 <_svfiprintf_r+0x4e>
 8010056:	fb0c 3202 	mla	r2, ip, r2, r3
 801005a:	460c      	mov	r4, r1
 801005c:	2001      	movs	r0, #1
 801005e:	e7a5      	b.n	800ffac <_svfiprintf_r+0xd4>
 8010060:	2300      	movs	r3, #0
 8010062:	3401      	adds	r4, #1
 8010064:	9305      	str	r3, [sp, #20]
 8010066:	4619      	mov	r1, r3
 8010068:	f04f 0c0a 	mov.w	ip, #10
 801006c:	4620      	mov	r0, r4
 801006e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010072:	3a30      	subs	r2, #48	; 0x30
 8010074:	2a09      	cmp	r2, #9
 8010076:	d903      	bls.n	8010080 <_svfiprintf_r+0x1a8>
 8010078:	2b00      	cmp	r3, #0
 801007a:	d0c5      	beq.n	8010008 <_svfiprintf_r+0x130>
 801007c:	9105      	str	r1, [sp, #20]
 801007e:	e7c3      	b.n	8010008 <_svfiprintf_r+0x130>
 8010080:	fb0c 2101 	mla	r1, ip, r1, r2
 8010084:	4604      	mov	r4, r0
 8010086:	2301      	movs	r3, #1
 8010088:	e7f0      	b.n	801006c <_svfiprintf_r+0x194>
 801008a:	ab03      	add	r3, sp, #12
 801008c:	9300      	str	r3, [sp, #0]
 801008e:	462a      	mov	r2, r5
 8010090:	4b0f      	ldr	r3, [pc, #60]	; (80100d0 <_svfiprintf_r+0x1f8>)
 8010092:	a904      	add	r1, sp, #16
 8010094:	4638      	mov	r0, r7
 8010096:	f3af 8000 	nop.w
 801009a:	1c42      	adds	r2, r0, #1
 801009c:	4606      	mov	r6, r0
 801009e:	d1d6      	bne.n	801004e <_svfiprintf_r+0x176>
 80100a0:	89ab      	ldrh	r3, [r5, #12]
 80100a2:	065b      	lsls	r3, r3, #25
 80100a4:	f53f af2c 	bmi.w	800ff00 <_svfiprintf_r+0x28>
 80100a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80100aa:	b01d      	add	sp, #116	; 0x74
 80100ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100b0:	ab03      	add	r3, sp, #12
 80100b2:	9300      	str	r3, [sp, #0]
 80100b4:	462a      	mov	r2, r5
 80100b6:	4b06      	ldr	r3, [pc, #24]	; (80100d0 <_svfiprintf_r+0x1f8>)
 80100b8:	a904      	add	r1, sp, #16
 80100ba:	4638      	mov	r0, r7
 80100bc:	f000 f9d4 	bl	8010468 <_printf_i>
 80100c0:	e7eb      	b.n	801009a <_svfiprintf_r+0x1c2>
 80100c2:	bf00      	nop
 80100c4:	0801194c 	.word	0x0801194c
 80100c8:	08011956 	.word	0x08011956
 80100cc:	00000000 	.word	0x00000000
 80100d0:	0800fe21 	.word	0x0800fe21
 80100d4:	08011952 	.word	0x08011952

080100d8 <__sfputc_r>:
 80100d8:	6893      	ldr	r3, [r2, #8]
 80100da:	3b01      	subs	r3, #1
 80100dc:	2b00      	cmp	r3, #0
 80100de:	b410      	push	{r4}
 80100e0:	6093      	str	r3, [r2, #8]
 80100e2:	da08      	bge.n	80100f6 <__sfputc_r+0x1e>
 80100e4:	6994      	ldr	r4, [r2, #24]
 80100e6:	42a3      	cmp	r3, r4
 80100e8:	db01      	blt.n	80100ee <__sfputc_r+0x16>
 80100ea:	290a      	cmp	r1, #10
 80100ec:	d103      	bne.n	80100f6 <__sfputc_r+0x1e>
 80100ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80100f2:	f7ff bad5 	b.w	800f6a0 <__swbuf_r>
 80100f6:	6813      	ldr	r3, [r2, #0]
 80100f8:	1c58      	adds	r0, r3, #1
 80100fa:	6010      	str	r0, [r2, #0]
 80100fc:	7019      	strb	r1, [r3, #0]
 80100fe:	4608      	mov	r0, r1
 8010100:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010104:	4770      	bx	lr

08010106 <__sfputs_r>:
 8010106:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010108:	4606      	mov	r6, r0
 801010a:	460f      	mov	r7, r1
 801010c:	4614      	mov	r4, r2
 801010e:	18d5      	adds	r5, r2, r3
 8010110:	42ac      	cmp	r4, r5
 8010112:	d101      	bne.n	8010118 <__sfputs_r+0x12>
 8010114:	2000      	movs	r0, #0
 8010116:	e007      	b.n	8010128 <__sfputs_r+0x22>
 8010118:	f814 1b01 	ldrb.w	r1, [r4], #1
 801011c:	463a      	mov	r2, r7
 801011e:	4630      	mov	r0, r6
 8010120:	f7ff ffda 	bl	80100d8 <__sfputc_r>
 8010124:	1c43      	adds	r3, r0, #1
 8010126:	d1f3      	bne.n	8010110 <__sfputs_r+0xa>
 8010128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801012c <_vfiprintf_r>:
 801012c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010130:	460d      	mov	r5, r1
 8010132:	b09d      	sub	sp, #116	; 0x74
 8010134:	4614      	mov	r4, r2
 8010136:	4698      	mov	r8, r3
 8010138:	4606      	mov	r6, r0
 801013a:	b118      	cbz	r0, 8010144 <_vfiprintf_r+0x18>
 801013c:	6983      	ldr	r3, [r0, #24]
 801013e:	b90b      	cbnz	r3, 8010144 <_vfiprintf_r+0x18>
 8010140:	f7ff fca6 	bl	800fa90 <__sinit>
 8010144:	4b89      	ldr	r3, [pc, #548]	; (801036c <_vfiprintf_r+0x240>)
 8010146:	429d      	cmp	r5, r3
 8010148:	d11b      	bne.n	8010182 <_vfiprintf_r+0x56>
 801014a:	6875      	ldr	r5, [r6, #4]
 801014c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801014e:	07d9      	lsls	r1, r3, #31
 8010150:	d405      	bmi.n	801015e <_vfiprintf_r+0x32>
 8010152:	89ab      	ldrh	r3, [r5, #12]
 8010154:	059a      	lsls	r2, r3, #22
 8010156:	d402      	bmi.n	801015e <_vfiprintf_r+0x32>
 8010158:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801015a:	f7ff fd49 	bl	800fbf0 <__retarget_lock_acquire_recursive>
 801015e:	89ab      	ldrh	r3, [r5, #12]
 8010160:	071b      	lsls	r3, r3, #28
 8010162:	d501      	bpl.n	8010168 <_vfiprintf_r+0x3c>
 8010164:	692b      	ldr	r3, [r5, #16]
 8010166:	b9eb      	cbnz	r3, 80101a4 <_vfiprintf_r+0x78>
 8010168:	4629      	mov	r1, r5
 801016a:	4630      	mov	r0, r6
 801016c:	f7ff faea 	bl	800f744 <__swsetup_r>
 8010170:	b1c0      	cbz	r0, 80101a4 <_vfiprintf_r+0x78>
 8010172:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010174:	07dc      	lsls	r4, r3, #31
 8010176:	d50e      	bpl.n	8010196 <_vfiprintf_r+0x6a>
 8010178:	f04f 30ff 	mov.w	r0, #4294967295
 801017c:	b01d      	add	sp, #116	; 0x74
 801017e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010182:	4b7b      	ldr	r3, [pc, #492]	; (8010370 <_vfiprintf_r+0x244>)
 8010184:	429d      	cmp	r5, r3
 8010186:	d101      	bne.n	801018c <_vfiprintf_r+0x60>
 8010188:	68b5      	ldr	r5, [r6, #8]
 801018a:	e7df      	b.n	801014c <_vfiprintf_r+0x20>
 801018c:	4b79      	ldr	r3, [pc, #484]	; (8010374 <_vfiprintf_r+0x248>)
 801018e:	429d      	cmp	r5, r3
 8010190:	bf08      	it	eq
 8010192:	68f5      	ldreq	r5, [r6, #12]
 8010194:	e7da      	b.n	801014c <_vfiprintf_r+0x20>
 8010196:	89ab      	ldrh	r3, [r5, #12]
 8010198:	0598      	lsls	r0, r3, #22
 801019a:	d4ed      	bmi.n	8010178 <_vfiprintf_r+0x4c>
 801019c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801019e:	f7ff fd28 	bl	800fbf2 <__retarget_lock_release_recursive>
 80101a2:	e7e9      	b.n	8010178 <_vfiprintf_r+0x4c>
 80101a4:	2300      	movs	r3, #0
 80101a6:	9309      	str	r3, [sp, #36]	; 0x24
 80101a8:	2320      	movs	r3, #32
 80101aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80101ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80101b2:	2330      	movs	r3, #48	; 0x30
 80101b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010378 <_vfiprintf_r+0x24c>
 80101b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80101bc:	f04f 0901 	mov.w	r9, #1
 80101c0:	4623      	mov	r3, r4
 80101c2:	469a      	mov	sl, r3
 80101c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80101c8:	b10a      	cbz	r2, 80101ce <_vfiprintf_r+0xa2>
 80101ca:	2a25      	cmp	r2, #37	; 0x25
 80101cc:	d1f9      	bne.n	80101c2 <_vfiprintf_r+0x96>
 80101ce:	ebba 0b04 	subs.w	fp, sl, r4
 80101d2:	d00b      	beq.n	80101ec <_vfiprintf_r+0xc0>
 80101d4:	465b      	mov	r3, fp
 80101d6:	4622      	mov	r2, r4
 80101d8:	4629      	mov	r1, r5
 80101da:	4630      	mov	r0, r6
 80101dc:	f7ff ff93 	bl	8010106 <__sfputs_r>
 80101e0:	3001      	adds	r0, #1
 80101e2:	f000 80aa 	beq.w	801033a <_vfiprintf_r+0x20e>
 80101e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80101e8:	445a      	add	r2, fp
 80101ea:	9209      	str	r2, [sp, #36]	; 0x24
 80101ec:	f89a 3000 	ldrb.w	r3, [sl]
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	f000 80a2 	beq.w	801033a <_vfiprintf_r+0x20e>
 80101f6:	2300      	movs	r3, #0
 80101f8:	f04f 32ff 	mov.w	r2, #4294967295
 80101fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010200:	f10a 0a01 	add.w	sl, sl, #1
 8010204:	9304      	str	r3, [sp, #16]
 8010206:	9307      	str	r3, [sp, #28]
 8010208:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801020c:	931a      	str	r3, [sp, #104]	; 0x68
 801020e:	4654      	mov	r4, sl
 8010210:	2205      	movs	r2, #5
 8010212:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010216:	4858      	ldr	r0, [pc, #352]	; (8010378 <_vfiprintf_r+0x24c>)
 8010218:	f7f0 f86a 	bl	80002f0 <memchr>
 801021c:	9a04      	ldr	r2, [sp, #16]
 801021e:	b9d8      	cbnz	r0, 8010258 <_vfiprintf_r+0x12c>
 8010220:	06d1      	lsls	r1, r2, #27
 8010222:	bf44      	itt	mi
 8010224:	2320      	movmi	r3, #32
 8010226:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801022a:	0713      	lsls	r3, r2, #28
 801022c:	bf44      	itt	mi
 801022e:	232b      	movmi	r3, #43	; 0x2b
 8010230:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010234:	f89a 3000 	ldrb.w	r3, [sl]
 8010238:	2b2a      	cmp	r3, #42	; 0x2a
 801023a:	d015      	beq.n	8010268 <_vfiprintf_r+0x13c>
 801023c:	9a07      	ldr	r2, [sp, #28]
 801023e:	4654      	mov	r4, sl
 8010240:	2000      	movs	r0, #0
 8010242:	f04f 0c0a 	mov.w	ip, #10
 8010246:	4621      	mov	r1, r4
 8010248:	f811 3b01 	ldrb.w	r3, [r1], #1
 801024c:	3b30      	subs	r3, #48	; 0x30
 801024e:	2b09      	cmp	r3, #9
 8010250:	d94e      	bls.n	80102f0 <_vfiprintf_r+0x1c4>
 8010252:	b1b0      	cbz	r0, 8010282 <_vfiprintf_r+0x156>
 8010254:	9207      	str	r2, [sp, #28]
 8010256:	e014      	b.n	8010282 <_vfiprintf_r+0x156>
 8010258:	eba0 0308 	sub.w	r3, r0, r8
 801025c:	fa09 f303 	lsl.w	r3, r9, r3
 8010260:	4313      	orrs	r3, r2
 8010262:	9304      	str	r3, [sp, #16]
 8010264:	46a2      	mov	sl, r4
 8010266:	e7d2      	b.n	801020e <_vfiprintf_r+0xe2>
 8010268:	9b03      	ldr	r3, [sp, #12]
 801026a:	1d19      	adds	r1, r3, #4
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	9103      	str	r1, [sp, #12]
 8010270:	2b00      	cmp	r3, #0
 8010272:	bfbb      	ittet	lt
 8010274:	425b      	neglt	r3, r3
 8010276:	f042 0202 	orrlt.w	r2, r2, #2
 801027a:	9307      	strge	r3, [sp, #28]
 801027c:	9307      	strlt	r3, [sp, #28]
 801027e:	bfb8      	it	lt
 8010280:	9204      	strlt	r2, [sp, #16]
 8010282:	7823      	ldrb	r3, [r4, #0]
 8010284:	2b2e      	cmp	r3, #46	; 0x2e
 8010286:	d10c      	bne.n	80102a2 <_vfiprintf_r+0x176>
 8010288:	7863      	ldrb	r3, [r4, #1]
 801028a:	2b2a      	cmp	r3, #42	; 0x2a
 801028c:	d135      	bne.n	80102fa <_vfiprintf_r+0x1ce>
 801028e:	9b03      	ldr	r3, [sp, #12]
 8010290:	1d1a      	adds	r2, r3, #4
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	9203      	str	r2, [sp, #12]
 8010296:	2b00      	cmp	r3, #0
 8010298:	bfb8      	it	lt
 801029a:	f04f 33ff 	movlt.w	r3, #4294967295
 801029e:	3402      	adds	r4, #2
 80102a0:	9305      	str	r3, [sp, #20]
 80102a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010388 <_vfiprintf_r+0x25c>
 80102a6:	7821      	ldrb	r1, [r4, #0]
 80102a8:	2203      	movs	r2, #3
 80102aa:	4650      	mov	r0, sl
 80102ac:	f7f0 f820 	bl	80002f0 <memchr>
 80102b0:	b140      	cbz	r0, 80102c4 <_vfiprintf_r+0x198>
 80102b2:	2340      	movs	r3, #64	; 0x40
 80102b4:	eba0 000a 	sub.w	r0, r0, sl
 80102b8:	fa03 f000 	lsl.w	r0, r3, r0
 80102bc:	9b04      	ldr	r3, [sp, #16]
 80102be:	4303      	orrs	r3, r0
 80102c0:	3401      	adds	r4, #1
 80102c2:	9304      	str	r3, [sp, #16]
 80102c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102c8:	482c      	ldr	r0, [pc, #176]	; (801037c <_vfiprintf_r+0x250>)
 80102ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80102ce:	2206      	movs	r2, #6
 80102d0:	f7f0 f80e 	bl	80002f0 <memchr>
 80102d4:	2800      	cmp	r0, #0
 80102d6:	d03f      	beq.n	8010358 <_vfiprintf_r+0x22c>
 80102d8:	4b29      	ldr	r3, [pc, #164]	; (8010380 <_vfiprintf_r+0x254>)
 80102da:	bb1b      	cbnz	r3, 8010324 <_vfiprintf_r+0x1f8>
 80102dc:	9b03      	ldr	r3, [sp, #12]
 80102de:	3307      	adds	r3, #7
 80102e0:	f023 0307 	bic.w	r3, r3, #7
 80102e4:	3308      	adds	r3, #8
 80102e6:	9303      	str	r3, [sp, #12]
 80102e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102ea:	443b      	add	r3, r7
 80102ec:	9309      	str	r3, [sp, #36]	; 0x24
 80102ee:	e767      	b.n	80101c0 <_vfiprintf_r+0x94>
 80102f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80102f4:	460c      	mov	r4, r1
 80102f6:	2001      	movs	r0, #1
 80102f8:	e7a5      	b.n	8010246 <_vfiprintf_r+0x11a>
 80102fa:	2300      	movs	r3, #0
 80102fc:	3401      	adds	r4, #1
 80102fe:	9305      	str	r3, [sp, #20]
 8010300:	4619      	mov	r1, r3
 8010302:	f04f 0c0a 	mov.w	ip, #10
 8010306:	4620      	mov	r0, r4
 8010308:	f810 2b01 	ldrb.w	r2, [r0], #1
 801030c:	3a30      	subs	r2, #48	; 0x30
 801030e:	2a09      	cmp	r2, #9
 8010310:	d903      	bls.n	801031a <_vfiprintf_r+0x1ee>
 8010312:	2b00      	cmp	r3, #0
 8010314:	d0c5      	beq.n	80102a2 <_vfiprintf_r+0x176>
 8010316:	9105      	str	r1, [sp, #20]
 8010318:	e7c3      	b.n	80102a2 <_vfiprintf_r+0x176>
 801031a:	fb0c 2101 	mla	r1, ip, r1, r2
 801031e:	4604      	mov	r4, r0
 8010320:	2301      	movs	r3, #1
 8010322:	e7f0      	b.n	8010306 <_vfiprintf_r+0x1da>
 8010324:	ab03      	add	r3, sp, #12
 8010326:	9300      	str	r3, [sp, #0]
 8010328:	462a      	mov	r2, r5
 801032a:	4b16      	ldr	r3, [pc, #88]	; (8010384 <_vfiprintf_r+0x258>)
 801032c:	a904      	add	r1, sp, #16
 801032e:	4630      	mov	r0, r6
 8010330:	f3af 8000 	nop.w
 8010334:	4607      	mov	r7, r0
 8010336:	1c78      	adds	r0, r7, #1
 8010338:	d1d6      	bne.n	80102e8 <_vfiprintf_r+0x1bc>
 801033a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801033c:	07d9      	lsls	r1, r3, #31
 801033e:	d405      	bmi.n	801034c <_vfiprintf_r+0x220>
 8010340:	89ab      	ldrh	r3, [r5, #12]
 8010342:	059a      	lsls	r2, r3, #22
 8010344:	d402      	bmi.n	801034c <_vfiprintf_r+0x220>
 8010346:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010348:	f7ff fc53 	bl	800fbf2 <__retarget_lock_release_recursive>
 801034c:	89ab      	ldrh	r3, [r5, #12]
 801034e:	065b      	lsls	r3, r3, #25
 8010350:	f53f af12 	bmi.w	8010178 <_vfiprintf_r+0x4c>
 8010354:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010356:	e711      	b.n	801017c <_vfiprintf_r+0x50>
 8010358:	ab03      	add	r3, sp, #12
 801035a:	9300      	str	r3, [sp, #0]
 801035c:	462a      	mov	r2, r5
 801035e:	4b09      	ldr	r3, [pc, #36]	; (8010384 <_vfiprintf_r+0x258>)
 8010360:	a904      	add	r1, sp, #16
 8010362:	4630      	mov	r0, r6
 8010364:	f000 f880 	bl	8010468 <_printf_i>
 8010368:	e7e4      	b.n	8010334 <_vfiprintf_r+0x208>
 801036a:	bf00      	nop
 801036c:	0801190c 	.word	0x0801190c
 8010370:	0801192c 	.word	0x0801192c
 8010374:	080118ec 	.word	0x080118ec
 8010378:	0801194c 	.word	0x0801194c
 801037c:	08011956 	.word	0x08011956
 8010380:	00000000 	.word	0x00000000
 8010384:	08010107 	.word	0x08010107
 8010388:	08011952 	.word	0x08011952

0801038c <_printf_common>:
 801038c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010390:	4616      	mov	r6, r2
 8010392:	4699      	mov	r9, r3
 8010394:	688a      	ldr	r2, [r1, #8]
 8010396:	690b      	ldr	r3, [r1, #16]
 8010398:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801039c:	4293      	cmp	r3, r2
 801039e:	bfb8      	it	lt
 80103a0:	4613      	movlt	r3, r2
 80103a2:	6033      	str	r3, [r6, #0]
 80103a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80103a8:	4607      	mov	r7, r0
 80103aa:	460c      	mov	r4, r1
 80103ac:	b10a      	cbz	r2, 80103b2 <_printf_common+0x26>
 80103ae:	3301      	adds	r3, #1
 80103b0:	6033      	str	r3, [r6, #0]
 80103b2:	6823      	ldr	r3, [r4, #0]
 80103b4:	0699      	lsls	r1, r3, #26
 80103b6:	bf42      	ittt	mi
 80103b8:	6833      	ldrmi	r3, [r6, #0]
 80103ba:	3302      	addmi	r3, #2
 80103bc:	6033      	strmi	r3, [r6, #0]
 80103be:	6825      	ldr	r5, [r4, #0]
 80103c0:	f015 0506 	ands.w	r5, r5, #6
 80103c4:	d106      	bne.n	80103d4 <_printf_common+0x48>
 80103c6:	f104 0a19 	add.w	sl, r4, #25
 80103ca:	68e3      	ldr	r3, [r4, #12]
 80103cc:	6832      	ldr	r2, [r6, #0]
 80103ce:	1a9b      	subs	r3, r3, r2
 80103d0:	42ab      	cmp	r3, r5
 80103d2:	dc26      	bgt.n	8010422 <_printf_common+0x96>
 80103d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80103d8:	1e13      	subs	r3, r2, #0
 80103da:	6822      	ldr	r2, [r4, #0]
 80103dc:	bf18      	it	ne
 80103de:	2301      	movne	r3, #1
 80103e0:	0692      	lsls	r2, r2, #26
 80103e2:	d42b      	bmi.n	801043c <_printf_common+0xb0>
 80103e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80103e8:	4649      	mov	r1, r9
 80103ea:	4638      	mov	r0, r7
 80103ec:	47c0      	blx	r8
 80103ee:	3001      	adds	r0, #1
 80103f0:	d01e      	beq.n	8010430 <_printf_common+0xa4>
 80103f2:	6823      	ldr	r3, [r4, #0]
 80103f4:	68e5      	ldr	r5, [r4, #12]
 80103f6:	6832      	ldr	r2, [r6, #0]
 80103f8:	f003 0306 	and.w	r3, r3, #6
 80103fc:	2b04      	cmp	r3, #4
 80103fe:	bf08      	it	eq
 8010400:	1aad      	subeq	r5, r5, r2
 8010402:	68a3      	ldr	r3, [r4, #8]
 8010404:	6922      	ldr	r2, [r4, #16]
 8010406:	bf0c      	ite	eq
 8010408:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801040c:	2500      	movne	r5, #0
 801040e:	4293      	cmp	r3, r2
 8010410:	bfc4      	itt	gt
 8010412:	1a9b      	subgt	r3, r3, r2
 8010414:	18ed      	addgt	r5, r5, r3
 8010416:	2600      	movs	r6, #0
 8010418:	341a      	adds	r4, #26
 801041a:	42b5      	cmp	r5, r6
 801041c:	d11a      	bne.n	8010454 <_printf_common+0xc8>
 801041e:	2000      	movs	r0, #0
 8010420:	e008      	b.n	8010434 <_printf_common+0xa8>
 8010422:	2301      	movs	r3, #1
 8010424:	4652      	mov	r2, sl
 8010426:	4649      	mov	r1, r9
 8010428:	4638      	mov	r0, r7
 801042a:	47c0      	blx	r8
 801042c:	3001      	adds	r0, #1
 801042e:	d103      	bne.n	8010438 <_printf_common+0xac>
 8010430:	f04f 30ff 	mov.w	r0, #4294967295
 8010434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010438:	3501      	adds	r5, #1
 801043a:	e7c6      	b.n	80103ca <_printf_common+0x3e>
 801043c:	18e1      	adds	r1, r4, r3
 801043e:	1c5a      	adds	r2, r3, #1
 8010440:	2030      	movs	r0, #48	; 0x30
 8010442:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010446:	4422      	add	r2, r4
 8010448:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801044c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010450:	3302      	adds	r3, #2
 8010452:	e7c7      	b.n	80103e4 <_printf_common+0x58>
 8010454:	2301      	movs	r3, #1
 8010456:	4622      	mov	r2, r4
 8010458:	4649      	mov	r1, r9
 801045a:	4638      	mov	r0, r7
 801045c:	47c0      	blx	r8
 801045e:	3001      	adds	r0, #1
 8010460:	d0e6      	beq.n	8010430 <_printf_common+0xa4>
 8010462:	3601      	adds	r6, #1
 8010464:	e7d9      	b.n	801041a <_printf_common+0x8e>
	...

08010468 <_printf_i>:
 8010468:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801046c:	460c      	mov	r4, r1
 801046e:	4691      	mov	r9, r2
 8010470:	7e27      	ldrb	r7, [r4, #24]
 8010472:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010474:	2f78      	cmp	r7, #120	; 0x78
 8010476:	4680      	mov	r8, r0
 8010478:	469a      	mov	sl, r3
 801047a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801047e:	d807      	bhi.n	8010490 <_printf_i+0x28>
 8010480:	2f62      	cmp	r7, #98	; 0x62
 8010482:	d80a      	bhi.n	801049a <_printf_i+0x32>
 8010484:	2f00      	cmp	r7, #0
 8010486:	f000 80d8 	beq.w	801063a <_printf_i+0x1d2>
 801048a:	2f58      	cmp	r7, #88	; 0x58
 801048c:	f000 80a3 	beq.w	80105d6 <_printf_i+0x16e>
 8010490:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010494:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010498:	e03a      	b.n	8010510 <_printf_i+0xa8>
 801049a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801049e:	2b15      	cmp	r3, #21
 80104a0:	d8f6      	bhi.n	8010490 <_printf_i+0x28>
 80104a2:	a001      	add	r0, pc, #4	; (adr r0, 80104a8 <_printf_i+0x40>)
 80104a4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80104a8:	08010501 	.word	0x08010501
 80104ac:	08010515 	.word	0x08010515
 80104b0:	08010491 	.word	0x08010491
 80104b4:	08010491 	.word	0x08010491
 80104b8:	08010491 	.word	0x08010491
 80104bc:	08010491 	.word	0x08010491
 80104c0:	08010515 	.word	0x08010515
 80104c4:	08010491 	.word	0x08010491
 80104c8:	08010491 	.word	0x08010491
 80104cc:	08010491 	.word	0x08010491
 80104d0:	08010491 	.word	0x08010491
 80104d4:	08010621 	.word	0x08010621
 80104d8:	08010545 	.word	0x08010545
 80104dc:	08010603 	.word	0x08010603
 80104e0:	08010491 	.word	0x08010491
 80104e4:	08010491 	.word	0x08010491
 80104e8:	08010643 	.word	0x08010643
 80104ec:	08010491 	.word	0x08010491
 80104f0:	08010545 	.word	0x08010545
 80104f4:	08010491 	.word	0x08010491
 80104f8:	08010491 	.word	0x08010491
 80104fc:	0801060b 	.word	0x0801060b
 8010500:	680b      	ldr	r3, [r1, #0]
 8010502:	1d1a      	adds	r2, r3, #4
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	600a      	str	r2, [r1, #0]
 8010508:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801050c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010510:	2301      	movs	r3, #1
 8010512:	e0a3      	b.n	801065c <_printf_i+0x1f4>
 8010514:	6825      	ldr	r5, [r4, #0]
 8010516:	6808      	ldr	r0, [r1, #0]
 8010518:	062e      	lsls	r6, r5, #24
 801051a:	f100 0304 	add.w	r3, r0, #4
 801051e:	d50a      	bpl.n	8010536 <_printf_i+0xce>
 8010520:	6805      	ldr	r5, [r0, #0]
 8010522:	600b      	str	r3, [r1, #0]
 8010524:	2d00      	cmp	r5, #0
 8010526:	da03      	bge.n	8010530 <_printf_i+0xc8>
 8010528:	232d      	movs	r3, #45	; 0x2d
 801052a:	426d      	negs	r5, r5
 801052c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010530:	485e      	ldr	r0, [pc, #376]	; (80106ac <_printf_i+0x244>)
 8010532:	230a      	movs	r3, #10
 8010534:	e019      	b.n	801056a <_printf_i+0x102>
 8010536:	f015 0f40 	tst.w	r5, #64	; 0x40
 801053a:	6805      	ldr	r5, [r0, #0]
 801053c:	600b      	str	r3, [r1, #0]
 801053e:	bf18      	it	ne
 8010540:	b22d      	sxthne	r5, r5
 8010542:	e7ef      	b.n	8010524 <_printf_i+0xbc>
 8010544:	680b      	ldr	r3, [r1, #0]
 8010546:	6825      	ldr	r5, [r4, #0]
 8010548:	1d18      	adds	r0, r3, #4
 801054a:	6008      	str	r0, [r1, #0]
 801054c:	0628      	lsls	r0, r5, #24
 801054e:	d501      	bpl.n	8010554 <_printf_i+0xec>
 8010550:	681d      	ldr	r5, [r3, #0]
 8010552:	e002      	b.n	801055a <_printf_i+0xf2>
 8010554:	0669      	lsls	r1, r5, #25
 8010556:	d5fb      	bpl.n	8010550 <_printf_i+0xe8>
 8010558:	881d      	ldrh	r5, [r3, #0]
 801055a:	4854      	ldr	r0, [pc, #336]	; (80106ac <_printf_i+0x244>)
 801055c:	2f6f      	cmp	r7, #111	; 0x6f
 801055e:	bf0c      	ite	eq
 8010560:	2308      	moveq	r3, #8
 8010562:	230a      	movne	r3, #10
 8010564:	2100      	movs	r1, #0
 8010566:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801056a:	6866      	ldr	r6, [r4, #4]
 801056c:	60a6      	str	r6, [r4, #8]
 801056e:	2e00      	cmp	r6, #0
 8010570:	bfa2      	ittt	ge
 8010572:	6821      	ldrge	r1, [r4, #0]
 8010574:	f021 0104 	bicge.w	r1, r1, #4
 8010578:	6021      	strge	r1, [r4, #0]
 801057a:	b90d      	cbnz	r5, 8010580 <_printf_i+0x118>
 801057c:	2e00      	cmp	r6, #0
 801057e:	d04d      	beq.n	801061c <_printf_i+0x1b4>
 8010580:	4616      	mov	r6, r2
 8010582:	fbb5 f1f3 	udiv	r1, r5, r3
 8010586:	fb03 5711 	mls	r7, r3, r1, r5
 801058a:	5dc7      	ldrb	r7, [r0, r7]
 801058c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010590:	462f      	mov	r7, r5
 8010592:	42bb      	cmp	r3, r7
 8010594:	460d      	mov	r5, r1
 8010596:	d9f4      	bls.n	8010582 <_printf_i+0x11a>
 8010598:	2b08      	cmp	r3, #8
 801059a:	d10b      	bne.n	80105b4 <_printf_i+0x14c>
 801059c:	6823      	ldr	r3, [r4, #0]
 801059e:	07df      	lsls	r7, r3, #31
 80105a0:	d508      	bpl.n	80105b4 <_printf_i+0x14c>
 80105a2:	6923      	ldr	r3, [r4, #16]
 80105a4:	6861      	ldr	r1, [r4, #4]
 80105a6:	4299      	cmp	r1, r3
 80105a8:	bfde      	ittt	le
 80105aa:	2330      	movle	r3, #48	; 0x30
 80105ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80105b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80105b4:	1b92      	subs	r2, r2, r6
 80105b6:	6122      	str	r2, [r4, #16]
 80105b8:	f8cd a000 	str.w	sl, [sp]
 80105bc:	464b      	mov	r3, r9
 80105be:	aa03      	add	r2, sp, #12
 80105c0:	4621      	mov	r1, r4
 80105c2:	4640      	mov	r0, r8
 80105c4:	f7ff fee2 	bl	801038c <_printf_common>
 80105c8:	3001      	adds	r0, #1
 80105ca:	d14c      	bne.n	8010666 <_printf_i+0x1fe>
 80105cc:	f04f 30ff 	mov.w	r0, #4294967295
 80105d0:	b004      	add	sp, #16
 80105d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105d6:	4835      	ldr	r0, [pc, #212]	; (80106ac <_printf_i+0x244>)
 80105d8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80105dc:	6823      	ldr	r3, [r4, #0]
 80105de:	680e      	ldr	r6, [r1, #0]
 80105e0:	061f      	lsls	r7, r3, #24
 80105e2:	f856 5b04 	ldr.w	r5, [r6], #4
 80105e6:	600e      	str	r6, [r1, #0]
 80105e8:	d514      	bpl.n	8010614 <_printf_i+0x1ac>
 80105ea:	07d9      	lsls	r1, r3, #31
 80105ec:	bf44      	itt	mi
 80105ee:	f043 0320 	orrmi.w	r3, r3, #32
 80105f2:	6023      	strmi	r3, [r4, #0]
 80105f4:	b91d      	cbnz	r5, 80105fe <_printf_i+0x196>
 80105f6:	6823      	ldr	r3, [r4, #0]
 80105f8:	f023 0320 	bic.w	r3, r3, #32
 80105fc:	6023      	str	r3, [r4, #0]
 80105fe:	2310      	movs	r3, #16
 8010600:	e7b0      	b.n	8010564 <_printf_i+0xfc>
 8010602:	6823      	ldr	r3, [r4, #0]
 8010604:	f043 0320 	orr.w	r3, r3, #32
 8010608:	6023      	str	r3, [r4, #0]
 801060a:	2378      	movs	r3, #120	; 0x78
 801060c:	4828      	ldr	r0, [pc, #160]	; (80106b0 <_printf_i+0x248>)
 801060e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010612:	e7e3      	b.n	80105dc <_printf_i+0x174>
 8010614:	065e      	lsls	r6, r3, #25
 8010616:	bf48      	it	mi
 8010618:	b2ad      	uxthmi	r5, r5
 801061a:	e7e6      	b.n	80105ea <_printf_i+0x182>
 801061c:	4616      	mov	r6, r2
 801061e:	e7bb      	b.n	8010598 <_printf_i+0x130>
 8010620:	680b      	ldr	r3, [r1, #0]
 8010622:	6826      	ldr	r6, [r4, #0]
 8010624:	6960      	ldr	r0, [r4, #20]
 8010626:	1d1d      	adds	r5, r3, #4
 8010628:	600d      	str	r5, [r1, #0]
 801062a:	0635      	lsls	r5, r6, #24
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	d501      	bpl.n	8010634 <_printf_i+0x1cc>
 8010630:	6018      	str	r0, [r3, #0]
 8010632:	e002      	b.n	801063a <_printf_i+0x1d2>
 8010634:	0671      	lsls	r1, r6, #25
 8010636:	d5fb      	bpl.n	8010630 <_printf_i+0x1c8>
 8010638:	8018      	strh	r0, [r3, #0]
 801063a:	2300      	movs	r3, #0
 801063c:	6123      	str	r3, [r4, #16]
 801063e:	4616      	mov	r6, r2
 8010640:	e7ba      	b.n	80105b8 <_printf_i+0x150>
 8010642:	680b      	ldr	r3, [r1, #0]
 8010644:	1d1a      	adds	r2, r3, #4
 8010646:	600a      	str	r2, [r1, #0]
 8010648:	681e      	ldr	r6, [r3, #0]
 801064a:	6862      	ldr	r2, [r4, #4]
 801064c:	2100      	movs	r1, #0
 801064e:	4630      	mov	r0, r6
 8010650:	f7ef fe4e 	bl	80002f0 <memchr>
 8010654:	b108      	cbz	r0, 801065a <_printf_i+0x1f2>
 8010656:	1b80      	subs	r0, r0, r6
 8010658:	6060      	str	r0, [r4, #4]
 801065a:	6863      	ldr	r3, [r4, #4]
 801065c:	6123      	str	r3, [r4, #16]
 801065e:	2300      	movs	r3, #0
 8010660:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010664:	e7a8      	b.n	80105b8 <_printf_i+0x150>
 8010666:	6923      	ldr	r3, [r4, #16]
 8010668:	4632      	mov	r2, r6
 801066a:	4649      	mov	r1, r9
 801066c:	4640      	mov	r0, r8
 801066e:	47d0      	blx	sl
 8010670:	3001      	adds	r0, #1
 8010672:	d0ab      	beq.n	80105cc <_printf_i+0x164>
 8010674:	6823      	ldr	r3, [r4, #0]
 8010676:	079b      	lsls	r3, r3, #30
 8010678:	d413      	bmi.n	80106a2 <_printf_i+0x23a>
 801067a:	68e0      	ldr	r0, [r4, #12]
 801067c:	9b03      	ldr	r3, [sp, #12]
 801067e:	4298      	cmp	r0, r3
 8010680:	bfb8      	it	lt
 8010682:	4618      	movlt	r0, r3
 8010684:	e7a4      	b.n	80105d0 <_printf_i+0x168>
 8010686:	2301      	movs	r3, #1
 8010688:	4632      	mov	r2, r6
 801068a:	4649      	mov	r1, r9
 801068c:	4640      	mov	r0, r8
 801068e:	47d0      	blx	sl
 8010690:	3001      	adds	r0, #1
 8010692:	d09b      	beq.n	80105cc <_printf_i+0x164>
 8010694:	3501      	adds	r5, #1
 8010696:	68e3      	ldr	r3, [r4, #12]
 8010698:	9903      	ldr	r1, [sp, #12]
 801069a:	1a5b      	subs	r3, r3, r1
 801069c:	42ab      	cmp	r3, r5
 801069e:	dcf2      	bgt.n	8010686 <_printf_i+0x21e>
 80106a0:	e7eb      	b.n	801067a <_printf_i+0x212>
 80106a2:	2500      	movs	r5, #0
 80106a4:	f104 0619 	add.w	r6, r4, #25
 80106a8:	e7f5      	b.n	8010696 <_printf_i+0x22e>
 80106aa:	bf00      	nop
 80106ac:	0801195d 	.word	0x0801195d
 80106b0:	0801196e 	.word	0x0801196e

080106b4 <_putc_r>:
 80106b4:	b570      	push	{r4, r5, r6, lr}
 80106b6:	460d      	mov	r5, r1
 80106b8:	4614      	mov	r4, r2
 80106ba:	4606      	mov	r6, r0
 80106bc:	b118      	cbz	r0, 80106c6 <_putc_r+0x12>
 80106be:	6983      	ldr	r3, [r0, #24]
 80106c0:	b90b      	cbnz	r3, 80106c6 <_putc_r+0x12>
 80106c2:	f7ff f9e5 	bl	800fa90 <__sinit>
 80106c6:	4b1c      	ldr	r3, [pc, #112]	; (8010738 <_putc_r+0x84>)
 80106c8:	429c      	cmp	r4, r3
 80106ca:	d124      	bne.n	8010716 <_putc_r+0x62>
 80106cc:	6874      	ldr	r4, [r6, #4]
 80106ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80106d0:	07d8      	lsls	r0, r3, #31
 80106d2:	d405      	bmi.n	80106e0 <_putc_r+0x2c>
 80106d4:	89a3      	ldrh	r3, [r4, #12]
 80106d6:	0599      	lsls	r1, r3, #22
 80106d8:	d402      	bmi.n	80106e0 <_putc_r+0x2c>
 80106da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80106dc:	f7ff fa88 	bl	800fbf0 <__retarget_lock_acquire_recursive>
 80106e0:	68a3      	ldr	r3, [r4, #8]
 80106e2:	3b01      	subs	r3, #1
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	60a3      	str	r3, [r4, #8]
 80106e8:	da05      	bge.n	80106f6 <_putc_r+0x42>
 80106ea:	69a2      	ldr	r2, [r4, #24]
 80106ec:	4293      	cmp	r3, r2
 80106ee:	db1c      	blt.n	801072a <_putc_r+0x76>
 80106f0:	b2eb      	uxtb	r3, r5
 80106f2:	2b0a      	cmp	r3, #10
 80106f4:	d019      	beq.n	801072a <_putc_r+0x76>
 80106f6:	6823      	ldr	r3, [r4, #0]
 80106f8:	1c5a      	adds	r2, r3, #1
 80106fa:	6022      	str	r2, [r4, #0]
 80106fc:	701d      	strb	r5, [r3, #0]
 80106fe:	b2ed      	uxtb	r5, r5
 8010700:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010702:	07da      	lsls	r2, r3, #31
 8010704:	d405      	bmi.n	8010712 <_putc_r+0x5e>
 8010706:	89a3      	ldrh	r3, [r4, #12]
 8010708:	059b      	lsls	r3, r3, #22
 801070a:	d402      	bmi.n	8010712 <_putc_r+0x5e>
 801070c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801070e:	f7ff fa70 	bl	800fbf2 <__retarget_lock_release_recursive>
 8010712:	4628      	mov	r0, r5
 8010714:	bd70      	pop	{r4, r5, r6, pc}
 8010716:	4b09      	ldr	r3, [pc, #36]	; (801073c <_putc_r+0x88>)
 8010718:	429c      	cmp	r4, r3
 801071a:	d101      	bne.n	8010720 <_putc_r+0x6c>
 801071c:	68b4      	ldr	r4, [r6, #8]
 801071e:	e7d6      	b.n	80106ce <_putc_r+0x1a>
 8010720:	4b07      	ldr	r3, [pc, #28]	; (8010740 <_putc_r+0x8c>)
 8010722:	429c      	cmp	r4, r3
 8010724:	bf08      	it	eq
 8010726:	68f4      	ldreq	r4, [r6, #12]
 8010728:	e7d1      	b.n	80106ce <_putc_r+0x1a>
 801072a:	4629      	mov	r1, r5
 801072c:	4622      	mov	r2, r4
 801072e:	4630      	mov	r0, r6
 8010730:	f7fe ffb6 	bl	800f6a0 <__swbuf_r>
 8010734:	4605      	mov	r5, r0
 8010736:	e7e3      	b.n	8010700 <_putc_r+0x4c>
 8010738:	0801190c 	.word	0x0801190c
 801073c:	0801192c 	.word	0x0801192c
 8010740:	080118ec 	.word	0x080118ec

08010744 <_sbrk_r>:
 8010744:	b538      	push	{r3, r4, r5, lr}
 8010746:	4d06      	ldr	r5, [pc, #24]	; (8010760 <_sbrk_r+0x1c>)
 8010748:	2300      	movs	r3, #0
 801074a:	4604      	mov	r4, r0
 801074c:	4608      	mov	r0, r1
 801074e:	602b      	str	r3, [r5, #0]
 8010750:	f7f0 fe62 	bl	8001418 <_sbrk>
 8010754:	1c43      	adds	r3, r0, #1
 8010756:	d102      	bne.n	801075e <_sbrk_r+0x1a>
 8010758:	682b      	ldr	r3, [r5, #0]
 801075a:	b103      	cbz	r3, 801075e <_sbrk_r+0x1a>
 801075c:	6023      	str	r3, [r4, #0]
 801075e:	bd38      	pop	{r3, r4, r5, pc}
 8010760:	20001780 	.word	0x20001780

08010764 <__sread>:
 8010764:	b510      	push	{r4, lr}
 8010766:	460c      	mov	r4, r1
 8010768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801076c:	f000 f8f6 	bl	801095c <_read_r>
 8010770:	2800      	cmp	r0, #0
 8010772:	bfab      	itete	ge
 8010774:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010776:	89a3      	ldrhlt	r3, [r4, #12]
 8010778:	181b      	addge	r3, r3, r0
 801077a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801077e:	bfac      	ite	ge
 8010780:	6563      	strge	r3, [r4, #84]	; 0x54
 8010782:	81a3      	strhlt	r3, [r4, #12]
 8010784:	bd10      	pop	{r4, pc}

08010786 <__swrite>:
 8010786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801078a:	461f      	mov	r7, r3
 801078c:	898b      	ldrh	r3, [r1, #12]
 801078e:	05db      	lsls	r3, r3, #23
 8010790:	4605      	mov	r5, r0
 8010792:	460c      	mov	r4, r1
 8010794:	4616      	mov	r6, r2
 8010796:	d505      	bpl.n	80107a4 <__swrite+0x1e>
 8010798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801079c:	2302      	movs	r3, #2
 801079e:	2200      	movs	r2, #0
 80107a0:	f000 f870 	bl	8010884 <_lseek_r>
 80107a4:	89a3      	ldrh	r3, [r4, #12]
 80107a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80107aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80107ae:	81a3      	strh	r3, [r4, #12]
 80107b0:	4632      	mov	r2, r6
 80107b2:	463b      	mov	r3, r7
 80107b4:	4628      	mov	r0, r5
 80107b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80107ba:	f000 b817 	b.w	80107ec <_write_r>

080107be <__sseek>:
 80107be:	b510      	push	{r4, lr}
 80107c0:	460c      	mov	r4, r1
 80107c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107c6:	f000 f85d 	bl	8010884 <_lseek_r>
 80107ca:	1c43      	adds	r3, r0, #1
 80107cc:	89a3      	ldrh	r3, [r4, #12]
 80107ce:	bf15      	itete	ne
 80107d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80107d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80107d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80107da:	81a3      	strheq	r3, [r4, #12]
 80107dc:	bf18      	it	ne
 80107de:	81a3      	strhne	r3, [r4, #12]
 80107e0:	bd10      	pop	{r4, pc}

080107e2 <__sclose>:
 80107e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107e6:	f000 b81b 	b.w	8010820 <_close_r>
	...

080107ec <_write_r>:
 80107ec:	b538      	push	{r3, r4, r5, lr}
 80107ee:	4d07      	ldr	r5, [pc, #28]	; (801080c <_write_r+0x20>)
 80107f0:	4604      	mov	r4, r0
 80107f2:	4608      	mov	r0, r1
 80107f4:	4611      	mov	r1, r2
 80107f6:	2200      	movs	r2, #0
 80107f8:	602a      	str	r2, [r5, #0]
 80107fa:	461a      	mov	r2, r3
 80107fc:	f7f0 fdbb 	bl	8001376 <_write>
 8010800:	1c43      	adds	r3, r0, #1
 8010802:	d102      	bne.n	801080a <_write_r+0x1e>
 8010804:	682b      	ldr	r3, [r5, #0]
 8010806:	b103      	cbz	r3, 801080a <_write_r+0x1e>
 8010808:	6023      	str	r3, [r4, #0]
 801080a:	bd38      	pop	{r3, r4, r5, pc}
 801080c:	20001780 	.word	0x20001780

08010810 <abort>:
 8010810:	b508      	push	{r3, lr}
 8010812:	2006      	movs	r0, #6
 8010814:	f000 f8dc 	bl	80109d0 <raise>
 8010818:	2001      	movs	r0, #1
 801081a:	f7f0 fd85 	bl	8001328 <_exit>
	...

08010820 <_close_r>:
 8010820:	b538      	push	{r3, r4, r5, lr}
 8010822:	4d06      	ldr	r5, [pc, #24]	; (801083c <_close_r+0x1c>)
 8010824:	2300      	movs	r3, #0
 8010826:	4604      	mov	r4, r0
 8010828:	4608      	mov	r0, r1
 801082a:	602b      	str	r3, [r5, #0]
 801082c:	f7f0 fdbf 	bl	80013ae <_close>
 8010830:	1c43      	adds	r3, r0, #1
 8010832:	d102      	bne.n	801083a <_close_r+0x1a>
 8010834:	682b      	ldr	r3, [r5, #0]
 8010836:	b103      	cbz	r3, 801083a <_close_r+0x1a>
 8010838:	6023      	str	r3, [r4, #0]
 801083a:	bd38      	pop	{r3, r4, r5, pc}
 801083c:	20001780 	.word	0x20001780

08010840 <_fstat_r>:
 8010840:	b538      	push	{r3, r4, r5, lr}
 8010842:	4d07      	ldr	r5, [pc, #28]	; (8010860 <_fstat_r+0x20>)
 8010844:	2300      	movs	r3, #0
 8010846:	4604      	mov	r4, r0
 8010848:	4608      	mov	r0, r1
 801084a:	4611      	mov	r1, r2
 801084c:	602b      	str	r3, [r5, #0]
 801084e:	f7f0 fdba 	bl	80013c6 <_fstat>
 8010852:	1c43      	adds	r3, r0, #1
 8010854:	d102      	bne.n	801085c <_fstat_r+0x1c>
 8010856:	682b      	ldr	r3, [r5, #0]
 8010858:	b103      	cbz	r3, 801085c <_fstat_r+0x1c>
 801085a:	6023      	str	r3, [r4, #0]
 801085c:	bd38      	pop	{r3, r4, r5, pc}
 801085e:	bf00      	nop
 8010860:	20001780 	.word	0x20001780

08010864 <_isatty_r>:
 8010864:	b538      	push	{r3, r4, r5, lr}
 8010866:	4d06      	ldr	r5, [pc, #24]	; (8010880 <_isatty_r+0x1c>)
 8010868:	2300      	movs	r3, #0
 801086a:	4604      	mov	r4, r0
 801086c:	4608      	mov	r0, r1
 801086e:	602b      	str	r3, [r5, #0]
 8010870:	f7f0 fdb9 	bl	80013e6 <_isatty>
 8010874:	1c43      	adds	r3, r0, #1
 8010876:	d102      	bne.n	801087e <_isatty_r+0x1a>
 8010878:	682b      	ldr	r3, [r5, #0]
 801087a:	b103      	cbz	r3, 801087e <_isatty_r+0x1a>
 801087c:	6023      	str	r3, [r4, #0]
 801087e:	bd38      	pop	{r3, r4, r5, pc}
 8010880:	20001780 	.word	0x20001780

08010884 <_lseek_r>:
 8010884:	b538      	push	{r3, r4, r5, lr}
 8010886:	4d07      	ldr	r5, [pc, #28]	; (80108a4 <_lseek_r+0x20>)
 8010888:	4604      	mov	r4, r0
 801088a:	4608      	mov	r0, r1
 801088c:	4611      	mov	r1, r2
 801088e:	2200      	movs	r2, #0
 8010890:	602a      	str	r2, [r5, #0]
 8010892:	461a      	mov	r2, r3
 8010894:	f7f0 fdb2 	bl	80013fc <_lseek>
 8010898:	1c43      	adds	r3, r0, #1
 801089a:	d102      	bne.n	80108a2 <_lseek_r+0x1e>
 801089c:	682b      	ldr	r3, [r5, #0]
 801089e:	b103      	cbz	r3, 80108a2 <_lseek_r+0x1e>
 80108a0:	6023      	str	r3, [r4, #0]
 80108a2:	bd38      	pop	{r3, r4, r5, pc}
 80108a4:	20001780 	.word	0x20001780

080108a8 <memcpy>:
 80108a8:	440a      	add	r2, r1
 80108aa:	4291      	cmp	r1, r2
 80108ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80108b0:	d100      	bne.n	80108b4 <memcpy+0xc>
 80108b2:	4770      	bx	lr
 80108b4:	b510      	push	{r4, lr}
 80108b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80108ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80108be:	4291      	cmp	r1, r2
 80108c0:	d1f9      	bne.n	80108b6 <memcpy+0xe>
 80108c2:	bd10      	pop	{r4, pc}

080108c4 <memmove>:
 80108c4:	4288      	cmp	r0, r1
 80108c6:	b510      	push	{r4, lr}
 80108c8:	eb01 0402 	add.w	r4, r1, r2
 80108cc:	d902      	bls.n	80108d4 <memmove+0x10>
 80108ce:	4284      	cmp	r4, r0
 80108d0:	4623      	mov	r3, r4
 80108d2:	d807      	bhi.n	80108e4 <memmove+0x20>
 80108d4:	1e43      	subs	r3, r0, #1
 80108d6:	42a1      	cmp	r1, r4
 80108d8:	d008      	beq.n	80108ec <memmove+0x28>
 80108da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80108de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80108e2:	e7f8      	b.n	80108d6 <memmove+0x12>
 80108e4:	4402      	add	r2, r0
 80108e6:	4601      	mov	r1, r0
 80108e8:	428a      	cmp	r2, r1
 80108ea:	d100      	bne.n	80108ee <memmove+0x2a>
 80108ec:	bd10      	pop	{r4, pc}
 80108ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80108f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80108f6:	e7f7      	b.n	80108e8 <memmove+0x24>

080108f8 <__malloc_lock>:
 80108f8:	4801      	ldr	r0, [pc, #4]	; (8010900 <__malloc_lock+0x8>)
 80108fa:	f7ff b979 	b.w	800fbf0 <__retarget_lock_acquire_recursive>
 80108fe:	bf00      	nop
 8010900:	20001778 	.word	0x20001778

08010904 <__malloc_unlock>:
 8010904:	4801      	ldr	r0, [pc, #4]	; (801090c <__malloc_unlock+0x8>)
 8010906:	f7ff b974 	b.w	800fbf2 <__retarget_lock_release_recursive>
 801090a:	bf00      	nop
 801090c:	20001778 	.word	0x20001778

08010910 <_realloc_r>:
 8010910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010912:	4607      	mov	r7, r0
 8010914:	4614      	mov	r4, r2
 8010916:	460e      	mov	r6, r1
 8010918:	b921      	cbnz	r1, 8010924 <_realloc_r+0x14>
 801091a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801091e:	4611      	mov	r1, r2
 8010920:	f7ff ba24 	b.w	800fd6c <_malloc_r>
 8010924:	b922      	cbnz	r2, 8010930 <_realloc_r+0x20>
 8010926:	f7ff f9d1 	bl	800fccc <_free_r>
 801092a:	4625      	mov	r5, r4
 801092c:	4628      	mov	r0, r5
 801092e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010930:	f000 f86a 	bl	8010a08 <_malloc_usable_size_r>
 8010934:	42a0      	cmp	r0, r4
 8010936:	d20f      	bcs.n	8010958 <_realloc_r+0x48>
 8010938:	4621      	mov	r1, r4
 801093a:	4638      	mov	r0, r7
 801093c:	f7ff fa16 	bl	800fd6c <_malloc_r>
 8010940:	4605      	mov	r5, r0
 8010942:	2800      	cmp	r0, #0
 8010944:	d0f2      	beq.n	801092c <_realloc_r+0x1c>
 8010946:	4631      	mov	r1, r6
 8010948:	4622      	mov	r2, r4
 801094a:	f7ff ffad 	bl	80108a8 <memcpy>
 801094e:	4631      	mov	r1, r6
 8010950:	4638      	mov	r0, r7
 8010952:	f7ff f9bb 	bl	800fccc <_free_r>
 8010956:	e7e9      	b.n	801092c <_realloc_r+0x1c>
 8010958:	4635      	mov	r5, r6
 801095a:	e7e7      	b.n	801092c <_realloc_r+0x1c>

0801095c <_read_r>:
 801095c:	b538      	push	{r3, r4, r5, lr}
 801095e:	4d07      	ldr	r5, [pc, #28]	; (801097c <_read_r+0x20>)
 8010960:	4604      	mov	r4, r0
 8010962:	4608      	mov	r0, r1
 8010964:	4611      	mov	r1, r2
 8010966:	2200      	movs	r2, #0
 8010968:	602a      	str	r2, [r5, #0]
 801096a:	461a      	mov	r2, r3
 801096c:	f7f0 fce6 	bl	800133c <_read>
 8010970:	1c43      	adds	r3, r0, #1
 8010972:	d102      	bne.n	801097a <_read_r+0x1e>
 8010974:	682b      	ldr	r3, [r5, #0]
 8010976:	b103      	cbz	r3, 801097a <_read_r+0x1e>
 8010978:	6023      	str	r3, [r4, #0]
 801097a:	bd38      	pop	{r3, r4, r5, pc}
 801097c:	20001780 	.word	0x20001780

08010980 <_raise_r>:
 8010980:	291f      	cmp	r1, #31
 8010982:	b538      	push	{r3, r4, r5, lr}
 8010984:	4604      	mov	r4, r0
 8010986:	460d      	mov	r5, r1
 8010988:	d904      	bls.n	8010994 <_raise_r+0x14>
 801098a:	2316      	movs	r3, #22
 801098c:	6003      	str	r3, [r0, #0]
 801098e:	f04f 30ff 	mov.w	r0, #4294967295
 8010992:	bd38      	pop	{r3, r4, r5, pc}
 8010994:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010996:	b112      	cbz	r2, 801099e <_raise_r+0x1e>
 8010998:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801099c:	b94b      	cbnz	r3, 80109b2 <_raise_r+0x32>
 801099e:	4620      	mov	r0, r4
 80109a0:	f000 f830 	bl	8010a04 <_getpid_r>
 80109a4:	462a      	mov	r2, r5
 80109a6:	4601      	mov	r1, r0
 80109a8:	4620      	mov	r0, r4
 80109aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80109ae:	f000 b817 	b.w	80109e0 <_kill_r>
 80109b2:	2b01      	cmp	r3, #1
 80109b4:	d00a      	beq.n	80109cc <_raise_r+0x4c>
 80109b6:	1c59      	adds	r1, r3, #1
 80109b8:	d103      	bne.n	80109c2 <_raise_r+0x42>
 80109ba:	2316      	movs	r3, #22
 80109bc:	6003      	str	r3, [r0, #0]
 80109be:	2001      	movs	r0, #1
 80109c0:	e7e7      	b.n	8010992 <_raise_r+0x12>
 80109c2:	2400      	movs	r4, #0
 80109c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80109c8:	4628      	mov	r0, r5
 80109ca:	4798      	blx	r3
 80109cc:	2000      	movs	r0, #0
 80109ce:	e7e0      	b.n	8010992 <_raise_r+0x12>

080109d0 <raise>:
 80109d0:	4b02      	ldr	r3, [pc, #8]	; (80109dc <raise+0xc>)
 80109d2:	4601      	mov	r1, r0
 80109d4:	6818      	ldr	r0, [r3, #0]
 80109d6:	f7ff bfd3 	b.w	8010980 <_raise_r>
 80109da:	bf00      	nop
 80109dc:	20000078 	.word	0x20000078

080109e0 <_kill_r>:
 80109e0:	b538      	push	{r3, r4, r5, lr}
 80109e2:	4d07      	ldr	r5, [pc, #28]	; (8010a00 <_kill_r+0x20>)
 80109e4:	2300      	movs	r3, #0
 80109e6:	4604      	mov	r4, r0
 80109e8:	4608      	mov	r0, r1
 80109ea:	4611      	mov	r1, r2
 80109ec:	602b      	str	r3, [r5, #0]
 80109ee:	f7f0 fc8b 	bl	8001308 <_kill>
 80109f2:	1c43      	adds	r3, r0, #1
 80109f4:	d102      	bne.n	80109fc <_kill_r+0x1c>
 80109f6:	682b      	ldr	r3, [r5, #0]
 80109f8:	b103      	cbz	r3, 80109fc <_kill_r+0x1c>
 80109fa:	6023      	str	r3, [r4, #0]
 80109fc:	bd38      	pop	{r3, r4, r5, pc}
 80109fe:	bf00      	nop
 8010a00:	20001780 	.word	0x20001780

08010a04 <_getpid_r>:
 8010a04:	f7f0 bc78 	b.w	80012f8 <_getpid>

08010a08 <_malloc_usable_size_r>:
 8010a08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010a0c:	1f18      	subs	r0, r3, #4
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	bfbc      	itt	lt
 8010a12:	580b      	ldrlt	r3, [r1, r0]
 8010a14:	18c0      	addlt	r0, r0, r3
 8010a16:	4770      	bx	lr

08010a18 <_init>:
 8010a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a1a:	bf00      	nop
 8010a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010a1e:	bc08      	pop	{r3}
 8010a20:	469e      	mov	lr, r3
 8010a22:	4770      	bx	lr

08010a24 <_fini>:
 8010a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a26:	bf00      	nop
 8010a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010a2a:	bc08      	pop	{r3}
 8010a2c:	469e      	mov	lr, r3
 8010a2e:	4770      	bx	lr
