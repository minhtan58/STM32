
H747_UART_DMA_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c84  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08008f1c  08008f1c  00018f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ff0  08008ff0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008ff0  08008ff0  00018ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ff8  08008ff8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ff8  08008ff8  00018ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ffc  08008ffc  00018ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  08009000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  24000074  08009074  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000264  08009074  00020264  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001969e  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d93  00000000  00000000  00039740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  0003c4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba8  00000000  00000000  0003d158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003f491  00000000  00000000  0003dd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001042a  00000000  00000000  0007d191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00194d7d  00000000  00000000  0008d5bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00222338  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000393c  00000000  00000000  0022238c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000074 	.word	0x24000074
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08008f04 	.word	0x08008f04

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000078 	.word	0x24000078
 80002d4:	08008f04 	.word	0x08008f04

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <__io_putchar>:
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_UART8_Init(void);
static void MX_USART1_UART_Init(void);

int __io_putchar (int ch) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	uint8_t c = ch;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	b2db      	uxtb	r3, r3
 8000710:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart8, &c, 1, HAL_MAX_DELAY);
 8000712:	f107 010f 	add.w	r1, r7, #15
 8000716:	f04f 33ff 	mov.w	r3, #4294967295
 800071a:	2201      	movs	r2, #1
 800071c:	4803      	ldr	r0, [pc, #12]	; (800072c <__io_putchar+0x28>)
 800071e:	f006 f9b5 	bl	8006a8c <HAL_UART_Transmit>
	return ch;
 8000722:	687b      	ldr	r3, [r7, #4]
}
 8000724:	4618      	mov	r0, r3
 8000726:	3710      	adds	r7, #16
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	240001ac 	.word	0x240001ac

08000730 <main>:

int main(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
	int32_t timeout;

	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8000736:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800073a:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800073c:	bf00      	nop
 800073e:	4b27      	ldr	r3, [pc, #156]	; (80007dc <main+0xac>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000746:	2b00      	cmp	r3, #0
 8000748:	d004      	beq.n	8000754 <main+0x24>
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	1e5a      	subs	r2, r3, #1
 800074e:	607a      	str	r2, [r7, #4]
 8000750:	2b00      	cmp	r3, #0
 8000752:	dcf4      	bgt.n	800073e <main+0xe>
	if ( timeout < 0 )
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2b00      	cmp	r3, #0
 8000758:	da01      	bge.n	800075e <main+0x2e>
	{
	Error_Handler();
 800075a:	f000 f9db 	bl	8000b14 <Error_Handler>
	}
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800075e:	f000 fbf7 	bl	8000f50 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8000762:	f000 f869 	bl	8000838 <SystemClock_Config>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000766:	4b1d      	ldr	r3, [pc, #116]	; (80007dc <main+0xac>)
 8000768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800076c:	4a1b      	ldr	r2, [pc, #108]	; (80007dc <main+0xac>)
 800076e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000772:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000776:	4b19      	ldr	r3, [pc, #100]	; (80007dc <main+0xac>)
 8000778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800077c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000780:	603b      	str	r3, [r7, #0]
 8000782:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000784:	2000      	movs	r0, #0
 8000786:	f003 fd7b 	bl	8004280 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 800078a:	2100      	movs	r1, #0
 800078c:	2000      	movs	r0, #0
 800078e:	f003 fd91 	bl	80042b4 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8000792:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000796:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000798:	bf00      	nop
 800079a:	4b10      	ldr	r3, [pc, #64]	; (80007dc <main+0xac>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d104      	bne.n	80007b0 <main+0x80>
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	1e5a      	subs	r2, r3, #1
 80007aa:	607a      	str	r2, [r7, #4]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	dcf4      	bgt.n	800079a <main+0x6a>
	if ( timeout < 0 )
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	da01      	bge.n	80007ba <main+0x8a>
	{
	Error_Handler();
 80007b6:	f000 f9ad 	bl	8000b14 <Error_Handler>
	}

	MX_GPIO_Init();
 80007ba:	f000 f973 	bl	8000aa4 <MX_GPIO_Init>
	MX_DMA_Init();
 80007be:	f000 f951 	bl	8000a64 <MX_DMA_Init>
	MX_UART8_Init();
 80007c2:	f000 f8b7 	bl	8000934 <MX_UART8_Init>
	MX_USART1_UART_Init();
 80007c6:	f000 f901 	bl	80009cc <MX_USART1_UART_Init>

	//HAL_UART_Receive_IT(&huart1, (uint8_t*)&UART1_RxBuffer, 1);
	HAL_UART_Receive_DMA(&huart1, (uint8_t*)&UART1_RxBuffer, 1);
 80007ca:	2201      	movs	r2, #1
 80007cc:	4904      	ldr	r1, [pc, #16]	; (80007e0 <main+0xb0>)
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <main+0xb4>)
 80007d0:	f006 f9f2 	bl	8006bb8 <HAL_UART_Receive_DMA>

	printf("***H747_UART_DMA***\r\n");
 80007d4:	4804      	ldr	r0, [pc, #16]	; (80007e8 <main+0xb8>)
 80007d6:	f007 ff3d 	bl	8008654 <puts>

	while (1)
 80007da:	e7fe      	b.n	80007da <main+0xaa>
 80007dc:	58024400 	.word	0x58024400
 80007e0:	240000a0 	.word	0x240000a0
 80007e4:	2400011c 	.word	0x2400011c
 80007e8:	08008f1c 	.word	0x08008f1c

080007ec <HAL_UART_RxCpltCallback>:

	}

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart1.Instance){
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <HAL_UART_RxCpltCallback+0x3c>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	d10c      	bne.n	800081a <HAL_UART_RxCpltCallback+0x2e>
		buf[indexd] = UART1_RxBuffer;
 8000800:	4b0a      	ldr	r3, [pc, #40]	; (800082c <HAL_UART_RxCpltCallback+0x40>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	461a      	mov	r2, r3
 8000806:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <HAL_UART_RxCpltCallback+0x44>)
 8000808:	7819      	ldrb	r1, [r3, #0]
 800080a:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <HAL_UART_RxCpltCallback+0x48>)
 800080c:	5499      	strb	r1, [r3, r2]
		indexd++;
 800080e:	4b07      	ldr	r3, [pc, #28]	; (800082c <HAL_UART_RxCpltCallback+0x40>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	3301      	adds	r3, #1
 8000814:	b2da      	uxtb	r2, r3
 8000816:	4b05      	ldr	r3, [pc, #20]	; (800082c <HAL_UART_RxCpltCallback+0x40>)
 8000818:	701a      	strb	r2, [r3, #0]
//	printf("Data===\r\n");
//	if(huart->Instance == huart1.Instance){
//		printf("Data = %d\r\n",UART1_RxBuffer);
//		//HAL_UART_Receive_DMA(&huart1, (uint8_t*)&UART1_RxBuffer, 1);
//	}
}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	2400011c 	.word	0x2400011c
 800082c:	24000090 	.word	0x24000090
 8000830:	240000a0 	.word	0x240000a0
 8000834:	2400023c 	.word	0x2400023c

08000838 <SystemClock_Config>:
////		printf("Data = %d\r\n",UART1_RxBuffer);
////		//HAL_UART_Receive_DMA(&huart1, (uint8_t*)&UART1_RxBuffer, 1);
////	}
//}
void SystemClock_Config(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b09e      	sub	sp, #120	; 0x78
 800083c:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;
	HAL_StatusTypeDef ret = HAL_OK;
 800083e:	2300      	movs	r3, #0
 8000840:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	/*!< Supply configuration update enable */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000844:	2004      	movs	r0, #4
 8000846:	f003 fd49 	bl	80042dc <HAL_PWREx_ConfigSupply>

	/* The voltage scaling allows optimizing the power consumption when the device is
	 clocked below the maximum system frequency, to update the voltage scaling value
	 regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	4b37      	ldr	r3, [pc, #220]	; (800092c <SystemClock_Config+0xf4>)
 8000850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000852:	4a36      	ldr	r2, [pc, #216]	; (800092c <SystemClock_Config+0xf4>)
 8000854:	f023 0301 	bic.w	r3, r3, #1
 8000858:	62d3      	str	r3, [r2, #44]	; 0x2c
 800085a:	4b34      	ldr	r3, [pc, #208]	; (800092c <SystemClock_Config+0xf4>)
 800085c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	4b32      	ldr	r3, [pc, #200]	; (8000930 <SystemClock_Config+0xf8>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	4a31      	ldr	r2, [pc, #196]	; (8000930 <SystemClock_Config+0xf8>)
 800086a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800086e:	6193      	str	r3, [r2, #24]
 8000870:	4b2f      	ldr	r3, [pc, #188]	; (8000930 <SystemClock_Config+0xf8>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	687b      	ldr	r3, [r7, #4]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800087c:	bf00      	nop
 800087e:	4b2c      	ldr	r3, [pc, #176]	; (8000930 <SystemClock_Config+0xf8>)
 8000880:	699b      	ldr	r3, [r3, #24]
 8000882:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000886:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800088a:	d1f8      	bne.n	800087e <SystemClock_Config+0x46>

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800088c:	2301      	movs	r3, #1
 800088e:	60bb      	str	r3, [r7, #8]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000890:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000894:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000896:	2300      	movs	r3, #0
 8000898:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800089e:	2302      	movs	r3, #2
 80008a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008a2:	2302      	movs	r3, #2
 80008a4:	633b      	str	r3, [r7, #48]	; 0x30

	RCC_OscInitStruct.PLL.PLLM = 5;
 80008a6:	2305      	movs	r3, #5
 80008a8:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLN = 160;
 80008aa:	23a0      	movs	r3, #160	; 0xa0
 80008ac:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLP = 2;
 80008b2:	2302      	movs	r3, #2
 80008b4:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80008b6:	2302      	movs	r3, #2
 80008b8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80008ba:	2304      	movs	r3, #4
 80008bc:	643b      	str	r3, [r7, #64]	; 0x40

	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008be:	2300      	movs	r3, #0
 80008c0:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80008c2:	2308      	movs	r3, #8
 80008c4:	64bb      	str	r3, [r7, #72]	; 0x48
	ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80008c6:	f107 0308 	add.w	r3, r7, #8
 80008ca:	4618      	mov	r0, r3
 80008cc:	f003 fd60 	bl	8004390 <HAL_RCC_OscConfig>
 80008d0:	4603      	mov	r3, r0
 80008d2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if(ret != HAL_OK)
 80008d6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <SystemClock_Config+0xaa>
	{
	Error_Handler();
 80008de:	f000 f919 	bl	8000b14 <Error_Handler>
	}

	/* Select PLL as system clock source and configure  bus clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 80008e2:	233f      	movs	r3, #63	; 0x3f
 80008e4:	657b      	str	r3, [r7, #84]	; 0x54
								 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e6:	2303      	movs	r3, #3
 80008e8:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008ea:	2300      	movs	r3, #0
 80008ec:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008ee:	2308      	movs	r3, #8
 80008f0:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008f2:	2340      	movs	r3, #64	; 0x40
 80008f4:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008f6:	2340      	movs	r3, #64	; 0x40
 80008f8:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008fe:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000900:	2340      	movs	r3, #64	; 0x40
 8000902:	673b      	str	r3, [r7, #112]	; 0x70
	ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8000904:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000908:	2104      	movs	r1, #4
 800090a:	4618      	mov	r0, r3
 800090c:	f004 f950 	bl	8004bb0 <HAL_RCC_ClockConfig>
 8000910:	4603      	mov	r3, r0
 8000912:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if(ret != HAL_OK)
 8000916:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <SystemClock_Config+0xea>
	{
	Error_Handler();
 800091e:	f000 f8f9 	bl	8000b14 <Error_Handler>

	__HAL_RCC_SYSCFG_CLK_ENABLE() ;

	HAL_EnableCompensationCell();
	*/
}
 8000922:	bf00      	nop
 8000924:	3778      	adds	r7, #120	; 0x78
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	58000400 	.word	0x58000400
 8000930:	58024800 	.word	0x58024800

08000934 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000938:	4b22      	ldr	r3, [pc, #136]	; (80009c4 <MX_UART8_Init+0x90>)
 800093a:	4a23      	ldr	r2, [pc, #140]	; (80009c8 <MX_UART8_Init+0x94>)
 800093c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 800093e:	4b21      	ldr	r3, [pc, #132]	; (80009c4 <MX_UART8_Init+0x90>)
 8000940:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000944:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000946:	4b1f      	ldr	r3, [pc, #124]	; (80009c4 <MX_UART8_Init+0x90>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 800094c:	4b1d      	ldr	r3, [pc, #116]	; (80009c4 <MX_UART8_Init+0x90>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000952:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <MX_UART8_Init+0x90>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000958:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <MX_UART8_Init+0x90>)
 800095a:	220c      	movs	r2, #12
 800095c:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095e:	4b19      	ldr	r3, [pc, #100]	; (80009c4 <MX_UART8_Init+0x90>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000964:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <MX_UART8_Init+0x90>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800096a:	4b16      	ldr	r3, [pc, #88]	; (80009c4 <MX_UART8_Init+0x90>)
 800096c:	2200      	movs	r2, #0
 800096e:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000970:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <MX_UART8_Init+0x90>)
 8000972:	2200      	movs	r2, #0
 8000974:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000976:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <MX_UART8_Init+0x90>)
 8000978:	2200      	movs	r2, #0
 800097a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800097c:	4811      	ldr	r0, [pc, #68]	; (80009c4 <MX_UART8_Init+0x90>)
 800097e:	f006 f835 	bl	80069ec <HAL_UART_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8000988:	f000 f8c4 	bl	8000b14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800098c:	2100      	movs	r1, #0
 800098e:	480d      	ldr	r0, [pc, #52]	; (80009c4 <MX_UART8_Init+0x90>)
 8000990:	f007 fcf6 	bl	8008380 <HAL_UARTEx_SetTxFifoThreshold>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 800099a:	f000 f8bb 	bl	8000b14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800099e:	2100      	movs	r1, #0
 80009a0:	4808      	ldr	r0, [pc, #32]	; (80009c4 <MX_UART8_Init+0x90>)
 80009a2:	f007 fd2b 	bl	80083fc <HAL_UARTEx_SetRxFifoThreshold>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 80009ac:	f000 f8b2 	bl	8000b14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 80009b0:	4804      	ldr	r0, [pc, #16]	; (80009c4 <MX_UART8_Init+0x90>)
 80009b2:	f007 fcac 	bl	800830e <HAL_UARTEx_DisableFifoMode>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 80009bc:	f000 f8aa 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	240001ac 	.word	0x240001ac
 80009c8:	40007c00 	.word	0x40007c00

080009cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009d0:	4b22      	ldr	r3, [pc, #136]	; (8000a5c <MX_USART1_UART_Init+0x90>)
 80009d2:	4a23      	ldr	r2, [pc, #140]	; (8000a60 <MX_USART1_UART_Init+0x94>)
 80009d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009d6:	4b21      	ldr	r3, [pc, #132]	; (8000a5c <MX_USART1_UART_Init+0x90>)
 80009d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009de:	4b1f      	ldr	r3, [pc, #124]	; (8000a5c <MX_USART1_UART_Init+0x90>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009e4:	4b1d      	ldr	r3, [pc, #116]	; (8000a5c <MX_USART1_UART_Init+0x90>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009ea:	4b1c      	ldr	r3, [pc, #112]	; (8000a5c <MX_USART1_UART_Init+0x90>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009f0:	4b1a      	ldr	r3, [pc, #104]	; (8000a5c <MX_USART1_UART_Init+0x90>)
 80009f2:	220c      	movs	r2, #12
 80009f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f6:	4b19      	ldr	r3, [pc, #100]	; (8000a5c <MX_USART1_UART_Init+0x90>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009fc:	4b17      	ldr	r3, [pc, #92]	; (8000a5c <MX_USART1_UART_Init+0x90>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a02:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <MX_USART1_UART_Init+0x90>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a08:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <MX_USART1_UART_Init+0x90>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a0e:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <MX_USART1_UART_Init+0x90>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a14:	4811      	ldr	r0, [pc, #68]	; (8000a5c <MX_USART1_UART_Init+0x90>)
 8000a16:	f005 ffe9 	bl	80069ec <HAL_UART_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a20:	f000 f878 	bl	8000b14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a24:	2100      	movs	r1, #0
 8000a26:	480d      	ldr	r0, [pc, #52]	; (8000a5c <MX_USART1_UART_Init+0x90>)
 8000a28:	f007 fcaa 	bl	8008380 <HAL_UARTEx_SetTxFifoThreshold>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a32:	f000 f86f 	bl	8000b14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a36:	2100      	movs	r1, #0
 8000a38:	4808      	ldr	r0, [pc, #32]	; (8000a5c <MX_USART1_UART_Init+0x90>)
 8000a3a:	f007 fcdf 	bl	80083fc <HAL_UARTEx_SetRxFifoThreshold>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a44:	f000 f866 	bl	8000b14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a48:	4804      	ldr	r0, [pc, #16]	; (8000a5c <MX_USART1_UART_Init+0x90>)
 8000a4a:	f007 fc60 	bl	800830e <HAL_UARTEx_DisableFifoMode>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a54:	f000 f85e 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	2400011c 	.word	0x2400011c
 8000a60:	40011000 	.word	0x40011000

08000a64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a6a:	4b0d      	ldr	r3, [pc, #52]	; (8000aa0 <MX_DMA_Init+0x3c>)
 8000a6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a70:	4a0b      	ldr	r2, [pc, #44]	; (8000aa0 <MX_DMA_Init+0x3c>)
 8000a72:	f043 0301 	orr.w	r3, r3, #1
 8000a76:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <MX_DMA_Init+0x3c>)
 8000a7c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a80:	f003 0301 	and.w	r3, r3, #1
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	200b      	movs	r0, #11
 8000a8e:	f000 fbd8 	bl	8001242 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a92:	200b      	movs	r0, #11
 8000a94:	f000 fbef 	bl	8001276 <HAL_NVIC_EnableIRQ>

}
 8000a98:	bf00      	nop
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	58024400 	.word	0x58024400

08000aa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <MX_GPIO_Init+0x6c>)
 8000aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab0:	4a17      	ldr	r2, [pc, #92]	; (8000b10 <MX_GPIO_Init+0x6c>)
 8000ab2:	f043 0301 	orr.w	r3, r3, #1
 8000ab6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aba:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <MX_GPIO_Init+0x6c>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	f003 0301 	and.w	r3, r3, #1
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ac8:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <MX_GPIO_Init+0x6c>)
 8000aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ace:	4a10      	ldr	r2, [pc, #64]	; (8000b10 <MX_GPIO_Init+0x6c>)
 8000ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ad4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ad8:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <MX_GPIO_Init+0x6c>)
 8000ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000ae6:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <MX_GPIO_Init+0x6c>)
 8000ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aec:	4a08      	ldr	r2, [pc, #32]	; (8000b10 <MX_GPIO_Init+0x6c>)
 8000aee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000af2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <MX_GPIO_Init+0x6c>)
 8000af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b00:	607b      	str	r3, [r7, #4]
 8000b02:	687b      	ldr	r3, [r7, #4]

}
 8000b04:	bf00      	nop
 8000b06:	3714      	adds	r7, #20
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	58024400 	.word	0x58024400

08000b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0

}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
	...

08000b24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2a:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <HAL_MspInit+0x30>)
 8000b2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b30:	4a08      	ldr	r2, [pc, #32]	; (8000b54 <HAL_MspInit+0x30>)
 8000b32:	f043 0302 	orr.w	r3, r3, #2
 8000b36:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_MspInit+0x30>)
 8000b3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b40:	f003 0302 	and.w	r3, r3, #2
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	58024400 	.word	0x58024400

08000b58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b0bc      	sub	sp, #240	; 0xf0
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b70:	f107 031c 	add.w	r3, r7, #28
 8000b74:	22c0      	movs	r2, #192	; 0xc0
 8000b76:	2100      	movs	r1, #0
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f007 fcf5 	bl	8008568 <memset>
  if(huart->Instance==UART8)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a64      	ldr	r2, [pc, #400]	; (8000d14 <HAL_UART_MspInit+0x1bc>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d14b      	bne.n	8000c20 <HAL_UART_MspInit+0xc8>
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b92:	f107 031c 	add.w	r3, r7, #28
 8000b96:	4618      	mov	r0, r3
 8000b98:	f004 fb96 	bl	80052c8 <HAL_RCCEx_PeriphCLKConfig>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ba2:	f7ff ffb7 	bl	8000b14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8000ba6:	4b5c      	ldr	r3, [pc, #368]	; (8000d18 <HAL_UART_MspInit+0x1c0>)
 8000ba8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000bac:	4a5a      	ldr	r2, [pc, #360]	; (8000d18 <HAL_UART_MspInit+0x1c0>)
 8000bae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000bb6:	4b58      	ldr	r3, [pc, #352]	; (8000d18 <HAL_UART_MspInit+0x1c0>)
 8000bb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000bbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000bc0:	61bb      	str	r3, [r7, #24]
 8000bc2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000bc4:	4b54      	ldr	r3, [pc, #336]	; (8000d18 <HAL_UART_MspInit+0x1c0>)
 8000bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bca:	4a53      	ldr	r2, [pc, #332]	; (8000d18 <HAL_UART_MspInit+0x1c0>)
 8000bcc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd4:	4b50      	ldr	r3, [pc, #320]	; (8000d18 <HAL_UART_MspInit+0x1c0>)
 8000bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bde:	617b      	str	r3, [r7, #20]
 8000be0:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PJ9     ------> UART8_RX
    PJ8     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8000be2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000be6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8000bfc:	2308      	movs	r3, #8
 8000bfe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000c02:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000c06:	4619      	mov	r1, r3
 8000c08:	4844      	ldr	r0, [pc, #272]	; (8000d1c <HAL_UART_MspInit+0x1c4>)
 8000c0a:	f003 f989 	bl	8003f20 <HAL_GPIO_Init>

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2100      	movs	r1, #0
 8000c12:	2053      	movs	r0, #83	; 0x53
 8000c14:	f000 fb15 	bl	8001242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8000c18:	2053      	movs	r0, #83	; 0x53
 8000c1a:	f000 fb2c 	bl	8001276 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c1e:	e075      	b.n	8000d0c <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART1)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a3e      	ldr	r2, [pc, #248]	; (8000d20 <HAL_UART_MspInit+0x1c8>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d170      	bne.n	8000d0c <HAL_UART_MspInit+0x1b4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c34:	f107 031c 	add.w	r3, r7, #28
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f004 fb45 	bl	80052c8 <HAL_RCCEx_PeriphCLKConfig>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8000c44:	f7ff ff66 	bl	8000b14 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c48:	4b33      	ldr	r3, [pc, #204]	; (8000d18 <HAL_UART_MspInit+0x1c0>)
 8000c4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000c4e:	4a32      	ldr	r2, [pc, #200]	; (8000d18 <HAL_UART_MspInit+0x1c0>)
 8000c50:	f043 0310 	orr.w	r3, r3, #16
 8000c54:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000c58:	4b2f      	ldr	r3, [pc, #188]	; (8000d18 <HAL_UART_MspInit+0x1c0>)
 8000c5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000c5e:	f003 0310 	and.w	r3, r3, #16
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c66:	4b2c      	ldr	r3, [pc, #176]	; (8000d18 <HAL_UART_MspInit+0x1c0>)
 8000c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c6c:	4a2a      	ldr	r2, [pc, #168]	; (8000d18 <HAL_UART_MspInit+0x1c0>)
 8000c6e:	f043 0301 	orr.w	r3, r3, #1
 8000c72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c76:	4b28      	ldr	r3, [pc, #160]	; (8000d18 <HAL_UART_MspInit+0x1c0>)
 8000c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7c:	f003 0301 	and.w	r3, r3, #1
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000c84:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c88:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c9e:	2307      	movs	r3, #7
 8000ca0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ca8:	4619      	mov	r1, r3
 8000caa:	481e      	ldr	r0, [pc, #120]	; (8000d24 <HAL_UART_MspInit+0x1cc>)
 8000cac:	f003 f938 	bl	8003f20 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8000cb0:	4b1d      	ldr	r3, [pc, #116]	; (8000d28 <HAL_UART_MspInit+0x1d0>)
 8000cb2:	4a1e      	ldr	r2, [pc, #120]	; (8000d2c <HAL_UART_MspInit+0x1d4>)
 8000cb4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000cb6:	4b1c      	ldr	r3, [pc, #112]	; (8000d28 <HAL_UART_MspInit+0x1d0>)
 8000cb8:	2229      	movs	r2, #41	; 0x29
 8000cba:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cbc:	4b1a      	ldr	r3, [pc, #104]	; (8000d28 <HAL_UART_MspInit+0x1d0>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cc2:	4b19      	ldr	r3, [pc, #100]	; (8000d28 <HAL_UART_MspInit+0x1d0>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cc8:	4b17      	ldr	r3, [pc, #92]	; (8000d28 <HAL_UART_MspInit+0x1d0>)
 8000cca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cce:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cd0:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <HAL_UART_MspInit+0x1d0>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cd6:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <HAL_UART_MspInit+0x1d0>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <HAL_UART_MspInit+0x1d0>)
 8000cde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ce2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ce4:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <HAL_UART_MspInit+0x1d0>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cea:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <HAL_UART_MspInit+0x1d0>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000cf0:	480d      	ldr	r0, [pc, #52]	; (8000d28 <HAL_UART_MspInit+0x1d0>)
 8000cf2:	f000 fadb 	bl	80012ac <HAL_DMA_Init>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8000cfc:	f7ff ff0a 	bl	8000b14 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4a09      	ldr	r2, [pc, #36]	; (8000d28 <HAL_UART_MspInit+0x1d0>)
 8000d04:	67da      	str	r2, [r3, #124]	; 0x7c
 8000d06:	4a08      	ldr	r2, [pc, #32]	; (8000d28 <HAL_UART_MspInit+0x1d0>)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000d0c:	bf00      	nop
 8000d0e:	37f0      	adds	r7, #240	; 0xf0
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40007c00 	.word	0x40007c00
 8000d18:	58024400 	.word	0x58024400
 8000d1c:	58022400 	.word	0x58022400
 8000d20:	40011000 	.word	0x40011000
 8000d24:	58020000 	.word	0x58020000
 8000d28:	240000a4 	.word	0x240000a4
 8000d2c:	40020010 	.word	0x40020010

08000d30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <NMI_Handler+0x4>

08000d36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d3a:	e7fe      	b.n	8000d3a <HardFault_Handler+0x4>

08000d3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <MemManage_Handler+0x4>

08000d42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d46:	e7fe      	b.n	8000d46 <BusFault_Handler+0x4>

08000d48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <UsageFault_Handler+0x4>

08000d4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d7c:	f000 f95a 	bl	8001034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
	printf("***H747_UART_DMA***\r\n");
 8000d88:	4803      	ldr	r0, [pc, #12]	; (8000d98 <DMA1_Stream0_IRQHandler+0x14>)
 8000d8a:	f007 fc63 	bl	8008654 <puts>
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000d8e:	4803      	ldr	r0, [pc, #12]	; (8000d9c <DMA1_Stream0_IRQHandler+0x18>)
 8000d90:	f001 fdb4 	bl	80028fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	08008f34 	.word	0x08008f34
 8000d9c:	240000a4 	.word	0x240000a4

08000da0 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8000da4:	4802      	ldr	r0, [pc, #8]	; (8000db0 <UART8_IRQHandler+0x10>)
 8000da6:	f005 ff4d 	bl	8006c44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	240001ac 	.word	0x240001ac

08000db4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]
 8000dc4:	e00a      	b.n	8000ddc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000dc6:	f3af 8000 	nop.w
 8000dca:	4601      	mov	r1, r0
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	1c5a      	adds	r2, r3, #1
 8000dd0:	60ba      	str	r2, [r7, #8]
 8000dd2:	b2ca      	uxtb	r2, r1
 8000dd4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	617b      	str	r3, [r7, #20]
 8000ddc:	697a      	ldr	r2, [r7, #20]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	dbf0      	blt.n	8000dc6 <_read+0x12>
	}

return len;
 8000de4:	687b      	ldr	r3, [r7, #4]
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3718      	adds	r7, #24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b086      	sub	sp, #24
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	60f8      	str	r0, [r7, #12]
 8000df6:	60b9      	str	r1, [r7, #8]
 8000df8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
 8000dfe:	e009      	b.n	8000e14 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	1c5a      	adds	r2, r3, #1
 8000e04:	60ba      	str	r2, [r7, #8]
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff fc7b 	bl	8000704 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	3301      	adds	r3, #1
 8000e12:	617b      	str	r3, [r7, #20]
 8000e14:	697a      	ldr	r2, [r7, #20]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	dbf1      	blt.n	8000e00 <_write+0x12>
	}
	return len;
 8000e1c:	687b      	ldr	r3, [r7, #4]
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3718      	adds	r7, #24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <_close>:

int _close(int file)
{
 8000e26:	b480      	push	{r7}
 8000e28:	b083      	sub	sp, #12
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
	return -1;
 8000e2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	b083      	sub	sp, #12
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
 8000e46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e4e:	605a      	str	r2, [r3, #4]
	return 0;
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <_isatty>:

int _isatty(int file)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	b083      	sub	sp, #12
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
	return 1;
 8000e66:	2301      	movs	r3, #1
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
	return 0;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3714      	adds	r7, #20
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
	...

08000e90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e98:	4a14      	ldr	r2, [pc, #80]	; (8000eec <_sbrk+0x5c>)
 8000e9a:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <_sbrk+0x60>)
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea4:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <_sbrk+0x64>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d102      	bne.n	8000eb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <_sbrk+0x64>)
 8000eae:	4a12      	ldr	r2, [pc, #72]	; (8000ef8 <_sbrk+0x68>)
 8000eb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eb2:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <_sbrk+0x64>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4413      	add	r3, r2
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d207      	bcs.n	8000ed0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ec0:	f007 fb28 	bl	8008514 <__errno>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ece:	e009      	b.n	8000ee4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ed0:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <_sbrk+0x64>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed6:	4b07      	ldr	r3, [pc, #28]	; (8000ef4 <_sbrk+0x64>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4413      	add	r3, r2
 8000ede:	4a05      	ldr	r2, [pc, #20]	; (8000ef4 <_sbrk+0x64>)
 8000ee0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	24040000 	.word	0x24040000
 8000ef0:	00000400 	.word	0x00000400
 8000ef4:	24000094 	.word	0x24000094
 8000ef8:	24000268 	.word	0x24000268

08000efc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000efc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f34 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f00:	f7ff fb66 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f04:	480c      	ldr	r0, [pc, #48]	; (8000f38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f06:	490d      	ldr	r1, [pc, #52]	; (8000f3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f08:	4a0d      	ldr	r2, [pc, #52]	; (8000f40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f0c:	e002      	b.n	8000f14 <LoopCopyDataInit>

08000f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f12:	3304      	adds	r3, #4

08000f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f18:	d3f9      	bcc.n	8000f0e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f1a:	4a0a      	ldr	r2, [pc, #40]	; (8000f44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f1c:	4c0a      	ldr	r4, [pc, #40]	; (8000f48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f20:	e001      	b.n	8000f26 <LoopFillZerobss>

08000f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f24:	3204      	adds	r2, #4

08000f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f28:	d3fb      	bcc.n	8000f22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f2a:	f007 faf9 	bl	8008520 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f2e:	f7ff fbff 	bl	8000730 <main>
  bx  lr
 8000f32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f34:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8000f38:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f3c:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8000f40:	08009000 	.word	0x08009000
  ldr r2, =_sbss
 8000f44:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8000f48:	24000264 	.word	0x24000264

08000f4c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f4c:	e7fe      	b.n	8000f4c <ADC3_IRQHandler>
	...

08000f50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f56:	2003      	movs	r0, #3
 8000f58:	f000 f968 	bl	800122c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f5c:	f003 ffde 	bl	8004f1c <HAL_RCC_GetSysClockFreq>
 8000f60:	4602      	mov	r2, r0
 8000f62:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <HAL_Init+0x68>)
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	0a1b      	lsrs	r3, r3, #8
 8000f68:	f003 030f 	and.w	r3, r3, #15
 8000f6c:	4913      	ldr	r1, [pc, #76]	; (8000fbc <HAL_Init+0x6c>)
 8000f6e:	5ccb      	ldrb	r3, [r1, r3]
 8000f70:	f003 031f 	and.w	r3, r3, #31
 8000f74:	fa22 f303 	lsr.w	r3, r2, r3
 8000f78:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f7a:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <HAL_Init+0x68>)
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	f003 030f 	and.w	r3, r3, #15
 8000f82:	4a0e      	ldr	r2, [pc, #56]	; (8000fbc <HAL_Init+0x6c>)
 8000f84:	5cd3      	ldrb	r3, [r2, r3]
 8000f86:	f003 031f 	and.w	r3, r3, #31
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f90:	4a0b      	ldr	r2, [pc, #44]	; (8000fc0 <HAL_Init+0x70>)
 8000f92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f94:	4a0b      	ldr	r2, [pc, #44]	; (8000fc4 <HAL_Init+0x74>)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	f000 f814 	bl	8000fc8 <HAL_InitTick>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e002      	b.n	8000fb0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000faa:	f7ff fdbb 	bl	8000b24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fae:	2300      	movs	r3, #0
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	58024400 	.word	0x58024400
 8000fbc:	08008f4c 	.word	0x08008f4c
 8000fc0:	24000004 	.word	0x24000004
 8000fc4:	24000000 	.word	0x24000000

08000fc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000fd0:	4b15      	ldr	r3, [pc, #84]	; (8001028 <HAL_InitTick+0x60>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d101      	bne.n	8000fdc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e021      	b.n	8001020 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000fdc:	4b13      	ldr	r3, [pc, #76]	; (800102c <HAL_InitTick+0x64>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b11      	ldr	r3, [pc, #68]	; (8001028 <HAL_InitTick+0x60>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f94d 	bl	8001292 <HAL_SYSTICK_Config>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e00e      	b.n	8001020 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b0f      	cmp	r3, #15
 8001006:	d80a      	bhi.n	800101e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001008:	2200      	movs	r2, #0
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	f04f 30ff 	mov.w	r0, #4294967295
 8001010:	f000 f917 	bl	8001242 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001014:	4a06      	ldr	r2, [pc, #24]	; (8001030 <HAL_InitTick+0x68>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800101a:	2300      	movs	r3, #0
 800101c:	e000      	b.n	8001020 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
}
 8001020:	4618      	mov	r0, r3
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	2400000c 	.word	0x2400000c
 800102c:	24000000 	.word	0x24000000
 8001030:	24000008 	.word	0x24000008

08001034 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_IncTick+0x20>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_IncTick+0x24>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4413      	add	r3, r2
 8001044:	4a04      	ldr	r2, [pc, #16]	; (8001058 <HAL_IncTick+0x24>)
 8001046:	6013      	str	r3, [r2, #0]
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	2400000c 	.word	0x2400000c
 8001058:	24000250 	.word	0x24000250

0800105c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  return uwTick;
 8001060:	4b03      	ldr	r3, [pc, #12]	; (8001070 <HAL_GetTick+0x14>)
 8001062:	681b      	ldr	r3, [r3, #0]
}
 8001064:	4618      	mov	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	24000250 	.word	0x24000250

08001074 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001078:	4b03      	ldr	r3, [pc, #12]	; (8001088 <HAL_GetREVID+0x14>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	0c1b      	lsrs	r3, r3, #16
}
 800107e:	4618      	mov	r0, r3
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	5c001000 	.word	0x5c001000

0800108c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800109c:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <__NVIC_SetPriorityGrouping+0x40>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010a2:	68ba      	ldr	r2, [r7, #8]
 80010a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010a8:	4013      	ands	r3, r2
 80010aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <__NVIC_SetPriorityGrouping+0x44>)
 80010b6:	4313      	orrs	r3, r2
 80010b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ba:	4a04      	ldr	r2, [pc, #16]	; (80010cc <__NVIC_SetPriorityGrouping+0x40>)
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	60d3      	str	r3, [r2, #12]
}
 80010c0:	bf00      	nop
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000ed00 	.word	0xe000ed00
 80010d0:	05fa0000 	.word	0x05fa0000

080010d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d8:	4b04      	ldr	r3, [pc, #16]	; (80010ec <__NVIC_GetPriorityGrouping+0x18>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	0a1b      	lsrs	r3, r3, #8
 80010de:	f003 0307 	and.w	r3, r3, #7
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	db0b      	blt.n	800111a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001102:	88fb      	ldrh	r3, [r7, #6]
 8001104:	f003 021f 	and.w	r2, r3, #31
 8001108:	4907      	ldr	r1, [pc, #28]	; (8001128 <__NVIC_EnableIRQ+0x38>)
 800110a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800110e:	095b      	lsrs	r3, r3, #5
 8001110:	2001      	movs	r0, #1
 8001112:	fa00 f202 	lsl.w	r2, r0, r2
 8001116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000e100 	.word	0xe000e100

0800112c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001138:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800113c:	2b00      	cmp	r3, #0
 800113e:	db0a      	blt.n	8001156 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	b2da      	uxtb	r2, r3
 8001144:	490c      	ldr	r1, [pc, #48]	; (8001178 <__NVIC_SetPriority+0x4c>)
 8001146:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800114a:	0112      	lsls	r2, r2, #4
 800114c:	b2d2      	uxtb	r2, r2
 800114e:	440b      	add	r3, r1
 8001150:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001154:	e00a      	b.n	800116c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	b2da      	uxtb	r2, r3
 800115a:	4908      	ldr	r1, [pc, #32]	; (800117c <__NVIC_SetPriority+0x50>)
 800115c:	88fb      	ldrh	r3, [r7, #6]
 800115e:	f003 030f 	and.w	r3, r3, #15
 8001162:	3b04      	subs	r3, #4
 8001164:	0112      	lsls	r2, r2, #4
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	440b      	add	r3, r1
 800116a:	761a      	strb	r2, [r3, #24]
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000e100 	.word	0xe000e100
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001180:	b480      	push	{r7}
 8001182:	b089      	sub	sp, #36	; 0x24
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	f1c3 0307 	rsb	r3, r3, #7
 800119a:	2b04      	cmp	r3, #4
 800119c:	bf28      	it	cs
 800119e:	2304      	movcs	r3, #4
 80011a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	3304      	adds	r3, #4
 80011a6:	2b06      	cmp	r3, #6
 80011a8:	d902      	bls.n	80011b0 <NVIC_EncodePriority+0x30>
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3b03      	subs	r3, #3
 80011ae:	e000      	b.n	80011b2 <NVIC_EncodePriority+0x32>
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	f04f 32ff 	mov.w	r2, #4294967295
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43da      	mvns	r2, r3
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	401a      	ands	r2, r3
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c8:	f04f 31ff 	mov.w	r1, #4294967295
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	fa01 f303 	lsl.w	r3, r1, r3
 80011d2:	43d9      	mvns	r1, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d8:	4313      	orrs	r3, r2
         );
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3724      	adds	r7, #36	; 0x24
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
	...

080011e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011f8:	d301      	bcc.n	80011fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011fa:	2301      	movs	r3, #1
 80011fc:	e00f      	b.n	800121e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011fe:	4a0a      	ldr	r2, [pc, #40]	; (8001228 <SysTick_Config+0x40>)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3b01      	subs	r3, #1
 8001204:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001206:	210f      	movs	r1, #15
 8001208:	f04f 30ff 	mov.w	r0, #4294967295
 800120c:	f7ff ff8e 	bl	800112c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001210:	4b05      	ldr	r3, [pc, #20]	; (8001228 <SysTick_Config+0x40>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001216:	4b04      	ldr	r3, [pc, #16]	; (8001228 <SysTick_Config+0x40>)
 8001218:	2207      	movs	r2, #7
 800121a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	e000e010 	.word	0xe000e010

0800122c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff ff29 	bl	800108c <__NVIC_SetPriorityGrouping>
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b086      	sub	sp, #24
 8001246:	af00      	add	r7, sp, #0
 8001248:	4603      	mov	r3, r0
 800124a:	60b9      	str	r1, [r7, #8]
 800124c:	607a      	str	r2, [r7, #4]
 800124e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001250:	f7ff ff40 	bl	80010d4 <__NVIC_GetPriorityGrouping>
 8001254:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	68b9      	ldr	r1, [r7, #8]
 800125a:	6978      	ldr	r0, [r7, #20]
 800125c:	f7ff ff90 	bl	8001180 <NVIC_EncodePriority>
 8001260:	4602      	mov	r2, r0
 8001262:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001266:	4611      	mov	r1, r2
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ff5f 	bl	800112c <__NVIC_SetPriority>
}
 800126e:	bf00      	nop
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	4603      	mov	r3, r0
 800127e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001280:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff33 	bl	80010f0 <__NVIC_EnableIRQ>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff ffa4 	bl	80011e8 <SysTick_Config>
 80012a0:	4603      	mov	r3, r0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80012b4:	f7ff fed2 	bl	800105c <HAL_GetTick>
 80012b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d101      	bne.n	80012c4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e316      	b.n	80018f2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a66      	ldr	r2, [pc, #408]	; (8001464 <HAL_DMA_Init+0x1b8>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d04a      	beq.n	8001364 <HAL_DMA_Init+0xb8>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a65      	ldr	r2, [pc, #404]	; (8001468 <HAL_DMA_Init+0x1bc>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d045      	beq.n	8001364 <HAL_DMA_Init+0xb8>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a63      	ldr	r2, [pc, #396]	; (800146c <HAL_DMA_Init+0x1c0>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d040      	beq.n	8001364 <HAL_DMA_Init+0xb8>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a62      	ldr	r2, [pc, #392]	; (8001470 <HAL_DMA_Init+0x1c4>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d03b      	beq.n	8001364 <HAL_DMA_Init+0xb8>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a60      	ldr	r2, [pc, #384]	; (8001474 <HAL_DMA_Init+0x1c8>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d036      	beq.n	8001364 <HAL_DMA_Init+0xb8>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a5f      	ldr	r2, [pc, #380]	; (8001478 <HAL_DMA_Init+0x1cc>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d031      	beq.n	8001364 <HAL_DMA_Init+0xb8>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a5d      	ldr	r2, [pc, #372]	; (800147c <HAL_DMA_Init+0x1d0>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d02c      	beq.n	8001364 <HAL_DMA_Init+0xb8>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a5c      	ldr	r2, [pc, #368]	; (8001480 <HAL_DMA_Init+0x1d4>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d027      	beq.n	8001364 <HAL_DMA_Init+0xb8>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a5a      	ldr	r2, [pc, #360]	; (8001484 <HAL_DMA_Init+0x1d8>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d022      	beq.n	8001364 <HAL_DMA_Init+0xb8>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a59      	ldr	r2, [pc, #356]	; (8001488 <HAL_DMA_Init+0x1dc>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d01d      	beq.n	8001364 <HAL_DMA_Init+0xb8>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a57      	ldr	r2, [pc, #348]	; (800148c <HAL_DMA_Init+0x1e0>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d018      	beq.n	8001364 <HAL_DMA_Init+0xb8>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a56      	ldr	r2, [pc, #344]	; (8001490 <HAL_DMA_Init+0x1e4>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d013      	beq.n	8001364 <HAL_DMA_Init+0xb8>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a54      	ldr	r2, [pc, #336]	; (8001494 <HAL_DMA_Init+0x1e8>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d00e      	beq.n	8001364 <HAL_DMA_Init+0xb8>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a53      	ldr	r2, [pc, #332]	; (8001498 <HAL_DMA_Init+0x1ec>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d009      	beq.n	8001364 <HAL_DMA_Init+0xb8>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a51      	ldr	r2, [pc, #324]	; (800149c <HAL_DMA_Init+0x1f0>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d004      	beq.n	8001364 <HAL_DMA_Init+0xb8>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a50      	ldr	r2, [pc, #320]	; (80014a0 <HAL_DMA_Init+0x1f4>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d101      	bne.n	8001368 <HAL_DMA_Init+0xbc>
 8001364:	2301      	movs	r3, #1
 8001366:	e000      	b.n	800136a <HAL_DMA_Init+0xbe>
 8001368:	2300      	movs	r3, #0
 800136a:	2b00      	cmp	r3, #0
 800136c:	f000 813b 	beq.w	80015e6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2202      	movs	r2, #2
 800137c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a37      	ldr	r2, [pc, #220]	; (8001464 <HAL_DMA_Init+0x1b8>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d04a      	beq.n	8001420 <HAL_DMA_Init+0x174>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a36      	ldr	r2, [pc, #216]	; (8001468 <HAL_DMA_Init+0x1bc>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d045      	beq.n	8001420 <HAL_DMA_Init+0x174>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a34      	ldr	r2, [pc, #208]	; (800146c <HAL_DMA_Init+0x1c0>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d040      	beq.n	8001420 <HAL_DMA_Init+0x174>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a33      	ldr	r2, [pc, #204]	; (8001470 <HAL_DMA_Init+0x1c4>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d03b      	beq.n	8001420 <HAL_DMA_Init+0x174>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a31      	ldr	r2, [pc, #196]	; (8001474 <HAL_DMA_Init+0x1c8>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d036      	beq.n	8001420 <HAL_DMA_Init+0x174>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a30      	ldr	r2, [pc, #192]	; (8001478 <HAL_DMA_Init+0x1cc>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d031      	beq.n	8001420 <HAL_DMA_Init+0x174>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a2e      	ldr	r2, [pc, #184]	; (800147c <HAL_DMA_Init+0x1d0>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d02c      	beq.n	8001420 <HAL_DMA_Init+0x174>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a2d      	ldr	r2, [pc, #180]	; (8001480 <HAL_DMA_Init+0x1d4>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d027      	beq.n	8001420 <HAL_DMA_Init+0x174>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a2b      	ldr	r2, [pc, #172]	; (8001484 <HAL_DMA_Init+0x1d8>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d022      	beq.n	8001420 <HAL_DMA_Init+0x174>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a2a      	ldr	r2, [pc, #168]	; (8001488 <HAL_DMA_Init+0x1dc>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d01d      	beq.n	8001420 <HAL_DMA_Init+0x174>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a28      	ldr	r2, [pc, #160]	; (800148c <HAL_DMA_Init+0x1e0>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d018      	beq.n	8001420 <HAL_DMA_Init+0x174>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a27      	ldr	r2, [pc, #156]	; (8001490 <HAL_DMA_Init+0x1e4>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d013      	beq.n	8001420 <HAL_DMA_Init+0x174>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a25      	ldr	r2, [pc, #148]	; (8001494 <HAL_DMA_Init+0x1e8>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d00e      	beq.n	8001420 <HAL_DMA_Init+0x174>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a24      	ldr	r2, [pc, #144]	; (8001498 <HAL_DMA_Init+0x1ec>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d009      	beq.n	8001420 <HAL_DMA_Init+0x174>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a22      	ldr	r2, [pc, #136]	; (800149c <HAL_DMA_Init+0x1f0>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d004      	beq.n	8001420 <HAL_DMA_Init+0x174>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a21      	ldr	r2, [pc, #132]	; (80014a0 <HAL_DMA_Init+0x1f4>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d108      	bne.n	8001432 <HAL_DMA_Init+0x186>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f022 0201 	bic.w	r2, r2, #1
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	e007      	b.n	8001442 <HAL_DMA_Init+0x196>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f022 0201 	bic.w	r2, r2, #1
 8001440:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001442:	e02f      	b.n	80014a4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001444:	f7ff fe0a 	bl	800105c <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b05      	cmp	r3, #5
 8001450:	d928      	bls.n	80014a4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2220      	movs	r2, #32
 8001456:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2203      	movs	r2, #3
 800145c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e246      	b.n	80018f2 <HAL_DMA_Init+0x646>
 8001464:	40020010 	.word	0x40020010
 8001468:	40020028 	.word	0x40020028
 800146c:	40020040 	.word	0x40020040
 8001470:	40020058 	.word	0x40020058
 8001474:	40020070 	.word	0x40020070
 8001478:	40020088 	.word	0x40020088
 800147c:	400200a0 	.word	0x400200a0
 8001480:	400200b8 	.word	0x400200b8
 8001484:	40020410 	.word	0x40020410
 8001488:	40020428 	.word	0x40020428
 800148c:	40020440 	.word	0x40020440
 8001490:	40020458 	.word	0x40020458
 8001494:	40020470 	.word	0x40020470
 8001498:	40020488 	.word	0x40020488
 800149c:	400204a0 	.word	0x400204a0
 80014a0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1c8      	bne.n	8001444 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014ba:	697a      	ldr	r2, [r7, #20]
 80014bc:	4b83      	ldr	r3, [pc, #524]	; (80016cc <HAL_DMA_Init+0x420>)
 80014be:	4013      	ands	r3, r2
 80014c0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80014ca:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	691b      	ldr	r3, [r3, #16]
 80014d0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014d6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014e2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a1b      	ldr	r3, [r3, #32]
 80014e8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80014ea:	697a      	ldr	r2, [r7, #20]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f4:	2b04      	cmp	r3, #4
 80014f6:	d107      	bne.n	8001508 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001500:	4313      	orrs	r3, r2
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	4313      	orrs	r3, r2
 8001506:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001508:	4b71      	ldr	r3, [pc, #452]	; (80016d0 <HAL_DMA_Init+0x424>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	4b71      	ldr	r3, [pc, #452]	; (80016d4 <HAL_DMA_Init+0x428>)
 800150e:	4013      	ands	r3, r2
 8001510:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001514:	d328      	bcc.n	8001568 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b28      	cmp	r3, #40	; 0x28
 800151c:	d903      	bls.n	8001526 <HAL_DMA_Init+0x27a>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	2b2e      	cmp	r3, #46	; 0x2e
 8001524:	d917      	bls.n	8001556 <HAL_DMA_Init+0x2aa>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2b3e      	cmp	r3, #62	; 0x3e
 800152c:	d903      	bls.n	8001536 <HAL_DMA_Init+0x28a>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	2b42      	cmp	r3, #66	; 0x42
 8001534:	d90f      	bls.n	8001556 <HAL_DMA_Init+0x2aa>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2b46      	cmp	r3, #70	; 0x46
 800153c:	d903      	bls.n	8001546 <HAL_DMA_Init+0x29a>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	2b48      	cmp	r3, #72	; 0x48
 8001544:	d907      	bls.n	8001556 <HAL_DMA_Init+0x2aa>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	2b4e      	cmp	r3, #78	; 0x4e
 800154c:	d905      	bls.n	800155a <HAL_DMA_Init+0x2ae>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2b52      	cmp	r3, #82	; 0x52
 8001554:	d801      	bhi.n	800155a <HAL_DMA_Init+0x2ae>
 8001556:	2301      	movs	r3, #1
 8001558:	e000      	b.n	800155c <HAL_DMA_Init+0x2b0>
 800155a:	2300      	movs	r3, #0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d003      	beq.n	8001568 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001566:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	697a      	ldr	r2, [r7, #20]
 800156e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	f023 0307 	bic.w	r3, r3, #7
 800157e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001584:	697a      	ldr	r2, [r7, #20]
 8001586:	4313      	orrs	r3, r2
 8001588:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158e:	2b04      	cmp	r3, #4
 8001590:	d117      	bne.n	80015c2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001596:	697a      	ldr	r2, [r7, #20]
 8001598:	4313      	orrs	r3, r2
 800159a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d00e      	beq.n	80015c2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f002 fb31 	bl	8003c0c <DMA_CheckFifoParam>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d008      	beq.n	80015c2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2240      	movs	r2, #64	; 0x40
 80015b4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2201      	movs	r2, #1
 80015ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e197      	b.n	80018f2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	697a      	ldr	r2, [r7, #20]
 80015c8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f002 fa6c 	bl	8003aa8 <DMA_CalcBaseAndBitshift>
 80015d0:	4603      	mov	r3, r0
 80015d2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d8:	f003 031f 	and.w	r3, r3, #31
 80015dc:	223f      	movs	r2, #63	; 0x3f
 80015de:	409a      	lsls	r2, r3
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	e0cd      	b.n	8001782 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a3b      	ldr	r2, [pc, #236]	; (80016d8 <HAL_DMA_Init+0x42c>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d022      	beq.n	8001636 <HAL_DMA_Init+0x38a>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a39      	ldr	r2, [pc, #228]	; (80016dc <HAL_DMA_Init+0x430>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d01d      	beq.n	8001636 <HAL_DMA_Init+0x38a>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a38      	ldr	r2, [pc, #224]	; (80016e0 <HAL_DMA_Init+0x434>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d018      	beq.n	8001636 <HAL_DMA_Init+0x38a>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a36      	ldr	r2, [pc, #216]	; (80016e4 <HAL_DMA_Init+0x438>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d013      	beq.n	8001636 <HAL_DMA_Init+0x38a>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a35      	ldr	r2, [pc, #212]	; (80016e8 <HAL_DMA_Init+0x43c>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d00e      	beq.n	8001636 <HAL_DMA_Init+0x38a>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a33      	ldr	r2, [pc, #204]	; (80016ec <HAL_DMA_Init+0x440>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d009      	beq.n	8001636 <HAL_DMA_Init+0x38a>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a32      	ldr	r2, [pc, #200]	; (80016f0 <HAL_DMA_Init+0x444>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d004      	beq.n	8001636 <HAL_DMA_Init+0x38a>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a30      	ldr	r2, [pc, #192]	; (80016f4 <HAL_DMA_Init+0x448>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d101      	bne.n	800163a <HAL_DMA_Init+0x38e>
 8001636:	2301      	movs	r3, #1
 8001638:	e000      	b.n	800163c <HAL_DMA_Init+0x390>
 800163a:	2300      	movs	r3, #0
 800163c:	2b00      	cmp	r3, #0
 800163e:	f000 8097 	beq.w	8001770 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a24      	ldr	r2, [pc, #144]	; (80016d8 <HAL_DMA_Init+0x42c>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d021      	beq.n	8001690 <HAL_DMA_Init+0x3e4>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a22      	ldr	r2, [pc, #136]	; (80016dc <HAL_DMA_Init+0x430>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d01c      	beq.n	8001690 <HAL_DMA_Init+0x3e4>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a21      	ldr	r2, [pc, #132]	; (80016e0 <HAL_DMA_Init+0x434>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d017      	beq.n	8001690 <HAL_DMA_Init+0x3e4>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a1f      	ldr	r2, [pc, #124]	; (80016e4 <HAL_DMA_Init+0x438>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d012      	beq.n	8001690 <HAL_DMA_Init+0x3e4>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a1e      	ldr	r2, [pc, #120]	; (80016e8 <HAL_DMA_Init+0x43c>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d00d      	beq.n	8001690 <HAL_DMA_Init+0x3e4>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a1c      	ldr	r2, [pc, #112]	; (80016ec <HAL_DMA_Init+0x440>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d008      	beq.n	8001690 <HAL_DMA_Init+0x3e4>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a1b      	ldr	r2, [pc, #108]	; (80016f0 <HAL_DMA_Init+0x444>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d003      	beq.n	8001690 <HAL_DMA_Init+0x3e4>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a19      	ldr	r2, [pc, #100]	; (80016f4 <HAL_DMA_Init+0x448>)
 800168e:	4293      	cmp	r3, r2
 8001690:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2202      	movs	r2, #2
 800169e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80016aa:	697a      	ldr	r2, [r7, #20]
 80016ac:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <HAL_DMA_Init+0x44c>)
 80016ae:	4013      	ands	r3, r2
 80016b0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	2b40      	cmp	r3, #64	; 0x40
 80016b8:	d020      	beq.n	80016fc <HAL_DMA_Init+0x450>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	2b80      	cmp	r3, #128	; 0x80
 80016c0:	d102      	bne.n	80016c8 <HAL_DMA_Init+0x41c>
 80016c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016c6:	e01a      	b.n	80016fe <HAL_DMA_Init+0x452>
 80016c8:	2300      	movs	r3, #0
 80016ca:	e018      	b.n	80016fe <HAL_DMA_Init+0x452>
 80016cc:	fe10803f 	.word	0xfe10803f
 80016d0:	5c001000 	.word	0x5c001000
 80016d4:	ffff0000 	.word	0xffff0000
 80016d8:	58025408 	.word	0x58025408
 80016dc:	5802541c 	.word	0x5802541c
 80016e0:	58025430 	.word	0x58025430
 80016e4:	58025444 	.word	0x58025444
 80016e8:	58025458 	.word	0x58025458
 80016ec:	5802546c 	.word	0x5802546c
 80016f0:	58025480 	.word	0x58025480
 80016f4:	58025494 	.word	0x58025494
 80016f8:	fffe000f 	.word	0xfffe000f
 80016fc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	68d2      	ldr	r2, [r2, #12]
 8001702:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001704:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800170c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001714:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800171c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001724:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a1b      	ldr	r3, [r3, #32]
 800172a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800172c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800172e:	697a      	ldr	r2, [r7, #20]
 8001730:	4313      	orrs	r3, r2
 8001732:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	697a      	ldr	r2, [r7, #20]
 800173a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	461a      	mov	r2, r3
 8001742:	4b6e      	ldr	r3, [pc, #440]	; (80018fc <HAL_DMA_Init+0x650>)
 8001744:	4413      	add	r3, r2
 8001746:	4a6e      	ldr	r2, [pc, #440]	; (8001900 <HAL_DMA_Init+0x654>)
 8001748:	fba2 2303 	umull	r2, r3, r2, r3
 800174c:	091b      	lsrs	r3, r3, #4
 800174e:	009a      	lsls	r2, r3, #2
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f002 f9a7 	bl	8003aa8 <DMA_CalcBaseAndBitshift>
 800175a:	4603      	mov	r3, r0
 800175c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001762:	f003 031f 	and.w	r3, r3, #31
 8001766:	2201      	movs	r2, #1
 8001768:	409a      	lsls	r2, r3
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	e008      	b.n	8001782 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2240      	movs	r2, #64	; 0x40
 8001774:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2203      	movs	r2, #3
 800177a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e0b7      	b.n	80018f2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a5f      	ldr	r2, [pc, #380]	; (8001904 <HAL_DMA_Init+0x658>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d072      	beq.n	8001872 <HAL_DMA_Init+0x5c6>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a5d      	ldr	r2, [pc, #372]	; (8001908 <HAL_DMA_Init+0x65c>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d06d      	beq.n	8001872 <HAL_DMA_Init+0x5c6>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a5c      	ldr	r2, [pc, #368]	; (800190c <HAL_DMA_Init+0x660>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d068      	beq.n	8001872 <HAL_DMA_Init+0x5c6>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a5a      	ldr	r2, [pc, #360]	; (8001910 <HAL_DMA_Init+0x664>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d063      	beq.n	8001872 <HAL_DMA_Init+0x5c6>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a59      	ldr	r2, [pc, #356]	; (8001914 <HAL_DMA_Init+0x668>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d05e      	beq.n	8001872 <HAL_DMA_Init+0x5c6>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a57      	ldr	r2, [pc, #348]	; (8001918 <HAL_DMA_Init+0x66c>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d059      	beq.n	8001872 <HAL_DMA_Init+0x5c6>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a56      	ldr	r2, [pc, #344]	; (800191c <HAL_DMA_Init+0x670>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d054      	beq.n	8001872 <HAL_DMA_Init+0x5c6>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a54      	ldr	r2, [pc, #336]	; (8001920 <HAL_DMA_Init+0x674>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d04f      	beq.n	8001872 <HAL_DMA_Init+0x5c6>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a53      	ldr	r2, [pc, #332]	; (8001924 <HAL_DMA_Init+0x678>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d04a      	beq.n	8001872 <HAL_DMA_Init+0x5c6>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a51      	ldr	r2, [pc, #324]	; (8001928 <HAL_DMA_Init+0x67c>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d045      	beq.n	8001872 <HAL_DMA_Init+0x5c6>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a50      	ldr	r2, [pc, #320]	; (800192c <HAL_DMA_Init+0x680>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d040      	beq.n	8001872 <HAL_DMA_Init+0x5c6>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a4e      	ldr	r2, [pc, #312]	; (8001930 <HAL_DMA_Init+0x684>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d03b      	beq.n	8001872 <HAL_DMA_Init+0x5c6>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a4d      	ldr	r2, [pc, #308]	; (8001934 <HAL_DMA_Init+0x688>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d036      	beq.n	8001872 <HAL_DMA_Init+0x5c6>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a4b      	ldr	r2, [pc, #300]	; (8001938 <HAL_DMA_Init+0x68c>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d031      	beq.n	8001872 <HAL_DMA_Init+0x5c6>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a4a      	ldr	r2, [pc, #296]	; (800193c <HAL_DMA_Init+0x690>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d02c      	beq.n	8001872 <HAL_DMA_Init+0x5c6>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a48      	ldr	r2, [pc, #288]	; (8001940 <HAL_DMA_Init+0x694>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d027      	beq.n	8001872 <HAL_DMA_Init+0x5c6>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a47      	ldr	r2, [pc, #284]	; (8001944 <HAL_DMA_Init+0x698>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d022      	beq.n	8001872 <HAL_DMA_Init+0x5c6>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a45      	ldr	r2, [pc, #276]	; (8001948 <HAL_DMA_Init+0x69c>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d01d      	beq.n	8001872 <HAL_DMA_Init+0x5c6>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a44      	ldr	r2, [pc, #272]	; (800194c <HAL_DMA_Init+0x6a0>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d018      	beq.n	8001872 <HAL_DMA_Init+0x5c6>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a42      	ldr	r2, [pc, #264]	; (8001950 <HAL_DMA_Init+0x6a4>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d013      	beq.n	8001872 <HAL_DMA_Init+0x5c6>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a41      	ldr	r2, [pc, #260]	; (8001954 <HAL_DMA_Init+0x6a8>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d00e      	beq.n	8001872 <HAL_DMA_Init+0x5c6>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a3f      	ldr	r2, [pc, #252]	; (8001958 <HAL_DMA_Init+0x6ac>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d009      	beq.n	8001872 <HAL_DMA_Init+0x5c6>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a3e      	ldr	r2, [pc, #248]	; (800195c <HAL_DMA_Init+0x6b0>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d004      	beq.n	8001872 <HAL_DMA_Init+0x5c6>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a3c      	ldr	r2, [pc, #240]	; (8001960 <HAL_DMA_Init+0x6b4>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d101      	bne.n	8001876 <HAL_DMA_Init+0x5ca>
 8001872:	2301      	movs	r3, #1
 8001874:	e000      	b.n	8001878 <HAL_DMA_Init+0x5cc>
 8001876:	2300      	movs	r3, #0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d032      	beq.n	80018e2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f002 fa41 	bl	8003d04 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	2b80      	cmp	r3, #128	; 0x80
 8001888:	d102      	bne.n	8001890 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685a      	ldr	r2, [r3, #4]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001898:	b2d2      	uxtb	r2, r2
 800189a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80018a4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d010      	beq.n	80018d0 <HAL_DMA_Init+0x624>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b08      	cmp	r3, #8
 80018b4:	d80c      	bhi.n	80018d0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f002 fabe 	bl	8003e38 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	e008      	b.n	80018e2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2201      	movs	r2, #1
 80018ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3718      	adds	r7, #24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	a7fdabf8 	.word	0xa7fdabf8
 8001900:	cccccccd 	.word	0xcccccccd
 8001904:	40020010 	.word	0x40020010
 8001908:	40020028 	.word	0x40020028
 800190c:	40020040 	.word	0x40020040
 8001910:	40020058 	.word	0x40020058
 8001914:	40020070 	.word	0x40020070
 8001918:	40020088 	.word	0x40020088
 800191c:	400200a0 	.word	0x400200a0
 8001920:	400200b8 	.word	0x400200b8
 8001924:	40020410 	.word	0x40020410
 8001928:	40020428 	.word	0x40020428
 800192c:	40020440 	.word	0x40020440
 8001930:	40020458 	.word	0x40020458
 8001934:	40020470 	.word	0x40020470
 8001938:	40020488 	.word	0x40020488
 800193c:	400204a0 	.word	0x400204a0
 8001940:	400204b8 	.word	0x400204b8
 8001944:	58025408 	.word	0x58025408
 8001948:	5802541c 	.word	0x5802541c
 800194c:	58025430 	.word	0x58025430
 8001950:	58025444 	.word	0x58025444
 8001954:	58025458 	.word	0x58025458
 8001958:	5802546c 	.word	0x5802546c
 800195c:	58025480 	.word	0x58025480
 8001960:	58025494 	.word	0x58025494

08001964 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
 8001970:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001972:	2300      	movs	r3, #0
 8001974:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d101      	bne.n	8001980 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e226      	b.n	8001dce <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001986:	2b01      	cmp	r3, #1
 8001988:	d101      	bne.n	800198e <HAL_DMA_Start_IT+0x2a>
 800198a:	2302      	movs	r3, #2
 800198c:	e21f      	b.n	8001dce <HAL_DMA_Start_IT+0x46a>
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2201      	movs	r2, #1
 8001992:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b01      	cmp	r3, #1
 80019a0:	f040 820a 	bne.w	8001db8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2202      	movs	r2, #2
 80019a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2200      	movs	r2, #0
 80019b0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a68      	ldr	r2, [pc, #416]	; (8001b58 <HAL_DMA_Start_IT+0x1f4>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d04a      	beq.n	8001a52 <HAL_DMA_Start_IT+0xee>
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a66      	ldr	r2, [pc, #408]	; (8001b5c <HAL_DMA_Start_IT+0x1f8>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d045      	beq.n	8001a52 <HAL_DMA_Start_IT+0xee>
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a65      	ldr	r2, [pc, #404]	; (8001b60 <HAL_DMA_Start_IT+0x1fc>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d040      	beq.n	8001a52 <HAL_DMA_Start_IT+0xee>
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a63      	ldr	r2, [pc, #396]	; (8001b64 <HAL_DMA_Start_IT+0x200>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d03b      	beq.n	8001a52 <HAL_DMA_Start_IT+0xee>
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a62      	ldr	r2, [pc, #392]	; (8001b68 <HAL_DMA_Start_IT+0x204>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d036      	beq.n	8001a52 <HAL_DMA_Start_IT+0xee>
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a60      	ldr	r2, [pc, #384]	; (8001b6c <HAL_DMA_Start_IT+0x208>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d031      	beq.n	8001a52 <HAL_DMA_Start_IT+0xee>
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a5f      	ldr	r2, [pc, #380]	; (8001b70 <HAL_DMA_Start_IT+0x20c>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d02c      	beq.n	8001a52 <HAL_DMA_Start_IT+0xee>
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a5d      	ldr	r2, [pc, #372]	; (8001b74 <HAL_DMA_Start_IT+0x210>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d027      	beq.n	8001a52 <HAL_DMA_Start_IT+0xee>
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a5c      	ldr	r2, [pc, #368]	; (8001b78 <HAL_DMA_Start_IT+0x214>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d022      	beq.n	8001a52 <HAL_DMA_Start_IT+0xee>
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a5a      	ldr	r2, [pc, #360]	; (8001b7c <HAL_DMA_Start_IT+0x218>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d01d      	beq.n	8001a52 <HAL_DMA_Start_IT+0xee>
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a59      	ldr	r2, [pc, #356]	; (8001b80 <HAL_DMA_Start_IT+0x21c>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d018      	beq.n	8001a52 <HAL_DMA_Start_IT+0xee>
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a57      	ldr	r2, [pc, #348]	; (8001b84 <HAL_DMA_Start_IT+0x220>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d013      	beq.n	8001a52 <HAL_DMA_Start_IT+0xee>
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a56      	ldr	r2, [pc, #344]	; (8001b88 <HAL_DMA_Start_IT+0x224>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d00e      	beq.n	8001a52 <HAL_DMA_Start_IT+0xee>
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a54      	ldr	r2, [pc, #336]	; (8001b8c <HAL_DMA_Start_IT+0x228>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d009      	beq.n	8001a52 <HAL_DMA_Start_IT+0xee>
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a53      	ldr	r2, [pc, #332]	; (8001b90 <HAL_DMA_Start_IT+0x22c>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d004      	beq.n	8001a52 <HAL_DMA_Start_IT+0xee>
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a51      	ldr	r2, [pc, #324]	; (8001b94 <HAL_DMA_Start_IT+0x230>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d108      	bne.n	8001a64 <HAL_DMA_Start_IT+0x100>
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 0201 	bic.w	r2, r2, #1
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	e007      	b.n	8001a74 <HAL_DMA_Start_IT+0x110>
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f022 0201 	bic.w	r2, r2, #1
 8001a72:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	68b9      	ldr	r1, [r7, #8]
 8001a7a:	68f8      	ldr	r0, [r7, #12]
 8001a7c:	f001 fe68 	bl	8003750 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a34      	ldr	r2, [pc, #208]	; (8001b58 <HAL_DMA_Start_IT+0x1f4>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d04a      	beq.n	8001b20 <HAL_DMA_Start_IT+0x1bc>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a33      	ldr	r2, [pc, #204]	; (8001b5c <HAL_DMA_Start_IT+0x1f8>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d045      	beq.n	8001b20 <HAL_DMA_Start_IT+0x1bc>
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a31      	ldr	r2, [pc, #196]	; (8001b60 <HAL_DMA_Start_IT+0x1fc>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d040      	beq.n	8001b20 <HAL_DMA_Start_IT+0x1bc>
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a30      	ldr	r2, [pc, #192]	; (8001b64 <HAL_DMA_Start_IT+0x200>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d03b      	beq.n	8001b20 <HAL_DMA_Start_IT+0x1bc>
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a2e      	ldr	r2, [pc, #184]	; (8001b68 <HAL_DMA_Start_IT+0x204>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d036      	beq.n	8001b20 <HAL_DMA_Start_IT+0x1bc>
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a2d      	ldr	r2, [pc, #180]	; (8001b6c <HAL_DMA_Start_IT+0x208>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d031      	beq.n	8001b20 <HAL_DMA_Start_IT+0x1bc>
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a2b      	ldr	r2, [pc, #172]	; (8001b70 <HAL_DMA_Start_IT+0x20c>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d02c      	beq.n	8001b20 <HAL_DMA_Start_IT+0x1bc>
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a2a      	ldr	r2, [pc, #168]	; (8001b74 <HAL_DMA_Start_IT+0x210>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d027      	beq.n	8001b20 <HAL_DMA_Start_IT+0x1bc>
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a28      	ldr	r2, [pc, #160]	; (8001b78 <HAL_DMA_Start_IT+0x214>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d022      	beq.n	8001b20 <HAL_DMA_Start_IT+0x1bc>
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a27      	ldr	r2, [pc, #156]	; (8001b7c <HAL_DMA_Start_IT+0x218>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d01d      	beq.n	8001b20 <HAL_DMA_Start_IT+0x1bc>
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a25      	ldr	r2, [pc, #148]	; (8001b80 <HAL_DMA_Start_IT+0x21c>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d018      	beq.n	8001b20 <HAL_DMA_Start_IT+0x1bc>
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a24      	ldr	r2, [pc, #144]	; (8001b84 <HAL_DMA_Start_IT+0x220>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d013      	beq.n	8001b20 <HAL_DMA_Start_IT+0x1bc>
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a22      	ldr	r2, [pc, #136]	; (8001b88 <HAL_DMA_Start_IT+0x224>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d00e      	beq.n	8001b20 <HAL_DMA_Start_IT+0x1bc>
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a21      	ldr	r2, [pc, #132]	; (8001b8c <HAL_DMA_Start_IT+0x228>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d009      	beq.n	8001b20 <HAL_DMA_Start_IT+0x1bc>
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a1f      	ldr	r2, [pc, #124]	; (8001b90 <HAL_DMA_Start_IT+0x22c>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d004      	beq.n	8001b20 <HAL_DMA_Start_IT+0x1bc>
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a1e      	ldr	r2, [pc, #120]	; (8001b94 <HAL_DMA_Start_IT+0x230>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d101      	bne.n	8001b24 <HAL_DMA_Start_IT+0x1c0>
 8001b20:	2301      	movs	r3, #1
 8001b22:	e000      	b.n	8001b26 <HAL_DMA_Start_IT+0x1c2>
 8001b24:	2300      	movs	r3, #0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d036      	beq.n	8001b98 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f023 021e 	bic.w	r2, r3, #30
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f042 0216 	orr.w	r2, r2, #22
 8001b3c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d03e      	beq.n	8001bc4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f042 0208 	orr.w	r2, r2, #8
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	e035      	b.n	8001bc4 <HAL_DMA_Start_IT+0x260>
 8001b58:	40020010 	.word	0x40020010
 8001b5c:	40020028 	.word	0x40020028
 8001b60:	40020040 	.word	0x40020040
 8001b64:	40020058 	.word	0x40020058
 8001b68:	40020070 	.word	0x40020070
 8001b6c:	40020088 	.word	0x40020088
 8001b70:	400200a0 	.word	0x400200a0
 8001b74:	400200b8 	.word	0x400200b8
 8001b78:	40020410 	.word	0x40020410
 8001b7c:	40020428 	.word	0x40020428
 8001b80:	40020440 	.word	0x40020440
 8001b84:	40020458 	.word	0x40020458
 8001b88:	40020470 	.word	0x40020470
 8001b8c:	40020488 	.word	0x40020488
 8001b90:	400204a0 	.word	0x400204a0
 8001b94:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f023 020e 	bic.w	r2, r3, #14
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f042 020a 	orr.w	r2, r2, #10
 8001baa:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d007      	beq.n	8001bc4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f042 0204 	orr.w	r2, r2, #4
 8001bc2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a83      	ldr	r2, [pc, #524]	; (8001dd8 <HAL_DMA_Start_IT+0x474>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d072      	beq.n	8001cb4 <HAL_DMA_Start_IT+0x350>
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a82      	ldr	r2, [pc, #520]	; (8001ddc <HAL_DMA_Start_IT+0x478>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d06d      	beq.n	8001cb4 <HAL_DMA_Start_IT+0x350>
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a80      	ldr	r2, [pc, #512]	; (8001de0 <HAL_DMA_Start_IT+0x47c>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d068      	beq.n	8001cb4 <HAL_DMA_Start_IT+0x350>
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a7f      	ldr	r2, [pc, #508]	; (8001de4 <HAL_DMA_Start_IT+0x480>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d063      	beq.n	8001cb4 <HAL_DMA_Start_IT+0x350>
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a7d      	ldr	r2, [pc, #500]	; (8001de8 <HAL_DMA_Start_IT+0x484>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d05e      	beq.n	8001cb4 <HAL_DMA_Start_IT+0x350>
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a7c      	ldr	r2, [pc, #496]	; (8001dec <HAL_DMA_Start_IT+0x488>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d059      	beq.n	8001cb4 <HAL_DMA_Start_IT+0x350>
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a7a      	ldr	r2, [pc, #488]	; (8001df0 <HAL_DMA_Start_IT+0x48c>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d054      	beq.n	8001cb4 <HAL_DMA_Start_IT+0x350>
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a79      	ldr	r2, [pc, #484]	; (8001df4 <HAL_DMA_Start_IT+0x490>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d04f      	beq.n	8001cb4 <HAL_DMA_Start_IT+0x350>
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a77      	ldr	r2, [pc, #476]	; (8001df8 <HAL_DMA_Start_IT+0x494>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d04a      	beq.n	8001cb4 <HAL_DMA_Start_IT+0x350>
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a76      	ldr	r2, [pc, #472]	; (8001dfc <HAL_DMA_Start_IT+0x498>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d045      	beq.n	8001cb4 <HAL_DMA_Start_IT+0x350>
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a74      	ldr	r2, [pc, #464]	; (8001e00 <HAL_DMA_Start_IT+0x49c>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d040      	beq.n	8001cb4 <HAL_DMA_Start_IT+0x350>
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a73      	ldr	r2, [pc, #460]	; (8001e04 <HAL_DMA_Start_IT+0x4a0>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d03b      	beq.n	8001cb4 <HAL_DMA_Start_IT+0x350>
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a71      	ldr	r2, [pc, #452]	; (8001e08 <HAL_DMA_Start_IT+0x4a4>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d036      	beq.n	8001cb4 <HAL_DMA_Start_IT+0x350>
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a70      	ldr	r2, [pc, #448]	; (8001e0c <HAL_DMA_Start_IT+0x4a8>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d031      	beq.n	8001cb4 <HAL_DMA_Start_IT+0x350>
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a6e      	ldr	r2, [pc, #440]	; (8001e10 <HAL_DMA_Start_IT+0x4ac>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d02c      	beq.n	8001cb4 <HAL_DMA_Start_IT+0x350>
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a6d      	ldr	r2, [pc, #436]	; (8001e14 <HAL_DMA_Start_IT+0x4b0>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d027      	beq.n	8001cb4 <HAL_DMA_Start_IT+0x350>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a6b      	ldr	r2, [pc, #428]	; (8001e18 <HAL_DMA_Start_IT+0x4b4>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d022      	beq.n	8001cb4 <HAL_DMA_Start_IT+0x350>
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a6a      	ldr	r2, [pc, #424]	; (8001e1c <HAL_DMA_Start_IT+0x4b8>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d01d      	beq.n	8001cb4 <HAL_DMA_Start_IT+0x350>
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a68      	ldr	r2, [pc, #416]	; (8001e20 <HAL_DMA_Start_IT+0x4bc>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d018      	beq.n	8001cb4 <HAL_DMA_Start_IT+0x350>
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a67      	ldr	r2, [pc, #412]	; (8001e24 <HAL_DMA_Start_IT+0x4c0>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d013      	beq.n	8001cb4 <HAL_DMA_Start_IT+0x350>
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a65      	ldr	r2, [pc, #404]	; (8001e28 <HAL_DMA_Start_IT+0x4c4>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d00e      	beq.n	8001cb4 <HAL_DMA_Start_IT+0x350>
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a64      	ldr	r2, [pc, #400]	; (8001e2c <HAL_DMA_Start_IT+0x4c8>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d009      	beq.n	8001cb4 <HAL_DMA_Start_IT+0x350>
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a62      	ldr	r2, [pc, #392]	; (8001e30 <HAL_DMA_Start_IT+0x4cc>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d004      	beq.n	8001cb4 <HAL_DMA_Start_IT+0x350>
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a61      	ldr	r2, [pc, #388]	; (8001e34 <HAL_DMA_Start_IT+0x4d0>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d101      	bne.n	8001cb8 <HAL_DMA_Start_IT+0x354>
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e000      	b.n	8001cba <HAL_DMA_Start_IT+0x356>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d01a      	beq.n	8001cf4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d007      	beq.n	8001cdc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cda:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d007      	beq.n	8001cf4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cf2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a37      	ldr	r2, [pc, #220]	; (8001dd8 <HAL_DMA_Start_IT+0x474>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d04a      	beq.n	8001d94 <HAL_DMA_Start_IT+0x430>
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a36      	ldr	r2, [pc, #216]	; (8001ddc <HAL_DMA_Start_IT+0x478>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d045      	beq.n	8001d94 <HAL_DMA_Start_IT+0x430>
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a34      	ldr	r2, [pc, #208]	; (8001de0 <HAL_DMA_Start_IT+0x47c>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d040      	beq.n	8001d94 <HAL_DMA_Start_IT+0x430>
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a33      	ldr	r2, [pc, #204]	; (8001de4 <HAL_DMA_Start_IT+0x480>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d03b      	beq.n	8001d94 <HAL_DMA_Start_IT+0x430>
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a31      	ldr	r2, [pc, #196]	; (8001de8 <HAL_DMA_Start_IT+0x484>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d036      	beq.n	8001d94 <HAL_DMA_Start_IT+0x430>
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a30      	ldr	r2, [pc, #192]	; (8001dec <HAL_DMA_Start_IT+0x488>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d031      	beq.n	8001d94 <HAL_DMA_Start_IT+0x430>
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a2e      	ldr	r2, [pc, #184]	; (8001df0 <HAL_DMA_Start_IT+0x48c>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d02c      	beq.n	8001d94 <HAL_DMA_Start_IT+0x430>
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a2d      	ldr	r2, [pc, #180]	; (8001df4 <HAL_DMA_Start_IT+0x490>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d027      	beq.n	8001d94 <HAL_DMA_Start_IT+0x430>
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a2b      	ldr	r2, [pc, #172]	; (8001df8 <HAL_DMA_Start_IT+0x494>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d022      	beq.n	8001d94 <HAL_DMA_Start_IT+0x430>
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a2a      	ldr	r2, [pc, #168]	; (8001dfc <HAL_DMA_Start_IT+0x498>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d01d      	beq.n	8001d94 <HAL_DMA_Start_IT+0x430>
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a28      	ldr	r2, [pc, #160]	; (8001e00 <HAL_DMA_Start_IT+0x49c>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d018      	beq.n	8001d94 <HAL_DMA_Start_IT+0x430>
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a27      	ldr	r2, [pc, #156]	; (8001e04 <HAL_DMA_Start_IT+0x4a0>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d013      	beq.n	8001d94 <HAL_DMA_Start_IT+0x430>
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a25      	ldr	r2, [pc, #148]	; (8001e08 <HAL_DMA_Start_IT+0x4a4>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d00e      	beq.n	8001d94 <HAL_DMA_Start_IT+0x430>
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a24      	ldr	r2, [pc, #144]	; (8001e0c <HAL_DMA_Start_IT+0x4a8>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d009      	beq.n	8001d94 <HAL_DMA_Start_IT+0x430>
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a22      	ldr	r2, [pc, #136]	; (8001e10 <HAL_DMA_Start_IT+0x4ac>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d004      	beq.n	8001d94 <HAL_DMA_Start_IT+0x430>
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a21      	ldr	r2, [pc, #132]	; (8001e14 <HAL_DMA_Start_IT+0x4b0>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d108      	bne.n	8001da6 <HAL_DMA_Start_IT+0x442>
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0201 	orr.w	r2, r2, #1
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	e012      	b.n	8001dcc <HAL_DMA_Start_IT+0x468>
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f042 0201 	orr.w	r2, r2, #1
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	e009      	b.n	8001dcc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001dc6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001dcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40020010 	.word	0x40020010
 8001ddc:	40020028 	.word	0x40020028
 8001de0:	40020040 	.word	0x40020040
 8001de4:	40020058 	.word	0x40020058
 8001de8:	40020070 	.word	0x40020070
 8001dec:	40020088 	.word	0x40020088
 8001df0:	400200a0 	.word	0x400200a0
 8001df4:	400200b8 	.word	0x400200b8
 8001df8:	40020410 	.word	0x40020410
 8001dfc:	40020428 	.word	0x40020428
 8001e00:	40020440 	.word	0x40020440
 8001e04:	40020458 	.word	0x40020458
 8001e08:	40020470 	.word	0x40020470
 8001e0c:	40020488 	.word	0x40020488
 8001e10:	400204a0 	.word	0x400204a0
 8001e14:	400204b8 	.word	0x400204b8
 8001e18:	58025408 	.word	0x58025408
 8001e1c:	5802541c 	.word	0x5802541c
 8001e20:	58025430 	.word	0x58025430
 8001e24:	58025444 	.word	0x58025444
 8001e28:	58025458 	.word	0x58025458
 8001e2c:	5802546c 	.word	0x5802546c
 8001e30:	58025480 	.word	0x58025480
 8001e34:	58025494 	.word	0x58025494

08001e38 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001e40:	f7ff f90c 	bl	800105c <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d101      	bne.n	8001e50 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e2dc      	b.n	800240a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d008      	beq.n	8001e6e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2280      	movs	r2, #128	; 0x80
 8001e60:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e2cd      	b.n	800240a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a76      	ldr	r2, [pc, #472]	; (800204c <HAL_DMA_Abort+0x214>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d04a      	beq.n	8001f0e <HAL_DMA_Abort+0xd6>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a74      	ldr	r2, [pc, #464]	; (8002050 <HAL_DMA_Abort+0x218>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d045      	beq.n	8001f0e <HAL_DMA_Abort+0xd6>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a73      	ldr	r2, [pc, #460]	; (8002054 <HAL_DMA_Abort+0x21c>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d040      	beq.n	8001f0e <HAL_DMA_Abort+0xd6>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a71      	ldr	r2, [pc, #452]	; (8002058 <HAL_DMA_Abort+0x220>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d03b      	beq.n	8001f0e <HAL_DMA_Abort+0xd6>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a70      	ldr	r2, [pc, #448]	; (800205c <HAL_DMA_Abort+0x224>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d036      	beq.n	8001f0e <HAL_DMA_Abort+0xd6>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a6e      	ldr	r2, [pc, #440]	; (8002060 <HAL_DMA_Abort+0x228>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d031      	beq.n	8001f0e <HAL_DMA_Abort+0xd6>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a6d      	ldr	r2, [pc, #436]	; (8002064 <HAL_DMA_Abort+0x22c>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d02c      	beq.n	8001f0e <HAL_DMA_Abort+0xd6>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a6b      	ldr	r2, [pc, #428]	; (8002068 <HAL_DMA_Abort+0x230>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d027      	beq.n	8001f0e <HAL_DMA_Abort+0xd6>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a6a      	ldr	r2, [pc, #424]	; (800206c <HAL_DMA_Abort+0x234>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d022      	beq.n	8001f0e <HAL_DMA_Abort+0xd6>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a68      	ldr	r2, [pc, #416]	; (8002070 <HAL_DMA_Abort+0x238>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d01d      	beq.n	8001f0e <HAL_DMA_Abort+0xd6>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a67      	ldr	r2, [pc, #412]	; (8002074 <HAL_DMA_Abort+0x23c>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d018      	beq.n	8001f0e <HAL_DMA_Abort+0xd6>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a65      	ldr	r2, [pc, #404]	; (8002078 <HAL_DMA_Abort+0x240>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d013      	beq.n	8001f0e <HAL_DMA_Abort+0xd6>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a64      	ldr	r2, [pc, #400]	; (800207c <HAL_DMA_Abort+0x244>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d00e      	beq.n	8001f0e <HAL_DMA_Abort+0xd6>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a62      	ldr	r2, [pc, #392]	; (8002080 <HAL_DMA_Abort+0x248>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d009      	beq.n	8001f0e <HAL_DMA_Abort+0xd6>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a61      	ldr	r2, [pc, #388]	; (8002084 <HAL_DMA_Abort+0x24c>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d004      	beq.n	8001f0e <HAL_DMA_Abort+0xd6>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a5f      	ldr	r2, [pc, #380]	; (8002088 <HAL_DMA_Abort+0x250>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d101      	bne.n	8001f12 <HAL_DMA_Abort+0xda>
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e000      	b.n	8001f14 <HAL_DMA_Abort+0xdc>
 8001f12:	2300      	movs	r3, #0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d013      	beq.n	8001f40 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 021e 	bic.w	r2, r2, #30
 8001f26:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	695a      	ldr	r2, [r3, #20]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f36:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	617b      	str	r3, [r7, #20]
 8001f3e:	e00a      	b.n	8001f56 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 020e 	bic.w	r2, r2, #14
 8001f4e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a3c      	ldr	r2, [pc, #240]	; (800204c <HAL_DMA_Abort+0x214>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d072      	beq.n	8002046 <HAL_DMA_Abort+0x20e>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a3a      	ldr	r2, [pc, #232]	; (8002050 <HAL_DMA_Abort+0x218>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d06d      	beq.n	8002046 <HAL_DMA_Abort+0x20e>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a39      	ldr	r2, [pc, #228]	; (8002054 <HAL_DMA_Abort+0x21c>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d068      	beq.n	8002046 <HAL_DMA_Abort+0x20e>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a37      	ldr	r2, [pc, #220]	; (8002058 <HAL_DMA_Abort+0x220>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d063      	beq.n	8002046 <HAL_DMA_Abort+0x20e>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a36      	ldr	r2, [pc, #216]	; (800205c <HAL_DMA_Abort+0x224>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d05e      	beq.n	8002046 <HAL_DMA_Abort+0x20e>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a34      	ldr	r2, [pc, #208]	; (8002060 <HAL_DMA_Abort+0x228>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d059      	beq.n	8002046 <HAL_DMA_Abort+0x20e>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a33      	ldr	r2, [pc, #204]	; (8002064 <HAL_DMA_Abort+0x22c>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d054      	beq.n	8002046 <HAL_DMA_Abort+0x20e>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a31      	ldr	r2, [pc, #196]	; (8002068 <HAL_DMA_Abort+0x230>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d04f      	beq.n	8002046 <HAL_DMA_Abort+0x20e>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a30      	ldr	r2, [pc, #192]	; (800206c <HAL_DMA_Abort+0x234>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d04a      	beq.n	8002046 <HAL_DMA_Abort+0x20e>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a2e      	ldr	r2, [pc, #184]	; (8002070 <HAL_DMA_Abort+0x238>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d045      	beq.n	8002046 <HAL_DMA_Abort+0x20e>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a2d      	ldr	r2, [pc, #180]	; (8002074 <HAL_DMA_Abort+0x23c>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d040      	beq.n	8002046 <HAL_DMA_Abort+0x20e>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a2b      	ldr	r2, [pc, #172]	; (8002078 <HAL_DMA_Abort+0x240>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d03b      	beq.n	8002046 <HAL_DMA_Abort+0x20e>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a2a      	ldr	r2, [pc, #168]	; (800207c <HAL_DMA_Abort+0x244>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d036      	beq.n	8002046 <HAL_DMA_Abort+0x20e>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a28      	ldr	r2, [pc, #160]	; (8002080 <HAL_DMA_Abort+0x248>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d031      	beq.n	8002046 <HAL_DMA_Abort+0x20e>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a27      	ldr	r2, [pc, #156]	; (8002084 <HAL_DMA_Abort+0x24c>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d02c      	beq.n	8002046 <HAL_DMA_Abort+0x20e>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a25      	ldr	r2, [pc, #148]	; (8002088 <HAL_DMA_Abort+0x250>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d027      	beq.n	8002046 <HAL_DMA_Abort+0x20e>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a24      	ldr	r2, [pc, #144]	; (800208c <HAL_DMA_Abort+0x254>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d022      	beq.n	8002046 <HAL_DMA_Abort+0x20e>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a22      	ldr	r2, [pc, #136]	; (8002090 <HAL_DMA_Abort+0x258>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d01d      	beq.n	8002046 <HAL_DMA_Abort+0x20e>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a21      	ldr	r2, [pc, #132]	; (8002094 <HAL_DMA_Abort+0x25c>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d018      	beq.n	8002046 <HAL_DMA_Abort+0x20e>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a1f      	ldr	r2, [pc, #124]	; (8002098 <HAL_DMA_Abort+0x260>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d013      	beq.n	8002046 <HAL_DMA_Abort+0x20e>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a1e      	ldr	r2, [pc, #120]	; (800209c <HAL_DMA_Abort+0x264>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d00e      	beq.n	8002046 <HAL_DMA_Abort+0x20e>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a1c      	ldr	r2, [pc, #112]	; (80020a0 <HAL_DMA_Abort+0x268>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d009      	beq.n	8002046 <HAL_DMA_Abort+0x20e>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a1b      	ldr	r2, [pc, #108]	; (80020a4 <HAL_DMA_Abort+0x26c>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d004      	beq.n	8002046 <HAL_DMA_Abort+0x20e>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a19      	ldr	r2, [pc, #100]	; (80020a8 <HAL_DMA_Abort+0x270>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d132      	bne.n	80020ac <HAL_DMA_Abort+0x274>
 8002046:	2301      	movs	r3, #1
 8002048:	e031      	b.n	80020ae <HAL_DMA_Abort+0x276>
 800204a:	bf00      	nop
 800204c:	40020010 	.word	0x40020010
 8002050:	40020028 	.word	0x40020028
 8002054:	40020040 	.word	0x40020040
 8002058:	40020058 	.word	0x40020058
 800205c:	40020070 	.word	0x40020070
 8002060:	40020088 	.word	0x40020088
 8002064:	400200a0 	.word	0x400200a0
 8002068:	400200b8 	.word	0x400200b8
 800206c:	40020410 	.word	0x40020410
 8002070:	40020428 	.word	0x40020428
 8002074:	40020440 	.word	0x40020440
 8002078:	40020458 	.word	0x40020458
 800207c:	40020470 	.word	0x40020470
 8002080:	40020488 	.word	0x40020488
 8002084:	400204a0 	.word	0x400204a0
 8002088:	400204b8 	.word	0x400204b8
 800208c:	58025408 	.word	0x58025408
 8002090:	5802541c 	.word	0x5802541c
 8002094:	58025430 	.word	0x58025430
 8002098:	58025444 	.word	0x58025444
 800209c:	58025458 	.word	0x58025458
 80020a0:	5802546c 	.word	0x5802546c
 80020a4:	58025480 	.word	0x58025480
 80020a8:	58025494 	.word	0x58025494
 80020ac:	2300      	movs	r3, #0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d007      	beq.n	80020c2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a6d      	ldr	r2, [pc, #436]	; (800227c <HAL_DMA_Abort+0x444>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d04a      	beq.n	8002162 <HAL_DMA_Abort+0x32a>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a6b      	ldr	r2, [pc, #428]	; (8002280 <HAL_DMA_Abort+0x448>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d045      	beq.n	8002162 <HAL_DMA_Abort+0x32a>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a6a      	ldr	r2, [pc, #424]	; (8002284 <HAL_DMA_Abort+0x44c>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d040      	beq.n	8002162 <HAL_DMA_Abort+0x32a>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a68      	ldr	r2, [pc, #416]	; (8002288 <HAL_DMA_Abort+0x450>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d03b      	beq.n	8002162 <HAL_DMA_Abort+0x32a>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a67      	ldr	r2, [pc, #412]	; (800228c <HAL_DMA_Abort+0x454>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d036      	beq.n	8002162 <HAL_DMA_Abort+0x32a>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a65      	ldr	r2, [pc, #404]	; (8002290 <HAL_DMA_Abort+0x458>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d031      	beq.n	8002162 <HAL_DMA_Abort+0x32a>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a64      	ldr	r2, [pc, #400]	; (8002294 <HAL_DMA_Abort+0x45c>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d02c      	beq.n	8002162 <HAL_DMA_Abort+0x32a>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a62      	ldr	r2, [pc, #392]	; (8002298 <HAL_DMA_Abort+0x460>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d027      	beq.n	8002162 <HAL_DMA_Abort+0x32a>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a61      	ldr	r2, [pc, #388]	; (800229c <HAL_DMA_Abort+0x464>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d022      	beq.n	8002162 <HAL_DMA_Abort+0x32a>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a5f      	ldr	r2, [pc, #380]	; (80022a0 <HAL_DMA_Abort+0x468>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d01d      	beq.n	8002162 <HAL_DMA_Abort+0x32a>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a5e      	ldr	r2, [pc, #376]	; (80022a4 <HAL_DMA_Abort+0x46c>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d018      	beq.n	8002162 <HAL_DMA_Abort+0x32a>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a5c      	ldr	r2, [pc, #368]	; (80022a8 <HAL_DMA_Abort+0x470>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d013      	beq.n	8002162 <HAL_DMA_Abort+0x32a>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a5b      	ldr	r2, [pc, #364]	; (80022ac <HAL_DMA_Abort+0x474>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d00e      	beq.n	8002162 <HAL_DMA_Abort+0x32a>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a59      	ldr	r2, [pc, #356]	; (80022b0 <HAL_DMA_Abort+0x478>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d009      	beq.n	8002162 <HAL_DMA_Abort+0x32a>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a58      	ldr	r2, [pc, #352]	; (80022b4 <HAL_DMA_Abort+0x47c>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d004      	beq.n	8002162 <HAL_DMA_Abort+0x32a>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a56      	ldr	r2, [pc, #344]	; (80022b8 <HAL_DMA_Abort+0x480>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d108      	bne.n	8002174 <HAL_DMA_Abort+0x33c>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 0201 	bic.w	r2, r2, #1
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	e007      	b.n	8002184 <HAL_DMA_Abort+0x34c>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 0201 	bic.w	r2, r2, #1
 8002182:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002184:	e013      	b.n	80021ae <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002186:	f7fe ff69 	bl	800105c <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b05      	cmp	r3, #5
 8002192:	d90c      	bls.n	80021ae <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2220      	movs	r2, #32
 8002198:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2203      	movs	r2, #3
 80021a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e12d      	b.n	800240a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1e5      	bne.n	8002186 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a2f      	ldr	r2, [pc, #188]	; (800227c <HAL_DMA_Abort+0x444>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d04a      	beq.n	800225a <HAL_DMA_Abort+0x422>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a2d      	ldr	r2, [pc, #180]	; (8002280 <HAL_DMA_Abort+0x448>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d045      	beq.n	800225a <HAL_DMA_Abort+0x422>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a2c      	ldr	r2, [pc, #176]	; (8002284 <HAL_DMA_Abort+0x44c>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d040      	beq.n	800225a <HAL_DMA_Abort+0x422>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a2a      	ldr	r2, [pc, #168]	; (8002288 <HAL_DMA_Abort+0x450>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d03b      	beq.n	800225a <HAL_DMA_Abort+0x422>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a29      	ldr	r2, [pc, #164]	; (800228c <HAL_DMA_Abort+0x454>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d036      	beq.n	800225a <HAL_DMA_Abort+0x422>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a27      	ldr	r2, [pc, #156]	; (8002290 <HAL_DMA_Abort+0x458>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d031      	beq.n	800225a <HAL_DMA_Abort+0x422>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a26      	ldr	r2, [pc, #152]	; (8002294 <HAL_DMA_Abort+0x45c>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d02c      	beq.n	800225a <HAL_DMA_Abort+0x422>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a24      	ldr	r2, [pc, #144]	; (8002298 <HAL_DMA_Abort+0x460>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d027      	beq.n	800225a <HAL_DMA_Abort+0x422>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a23      	ldr	r2, [pc, #140]	; (800229c <HAL_DMA_Abort+0x464>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d022      	beq.n	800225a <HAL_DMA_Abort+0x422>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a21      	ldr	r2, [pc, #132]	; (80022a0 <HAL_DMA_Abort+0x468>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d01d      	beq.n	800225a <HAL_DMA_Abort+0x422>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a20      	ldr	r2, [pc, #128]	; (80022a4 <HAL_DMA_Abort+0x46c>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d018      	beq.n	800225a <HAL_DMA_Abort+0x422>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a1e      	ldr	r2, [pc, #120]	; (80022a8 <HAL_DMA_Abort+0x470>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d013      	beq.n	800225a <HAL_DMA_Abort+0x422>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a1d      	ldr	r2, [pc, #116]	; (80022ac <HAL_DMA_Abort+0x474>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d00e      	beq.n	800225a <HAL_DMA_Abort+0x422>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a1b      	ldr	r2, [pc, #108]	; (80022b0 <HAL_DMA_Abort+0x478>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d009      	beq.n	800225a <HAL_DMA_Abort+0x422>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a1a      	ldr	r2, [pc, #104]	; (80022b4 <HAL_DMA_Abort+0x47c>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d004      	beq.n	800225a <HAL_DMA_Abort+0x422>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a18      	ldr	r2, [pc, #96]	; (80022b8 <HAL_DMA_Abort+0x480>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d101      	bne.n	800225e <HAL_DMA_Abort+0x426>
 800225a:	2301      	movs	r3, #1
 800225c:	e000      	b.n	8002260 <HAL_DMA_Abort+0x428>
 800225e:	2300      	movs	r3, #0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d02b      	beq.n	80022bc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002268:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800226e:	f003 031f 	and.w	r3, r3, #31
 8002272:	223f      	movs	r2, #63	; 0x3f
 8002274:	409a      	lsls	r2, r3
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	609a      	str	r2, [r3, #8]
 800227a:	e02a      	b.n	80022d2 <HAL_DMA_Abort+0x49a>
 800227c:	40020010 	.word	0x40020010
 8002280:	40020028 	.word	0x40020028
 8002284:	40020040 	.word	0x40020040
 8002288:	40020058 	.word	0x40020058
 800228c:	40020070 	.word	0x40020070
 8002290:	40020088 	.word	0x40020088
 8002294:	400200a0 	.word	0x400200a0
 8002298:	400200b8 	.word	0x400200b8
 800229c:	40020410 	.word	0x40020410
 80022a0:	40020428 	.word	0x40020428
 80022a4:	40020440 	.word	0x40020440
 80022a8:	40020458 	.word	0x40020458
 80022ac:	40020470 	.word	0x40020470
 80022b0:	40020488 	.word	0x40020488
 80022b4:	400204a0 	.word	0x400204a0
 80022b8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c6:	f003 031f 	and.w	r3, r3, #31
 80022ca:	2201      	movs	r2, #1
 80022cc:	409a      	lsls	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a4f      	ldr	r2, [pc, #316]	; (8002414 <HAL_DMA_Abort+0x5dc>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d072      	beq.n	80023c2 <HAL_DMA_Abort+0x58a>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a4d      	ldr	r2, [pc, #308]	; (8002418 <HAL_DMA_Abort+0x5e0>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d06d      	beq.n	80023c2 <HAL_DMA_Abort+0x58a>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a4c      	ldr	r2, [pc, #304]	; (800241c <HAL_DMA_Abort+0x5e4>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d068      	beq.n	80023c2 <HAL_DMA_Abort+0x58a>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a4a      	ldr	r2, [pc, #296]	; (8002420 <HAL_DMA_Abort+0x5e8>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d063      	beq.n	80023c2 <HAL_DMA_Abort+0x58a>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a49      	ldr	r2, [pc, #292]	; (8002424 <HAL_DMA_Abort+0x5ec>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d05e      	beq.n	80023c2 <HAL_DMA_Abort+0x58a>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a47      	ldr	r2, [pc, #284]	; (8002428 <HAL_DMA_Abort+0x5f0>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d059      	beq.n	80023c2 <HAL_DMA_Abort+0x58a>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a46      	ldr	r2, [pc, #280]	; (800242c <HAL_DMA_Abort+0x5f4>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d054      	beq.n	80023c2 <HAL_DMA_Abort+0x58a>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a44      	ldr	r2, [pc, #272]	; (8002430 <HAL_DMA_Abort+0x5f8>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d04f      	beq.n	80023c2 <HAL_DMA_Abort+0x58a>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a43      	ldr	r2, [pc, #268]	; (8002434 <HAL_DMA_Abort+0x5fc>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d04a      	beq.n	80023c2 <HAL_DMA_Abort+0x58a>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a41      	ldr	r2, [pc, #260]	; (8002438 <HAL_DMA_Abort+0x600>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d045      	beq.n	80023c2 <HAL_DMA_Abort+0x58a>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a40      	ldr	r2, [pc, #256]	; (800243c <HAL_DMA_Abort+0x604>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d040      	beq.n	80023c2 <HAL_DMA_Abort+0x58a>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a3e      	ldr	r2, [pc, #248]	; (8002440 <HAL_DMA_Abort+0x608>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d03b      	beq.n	80023c2 <HAL_DMA_Abort+0x58a>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a3d      	ldr	r2, [pc, #244]	; (8002444 <HAL_DMA_Abort+0x60c>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d036      	beq.n	80023c2 <HAL_DMA_Abort+0x58a>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a3b      	ldr	r2, [pc, #236]	; (8002448 <HAL_DMA_Abort+0x610>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d031      	beq.n	80023c2 <HAL_DMA_Abort+0x58a>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a3a      	ldr	r2, [pc, #232]	; (800244c <HAL_DMA_Abort+0x614>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d02c      	beq.n	80023c2 <HAL_DMA_Abort+0x58a>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a38      	ldr	r2, [pc, #224]	; (8002450 <HAL_DMA_Abort+0x618>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d027      	beq.n	80023c2 <HAL_DMA_Abort+0x58a>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a37      	ldr	r2, [pc, #220]	; (8002454 <HAL_DMA_Abort+0x61c>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d022      	beq.n	80023c2 <HAL_DMA_Abort+0x58a>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a35      	ldr	r2, [pc, #212]	; (8002458 <HAL_DMA_Abort+0x620>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d01d      	beq.n	80023c2 <HAL_DMA_Abort+0x58a>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a34      	ldr	r2, [pc, #208]	; (800245c <HAL_DMA_Abort+0x624>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d018      	beq.n	80023c2 <HAL_DMA_Abort+0x58a>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a32      	ldr	r2, [pc, #200]	; (8002460 <HAL_DMA_Abort+0x628>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d013      	beq.n	80023c2 <HAL_DMA_Abort+0x58a>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a31      	ldr	r2, [pc, #196]	; (8002464 <HAL_DMA_Abort+0x62c>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d00e      	beq.n	80023c2 <HAL_DMA_Abort+0x58a>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a2f      	ldr	r2, [pc, #188]	; (8002468 <HAL_DMA_Abort+0x630>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d009      	beq.n	80023c2 <HAL_DMA_Abort+0x58a>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a2e      	ldr	r2, [pc, #184]	; (800246c <HAL_DMA_Abort+0x634>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d004      	beq.n	80023c2 <HAL_DMA_Abort+0x58a>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a2c      	ldr	r2, [pc, #176]	; (8002470 <HAL_DMA_Abort+0x638>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d101      	bne.n	80023c6 <HAL_DMA_Abort+0x58e>
 80023c2:	2301      	movs	r3, #1
 80023c4:	e000      	b.n	80023c8 <HAL_DMA_Abort+0x590>
 80023c6:	2300      	movs	r3, #0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d015      	beq.n	80023f8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80023d4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00c      	beq.n	80023f8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023ec:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80023f6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40020010 	.word	0x40020010
 8002418:	40020028 	.word	0x40020028
 800241c:	40020040 	.word	0x40020040
 8002420:	40020058 	.word	0x40020058
 8002424:	40020070 	.word	0x40020070
 8002428:	40020088 	.word	0x40020088
 800242c:	400200a0 	.word	0x400200a0
 8002430:	400200b8 	.word	0x400200b8
 8002434:	40020410 	.word	0x40020410
 8002438:	40020428 	.word	0x40020428
 800243c:	40020440 	.word	0x40020440
 8002440:	40020458 	.word	0x40020458
 8002444:	40020470 	.word	0x40020470
 8002448:	40020488 	.word	0x40020488
 800244c:	400204a0 	.word	0x400204a0
 8002450:	400204b8 	.word	0x400204b8
 8002454:	58025408 	.word	0x58025408
 8002458:	5802541c 	.word	0x5802541c
 800245c:	58025430 	.word	0x58025430
 8002460:	58025444 	.word	0x58025444
 8002464:	58025458 	.word	0x58025458
 8002468:	5802546c 	.word	0x5802546c
 800246c:	58025480 	.word	0x58025480
 8002470:	58025494 	.word	0x58025494

08002474 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e205      	b.n	8002892 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d004      	beq.n	800249c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2280      	movs	r2, #128	; 0x80
 8002496:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e1fa      	b.n	8002892 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a8c      	ldr	r2, [pc, #560]	; (80026d4 <HAL_DMA_Abort_IT+0x260>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d04a      	beq.n	800253c <HAL_DMA_Abort_IT+0xc8>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a8b      	ldr	r2, [pc, #556]	; (80026d8 <HAL_DMA_Abort_IT+0x264>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d045      	beq.n	800253c <HAL_DMA_Abort_IT+0xc8>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a89      	ldr	r2, [pc, #548]	; (80026dc <HAL_DMA_Abort_IT+0x268>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d040      	beq.n	800253c <HAL_DMA_Abort_IT+0xc8>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a88      	ldr	r2, [pc, #544]	; (80026e0 <HAL_DMA_Abort_IT+0x26c>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d03b      	beq.n	800253c <HAL_DMA_Abort_IT+0xc8>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a86      	ldr	r2, [pc, #536]	; (80026e4 <HAL_DMA_Abort_IT+0x270>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d036      	beq.n	800253c <HAL_DMA_Abort_IT+0xc8>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a85      	ldr	r2, [pc, #532]	; (80026e8 <HAL_DMA_Abort_IT+0x274>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d031      	beq.n	800253c <HAL_DMA_Abort_IT+0xc8>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a83      	ldr	r2, [pc, #524]	; (80026ec <HAL_DMA_Abort_IT+0x278>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d02c      	beq.n	800253c <HAL_DMA_Abort_IT+0xc8>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a82      	ldr	r2, [pc, #520]	; (80026f0 <HAL_DMA_Abort_IT+0x27c>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d027      	beq.n	800253c <HAL_DMA_Abort_IT+0xc8>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a80      	ldr	r2, [pc, #512]	; (80026f4 <HAL_DMA_Abort_IT+0x280>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d022      	beq.n	800253c <HAL_DMA_Abort_IT+0xc8>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a7f      	ldr	r2, [pc, #508]	; (80026f8 <HAL_DMA_Abort_IT+0x284>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d01d      	beq.n	800253c <HAL_DMA_Abort_IT+0xc8>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a7d      	ldr	r2, [pc, #500]	; (80026fc <HAL_DMA_Abort_IT+0x288>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d018      	beq.n	800253c <HAL_DMA_Abort_IT+0xc8>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a7c      	ldr	r2, [pc, #496]	; (8002700 <HAL_DMA_Abort_IT+0x28c>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d013      	beq.n	800253c <HAL_DMA_Abort_IT+0xc8>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a7a      	ldr	r2, [pc, #488]	; (8002704 <HAL_DMA_Abort_IT+0x290>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d00e      	beq.n	800253c <HAL_DMA_Abort_IT+0xc8>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a79      	ldr	r2, [pc, #484]	; (8002708 <HAL_DMA_Abort_IT+0x294>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d009      	beq.n	800253c <HAL_DMA_Abort_IT+0xc8>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a77      	ldr	r2, [pc, #476]	; (800270c <HAL_DMA_Abort_IT+0x298>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d004      	beq.n	800253c <HAL_DMA_Abort_IT+0xc8>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a76      	ldr	r2, [pc, #472]	; (8002710 <HAL_DMA_Abort_IT+0x29c>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d101      	bne.n	8002540 <HAL_DMA_Abort_IT+0xcc>
 800253c:	2301      	movs	r3, #1
 800253e:	e000      	b.n	8002542 <HAL_DMA_Abort_IT+0xce>
 8002540:	2300      	movs	r3, #0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d065      	beq.n	8002612 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2204      	movs	r2, #4
 800254a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a60      	ldr	r2, [pc, #384]	; (80026d4 <HAL_DMA_Abort_IT+0x260>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d04a      	beq.n	80025ee <HAL_DMA_Abort_IT+0x17a>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a5e      	ldr	r2, [pc, #376]	; (80026d8 <HAL_DMA_Abort_IT+0x264>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d045      	beq.n	80025ee <HAL_DMA_Abort_IT+0x17a>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a5d      	ldr	r2, [pc, #372]	; (80026dc <HAL_DMA_Abort_IT+0x268>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d040      	beq.n	80025ee <HAL_DMA_Abort_IT+0x17a>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a5b      	ldr	r2, [pc, #364]	; (80026e0 <HAL_DMA_Abort_IT+0x26c>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d03b      	beq.n	80025ee <HAL_DMA_Abort_IT+0x17a>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a5a      	ldr	r2, [pc, #360]	; (80026e4 <HAL_DMA_Abort_IT+0x270>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d036      	beq.n	80025ee <HAL_DMA_Abort_IT+0x17a>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a58      	ldr	r2, [pc, #352]	; (80026e8 <HAL_DMA_Abort_IT+0x274>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d031      	beq.n	80025ee <HAL_DMA_Abort_IT+0x17a>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a57      	ldr	r2, [pc, #348]	; (80026ec <HAL_DMA_Abort_IT+0x278>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d02c      	beq.n	80025ee <HAL_DMA_Abort_IT+0x17a>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a55      	ldr	r2, [pc, #340]	; (80026f0 <HAL_DMA_Abort_IT+0x27c>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d027      	beq.n	80025ee <HAL_DMA_Abort_IT+0x17a>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a54      	ldr	r2, [pc, #336]	; (80026f4 <HAL_DMA_Abort_IT+0x280>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d022      	beq.n	80025ee <HAL_DMA_Abort_IT+0x17a>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a52      	ldr	r2, [pc, #328]	; (80026f8 <HAL_DMA_Abort_IT+0x284>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d01d      	beq.n	80025ee <HAL_DMA_Abort_IT+0x17a>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a51      	ldr	r2, [pc, #324]	; (80026fc <HAL_DMA_Abort_IT+0x288>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d018      	beq.n	80025ee <HAL_DMA_Abort_IT+0x17a>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a4f      	ldr	r2, [pc, #316]	; (8002700 <HAL_DMA_Abort_IT+0x28c>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d013      	beq.n	80025ee <HAL_DMA_Abort_IT+0x17a>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a4e      	ldr	r2, [pc, #312]	; (8002704 <HAL_DMA_Abort_IT+0x290>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d00e      	beq.n	80025ee <HAL_DMA_Abort_IT+0x17a>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a4c      	ldr	r2, [pc, #304]	; (8002708 <HAL_DMA_Abort_IT+0x294>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d009      	beq.n	80025ee <HAL_DMA_Abort_IT+0x17a>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a4b      	ldr	r2, [pc, #300]	; (800270c <HAL_DMA_Abort_IT+0x298>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d004      	beq.n	80025ee <HAL_DMA_Abort_IT+0x17a>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a49      	ldr	r2, [pc, #292]	; (8002710 <HAL_DMA_Abort_IT+0x29c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d108      	bne.n	8002600 <HAL_DMA_Abort_IT+0x18c>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 0201 	bic.w	r2, r2, #1
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	e147      	b.n	8002890 <HAL_DMA_Abort_IT+0x41c>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f022 0201 	bic.w	r2, r2, #1
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	e13e      	b.n	8002890 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f022 020e 	bic.w	r2, r2, #14
 8002620:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a2b      	ldr	r2, [pc, #172]	; (80026d4 <HAL_DMA_Abort_IT+0x260>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d04a      	beq.n	80026c2 <HAL_DMA_Abort_IT+0x24e>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a29      	ldr	r2, [pc, #164]	; (80026d8 <HAL_DMA_Abort_IT+0x264>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d045      	beq.n	80026c2 <HAL_DMA_Abort_IT+0x24e>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a28      	ldr	r2, [pc, #160]	; (80026dc <HAL_DMA_Abort_IT+0x268>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d040      	beq.n	80026c2 <HAL_DMA_Abort_IT+0x24e>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a26      	ldr	r2, [pc, #152]	; (80026e0 <HAL_DMA_Abort_IT+0x26c>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d03b      	beq.n	80026c2 <HAL_DMA_Abort_IT+0x24e>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a25      	ldr	r2, [pc, #148]	; (80026e4 <HAL_DMA_Abort_IT+0x270>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d036      	beq.n	80026c2 <HAL_DMA_Abort_IT+0x24e>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a23      	ldr	r2, [pc, #140]	; (80026e8 <HAL_DMA_Abort_IT+0x274>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d031      	beq.n	80026c2 <HAL_DMA_Abort_IT+0x24e>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a22      	ldr	r2, [pc, #136]	; (80026ec <HAL_DMA_Abort_IT+0x278>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d02c      	beq.n	80026c2 <HAL_DMA_Abort_IT+0x24e>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a20      	ldr	r2, [pc, #128]	; (80026f0 <HAL_DMA_Abort_IT+0x27c>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d027      	beq.n	80026c2 <HAL_DMA_Abort_IT+0x24e>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a1f      	ldr	r2, [pc, #124]	; (80026f4 <HAL_DMA_Abort_IT+0x280>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d022      	beq.n	80026c2 <HAL_DMA_Abort_IT+0x24e>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a1d      	ldr	r2, [pc, #116]	; (80026f8 <HAL_DMA_Abort_IT+0x284>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d01d      	beq.n	80026c2 <HAL_DMA_Abort_IT+0x24e>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a1c      	ldr	r2, [pc, #112]	; (80026fc <HAL_DMA_Abort_IT+0x288>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d018      	beq.n	80026c2 <HAL_DMA_Abort_IT+0x24e>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a1a      	ldr	r2, [pc, #104]	; (8002700 <HAL_DMA_Abort_IT+0x28c>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d013      	beq.n	80026c2 <HAL_DMA_Abort_IT+0x24e>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a19      	ldr	r2, [pc, #100]	; (8002704 <HAL_DMA_Abort_IT+0x290>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d00e      	beq.n	80026c2 <HAL_DMA_Abort_IT+0x24e>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a17      	ldr	r2, [pc, #92]	; (8002708 <HAL_DMA_Abort_IT+0x294>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d009      	beq.n	80026c2 <HAL_DMA_Abort_IT+0x24e>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a16      	ldr	r2, [pc, #88]	; (800270c <HAL_DMA_Abort_IT+0x298>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d004      	beq.n	80026c2 <HAL_DMA_Abort_IT+0x24e>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a14      	ldr	r2, [pc, #80]	; (8002710 <HAL_DMA_Abort_IT+0x29c>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d128      	bne.n	8002714 <HAL_DMA_Abort_IT+0x2a0>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 0201 	bic.w	r2, r2, #1
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	e027      	b.n	8002724 <HAL_DMA_Abort_IT+0x2b0>
 80026d4:	40020010 	.word	0x40020010
 80026d8:	40020028 	.word	0x40020028
 80026dc:	40020040 	.word	0x40020040
 80026e0:	40020058 	.word	0x40020058
 80026e4:	40020070 	.word	0x40020070
 80026e8:	40020088 	.word	0x40020088
 80026ec:	400200a0 	.word	0x400200a0
 80026f0:	400200b8 	.word	0x400200b8
 80026f4:	40020410 	.word	0x40020410
 80026f8:	40020428 	.word	0x40020428
 80026fc:	40020440 	.word	0x40020440
 8002700:	40020458 	.word	0x40020458
 8002704:	40020470 	.word	0x40020470
 8002708:	40020488 	.word	0x40020488
 800270c:	400204a0 	.word	0x400204a0
 8002710:	400204b8 	.word	0x400204b8
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 0201 	bic.w	r2, r2, #1
 8002722:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a5c      	ldr	r2, [pc, #368]	; (800289c <HAL_DMA_Abort_IT+0x428>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d072      	beq.n	8002814 <HAL_DMA_Abort_IT+0x3a0>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a5b      	ldr	r2, [pc, #364]	; (80028a0 <HAL_DMA_Abort_IT+0x42c>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d06d      	beq.n	8002814 <HAL_DMA_Abort_IT+0x3a0>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a59      	ldr	r2, [pc, #356]	; (80028a4 <HAL_DMA_Abort_IT+0x430>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d068      	beq.n	8002814 <HAL_DMA_Abort_IT+0x3a0>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a58      	ldr	r2, [pc, #352]	; (80028a8 <HAL_DMA_Abort_IT+0x434>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d063      	beq.n	8002814 <HAL_DMA_Abort_IT+0x3a0>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a56      	ldr	r2, [pc, #344]	; (80028ac <HAL_DMA_Abort_IT+0x438>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d05e      	beq.n	8002814 <HAL_DMA_Abort_IT+0x3a0>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a55      	ldr	r2, [pc, #340]	; (80028b0 <HAL_DMA_Abort_IT+0x43c>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d059      	beq.n	8002814 <HAL_DMA_Abort_IT+0x3a0>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a53      	ldr	r2, [pc, #332]	; (80028b4 <HAL_DMA_Abort_IT+0x440>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d054      	beq.n	8002814 <HAL_DMA_Abort_IT+0x3a0>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a52      	ldr	r2, [pc, #328]	; (80028b8 <HAL_DMA_Abort_IT+0x444>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d04f      	beq.n	8002814 <HAL_DMA_Abort_IT+0x3a0>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a50      	ldr	r2, [pc, #320]	; (80028bc <HAL_DMA_Abort_IT+0x448>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d04a      	beq.n	8002814 <HAL_DMA_Abort_IT+0x3a0>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a4f      	ldr	r2, [pc, #316]	; (80028c0 <HAL_DMA_Abort_IT+0x44c>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d045      	beq.n	8002814 <HAL_DMA_Abort_IT+0x3a0>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a4d      	ldr	r2, [pc, #308]	; (80028c4 <HAL_DMA_Abort_IT+0x450>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d040      	beq.n	8002814 <HAL_DMA_Abort_IT+0x3a0>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a4c      	ldr	r2, [pc, #304]	; (80028c8 <HAL_DMA_Abort_IT+0x454>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d03b      	beq.n	8002814 <HAL_DMA_Abort_IT+0x3a0>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a4a      	ldr	r2, [pc, #296]	; (80028cc <HAL_DMA_Abort_IT+0x458>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d036      	beq.n	8002814 <HAL_DMA_Abort_IT+0x3a0>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a49      	ldr	r2, [pc, #292]	; (80028d0 <HAL_DMA_Abort_IT+0x45c>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d031      	beq.n	8002814 <HAL_DMA_Abort_IT+0x3a0>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a47      	ldr	r2, [pc, #284]	; (80028d4 <HAL_DMA_Abort_IT+0x460>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d02c      	beq.n	8002814 <HAL_DMA_Abort_IT+0x3a0>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a46      	ldr	r2, [pc, #280]	; (80028d8 <HAL_DMA_Abort_IT+0x464>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d027      	beq.n	8002814 <HAL_DMA_Abort_IT+0x3a0>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a44      	ldr	r2, [pc, #272]	; (80028dc <HAL_DMA_Abort_IT+0x468>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d022      	beq.n	8002814 <HAL_DMA_Abort_IT+0x3a0>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a43      	ldr	r2, [pc, #268]	; (80028e0 <HAL_DMA_Abort_IT+0x46c>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d01d      	beq.n	8002814 <HAL_DMA_Abort_IT+0x3a0>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a41      	ldr	r2, [pc, #260]	; (80028e4 <HAL_DMA_Abort_IT+0x470>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d018      	beq.n	8002814 <HAL_DMA_Abort_IT+0x3a0>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a40      	ldr	r2, [pc, #256]	; (80028e8 <HAL_DMA_Abort_IT+0x474>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d013      	beq.n	8002814 <HAL_DMA_Abort_IT+0x3a0>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a3e      	ldr	r2, [pc, #248]	; (80028ec <HAL_DMA_Abort_IT+0x478>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d00e      	beq.n	8002814 <HAL_DMA_Abort_IT+0x3a0>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a3d      	ldr	r2, [pc, #244]	; (80028f0 <HAL_DMA_Abort_IT+0x47c>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d009      	beq.n	8002814 <HAL_DMA_Abort_IT+0x3a0>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a3b      	ldr	r2, [pc, #236]	; (80028f4 <HAL_DMA_Abort_IT+0x480>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d004      	beq.n	8002814 <HAL_DMA_Abort_IT+0x3a0>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a3a      	ldr	r2, [pc, #232]	; (80028f8 <HAL_DMA_Abort_IT+0x484>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d101      	bne.n	8002818 <HAL_DMA_Abort_IT+0x3a4>
 8002814:	2301      	movs	r3, #1
 8002816:	e000      	b.n	800281a <HAL_DMA_Abort_IT+0x3a6>
 8002818:	2300      	movs	r3, #0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d028      	beq.n	8002870 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002828:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800282c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002832:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002838:	f003 031f 	and.w	r3, r3, #31
 800283c:	2201      	movs	r2, #1
 800283e:	409a      	lsls	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800284c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00c      	beq.n	8002870 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002860:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002864:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800286e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002884:	2b00      	cmp	r3, #0
 8002886:	d003      	beq.n	8002890 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	40020010 	.word	0x40020010
 80028a0:	40020028 	.word	0x40020028
 80028a4:	40020040 	.word	0x40020040
 80028a8:	40020058 	.word	0x40020058
 80028ac:	40020070 	.word	0x40020070
 80028b0:	40020088 	.word	0x40020088
 80028b4:	400200a0 	.word	0x400200a0
 80028b8:	400200b8 	.word	0x400200b8
 80028bc:	40020410 	.word	0x40020410
 80028c0:	40020428 	.word	0x40020428
 80028c4:	40020440 	.word	0x40020440
 80028c8:	40020458 	.word	0x40020458
 80028cc:	40020470 	.word	0x40020470
 80028d0:	40020488 	.word	0x40020488
 80028d4:	400204a0 	.word	0x400204a0
 80028d8:	400204b8 	.word	0x400204b8
 80028dc:	58025408 	.word	0x58025408
 80028e0:	5802541c 	.word	0x5802541c
 80028e4:	58025430 	.word	0x58025430
 80028e8:	58025444 	.word	0x58025444
 80028ec:	58025458 	.word	0x58025458
 80028f0:	5802546c 	.word	0x5802546c
 80028f4:	58025480 	.word	0x58025480
 80028f8:	58025494 	.word	0x58025494

080028fc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b08a      	sub	sp, #40	; 0x28
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002904:	2300      	movs	r3, #0
 8002906:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002908:	4b67      	ldr	r3, [pc, #412]	; (8002aa8 <HAL_DMA_IRQHandler+0x1ac>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a67      	ldr	r2, [pc, #412]	; (8002aac <HAL_DMA_IRQHandler+0x1b0>)
 800290e:	fba2 2303 	umull	r2, r3, r2, r3
 8002912:	0a9b      	lsrs	r3, r3, #10
 8002914:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800291a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002920:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002922:	6a3b      	ldr	r3, [r7, #32]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a5f      	ldr	r2, [pc, #380]	; (8002ab0 <HAL_DMA_IRQHandler+0x1b4>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d04a      	beq.n	80029ce <HAL_DMA_IRQHandler+0xd2>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a5d      	ldr	r2, [pc, #372]	; (8002ab4 <HAL_DMA_IRQHandler+0x1b8>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d045      	beq.n	80029ce <HAL_DMA_IRQHandler+0xd2>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a5c      	ldr	r2, [pc, #368]	; (8002ab8 <HAL_DMA_IRQHandler+0x1bc>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d040      	beq.n	80029ce <HAL_DMA_IRQHandler+0xd2>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a5a      	ldr	r2, [pc, #360]	; (8002abc <HAL_DMA_IRQHandler+0x1c0>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d03b      	beq.n	80029ce <HAL_DMA_IRQHandler+0xd2>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a59      	ldr	r2, [pc, #356]	; (8002ac0 <HAL_DMA_IRQHandler+0x1c4>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d036      	beq.n	80029ce <HAL_DMA_IRQHandler+0xd2>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a57      	ldr	r2, [pc, #348]	; (8002ac4 <HAL_DMA_IRQHandler+0x1c8>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d031      	beq.n	80029ce <HAL_DMA_IRQHandler+0xd2>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a56      	ldr	r2, [pc, #344]	; (8002ac8 <HAL_DMA_IRQHandler+0x1cc>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d02c      	beq.n	80029ce <HAL_DMA_IRQHandler+0xd2>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a54      	ldr	r2, [pc, #336]	; (8002acc <HAL_DMA_IRQHandler+0x1d0>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d027      	beq.n	80029ce <HAL_DMA_IRQHandler+0xd2>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a53      	ldr	r2, [pc, #332]	; (8002ad0 <HAL_DMA_IRQHandler+0x1d4>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d022      	beq.n	80029ce <HAL_DMA_IRQHandler+0xd2>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a51      	ldr	r2, [pc, #324]	; (8002ad4 <HAL_DMA_IRQHandler+0x1d8>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d01d      	beq.n	80029ce <HAL_DMA_IRQHandler+0xd2>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a50      	ldr	r2, [pc, #320]	; (8002ad8 <HAL_DMA_IRQHandler+0x1dc>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d018      	beq.n	80029ce <HAL_DMA_IRQHandler+0xd2>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a4e      	ldr	r2, [pc, #312]	; (8002adc <HAL_DMA_IRQHandler+0x1e0>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d013      	beq.n	80029ce <HAL_DMA_IRQHandler+0xd2>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a4d      	ldr	r2, [pc, #308]	; (8002ae0 <HAL_DMA_IRQHandler+0x1e4>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d00e      	beq.n	80029ce <HAL_DMA_IRQHandler+0xd2>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a4b      	ldr	r2, [pc, #300]	; (8002ae4 <HAL_DMA_IRQHandler+0x1e8>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d009      	beq.n	80029ce <HAL_DMA_IRQHandler+0xd2>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a4a      	ldr	r2, [pc, #296]	; (8002ae8 <HAL_DMA_IRQHandler+0x1ec>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d004      	beq.n	80029ce <HAL_DMA_IRQHandler+0xd2>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a48      	ldr	r2, [pc, #288]	; (8002aec <HAL_DMA_IRQHandler+0x1f0>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d101      	bne.n	80029d2 <HAL_DMA_IRQHandler+0xd6>
 80029ce:	2301      	movs	r3, #1
 80029d0:	e000      	b.n	80029d4 <HAL_DMA_IRQHandler+0xd8>
 80029d2:	2300      	movs	r3, #0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 842b 	beq.w	8003230 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029de:	f003 031f 	and.w	r3, r3, #31
 80029e2:	2208      	movs	r2, #8
 80029e4:	409a      	lsls	r2, r3
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	4013      	ands	r3, r2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f000 80a2 	beq.w	8002b34 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a2e      	ldr	r2, [pc, #184]	; (8002ab0 <HAL_DMA_IRQHandler+0x1b4>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d04a      	beq.n	8002a90 <HAL_DMA_IRQHandler+0x194>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a2d      	ldr	r2, [pc, #180]	; (8002ab4 <HAL_DMA_IRQHandler+0x1b8>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d045      	beq.n	8002a90 <HAL_DMA_IRQHandler+0x194>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a2b      	ldr	r2, [pc, #172]	; (8002ab8 <HAL_DMA_IRQHandler+0x1bc>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d040      	beq.n	8002a90 <HAL_DMA_IRQHandler+0x194>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a2a      	ldr	r2, [pc, #168]	; (8002abc <HAL_DMA_IRQHandler+0x1c0>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d03b      	beq.n	8002a90 <HAL_DMA_IRQHandler+0x194>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a28      	ldr	r2, [pc, #160]	; (8002ac0 <HAL_DMA_IRQHandler+0x1c4>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d036      	beq.n	8002a90 <HAL_DMA_IRQHandler+0x194>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a27      	ldr	r2, [pc, #156]	; (8002ac4 <HAL_DMA_IRQHandler+0x1c8>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d031      	beq.n	8002a90 <HAL_DMA_IRQHandler+0x194>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a25      	ldr	r2, [pc, #148]	; (8002ac8 <HAL_DMA_IRQHandler+0x1cc>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d02c      	beq.n	8002a90 <HAL_DMA_IRQHandler+0x194>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a24      	ldr	r2, [pc, #144]	; (8002acc <HAL_DMA_IRQHandler+0x1d0>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d027      	beq.n	8002a90 <HAL_DMA_IRQHandler+0x194>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a22      	ldr	r2, [pc, #136]	; (8002ad0 <HAL_DMA_IRQHandler+0x1d4>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d022      	beq.n	8002a90 <HAL_DMA_IRQHandler+0x194>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a21      	ldr	r2, [pc, #132]	; (8002ad4 <HAL_DMA_IRQHandler+0x1d8>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d01d      	beq.n	8002a90 <HAL_DMA_IRQHandler+0x194>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a1f      	ldr	r2, [pc, #124]	; (8002ad8 <HAL_DMA_IRQHandler+0x1dc>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d018      	beq.n	8002a90 <HAL_DMA_IRQHandler+0x194>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a1e      	ldr	r2, [pc, #120]	; (8002adc <HAL_DMA_IRQHandler+0x1e0>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d013      	beq.n	8002a90 <HAL_DMA_IRQHandler+0x194>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a1c      	ldr	r2, [pc, #112]	; (8002ae0 <HAL_DMA_IRQHandler+0x1e4>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d00e      	beq.n	8002a90 <HAL_DMA_IRQHandler+0x194>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a1b      	ldr	r2, [pc, #108]	; (8002ae4 <HAL_DMA_IRQHandler+0x1e8>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d009      	beq.n	8002a90 <HAL_DMA_IRQHandler+0x194>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a19      	ldr	r2, [pc, #100]	; (8002ae8 <HAL_DMA_IRQHandler+0x1ec>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d004      	beq.n	8002a90 <HAL_DMA_IRQHandler+0x194>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a18      	ldr	r2, [pc, #96]	; (8002aec <HAL_DMA_IRQHandler+0x1f0>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d12f      	bne.n	8002af0 <HAL_DMA_IRQHandler+0x1f4>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0304 	and.w	r3, r3, #4
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	bf14      	ite	ne
 8002a9e:	2301      	movne	r3, #1
 8002aa0:	2300      	moveq	r3, #0
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	e02e      	b.n	8002b04 <HAL_DMA_IRQHandler+0x208>
 8002aa6:	bf00      	nop
 8002aa8:	24000000 	.word	0x24000000
 8002aac:	1b4e81b5 	.word	0x1b4e81b5
 8002ab0:	40020010 	.word	0x40020010
 8002ab4:	40020028 	.word	0x40020028
 8002ab8:	40020040 	.word	0x40020040
 8002abc:	40020058 	.word	0x40020058
 8002ac0:	40020070 	.word	0x40020070
 8002ac4:	40020088 	.word	0x40020088
 8002ac8:	400200a0 	.word	0x400200a0
 8002acc:	400200b8 	.word	0x400200b8
 8002ad0:	40020410 	.word	0x40020410
 8002ad4:	40020428 	.word	0x40020428
 8002ad8:	40020440 	.word	0x40020440
 8002adc:	40020458 	.word	0x40020458
 8002ae0:	40020470 	.word	0x40020470
 8002ae4:	40020488 	.word	0x40020488
 8002ae8:	400204a0 	.word	0x400204a0
 8002aec:	400204b8 	.word	0x400204b8
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0308 	and.w	r3, r3, #8
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	bf14      	ite	ne
 8002afe:	2301      	movne	r3, #1
 8002b00:	2300      	moveq	r3, #0
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d015      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 0204 	bic.w	r2, r2, #4
 8002b16:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b1c:	f003 031f 	and.w	r3, r3, #31
 8002b20:	2208      	movs	r2, #8
 8002b22:	409a      	lsls	r2, r3
 8002b24:	6a3b      	ldr	r3, [r7, #32]
 8002b26:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2c:	f043 0201 	orr.w	r2, r3, #1
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b38:	f003 031f 	and.w	r3, r3, #31
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d06e      	beq.n	8002c28 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a69      	ldr	r2, [pc, #420]	; (8002cf4 <HAL_DMA_IRQHandler+0x3f8>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d04a      	beq.n	8002bea <HAL_DMA_IRQHandler+0x2ee>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a67      	ldr	r2, [pc, #412]	; (8002cf8 <HAL_DMA_IRQHandler+0x3fc>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d045      	beq.n	8002bea <HAL_DMA_IRQHandler+0x2ee>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a66      	ldr	r2, [pc, #408]	; (8002cfc <HAL_DMA_IRQHandler+0x400>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d040      	beq.n	8002bea <HAL_DMA_IRQHandler+0x2ee>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a64      	ldr	r2, [pc, #400]	; (8002d00 <HAL_DMA_IRQHandler+0x404>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d03b      	beq.n	8002bea <HAL_DMA_IRQHandler+0x2ee>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a63      	ldr	r2, [pc, #396]	; (8002d04 <HAL_DMA_IRQHandler+0x408>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d036      	beq.n	8002bea <HAL_DMA_IRQHandler+0x2ee>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a61      	ldr	r2, [pc, #388]	; (8002d08 <HAL_DMA_IRQHandler+0x40c>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d031      	beq.n	8002bea <HAL_DMA_IRQHandler+0x2ee>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a60      	ldr	r2, [pc, #384]	; (8002d0c <HAL_DMA_IRQHandler+0x410>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d02c      	beq.n	8002bea <HAL_DMA_IRQHandler+0x2ee>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a5e      	ldr	r2, [pc, #376]	; (8002d10 <HAL_DMA_IRQHandler+0x414>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d027      	beq.n	8002bea <HAL_DMA_IRQHandler+0x2ee>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a5d      	ldr	r2, [pc, #372]	; (8002d14 <HAL_DMA_IRQHandler+0x418>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d022      	beq.n	8002bea <HAL_DMA_IRQHandler+0x2ee>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a5b      	ldr	r2, [pc, #364]	; (8002d18 <HAL_DMA_IRQHandler+0x41c>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d01d      	beq.n	8002bea <HAL_DMA_IRQHandler+0x2ee>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a5a      	ldr	r2, [pc, #360]	; (8002d1c <HAL_DMA_IRQHandler+0x420>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d018      	beq.n	8002bea <HAL_DMA_IRQHandler+0x2ee>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a58      	ldr	r2, [pc, #352]	; (8002d20 <HAL_DMA_IRQHandler+0x424>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d013      	beq.n	8002bea <HAL_DMA_IRQHandler+0x2ee>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a57      	ldr	r2, [pc, #348]	; (8002d24 <HAL_DMA_IRQHandler+0x428>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d00e      	beq.n	8002bea <HAL_DMA_IRQHandler+0x2ee>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a55      	ldr	r2, [pc, #340]	; (8002d28 <HAL_DMA_IRQHandler+0x42c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d009      	beq.n	8002bea <HAL_DMA_IRQHandler+0x2ee>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a54      	ldr	r2, [pc, #336]	; (8002d2c <HAL_DMA_IRQHandler+0x430>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d004      	beq.n	8002bea <HAL_DMA_IRQHandler+0x2ee>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a52      	ldr	r2, [pc, #328]	; (8002d30 <HAL_DMA_IRQHandler+0x434>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d10a      	bne.n	8002c00 <HAL_DMA_IRQHandler+0x304>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	bf14      	ite	ne
 8002bf8:	2301      	movne	r3, #1
 8002bfa:	2300      	moveq	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	e003      	b.n	8002c08 <HAL_DMA_IRQHandler+0x30c>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2300      	movs	r3, #0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00d      	beq.n	8002c28 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c10:	f003 031f 	and.w	r3, r3, #31
 8002c14:	2201      	movs	r2, #1
 8002c16:	409a      	lsls	r2, r3
 8002c18:	6a3b      	ldr	r3, [r7, #32]
 8002c1a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c20:	f043 0202 	orr.w	r2, r3, #2
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c2c:	f003 031f 	and.w	r3, r3, #31
 8002c30:	2204      	movs	r2, #4
 8002c32:	409a      	lsls	r2, r3
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	4013      	ands	r3, r2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 808f 	beq.w	8002d5c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a2c      	ldr	r2, [pc, #176]	; (8002cf4 <HAL_DMA_IRQHandler+0x3f8>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d04a      	beq.n	8002cde <HAL_DMA_IRQHandler+0x3e2>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a2a      	ldr	r2, [pc, #168]	; (8002cf8 <HAL_DMA_IRQHandler+0x3fc>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d045      	beq.n	8002cde <HAL_DMA_IRQHandler+0x3e2>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a29      	ldr	r2, [pc, #164]	; (8002cfc <HAL_DMA_IRQHandler+0x400>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d040      	beq.n	8002cde <HAL_DMA_IRQHandler+0x3e2>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a27      	ldr	r2, [pc, #156]	; (8002d00 <HAL_DMA_IRQHandler+0x404>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d03b      	beq.n	8002cde <HAL_DMA_IRQHandler+0x3e2>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a26      	ldr	r2, [pc, #152]	; (8002d04 <HAL_DMA_IRQHandler+0x408>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d036      	beq.n	8002cde <HAL_DMA_IRQHandler+0x3e2>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a24      	ldr	r2, [pc, #144]	; (8002d08 <HAL_DMA_IRQHandler+0x40c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d031      	beq.n	8002cde <HAL_DMA_IRQHandler+0x3e2>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a23      	ldr	r2, [pc, #140]	; (8002d0c <HAL_DMA_IRQHandler+0x410>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d02c      	beq.n	8002cde <HAL_DMA_IRQHandler+0x3e2>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a21      	ldr	r2, [pc, #132]	; (8002d10 <HAL_DMA_IRQHandler+0x414>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d027      	beq.n	8002cde <HAL_DMA_IRQHandler+0x3e2>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a20      	ldr	r2, [pc, #128]	; (8002d14 <HAL_DMA_IRQHandler+0x418>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d022      	beq.n	8002cde <HAL_DMA_IRQHandler+0x3e2>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a1e      	ldr	r2, [pc, #120]	; (8002d18 <HAL_DMA_IRQHandler+0x41c>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d01d      	beq.n	8002cde <HAL_DMA_IRQHandler+0x3e2>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a1d      	ldr	r2, [pc, #116]	; (8002d1c <HAL_DMA_IRQHandler+0x420>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d018      	beq.n	8002cde <HAL_DMA_IRQHandler+0x3e2>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a1b      	ldr	r2, [pc, #108]	; (8002d20 <HAL_DMA_IRQHandler+0x424>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d013      	beq.n	8002cde <HAL_DMA_IRQHandler+0x3e2>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a1a      	ldr	r2, [pc, #104]	; (8002d24 <HAL_DMA_IRQHandler+0x428>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d00e      	beq.n	8002cde <HAL_DMA_IRQHandler+0x3e2>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a18      	ldr	r2, [pc, #96]	; (8002d28 <HAL_DMA_IRQHandler+0x42c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d009      	beq.n	8002cde <HAL_DMA_IRQHandler+0x3e2>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a17      	ldr	r2, [pc, #92]	; (8002d2c <HAL_DMA_IRQHandler+0x430>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d004      	beq.n	8002cde <HAL_DMA_IRQHandler+0x3e2>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a15      	ldr	r2, [pc, #84]	; (8002d30 <HAL_DMA_IRQHandler+0x434>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d12a      	bne.n	8002d34 <HAL_DMA_IRQHandler+0x438>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	bf14      	ite	ne
 8002cec:	2301      	movne	r3, #1
 8002cee:	2300      	moveq	r3, #0
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	e023      	b.n	8002d3c <HAL_DMA_IRQHandler+0x440>
 8002cf4:	40020010 	.word	0x40020010
 8002cf8:	40020028 	.word	0x40020028
 8002cfc:	40020040 	.word	0x40020040
 8002d00:	40020058 	.word	0x40020058
 8002d04:	40020070 	.word	0x40020070
 8002d08:	40020088 	.word	0x40020088
 8002d0c:	400200a0 	.word	0x400200a0
 8002d10:	400200b8 	.word	0x400200b8
 8002d14:	40020410 	.word	0x40020410
 8002d18:	40020428 	.word	0x40020428
 8002d1c:	40020440 	.word	0x40020440
 8002d20:	40020458 	.word	0x40020458
 8002d24:	40020470 	.word	0x40020470
 8002d28:	40020488 	.word	0x40020488
 8002d2c:	400204a0 	.word	0x400204a0
 8002d30:	400204b8 	.word	0x400204b8
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00d      	beq.n	8002d5c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d44:	f003 031f 	and.w	r3, r3, #31
 8002d48:	2204      	movs	r2, #4
 8002d4a:	409a      	lsls	r2, r3
 8002d4c:	6a3b      	ldr	r3, [r7, #32]
 8002d4e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d54:	f043 0204 	orr.w	r2, r3, #4
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d60:	f003 031f 	and.w	r3, r3, #31
 8002d64:	2210      	movs	r2, #16
 8002d66:	409a      	lsls	r2, r3
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f000 80a6 	beq.w	8002ebe <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a85      	ldr	r2, [pc, #532]	; (8002f8c <HAL_DMA_IRQHandler+0x690>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d04a      	beq.n	8002e12 <HAL_DMA_IRQHandler+0x516>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a83      	ldr	r2, [pc, #524]	; (8002f90 <HAL_DMA_IRQHandler+0x694>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d045      	beq.n	8002e12 <HAL_DMA_IRQHandler+0x516>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a82      	ldr	r2, [pc, #520]	; (8002f94 <HAL_DMA_IRQHandler+0x698>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d040      	beq.n	8002e12 <HAL_DMA_IRQHandler+0x516>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a80      	ldr	r2, [pc, #512]	; (8002f98 <HAL_DMA_IRQHandler+0x69c>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d03b      	beq.n	8002e12 <HAL_DMA_IRQHandler+0x516>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a7f      	ldr	r2, [pc, #508]	; (8002f9c <HAL_DMA_IRQHandler+0x6a0>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d036      	beq.n	8002e12 <HAL_DMA_IRQHandler+0x516>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a7d      	ldr	r2, [pc, #500]	; (8002fa0 <HAL_DMA_IRQHandler+0x6a4>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d031      	beq.n	8002e12 <HAL_DMA_IRQHandler+0x516>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a7c      	ldr	r2, [pc, #496]	; (8002fa4 <HAL_DMA_IRQHandler+0x6a8>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d02c      	beq.n	8002e12 <HAL_DMA_IRQHandler+0x516>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a7a      	ldr	r2, [pc, #488]	; (8002fa8 <HAL_DMA_IRQHandler+0x6ac>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d027      	beq.n	8002e12 <HAL_DMA_IRQHandler+0x516>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a79      	ldr	r2, [pc, #484]	; (8002fac <HAL_DMA_IRQHandler+0x6b0>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d022      	beq.n	8002e12 <HAL_DMA_IRQHandler+0x516>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a77      	ldr	r2, [pc, #476]	; (8002fb0 <HAL_DMA_IRQHandler+0x6b4>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d01d      	beq.n	8002e12 <HAL_DMA_IRQHandler+0x516>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a76      	ldr	r2, [pc, #472]	; (8002fb4 <HAL_DMA_IRQHandler+0x6b8>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d018      	beq.n	8002e12 <HAL_DMA_IRQHandler+0x516>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a74      	ldr	r2, [pc, #464]	; (8002fb8 <HAL_DMA_IRQHandler+0x6bc>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d013      	beq.n	8002e12 <HAL_DMA_IRQHandler+0x516>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a73      	ldr	r2, [pc, #460]	; (8002fbc <HAL_DMA_IRQHandler+0x6c0>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d00e      	beq.n	8002e12 <HAL_DMA_IRQHandler+0x516>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a71      	ldr	r2, [pc, #452]	; (8002fc0 <HAL_DMA_IRQHandler+0x6c4>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d009      	beq.n	8002e12 <HAL_DMA_IRQHandler+0x516>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a70      	ldr	r2, [pc, #448]	; (8002fc4 <HAL_DMA_IRQHandler+0x6c8>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d004      	beq.n	8002e12 <HAL_DMA_IRQHandler+0x516>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a6e      	ldr	r2, [pc, #440]	; (8002fc8 <HAL_DMA_IRQHandler+0x6cc>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d10a      	bne.n	8002e28 <HAL_DMA_IRQHandler+0x52c>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0308 	and.w	r3, r3, #8
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	bf14      	ite	ne
 8002e20:	2301      	movne	r3, #1
 8002e22:	2300      	moveq	r3, #0
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	e009      	b.n	8002e3c <HAL_DMA_IRQHandler+0x540>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0304 	and.w	r3, r3, #4
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	bf14      	ite	ne
 8002e36:	2301      	movne	r3, #1
 8002e38:	2300      	moveq	r3, #0
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d03e      	beq.n	8002ebe <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e44:	f003 031f 	and.w	r3, r3, #31
 8002e48:	2210      	movs	r2, #16
 8002e4a:	409a      	lsls	r2, r3
 8002e4c:	6a3b      	ldr	r3, [r7, #32]
 8002e4e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d018      	beq.n	8002e90 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d108      	bne.n	8002e7e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d024      	beq.n	8002ebe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	4798      	blx	r3
 8002e7c:	e01f      	b.n	8002ebe <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d01b      	beq.n	8002ebe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	4798      	blx	r3
 8002e8e:	e016      	b.n	8002ebe <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d107      	bne.n	8002eae <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 0208 	bic.w	r2, r2, #8
 8002eac:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d003      	beq.n	8002ebe <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec2:	f003 031f 	and.w	r3, r3, #31
 8002ec6:	2220      	movs	r2, #32
 8002ec8:	409a      	lsls	r2, r3
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f000 8110 	beq.w	80030f4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a2c      	ldr	r2, [pc, #176]	; (8002f8c <HAL_DMA_IRQHandler+0x690>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d04a      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x678>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a2b      	ldr	r2, [pc, #172]	; (8002f90 <HAL_DMA_IRQHandler+0x694>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d045      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x678>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a29      	ldr	r2, [pc, #164]	; (8002f94 <HAL_DMA_IRQHandler+0x698>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d040      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x678>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a28      	ldr	r2, [pc, #160]	; (8002f98 <HAL_DMA_IRQHandler+0x69c>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d03b      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x678>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a26      	ldr	r2, [pc, #152]	; (8002f9c <HAL_DMA_IRQHandler+0x6a0>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d036      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x678>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a25      	ldr	r2, [pc, #148]	; (8002fa0 <HAL_DMA_IRQHandler+0x6a4>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d031      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x678>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a23      	ldr	r2, [pc, #140]	; (8002fa4 <HAL_DMA_IRQHandler+0x6a8>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d02c      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x678>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a22      	ldr	r2, [pc, #136]	; (8002fa8 <HAL_DMA_IRQHandler+0x6ac>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d027      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x678>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a20      	ldr	r2, [pc, #128]	; (8002fac <HAL_DMA_IRQHandler+0x6b0>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d022      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x678>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a1f      	ldr	r2, [pc, #124]	; (8002fb0 <HAL_DMA_IRQHandler+0x6b4>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d01d      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x678>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a1d      	ldr	r2, [pc, #116]	; (8002fb4 <HAL_DMA_IRQHandler+0x6b8>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d018      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x678>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a1c      	ldr	r2, [pc, #112]	; (8002fb8 <HAL_DMA_IRQHandler+0x6bc>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d013      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x678>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a1a      	ldr	r2, [pc, #104]	; (8002fbc <HAL_DMA_IRQHandler+0x6c0>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d00e      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x678>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a19      	ldr	r2, [pc, #100]	; (8002fc0 <HAL_DMA_IRQHandler+0x6c4>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d009      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x678>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a17      	ldr	r2, [pc, #92]	; (8002fc4 <HAL_DMA_IRQHandler+0x6c8>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d004      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x678>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a16      	ldr	r2, [pc, #88]	; (8002fc8 <HAL_DMA_IRQHandler+0x6cc>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d12b      	bne.n	8002fcc <HAL_DMA_IRQHandler+0x6d0>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0310 	and.w	r3, r3, #16
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	bf14      	ite	ne
 8002f82:	2301      	movne	r3, #1
 8002f84:	2300      	moveq	r3, #0
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	e02a      	b.n	8002fe0 <HAL_DMA_IRQHandler+0x6e4>
 8002f8a:	bf00      	nop
 8002f8c:	40020010 	.word	0x40020010
 8002f90:	40020028 	.word	0x40020028
 8002f94:	40020040 	.word	0x40020040
 8002f98:	40020058 	.word	0x40020058
 8002f9c:	40020070 	.word	0x40020070
 8002fa0:	40020088 	.word	0x40020088
 8002fa4:	400200a0 	.word	0x400200a0
 8002fa8:	400200b8 	.word	0x400200b8
 8002fac:	40020410 	.word	0x40020410
 8002fb0:	40020428 	.word	0x40020428
 8002fb4:	40020440 	.word	0x40020440
 8002fb8:	40020458 	.word	0x40020458
 8002fbc:	40020470 	.word	0x40020470
 8002fc0:	40020488 	.word	0x40020488
 8002fc4:	400204a0 	.word	0x400204a0
 8002fc8:	400204b8 	.word	0x400204b8
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	bf14      	ite	ne
 8002fda:	2301      	movne	r3, #1
 8002fdc:	2300      	moveq	r3, #0
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f000 8087 	beq.w	80030f4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fea:	f003 031f 	and.w	r3, r3, #31
 8002fee:	2220      	movs	r2, #32
 8002ff0:	409a      	lsls	r2, r3
 8002ff2:	6a3b      	ldr	r3, [r7, #32]
 8002ff4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b04      	cmp	r3, #4
 8003000:	d139      	bne.n	8003076 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 0216 	bic.w	r2, r2, #22
 8003010:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	695a      	ldr	r2, [r3, #20]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003020:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	2b00      	cmp	r3, #0
 8003028:	d103      	bne.n	8003032 <HAL_DMA_IRQHandler+0x736>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800302e:	2b00      	cmp	r3, #0
 8003030:	d007      	beq.n	8003042 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 0208 	bic.w	r2, r2, #8
 8003040:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003046:	f003 031f 	and.w	r3, r3, #31
 800304a:	223f      	movs	r2, #63	; 0x3f
 800304c:	409a      	lsls	r2, r3
 800304e:	6a3b      	ldr	r3, [r7, #32]
 8003050:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003066:	2b00      	cmp	r3, #0
 8003068:	f000 834a 	beq.w	8003700 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	4798      	blx	r3
          }
          return;
 8003074:	e344      	b.n	8003700 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d018      	beq.n	80030b6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d108      	bne.n	80030a4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003096:	2b00      	cmp	r3, #0
 8003098:	d02c      	beq.n	80030f4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	4798      	blx	r3
 80030a2:	e027      	b.n	80030f4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d023      	beq.n	80030f4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	4798      	blx	r3
 80030b4:	e01e      	b.n	80030f4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10f      	bne.n	80030e4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f022 0210 	bic.w	r2, r2, #16
 80030d2:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d003      	beq.n	80030f4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 8306 	beq.w	800370a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 8088 	beq.w	800321c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2204      	movs	r2, #4
 8003110:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a7a      	ldr	r2, [pc, #488]	; (8003304 <HAL_DMA_IRQHandler+0xa08>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d04a      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x8b8>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a79      	ldr	r2, [pc, #484]	; (8003308 <HAL_DMA_IRQHandler+0xa0c>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d045      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x8b8>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a77      	ldr	r2, [pc, #476]	; (800330c <HAL_DMA_IRQHandler+0xa10>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d040      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x8b8>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a76      	ldr	r2, [pc, #472]	; (8003310 <HAL_DMA_IRQHandler+0xa14>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d03b      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x8b8>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a74      	ldr	r2, [pc, #464]	; (8003314 <HAL_DMA_IRQHandler+0xa18>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d036      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x8b8>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a73      	ldr	r2, [pc, #460]	; (8003318 <HAL_DMA_IRQHandler+0xa1c>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d031      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x8b8>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a71      	ldr	r2, [pc, #452]	; (800331c <HAL_DMA_IRQHandler+0xa20>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d02c      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x8b8>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a70      	ldr	r2, [pc, #448]	; (8003320 <HAL_DMA_IRQHandler+0xa24>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d027      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x8b8>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a6e      	ldr	r2, [pc, #440]	; (8003324 <HAL_DMA_IRQHandler+0xa28>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d022      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x8b8>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a6d      	ldr	r2, [pc, #436]	; (8003328 <HAL_DMA_IRQHandler+0xa2c>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d01d      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x8b8>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a6b      	ldr	r2, [pc, #428]	; (800332c <HAL_DMA_IRQHandler+0xa30>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d018      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x8b8>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a6a      	ldr	r2, [pc, #424]	; (8003330 <HAL_DMA_IRQHandler+0xa34>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d013      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x8b8>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a68      	ldr	r2, [pc, #416]	; (8003334 <HAL_DMA_IRQHandler+0xa38>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d00e      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x8b8>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a67      	ldr	r2, [pc, #412]	; (8003338 <HAL_DMA_IRQHandler+0xa3c>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d009      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x8b8>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a65      	ldr	r2, [pc, #404]	; (800333c <HAL_DMA_IRQHandler+0xa40>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d004      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x8b8>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a64      	ldr	r2, [pc, #400]	; (8003340 <HAL_DMA_IRQHandler+0xa44>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d108      	bne.n	80031c6 <HAL_DMA_IRQHandler+0x8ca>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f022 0201 	bic.w	r2, r2, #1
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	e007      	b.n	80031d6 <HAL_DMA_IRQHandler+0x8da>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0201 	bic.w	r2, r2, #1
 80031d4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	3301      	adds	r3, #1
 80031da:	60fb      	str	r3, [r7, #12]
 80031dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031de:	429a      	cmp	r2, r3
 80031e0:	d307      	bcc.n	80031f2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1f2      	bne.n	80031d6 <HAL_DMA_IRQHandler+0x8da>
 80031f0:	e000      	b.n	80031f4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80031f2:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b00      	cmp	r3, #0
 8003208:	d004      	beq.n	8003214 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2203      	movs	r2, #3
 800320e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003212:	e003      	b.n	800321c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 8272 	beq.w	800370a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	4798      	blx	r3
 800322e:	e26c      	b.n	800370a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a43      	ldr	r2, [pc, #268]	; (8003344 <HAL_DMA_IRQHandler+0xa48>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d022      	beq.n	8003280 <HAL_DMA_IRQHandler+0x984>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a42      	ldr	r2, [pc, #264]	; (8003348 <HAL_DMA_IRQHandler+0xa4c>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d01d      	beq.n	8003280 <HAL_DMA_IRQHandler+0x984>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a40      	ldr	r2, [pc, #256]	; (800334c <HAL_DMA_IRQHandler+0xa50>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d018      	beq.n	8003280 <HAL_DMA_IRQHandler+0x984>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a3f      	ldr	r2, [pc, #252]	; (8003350 <HAL_DMA_IRQHandler+0xa54>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d013      	beq.n	8003280 <HAL_DMA_IRQHandler+0x984>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a3d      	ldr	r2, [pc, #244]	; (8003354 <HAL_DMA_IRQHandler+0xa58>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d00e      	beq.n	8003280 <HAL_DMA_IRQHandler+0x984>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a3c      	ldr	r2, [pc, #240]	; (8003358 <HAL_DMA_IRQHandler+0xa5c>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d009      	beq.n	8003280 <HAL_DMA_IRQHandler+0x984>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a3a      	ldr	r2, [pc, #232]	; (800335c <HAL_DMA_IRQHandler+0xa60>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d004      	beq.n	8003280 <HAL_DMA_IRQHandler+0x984>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a39      	ldr	r2, [pc, #228]	; (8003360 <HAL_DMA_IRQHandler+0xa64>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d101      	bne.n	8003284 <HAL_DMA_IRQHandler+0x988>
 8003280:	2301      	movs	r3, #1
 8003282:	e000      	b.n	8003286 <HAL_DMA_IRQHandler+0x98a>
 8003284:	2300      	movs	r3, #0
 8003286:	2b00      	cmp	r3, #0
 8003288:	f000 823f 	beq.w	800370a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003298:	f003 031f 	and.w	r3, r3, #31
 800329c:	2204      	movs	r2, #4
 800329e:	409a      	lsls	r2, r3
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	4013      	ands	r3, r2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 80cd 	beq.w	8003444 <HAL_DMA_IRQHandler+0xb48>
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 80c7 	beq.w	8003444 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ba:	f003 031f 	and.w	r3, r3, #31
 80032be:	2204      	movs	r2, #4
 80032c0:	409a      	lsls	r2, r3
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d049      	beq.n	8003364 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d109      	bne.n	80032ee <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f000 8210 	beq.w	8003704 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032ec:	e20a      	b.n	8003704 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 8206 	beq.w	8003704 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003300:	e200      	b.n	8003704 <HAL_DMA_IRQHandler+0xe08>
 8003302:	bf00      	nop
 8003304:	40020010 	.word	0x40020010
 8003308:	40020028 	.word	0x40020028
 800330c:	40020040 	.word	0x40020040
 8003310:	40020058 	.word	0x40020058
 8003314:	40020070 	.word	0x40020070
 8003318:	40020088 	.word	0x40020088
 800331c:	400200a0 	.word	0x400200a0
 8003320:	400200b8 	.word	0x400200b8
 8003324:	40020410 	.word	0x40020410
 8003328:	40020428 	.word	0x40020428
 800332c:	40020440 	.word	0x40020440
 8003330:	40020458 	.word	0x40020458
 8003334:	40020470 	.word	0x40020470
 8003338:	40020488 	.word	0x40020488
 800333c:	400204a0 	.word	0x400204a0
 8003340:	400204b8 	.word	0x400204b8
 8003344:	58025408 	.word	0x58025408
 8003348:	5802541c 	.word	0x5802541c
 800334c:	58025430 	.word	0x58025430
 8003350:	58025444 	.word	0x58025444
 8003354:	58025458 	.word	0x58025458
 8003358:	5802546c 	.word	0x5802546c
 800335c:	58025480 	.word	0x58025480
 8003360:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	f003 0320 	and.w	r3, r3, #32
 800336a:	2b00      	cmp	r3, #0
 800336c:	d160      	bne.n	8003430 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a8c      	ldr	r2, [pc, #560]	; (80035a4 <HAL_DMA_IRQHandler+0xca8>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d04a      	beq.n	800340e <HAL_DMA_IRQHandler+0xb12>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a8a      	ldr	r2, [pc, #552]	; (80035a8 <HAL_DMA_IRQHandler+0xcac>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d045      	beq.n	800340e <HAL_DMA_IRQHandler+0xb12>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a89      	ldr	r2, [pc, #548]	; (80035ac <HAL_DMA_IRQHandler+0xcb0>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d040      	beq.n	800340e <HAL_DMA_IRQHandler+0xb12>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a87      	ldr	r2, [pc, #540]	; (80035b0 <HAL_DMA_IRQHandler+0xcb4>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d03b      	beq.n	800340e <HAL_DMA_IRQHandler+0xb12>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a86      	ldr	r2, [pc, #536]	; (80035b4 <HAL_DMA_IRQHandler+0xcb8>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d036      	beq.n	800340e <HAL_DMA_IRQHandler+0xb12>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a84      	ldr	r2, [pc, #528]	; (80035b8 <HAL_DMA_IRQHandler+0xcbc>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d031      	beq.n	800340e <HAL_DMA_IRQHandler+0xb12>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a83      	ldr	r2, [pc, #524]	; (80035bc <HAL_DMA_IRQHandler+0xcc0>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d02c      	beq.n	800340e <HAL_DMA_IRQHandler+0xb12>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a81      	ldr	r2, [pc, #516]	; (80035c0 <HAL_DMA_IRQHandler+0xcc4>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d027      	beq.n	800340e <HAL_DMA_IRQHandler+0xb12>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a80      	ldr	r2, [pc, #512]	; (80035c4 <HAL_DMA_IRQHandler+0xcc8>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d022      	beq.n	800340e <HAL_DMA_IRQHandler+0xb12>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a7e      	ldr	r2, [pc, #504]	; (80035c8 <HAL_DMA_IRQHandler+0xccc>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d01d      	beq.n	800340e <HAL_DMA_IRQHandler+0xb12>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a7d      	ldr	r2, [pc, #500]	; (80035cc <HAL_DMA_IRQHandler+0xcd0>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d018      	beq.n	800340e <HAL_DMA_IRQHandler+0xb12>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a7b      	ldr	r2, [pc, #492]	; (80035d0 <HAL_DMA_IRQHandler+0xcd4>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d013      	beq.n	800340e <HAL_DMA_IRQHandler+0xb12>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a7a      	ldr	r2, [pc, #488]	; (80035d4 <HAL_DMA_IRQHandler+0xcd8>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d00e      	beq.n	800340e <HAL_DMA_IRQHandler+0xb12>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a78      	ldr	r2, [pc, #480]	; (80035d8 <HAL_DMA_IRQHandler+0xcdc>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d009      	beq.n	800340e <HAL_DMA_IRQHandler+0xb12>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a77      	ldr	r2, [pc, #476]	; (80035dc <HAL_DMA_IRQHandler+0xce0>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d004      	beq.n	800340e <HAL_DMA_IRQHandler+0xb12>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a75      	ldr	r2, [pc, #468]	; (80035e0 <HAL_DMA_IRQHandler+0xce4>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d108      	bne.n	8003420 <HAL_DMA_IRQHandler+0xb24>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 0208 	bic.w	r2, r2, #8
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	e007      	b.n	8003430 <HAL_DMA_IRQHandler+0xb34>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 0204 	bic.w	r2, r2, #4
 800342e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 8165 	beq.w	8003704 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003442:	e15f      	b.n	8003704 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003448:	f003 031f 	and.w	r3, r3, #31
 800344c:	2202      	movs	r2, #2
 800344e:	409a      	lsls	r2, r3
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	4013      	ands	r3, r2
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 80c5 	beq.w	80035e4 <HAL_DMA_IRQHandler+0xce8>
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b00      	cmp	r3, #0
 8003462:	f000 80bf 	beq.w	80035e4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800346a:	f003 031f 	and.w	r3, r3, #31
 800346e:	2202      	movs	r2, #2
 8003470:	409a      	lsls	r2, r3
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d018      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d109      	bne.n	800349e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348e:	2b00      	cmp	r3, #0
 8003490:	f000 813a 	beq.w	8003708 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800349c:	e134      	b.n	8003708 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 8130 	beq.w	8003708 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034b0:	e12a      	b.n	8003708 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	f003 0320 	and.w	r3, r3, #32
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d168      	bne.n	800358e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a38      	ldr	r2, [pc, #224]	; (80035a4 <HAL_DMA_IRQHandler+0xca8>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d04a      	beq.n	800355c <HAL_DMA_IRQHandler+0xc60>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a37      	ldr	r2, [pc, #220]	; (80035a8 <HAL_DMA_IRQHandler+0xcac>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d045      	beq.n	800355c <HAL_DMA_IRQHandler+0xc60>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a35      	ldr	r2, [pc, #212]	; (80035ac <HAL_DMA_IRQHandler+0xcb0>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d040      	beq.n	800355c <HAL_DMA_IRQHandler+0xc60>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a34      	ldr	r2, [pc, #208]	; (80035b0 <HAL_DMA_IRQHandler+0xcb4>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d03b      	beq.n	800355c <HAL_DMA_IRQHandler+0xc60>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a32      	ldr	r2, [pc, #200]	; (80035b4 <HAL_DMA_IRQHandler+0xcb8>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d036      	beq.n	800355c <HAL_DMA_IRQHandler+0xc60>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a31      	ldr	r2, [pc, #196]	; (80035b8 <HAL_DMA_IRQHandler+0xcbc>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d031      	beq.n	800355c <HAL_DMA_IRQHandler+0xc60>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a2f      	ldr	r2, [pc, #188]	; (80035bc <HAL_DMA_IRQHandler+0xcc0>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d02c      	beq.n	800355c <HAL_DMA_IRQHandler+0xc60>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a2e      	ldr	r2, [pc, #184]	; (80035c0 <HAL_DMA_IRQHandler+0xcc4>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d027      	beq.n	800355c <HAL_DMA_IRQHandler+0xc60>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a2c      	ldr	r2, [pc, #176]	; (80035c4 <HAL_DMA_IRQHandler+0xcc8>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d022      	beq.n	800355c <HAL_DMA_IRQHandler+0xc60>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a2b      	ldr	r2, [pc, #172]	; (80035c8 <HAL_DMA_IRQHandler+0xccc>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d01d      	beq.n	800355c <HAL_DMA_IRQHandler+0xc60>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a29      	ldr	r2, [pc, #164]	; (80035cc <HAL_DMA_IRQHandler+0xcd0>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d018      	beq.n	800355c <HAL_DMA_IRQHandler+0xc60>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a28      	ldr	r2, [pc, #160]	; (80035d0 <HAL_DMA_IRQHandler+0xcd4>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d013      	beq.n	800355c <HAL_DMA_IRQHandler+0xc60>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a26      	ldr	r2, [pc, #152]	; (80035d4 <HAL_DMA_IRQHandler+0xcd8>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d00e      	beq.n	800355c <HAL_DMA_IRQHandler+0xc60>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a25      	ldr	r2, [pc, #148]	; (80035d8 <HAL_DMA_IRQHandler+0xcdc>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d009      	beq.n	800355c <HAL_DMA_IRQHandler+0xc60>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a23      	ldr	r2, [pc, #140]	; (80035dc <HAL_DMA_IRQHandler+0xce0>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d004      	beq.n	800355c <HAL_DMA_IRQHandler+0xc60>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a22      	ldr	r2, [pc, #136]	; (80035e0 <HAL_DMA_IRQHandler+0xce4>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d108      	bne.n	800356e <HAL_DMA_IRQHandler+0xc72>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 0214 	bic.w	r2, r2, #20
 800356a:	601a      	str	r2, [r3, #0]
 800356c:	e007      	b.n	800357e <HAL_DMA_IRQHandler+0xc82>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 020a 	bic.w	r2, r2, #10
 800357c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 80b8 	beq.w	8003708 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035a0:	e0b2      	b.n	8003708 <HAL_DMA_IRQHandler+0xe0c>
 80035a2:	bf00      	nop
 80035a4:	40020010 	.word	0x40020010
 80035a8:	40020028 	.word	0x40020028
 80035ac:	40020040 	.word	0x40020040
 80035b0:	40020058 	.word	0x40020058
 80035b4:	40020070 	.word	0x40020070
 80035b8:	40020088 	.word	0x40020088
 80035bc:	400200a0 	.word	0x400200a0
 80035c0:	400200b8 	.word	0x400200b8
 80035c4:	40020410 	.word	0x40020410
 80035c8:	40020428 	.word	0x40020428
 80035cc:	40020440 	.word	0x40020440
 80035d0:	40020458 	.word	0x40020458
 80035d4:	40020470 	.word	0x40020470
 80035d8:	40020488 	.word	0x40020488
 80035dc:	400204a0 	.word	0x400204a0
 80035e0:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e8:	f003 031f 	and.w	r3, r3, #31
 80035ec:	2208      	movs	r2, #8
 80035ee:	409a      	lsls	r2, r3
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	4013      	ands	r3, r2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 8088 	beq.w	800370a <HAL_DMA_IRQHandler+0xe0e>
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	f003 0308 	and.w	r3, r3, #8
 8003600:	2b00      	cmp	r3, #0
 8003602:	f000 8082 	beq.w	800370a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a41      	ldr	r2, [pc, #260]	; (8003710 <HAL_DMA_IRQHandler+0xe14>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d04a      	beq.n	80036a6 <HAL_DMA_IRQHandler+0xdaa>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a3f      	ldr	r2, [pc, #252]	; (8003714 <HAL_DMA_IRQHandler+0xe18>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d045      	beq.n	80036a6 <HAL_DMA_IRQHandler+0xdaa>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a3e      	ldr	r2, [pc, #248]	; (8003718 <HAL_DMA_IRQHandler+0xe1c>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d040      	beq.n	80036a6 <HAL_DMA_IRQHandler+0xdaa>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a3c      	ldr	r2, [pc, #240]	; (800371c <HAL_DMA_IRQHandler+0xe20>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d03b      	beq.n	80036a6 <HAL_DMA_IRQHandler+0xdaa>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a3b      	ldr	r2, [pc, #236]	; (8003720 <HAL_DMA_IRQHandler+0xe24>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d036      	beq.n	80036a6 <HAL_DMA_IRQHandler+0xdaa>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a39      	ldr	r2, [pc, #228]	; (8003724 <HAL_DMA_IRQHandler+0xe28>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d031      	beq.n	80036a6 <HAL_DMA_IRQHandler+0xdaa>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a38      	ldr	r2, [pc, #224]	; (8003728 <HAL_DMA_IRQHandler+0xe2c>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d02c      	beq.n	80036a6 <HAL_DMA_IRQHandler+0xdaa>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a36      	ldr	r2, [pc, #216]	; (800372c <HAL_DMA_IRQHandler+0xe30>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d027      	beq.n	80036a6 <HAL_DMA_IRQHandler+0xdaa>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a35      	ldr	r2, [pc, #212]	; (8003730 <HAL_DMA_IRQHandler+0xe34>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d022      	beq.n	80036a6 <HAL_DMA_IRQHandler+0xdaa>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a33      	ldr	r2, [pc, #204]	; (8003734 <HAL_DMA_IRQHandler+0xe38>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d01d      	beq.n	80036a6 <HAL_DMA_IRQHandler+0xdaa>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a32      	ldr	r2, [pc, #200]	; (8003738 <HAL_DMA_IRQHandler+0xe3c>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d018      	beq.n	80036a6 <HAL_DMA_IRQHandler+0xdaa>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a30      	ldr	r2, [pc, #192]	; (800373c <HAL_DMA_IRQHandler+0xe40>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d013      	beq.n	80036a6 <HAL_DMA_IRQHandler+0xdaa>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a2f      	ldr	r2, [pc, #188]	; (8003740 <HAL_DMA_IRQHandler+0xe44>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d00e      	beq.n	80036a6 <HAL_DMA_IRQHandler+0xdaa>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a2d      	ldr	r2, [pc, #180]	; (8003744 <HAL_DMA_IRQHandler+0xe48>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d009      	beq.n	80036a6 <HAL_DMA_IRQHandler+0xdaa>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a2c      	ldr	r2, [pc, #176]	; (8003748 <HAL_DMA_IRQHandler+0xe4c>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d004      	beq.n	80036a6 <HAL_DMA_IRQHandler+0xdaa>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a2a      	ldr	r2, [pc, #168]	; (800374c <HAL_DMA_IRQHandler+0xe50>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d108      	bne.n	80036b8 <HAL_DMA_IRQHandler+0xdbc>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f022 021c 	bic.w	r2, r2, #28
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	e007      	b.n	80036c8 <HAL_DMA_IRQHandler+0xdcc>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 020e 	bic.w	r2, r2, #14
 80036c6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036cc:	f003 031f 	and.w	r3, r3, #31
 80036d0:	2201      	movs	r2, #1
 80036d2:	409a      	lsls	r2, r3
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d009      	beq.n	800370a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	4798      	blx	r3
 80036fe:	e004      	b.n	800370a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003700:	bf00      	nop
 8003702:	e002      	b.n	800370a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003704:	bf00      	nop
 8003706:	e000      	b.n	800370a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003708:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800370a:	3728      	adds	r7, #40	; 0x28
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40020010 	.word	0x40020010
 8003714:	40020028 	.word	0x40020028
 8003718:	40020040 	.word	0x40020040
 800371c:	40020058 	.word	0x40020058
 8003720:	40020070 	.word	0x40020070
 8003724:	40020088 	.word	0x40020088
 8003728:	400200a0 	.word	0x400200a0
 800372c:	400200b8 	.word	0x400200b8
 8003730:	40020410 	.word	0x40020410
 8003734:	40020428 	.word	0x40020428
 8003738:	40020440 	.word	0x40020440
 800373c:	40020458 	.word	0x40020458
 8003740:	40020470 	.word	0x40020470
 8003744:	40020488 	.word	0x40020488
 8003748:	400204a0 	.word	0x400204a0
 800374c:	400204b8 	.word	0x400204b8

08003750 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003750:	b480      	push	{r7}
 8003752:	b087      	sub	sp, #28
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]
 800375c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003762:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003768:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a84      	ldr	r2, [pc, #528]	; (8003980 <DMA_SetConfig+0x230>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d072      	beq.n	800385a <DMA_SetConfig+0x10a>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a82      	ldr	r2, [pc, #520]	; (8003984 <DMA_SetConfig+0x234>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d06d      	beq.n	800385a <DMA_SetConfig+0x10a>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a81      	ldr	r2, [pc, #516]	; (8003988 <DMA_SetConfig+0x238>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d068      	beq.n	800385a <DMA_SetConfig+0x10a>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a7f      	ldr	r2, [pc, #508]	; (800398c <DMA_SetConfig+0x23c>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d063      	beq.n	800385a <DMA_SetConfig+0x10a>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a7e      	ldr	r2, [pc, #504]	; (8003990 <DMA_SetConfig+0x240>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d05e      	beq.n	800385a <DMA_SetConfig+0x10a>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a7c      	ldr	r2, [pc, #496]	; (8003994 <DMA_SetConfig+0x244>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d059      	beq.n	800385a <DMA_SetConfig+0x10a>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a7b      	ldr	r2, [pc, #492]	; (8003998 <DMA_SetConfig+0x248>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d054      	beq.n	800385a <DMA_SetConfig+0x10a>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a79      	ldr	r2, [pc, #484]	; (800399c <DMA_SetConfig+0x24c>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d04f      	beq.n	800385a <DMA_SetConfig+0x10a>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a78      	ldr	r2, [pc, #480]	; (80039a0 <DMA_SetConfig+0x250>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d04a      	beq.n	800385a <DMA_SetConfig+0x10a>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a76      	ldr	r2, [pc, #472]	; (80039a4 <DMA_SetConfig+0x254>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d045      	beq.n	800385a <DMA_SetConfig+0x10a>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a75      	ldr	r2, [pc, #468]	; (80039a8 <DMA_SetConfig+0x258>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d040      	beq.n	800385a <DMA_SetConfig+0x10a>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a73      	ldr	r2, [pc, #460]	; (80039ac <DMA_SetConfig+0x25c>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d03b      	beq.n	800385a <DMA_SetConfig+0x10a>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a72      	ldr	r2, [pc, #456]	; (80039b0 <DMA_SetConfig+0x260>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d036      	beq.n	800385a <DMA_SetConfig+0x10a>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a70      	ldr	r2, [pc, #448]	; (80039b4 <DMA_SetConfig+0x264>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d031      	beq.n	800385a <DMA_SetConfig+0x10a>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a6f      	ldr	r2, [pc, #444]	; (80039b8 <DMA_SetConfig+0x268>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d02c      	beq.n	800385a <DMA_SetConfig+0x10a>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a6d      	ldr	r2, [pc, #436]	; (80039bc <DMA_SetConfig+0x26c>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d027      	beq.n	800385a <DMA_SetConfig+0x10a>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a6c      	ldr	r2, [pc, #432]	; (80039c0 <DMA_SetConfig+0x270>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d022      	beq.n	800385a <DMA_SetConfig+0x10a>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a6a      	ldr	r2, [pc, #424]	; (80039c4 <DMA_SetConfig+0x274>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d01d      	beq.n	800385a <DMA_SetConfig+0x10a>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a69      	ldr	r2, [pc, #420]	; (80039c8 <DMA_SetConfig+0x278>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d018      	beq.n	800385a <DMA_SetConfig+0x10a>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a67      	ldr	r2, [pc, #412]	; (80039cc <DMA_SetConfig+0x27c>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d013      	beq.n	800385a <DMA_SetConfig+0x10a>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a66      	ldr	r2, [pc, #408]	; (80039d0 <DMA_SetConfig+0x280>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d00e      	beq.n	800385a <DMA_SetConfig+0x10a>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a64      	ldr	r2, [pc, #400]	; (80039d4 <DMA_SetConfig+0x284>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d009      	beq.n	800385a <DMA_SetConfig+0x10a>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a63      	ldr	r2, [pc, #396]	; (80039d8 <DMA_SetConfig+0x288>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d004      	beq.n	800385a <DMA_SetConfig+0x10a>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a61      	ldr	r2, [pc, #388]	; (80039dc <DMA_SetConfig+0x28c>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d101      	bne.n	800385e <DMA_SetConfig+0x10e>
 800385a:	2301      	movs	r3, #1
 800385c:	e000      	b.n	8003860 <DMA_SetConfig+0x110>
 800385e:	2300      	movs	r3, #0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00d      	beq.n	8003880 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800386c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003872:	2b00      	cmp	r3, #0
 8003874:	d004      	beq.n	8003880 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800387e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a3e      	ldr	r2, [pc, #248]	; (8003980 <DMA_SetConfig+0x230>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d04a      	beq.n	8003920 <DMA_SetConfig+0x1d0>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a3d      	ldr	r2, [pc, #244]	; (8003984 <DMA_SetConfig+0x234>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d045      	beq.n	8003920 <DMA_SetConfig+0x1d0>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a3b      	ldr	r2, [pc, #236]	; (8003988 <DMA_SetConfig+0x238>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d040      	beq.n	8003920 <DMA_SetConfig+0x1d0>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a3a      	ldr	r2, [pc, #232]	; (800398c <DMA_SetConfig+0x23c>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d03b      	beq.n	8003920 <DMA_SetConfig+0x1d0>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a38      	ldr	r2, [pc, #224]	; (8003990 <DMA_SetConfig+0x240>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d036      	beq.n	8003920 <DMA_SetConfig+0x1d0>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a37      	ldr	r2, [pc, #220]	; (8003994 <DMA_SetConfig+0x244>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d031      	beq.n	8003920 <DMA_SetConfig+0x1d0>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a35      	ldr	r2, [pc, #212]	; (8003998 <DMA_SetConfig+0x248>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d02c      	beq.n	8003920 <DMA_SetConfig+0x1d0>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a34      	ldr	r2, [pc, #208]	; (800399c <DMA_SetConfig+0x24c>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d027      	beq.n	8003920 <DMA_SetConfig+0x1d0>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a32      	ldr	r2, [pc, #200]	; (80039a0 <DMA_SetConfig+0x250>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d022      	beq.n	8003920 <DMA_SetConfig+0x1d0>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a31      	ldr	r2, [pc, #196]	; (80039a4 <DMA_SetConfig+0x254>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d01d      	beq.n	8003920 <DMA_SetConfig+0x1d0>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a2f      	ldr	r2, [pc, #188]	; (80039a8 <DMA_SetConfig+0x258>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d018      	beq.n	8003920 <DMA_SetConfig+0x1d0>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a2e      	ldr	r2, [pc, #184]	; (80039ac <DMA_SetConfig+0x25c>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d013      	beq.n	8003920 <DMA_SetConfig+0x1d0>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a2c      	ldr	r2, [pc, #176]	; (80039b0 <DMA_SetConfig+0x260>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d00e      	beq.n	8003920 <DMA_SetConfig+0x1d0>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a2b      	ldr	r2, [pc, #172]	; (80039b4 <DMA_SetConfig+0x264>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d009      	beq.n	8003920 <DMA_SetConfig+0x1d0>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a29      	ldr	r2, [pc, #164]	; (80039b8 <DMA_SetConfig+0x268>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d004      	beq.n	8003920 <DMA_SetConfig+0x1d0>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a28      	ldr	r2, [pc, #160]	; (80039bc <DMA_SetConfig+0x26c>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d101      	bne.n	8003924 <DMA_SetConfig+0x1d4>
 8003920:	2301      	movs	r3, #1
 8003922:	e000      	b.n	8003926 <DMA_SetConfig+0x1d6>
 8003924:	2300      	movs	r3, #0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d05a      	beq.n	80039e0 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800392e:	f003 031f 	and.w	r3, r3, #31
 8003932:	223f      	movs	r2, #63	; 0x3f
 8003934:	409a      	lsls	r2, r3
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003948:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	2b40      	cmp	r3, #64	; 0x40
 8003958:	d108      	bne.n	800396c <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800396a:	e087      	b.n	8003a7c <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68ba      	ldr	r2, [r7, #8]
 8003972:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	60da      	str	r2, [r3, #12]
}
 800397c:	e07e      	b.n	8003a7c <DMA_SetConfig+0x32c>
 800397e:	bf00      	nop
 8003980:	40020010 	.word	0x40020010
 8003984:	40020028 	.word	0x40020028
 8003988:	40020040 	.word	0x40020040
 800398c:	40020058 	.word	0x40020058
 8003990:	40020070 	.word	0x40020070
 8003994:	40020088 	.word	0x40020088
 8003998:	400200a0 	.word	0x400200a0
 800399c:	400200b8 	.word	0x400200b8
 80039a0:	40020410 	.word	0x40020410
 80039a4:	40020428 	.word	0x40020428
 80039a8:	40020440 	.word	0x40020440
 80039ac:	40020458 	.word	0x40020458
 80039b0:	40020470 	.word	0x40020470
 80039b4:	40020488 	.word	0x40020488
 80039b8:	400204a0 	.word	0x400204a0
 80039bc:	400204b8 	.word	0x400204b8
 80039c0:	58025408 	.word	0x58025408
 80039c4:	5802541c 	.word	0x5802541c
 80039c8:	58025430 	.word	0x58025430
 80039cc:	58025444 	.word	0x58025444
 80039d0:	58025458 	.word	0x58025458
 80039d4:	5802546c 	.word	0x5802546c
 80039d8:	58025480 	.word	0x58025480
 80039dc:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a28      	ldr	r2, [pc, #160]	; (8003a88 <DMA_SetConfig+0x338>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d022      	beq.n	8003a30 <DMA_SetConfig+0x2e0>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a27      	ldr	r2, [pc, #156]	; (8003a8c <DMA_SetConfig+0x33c>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d01d      	beq.n	8003a30 <DMA_SetConfig+0x2e0>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a25      	ldr	r2, [pc, #148]	; (8003a90 <DMA_SetConfig+0x340>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d018      	beq.n	8003a30 <DMA_SetConfig+0x2e0>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a24      	ldr	r2, [pc, #144]	; (8003a94 <DMA_SetConfig+0x344>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d013      	beq.n	8003a30 <DMA_SetConfig+0x2e0>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a22      	ldr	r2, [pc, #136]	; (8003a98 <DMA_SetConfig+0x348>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d00e      	beq.n	8003a30 <DMA_SetConfig+0x2e0>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a21      	ldr	r2, [pc, #132]	; (8003a9c <DMA_SetConfig+0x34c>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d009      	beq.n	8003a30 <DMA_SetConfig+0x2e0>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a1f      	ldr	r2, [pc, #124]	; (8003aa0 <DMA_SetConfig+0x350>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d004      	beq.n	8003a30 <DMA_SetConfig+0x2e0>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a1e      	ldr	r2, [pc, #120]	; (8003aa4 <DMA_SetConfig+0x354>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d101      	bne.n	8003a34 <DMA_SetConfig+0x2e4>
 8003a30:	2301      	movs	r3, #1
 8003a32:	e000      	b.n	8003a36 <DMA_SetConfig+0x2e6>
 8003a34:	2300      	movs	r3, #0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d020      	beq.n	8003a7c <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a3e:	f003 031f 	and.w	r3, r3, #31
 8003a42:	2201      	movs	r2, #1
 8003a44:	409a      	lsls	r2, r3
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	2b40      	cmp	r3, #64	; 0x40
 8003a58:	d108      	bne.n	8003a6c <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	60da      	str	r2, [r3, #12]
}
 8003a6a:	e007      	b.n	8003a7c <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68ba      	ldr	r2, [r7, #8]
 8003a72:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	60da      	str	r2, [r3, #12]
}
 8003a7c:	bf00      	nop
 8003a7e:	371c      	adds	r7, #28
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr
 8003a88:	58025408 	.word	0x58025408
 8003a8c:	5802541c 	.word	0x5802541c
 8003a90:	58025430 	.word	0x58025430
 8003a94:	58025444 	.word	0x58025444
 8003a98:	58025458 	.word	0x58025458
 8003a9c:	5802546c 	.word	0x5802546c
 8003aa0:	58025480 	.word	0x58025480
 8003aa4:	58025494 	.word	0x58025494

08003aa8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a42      	ldr	r2, [pc, #264]	; (8003bc0 <DMA_CalcBaseAndBitshift+0x118>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d04a      	beq.n	8003b50 <DMA_CalcBaseAndBitshift+0xa8>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a41      	ldr	r2, [pc, #260]	; (8003bc4 <DMA_CalcBaseAndBitshift+0x11c>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d045      	beq.n	8003b50 <DMA_CalcBaseAndBitshift+0xa8>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a3f      	ldr	r2, [pc, #252]	; (8003bc8 <DMA_CalcBaseAndBitshift+0x120>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d040      	beq.n	8003b50 <DMA_CalcBaseAndBitshift+0xa8>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a3e      	ldr	r2, [pc, #248]	; (8003bcc <DMA_CalcBaseAndBitshift+0x124>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d03b      	beq.n	8003b50 <DMA_CalcBaseAndBitshift+0xa8>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a3c      	ldr	r2, [pc, #240]	; (8003bd0 <DMA_CalcBaseAndBitshift+0x128>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d036      	beq.n	8003b50 <DMA_CalcBaseAndBitshift+0xa8>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a3b      	ldr	r2, [pc, #236]	; (8003bd4 <DMA_CalcBaseAndBitshift+0x12c>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d031      	beq.n	8003b50 <DMA_CalcBaseAndBitshift+0xa8>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a39      	ldr	r2, [pc, #228]	; (8003bd8 <DMA_CalcBaseAndBitshift+0x130>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d02c      	beq.n	8003b50 <DMA_CalcBaseAndBitshift+0xa8>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a38      	ldr	r2, [pc, #224]	; (8003bdc <DMA_CalcBaseAndBitshift+0x134>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d027      	beq.n	8003b50 <DMA_CalcBaseAndBitshift+0xa8>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a36      	ldr	r2, [pc, #216]	; (8003be0 <DMA_CalcBaseAndBitshift+0x138>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d022      	beq.n	8003b50 <DMA_CalcBaseAndBitshift+0xa8>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a35      	ldr	r2, [pc, #212]	; (8003be4 <DMA_CalcBaseAndBitshift+0x13c>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d01d      	beq.n	8003b50 <DMA_CalcBaseAndBitshift+0xa8>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a33      	ldr	r2, [pc, #204]	; (8003be8 <DMA_CalcBaseAndBitshift+0x140>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d018      	beq.n	8003b50 <DMA_CalcBaseAndBitshift+0xa8>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a32      	ldr	r2, [pc, #200]	; (8003bec <DMA_CalcBaseAndBitshift+0x144>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d013      	beq.n	8003b50 <DMA_CalcBaseAndBitshift+0xa8>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a30      	ldr	r2, [pc, #192]	; (8003bf0 <DMA_CalcBaseAndBitshift+0x148>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d00e      	beq.n	8003b50 <DMA_CalcBaseAndBitshift+0xa8>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a2f      	ldr	r2, [pc, #188]	; (8003bf4 <DMA_CalcBaseAndBitshift+0x14c>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d009      	beq.n	8003b50 <DMA_CalcBaseAndBitshift+0xa8>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a2d      	ldr	r2, [pc, #180]	; (8003bf8 <DMA_CalcBaseAndBitshift+0x150>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d004      	beq.n	8003b50 <DMA_CalcBaseAndBitshift+0xa8>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a2c      	ldr	r2, [pc, #176]	; (8003bfc <DMA_CalcBaseAndBitshift+0x154>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d101      	bne.n	8003b54 <DMA_CalcBaseAndBitshift+0xac>
 8003b50:	2301      	movs	r3, #1
 8003b52:	e000      	b.n	8003b56 <DMA_CalcBaseAndBitshift+0xae>
 8003b54:	2300      	movs	r3, #0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d024      	beq.n	8003ba4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	3b10      	subs	r3, #16
 8003b62:	4a27      	ldr	r2, [pc, #156]	; (8003c00 <DMA_CalcBaseAndBitshift+0x158>)
 8003b64:	fba2 2303 	umull	r2, r3, r2, r3
 8003b68:	091b      	lsrs	r3, r3, #4
 8003b6a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f003 0307 	and.w	r3, r3, #7
 8003b72:	4a24      	ldr	r2, [pc, #144]	; (8003c04 <DMA_CalcBaseAndBitshift+0x15c>)
 8003b74:	5cd3      	ldrb	r3, [r2, r3]
 8003b76:	461a      	mov	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2b03      	cmp	r3, #3
 8003b80:	d908      	bls.n	8003b94 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	461a      	mov	r2, r3
 8003b88:	4b1f      	ldr	r3, [pc, #124]	; (8003c08 <DMA_CalcBaseAndBitshift+0x160>)
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	1d1a      	adds	r2, r3, #4
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	659a      	str	r2, [r3, #88]	; 0x58
 8003b92:	e00d      	b.n	8003bb0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	461a      	mov	r2, r3
 8003b9a:	4b1b      	ldr	r3, [pc, #108]	; (8003c08 <DMA_CalcBaseAndBitshift+0x160>)
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	6593      	str	r3, [r2, #88]	; 0x58
 8003ba2:	e005      	b.n	8003bb0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3714      	adds	r7, #20
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr
 8003bc0:	40020010 	.word	0x40020010
 8003bc4:	40020028 	.word	0x40020028
 8003bc8:	40020040 	.word	0x40020040
 8003bcc:	40020058 	.word	0x40020058
 8003bd0:	40020070 	.word	0x40020070
 8003bd4:	40020088 	.word	0x40020088
 8003bd8:	400200a0 	.word	0x400200a0
 8003bdc:	400200b8 	.word	0x400200b8
 8003be0:	40020410 	.word	0x40020410
 8003be4:	40020428 	.word	0x40020428
 8003be8:	40020440 	.word	0x40020440
 8003bec:	40020458 	.word	0x40020458
 8003bf0:	40020470 	.word	0x40020470
 8003bf4:	40020488 	.word	0x40020488
 8003bf8:	400204a0 	.word	0x400204a0
 8003bfc:	400204b8 	.word	0x400204b8
 8003c00:	aaaaaaab 	.word	0xaaaaaaab
 8003c04:	08008f5c 	.word	0x08008f5c
 8003c08:	fffffc00 	.word	0xfffffc00

08003c0c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c14:	2300      	movs	r3, #0
 8003c16:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d120      	bne.n	8003c62 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c24:	2b03      	cmp	r3, #3
 8003c26:	d858      	bhi.n	8003cda <DMA_CheckFifoParam+0xce>
 8003c28:	a201      	add	r2, pc, #4	; (adr r2, 8003c30 <DMA_CheckFifoParam+0x24>)
 8003c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c2e:	bf00      	nop
 8003c30:	08003c41 	.word	0x08003c41
 8003c34:	08003c53 	.word	0x08003c53
 8003c38:	08003c41 	.word	0x08003c41
 8003c3c:	08003cdb 	.word	0x08003cdb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d048      	beq.n	8003cde <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c50:	e045      	b.n	8003cde <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c5a:	d142      	bne.n	8003ce2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c60:	e03f      	b.n	8003ce2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c6a:	d123      	bne.n	8003cb4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c70:	2b03      	cmp	r3, #3
 8003c72:	d838      	bhi.n	8003ce6 <DMA_CheckFifoParam+0xda>
 8003c74:	a201      	add	r2, pc, #4	; (adr r2, 8003c7c <DMA_CheckFifoParam+0x70>)
 8003c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c7a:	bf00      	nop
 8003c7c:	08003c8d 	.word	0x08003c8d
 8003c80:	08003c93 	.word	0x08003c93
 8003c84:	08003c8d 	.word	0x08003c8d
 8003c88:	08003ca5 	.word	0x08003ca5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	73fb      	strb	r3, [r7, #15]
        break;
 8003c90:	e030      	b.n	8003cf4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d025      	beq.n	8003cea <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003ca2:	e022      	b.n	8003cea <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003cac:	d11f      	bne.n	8003cee <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003cb2:	e01c      	b.n	8003cee <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d902      	bls.n	8003cc2 <DMA_CheckFifoParam+0xb6>
 8003cbc:	2b03      	cmp	r3, #3
 8003cbe:	d003      	beq.n	8003cc8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003cc0:	e018      	b.n	8003cf4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	73fb      	strb	r3, [r7, #15]
        break;
 8003cc6:	e015      	b.n	8003cf4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ccc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00e      	beq.n	8003cf2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	73fb      	strb	r3, [r7, #15]
    break;
 8003cd8:	e00b      	b.n	8003cf2 <DMA_CheckFifoParam+0xe6>
        break;
 8003cda:	bf00      	nop
 8003cdc:	e00a      	b.n	8003cf4 <DMA_CheckFifoParam+0xe8>
        break;
 8003cde:	bf00      	nop
 8003ce0:	e008      	b.n	8003cf4 <DMA_CheckFifoParam+0xe8>
        break;
 8003ce2:	bf00      	nop
 8003ce4:	e006      	b.n	8003cf4 <DMA_CheckFifoParam+0xe8>
        break;
 8003ce6:	bf00      	nop
 8003ce8:	e004      	b.n	8003cf4 <DMA_CheckFifoParam+0xe8>
        break;
 8003cea:	bf00      	nop
 8003cec:	e002      	b.n	8003cf4 <DMA_CheckFifoParam+0xe8>
        break;
 8003cee:	bf00      	nop
 8003cf0:	e000      	b.n	8003cf4 <DMA_CheckFifoParam+0xe8>
    break;
 8003cf2:	bf00      	nop
    }
  }

  return status;
 8003cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3714      	adds	r7, #20
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop

08003d04 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a38      	ldr	r2, [pc, #224]	; (8003df8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d022      	beq.n	8003d62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a36      	ldr	r2, [pc, #216]	; (8003dfc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d01d      	beq.n	8003d62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a35      	ldr	r2, [pc, #212]	; (8003e00 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d018      	beq.n	8003d62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a33      	ldr	r2, [pc, #204]	; (8003e04 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d013      	beq.n	8003d62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a32      	ldr	r2, [pc, #200]	; (8003e08 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d00e      	beq.n	8003d62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a30      	ldr	r2, [pc, #192]	; (8003e0c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d009      	beq.n	8003d62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a2f      	ldr	r2, [pc, #188]	; (8003e10 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d004      	beq.n	8003d62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a2d      	ldr	r2, [pc, #180]	; (8003e14 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d101      	bne.n	8003d66 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003d62:	2301      	movs	r3, #1
 8003d64:	e000      	b.n	8003d68 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003d66:	2300      	movs	r3, #0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d01a      	beq.n	8003da2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	3b08      	subs	r3, #8
 8003d74:	4a28      	ldr	r2, [pc, #160]	; (8003e18 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003d76:	fba2 2303 	umull	r2, r3, r2, r3
 8003d7a:	091b      	lsrs	r3, r3, #4
 8003d7c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	4b26      	ldr	r3, [pc, #152]	; (8003e1c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003d82:	4413      	add	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	461a      	mov	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a24      	ldr	r2, [pc, #144]	; (8003e20 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003d90:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f003 031f 	and.w	r3, r3, #31
 8003d98:	2201      	movs	r2, #1
 8003d9a:	409a      	lsls	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003da0:	e024      	b.n	8003dec <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	3b10      	subs	r3, #16
 8003daa:	4a1e      	ldr	r2, [pc, #120]	; (8003e24 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003dac:	fba2 2303 	umull	r2, r3, r2, r3
 8003db0:	091b      	lsrs	r3, r3, #4
 8003db2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	4a1c      	ldr	r2, [pc, #112]	; (8003e28 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d806      	bhi.n	8003dca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	4a1b      	ldr	r2, [pc, #108]	; (8003e2c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d902      	bls.n	8003dca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	3308      	adds	r3, #8
 8003dc8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	4b18      	ldr	r3, [pc, #96]	; (8003e30 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003dce:	4413      	add	r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a16      	ldr	r2, [pc, #88]	; (8003e34 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003ddc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f003 031f 	and.w	r3, r3, #31
 8003de4:	2201      	movs	r2, #1
 8003de6:	409a      	lsls	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003dec:	bf00      	nop
 8003dee:	3714      	adds	r7, #20
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	58025408 	.word	0x58025408
 8003dfc:	5802541c 	.word	0x5802541c
 8003e00:	58025430 	.word	0x58025430
 8003e04:	58025444 	.word	0x58025444
 8003e08:	58025458 	.word	0x58025458
 8003e0c:	5802546c 	.word	0x5802546c
 8003e10:	58025480 	.word	0x58025480
 8003e14:	58025494 	.word	0x58025494
 8003e18:	cccccccd 	.word	0xcccccccd
 8003e1c:	16009600 	.word	0x16009600
 8003e20:	58025880 	.word	0x58025880
 8003e24:	aaaaaaab 	.word	0xaaaaaaab
 8003e28:	400204b8 	.word	0x400204b8
 8003e2c:	4002040f 	.word	0x4002040f
 8003e30:	10008200 	.word	0x10008200
 8003e34:	40020880 	.word	0x40020880

08003e38 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d04a      	beq.n	8003ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2b08      	cmp	r3, #8
 8003e52:	d847      	bhi.n	8003ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a25      	ldr	r2, [pc, #148]	; (8003ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d022      	beq.n	8003ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a24      	ldr	r2, [pc, #144]	; (8003ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d01d      	beq.n	8003ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a22      	ldr	r2, [pc, #136]	; (8003ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d018      	beq.n	8003ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a21      	ldr	r2, [pc, #132]	; (8003efc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d013      	beq.n	8003ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a1f      	ldr	r2, [pc, #124]	; (8003f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d00e      	beq.n	8003ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a1e      	ldr	r2, [pc, #120]	; (8003f04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d009      	beq.n	8003ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a1c      	ldr	r2, [pc, #112]	; (8003f08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d004      	beq.n	8003ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a1b      	ldr	r2, [pc, #108]	; (8003f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d101      	bne.n	8003ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e000      	b.n	8003eaa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00a      	beq.n	8003ec4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	4b17      	ldr	r3, [pc, #92]	; (8003f10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003eb2:	4413      	add	r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a15      	ldr	r2, [pc, #84]	; (8003f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003ec0:	671a      	str	r2, [r3, #112]	; 0x70
 8003ec2:	e009      	b.n	8003ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	4b14      	ldr	r3, [pc, #80]	; (8003f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003ec8:	4413      	add	r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	461a      	mov	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a11      	ldr	r2, [pc, #68]	; (8003f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003ed6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	3b01      	subs	r3, #1
 8003edc:	2201      	movs	r2, #1
 8003ede:	409a      	lsls	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003ee4:	bf00      	nop
 8003ee6:	3714      	adds	r7, #20
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	58025408 	.word	0x58025408
 8003ef4:	5802541c 	.word	0x5802541c
 8003ef8:	58025430 	.word	0x58025430
 8003efc:	58025444 	.word	0x58025444
 8003f00:	58025458 	.word	0x58025458
 8003f04:	5802546c 	.word	0x5802546c
 8003f08:	58025480 	.word	0x58025480
 8003f0c:	58025494 	.word	0x58025494
 8003f10:	1600963f 	.word	0x1600963f
 8003f14:	58025940 	.word	0x58025940
 8003f18:	1000823f 	.word	0x1000823f
 8003f1c:	40020940 	.word	0x40020940

08003f20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b089      	sub	sp, #36	; 0x24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003f2e:	4b89      	ldr	r3, [pc, #548]	; (8004154 <HAL_GPIO_Init+0x234>)
 8003f30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003f32:	e194      	b.n	800425e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	2101      	movs	r1, #1
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f40:	4013      	ands	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 8186 	beq.w	8004258 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d00b      	beq.n	8003f6c <HAL_GPIO_Init+0x4c>
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d007      	beq.n	8003f6c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f60:	2b11      	cmp	r3, #17
 8003f62:	d003      	beq.n	8003f6c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	2b12      	cmp	r3, #18
 8003f6a:	d130      	bne.n	8003fce <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	2203      	movs	r2, #3
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	4013      	ands	r3, r2
 8003f82:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	68da      	ldr	r2, [r3, #12]
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	005b      	lsls	r3, r3, #1
 8003f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003faa:	43db      	mvns	r3, r3
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	4013      	ands	r3, r2
 8003fb0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	091b      	lsrs	r3, r3, #4
 8003fb8:	f003 0201 	and.w	r2, r3, #1
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc2:	69ba      	ldr	r2, [r7, #24]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	005b      	lsls	r3, r3, #1
 8003fd8:	2203      	movs	r2, #3
 8003fda:	fa02 f303 	lsl.w	r3, r2, r3
 8003fde:	43db      	mvns	r3, r3
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	689a      	ldr	r2, [r3, #8]
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	005b      	lsls	r3, r3, #1
 8003fee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	69ba      	ldr	r2, [r7, #24]
 8003ffc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	2b02      	cmp	r3, #2
 8004004:	d003      	beq.n	800400e <HAL_GPIO_Init+0xee>
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2b12      	cmp	r3, #18
 800400c:	d123      	bne.n	8004056 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	08da      	lsrs	r2, r3, #3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	3208      	adds	r2, #8
 8004016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800401a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	f003 0307 	and.w	r3, r3, #7
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	220f      	movs	r2, #15
 8004026:	fa02 f303 	lsl.w	r3, r2, r3
 800402a:	43db      	mvns	r3, r3
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	4013      	ands	r3, r2
 8004030:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	691a      	ldr	r2, [r3, #16]
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	f003 0307 	and.w	r3, r3, #7
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	fa02 f303 	lsl.w	r3, r2, r3
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	4313      	orrs	r3, r2
 8004046:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	08da      	lsrs	r2, r3, #3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	3208      	adds	r2, #8
 8004050:	69b9      	ldr	r1, [r7, #24]
 8004052:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	005b      	lsls	r3, r3, #1
 8004060:	2203      	movs	r2, #3
 8004062:	fa02 f303 	lsl.w	r3, r2, r3
 8004066:	43db      	mvns	r3, r3
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	4013      	ands	r3, r2
 800406c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f003 0203 	and.w	r2, r3, #3
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	fa02 f303 	lsl.w	r3, r2, r3
 800407e:	69ba      	ldr	r2, [r7, #24]
 8004080:	4313      	orrs	r3, r2
 8004082:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	69ba      	ldr	r2, [r7, #24]
 8004088:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004092:	2b00      	cmp	r3, #0
 8004094:	f000 80e0 	beq.w	8004258 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004098:	4b2f      	ldr	r3, [pc, #188]	; (8004158 <HAL_GPIO_Init+0x238>)
 800409a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800409e:	4a2e      	ldr	r2, [pc, #184]	; (8004158 <HAL_GPIO_Init+0x238>)
 80040a0:	f043 0302 	orr.w	r3, r3, #2
 80040a4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80040a8:	4b2b      	ldr	r3, [pc, #172]	; (8004158 <HAL_GPIO_Init+0x238>)
 80040aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	60fb      	str	r3, [r7, #12]
 80040b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040b6:	4a29      	ldr	r2, [pc, #164]	; (800415c <HAL_GPIO_Init+0x23c>)
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	089b      	lsrs	r3, r3, #2
 80040bc:	3302      	adds	r3, #2
 80040be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	f003 0303 	and.w	r3, r3, #3
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	220f      	movs	r2, #15
 80040ce:	fa02 f303 	lsl.w	r3, r2, r3
 80040d2:	43db      	mvns	r3, r3
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	4013      	ands	r3, r2
 80040d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a20      	ldr	r2, [pc, #128]	; (8004160 <HAL_GPIO_Init+0x240>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d052      	beq.n	8004188 <HAL_GPIO_Init+0x268>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a1f      	ldr	r2, [pc, #124]	; (8004164 <HAL_GPIO_Init+0x244>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d031      	beq.n	800414e <HAL_GPIO_Init+0x22e>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a1e      	ldr	r2, [pc, #120]	; (8004168 <HAL_GPIO_Init+0x248>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d02b      	beq.n	800414a <HAL_GPIO_Init+0x22a>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a1d      	ldr	r2, [pc, #116]	; (800416c <HAL_GPIO_Init+0x24c>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d025      	beq.n	8004146 <HAL_GPIO_Init+0x226>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a1c      	ldr	r2, [pc, #112]	; (8004170 <HAL_GPIO_Init+0x250>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d01f      	beq.n	8004142 <HAL_GPIO_Init+0x222>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a1b      	ldr	r2, [pc, #108]	; (8004174 <HAL_GPIO_Init+0x254>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d019      	beq.n	800413e <HAL_GPIO_Init+0x21e>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a1a      	ldr	r2, [pc, #104]	; (8004178 <HAL_GPIO_Init+0x258>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d013      	beq.n	800413a <HAL_GPIO_Init+0x21a>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a19      	ldr	r2, [pc, #100]	; (800417c <HAL_GPIO_Init+0x25c>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d00d      	beq.n	8004136 <HAL_GPIO_Init+0x216>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a18      	ldr	r2, [pc, #96]	; (8004180 <HAL_GPIO_Init+0x260>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d007      	beq.n	8004132 <HAL_GPIO_Init+0x212>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a17      	ldr	r2, [pc, #92]	; (8004184 <HAL_GPIO_Init+0x264>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d101      	bne.n	800412e <HAL_GPIO_Init+0x20e>
 800412a:	2309      	movs	r3, #9
 800412c:	e02d      	b.n	800418a <HAL_GPIO_Init+0x26a>
 800412e:	230a      	movs	r3, #10
 8004130:	e02b      	b.n	800418a <HAL_GPIO_Init+0x26a>
 8004132:	2308      	movs	r3, #8
 8004134:	e029      	b.n	800418a <HAL_GPIO_Init+0x26a>
 8004136:	2307      	movs	r3, #7
 8004138:	e027      	b.n	800418a <HAL_GPIO_Init+0x26a>
 800413a:	2306      	movs	r3, #6
 800413c:	e025      	b.n	800418a <HAL_GPIO_Init+0x26a>
 800413e:	2305      	movs	r3, #5
 8004140:	e023      	b.n	800418a <HAL_GPIO_Init+0x26a>
 8004142:	2304      	movs	r3, #4
 8004144:	e021      	b.n	800418a <HAL_GPIO_Init+0x26a>
 8004146:	2303      	movs	r3, #3
 8004148:	e01f      	b.n	800418a <HAL_GPIO_Init+0x26a>
 800414a:	2302      	movs	r3, #2
 800414c:	e01d      	b.n	800418a <HAL_GPIO_Init+0x26a>
 800414e:	2301      	movs	r3, #1
 8004150:	e01b      	b.n	800418a <HAL_GPIO_Init+0x26a>
 8004152:	bf00      	nop
 8004154:	58000080 	.word	0x58000080
 8004158:	58024400 	.word	0x58024400
 800415c:	58000400 	.word	0x58000400
 8004160:	58020000 	.word	0x58020000
 8004164:	58020400 	.word	0x58020400
 8004168:	58020800 	.word	0x58020800
 800416c:	58020c00 	.word	0x58020c00
 8004170:	58021000 	.word	0x58021000
 8004174:	58021400 	.word	0x58021400
 8004178:	58021800 	.word	0x58021800
 800417c:	58021c00 	.word	0x58021c00
 8004180:	58022000 	.word	0x58022000
 8004184:	58022400 	.word	0x58022400
 8004188:	2300      	movs	r3, #0
 800418a:	69fa      	ldr	r2, [r7, #28]
 800418c:	f002 0203 	and.w	r2, r2, #3
 8004190:	0092      	lsls	r2, r2, #2
 8004192:	4093      	lsls	r3, r2
 8004194:	69ba      	ldr	r2, [r7, #24]
 8004196:	4313      	orrs	r3, r2
 8004198:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800419a:	4938      	ldr	r1, [pc, #224]	; (800427c <HAL_GPIO_Init+0x35c>)
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	089b      	lsrs	r3, r3, #2
 80041a0:	3302      	adds	r3, #2
 80041a2:	69ba      	ldr	r2, [r7, #24]
 80041a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	43db      	mvns	r3, r3
 80041b2:	69ba      	ldr	r2, [r7, #24]
 80041b4:	4013      	ands	r3, r2
 80041b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d003      	beq.n	80041cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80041c4:	69ba      	ldr	r2, [r7, #24]
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	43db      	mvns	r3, r3
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	4013      	ands	r3, r2
 80041e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d003      	beq.n	80041f6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80041ee:	69ba      	ldr	r2, [r7, #24]
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	43db      	mvns	r3, r3
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	4013      	ands	r3, r2
 800420c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d003      	beq.n	8004222 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	4313      	orrs	r3, r2
 8004220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004222:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800422a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	43db      	mvns	r3, r3
 8004236:	69ba      	ldr	r2, [r7, #24]
 8004238:	4013      	ands	r3, r2
 800423a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d003      	beq.n	8004250 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	4313      	orrs	r3, r2
 800424e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004250:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	3301      	adds	r3, #1
 800425c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	fa22 f303 	lsr.w	r3, r2, r3
 8004268:	2b00      	cmp	r3, #0
 800426a:	f47f ae63 	bne.w	8003f34 <HAL_GPIO_Init+0x14>
  }
}
 800426e:	bf00      	nop
 8004270:	bf00      	nop
 8004272:	3724      	adds	r7, #36	; 0x24
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr
 800427c:	58000400 	.word	0x58000400

08004280 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004288:	4a08      	ldr	r2, [pc, #32]	; (80042ac <HAL_HSEM_FastTake+0x2c>)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	3320      	adds	r3, #32
 800428e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004292:	4a07      	ldr	r2, [pc, #28]	; (80042b0 <HAL_HSEM_FastTake+0x30>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d101      	bne.n	800429c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004298:	2300      	movs	r3, #0
 800429a:	e000      	b.n	800429e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
}
 800429e:	4618      	mov	r0, r3
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	58026400 	.word	0x58026400
 80042b0:	80000300 	.word	0x80000300

080042b4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80042be:	4906      	ldr	r1, [pc, #24]	; (80042d8 <HAL_HSEM_Release+0x24>)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr
 80042d8:	58026400 	.word	0x58026400

080042dc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80042e4:	4b29      	ldr	r3, [pc, #164]	; (800438c <HAL_PWREx_ConfigSupply+0xb0>)
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	f003 0307 	and.w	r3, r3, #7
 80042ec:	2b06      	cmp	r3, #6
 80042ee:	d00a      	beq.n	8004306 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80042f0:	4b26      	ldr	r3, [pc, #152]	; (800438c <HAL_PWREx_ConfigSupply+0xb0>)
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d001      	beq.n	8004302 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e040      	b.n	8004384 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004302:	2300      	movs	r3, #0
 8004304:	e03e      	b.n	8004384 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004306:	4b21      	ldr	r3, [pc, #132]	; (800438c <HAL_PWREx_ConfigSupply+0xb0>)
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800430e:	491f      	ldr	r1, [pc, #124]	; (800438c <HAL_PWREx_ConfigSupply+0xb0>)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4313      	orrs	r3, r2
 8004314:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004316:	f7fc fea1 	bl	800105c <HAL_GetTick>
 800431a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800431c:	e009      	b.n	8004332 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800431e:	f7fc fe9d 	bl	800105c <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800432c:	d901      	bls.n	8004332 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e028      	b.n	8004384 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004332:	4b16      	ldr	r3, [pc, #88]	; (800438c <HAL_PWREx_ConfigSupply+0xb0>)
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800433a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800433e:	d1ee      	bne.n	800431e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b1e      	cmp	r3, #30
 8004344:	d008      	beq.n	8004358 <HAL_PWREx_ConfigSupply+0x7c>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b2e      	cmp	r3, #46	; 0x2e
 800434a:	d005      	beq.n	8004358 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b1d      	cmp	r3, #29
 8004350:	d002      	beq.n	8004358 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b2d      	cmp	r3, #45	; 0x2d
 8004356:	d114      	bne.n	8004382 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004358:	f7fc fe80 	bl	800105c <HAL_GetTick>
 800435c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800435e:	e009      	b.n	8004374 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004360:	f7fc fe7c 	bl	800105c <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800436e:	d901      	bls.n	8004374 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e007      	b.n	8004384 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004374:	4b05      	ldr	r3, [pc, #20]	; (800438c <HAL_PWREx_ConfigSupply+0xb0>)
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800437c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004380:	d1ee      	bne.n	8004360 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	58024800 	.word	0x58024800

08004390 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b08c      	sub	sp, #48	; 0x30
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e3ff      	b.n	8004ba2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f000 8087 	beq.w	80044be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043b0:	4b99      	ldr	r3, [pc, #612]	; (8004618 <HAL_RCC_OscConfig+0x288>)
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80043ba:	4b97      	ldr	r3, [pc, #604]	; (8004618 <HAL_RCC_OscConfig+0x288>)
 80043bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043be:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80043c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c2:	2b10      	cmp	r3, #16
 80043c4:	d007      	beq.n	80043d6 <HAL_RCC_OscConfig+0x46>
 80043c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c8:	2b18      	cmp	r3, #24
 80043ca:	d110      	bne.n	80043ee <HAL_RCC_OscConfig+0x5e>
 80043cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ce:	f003 0303 	and.w	r3, r3, #3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d10b      	bne.n	80043ee <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043d6:	4b90      	ldr	r3, [pc, #576]	; (8004618 <HAL_RCC_OscConfig+0x288>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d06c      	beq.n	80044bc <HAL_RCC_OscConfig+0x12c>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d168      	bne.n	80044bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e3d9      	b.n	8004ba2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f6:	d106      	bne.n	8004406 <HAL_RCC_OscConfig+0x76>
 80043f8:	4b87      	ldr	r3, [pc, #540]	; (8004618 <HAL_RCC_OscConfig+0x288>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a86      	ldr	r2, [pc, #536]	; (8004618 <HAL_RCC_OscConfig+0x288>)
 80043fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004402:	6013      	str	r3, [r2, #0]
 8004404:	e02e      	b.n	8004464 <HAL_RCC_OscConfig+0xd4>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10c      	bne.n	8004428 <HAL_RCC_OscConfig+0x98>
 800440e:	4b82      	ldr	r3, [pc, #520]	; (8004618 <HAL_RCC_OscConfig+0x288>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a81      	ldr	r2, [pc, #516]	; (8004618 <HAL_RCC_OscConfig+0x288>)
 8004414:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004418:	6013      	str	r3, [r2, #0]
 800441a:	4b7f      	ldr	r3, [pc, #508]	; (8004618 <HAL_RCC_OscConfig+0x288>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a7e      	ldr	r2, [pc, #504]	; (8004618 <HAL_RCC_OscConfig+0x288>)
 8004420:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004424:	6013      	str	r3, [r2, #0]
 8004426:	e01d      	b.n	8004464 <HAL_RCC_OscConfig+0xd4>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004430:	d10c      	bne.n	800444c <HAL_RCC_OscConfig+0xbc>
 8004432:	4b79      	ldr	r3, [pc, #484]	; (8004618 <HAL_RCC_OscConfig+0x288>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a78      	ldr	r2, [pc, #480]	; (8004618 <HAL_RCC_OscConfig+0x288>)
 8004438:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800443c:	6013      	str	r3, [r2, #0]
 800443e:	4b76      	ldr	r3, [pc, #472]	; (8004618 <HAL_RCC_OscConfig+0x288>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a75      	ldr	r2, [pc, #468]	; (8004618 <HAL_RCC_OscConfig+0x288>)
 8004444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004448:	6013      	str	r3, [r2, #0]
 800444a:	e00b      	b.n	8004464 <HAL_RCC_OscConfig+0xd4>
 800444c:	4b72      	ldr	r3, [pc, #456]	; (8004618 <HAL_RCC_OscConfig+0x288>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a71      	ldr	r2, [pc, #452]	; (8004618 <HAL_RCC_OscConfig+0x288>)
 8004452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004456:	6013      	str	r3, [r2, #0]
 8004458:	4b6f      	ldr	r3, [pc, #444]	; (8004618 <HAL_RCC_OscConfig+0x288>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a6e      	ldr	r2, [pc, #440]	; (8004618 <HAL_RCC_OscConfig+0x288>)
 800445e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004462:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d013      	beq.n	8004494 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800446c:	f7fc fdf6 	bl	800105c <HAL_GetTick>
 8004470:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004472:	e008      	b.n	8004486 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004474:	f7fc fdf2 	bl	800105c <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b64      	cmp	r3, #100	; 0x64
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e38d      	b.n	8004ba2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004486:	4b64      	ldr	r3, [pc, #400]	; (8004618 <HAL_RCC_OscConfig+0x288>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d0f0      	beq.n	8004474 <HAL_RCC_OscConfig+0xe4>
 8004492:	e014      	b.n	80044be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004494:	f7fc fde2 	bl	800105c <HAL_GetTick>
 8004498:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800449a:	e008      	b.n	80044ae <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800449c:	f7fc fdde 	bl	800105c <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b64      	cmp	r3, #100	; 0x64
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e379      	b.n	8004ba2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80044ae:	4b5a      	ldr	r3, [pc, #360]	; (8004618 <HAL_RCC_OscConfig+0x288>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1f0      	bne.n	800449c <HAL_RCC_OscConfig+0x10c>
 80044ba:	e000      	b.n	80044be <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f000 80ae 	beq.w	8004628 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044cc:	4b52      	ldr	r3, [pc, #328]	; (8004618 <HAL_RCC_OscConfig+0x288>)
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044d4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80044d6:	4b50      	ldr	r3, [pc, #320]	; (8004618 <HAL_RCC_OscConfig+0x288>)
 80044d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044da:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80044dc:	6a3b      	ldr	r3, [r7, #32]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d007      	beq.n	80044f2 <HAL_RCC_OscConfig+0x162>
 80044e2:	6a3b      	ldr	r3, [r7, #32]
 80044e4:	2b18      	cmp	r3, #24
 80044e6:	d13a      	bne.n	800455e <HAL_RCC_OscConfig+0x1ce>
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	f003 0303 	and.w	r3, r3, #3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d135      	bne.n	800455e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044f2:	4b49      	ldr	r3, [pc, #292]	; (8004618 <HAL_RCC_OscConfig+0x288>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0304 	and.w	r3, r3, #4
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d005      	beq.n	800450a <HAL_RCC_OscConfig+0x17a>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e34b      	b.n	8004ba2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800450a:	f7fc fdb3 	bl	8001074 <HAL_GetREVID>
 800450e:	4603      	mov	r3, r0
 8004510:	f241 0203 	movw	r2, #4099	; 0x1003
 8004514:	4293      	cmp	r3, r2
 8004516:	d817      	bhi.n	8004548 <HAL_RCC_OscConfig+0x1b8>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	2b40      	cmp	r3, #64	; 0x40
 800451e:	d108      	bne.n	8004532 <HAL_RCC_OscConfig+0x1a2>
 8004520:	4b3d      	ldr	r3, [pc, #244]	; (8004618 <HAL_RCC_OscConfig+0x288>)
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004528:	4a3b      	ldr	r2, [pc, #236]	; (8004618 <HAL_RCC_OscConfig+0x288>)
 800452a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800452e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004530:	e07a      	b.n	8004628 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004532:	4b39      	ldr	r3, [pc, #228]	; (8004618 <HAL_RCC_OscConfig+0x288>)
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	031b      	lsls	r3, r3, #12
 8004540:	4935      	ldr	r1, [pc, #212]	; (8004618 <HAL_RCC_OscConfig+0x288>)
 8004542:	4313      	orrs	r3, r2
 8004544:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004546:	e06f      	b.n	8004628 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004548:	4b33      	ldr	r3, [pc, #204]	; (8004618 <HAL_RCC_OscConfig+0x288>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	061b      	lsls	r3, r3, #24
 8004556:	4930      	ldr	r1, [pc, #192]	; (8004618 <HAL_RCC_OscConfig+0x288>)
 8004558:	4313      	orrs	r3, r2
 800455a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800455c:	e064      	b.n	8004628 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d045      	beq.n	80045f2 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004566:	4b2c      	ldr	r3, [pc, #176]	; (8004618 <HAL_RCC_OscConfig+0x288>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f023 0219 	bic.w	r2, r3, #25
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	4929      	ldr	r1, [pc, #164]	; (8004618 <HAL_RCC_OscConfig+0x288>)
 8004574:	4313      	orrs	r3, r2
 8004576:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004578:	f7fc fd70 	bl	800105c <HAL_GetTick>
 800457c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800457e:	e008      	b.n	8004592 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004580:	f7fc fd6c 	bl	800105c <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b02      	cmp	r3, #2
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e307      	b.n	8004ba2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004592:	4b21      	ldr	r3, [pc, #132]	; (8004618 <HAL_RCC_OscConfig+0x288>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0304 	and.w	r3, r3, #4
 800459a:	2b00      	cmp	r3, #0
 800459c:	d0f0      	beq.n	8004580 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800459e:	f7fc fd69 	bl	8001074 <HAL_GetREVID>
 80045a2:	4603      	mov	r3, r0
 80045a4:	f241 0203 	movw	r2, #4099	; 0x1003
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d817      	bhi.n	80045dc <HAL_RCC_OscConfig+0x24c>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	2b40      	cmp	r3, #64	; 0x40
 80045b2:	d108      	bne.n	80045c6 <HAL_RCC_OscConfig+0x236>
 80045b4:	4b18      	ldr	r3, [pc, #96]	; (8004618 <HAL_RCC_OscConfig+0x288>)
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80045bc:	4a16      	ldr	r2, [pc, #88]	; (8004618 <HAL_RCC_OscConfig+0x288>)
 80045be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045c2:	6053      	str	r3, [r2, #4]
 80045c4:	e030      	b.n	8004628 <HAL_RCC_OscConfig+0x298>
 80045c6:	4b14      	ldr	r3, [pc, #80]	; (8004618 <HAL_RCC_OscConfig+0x288>)
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	031b      	lsls	r3, r3, #12
 80045d4:	4910      	ldr	r1, [pc, #64]	; (8004618 <HAL_RCC_OscConfig+0x288>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	604b      	str	r3, [r1, #4]
 80045da:	e025      	b.n	8004628 <HAL_RCC_OscConfig+0x298>
 80045dc:	4b0e      	ldr	r3, [pc, #56]	; (8004618 <HAL_RCC_OscConfig+0x288>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	061b      	lsls	r3, r3, #24
 80045ea:	490b      	ldr	r1, [pc, #44]	; (8004618 <HAL_RCC_OscConfig+0x288>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	604b      	str	r3, [r1, #4]
 80045f0:	e01a      	b.n	8004628 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045f2:	4b09      	ldr	r3, [pc, #36]	; (8004618 <HAL_RCC_OscConfig+0x288>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a08      	ldr	r2, [pc, #32]	; (8004618 <HAL_RCC_OscConfig+0x288>)
 80045f8:	f023 0301 	bic.w	r3, r3, #1
 80045fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045fe:	f7fc fd2d 	bl	800105c <HAL_GetTick>
 8004602:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004604:	e00a      	b.n	800461c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004606:	f7fc fd29 	bl	800105c <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	2b02      	cmp	r3, #2
 8004612:	d903      	bls.n	800461c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e2c4      	b.n	8004ba2 <HAL_RCC_OscConfig+0x812>
 8004618:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800461c:	4ba4      	ldr	r3, [pc, #656]	; (80048b0 <HAL_RCC_OscConfig+0x520>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0304 	and.w	r3, r3, #4
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1ee      	bne.n	8004606 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0310 	and.w	r3, r3, #16
 8004630:	2b00      	cmp	r3, #0
 8004632:	f000 80a9 	beq.w	8004788 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004636:	4b9e      	ldr	r3, [pc, #632]	; (80048b0 <HAL_RCC_OscConfig+0x520>)
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800463e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004640:	4b9b      	ldr	r3, [pc, #620]	; (80048b0 <HAL_RCC_OscConfig+0x520>)
 8004642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004644:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	2b08      	cmp	r3, #8
 800464a:	d007      	beq.n	800465c <HAL_RCC_OscConfig+0x2cc>
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	2b18      	cmp	r3, #24
 8004650:	d13a      	bne.n	80046c8 <HAL_RCC_OscConfig+0x338>
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	f003 0303 	and.w	r3, r3, #3
 8004658:	2b01      	cmp	r3, #1
 800465a:	d135      	bne.n	80046c8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800465c:	4b94      	ldr	r3, [pc, #592]	; (80048b0 <HAL_RCC_OscConfig+0x520>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004664:	2b00      	cmp	r3, #0
 8004666:	d005      	beq.n	8004674 <HAL_RCC_OscConfig+0x2e4>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	69db      	ldr	r3, [r3, #28]
 800466c:	2b80      	cmp	r3, #128	; 0x80
 800466e:	d001      	beq.n	8004674 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e296      	b.n	8004ba2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004674:	f7fc fcfe 	bl	8001074 <HAL_GetREVID>
 8004678:	4603      	mov	r3, r0
 800467a:	f241 0203 	movw	r2, #4099	; 0x1003
 800467e:	4293      	cmp	r3, r2
 8004680:	d817      	bhi.n	80046b2 <HAL_RCC_OscConfig+0x322>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	2b20      	cmp	r3, #32
 8004688:	d108      	bne.n	800469c <HAL_RCC_OscConfig+0x30c>
 800468a:	4b89      	ldr	r3, [pc, #548]	; (80048b0 <HAL_RCC_OscConfig+0x520>)
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004692:	4a87      	ldr	r2, [pc, #540]	; (80048b0 <HAL_RCC_OscConfig+0x520>)
 8004694:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004698:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800469a:	e075      	b.n	8004788 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800469c:	4b84      	ldr	r3, [pc, #528]	; (80048b0 <HAL_RCC_OscConfig+0x520>)
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	069b      	lsls	r3, r3, #26
 80046aa:	4981      	ldr	r1, [pc, #516]	; (80048b0 <HAL_RCC_OscConfig+0x520>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80046b0:	e06a      	b.n	8004788 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80046b2:	4b7f      	ldr	r3, [pc, #508]	; (80048b0 <HAL_RCC_OscConfig+0x520>)
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	061b      	lsls	r3, r3, #24
 80046c0:	497b      	ldr	r1, [pc, #492]	; (80048b0 <HAL_RCC_OscConfig+0x520>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80046c6:	e05f      	b.n	8004788 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	69db      	ldr	r3, [r3, #28]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d042      	beq.n	8004756 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80046d0:	4b77      	ldr	r3, [pc, #476]	; (80048b0 <HAL_RCC_OscConfig+0x520>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a76      	ldr	r2, [pc, #472]	; (80048b0 <HAL_RCC_OscConfig+0x520>)
 80046d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046dc:	f7fc fcbe 	bl	800105c <HAL_GetTick>
 80046e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80046e2:	e008      	b.n	80046f6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80046e4:	f7fc fcba 	bl	800105c <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e255      	b.n	8004ba2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80046f6:	4b6e      	ldr	r3, [pc, #440]	; (80048b0 <HAL_RCC_OscConfig+0x520>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d0f0      	beq.n	80046e4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004702:	f7fc fcb7 	bl	8001074 <HAL_GetREVID>
 8004706:	4603      	mov	r3, r0
 8004708:	f241 0203 	movw	r2, #4099	; 0x1003
 800470c:	4293      	cmp	r3, r2
 800470e:	d817      	bhi.n	8004740 <HAL_RCC_OscConfig+0x3b0>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a1b      	ldr	r3, [r3, #32]
 8004714:	2b20      	cmp	r3, #32
 8004716:	d108      	bne.n	800472a <HAL_RCC_OscConfig+0x39a>
 8004718:	4b65      	ldr	r3, [pc, #404]	; (80048b0 <HAL_RCC_OscConfig+0x520>)
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004720:	4a63      	ldr	r2, [pc, #396]	; (80048b0 <HAL_RCC_OscConfig+0x520>)
 8004722:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004726:	6053      	str	r3, [r2, #4]
 8004728:	e02e      	b.n	8004788 <HAL_RCC_OscConfig+0x3f8>
 800472a:	4b61      	ldr	r3, [pc, #388]	; (80048b0 <HAL_RCC_OscConfig+0x520>)
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	069b      	lsls	r3, r3, #26
 8004738:	495d      	ldr	r1, [pc, #372]	; (80048b0 <HAL_RCC_OscConfig+0x520>)
 800473a:	4313      	orrs	r3, r2
 800473c:	604b      	str	r3, [r1, #4]
 800473e:	e023      	b.n	8004788 <HAL_RCC_OscConfig+0x3f8>
 8004740:	4b5b      	ldr	r3, [pc, #364]	; (80048b0 <HAL_RCC_OscConfig+0x520>)
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	061b      	lsls	r3, r3, #24
 800474e:	4958      	ldr	r1, [pc, #352]	; (80048b0 <HAL_RCC_OscConfig+0x520>)
 8004750:	4313      	orrs	r3, r2
 8004752:	60cb      	str	r3, [r1, #12]
 8004754:	e018      	b.n	8004788 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004756:	4b56      	ldr	r3, [pc, #344]	; (80048b0 <HAL_RCC_OscConfig+0x520>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a55      	ldr	r2, [pc, #340]	; (80048b0 <HAL_RCC_OscConfig+0x520>)
 800475c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004760:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004762:	f7fc fc7b 	bl	800105c <HAL_GetTick>
 8004766:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004768:	e008      	b.n	800477c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800476a:	f7fc fc77 	bl	800105c <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b02      	cmp	r3, #2
 8004776:	d901      	bls.n	800477c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e212      	b.n	8004ba2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800477c:	4b4c      	ldr	r3, [pc, #304]	; (80048b0 <HAL_RCC_OscConfig+0x520>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1f0      	bne.n	800476a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0308 	and.w	r3, r3, #8
 8004790:	2b00      	cmp	r3, #0
 8004792:	d036      	beq.n	8004802 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d019      	beq.n	80047d0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800479c:	4b44      	ldr	r3, [pc, #272]	; (80048b0 <HAL_RCC_OscConfig+0x520>)
 800479e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047a0:	4a43      	ldr	r2, [pc, #268]	; (80048b0 <HAL_RCC_OscConfig+0x520>)
 80047a2:	f043 0301 	orr.w	r3, r3, #1
 80047a6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a8:	f7fc fc58 	bl	800105c <HAL_GetTick>
 80047ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80047ae:	e008      	b.n	80047c2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047b0:	f7fc fc54 	bl	800105c <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e1ef      	b.n	8004ba2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80047c2:	4b3b      	ldr	r3, [pc, #236]	; (80048b0 <HAL_RCC_OscConfig+0x520>)
 80047c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d0f0      	beq.n	80047b0 <HAL_RCC_OscConfig+0x420>
 80047ce:	e018      	b.n	8004802 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047d0:	4b37      	ldr	r3, [pc, #220]	; (80048b0 <HAL_RCC_OscConfig+0x520>)
 80047d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047d4:	4a36      	ldr	r2, [pc, #216]	; (80048b0 <HAL_RCC_OscConfig+0x520>)
 80047d6:	f023 0301 	bic.w	r3, r3, #1
 80047da:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047dc:	f7fc fc3e 	bl	800105c <HAL_GetTick>
 80047e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80047e2:	e008      	b.n	80047f6 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047e4:	f7fc fc3a 	bl	800105c <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d901      	bls.n	80047f6 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e1d5      	b.n	8004ba2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80047f6:	4b2e      	ldr	r3, [pc, #184]	; (80048b0 <HAL_RCC_OscConfig+0x520>)
 80047f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1f0      	bne.n	80047e4 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0320 	and.w	r3, r3, #32
 800480a:	2b00      	cmp	r3, #0
 800480c:	d036      	beq.n	800487c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d019      	beq.n	800484a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004816:	4b26      	ldr	r3, [pc, #152]	; (80048b0 <HAL_RCC_OscConfig+0x520>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a25      	ldr	r2, [pc, #148]	; (80048b0 <HAL_RCC_OscConfig+0x520>)
 800481c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004820:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004822:	f7fc fc1b 	bl	800105c <HAL_GetTick>
 8004826:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004828:	e008      	b.n	800483c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800482a:	f7fc fc17 	bl	800105c <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	2b02      	cmp	r3, #2
 8004836:	d901      	bls.n	800483c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e1b2      	b.n	8004ba2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800483c:	4b1c      	ldr	r3, [pc, #112]	; (80048b0 <HAL_RCC_OscConfig+0x520>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d0f0      	beq.n	800482a <HAL_RCC_OscConfig+0x49a>
 8004848:	e018      	b.n	800487c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800484a:	4b19      	ldr	r3, [pc, #100]	; (80048b0 <HAL_RCC_OscConfig+0x520>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a18      	ldr	r2, [pc, #96]	; (80048b0 <HAL_RCC_OscConfig+0x520>)
 8004850:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004854:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004856:	f7fc fc01 	bl	800105c <HAL_GetTick>
 800485a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800485c:	e008      	b.n	8004870 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800485e:	f7fc fbfd 	bl	800105c <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	2b02      	cmp	r3, #2
 800486a:	d901      	bls.n	8004870 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e198      	b.n	8004ba2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004870:	4b0f      	ldr	r3, [pc, #60]	; (80048b0 <HAL_RCC_OscConfig+0x520>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1f0      	bne.n	800485e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	2b00      	cmp	r3, #0
 8004886:	f000 8085 	beq.w	8004994 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800488a:	4b0a      	ldr	r3, [pc, #40]	; (80048b4 <HAL_RCC_OscConfig+0x524>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a09      	ldr	r2, [pc, #36]	; (80048b4 <HAL_RCC_OscConfig+0x524>)
 8004890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004894:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004896:	f7fc fbe1 	bl	800105c <HAL_GetTick>
 800489a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800489c:	e00c      	b.n	80048b8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800489e:	f7fc fbdd 	bl	800105c <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	2b64      	cmp	r3, #100	; 0x64
 80048aa:	d905      	bls.n	80048b8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e178      	b.n	8004ba2 <HAL_RCC_OscConfig+0x812>
 80048b0:	58024400 	.word	0x58024400
 80048b4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048b8:	4b96      	ldr	r3, [pc, #600]	; (8004b14 <HAL_RCC_OscConfig+0x784>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d0ec      	beq.n	800489e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d106      	bne.n	80048da <HAL_RCC_OscConfig+0x54a>
 80048cc:	4b92      	ldr	r3, [pc, #584]	; (8004b18 <HAL_RCC_OscConfig+0x788>)
 80048ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d0:	4a91      	ldr	r2, [pc, #580]	; (8004b18 <HAL_RCC_OscConfig+0x788>)
 80048d2:	f043 0301 	orr.w	r3, r3, #1
 80048d6:	6713      	str	r3, [r2, #112]	; 0x70
 80048d8:	e02d      	b.n	8004936 <HAL_RCC_OscConfig+0x5a6>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10c      	bne.n	80048fc <HAL_RCC_OscConfig+0x56c>
 80048e2:	4b8d      	ldr	r3, [pc, #564]	; (8004b18 <HAL_RCC_OscConfig+0x788>)
 80048e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e6:	4a8c      	ldr	r2, [pc, #560]	; (8004b18 <HAL_RCC_OscConfig+0x788>)
 80048e8:	f023 0301 	bic.w	r3, r3, #1
 80048ec:	6713      	str	r3, [r2, #112]	; 0x70
 80048ee:	4b8a      	ldr	r3, [pc, #552]	; (8004b18 <HAL_RCC_OscConfig+0x788>)
 80048f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f2:	4a89      	ldr	r2, [pc, #548]	; (8004b18 <HAL_RCC_OscConfig+0x788>)
 80048f4:	f023 0304 	bic.w	r3, r3, #4
 80048f8:	6713      	str	r3, [r2, #112]	; 0x70
 80048fa:	e01c      	b.n	8004936 <HAL_RCC_OscConfig+0x5a6>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	2b05      	cmp	r3, #5
 8004902:	d10c      	bne.n	800491e <HAL_RCC_OscConfig+0x58e>
 8004904:	4b84      	ldr	r3, [pc, #528]	; (8004b18 <HAL_RCC_OscConfig+0x788>)
 8004906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004908:	4a83      	ldr	r2, [pc, #524]	; (8004b18 <HAL_RCC_OscConfig+0x788>)
 800490a:	f043 0304 	orr.w	r3, r3, #4
 800490e:	6713      	str	r3, [r2, #112]	; 0x70
 8004910:	4b81      	ldr	r3, [pc, #516]	; (8004b18 <HAL_RCC_OscConfig+0x788>)
 8004912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004914:	4a80      	ldr	r2, [pc, #512]	; (8004b18 <HAL_RCC_OscConfig+0x788>)
 8004916:	f043 0301 	orr.w	r3, r3, #1
 800491a:	6713      	str	r3, [r2, #112]	; 0x70
 800491c:	e00b      	b.n	8004936 <HAL_RCC_OscConfig+0x5a6>
 800491e:	4b7e      	ldr	r3, [pc, #504]	; (8004b18 <HAL_RCC_OscConfig+0x788>)
 8004920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004922:	4a7d      	ldr	r2, [pc, #500]	; (8004b18 <HAL_RCC_OscConfig+0x788>)
 8004924:	f023 0301 	bic.w	r3, r3, #1
 8004928:	6713      	str	r3, [r2, #112]	; 0x70
 800492a:	4b7b      	ldr	r3, [pc, #492]	; (8004b18 <HAL_RCC_OscConfig+0x788>)
 800492c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800492e:	4a7a      	ldr	r2, [pc, #488]	; (8004b18 <HAL_RCC_OscConfig+0x788>)
 8004930:	f023 0304 	bic.w	r3, r3, #4
 8004934:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d015      	beq.n	800496a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800493e:	f7fc fb8d 	bl	800105c <HAL_GetTick>
 8004942:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004944:	e00a      	b.n	800495c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004946:	f7fc fb89 	bl	800105c <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	f241 3288 	movw	r2, #5000	; 0x1388
 8004954:	4293      	cmp	r3, r2
 8004956:	d901      	bls.n	800495c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e122      	b.n	8004ba2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800495c:	4b6e      	ldr	r3, [pc, #440]	; (8004b18 <HAL_RCC_OscConfig+0x788>)
 800495e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004960:	f003 0302 	and.w	r3, r3, #2
 8004964:	2b00      	cmp	r3, #0
 8004966:	d0ee      	beq.n	8004946 <HAL_RCC_OscConfig+0x5b6>
 8004968:	e014      	b.n	8004994 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800496a:	f7fc fb77 	bl	800105c <HAL_GetTick>
 800496e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004970:	e00a      	b.n	8004988 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004972:	f7fc fb73 	bl	800105c <HAL_GetTick>
 8004976:	4602      	mov	r2, r0
 8004978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004980:	4293      	cmp	r3, r2
 8004982:	d901      	bls.n	8004988 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e10c      	b.n	8004ba2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004988:	4b63      	ldr	r3, [pc, #396]	; (8004b18 <HAL_RCC_OscConfig+0x788>)
 800498a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800498c:	f003 0302 	and.w	r3, r3, #2
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1ee      	bne.n	8004972 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004998:	2b00      	cmp	r3, #0
 800499a:	f000 8101 	beq.w	8004ba0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800499e:	4b5e      	ldr	r3, [pc, #376]	; (8004b18 <HAL_RCC_OscConfig+0x788>)
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049a6:	2b18      	cmp	r3, #24
 80049a8:	f000 80bc 	beq.w	8004b24 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	f040 8095 	bne.w	8004ae0 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049b6:	4b58      	ldr	r3, [pc, #352]	; (8004b18 <HAL_RCC_OscConfig+0x788>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a57      	ldr	r2, [pc, #348]	; (8004b18 <HAL_RCC_OscConfig+0x788>)
 80049bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c2:	f7fc fb4b 	bl	800105c <HAL_GetTick>
 80049c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049c8:	e008      	b.n	80049dc <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049ca:	f7fc fb47 	bl	800105c <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d901      	bls.n	80049dc <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e0e2      	b.n	8004ba2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049dc:	4b4e      	ldr	r3, [pc, #312]	; (8004b18 <HAL_RCC_OscConfig+0x788>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1f0      	bne.n	80049ca <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049e8:	4b4b      	ldr	r3, [pc, #300]	; (8004b18 <HAL_RCC_OscConfig+0x788>)
 80049ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049ec:	4b4b      	ldr	r3, [pc, #300]	; (8004b1c <HAL_RCC_OscConfig+0x78c>)
 80049ee:	4013      	ands	r3, r2
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80049f8:	0112      	lsls	r2, r2, #4
 80049fa:	430a      	orrs	r2, r1
 80049fc:	4946      	ldr	r1, [pc, #280]	; (8004b18 <HAL_RCC_OscConfig+0x788>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	628b      	str	r3, [r1, #40]	; 0x28
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a06:	3b01      	subs	r3, #1
 8004a08:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a10:	3b01      	subs	r3, #1
 8004a12:	025b      	lsls	r3, r3, #9
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	431a      	orrs	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	041b      	lsls	r3, r3, #16
 8004a20:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004a24:	431a      	orrs	r2, r3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	061b      	lsls	r3, r3, #24
 8004a2e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004a32:	4939      	ldr	r1, [pc, #228]	; (8004b18 <HAL_RCC_OscConfig+0x788>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004a38:	4b37      	ldr	r3, [pc, #220]	; (8004b18 <HAL_RCC_OscConfig+0x788>)
 8004a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3c:	4a36      	ldr	r2, [pc, #216]	; (8004b18 <HAL_RCC_OscConfig+0x788>)
 8004a3e:	f023 0301 	bic.w	r3, r3, #1
 8004a42:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004a44:	4b34      	ldr	r3, [pc, #208]	; (8004b18 <HAL_RCC_OscConfig+0x788>)
 8004a46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a48:	4b35      	ldr	r3, [pc, #212]	; (8004b20 <HAL_RCC_OscConfig+0x790>)
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004a50:	00d2      	lsls	r2, r2, #3
 8004a52:	4931      	ldr	r1, [pc, #196]	; (8004b18 <HAL_RCC_OscConfig+0x788>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004a58:	4b2f      	ldr	r3, [pc, #188]	; (8004b18 <HAL_RCC_OscConfig+0x788>)
 8004a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5c:	f023 020c 	bic.w	r2, r3, #12
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a64:	492c      	ldr	r1, [pc, #176]	; (8004b18 <HAL_RCC_OscConfig+0x788>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004a6a:	4b2b      	ldr	r3, [pc, #172]	; (8004b18 <HAL_RCC_OscConfig+0x788>)
 8004a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6e:	f023 0202 	bic.w	r2, r3, #2
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a76:	4928      	ldr	r1, [pc, #160]	; (8004b18 <HAL_RCC_OscConfig+0x788>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004a7c:	4b26      	ldr	r3, [pc, #152]	; (8004b18 <HAL_RCC_OscConfig+0x788>)
 8004a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a80:	4a25      	ldr	r2, [pc, #148]	; (8004b18 <HAL_RCC_OscConfig+0x788>)
 8004a82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a88:	4b23      	ldr	r3, [pc, #140]	; (8004b18 <HAL_RCC_OscConfig+0x788>)
 8004a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8c:	4a22      	ldr	r2, [pc, #136]	; (8004b18 <HAL_RCC_OscConfig+0x788>)
 8004a8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004a94:	4b20      	ldr	r3, [pc, #128]	; (8004b18 <HAL_RCC_OscConfig+0x788>)
 8004a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a98:	4a1f      	ldr	r2, [pc, #124]	; (8004b18 <HAL_RCC_OscConfig+0x788>)
 8004a9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004aa0:	4b1d      	ldr	r3, [pc, #116]	; (8004b18 <HAL_RCC_OscConfig+0x788>)
 8004aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa4:	4a1c      	ldr	r2, [pc, #112]	; (8004b18 <HAL_RCC_OscConfig+0x788>)
 8004aa6:	f043 0301 	orr.w	r3, r3, #1
 8004aaa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004aac:	4b1a      	ldr	r3, [pc, #104]	; (8004b18 <HAL_RCC_OscConfig+0x788>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a19      	ldr	r2, [pc, #100]	; (8004b18 <HAL_RCC_OscConfig+0x788>)
 8004ab2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ab6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab8:	f7fc fad0 	bl	800105c <HAL_GetTick>
 8004abc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004abe:	e008      	b.n	8004ad2 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ac0:	f7fc facc 	bl	800105c <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e067      	b.n	8004ba2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ad2:	4b11      	ldr	r3, [pc, #68]	; (8004b18 <HAL_RCC_OscConfig+0x788>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d0f0      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x730>
 8004ade:	e05f      	b.n	8004ba0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ae0:	4b0d      	ldr	r3, [pc, #52]	; (8004b18 <HAL_RCC_OscConfig+0x788>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a0c      	ldr	r2, [pc, #48]	; (8004b18 <HAL_RCC_OscConfig+0x788>)
 8004ae6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004aea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aec:	f7fc fab6 	bl	800105c <HAL_GetTick>
 8004af0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004af2:	e008      	b.n	8004b06 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004af4:	f7fc fab2 	bl	800105c <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d901      	bls.n	8004b06 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e04d      	b.n	8004ba2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b06:	4b04      	ldr	r3, [pc, #16]	; (8004b18 <HAL_RCC_OscConfig+0x788>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1f0      	bne.n	8004af4 <HAL_RCC_OscConfig+0x764>
 8004b12:	e045      	b.n	8004ba0 <HAL_RCC_OscConfig+0x810>
 8004b14:	58024800 	.word	0x58024800
 8004b18:	58024400 	.word	0x58024400
 8004b1c:	fffffc0c 	.word	0xfffffc0c
 8004b20:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004b24:	4b21      	ldr	r3, [pc, #132]	; (8004bac <HAL_RCC_OscConfig+0x81c>)
 8004b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b28:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004b2a:	4b20      	ldr	r3, [pc, #128]	; (8004bac <HAL_RCC_OscConfig+0x81c>)
 8004b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d031      	beq.n	8004b9c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	f003 0203 	and.w	r2, r3, #3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d12a      	bne.n	8004b9c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	091b      	lsrs	r3, r3, #4
 8004b4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d122      	bne.n	8004b9c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b60:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d11a      	bne.n	8004b9c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	0a5b      	lsrs	r3, r3, #9
 8004b6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b72:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d111      	bne.n	8004b9c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	0c1b      	lsrs	r3, r3, #16
 8004b7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b84:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d108      	bne.n	8004b9c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	0e1b      	lsrs	r3, r3, #24
 8004b8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b96:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d001      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e000      	b.n	8004ba2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3730      	adds	r7, #48	; 0x30
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	58024400 	.word	0x58024400

08004bb0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d101      	bne.n	8004bc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e19c      	b.n	8004efe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bc4:	4b8a      	ldr	r3, [pc, #552]	; (8004df0 <HAL_RCC_ClockConfig+0x240>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 030f 	and.w	r3, r3, #15
 8004bcc:	683a      	ldr	r2, [r7, #0]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d910      	bls.n	8004bf4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bd2:	4b87      	ldr	r3, [pc, #540]	; (8004df0 <HAL_RCC_ClockConfig+0x240>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f023 020f 	bic.w	r2, r3, #15
 8004bda:	4985      	ldr	r1, [pc, #532]	; (8004df0 <HAL_RCC_ClockConfig+0x240>)
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004be2:	4b83      	ldr	r3, [pc, #524]	; (8004df0 <HAL_RCC_ClockConfig+0x240>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 030f 	and.w	r3, r3, #15
 8004bea:	683a      	ldr	r2, [r7, #0]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d001      	beq.n	8004bf4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e184      	b.n	8004efe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0304 	and.w	r3, r3, #4
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d010      	beq.n	8004c22 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	691a      	ldr	r2, [r3, #16]
 8004c04:	4b7b      	ldr	r3, [pc, #492]	; (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d908      	bls.n	8004c22 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004c10:	4b78      	ldr	r3, [pc, #480]	; (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004c12:	699b      	ldr	r3, [r3, #24]
 8004c14:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	4975      	ldr	r1, [pc, #468]	; (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0308 	and.w	r3, r3, #8
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d010      	beq.n	8004c50 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	695a      	ldr	r2, [r3, #20]
 8004c32:	4b70      	ldr	r3, [pc, #448]	; (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004c34:	69db      	ldr	r3, [r3, #28]
 8004c36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d908      	bls.n	8004c50 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004c3e:	4b6d      	ldr	r3, [pc, #436]	; (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004c40:	69db      	ldr	r3, [r3, #28]
 8004c42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	496a      	ldr	r1, [pc, #424]	; (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0310 	and.w	r3, r3, #16
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d010      	beq.n	8004c7e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	699a      	ldr	r2, [r3, #24]
 8004c60:	4b64      	ldr	r3, [pc, #400]	; (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004c62:	69db      	ldr	r3, [r3, #28]
 8004c64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d908      	bls.n	8004c7e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004c6c:	4b61      	ldr	r3, [pc, #388]	; (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004c6e:	69db      	ldr	r3, [r3, #28]
 8004c70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	495e      	ldr	r1, [pc, #376]	; (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0320 	and.w	r3, r3, #32
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d010      	beq.n	8004cac <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	69da      	ldr	r2, [r3, #28]
 8004c8e:	4b59      	ldr	r3, [pc, #356]	; (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004c90:	6a1b      	ldr	r3, [r3, #32]
 8004c92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d908      	bls.n	8004cac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004c9a:	4b56      	ldr	r3, [pc, #344]	; (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	69db      	ldr	r3, [r3, #28]
 8004ca6:	4953      	ldr	r1, [pc, #332]	; (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d010      	beq.n	8004cda <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	68da      	ldr	r2, [r3, #12]
 8004cbc:	4b4d      	ldr	r3, [pc, #308]	; (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	f003 030f 	and.w	r3, r3, #15
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d908      	bls.n	8004cda <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cc8:	4b4a      	ldr	r3, [pc, #296]	; (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	f023 020f 	bic.w	r2, r3, #15
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	4947      	ldr	r1, [pc, #284]	; (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d055      	beq.n	8004d92 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004ce6:	4b43      	ldr	r3, [pc, #268]	; (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	4940      	ldr	r1, [pc, #256]	; (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d107      	bne.n	8004d10 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d00:	4b3c      	ldr	r3, [pc, #240]	; (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d121      	bne.n	8004d50 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e0f6      	b.n	8004efe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	2b03      	cmp	r3, #3
 8004d16:	d107      	bne.n	8004d28 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d18:	4b36      	ldr	r3, [pc, #216]	; (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d115      	bne.n	8004d50 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e0ea      	b.n	8004efe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d107      	bne.n	8004d40 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d30:	4b30      	ldr	r3, [pc, #192]	; (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d109      	bne.n	8004d50 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e0de      	b.n	8004efe <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d40:	4b2c      	ldr	r3, [pc, #176]	; (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0304 	and.w	r3, r3, #4
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d101      	bne.n	8004d50 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e0d6      	b.n	8004efe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d50:	4b28      	ldr	r3, [pc, #160]	; (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	f023 0207 	bic.w	r2, r3, #7
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	4925      	ldr	r1, [pc, #148]	; (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d62:	f7fc f97b 	bl	800105c <HAL_GetTick>
 8004d66:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d68:	e00a      	b.n	8004d80 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d6a:	f7fc f977 	bl	800105c <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d901      	bls.n	8004d80 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e0be      	b.n	8004efe <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d80:	4b1c      	ldr	r3, [pc, #112]	; (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	00db      	lsls	r3, r3, #3
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d1eb      	bne.n	8004d6a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d010      	beq.n	8004dc0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	68da      	ldr	r2, [r3, #12]
 8004da2:	4b14      	ldr	r3, [pc, #80]	; (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	f003 030f 	and.w	r3, r3, #15
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d208      	bcs.n	8004dc0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dae:	4b11      	ldr	r3, [pc, #68]	; (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	f023 020f 	bic.w	r2, r3, #15
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	490e      	ldr	r1, [pc, #56]	; (8004df4 <HAL_RCC_ClockConfig+0x244>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004dc0:	4b0b      	ldr	r3, [pc, #44]	; (8004df0 <HAL_RCC_ClockConfig+0x240>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 030f 	and.w	r3, r3, #15
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d214      	bcs.n	8004df8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dce:	4b08      	ldr	r3, [pc, #32]	; (8004df0 <HAL_RCC_ClockConfig+0x240>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f023 020f 	bic.w	r2, r3, #15
 8004dd6:	4906      	ldr	r1, [pc, #24]	; (8004df0 <HAL_RCC_ClockConfig+0x240>)
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dde:	4b04      	ldr	r3, [pc, #16]	; (8004df0 <HAL_RCC_ClockConfig+0x240>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 030f 	and.w	r3, r3, #15
 8004de6:	683a      	ldr	r2, [r7, #0]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d005      	beq.n	8004df8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e086      	b.n	8004efe <HAL_RCC_ClockConfig+0x34e>
 8004df0:	52002000 	.word	0x52002000
 8004df4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0304 	and.w	r3, r3, #4
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d010      	beq.n	8004e26 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	691a      	ldr	r2, [r3, #16]
 8004e08:	4b3f      	ldr	r3, [pc, #252]	; (8004f08 <HAL_RCC_ClockConfig+0x358>)
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d208      	bcs.n	8004e26 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004e14:	4b3c      	ldr	r3, [pc, #240]	; (8004f08 <HAL_RCC_ClockConfig+0x358>)
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	4939      	ldr	r1, [pc, #228]	; (8004f08 <HAL_RCC_ClockConfig+0x358>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0308 	and.w	r3, r3, #8
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d010      	beq.n	8004e54 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	695a      	ldr	r2, [r3, #20]
 8004e36:	4b34      	ldr	r3, [pc, #208]	; (8004f08 <HAL_RCC_ClockConfig+0x358>)
 8004e38:	69db      	ldr	r3, [r3, #28]
 8004e3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d208      	bcs.n	8004e54 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004e42:	4b31      	ldr	r3, [pc, #196]	; (8004f08 <HAL_RCC_ClockConfig+0x358>)
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	492e      	ldr	r1, [pc, #184]	; (8004f08 <HAL_RCC_ClockConfig+0x358>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0310 	and.w	r3, r3, #16
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d010      	beq.n	8004e82 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	699a      	ldr	r2, [r3, #24]
 8004e64:	4b28      	ldr	r3, [pc, #160]	; (8004f08 <HAL_RCC_ClockConfig+0x358>)
 8004e66:	69db      	ldr	r3, [r3, #28]
 8004e68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d208      	bcs.n	8004e82 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004e70:	4b25      	ldr	r3, [pc, #148]	; (8004f08 <HAL_RCC_ClockConfig+0x358>)
 8004e72:	69db      	ldr	r3, [r3, #28]
 8004e74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	4922      	ldr	r1, [pc, #136]	; (8004f08 <HAL_RCC_ClockConfig+0x358>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0320 	and.w	r3, r3, #32
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d010      	beq.n	8004eb0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	69da      	ldr	r2, [r3, #28]
 8004e92:	4b1d      	ldr	r3, [pc, #116]	; (8004f08 <HAL_RCC_ClockConfig+0x358>)
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d208      	bcs.n	8004eb0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004e9e:	4b1a      	ldr	r3, [pc, #104]	; (8004f08 <HAL_RCC_ClockConfig+0x358>)
 8004ea0:	6a1b      	ldr	r3, [r3, #32]
 8004ea2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	69db      	ldr	r3, [r3, #28]
 8004eaa:	4917      	ldr	r1, [pc, #92]	; (8004f08 <HAL_RCC_ClockConfig+0x358>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004eb0:	f000 f834 	bl	8004f1c <HAL_RCC_GetSysClockFreq>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	4b14      	ldr	r3, [pc, #80]	; (8004f08 <HAL_RCC_ClockConfig+0x358>)
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	0a1b      	lsrs	r3, r3, #8
 8004ebc:	f003 030f 	and.w	r3, r3, #15
 8004ec0:	4912      	ldr	r1, [pc, #72]	; (8004f0c <HAL_RCC_ClockConfig+0x35c>)
 8004ec2:	5ccb      	ldrb	r3, [r1, r3]
 8004ec4:	f003 031f 	and.w	r3, r3, #31
 8004ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8004ecc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ece:	4b0e      	ldr	r3, [pc, #56]	; (8004f08 <HAL_RCC_ClockConfig+0x358>)
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	f003 030f 	and.w	r3, r3, #15
 8004ed6:	4a0d      	ldr	r2, [pc, #52]	; (8004f0c <HAL_RCC_ClockConfig+0x35c>)
 8004ed8:	5cd3      	ldrb	r3, [r2, r3]
 8004eda:	f003 031f 	and.w	r3, r3, #31
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ee4:	4a0a      	ldr	r2, [pc, #40]	; (8004f10 <HAL_RCC_ClockConfig+0x360>)
 8004ee6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ee8:	4a0a      	ldr	r2, [pc, #40]	; (8004f14 <HAL_RCC_ClockConfig+0x364>)
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004eee:	4b0a      	ldr	r3, [pc, #40]	; (8004f18 <HAL_RCC_ClockConfig+0x368>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7fc f868 	bl	8000fc8 <HAL_InitTick>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3718      	adds	r7, #24
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	58024400 	.word	0x58024400
 8004f0c:	08008f4c 	.word	0x08008f4c
 8004f10:	24000004 	.word	0x24000004
 8004f14:	24000000 	.word	0x24000000
 8004f18:	24000008 	.word	0x24000008

08004f1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b089      	sub	sp, #36	; 0x24
 8004f20:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f22:	4bb3      	ldr	r3, [pc, #716]	; (80051f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f2a:	2b18      	cmp	r3, #24
 8004f2c:	f200 8155 	bhi.w	80051da <HAL_RCC_GetSysClockFreq+0x2be>
 8004f30:	a201      	add	r2, pc, #4	; (adr r2, 8004f38 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f36:	bf00      	nop
 8004f38:	08004f9d 	.word	0x08004f9d
 8004f3c:	080051db 	.word	0x080051db
 8004f40:	080051db 	.word	0x080051db
 8004f44:	080051db 	.word	0x080051db
 8004f48:	080051db 	.word	0x080051db
 8004f4c:	080051db 	.word	0x080051db
 8004f50:	080051db 	.word	0x080051db
 8004f54:	080051db 	.word	0x080051db
 8004f58:	08004fc3 	.word	0x08004fc3
 8004f5c:	080051db 	.word	0x080051db
 8004f60:	080051db 	.word	0x080051db
 8004f64:	080051db 	.word	0x080051db
 8004f68:	080051db 	.word	0x080051db
 8004f6c:	080051db 	.word	0x080051db
 8004f70:	080051db 	.word	0x080051db
 8004f74:	080051db 	.word	0x080051db
 8004f78:	08004fc9 	.word	0x08004fc9
 8004f7c:	080051db 	.word	0x080051db
 8004f80:	080051db 	.word	0x080051db
 8004f84:	080051db 	.word	0x080051db
 8004f88:	080051db 	.word	0x080051db
 8004f8c:	080051db 	.word	0x080051db
 8004f90:	080051db 	.word	0x080051db
 8004f94:	080051db 	.word	0x080051db
 8004f98:	08004fcf 	.word	0x08004fcf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f9c:	4b94      	ldr	r3, [pc, #592]	; (80051f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0320 	and.w	r3, r3, #32
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d009      	beq.n	8004fbc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004fa8:	4b91      	ldr	r3, [pc, #580]	; (80051f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	08db      	lsrs	r3, r3, #3
 8004fae:	f003 0303 	and.w	r3, r3, #3
 8004fb2:	4a90      	ldr	r2, [pc, #576]	; (80051f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8004fb8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004fba:	e111      	b.n	80051e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004fbc:	4b8d      	ldr	r3, [pc, #564]	; (80051f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004fbe:	61bb      	str	r3, [r7, #24]
    break;
 8004fc0:	e10e      	b.n	80051e0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004fc2:	4b8d      	ldr	r3, [pc, #564]	; (80051f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004fc4:	61bb      	str	r3, [r7, #24]
    break;
 8004fc6:	e10b      	b.n	80051e0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004fc8:	4b8c      	ldr	r3, [pc, #560]	; (80051fc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004fca:	61bb      	str	r3, [r7, #24]
    break;
 8004fcc:	e108      	b.n	80051e0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004fce:	4b88      	ldr	r3, [pc, #544]	; (80051f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd2:	f003 0303 	and.w	r3, r3, #3
 8004fd6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004fd8:	4b85      	ldr	r3, [pc, #532]	; (80051f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fdc:	091b      	lsrs	r3, r3, #4
 8004fde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fe2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004fe4:	4b82      	ldr	r3, [pc, #520]	; (80051f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004fee:	4b80      	ldr	r3, [pc, #512]	; (80051f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ff2:	08db      	lsrs	r3, r3, #3
 8004ff4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	fb02 f303 	mul.w	r3, r2, r3
 8004ffe:	ee07 3a90 	vmov	s15, r3
 8005002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005006:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	2b00      	cmp	r3, #0
 800500e:	f000 80e1 	beq.w	80051d4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	2b02      	cmp	r3, #2
 8005016:	f000 8083 	beq.w	8005120 <HAL_RCC_GetSysClockFreq+0x204>
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	2b02      	cmp	r3, #2
 800501e:	f200 80a1 	bhi.w	8005164 <HAL_RCC_GetSysClockFreq+0x248>
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d003      	beq.n	8005030 <HAL_RCC_GetSysClockFreq+0x114>
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	2b01      	cmp	r3, #1
 800502c:	d056      	beq.n	80050dc <HAL_RCC_GetSysClockFreq+0x1c0>
 800502e:	e099      	b.n	8005164 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005030:	4b6f      	ldr	r3, [pc, #444]	; (80051f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0320 	and.w	r3, r3, #32
 8005038:	2b00      	cmp	r3, #0
 800503a:	d02d      	beq.n	8005098 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800503c:	4b6c      	ldr	r3, [pc, #432]	; (80051f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	08db      	lsrs	r3, r3, #3
 8005042:	f003 0303 	and.w	r3, r3, #3
 8005046:	4a6b      	ldr	r2, [pc, #428]	; (80051f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005048:	fa22 f303 	lsr.w	r3, r2, r3
 800504c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	ee07 3a90 	vmov	s15, r3
 8005054:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	ee07 3a90 	vmov	s15, r3
 800505e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005066:	4b62      	ldr	r3, [pc, #392]	; (80051f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800506e:	ee07 3a90 	vmov	s15, r3
 8005072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005076:	ed97 6a02 	vldr	s12, [r7, #8]
 800507a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005200 <HAL_RCC_GetSysClockFreq+0x2e4>
 800507e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005086:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800508a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800508e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005092:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005096:	e087      	b.n	80051a8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	ee07 3a90 	vmov	s15, r3
 800509e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050a2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005204 <HAL_RCC_GetSysClockFreq+0x2e8>
 80050a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050aa:	4b51      	ldr	r3, [pc, #324]	; (80051f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050b2:	ee07 3a90 	vmov	s15, r3
 80050b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80050be:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005200 <HAL_RCC_GetSysClockFreq+0x2e4>
 80050c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050da:	e065      	b.n	80051a8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	ee07 3a90 	vmov	s15, r3
 80050e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050e6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005208 <HAL_RCC_GetSysClockFreq+0x2ec>
 80050ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050ee:	4b40      	ldr	r3, [pc, #256]	; (80051f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050f6:	ee07 3a90 	vmov	s15, r3
 80050fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005102:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005200 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800510a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800510e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800511a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800511e:	e043      	b.n	80051a8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	ee07 3a90 	vmov	s15, r3
 8005126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800512a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800520c <HAL_RCC_GetSysClockFreq+0x2f0>
 800512e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005132:	4b2f      	ldr	r3, [pc, #188]	; (80051f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800513a:	ee07 3a90 	vmov	s15, r3
 800513e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005142:	ed97 6a02 	vldr	s12, [r7, #8]
 8005146:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005200 <HAL_RCC_GetSysClockFreq+0x2e4>
 800514a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800514e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005152:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800515a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800515e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005162:	e021      	b.n	80051a8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	ee07 3a90 	vmov	s15, r3
 800516a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800516e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005208 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005176:	4b1e      	ldr	r3, [pc, #120]	; (80051f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800517e:	ee07 3a90 	vmov	s15, r3
 8005182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005186:	ed97 6a02 	vldr	s12, [r7, #8]
 800518a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005200 <HAL_RCC_GetSysClockFreq+0x2e4>
 800518e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005196:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800519a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800519e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051a6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80051a8:	4b11      	ldr	r3, [pc, #68]	; (80051f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ac:	0a5b      	lsrs	r3, r3, #9
 80051ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051b2:	3301      	adds	r3, #1
 80051b4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	ee07 3a90 	vmov	s15, r3
 80051bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80051c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80051c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051cc:	ee17 3a90 	vmov	r3, s15
 80051d0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80051d2:	e005      	b.n	80051e0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80051d4:	2300      	movs	r3, #0
 80051d6:	61bb      	str	r3, [r7, #24]
    break;
 80051d8:	e002      	b.n	80051e0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80051da:	4b07      	ldr	r3, [pc, #28]	; (80051f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80051dc:	61bb      	str	r3, [r7, #24]
    break;
 80051de:	bf00      	nop
  }

  return sysclockfreq;
 80051e0:	69bb      	ldr	r3, [r7, #24]
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3724      	adds	r7, #36	; 0x24
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	58024400 	.word	0x58024400
 80051f4:	03d09000 	.word	0x03d09000
 80051f8:	003d0900 	.word	0x003d0900
 80051fc:	017d7840 	.word	0x017d7840
 8005200:	46000000 	.word	0x46000000
 8005204:	4c742400 	.word	0x4c742400
 8005208:	4a742400 	.word	0x4a742400
 800520c:	4bbebc20 	.word	0x4bbebc20

08005210 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005216:	f7ff fe81 	bl	8004f1c <HAL_RCC_GetSysClockFreq>
 800521a:	4602      	mov	r2, r0
 800521c:	4b10      	ldr	r3, [pc, #64]	; (8005260 <HAL_RCC_GetHCLKFreq+0x50>)
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	0a1b      	lsrs	r3, r3, #8
 8005222:	f003 030f 	and.w	r3, r3, #15
 8005226:	490f      	ldr	r1, [pc, #60]	; (8005264 <HAL_RCC_GetHCLKFreq+0x54>)
 8005228:	5ccb      	ldrb	r3, [r1, r3]
 800522a:	f003 031f 	and.w	r3, r3, #31
 800522e:	fa22 f303 	lsr.w	r3, r2, r3
 8005232:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005234:	4b0a      	ldr	r3, [pc, #40]	; (8005260 <HAL_RCC_GetHCLKFreq+0x50>)
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	f003 030f 	and.w	r3, r3, #15
 800523c:	4a09      	ldr	r2, [pc, #36]	; (8005264 <HAL_RCC_GetHCLKFreq+0x54>)
 800523e:	5cd3      	ldrb	r3, [r2, r3]
 8005240:	f003 031f 	and.w	r3, r3, #31
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	fa22 f303 	lsr.w	r3, r2, r3
 800524a:	4a07      	ldr	r2, [pc, #28]	; (8005268 <HAL_RCC_GetHCLKFreq+0x58>)
 800524c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800524e:	4a07      	ldr	r2, [pc, #28]	; (800526c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005254:	4b04      	ldr	r3, [pc, #16]	; (8005268 <HAL_RCC_GetHCLKFreq+0x58>)
 8005256:	681b      	ldr	r3, [r3, #0]
}
 8005258:	4618      	mov	r0, r3
 800525a:	3708      	adds	r7, #8
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	58024400 	.word	0x58024400
 8005264:	08008f4c 	.word	0x08008f4c
 8005268:	24000004 	.word	0x24000004
 800526c:	24000000 	.word	0x24000000

08005270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005274:	f7ff ffcc 	bl	8005210 <HAL_RCC_GetHCLKFreq>
 8005278:	4602      	mov	r2, r0
 800527a:	4b06      	ldr	r3, [pc, #24]	; (8005294 <HAL_RCC_GetPCLK1Freq+0x24>)
 800527c:	69db      	ldr	r3, [r3, #28]
 800527e:	091b      	lsrs	r3, r3, #4
 8005280:	f003 0307 	and.w	r3, r3, #7
 8005284:	4904      	ldr	r1, [pc, #16]	; (8005298 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005286:	5ccb      	ldrb	r3, [r1, r3]
 8005288:	f003 031f 	and.w	r3, r3, #31
 800528c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005290:	4618      	mov	r0, r3
 8005292:	bd80      	pop	{r7, pc}
 8005294:	58024400 	.word	0x58024400
 8005298:	08008f4c 	.word	0x08008f4c

0800529c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80052a0:	f7ff ffb6 	bl	8005210 <HAL_RCC_GetHCLKFreq>
 80052a4:	4602      	mov	r2, r0
 80052a6:	4b06      	ldr	r3, [pc, #24]	; (80052c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052a8:	69db      	ldr	r3, [r3, #28]
 80052aa:	0a1b      	lsrs	r3, r3, #8
 80052ac:	f003 0307 	and.w	r3, r3, #7
 80052b0:	4904      	ldr	r1, [pc, #16]	; (80052c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80052b2:	5ccb      	ldrb	r3, [r1, r3]
 80052b4:	f003 031f 	and.w	r3, r3, #31
 80052b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80052bc:	4618      	mov	r0, r3
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	58024400 	.word	0x58024400
 80052c4:	08008f4c 	.word	0x08008f4c

080052c8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80052d0:	2300      	movs	r3, #0
 80052d2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80052d4:	2300      	movs	r3, #0
 80052d6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d03f      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80052ec:	d02a      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80052ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80052f2:	d824      	bhi.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80052f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052f8:	d018      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80052fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052fe:	d81e      	bhi.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005300:	2b00      	cmp	r3, #0
 8005302:	d003      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005304:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005308:	d007      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800530a:	e018      	b.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800530c:	4bab      	ldr	r3, [pc, #684]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800530e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005310:	4aaa      	ldr	r2, [pc, #680]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005312:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005316:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005318:	e015      	b.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	3304      	adds	r3, #4
 800531e:	2102      	movs	r1, #2
 8005320:	4618      	mov	r0, r3
 8005322:	f001 f9ff 	bl	8006724 <RCCEx_PLL2_Config>
 8005326:	4603      	mov	r3, r0
 8005328:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800532a:	e00c      	b.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	3324      	adds	r3, #36	; 0x24
 8005330:	2102      	movs	r1, #2
 8005332:	4618      	mov	r0, r3
 8005334:	f001 faa8 	bl	8006888 <RCCEx_PLL3_Config>
 8005338:	4603      	mov	r3, r0
 800533a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800533c:	e003      	b.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	75fb      	strb	r3, [r7, #23]
      break;
 8005342:	e000      	b.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005344:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005346:	7dfb      	ldrb	r3, [r7, #23]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d109      	bne.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800534c:	4b9b      	ldr	r3, [pc, #620]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800534e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005350:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005358:	4998      	ldr	r1, [pc, #608]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800535a:	4313      	orrs	r3, r2
 800535c:	650b      	str	r3, [r1, #80]	; 0x50
 800535e:	e001      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005360:	7dfb      	ldrb	r3, [r7, #23]
 8005362:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800536c:	2b00      	cmp	r3, #0
 800536e:	d03d      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005374:	2b04      	cmp	r3, #4
 8005376:	d826      	bhi.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005378:	a201      	add	r2, pc, #4	; (adr r2, 8005380 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800537a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800537e:	bf00      	nop
 8005380:	08005395 	.word	0x08005395
 8005384:	080053a3 	.word	0x080053a3
 8005388:	080053b5 	.word	0x080053b5
 800538c:	080053cd 	.word	0x080053cd
 8005390:	080053cd 	.word	0x080053cd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005394:	4b89      	ldr	r3, [pc, #548]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005398:	4a88      	ldr	r2, [pc, #544]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800539a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800539e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80053a0:	e015      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	3304      	adds	r3, #4
 80053a6:	2100      	movs	r1, #0
 80053a8:	4618      	mov	r0, r3
 80053aa:	f001 f9bb 	bl	8006724 <RCCEx_PLL2_Config>
 80053ae:	4603      	mov	r3, r0
 80053b0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80053b2:	e00c      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	3324      	adds	r3, #36	; 0x24
 80053b8:	2100      	movs	r1, #0
 80053ba:	4618      	mov	r0, r3
 80053bc:	f001 fa64 	bl	8006888 <RCCEx_PLL3_Config>
 80053c0:	4603      	mov	r3, r0
 80053c2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80053c4:	e003      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	75fb      	strb	r3, [r7, #23]
      break;
 80053ca:	e000      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80053cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053ce:	7dfb      	ldrb	r3, [r7, #23]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d109      	bne.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80053d4:	4b79      	ldr	r3, [pc, #484]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80053d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053d8:	f023 0207 	bic.w	r2, r3, #7
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053e0:	4976      	ldr	r1, [pc, #472]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80053e2:	4313      	orrs	r3, r2
 80053e4:	650b      	str	r3, [r1, #80]	; 0x50
 80053e6:	e001      	b.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053e8:	7dfb      	ldrb	r3, [r7, #23]
 80053ea:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d042      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005400:	d02b      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005406:	d825      	bhi.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005408:	2bc0      	cmp	r3, #192	; 0xc0
 800540a:	d028      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800540c:	2bc0      	cmp	r3, #192	; 0xc0
 800540e:	d821      	bhi.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005410:	2b80      	cmp	r3, #128	; 0x80
 8005412:	d016      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005414:	2b80      	cmp	r3, #128	; 0x80
 8005416:	d81d      	bhi.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005418:	2b00      	cmp	r3, #0
 800541a:	d002      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800541c:	2b40      	cmp	r3, #64	; 0x40
 800541e:	d007      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005420:	e018      	b.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005422:	4b66      	ldr	r3, [pc, #408]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005426:	4a65      	ldr	r2, [pc, #404]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800542c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800542e:	e017      	b.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	3304      	adds	r3, #4
 8005434:	2100      	movs	r1, #0
 8005436:	4618      	mov	r0, r3
 8005438:	f001 f974 	bl	8006724 <RCCEx_PLL2_Config>
 800543c:	4603      	mov	r3, r0
 800543e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005440:	e00e      	b.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	3324      	adds	r3, #36	; 0x24
 8005446:	2100      	movs	r1, #0
 8005448:	4618      	mov	r0, r3
 800544a:	f001 fa1d 	bl	8006888 <RCCEx_PLL3_Config>
 800544e:	4603      	mov	r3, r0
 8005450:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005452:	e005      	b.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	75fb      	strb	r3, [r7, #23]
      break;
 8005458:	e002      	b.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800545a:	bf00      	nop
 800545c:	e000      	b.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800545e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005460:	7dfb      	ldrb	r3, [r7, #23]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d109      	bne.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005466:	4b55      	ldr	r3, [pc, #340]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800546a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005472:	4952      	ldr	r1, [pc, #328]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005474:	4313      	orrs	r3, r2
 8005476:	650b      	str	r3, [r1, #80]	; 0x50
 8005478:	e001      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800547a:	7dfb      	ldrb	r3, [r7, #23]
 800547c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005486:	2b00      	cmp	r3, #0
 8005488:	d049      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005490:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005494:	d030      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005496:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800549a:	d82a      	bhi.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800549c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80054a0:	d02c      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x234>
 80054a2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80054a6:	d824      	bhi.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80054a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054ac:	d018      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80054ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054b2:	d81e      	bhi.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d003      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80054b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054bc:	d007      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x206>
 80054be:	e018      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054c0:	4b3e      	ldr	r3, [pc, #248]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80054c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c4:	4a3d      	ldr	r2, [pc, #244]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80054c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80054cc:	e017      	b.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	3304      	adds	r3, #4
 80054d2:	2100      	movs	r1, #0
 80054d4:	4618      	mov	r0, r3
 80054d6:	f001 f925 	bl	8006724 <RCCEx_PLL2_Config>
 80054da:	4603      	mov	r3, r0
 80054dc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80054de:	e00e      	b.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	3324      	adds	r3, #36	; 0x24
 80054e4:	2100      	movs	r1, #0
 80054e6:	4618      	mov	r0, r3
 80054e8:	f001 f9ce 	bl	8006888 <RCCEx_PLL3_Config>
 80054ec:	4603      	mov	r3, r0
 80054ee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80054f0:	e005      	b.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	75fb      	strb	r3, [r7, #23]
      break;
 80054f6:	e002      	b.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80054f8:	bf00      	nop
 80054fa:	e000      	b.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80054fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054fe:	7dfb      	ldrb	r3, [r7, #23]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d10a      	bne.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005504:	4b2d      	ldr	r3, [pc, #180]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005508:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005512:	492a      	ldr	r1, [pc, #168]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005514:	4313      	orrs	r3, r2
 8005516:	658b      	str	r3, [r1, #88]	; 0x58
 8005518:	e001      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800551a:	7dfb      	ldrb	r3, [r7, #23]
 800551c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005526:	2b00      	cmp	r3, #0
 8005528:	d04c      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005530:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005534:	d030      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005536:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800553a:	d82a      	bhi.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800553c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005540:	d02c      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8005542:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005546:	d824      	bhi.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005548:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800554c:	d018      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800554e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005552:	d81e      	bhi.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005554:	2b00      	cmp	r3, #0
 8005556:	d003      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005558:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800555c:	d007      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800555e:	e018      	b.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005560:	4b16      	ldr	r3, [pc, #88]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005564:	4a15      	ldr	r2, [pc, #84]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800556a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800556c:	e017      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	3304      	adds	r3, #4
 8005572:	2100      	movs	r1, #0
 8005574:	4618      	mov	r0, r3
 8005576:	f001 f8d5 	bl	8006724 <RCCEx_PLL2_Config>
 800557a:	4603      	mov	r3, r0
 800557c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800557e:	e00e      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	3324      	adds	r3, #36	; 0x24
 8005584:	2100      	movs	r1, #0
 8005586:	4618      	mov	r0, r3
 8005588:	f001 f97e 	bl	8006888 <RCCEx_PLL3_Config>
 800558c:	4603      	mov	r3, r0
 800558e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005590:	e005      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	75fb      	strb	r3, [r7, #23]
      break;
 8005596:	e002      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005598:	bf00      	nop
 800559a:	e000      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800559c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800559e:	7dfb      	ldrb	r3, [r7, #23]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d10d      	bne.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80055a4:	4b05      	ldr	r3, [pc, #20]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80055b2:	4902      	ldr	r1, [pc, #8]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	658b      	str	r3, [r1, #88]	; 0x58
 80055b8:	e004      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80055ba:	bf00      	nop
 80055bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055c0:	7dfb      	ldrb	r3, [r7, #23]
 80055c2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d032      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055d4:	2b30      	cmp	r3, #48	; 0x30
 80055d6:	d01c      	beq.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80055d8:	2b30      	cmp	r3, #48	; 0x30
 80055da:	d817      	bhi.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x344>
 80055dc:	2b20      	cmp	r3, #32
 80055de:	d00c      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x332>
 80055e0:	2b20      	cmp	r3, #32
 80055e2:	d813      	bhi.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x344>
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d016      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80055e8:	2b10      	cmp	r3, #16
 80055ea:	d10f      	bne.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055ec:	4bb1      	ldr	r3, [pc, #708]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80055ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f0:	4ab0      	ldr	r2, [pc, #704]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80055f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80055f8:	e00e      	b.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	3304      	adds	r3, #4
 80055fe:	2102      	movs	r1, #2
 8005600:	4618      	mov	r0, r3
 8005602:	f001 f88f 	bl	8006724 <RCCEx_PLL2_Config>
 8005606:	4603      	mov	r3, r0
 8005608:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800560a:	e005      	b.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	75fb      	strb	r3, [r7, #23]
      break;
 8005610:	e002      	b.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005612:	bf00      	nop
 8005614:	e000      	b.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005616:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005618:	7dfb      	ldrb	r3, [r7, #23]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d109      	bne.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800561e:	4ba5      	ldr	r3, [pc, #660]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005622:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800562a:	49a2      	ldr	r1, [pc, #648]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800562c:	4313      	orrs	r3, r2
 800562e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005630:	e001      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005632:	7dfb      	ldrb	r3, [r7, #23]
 8005634:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d047      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005646:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800564a:	d030      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800564c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005650:	d82a      	bhi.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005652:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005656:	d02c      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8005658:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800565c:	d824      	bhi.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800565e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005662:	d018      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8005664:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005668:	d81e      	bhi.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800566e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005672:	d007      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005674:	e018      	b.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005676:	4b8f      	ldr	r3, [pc, #572]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800567a:	4a8e      	ldr	r2, [pc, #568]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800567c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005680:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005682:	e017      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	3304      	adds	r3, #4
 8005688:	2100      	movs	r1, #0
 800568a:	4618      	mov	r0, r3
 800568c:	f001 f84a 	bl	8006724 <RCCEx_PLL2_Config>
 8005690:	4603      	mov	r3, r0
 8005692:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005694:	e00e      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	3324      	adds	r3, #36	; 0x24
 800569a:	2100      	movs	r1, #0
 800569c:	4618      	mov	r0, r3
 800569e:	f001 f8f3 	bl	8006888 <RCCEx_PLL3_Config>
 80056a2:	4603      	mov	r3, r0
 80056a4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80056a6:	e005      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	75fb      	strb	r3, [r7, #23]
      break;
 80056ac:	e002      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80056ae:	bf00      	nop
 80056b0:	e000      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80056b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056b4:	7dfb      	ldrb	r3, [r7, #23]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d109      	bne.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80056ba:	4b7e      	ldr	r3, [pc, #504]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80056bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056be:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056c6:	497b      	ldr	r1, [pc, #492]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	650b      	str	r3, [r1, #80]	; 0x50
 80056cc:	e001      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ce:	7dfb      	ldrb	r3, [r7, #23]
 80056d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d049      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056e6:	d02e      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80056e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056ec:	d828      	bhi.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80056ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80056f2:	d02a      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x482>
 80056f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80056f8:	d822      	bhi.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80056fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80056fe:	d026      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8005700:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005704:	d81c      	bhi.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005706:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800570a:	d010      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x466>
 800570c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005710:	d816      	bhi.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005712:	2b00      	cmp	r3, #0
 8005714:	d01d      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8005716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800571a:	d111      	bne.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	3304      	adds	r3, #4
 8005720:	2101      	movs	r1, #1
 8005722:	4618      	mov	r0, r3
 8005724:	f000 fffe 	bl	8006724 <RCCEx_PLL2_Config>
 8005728:	4603      	mov	r3, r0
 800572a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800572c:	e012      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	3324      	adds	r3, #36	; 0x24
 8005732:	2101      	movs	r1, #1
 8005734:	4618      	mov	r0, r3
 8005736:	f001 f8a7 	bl	8006888 <RCCEx_PLL3_Config>
 800573a:	4603      	mov	r3, r0
 800573c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800573e:	e009      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	75fb      	strb	r3, [r7, #23]
      break;
 8005744:	e006      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005746:	bf00      	nop
 8005748:	e004      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800574a:	bf00      	nop
 800574c:	e002      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800574e:	bf00      	nop
 8005750:	e000      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005752:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005754:	7dfb      	ldrb	r3, [r7, #23]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d109      	bne.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800575a:	4b56      	ldr	r3, [pc, #344]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800575c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800575e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005766:	4953      	ldr	r1, [pc, #332]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005768:	4313      	orrs	r3, r2
 800576a:	650b      	str	r3, [r1, #80]	; 0x50
 800576c:	e001      	b.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800576e:	7dfb      	ldrb	r3, [r7, #23]
 8005770:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d04b      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005784:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005788:	d02e      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800578a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800578e:	d828      	bhi.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005794:	d02a      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800579a:	d822      	bhi.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800579c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80057a0:	d026      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80057a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80057a6:	d81c      	bhi.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80057a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057ac:	d010      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80057ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057b2:	d816      	bhi.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d01d      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80057b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057bc:	d111      	bne.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	3304      	adds	r3, #4
 80057c2:	2101      	movs	r1, #1
 80057c4:	4618      	mov	r0, r3
 80057c6:	f000 ffad 	bl	8006724 <RCCEx_PLL2_Config>
 80057ca:	4603      	mov	r3, r0
 80057cc:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80057ce:	e012      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	3324      	adds	r3, #36	; 0x24
 80057d4:	2101      	movs	r1, #1
 80057d6:	4618      	mov	r0, r3
 80057d8:	f001 f856 	bl	8006888 <RCCEx_PLL3_Config>
 80057dc:	4603      	mov	r3, r0
 80057de:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80057e0:	e009      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	75fb      	strb	r3, [r7, #23]
      break;
 80057e6:	e006      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80057e8:	bf00      	nop
 80057ea:	e004      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80057ec:	bf00      	nop
 80057ee:	e002      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80057f0:	bf00      	nop
 80057f2:	e000      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80057f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057f6:	7dfb      	ldrb	r3, [r7, #23]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10a      	bne.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80057fc:	4b2d      	ldr	r3, [pc, #180]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80057fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005800:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800580a:	492a      	ldr	r1, [pc, #168]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800580c:	4313      	orrs	r3, r2
 800580e:	658b      	str	r3, [r1, #88]	; 0x58
 8005810:	e001      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005812:	7dfb      	ldrb	r3, [r7, #23]
 8005814:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d022      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    switch(PeriphClkInit->DsiClockSelection)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00e      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x580>
 800582a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800582e:	d108      	bne.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x57a>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	3304      	adds	r3, #4
 8005834:	2101      	movs	r1, #1
 8005836:	4618      	mov	r0, r3
 8005838:	f000 ff74 	bl	8006724 <RCCEx_PLL2_Config>
 800583c:	4603      	mov	r3, r0
 800583e:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 8005840:	e003      	b.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x582>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	75fb      	strb	r3, [r7, #23]
      break;
 8005846:	e000      	b.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x582>
      break;
 8005848:	bf00      	nop
    }

    if(ret == HAL_OK)
 800584a:	7dfb      	ldrb	r3, [r7, #23]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d109      	bne.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8005850:	4b18      	ldr	r3, [pc, #96]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005854:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800585c:	4915      	ldr	r1, [pc, #84]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800585e:	4313      	orrs	r3, r2
 8005860:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005862:	e001      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005864:	7dfb      	ldrb	r3, [r7, #23]
 8005866:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005870:	2b00      	cmp	r3, #0
 8005872:	d031      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x610>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005878:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800587c:	d00e      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800587e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005882:	d814      	bhi.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 8005884:	2b00      	cmp	r3, #0
 8005886:	d017      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 8005888:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800588c:	d10f      	bne.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800588e:	4b09      	ldr	r3, [pc, #36]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005892:	4a08      	ldr	r2, [pc, #32]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005898:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800589a:	e00e      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x5f2>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	3304      	adds	r3, #4
 80058a0:	2101      	movs	r1, #1
 80058a2:	4618      	mov	r0, r3
 80058a4:	f000 ff3e 	bl	8006724 <RCCEx_PLL2_Config>
 80058a8:	4603      	mov	r3, r0
 80058aa:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80058ac:	e005      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	75fb      	strb	r3, [r7, #23]
      break;
 80058b2:	e002      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 80058b4:	58024400 	.word	0x58024400
      break;
 80058b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058ba:	7dfb      	ldrb	r3, [r7, #23]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d109      	bne.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80058c0:	4bbc      	ldr	r3, [pc, #752]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80058c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058c4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058cc:	49b9      	ldr	r1, [pc, #740]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	650b      	str	r3, [r1, #80]	; 0x50
 80058d2:	e001      	b.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058d4:	7dfb      	ldrb	r3, [r7, #23]
 80058d6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d032      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e8:	2b03      	cmp	r3, #3
 80058ea:	d81b      	bhi.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 80058ec:	a201      	add	r2, pc, #4	; (adr r2, 80058f4 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 80058ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f2:	bf00      	nop
 80058f4:	0800592b 	.word	0x0800592b
 80058f8:	08005905 	.word	0x08005905
 80058fc:	08005913 	.word	0x08005913
 8005900:	0800592b 	.word	0x0800592b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005904:	4bab      	ldr	r3, [pc, #684]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005908:	4aaa      	ldr	r2, [pc, #680]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800590a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800590e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005910:	e00c      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x664>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	3304      	adds	r3, #4
 8005916:	2102      	movs	r1, #2
 8005918:	4618      	mov	r0, r3
 800591a:	f000 ff03 	bl	8006724 <RCCEx_PLL2_Config>
 800591e:	4603      	mov	r3, r0
 8005920:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005922:	e003      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x664>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	75fb      	strb	r3, [r7, #23]
      break;
 8005928:	e000      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x664>
      break;
 800592a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800592c:	7dfb      	ldrb	r3, [r7, #23]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d109      	bne.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005932:	4ba0      	ldr	r3, [pc, #640]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005936:	f023 0203 	bic.w	r2, r3, #3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800593e:	499d      	ldr	r1, [pc, #628]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005940:	4313      	orrs	r3, r2
 8005942:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005944:	e001      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x682>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005946:	7dfb      	ldrb	r3, [r7, #23]
 8005948:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005952:	2b00      	cmp	r3, #0
 8005954:	f000 8086 	beq.w	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x79c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005958:	4b97      	ldr	r3, [pc, #604]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a96      	ldr	r2, [pc, #600]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800595e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005962:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005964:	f7fb fb7a 	bl	800105c <HAL_GetTick>
 8005968:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800596a:	e009      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800596c:	f7fb fb76 	bl	800105c <HAL_GetTick>
 8005970:	4602      	mov	r2, r0
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	2b64      	cmp	r3, #100	; 0x64
 8005978:	d902      	bls.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      {
        ret = HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	75fb      	strb	r3, [r7, #23]
        break;
 800597e:	e005      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005980:	4b8d      	ldr	r3, [pc, #564]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005988:	2b00      	cmp	r3, #0
 800598a:	d0ef      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      }
    }

    if(ret == HAL_OK)
 800598c:	7dfb      	ldrb	r3, [r7, #23]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d166      	bne.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005992:	4b88      	ldr	r3, [pc, #544]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005994:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800599c:	4053      	eors	r3, r2
 800599e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d013      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x706>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059a6:	4b83      	ldr	r3, [pc, #524]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80059a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059ae:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80059b0:	4b80      	ldr	r3, [pc, #512]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80059b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b4:	4a7f      	ldr	r2, [pc, #508]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80059b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059ba:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80059bc:	4b7d      	ldr	r3, [pc, #500]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80059be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c0:	4a7c      	ldr	r2, [pc, #496]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80059c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059c6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80059c8:	4a7a      	ldr	r2, [pc, #488]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80059d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059d8:	d115      	bne.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059da:	f7fb fb3f 	bl	800105c <HAL_GetTick>
 80059de:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059e0:	e00b      	b.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x732>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059e2:	f7fb fb3b 	bl	800105c <HAL_GetTick>
 80059e6:	4602      	mov	r2, r0
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d902      	bls.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x732>
          {
            ret = HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	75fb      	strb	r3, [r7, #23]
            break;
 80059f8:	e005      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x73e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059fa:	4b6e      	ldr	r3, [pc, #440]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80059fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059fe:	f003 0302 	and.w	r3, r3, #2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d0ed      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x71a>
          }
        }
      }

      if(ret == HAL_OK)
 8005a06:	7dfb      	ldrb	r3, [r7, #23]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d126      	bne.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x792>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a1a:	d10d      	bne.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x770>
 8005a1c:	4b65      	ldr	r3, [pc, #404]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005a2a:	0919      	lsrs	r1, r3, #4
 8005a2c:	4b63      	ldr	r3, [pc, #396]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x8f4>)
 8005a2e:	400b      	ands	r3, r1
 8005a30:	4960      	ldr	r1, [pc, #384]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	610b      	str	r3, [r1, #16]
 8005a36:	e005      	b.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x77c>
 8005a38:	4b5e      	ldr	r3, [pc, #376]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	4a5d      	ldr	r2, [pc, #372]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005a3e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005a42:	6113      	str	r3, [r2, #16]
 8005a44:	4b5b      	ldr	r3, [pc, #364]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005a46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005a4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a52:	4958      	ldr	r1, [pc, #352]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005a54:	4313      	orrs	r3, r2
 8005a56:	670b      	str	r3, [r1, #112]	; 0x70
 8005a58:	e004      	b.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a5a:	7dfb      	ldrb	r3, [r7, #23]
 8005a5c:	75bb      	strb	r3, [r7, #22]
 8005a5e:	e001      	b.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a60:	7dfb      	ldrb	r3, [r7, #23]
 8005a62:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d07e      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x8a6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a74:	2b28      	cmp	r3, #40	; 0x28
 8005a76:	d867      	bhi.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x880>
 8005a78:	a201      	add	r2, pc, #4	; (adr r2, 8005a80 <HAL_RCCEx_PeriphCLKConfig+0x7b8>)
 8005a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a7e:	bf00      	nop
 8005a80:	08005b4f 	.word	0x08005b4f
 8005a84:	08005b49 	.word	0x08005b49
 8005a88:	08005b49 	.word	0x08005b49
 8005a8c:	08005b49 	.word	0x08005b49
 8005a90:	08005b49 	.word	0x08005b49
 8005a94:	08005b49 	.word	0x08005b49
 8005a98:	08005b49 	.word	0x08005b49
 8005a9c:	08005b49 	.word	0x08005b49
 8005aa0:	08005b25 	.word	0x08005b25
 8005aa4:	08005b49 	.word	0x08005b49
 8005aa8:	08005b49 	.word	0x08005b49
 8005aac:	08005b49 	.word	0x08005b49
 8005ab0:	08005b49 	.word	0x08005b49
 8005ab4:	08005b49 	.word	0x08005b49
 8005ab8:	08005b49 	.word	0x08005b49
 8005abc:	08005b49 	.word	0x08005b49
 8005ac0:	08005b37 	.word	0x08005b37
 8005ac4:	08005b49 	.word	0x08005b49
 8005ac8:	08005b49 	.word	0x08005b49
 8005acc:	08005b49 	.word	0x08005b49
 8005ad0:	08005b49 	.word	0x08005b49
 8005ad4:	08005b49 	.word	0x08005b49
 8005ad8:	08005b49 	.word	0x08005b49
 8005adc:	08005b49 	.word	0x08005b49
 8005ae0:	08005b4f 	.word	0x08005b4f
 8005ae4:	08005b49 	.word	0x08005b49
 8005ae8:	08005b49 	.word	0x08005b49
 8005aec:	08005b49 	.word	0x08005b49
 8005af0:	08005b49 	.word	0x08005b49
 8005af4:	08005b49 	.word	0x08005b49
 8005af8:	08005b49 	.word	0x08005b49
 8005afc:	08005b49 	.word	0x08005b49
 8005b00:	08005b4f 	.word	0x08005b4f
 8005b04:	08005b49 	.word	0x08005b49
 8005b08:	08005b49 	.word	0x08005b49
 8005b0c:	08005b49 	.word	0x08005b49
 8005b10:	08005b49 	.word	0x08005b49
 8005b14:	08005b49 	.word	0x08005b49
 8005b18:	08005b49 	.word	0x08005b49
 8005b1c:	08005b49 	.word	0x08005b49
 8005b20:	08005b4f 	.word	0x08005b4f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	3304      	adds	r3, #4
 8005b28:	2101      	movs	r1, #1
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f000 fdfa 	bl	8006724 <RCCEx_PLL2_Config>
 8005b30:	4603      	mov	r3, r0
 8005b32:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005b34:	e00c      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x888>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	3324      	adds	r3, #36	; 0x24
 8005b3a:	2101      	movs	r1, #1
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f000 fea3 	bl	8006888 <RCCEx_PLL3_Config>
 8005b42:	4603      	mov	r3, r0
 8005b44:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005b46:	e003      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x888>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	75fb      	strb	r3, [r7, #23]
      break;
 8005b4c:	e000      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x888>
      break;
 8005b4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b50:	7dfb      	ldrb	r3, [r7, #23]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d109      	bne.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x8a2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005b56:	4b17      	ldr	r3, [pc, #92]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b5a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b62:	4914      	ldr	r1, [pc, #80]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005b64:	4313      	orrs	r3, r2
 8005b66:	654b      	str	r3, [r1, #84]	; 0x54
 8005b68:	e001      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x8a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b6a:	7dfb      	ldrb	r3, [r7, #23]
 8005b6c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0302 	and.w	r3, r3, #2
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d03e      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b7e:	2b05      	cmp	r3, #5
 8005b80:	d827      	bhi.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8005b82:	a201      	add	r2, pc, #4	; (adr r2, 8005b88 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b88:	08005bd9 	.word	0x08005bd9
 8005b8c:	08005ba1 	.word	0x08005ba1
 8005b90:	08005bc1 	.word	0x08005bc1
 8005b94:	08005bd9 	.word	0x08005bd9
 8005b98:	08005bd9 	.word	0x08005bd9
 8005b9c:	08005bd9 	.word	0x08005bd9
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	3304      	adds	r3, #4
 8005ba4:	2101      	movs	r1, #1
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f000 fdbc 	bl	8006724 <RCCEx_PLL2_Config>
 8005bac:	4603      	mov	r3, r0
 8005bae:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005bb0:	e013      	b.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x912>
 8005bb2:	bf00      	nop
 8005bb4:	58024400 	.word	0x58024400
 8005bb8:	58024800 	.word	0x58024800
 8005bbc:	00ffffcf 	.word	0x00ffffcf

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	3324      	adds	r3, #36	; 0x24
 8005bc4:	2101      	movs	r1, #1
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f000 fe5e 	bl	8006888 <RCCEx_PLL3_Config>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005bd0:	e003      	b.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x912>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	75fb      	strb	r3, [r7, #23]
      break;
 8005bd6:	e000      	b.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8005bd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bda:	7dfb      	ldrb	r3, [r7, #23]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d109      	bne.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x92c>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005be0:	4b9f      	ldr	r3, [pc, #636]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8005be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be4:	f023 0207 	bic.w	r2, r3, #7
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bec:	499c      	ldr	r1, [pc, #624]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	654b      	str	r3, [r1, #84]	; 0x54
 8005bf2:	e001      	b.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bf4:	7dfb      	ldrb	r3, [r7, #23]
 8005bf6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0304 	and.w	r3, r3, #4
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d039      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c0a:	2b05      	cmp	r3, #5
 8005c0c:	d820      	bhi.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8005c0e:	a201      	add	r2, pc, #4	; (adr r2, 8005c14 <HAL_RCCEx_PeriphCLKConfig+0x94c>)
 8005c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c14:	08005c57 	.word	0x08005c57
 8005c18:	08005c2d 	.word	0x08005c2d
 8005c1c:	08005c3f 	.word	0x08005c3f
 8005c20:	08005c57 	.word	0x08005c57
 8005c24:	08005c57 	.word	0x08005c57
 8005c28:	08005c57 	.word	0x08005c57
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	3304      	adds	r3, #4
 8005c30:	2101      	movs	r1, #1
 8005c32:	4618      	mov	r0, r3
 8005c34:	f000 fd76 	bl	8006724 <RCCEx_PLL2_Config>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005c3c:	e00c      	b.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x990>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	3324      	adds	r3, #36	; 0x24
 8005c42:	2101      	movs	r1, #1
 8005c44:	4618      	mov	r0, r3
 8005c46:	f000 fe1f 	bl	8006888 <RCCEx_PLL3_Config>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005c4e:	e003      	b.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x990>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	75fb      	strb	r3, [r7, #23]
      break;
 8005c54:	e000      	b.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x990>
      break;
 8005c56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c58:	7dfb      	ldrb	r3, [r7, #23]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d10a      	bne.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c5e:	4b80      	ldr	r3, [pc, #512]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8005c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c62:	f023 0207 	bic.w	r2, r3, #7
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c6c:	497c      	ldr	r1, [pc, #496]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	658b      	str	r3, [r1, #88]	; 0x58
 8005c72:	e001      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c74:	7dfb      	ldrb	r3, [r7, #23]
 8005c76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0320 	and.w	r3, r3, #32
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d04b      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0xa54>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c8e:	d02e      	beq.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0xa26>
 8005c90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c94:	d828      	bhi.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8005c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c9a:	d02a      	beq.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 8005c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ca0:	d822      	bhi.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8005ca2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ca6:	d026      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 8005ca8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005cac:	d81c      	bhi.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8005cae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cb2:	d010      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8005cb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cb8:	d816      	bhi.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d01d      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8005cbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cc2:	d111      	bne.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	3304      	adds	r3, #4
 8005cc8:	2100      	movs	r1, #0
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f000 fd2a 	bl	8006724 <RCCEx_PLL2_Config>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005cd4:	e012      	b.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0xa34>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	3324      	adds	r3, #36	; 0x24
 8005cda:	2102      	movs	r1, #2
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f000 fdd3 	bl	8006888 <RCCEx_PLL3_Config>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005ce6:	e009      	b.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0xa34>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	75fb      	strb	r3, [r7, #23]
      break;
 8005cec:	e006      	b.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8005cee:	bf00      	nop
 8005cf0:	e004      	b.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8005cf2:	bf00      	nop
 8005cf4:	e002      	b.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8005cf6:	bf00      	nop
 8005cf8:	e000      	b.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8005cfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cfc:	7dfb      	ldrb	r3, [r7, #23]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d10a      	bne.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d02:	4b57      	ldr	r3, [pc, #348]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8005d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d06:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d10:	4953      	ldr	r1, [pc, #332]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	654b      	str	r3, [r1, #84]	; 0x54
 8005d16:	e001      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0xa54>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d18:	7dfb      	ldrb	r3, [r7, #23]
 8005d1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d04b      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d2e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005d32:	d02e      	beq.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8005d34:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005d38:	d828      	bhi.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8005d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d3e:	d02a      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0xace>
 8005d40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d44:	d822      	bhi.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8005d46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d4a:	d026      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0xad2>
 8005d4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d50:	d81c      	bhi.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8005d52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d56:	d010      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8005d58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d5c:	d816      	bhi.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d01d      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0xad6>
 8005d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d66:	d111      	bne.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0xac4>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	3304      	adds	r3, #4
 8005d6c:	2100      	movs	r1, #0
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f000 fcd8 	bl	8006724 <RCCEx_PLL2_Config>
 8005d74:	4603      	mov	r3, r0
 8005d76:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005d78:	e012      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0xad8>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	3324      	adds	r3, #36	; 0x24
 8005d7e:	2102      	movs	r1, #2
 8005d80:	4618      	mov	r0, r3
 8005d82:	f000 fd81 	bl	8006888 <RCCEx_PLL3_Config>
 8005d86:	4603      	mov	r3, r0
 8005d88:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005d8a:	e009      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	75fb      	strb	r3, [r7, #23]
      break;
 8005d90:	e006      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8005d92:	bf00      	nop
 8005d94:	e004      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8005d96:	bf00      	nop
 8005d98:	e002      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8005d9a:	bf00      	nop
 8005d9c:	e000      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8005d9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005da0:	7dfb      	ldrb	r3, [r7, #23]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d10a      	bne.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005da6:	4b2e      	ldr	r3, [pc, #184]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8005da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005daa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005db4:	492a      	ldr	r1, [pc, #168]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8005db6:	4313      	orrs	r3, r2
 8005db8:	658b      	str	r3, [r1, #88]	; 0x58
 8005dba:	e001      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dbc:	7dfb      	ldrb	r3, [r7, #23]
 8005dbe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d04d      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0xba0>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005dd2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005dd6:	d02e      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 8005dd8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005ddc:	d828      	bhi.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8005dde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005de2:	d02a      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0xb72>
 8005de4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005de8:	d822      	bhi.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8005dea:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005dee:	d026      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0xb76>
 8005df0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005df4:	d81c      	bhi.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8005df6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005dfa:	d010      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0xb56>
 8005dfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e00:	d816      	bhi.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d01d      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0xb7a>
 8005e06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e0a:	d111      	bne.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0xb68>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	3304      	adds	r3, #4
 8005e10:	2100      	movs	r1, #0
 8005e12:	4618      	mov	r0, r3
 8005e14:	f000 fc86 	bl	8006724 <RCCEx_PLL2_Config>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005e1c:	e012      	b.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0xb7c>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	3324      	adds	r3, #36	; 0x24
 8005e22:	2102      	movs	r1, #2
 8005e24:	4618      	mov	r0, r3
 8005e26:	f000 fd2f 	bl	8006888 <RCCEx_PLL3_Config>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005e2e:	e009      	b.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	75fb      	strb	r3, [r7, #23]
      break;
 8005e34:	e006      	b.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8005e36:	bf00      	nop
 8005e38:	e004      	b.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8005e3a:	bf00      	nop
 8005e3c:	e002      	b.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8005e3e:	bf00      	nop
 8005e40:	e000      	b.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8005e42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e44:	7dfb      	ldrb	r3, [r7, #23]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d10c      	bne.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005e4a:	4b05      	ldr	r3, [pc, #20]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8005e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005e58:	4901      	ldr	r1, [pc, #4]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	658b      	str	r3, [r1, #88]	; 0x58
 8005e5e:	e003      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8005e60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e64:	7dfb      	ldrb	r3, [r7, #23]
 8005e66:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0308 	and.w	r3, r3, #8
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d01a      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0xbe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e7e:	d10a      	bne.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	3324      	adds	r3, #36	; 0x24
 8005e84:	2102      	movs	r1, #2
 8005e86:	4618      	mov	r0, r3
 8005e88:	f000 fcfe 	bl	8006888 <RCCEx_PLL3_Config>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d001      	beq.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0xbce>
        {
          status = HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005e96:	4b8c      	ldr	r3, [pc, #560]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8005e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e9a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ea4:	4988      	ldr	r1, [pc, #544]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 0310 	and.w	r3, r3, #16
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d01a      	beq.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0xc24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ebc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ec0:	d10a      	bne.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	3324      	adds	r3, #36	; 0x24
 8005ec6:	2102      	movs	r1, #2
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f000 fcdd 	bl	8006888 <RCCEx_PLL3_Config>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d001      	beq.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
      {
        status = HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005ed8:	4b7b      	ldr	r3, [pc, #492]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8005eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005edc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ee6:	4978      	ldr	r1, [pc, #480]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d034      	beq.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005efe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f02:	d01d      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8005f04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f08:	d817      	bhi.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d003      	beq.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8005f0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f12:	d009      	beq.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0xc60>
 8005f14:	e011      	b.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	3304      	adds	r3, #4
 8005f1a:	2100      	movs	r1, #0
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f000 fc01 	bl	8006724 <RCCEx_PLL2_Config>
 8005f22:	4603      	mov	r3, r0
 8005f24:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005f26:	e00c      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	3324      	adds	r3, #36	; 0x24
 8005f2c:	2102      	movs	r1, #2
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f000 fcaa 	bl	8006888 <RCCEx_PLL3_Config>
 8005f34:	4603      	mov	r3, r0
 8005f36:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005f38:	e003      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	75fb      	strb	r3, [r7, #23]
      break;
 8005f3e:	e000      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      break;
 8005f40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f42:	7dfb      	ldrb	r3, [r7, #23]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10a      	bne.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f48:	4b5f      	ldr	r3, [pc, #380]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8005f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005f56:	495c      	ldr	r1, [pc, #368]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	658b      	str	r3, [r1, #88]	; 0x58
 8005f5c:	e001      	b.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f5e:	7dfb      	ldrb	r3, [r7, #23]
 8005f60:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d033      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f74:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f78:	d01c      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 8005f7a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f7e:	d816      	bhi.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0xce6>
 8005f80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f84:	d003      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8005f86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f8a:	d007      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 8005f8c:	e00f      	b.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0xce6>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f8e:	4b4e      	ldr	r3, [pc, #312]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8005f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f92:	4a4d      	ldr	r2, [pc, #308]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8005f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f98:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005f9a:	e00c      	b.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0xcee>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	3324      	adds	r3, #36	; 0x24
 8005fa0:	2101      	movs	r1, #1
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f000 fc70 	bl	8006888 <RCCEx_PLL3_Config>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005fac:	e003      	b.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0xcee>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	75fb      	strb	r3, [r7, #23]
      break;
 8005fb2:	e000      	b.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0xcee>
      break;
 8005fb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fb6:	7dfb      	ldrb	r3, [r7, #23]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d10a      	bne.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005fbc:	4b42      	ldr	r3, [pc, #264]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8005fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fc0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fca:	493f      	ldr	r1, [pc, #252]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	654b      	str	r3, [r1, #84]	; 0x54
 8005fd0:	e001      	b.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fd2:	7dfb      	ldrb	r3, [r7, #23]
 8005fd4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d029      	beq.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d003      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
 8005fea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fee:	d007      	beq.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xd38>
 8005ff0:	e00f      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ff2:	4b35      	ldr	r3, [pc, #212]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8005ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff6:	4a34      	ldr	r2, [pc, #208]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8005ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ffc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005ffe:	e00b      	b.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	3304      	adds	r3, #4
 8006004:	2102      	movs	r1, #2
 8006006:	4618      	mov	r0, r3
 8006008:	f000 fb8c 	bl	8006724 <RCCEx_PLL2_Config>
 800600c:	4603      	mov	r3, r0
 800600e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006010:	e002      	b.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    default:
      ret = HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	75fb      	strb	r3, [r7, #23]
      break;
 8006016:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006018:	7dfb      	ldrb	r3, [r7, #23]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d109      	bne.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800601e:	4b2a      	ldr	r3, [pc, #168]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8006020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006022:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800602a:	4927      	ldr	r1, [pc, #156]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800602c:	4313      	orrs	r3, r2
 800602e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006030:	e001      	b.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006032:	7dfb      	ldrb	r3, [r7, #23]
 8006034:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00a      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0xd90>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	3324      	adds	r3, #36	; 0x24
 8006046:	2102      	movs	r1, #2
 8006048:	4618      	mov	r0, r3
 800604a:	f000 fc1d 	bl	8006888 <RCCEx_PLL3_Config>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d001      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0xd90>
    {
      status=HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d035      	beq.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800606a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800606e:	d017      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 8006070:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006074:	d811      	bhi.n	800609a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006076:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800607a:	d013      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0xddc>
 800607c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006080:	d80b      	bhi.n	800609a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006082:	2b00      	cmp	r3, #0
 8006084:	d010      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0xde0>
 8006086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800608a:	d106      	bne.n	800609a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800608c:	4b0e      	ldr	r3, [pc, #56]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800608e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006090:	4a0d      	ldr	r2, [pc, #52]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8006092:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006096:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006098:	e007      	b.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0xde2>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	75fb      	strb	r3, [r7, #23]
      break;
 800609e:	e004      	b.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 80060a0:	bf00      	nop
 80060a2:	e002      	b.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 80060a4:	bf00      	nop
 80060a6:	e000      	b.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 80060a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060aa:	7dfb      	ldrb	r3, [r7, #23]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10d      	bne.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0xe04>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80060b0:	4b05      	ldr	r3, [pc, #20]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80060b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060be:	4902      	ldr	r1, [pc, #8]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80060c0:	4313      	orrs	r3, r2
 80060c2:	654b      	str	r3, [r1, #84]	; 0x54
 80060c4:	e004      	b.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 80060c6:	bf00      	nop
 80060c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060cc:	7dfb      	ldrb	r3, [r7, #23]
 80060ce:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d008      	beq.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80060dc:	4b31      	ldr	r3, [pc, #196]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80060de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060e8:	492e      	ldr	r1, [pc, #184]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80060ea:	4313      	orrs	r3, r2
 80060ec:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d009      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0xe46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80060fa:	4b2a      	ldr	r3, [pc, #168]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006108:	4926      	ldr	r1, [pc, #152]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800610a:	4313      	orrs	r3, r2
 800610c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006116:	2b00      	cmp	r3, #0
 8006118:	d008      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0xe64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800611a:	4b22      	ldr	r3, [pc, #136]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800611c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800611e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006126:	491f      	ldr	r1, [pc, #124]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8006128:	4313      	orrs	r3, r2
 800612a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006134:	2b00      	cmp	r3, #0
 8006136:	d00d      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xe8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006138:	4b1a      	ldr	r3, [pc, #104]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	4a19      	ldr	r2, [pc, #100]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800613e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006142:	6113      	str	r3, [r2, #16]
 8006144:	4b17      	ldr	r3, [pc, #92]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8006146:	691a      	ldr	r2, [r3, #16]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800614e:	4915      	ldr	r1, [pc, #84]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8006150:	4313      	orrs	r3, r2
 8006152:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	da08      	bge.n	800616e <HAL_RCCEx_PeriphCLKConfig+0xea6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800615c:	4b11      	ldr	r3, [pc, #68]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800615e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006160:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006168:	490e      	ldr	r1, [pc, #56]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800616a:	4313      	orrs	r3, r2
 800616c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d009      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0xec6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800617a:	4b0a      	ldr	r3, [pc, #40]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800617c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800617e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006188:	4906      	ldr	r1, [pc, #24]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800618a:	4313      	orrs	r3, r2
 800618c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800618e:	7dbb      	ldrb	r3, [r7, #22]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d101      	bne.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0xed0>
  {
    return HAL_OK;
 8006194:	2300      	movs	r3, #0
 8006196:	e000      	b.n	800619a <HAL_RCCEx_PeriphCLKConfig+0xed2>
  }
  return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
}
 800619a:	4618      	mov	r0, r3
 800619c:	3718      	adds	r7, #24
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	58024400 	.word	0x58024400

080061a8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80061ac:	f7ff f830 	bl	8005210 <HAL_RCC_GetHCLKFreq>
 80061b0:	4602      	mov	r2, r0
 80061b2:	4b06      	ldr	r3, [pc, #24]	; (80061cc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	091b      	lsrs	r3, r3, #4
 80061b8:	f003 0307 	and.w	r3, r3, #7
 80061bc:	4904      	ldr	r1, [pc, #16]	; (80061d0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80061be:	5ccb      	ldrb	r3, [r1, r3]
 80061c0:	f003 031f 	and.w	r3, r3, #31
 80061c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	58024400 	.word	0x58024400
 80061d0:	08008f4c 	.word	0x08008f4c

080061d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b089      	sub	sp, #36	; 0x24
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80061dc:	4ba1      	ldr	r3, [pc, #644]	; (8006464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e0:	f003 0303 	and.w	r3, r3, #3
 80061e4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80061e6:	4b9f      	ldr	r3, [pc, #636]	; (8006464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ea:	0b1b      	lsrs	r3, r3, #12
 80061ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061f0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80061f2:	4b9c      	ldr	r3, [pc, #624]	; (8006464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f6:	091b      	lsrs	r3, r3, #4
 80061f8:	f003 0301 	and.w	r3, r3, #1
 80061fc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80061fe:	4b99      	ldr	r3, [pc, #612]	; (8006464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006202:	08db      	lsrs	r3, r3, #3
 8006204:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006208:	693a      	ldr	r2, [r7, #16]
 800620a:	fb02 f303 	mul.w	r3, r2, r3
 800620e:	ee07 3a90 	vmov	s15, r3
 8006212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006216:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	2b00      	cmp	r3, #0
 800621e:	f000 8111 	beq.w	8006444 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	2b02      	cmp	r3, #2
 8006226:	f000 8083 	beq.w	8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	2b02      	cmp	r3, #2
 800622e:	f200 80a1 	bhi.w	8006374 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d003      	beq.n	8006240 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	2b01      	cmp	r3, #1
 800623c:	d056      	beq.n	80062ec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800623e:	e099      	b.n	8006374 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006240:	4b88      	ldr	r3, [pc, #544]	; (8006464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 0320 	and.w	r3, r3, #32
 8006248:	2b00      	cmp	r3, #0
 800624a:	d02d      	beq.n	80062a8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800624c:	4b85      	ldr	r3, [pc, #532]	; (8006464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	08db      	lsrs	r3, r3, #3
 8006252:	f003 0303 	and.w	r3, r3, #3
 8006256:	4a84      	ldr	r2, [pc, #528]	; (8006468 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006258:	fa22 f303 	lsr.w	r3, r2, r3
 800625c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	ee07 3a90 	vmov	s15, r3
 8006264:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	ee07 3a90 	vmov	s15, r3
 800626e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006276:	4b7b      	ldr	r3, [pc, #492]	; (8006464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800627a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800627e:	ee07 3a90 	vmov	s15, r3
 8006282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006286:	ed97 6a03 	vldr	s12, [r7, #12]
 800628a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800646c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800628e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006296:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800629a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800629e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062a2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80062a6:	e087      	b.n	80063b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	ee07 3a90 	vmov	s15, r3
 80062ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062b2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006470 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80062b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062ba:	4b6a      	ldr	r3, [pc, #424]	; (8006464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062c2:	ee07 3a90 	vmov	s15, r3
 80062c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80062ce:	eddf 5a67 	vldr	s11, [pc, #412]	; 800646c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80062d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80062ea:	e065      	b.n	80063b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	ee07 3a90 	vmov	s15, r3
 80062f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006474 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80062fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062fe:	4b59      	ldr	r3, [pc, #356]	; (8006464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006306:	ee07 3a90 	vmov	s15, r3
 800630a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800630e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006312:	eddf 5a56 	vldr	s11, [pc, #344]	; 800646c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800631a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800631e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800632a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800632e:	e043      	b.n	80063b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	ee07 3a90 	vmov	s15, r3
 8006336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800633a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006478 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800633e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006342:	4b48      	ldr	r3, [pc, #288]	; (8006464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800634a:	ee07 3a90 	vmov	s15, r3
 800634e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006352:	ed97 6a03 	vldr	s12, [r7, #12]
 8006356:	eddf 5a45 	vldr	s11, [pc, #276]	; 800646c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800635a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800635e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006362:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800636a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800636e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006372:	e021      	b.n	80063b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	ee07 3a90 	vmov	s15, r3
 800637a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800637e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006474 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006386:	4b37      	ldr	r3, [pc, #220]	; (8006464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800638e:	ee07 3a90 	vmov	s15, r3
 8006392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006396:	ed97 6a03 	vldr	s12, [r7, #12]
 800639a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800646c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800639e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80063b6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80063b8:	4b2a      	ldr	r3, [pc, #168]	; (8006464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063bc:	0a5b      	lsrs	r3, r3, #9
 80063be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063c2:	ee07 3a90 	vmov	s15, r3
 80063c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80063d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063de:	ee17 2a90 	vmov	r2, s15
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80063e6:	4b1f      	ldr	r3, [pc, #124]	; (8006464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ea:	0c1b      	lsrs	r3, r3, #16
 80063ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063f0:	ee07 3a90 	vmov	s15, r3
 80063f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006400:	edd7 6a07 	vldr	s13, [r7, #28]
 8006404:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006408:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800640c:	ee17 2a90 	vmov	r2, s15
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006414:	4b13      	ldr	r3, [pc, #76]	; (8006464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006418:	0e1b      	lsrs	r3, r3, #24
 800641a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800641e:	ee07 3a90 	vmov	s15, r3
 8006422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006426:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800642a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800642e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006436:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800643a:	ee17 2a90 	vmov	r2, s15
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006442:	e008      	b.n	8006456 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	609a      	str	r2, [r3, #8]
}
 8006456:	bf00      	nop
 8006458:	3724      	adds	r7, #36	; 0x24
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	58024400 	.word	0x58024400
 8006468:	03d09000 	.word	0x03d09000
 800646c:	46000000 	.word	0x46000000
 8006470:	4c742400 	.word	0x4c742400
 8006474:	4a742400 	.word	0x4a742400
 8006478:	4bbebc20 	.word	0x4bbebc20

0800647c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800647c:	b480      	push	{r7}
 800647e:	b089      	sub	sp, #36	; 0x24
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006484:	4ba1      	ldr	r3, [pc, #644]	; (800670c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006488:	f003 0303 	and.w	r3, r3, #3
 800648c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800648e:	4b9f      	ldr	r3, [pc, #636]	; (800670c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006492:	0d1b      	lsrs	r3, r3, #20
 8006494:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006498:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800649a:	4b9c      	ldr	r3, [pc, #624]	; (800670c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800649c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649e:	0a1b      	lsrs	r3, r3, #8
 80064a0:	f003 0301 	and.w	r3, r3, #1
 80064a4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80064a6:	4b99      	ldr	r3, [pc, #612]	; (800670c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064aa:	08db      	lsrs	r3, r3, #3
 80064ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80064b0:	693a      	ldr	r2, [r7, #16]
 80064b2:	fb02 f303 	mul.w	r3, r2, r3
 80064b6:	ee07 3a90 	vmov	s15, r3
 80064ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	f000 8111 	beq.w	80066ec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	f000 8083 	beq.w	80065d8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	f200 80a1 	bhi.w	800661c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d003      	beq.n	80064e8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d056      	beq.n	8006594 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80064e6:	e099      	b.n	800661c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064e8:	4b88      	ldr	r3, [pc, #544]	; (800670c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 0320 	and.w	r3, r3, #32
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d02d      	beq.n	8006550 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80064f4:	4b85      	ldr	r3, [pc, #532]	; (800670c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	08db      	lsrs	r3, r3, #3
 80064fa:	f003 0303 	and.w	r3, r3, #3
 80064fe:	4a84      	ldr	r2, [pc, #528]	; (8006710 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006500:	fa22 f303 	lsr.w	r3, r2, r3
 8006504:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	ee07 3a90 	vmov	s15, r3
 800650c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	ee07 3a90 	vmov	s15, r3
 8006516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800651a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800651e:	4b7b      	ldr	r3, [pc, #492]	; (800670c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006526:	ee07 3a90 	vmov	s15, r3
 800652a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800652e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006532:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006714 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800653a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800653e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800654a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800654e:	e087      	b.n	8006660 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	ee07 3a90 	vmov	s15, r3
 8006556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800655a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006718 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800655e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006562:	4b6a      	ldr	r3, [pc, #424]	; (800670c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800656a:	ee07 3a90 	vmov	s15, r3
 800656e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006572:	ed97 6a03 	vldr	s12, [r7, #12]
 8006576:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006714 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800657a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800657e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006582:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800658a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800658e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006592:	e065      	b.n	8006660 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	ee07 3a90 	vmov	s15, r3
 800659a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800659e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800671c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80065a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065a6:	4b59      	ldr	r3, [pc, #356]	; (800670c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065ae:	ee07 3a90 	vmov	s15, r3
 80065b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80065ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006714 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80065be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80065d6:	e043      	b.n	8006660 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	ee07 3a90 	vmov	s15, r3
 80065de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006720 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80065e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065ea:	4b48      	ldr	r3, [pc, #288]	; (800670c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065f2:	ee07 3a90 	vmov	s15, r3
 80065f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80065fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006714 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800660a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800660e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006616:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800661a:	e021      	b.n	8006660 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	ee07 3a90 	vmov	s15, r3
 8006622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006626:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800671c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800662a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800662e:	4b37      	ldr	r3, [pc, #220]	; (800670c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006636:	ee07 3a90 	vmov	s15, r3
 800663a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800663e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006642:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006714 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800664a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800664e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800665a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800665e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006660:	4b2a      	ldr	r3, [pc, #168]	; (800670c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006664:	0a5b      	lsrs	r3, r3, #9
 8006666:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800666a:	ee07 3a90 	vmov	s15, r3
 800666e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006672:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006676:	ee37 7a87 	vadd.f32	s14, s15, s14
 800667a:	edd7 6a07 	vldr	s13, [r7, #28]
 800667e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006682:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006686:	ee17 2a90 	vmov	r2, s15
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800668e:	4b1f      	ldr	r3, [pc, #124]	; (800670c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006692:	0c1b      	lsrs	r3, r3, #16
 8006694:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006698:	ee07 3a90 	vmov	s15, r3
 800669c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80066a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80066ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066b4:	ee17 2a90 	vmov	r2, s15
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80066bc:	4b13      	ldr	r3, [pc, #76]	; (800670c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c0:	0e1b      	lsrs	r3, r3, #24
 80066c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066c6:	ee07 3a90 	vmov	s15, r3
 80066ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80066d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80066da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066e2:	ee17 2a90 	vmov	r2, s15
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80066ea:	e008      	b.n	80066fe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	609a      	str	r2, [r3, #8]
}
 80066fe:	bf00      	nop
 8006700:	3724      	adds	r7, #36	; 0x24
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	58024400 	.word	0x58024400
 8006710:	03d09000 	.word	0x03d09000
 8006714:	46000000 	.word	0x46000000
 8006718:	4c742400 	.word	0x4c742400
 800671c:	4a742400 	.word	0x4a742400
 8006720:	4bbebc20 	.word	0x4bbebc20

08006724 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800672e:	2300      	movs	r3, #0
 8006730:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006732:	4b53      	ldr	r3, [pc, #332]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 8006734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006736:	f003 0303 	and.w	r3, r3, #3
 800673a:	2b03      	cmp	r3, #3
 800673c:	d101      	bne.n	8006742 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e099      	b.n	8006876 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006742:	4b4f      	ldr	r3, [pc, #316]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a4e      	ldr	r2, [pc, #312]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 8006748:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800674c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800674e:	f7fa fc85 	bl	800105c <HAL_GetTick>
 8006752:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006754:	e008      	b.n	8006768 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006756:	f7fa fc81 	bl	800105c <HAL_GetTick>
 800675a:	4602      	mov	r2, r0
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	1ad3      	subs	r3, r2, r3
 8006760:	2b02      	cmp	r3, #2
 8006762:	d901      	bls.n	8006768 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006764:	2303      	movs	r3, #3
 8006766:	e086      	b.n	8006876 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006768:	4b45      	ldr	r3, [pc, #276]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006770:	2b00      	cmp	r3, #0
 8006772:	d1f0      	bne.n	8006756 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006774:	4b42      	ldr	r3, [pc, #264]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 8006776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006778:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	031b      	lsls	r3, r3, #12
 8006782:	493f      	ldr	r1, [pc, #252]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 8006784:	4313      	orrs	r3, r2
 8006786:	628b      	str	r3, [r1, #40]	; 0x28
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	3b01      	subs	r3, #1
 800678e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	3b01      	subs	r3, #1
 8006798:	025b      	lsls	r3, r3, #9
 800679a:	b29b      	uxth	r3, r3
 800679c:	431a      	orrs	r2, r3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	3b01      	subs	r3, #1
 80067a4:	041b      	lsls	r3, r3, #16
 80067a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80067aa:	431a      	orrs	r2, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	3b01      	subs	r3, #1
 80067b2:	061b      	lsls	r3, r3, #24
 80067b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80067b8:	4931      	ldr	r1, [pc, #196]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 80067ba:	4313      	orrs	r3, r2
 80067bc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80067be:	4b30      	ldr	r3, [pc, #192]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 80067c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	695b      	ldr	r3, [r3, #20]
 80067ca:	492d      	ldr	r1, [pc, #180]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 80067cc:	4313      	orrs	r3, r2
 80067ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80067d0:	4b2b      	ldr	r3, [pc, #172]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 80067d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d4:	f023 0220 	bic.w	r2, r3, #32
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	699b      	ldr	r3, [r3, #24]
 80067dc:	4928      	ldr	r1, [pc, #160]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 80067de:	4313      	orrs	r3, r2
 80067e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80067e2:	4b27      	ldr	r3, [pc, #156]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 80067e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e6:	4a26      	ldr	r2, [pc, #152]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 80067e8:	f023 0310 	bic.w	r3, r3, #16
 80067ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80067ee:	4b24      	ldr	r3, [pc, #144]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 80067f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067f2:	4b24      	ldr	r3, [pc, #144]	; (8006884 <RCCEx_PLL2_Config+0x160>)
 80067f4:	4013      	ands	r3, r2
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	69d2      	ldr	r2, [r2, #28]
 80067fa:	00d2      	lsls	r2, r2, #3
 80067fc:	4920      	ldr	r1, [pc, #128]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 80067fe:	4313      	orrs	r3, r2
 8006800:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006802:	4b1f      	ldr	r3, [pc, #124]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 8006804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006806:	4a1e      	ldr	r2, [pc, #120]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 8006808:	f043 0310 	orr.w	r3, r3, #16
 800680c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d106      	bne.n	8006822 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006814:	4b1a      	ldr	r3, [pc, #104]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 8006816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006818:	4a19      	ldr	r2, [pc, #100]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 800681a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800681e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006820:	e00f      	b.n	8006842 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	2b01      	cmp	r3, #1
 8006826:	d106      	bne.n	8006836 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006828:	4b15      	ldr	r3, [pc, #84]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 800682a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682c:	4a14      	ldr	r2, [pc, #80]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 800682e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006832:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006834:	e005      	b.n	8006842 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006836:	4b12      	ldr	r3, [pc, #72]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 8006838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800683a:	4a11      	ldr	r2, [pc, #68]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 800683c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006840:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006842:	4b0f      	ldr	r3, [pc, #60]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a0e      	ldr	r2, [pc, #56]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 8006848:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800684c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800684e:	f7fa fc05 	bl	800105c <HAL_GetTick>
 8006852:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006854:	e008      	b.n	8006868 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006856:	f7fa fc01 	bl	800105c <HAL_GetTick>
 800685a:	4602      	mov	r2, r0
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	1ad3      	subs	r3, r2, r3
 8006860:	2b02      	cmp	r3, #2
 8006862:	d901      	bls.n	8006868 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006864:	2303      	movs	r3, #3
 8006866:	e006      	b.n	8006876 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006868:	4b05      	ldr	r3, [pc, #20]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006870:	2b00      	cmp	r3, #0
 8006872:	d0f0      	beq.n	8006856 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006874:	7bfb      	ldrb	r3, [r7, #15]
}
 8006876:	4618      	mov	r0, r3
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	58024400 	.word	0x58024400
 8006884:	ffff0007 	.word	0xffff0007

08006888 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006892:	2300      	movs	r3, #0
 8006894:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006896:	4b53      	ldr	r3, [pc, #332]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 8006898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800689a:	f003 0303 	and.w	r3, r3, #3
 800689e:	2b03      	cmp	r3, #3
 80068a0:	d101      	bne.n	80068a6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e099      	b.n	80069da <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80068a6:	4b4f      	ldr	r3, [pc, #316]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a4e      	ldr	r2, [pc, #312]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 80068ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068b2:	f7fa fbd3 	bl	800105c <HAL_GetTick>
 80068b6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80068b8:	e008      	b.n	80068cc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80068ba:	f7fa fbcf 	bl	800105c <HAL_GetTick>
 80068be:	4602      	mov	r2, r0
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	d901      	bls.n	80068cc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80068c8:	2303      	movs	r3, #3
 80068ca:	e086      	b.n	80069da <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80068cc:	4b45      	ldr	r3, [pc, #276]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d1f0      	bne.n	80068ba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80068d8:	4b42      	ldr	r3, [pc, #264]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 80068da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068dc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	051b      	lsls	r3, r3, #20
 80068e6:	493f      	ldr	r1, [pc, #252]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 80068e8:	4313      	orrs	r3, r2
 80068ea:	628b      	str	r3, [r1, #40]	; 0x28
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	3b01      	subs	r3, #1
 80068f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	3b01      	subs	r3, #1
 80068fc:	025b      	lsls	r3, r3, #9
 80068fe:	b29b      	uxth	r3, r3
 8006900:	431a      	orrs	r2, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	3b01      	subs	r3, #1
 8006908:	041b      	lsls	r3, r3, #16
 800690a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800690e:	431a      	orrs	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	691b      	ldr	r3, [r3, #16]
 8006914:	3b01      	subs	r3, #1
 8006916:	061b      	lsls	r3, r3, #24
 8006918:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800691c:	4931      	ldr	r1, [pc, #196]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 800691e:	4313      	orrs	r3, r2
 8006920:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006922:	4b30      	ldr	r3, [pc, #192]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 8006924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006926:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	492d      	ldr	r1, [pc, #180]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 8006930:	4313      	orrs	r3, r2
 8006932:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006934:	4b2b      	ldr	r3, [pc, #172]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 8006936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006938:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	699b      	ldr	r3, [r3, #24]
 8006940:	4928      	ldr	r1, [pc, #160]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 8006942:	4313      	orrs	r3, r2
 8006944:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006946:	4b27      	ldr	r3, [pc, #156]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 8006948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800694a:	4a26      	ldr	r2, [pc, #152]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 800694c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006950:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006952:	4b24      	ldr	r3, [pc, #144]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 8006954:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006956:	4b24      	ldr	r3, [pc, #144]	; (80069e8 <RCCEx_PLL3_Config+0x160>)
 8006958:	4013      	ands	r3, r2
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	69d2      	ldr	r2, [r2, #28]
 800695e:	00d2      	lsls	r2, r2, #3
 8006960:	4920      	ldr	r1, [pc, #128]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 8006962:	4313      	orrs	r3, r2
 8006964:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006966:	4b1f      	ldr	r3, [pc, #124]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 8006968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800696a:	4a1e      	ldr	r2, [pc, #120]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 800696c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006970:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d106      	bne.n	8006986 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006978:	4b1a      	ldr	r3, [pc, #104]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 800697a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697c:	4a19      	ldr	r2, [pc, #100]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 800697e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006982:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006984:	e00f      	b.n	80069a6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	2b01      	cmp	r3, #1
 800698a:	d106      	bne.n	800699a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800698c:	4b15      	ldr	r3, [pc, #84]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 800698e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006990:	4a14      	ldr	r2, [pc, #80]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 8006992:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006996:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006998:	e005      	b.n	80069a6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800699a:	4b12      	ldr	r3, [pc, #72]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 800699c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800699e:	4a11      	ldr	r2, [pc, #68]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 80069a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80069a6:	4b0f      	ldr	r3, [pc, #60]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a0e      	ldr	r2, [pc, #56]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 80069ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069b2:	f7fa fb53 	bl	800105c <HAL_GetTick>
 80069b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80069b8:	e008      	b.n	80069cc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80069ba:	f7fa fb4f 	bl	800105c <HAL_GetTick>
 80069be:	4602      	mov	r2, r0
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	1ad3      	subs	r3, r2, r3
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	d901      	bls.n	80069cc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80069c8:	2303      	movs	r3, #3
 80069ca:	e006      	b.n	80069da <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80069cc:	4b05      	ldr	r3, [pc, #20]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d0f0      	beq.n	80069ba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80069d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	58024400 	.word	0x58024400
 80069e8:	ffff0007 	.word	0xffff0007

080069ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b082      	sub	sp, #8
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d101      	bne.n	80069fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e042      	b.n	8006a84 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d106      	bne.n	8006a16 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f7fa f8a1 	bl	8000b58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2224      	movs	r2, #36	; 0x24
 8006a1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f022 0201 	bic.w	r2, r2, #1
 8006a2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 fbec 	bl	800720c <UART_SetConfig>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d101      	bne.n	8006a3e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e022      	b.n	8006a84 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d002      	beq.n	8006a4c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f001 f940 	bl	8007ccc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	685a      	ldr	r2, [r3, #4]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	689a      	ldr	r2, [r3, #8]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f042 0201 	orr.w	r2, r2, #1
 8006a7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f001 f9c7 	bl	8007e10 <UART_CheckIdleState>
 8006a82:	4603      	mov	r3, r0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3708      	adds	r7, #8
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b08a      	sub	sp, #40	; 0x28
 8006a90:	af02      	add	r7, sp, #8
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	603b      	str	r3, [r7, #0]
 8006a98:	4613      	mov	r3, r2
 8006a9a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006aa2:	2b20      	cmp	r3, #32
 8006aa4:	f040 8083 	bne.w	8006bae <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d002      	beq.n	8006ab4 <HAL_UART_Transmit+0x28>
 8006aae:	88fb      	ldrh	r3, [r7, #6]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d101      	bne.n	8006ab8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e07b      	b.n	8006bb0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d101      	bne.n	8006ac6 <HAL_UART_Transmit+0x3a>
 8006ac2:	2302      	movs	r3, #2
 8006ac4:	e074      	b.n	8006bb0 <HAL_UART_Transmit+0x124>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2221      	movs	r2, #33	; 0x21
 8006ada:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ade:	f7fa fabd 	bl	800105c <HAL_GetTick>
 8006ae2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	88fa      	ldrh	r2, [r7, #6]
 8006ae8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	88fa      	ldrh	r2, [r7, #6]
 8006af0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006afc:	d108      	bne.n	8006b10 <HAL_UART_Transmit+0x84>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d104      	bne.n	8006b10 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006b06:	2300      	movs	r3, #0
 8006b08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	61bb      	str	r3, [r7, #24]
 8006b0e:	e003      	b.n	8006b18 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b14:	2300      	movs	r3, #0
 8006b16:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006b20:	e02c      	b.n	8006b7c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	9300      	str	r3, [sp, #0]
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	2180      	movs	r1, #128	; 0x80
 8006b2c:	68f8      	ldr	r0, [r7, #12]
 8006b2e:	f001 f9ba 	bl	8007ea6 <UART_WaitOnFlagUntilTimeout>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d001      	beq.n	8006b3c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	e039      	b.n	8006bb0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d10b      	bne.n	8006b5a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	881b      	ldrh	r3, [r3, #0]
 8006b46:	461a      	mov	r2, r3
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b50:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	3302      	adds	r3, #2
 8006b56:	61bb      	str	r3, [r7, #24]
 8006b58:	e007      	b.n	8006b6a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	781a      	ldrb	r2, [r3, #0]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	3301      	adds	r3, #1
 8006b68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	3b01      	subs	r3, #1
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d1cc      	bne.n	8006b22 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	9300      	str	r3, [sp, #0]
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	2140      	movs	r1, #64	; 0x40
 8006b92:	68f8      	ldr	r0, [r7, #12]
 8006b94:	f001 f987 	bl	8007ea6 <UART_WaitOnFlagUntilTimeout>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d001      	beq.n	8006ba2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	e006      	b.n	8006bb0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2220      	movs	r2, #32
 8006ba6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006baa:	2300      	movs	r3, #0
 8006bac:	e000      	b.n	8006bb0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006bae:	2302      	movs	r3, #2
  }
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3720      	adds	r7, #32
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	4613      	mov	r3, r2
 8006bc4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bcc:	2b20      	cmp	r3, #32
 8006bce:	d131      	bne.n	8006c34 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d002      	beq.n	8006bdc <HAL_UART_Receive_DMA+0x24>
 8006bd6:	88fb      	ldrh	r3, [r7, #6]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d101      	bne.n	8006be0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e02a      	b.n	8006c36 <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d101      	bne.n	8006bee <HAL_UART_Receive_DMA+0x36>
 8006bea:	2302      	movs	r3, #2
 8006bec:	e023      	b.n	8006c36 <HAL_UART_Receive_DMA+0x7e>
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a0f      	ldr	r2, [pc, #60]	; (8006c40 <HAL_UART_Receive_DMA+0x88>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d00e      	beq.n	8006c24 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d007      	beq.n	8006c24 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006c22:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006c24:	88fb      	ldrh	r3, [r7, #6]
 8006c26:	461a      	mov	r2, r3
 8006c28:	68b9      	ldr	r1, [r7, #8]
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	f001 f9bc 	bl	8007fa8 <UART_Start_Receive_DMA>
 8006c30:	4603      	mov	r3, r0
 8006c32:	e000      	b.n	8006c36 <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8006c34:	2302      	movs	r3, #2
  }
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3710      	adds	r7, #16
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	58000c00 	.word	0x58000c00

08006c44 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b088      	sub	sp, #32
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	69db      	ldr	r3, [r3, #28]
 8006c52:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006c64:	69fa      	ldr	r2, [r7, #28]
 8006c66:	f640 030f 	movw	r3, #2063	; 0x80f
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d118      	bne.n	8006ca6 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	f003 0320 	and.w	r3, r3, #32
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d013      	beq.n	8006ca6 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	f003 0320 	and.w	r3, r3, #32
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d104      	bne.n	8006c92 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d009      	beq.n	8006ca6 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	f000 8282 	beq.w	80071a0 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	4798      	blx	r3
      }
      return;
 8006ca4:	e27c      	b.n	80071a0 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	f000 80ef 	beq.w	8006e8c <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006cae:	697a      	ldr	r2, [r7, #20]
 8006cb0:	4b73      	ldr	r3, [pc, #460]	; (8006e80 <HAL_UART_IRQHandler+0x23c>)
 8006cb2:	4013      	ands	r3, r2
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d105      	bne.n	8006cc4 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006cb8:	69ba      	ldr	r2, [r7, #24]
 8006cba:	4b72      	ldr	r3, [pc, #456]	; (8006e84 <HAL_UART_IRQHandler+0x240>)
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	f000 80e4 	beq.w	8006e8c <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	f003 0301 	and.w	r3, r3, #1
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d010      	beq.n	8006cf0 <HAL_UART_IRQHandler+0xac>
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d00b      	beq.n	8006cf0 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ce6:	f043 0201 	orr.w	r2, r3, #1
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	f003 0302 	and.w	r3, r3, #2
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d010      	beq.n	8006d1c <HAL_UART_IRQHandler+0xd8>
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	f003 0301 	and.w	r3, r3, #1
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00b      	beq.n	8006d1c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2202      	movs	r2, #2
 8006d0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d12:	f043 0204 	orr.w	r2, r3, #4
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	f003 0304 	and.w	r3, r3, #4
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d010      	beq.n	8006d48 <HAL_UART_IRQHandler+0x104>
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	f003 0301 	and.w	r3, r3, #1
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d00b      	beq.n	8006d48 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2204      	movs	r2, #4
 8006d36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d3e:	f043 0202 	orr.w	r2, r3, #2
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	f003 0308 	and.w	r3, r3, #8
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d015      	beq.n	8006d7e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	f003 0320 	and.w	r3, r3, #32
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d104      	bne.n	8006d66 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006d5c:	697a      	ldr	r2, [r7, #20]
 8006d5e:	4b48      	ldr	r3, [pc, #288]	; (8006e80 <HAL_UART_IRQHandler+0x23c>)
 8006d60:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00b      	beq.n	8006d7e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2208      	movs	r2, #8
 8006d6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d74:	f043 0208 	orr.w	r2, r3, #8
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d011      	beq.n	8006dac <HAL_UART_IRQHandler+0x168>
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d00c      	beq.n	8006dac <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006da2:	f043 0220 	orr.w	r2, r3, #32
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	f000 81f6 	beq.w	80071a4 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	f003 0320 	and.w	r3, r3, #32
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d011      	beq.n	8006de6 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	f003 0320 	and.w	r3, r3, #32
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d104      	bne.n	8006dd6 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d007      	beq.n	8006de6 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d003      	beq.n	8006de6 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dec:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006df8:	2b40      	cmp	r3, #64	; 0x40
 8006dfa:	d004      	beq.n	8006e06 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d031      	beq.n	8006e6a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f001 f95a 	bl	80080c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e16:	2b40      	cmp	r3, #64	; 0x40
 8006e18:	d123      	bne.n	8006e62 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	689a      	ldr	r2, [r3, #8]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e28:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d013      	beq.n	8006e5a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e36:	4a14      	ldr	r2, [pc, #80]	; (8006e88 <HAL_UART_IRQHandler+0x244>)
 8006e38:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f7fb fb18 	bl	8002474 <HAL_DMA_Abort_IT>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d017      	beq.n	8006e7a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006e54:	4610      	mov	r0, r2
 8006e56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e58:	e00f      	b.n	8006e7a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 f9c0 	bl	80071e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e60:	e00b      	b.n	8006e7a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 f9bc 	bl	80071e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e68:	e007      	b.n	8006e7a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 f9b8 	bl	80071e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006e78:	e194      	b.n	80071a4 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e7a:	bf00      	nop
    return;
 8006e7c:	e192      	b.n	80071a4 <HAL_UART_IRQHandler+0x560>
 8006e7e:	bf00      	nop
 8006e80:	10000001 	.word	0x10000001
 8006e84:	04000120 	.word	0x04000120
 8006e88:	08008273 	.word	0x08008273

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	f040 810f 	bne.w	80070b4 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	f003 0310 	and.w	r3, r3, #16
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f000 8109 	beq.w	80070b4 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	f003 0310 	and.w	r3, r3, #16
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	f000 8103 	beq.w	80070b4 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2210      	movs	r2, #16
 8006eb4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ec0:	2b40      	cmp	r3, #64	; 0x40
 8006ec2:	f040 80bb 	bne.w	800703c <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a96      	ldr	r2, [pc, #600]	; (8007128 <HAL_UART_IRQHandler+0x4e4>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d059      	beq.n	8006f86 <HAL_UART_IRQHandler+0x342>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a94      	ldr	r2, [pc, #592]	; (800712c <HAL_UART_IRQHandler+0x4e8>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d053      	beq.n	8006f86 <HAL_UART_IRQHandler+0x342>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a92      	ldr	r2, [pc, #584]	; (8007130 <HAL_UART_IRQHandler+0x4ec>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d04d      	beq.n	8006f86 <HAL_UART_IRQHandler+0x342>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a90      	ldr	r2, [pc, #576]	; (8007134 <HAL_UART_IRQHandler+0x4f0>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d047      	beq.n	8006f86 <HAL_UART_IRQHandler+0x342>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a8e      	ldr	r2, [pc, #568]	; (8007138 <HAL_UART_IRQHandler+0x4f4>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d041      	beq.n	8006f86 <HAL_UART_IRQHandler+0x342>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a8c      	ldr	r2, [pc, #560]	; (800713c <HAL_UART_IRQHandler+0x4f8>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d03b      	beq.n	8006f86 <HAL_UART_IRQHandler+0x342>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a8a      	ldr	r2, [pc, #552]	; (8007140 <HAL_UART_IRQHandler+0x4fc>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d035      	beq.n	8006f86 <HAL_UART_IRQHandler+0x342>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a88      	ldr	r2, [pc, #544]	; (8007144 <HAL_UART_IRQHandler+0x500>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d02f      	beq.n	8006f86 <HAL_UART_IRQHandler+0x342>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a86      	ldr	r2, [pc, #536]	; (8007148 <HAL_UART_IRQHandler+0x504>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d029      	beq.n	8006f86 <HAL_UART_IRQHandler+0x342>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a84      	ldr	r2, [pc, #528]	; (800714c <HAL_UART_IRQHandler+0x508>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d023      	beq.n	8006f86 <HAL_UART_IRQHandler+0x342>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a82      	ldr	r2, [pc, #520]	; (8007150 <HAL_UART_IRQHandler+0x50c>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d01d      	beq.n	8006f86 <HAL_UART_IRQHandler+0x342>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a80      	ldr	r2, [pc, #512]	; (8007154 <HAL_UART_IRQHandler+0x510>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d017      	beq.n	8006f86 <HAL_UART_IRQHandler+0x342>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a7e      	ldr	r2, [pc, #504]	; (8007158 <HAL_UART_IRQHandler+0x514>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d011      	beq.n	8006f86 <HAL_UART_IRQHandler+0x342>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a7c      	ldr	r2, [pc, #496]	; (800715c <HAL_UART_IRQHandler+0x518>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d00b      	beq.n	8006f86 <HAL_UART_IRQHandler+0x342>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a7a      	ldr	r2, [pc, #488]	; (8007160 <HAL_UART_IRQHandler+0x51c>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d005      	beq.n	8006f86 <HAL_UART_IRQHandler+0x342>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a78      	ldr	r2, [pc, #480]	; (8007164 <HAL_UART_IRQHandler+0x520>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d105      	bne.n	8006f92 <HAL_UART_IRQHandler+0x34e>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	e004      	b.n	8006f9c <HAL_UART_IRQHandler+0x358>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8006f9e:	893b      	ldrh	r3, [r7, #8]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	f000 8101 	beq.w	80071a8 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006fac:	893a      	ldrh	r2, [r7, #8]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	f080 80fa 	bcs.w	80071a8 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	893a      	ldrh	r2, [r7, #8]
 8006fb8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fc0:	69db      	ldr	r3, [r3, #28]
 8006fc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fc6:	d02b      	beq.n	8007020 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006fd6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	689a      	ldr	r2, [r3, #8]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f022 0201 	bic.w	r2, r2, #1
 8006fe6:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	689a      	ldr	r2, [r3, #8]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ff6:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2220      	movs	r2, #32
 8006ffc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f022 0210 	bic.w	r2, r2, #16
 8007014:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800701a:	4618      	mov	r0, r3
 800701c:	f7fa ff0c 	bl	8001e38 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800702c:	b29b      	uxth	r3, r3
 800702e:	1ad3      	subs	r3, r2, r3
 8007030:	b29b      	uxth	r3, r3
 8007032:	4619      	mov	r1, r3
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 f8dd 	bl	80071f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800703a:	e0b5      	b.n	80071a8 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007048:	b29b      	uxth	r3, r3
 800704a:	1ad3      	subs	r3, r2, r3
 800704c:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007054:	b29b      	uxth	r3, r3
 8007056:	2b00      	cmp	r3, #0
 8007058:	f000 80a8 	beq.w	80071ac <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800705c:	897b      	ldrh	r3, [r7, #10]
 800705e:	2b00      	cmp	r3, #0
 8007060:	f000 80a4 	beq.w	80071ac <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007072:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	6899      	ldr	r1, [r3, #8]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	4b3a      	ldr	r3, [pc, #232]	; (8007168 <HAL_UART_IRQHandler+0x524>)
 8007080:	400b      	ands	r3, r1
 8007082:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2220      	movs	r2, #32
 8007088:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f022 0210 	bic.w	r2, r2, #16
 80070a6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80070a8:	897b      	ldrh	r3, [r7, #10]
 80070aa:	4619      	mov	r1, r3
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 f8a1 	bl	80071f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80070b2:	e07b      	b.n	80071ac <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00d      	beq.n	80070da <HAL_UART_IRQHandler+0x496>
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d008      	beq.n	80070da <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80070d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f001 f8fd 	bl	80082d2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80070d8:	e06b      	b.n	80071b2 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d012      	beq.n	800710a <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d104      	bne.n	80070f8 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d008      	beq.n	800710a <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d057      	beq.n	80071b0 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	4798      	blx	r3
    }
    return;
 8007108:	e052      	b.n	80071b0 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800710a:	69fb      	ldr	r3, [r7, #28]
 800710c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007110:	2b00      	cmp	r3, #0
 8007112:	d02b      	beq.n	800716c <HAL_UART_IRQHandler+0x528>
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800711a:	2b00      	cmp	r3, #0
 800711c:	d026      	beq.n	800716c <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f001 f8bd 	bl	800829e <UART_EndTransmit_IT>
    return;
 8007124:	e045      	b.n	80071b2 <HAL_UART_IRQHandler+0x56e>
 8007126:	bf00      	nop
 8007128:	40020010 	.word	0x40020010
 800712c:	40020028 	.word	0x40020028
 8007130:	40020040 	.word	0x40020040
 8007134:	40020058 	.word	0x40020058
 8007138:	40020070 	.word	0x40020070
 800713c:	40020088 	.word	0x40020088
 8007140:	400200a0 	.word	0x400200a0
 8007144:	400200b8 	.word	0x400200b8
 8007148:	40020410 	.word	0x40020410
 800714c:	40020428 	.word	0x40020428
 8007150:	40020440 	.word	0x40020440
 8007154:	40020458 	.word	0x40020458
 8007158:	40020470 	.word	0x40020470
 800715c:	40020488 	.word	0x40020488
 8007160:	400204a0 	.word	0x400204a0
 8007164:	400204b8 	.word	0x400204b8
 8007168:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007172:	2b00      	cmp	r3, #0
 8007174:	d008      	beq.n	8007188 <HAL_UART_IRQHandler+0x544>
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800717c:	2b00      	cmp	r3, #0
 800717e:	d003      	beq.n	8007188 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f001 f8ba 	bl	80082fa <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007186:	e014      	b.n	80071b2 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00f      	beq.n	80071b2 <HAL_UART_IRQHandler+0x56e>
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	2b00      	cmp	r3, #0
 8007196:	da0c      	bge.n	80071b2 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f001 f8a4 	bl	80082e6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800719e:	e008      	b.n	80071b2 <HAL_UART_IRQHandler+0x56e>
      return;
 80071a0:	bf00      	nop
 80071a2:	e006      	b.n	80071b2 <HAL_UART_IRQHandler+0x56e>
    return;
 80071a4:	bf00      	nop
 80071a6:	e004      	b.n	80071b2 <HAL_UART_IRQHandler+0x56e>
      return;
 80071a8:	bf00      	nop
 80071aa:	e002      	b.n	80071b2 <HAL_UART_IRQHandler+0x56e>
      return;
 80071ac:	bf00      	nop
 80071ae:	e000      	b.n	80071b2 <HAL_UART_IRQHandler+0x56e>
    return;
 80071b0:	bf00      	nop
  }
}
 80071b2:	3720      	adds	r7, #32
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80071c0:	bf00      	nop
 80071c2:	370c      	adds	r7, #12
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80071d4:	bf00      	nop
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80071e8:	bf00      	nop
 80071ea:	370c      	adds	r7, #12
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr

080071f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	460b      	mov	r3, r1
 80071fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007200:	bf00      	nop
 8007202:	370c      	adds	r7, #12
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800720c:	b5b0      	push	{r4, r5, r7, lr}
 800720e:	b08e      	sub	sp, #56	; 0x38
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007214:	2300      	movs	r3, #0
 8007216:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	689a      	ldr	r2, [r3, #8]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	431a      	orrs	r2, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	695b      	ldr	r3, [r3, #20]
 8007228:	431a      	orrs	r2, r3
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	69db      	ldr	r3, [r3, #28]
 800722e:	4313      	orrs	r3, r2
 8007230:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	4bbf      	ldr	r3, [pc, #764]	; (8007538 <UART_SetConfig+0x32c>)
 800723a:	4013      	ands	r3, r2
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	6812      	ldr	r2, [r2, #0]
 8007240:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007242:	430b      	orrs	r3, r1
 8007244:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	68da      	ldr	r2, [r3, #12]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	430a      	orrs	r2, r1
 800725a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	699b      	ldr	r3, [r3, #24]
 8007260:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4ab5      	ldr	r2, [pc, #724]	; (800753c <UART_SetConfig+0x330>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d004      	beq.n	8007276 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6a1b      	ldr	r3, [r3, #32]
 8007270:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007272:	4313      	orrs	r3, r2
 8007274:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	689a      	ldr	r2, [r3, #8]
 800727c:	4bb0      	ldr	r3, [pc, #704]	; (8007540 <UART_SetConfig+0x334>)
 800727e:	4013      	ands	r3, r2
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	6812      	ldr	r2, [r2, #0]
 8007284:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007286:	430b      	orrs	r3, r1
 8007288:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007290:	f023 010f 	bic.w	r1, r3, #15
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	430a      	orrs	r2, r1
 800729e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4aa7      	ldr	r2, [pc, #668]	; (8007544 <UART_SetConfig+0x338>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d176      	bne.n	8007398 <UART_SetConfig+0x18c>
 80072aa:	4ba7      	ldr	r3, [pc, #668]	; (8007548 <UART_SetConfig+0x33c>)
 80072ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80072b2:	2b28      	cmp	r3, #40	; 0x28
 80072b4:	d86c      	bhi.n	8007390 <UART_SetConfig+0x184>
 80072b6:	a201      	add	r2, pc, #4	; (adr r2, 80072bc <UART_SetConfig+0xb0>)
 80072b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072bc:	08007361 	.word	0x08007361
 80072c0:	08007391 	.word	0x08007391
 80072c4:	08007391 	.word	0x08007391
 80072c8:	08007391 	.word	0x08007391
 80072cc:	08007391 	.word	0x08007391
 80072d0:	08007391 	.word	0x08007391
 80072d4:	08007391 	.word	0x08007391
 80072d8:	08007391 	.word	0x08007391
 80072dc:	08007369 	.word	0x08007369
 80072e0:	08007391 	.word	0x08007391
 80072e4:	08007391 	.word	0x08007391
 80072e8:	08007391 	.word	0x08007391
 80072ec:	08007391 	.word	0x08007391
 80072f0:	08007391 	.word	0x08007391
 80072f4:	08007391 	.word	0x08007391
 80072f8:	08007391 	.word	0x08007391
 80072fc:	08007371 	.word	0x08007371
 8007300:	08007391 	.word	0x08007391
 8007304:	08007391 	.word	0x08007391
 8007308:	08007391 	.word	0x08007391
 800730c:	08007391 	.word	0x08007391
 8007310:	08007391 	.word	0x08007391
 8007314:	08007391 	.word	0x08007391
 8007318:	08007391 	.word	0x08007391
 800731c:	08007379 	.word	0x08007379
 8007320:	08007391 	.word	0x08007391
 8007324:	08007391 	.word	0x08007391
 8007328:	08007391 	.word	0x08007391
 800732c:	08007391 	.word	0x08007391
 8007330:	08007391 	.word	0x08007391
 8007334:	08007391 	.word	0x08007391
 8007338:	08007391 	.word	0x08007391
 800733c:	08007381 	.word	0x08007381
 8007340:	08007391 	.word	0x08007391
 8007344:	08007391 	.word	0x08007391
 8007348:	08007391 	.word	0x08007391
 800734c:	08007391 	.word	0x08007391
 8007350:	08007391 	.word	0x08007391
 8007354:	08007391 	.word	0x08007391
 8007358:	08007391 	.word	0x08007391
 800735c:	08007389 	.word	0x08007389
 8007360:	2301      	movs	r3, #1
 8007362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007366:	e222      	b.n	80077ae <UART_SetConfig+0x5a2>
 8007368:	2304      	movs	r3, #4
 800736a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800736e:	e21e      	b.n	80077ae <UART_SetConfig+0x5a2>
 8007370:	2308      	movs	r3, #8
 8007372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007376:	e21a      	b.n	80077ae <UART_SetConfig+0x5a2>
 8007378:	2310      	movs	r3, #16
 800737a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800737e:	e216      	b.n	80077ae <UART_SetConfig+0x5a2>
 8007380:	2320      	movs	r3, #32
 8007382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007386:	e212      	b.n	80077ae <UART_SetConfig+0x5a2>
 8007388:	2340      	movs	r3, #64	; 0x40
 800738a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800738e:	e20e      	b.n	80077ae <UART_SetConfig+0x5a2>
 8007390:	2380      	movs	r3, #128	; 0x80
 8007392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007396:	e20a      	b.n	80077ae <UART_SetConfig+0x5a2>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a6b      	ldr	r2, [pc, #428]	; (800754c <UART_SetConfig+0x340>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d130      	bne.n	8007404 <UART_SetConfig+0x1f8>
 80073a2:	4b69      	ldr	r3, [pc, #420]	; (8007548 <UART_SetConfig+0x33c>)
 80073a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073a6:	f003 0307 	and.w	r3, r3, #7
 80073aa:	2b05      	cmp	r3, #5
 80073ac:	d826      	bhi.n	80073fc <UART_SetConfig+0x1f0>
 80073ae:	a201      	add	r2, pc, #4	; (adr r2, 80073b4 <UART_SetConfig+0x1a8>)
 80073b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b4:	080073cd 	.word	0x080073cd
 80073b8:	080073d5 	.word	0x080073d5
 80073bc:	080073dd 	.word	0x080073dd
 80073c0:	080073e5 	.word	0x080073e5
 80073c4:	080073ed 	.word	0x080073ed
 80073c8:	080073f5 	.word	0x080073f5
 80073cc:	2300      	movs	r3, #0
 80073ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073d2:	e1ec      	b.n	80077ae <UART_SetConfig+0x5a2>
 80073d4:	2304      	movs	r3, #4
 80073d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073da:	e1e8      	b.n	80077ae <UART_SetConfig+0x5a2>
 80073dc:	2308      	movs	r3, #8
 80073de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073e2:	e1e4      	b.n	80077ae <UART_SetConfig+0x5a2>
 80073e4:	2310      	movs	r3, #16
 80073e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073ea:	e1e0      	b.n	80077ae <UART_SetConfig+0x5a2>
 80073ec:	2320      	movs	r3, #32
 80073ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073f2:	e1dc      	b.n	80077ae <UART_SetConfig+0x5a2>
 80073f4:	2340      	movs	r3, #64	; 0x40
 80073f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073fa:	e1d8      	b.n	80077ae <UART_SetConfig+0x5a2>
 80073fc:	2380      	movs	r3, #128	; 0x80
 80073fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007402:	e1d4      	b.n	80077ae <UART_SetConfig+0x5a2>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a51      	ldr	r2, [pc, #324]	; (8007550 <UART_SetConfig+0x344>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d130      	bne.n	8007470 <UART_SetConfig+0x264>
 800740e:	4b4e      	ldr	r3, [pc, #312]	; (8007548 <UART_SetConfig+0x33c>)
 8007410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007412:	f003 0307 	and.w	r3, r3, #7
 8007416:	2b05      	cmp	r3, #5
 8007418:	d826      	bhi.n	8007468 <UART_SetConfig+0x25c>
 800741a:	a201      	add	r2, pc, #4	; (adr r2, 8007420 <UART_SetConfig+0x214>)
 800741c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007420:	08007439 	.word	0x08007439
 8007424:	08007441 	.word	0x08007441
 8007428:	08007449 	.word	0x08007449
 800742c:	08007451 	.word	0x08007451
 8007430:	08007459 	.word	0x08007459
 8007434:	08007461 	.word	0x08007461
 8007438:	2300      	movs	r3, #0
 800743a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800743e:	e1b6      	b.n	80077ae <UART_SetConfig+0x5a2>
 8007440:	2304      	movs	r3, #4
 8007442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007446:	e1b2      	b.n	80077ae <UART_SetConfig+0x5a2>
 8007448:	2308      	movs	r3, #8
 800744a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800744e:	e1ae      	b.n	80077ae <UART_SetConfig+0x5a2>
 8007450:	2310      	movs	r3, #16
 8007452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007456:	e1aa      	b.n	80077ae <UART_SetConfig+0x5a2>
 8007458:	2320      	movs	r3, #32
 800745a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800745e:	e1a6      	b.n	80077ae <UART_SetConfig+0x5a2>
 8007460:	2340      	movs	r3, #64	; 0x40
 8007462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007466:	e1a2      	b.n	80077ae <UART_SetConfig+0x5a2>
 8007468:	2380      	movs	r3, #128	; 0x80
 800746a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800746e:	e19e      	b.n	80077ae <UART_SetConfig+0x5a2>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a37      	ldr	r2, [pc, #220]	; (8007554 <UART_SetConfig+0x348>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d130      	bne.n	80074dc <UART_SetConfig+0x2d0>
 800747a:	4b33      	ldr	r3, [pc, #204]	; (8007548 <UART_SetConfig+0x33c>)
 800747c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800747e:	f003 0307 	and.w	r3, r3, #7
 8007482:	2b05      	cmp	r3, #5
 8007484:	d826      	bhi.n	80074d4 <UART_SetConfig+0x2c8>
 8007486:	a201      	add	r2, pc, #4	; (adr r2, 800748c <UART_SetConfig+0x280>)
 8007488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800748c:	080074a5 	.word	0x080074a5
 8007490:	080074ad 	.word	0x080074ad
 8007494:	080074b5 	.word	0x080074b5
 8007498:	080074bd 	.word	0x080074bd
 800749c:	080074c5 	.word	0x080074c5
 80074a0:	080074cd 	.word	0x080074cd
 80074a4:	2300      	movs	r3, #0
 80074a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074aa:	e180      	b.n	80077ae <UART_SetConfig+0x5a2>
 80074ac:	2304      	movs	r3, #4
 80074ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074b2:	e17c      	b.n	80077ae <UART_SetConfig+0x5a2>
 80074b4:	2308      	movs	r3, #8
 80074b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074ba:	e178      	b.n	80077ae <UART_SetConfig+0x5a2>
 80074bc:	2310      	movs	r3, #16
 80074be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074c2:	e174      	b.n	80077ae <UART_SetConfig+0x5a2>
 80074c4:	2320      	movs	r3, #32
 80074c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074ca:	e170      	b.n	80077ae <UART_SetConfig+0x5a2>
 80074cc:	2340      	movs	r3, #64	; 0x40
 80074ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074d2:	e16c      	b.n	80077ae <UART_SetConfig+0x5a2>
 80074d4:	2380      	movs	r3, #128	; 0x80
 80074d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074da:	e168      	b.n	80077ae <UART_SetConfig+0x5a2>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a1d      	ldr	r2, [pc, #116]	; (8007558 <UART_SetConfig+0x34c>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d142      	bne.n	800756c <UART_SetConfig+0x360>
 80074e6:	4b18      	ldr	r3, [pc, #96]	; (8007548 <UART_SetConfig+0x33c>)
 80074e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ea:	f003 0307 	and.w	r3, r3, #7
 80074ee:	2b05      	cmp	r3, #5
 80074f0:	d838      	bhi.n	8007564 <UART_SetConfig+0x358>
 80074f2:	a201      	add	r2, pc, #4	; (adr r2, 80074f8 <UART_SetConfig+0x2ec>)
 80074f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f8:	08007511 	.word	0x08007511
 80074fc:	08007519 	.word	0x08007519
 8007500:	08007521 	.word	0x08007521
 8007504:	08007529 	.word	0x08007529
 8007508:	08007531 	.word	0x08007531
 800750c:	0800755d 	.word	0x0800755d
 8007510:	2300      	movs	r3, #0
 8007512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007516:	e14a      	b.n	80077ae <UART_SetConfig+0x5a2>
 8007518:	2304      	movs	r3, #4
 800751a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800751e:	e146      	b.n	80077ae <UART_SetConfig+0x5a2>
 8007520:	2308      	movs	r3, #8
 8007522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007526:	e142      	b.n	80077ae <UART_SetConfig+0x5a2>
 8007528:	2310      	movs	r3, #16
 800752a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800752e:	e13e      	b.n	80077ae <UART_SetConfig+0x5a2>
 8007530:	2320      	movs	r3, #32
 8007532:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007536:	e13a      	b.n	80077ae <UART_SetConfig+0x5a2>
 8007538:	cfff69f3 	.word	0xcfff69f3
 800753c:	58000c00 	.word	0x58000c00
 8007540:	11fff4ff 	.word	0x11fff4ff
 8007544:	40011000 	.word	0x40011000
 8007548:	58024400 	.word	0x58024400
 800754c:	40004400 	.word	0x40004400
 8007550:	40004800 	.word	0x40004800
 8007554:	40004c00 	.word	0x40004c00
 8007558:	40005000 	.word	0x40005000
 800755c:	2340      	movs	r3, #64	; 0x40
 800755e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007562:	e124      	b.n	80077ae <UART_SetConfig+0x5a2>
 8007564:	2380      	movs	r3, #128	; 0x80
 8007566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800756a:	e120      	b.n	80077ae <UART_SetConfig+0x5a2>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4acc      	ldr	r2, [pc, #816]	; (80078a4 <UART_SetConfig+0x698>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d176      	bne.n	8007664 <UART_SetConfig+0x458>
 8007576:	4bcc      	ldr	r3, [pc, #816]	; (80078a8 <UART_SetConfig+0x69c>)
 8007578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800757a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800757e:	2b28      	cmp	r3, #40	; 0x28
 8007580:	d86c      	bhi.n	800765c <UART_SetConfig+0x450>
 8007582:	a201      	add	r2, pc, #4	; (adr r2, 8007588 <UART_SetConfig+0x37c>)
 8007584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007588:	0800762d 	.word	0x0800762d
 800758c:	0800765d 	.word	0x0800765d
 8007590:	0800765d 	.word	0x0800765d
 8007594:	0800765d 	.word	0x0800765d
 8007598:	0800765d 	.word	0x0800765d
 800759c:	0800765d 	.word	0x0800765d
 80075a0:	0800765d 	.word	0x0800765d
 80075a4:	0800765d 	.word	0x0800765d
 80075a8:	08007635 	.word	0x08007635
 80075ac:	0800765d 	.word	0x0800765d
 80075b0:	0800765d 	.word	0x0800765d
 80075b4:	0800765d 	.word	0x0800765d
 80075b8:	0800765d 	.word	0x0800765d
 80075bc:	0800765d 	.word	0x0800765d
 80075c0:	0800765d 	.word	0x0800765d
 80075c4:	0800765d 	.word	0x0800765d
 80075c8:	0800763d 	.word	0x0800763d
 80075cc:	0800765d 	.word	0x0800765d
 80075d0:	0800765d 	.word	0x0800765d
 80075d4:	0800765d 	.word	0x0800765d
 80075d8:	0800765d 	.word	0x0800765d
 80075dc:	0800765d 	.word	0x0800765d
 80075e0:	0800765d 	.word	0x0800765d
 80075e4:	0800765d 	.word	0x0800765d
 80075e8:	08007645 	.word	0x08007645
 80075ec:	0800765d 	.word	0x0800765d
 80075f0:	0800765d 	.word	0x0800765d
 80075f4:	0800765d 	.word	0x0800765d
 80075f8:	0800765d 	.word	0x0800765d
 80075fc:	0800765d 	.word	0x0800765d
 8007600:	0800765d 	.word	0x0800765d
 8007604:	0800765d 	.word	0x0800765d
 8007608:	0800764d 	.word	0x0800764d
 800760c:	0800765d 	.word	0x0800765d
 8007610:	0800765d 	.word	0x0800765d
 8007614:	0800765d 	.word	0x0800765d
 8007618:	0800765d 	.word	0x0800765d
 800761c:	0800765d 	.word	0x0800765d
 8007620:	0800765d 	.word	0x0800765d
 8007624:	0800765d 	.word	0x0800765d
 8007628:	08007655 	.word	0x08007655
 800762c:	2301      	movs	r3, #1
 800762e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007632:	e0bc      	b.n	80077ae <UART_SetConfig+0x5a2>
 8007634:	2304      	movs	r3, #4
 8007636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800763a:	e0b8      	b.n	80077ae <UART_SetConfig+0x5a2>
 800763c:	2308      	movs	r3, #8
 800763e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007642:	e0b4      	b.n	80077ae <UART_SetConfig+0x5a2>
 8007644:	2310      	movs	r3, #16
 8007646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800764a:	e0b0      	b.n	80077ae <UART_SetConfig+0x5a2>
 800764c:	2320      	movs	r3, #32
 800764e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007652:	e0ac      	b.n	80077ae <UART_SetConfig+0x5a2>
 8007654:	2340      	movs	r3, #64	; 0x40
 8007656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800765a:	e0a8      	b.n	80077ae <UART_SetConfig+0x5a2>
 800765c:	2380      	movs	r3, #128	; 0x80
 800765e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007662:	e0a4      	b.n	80077ae <UART_SetConfig+0x5a2>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a90      	ldr	r2, [pc, #576]	; (80078ac <UART_SetConfig+0x6a0>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d130      	bne.n	80076d0 <UART_SetConfig+0x4c4>
 800766e:	4b8e      	ldr	r3, [pc, #568]	; (80078a8 <UART_SetConfig+0x69c>)
 8007670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007672:	f003 0307 	and.w	r3, r3, #7
 8007676:	2b05      	cmp	r3, #5
 8007678:	d826      	bhi.n	80076c8 <UART_SetConfig+0x4bc>
 800767a:	a201      	add	r2, pc, #4	; (adr r2, 8007680 <UART_SetConfig+0x474>)
 800767c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007680:	08007699 	.word	0x08007699
 8007684:	080076a1 	.word	0x080076a1
 8007688:	080076a9 	.word	0x080076a9
 800768c:	080076b1 	.word	0x080076b1
 8007690:	080076b9 	.word	0x080076b9
 8007694:	080076c1 	.word	0x080076c1
 8007698:	2300      	movs	r3, #0
 800769a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800769e:	e086      	b.n	80077ae <UART_SetConfig+0x5a2>
 80076a0:	2304      	movs	r3, #4
 80076a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076a6:	e082      	b.n	80077ae <UART_SetConfig+0x5a2>
 80076a8:	2308      	movs	r3, #8
 80076aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076ae:	e07e      	b.n	80077ae <UART_SetConfig+0x5a2>
 80076b0:	2310      	movs	r3, #16
 80076b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076b6:	e07a      	b.n	80077ae <UART_SetConfig+0x5a2>
 80076b8:	2320      	movs	r3, #32
 80076ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076be:	e076      	b.n	80077ae <UART_SetConfig+0x5a2>
 80076c0:	2340      	movs	r3, #64	; 0x40
 80076c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076c6:	e072      	b.n	80077ae <UART_SetConfig+0x5a2>
 80076c8:	2380      	movs	r3, #128	; 0x80
 80076ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076ce:	e06e      	b.n	80077ae <UART_SetConfig+0x5a2>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a76      	ldr	r2, [pc, #472]	; (80078b0 <UART_SetConfig+0x6a4>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d130      	bne.n	800773c <UART_SetConfig+0x530>
 80076da:	4b73      	ldr	r3, [pc, #460]	; (80078a8 <UART_SetConfig+0x69c>)
 80076dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076de:	f003 0307 	and.w	r3, r3, #7
 80076e2:	2b05      	cmp	r3, #5
 80076e4:	d826      	bhi.n	8007734 <UART_SetConfig+0x528>
 80076e6:	a201      	add	r2, pc, #4	; (adr r2, 80076ec <UART_SetConfig+0x4e0>)
 80076e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ec:	08007705 	.word	0x08007705
 80076f0:	0800770d 	.word	0x0800770d
 80076f4:	08007715 	.word	0x08007715
 80076f8:	0800771d 	.word	0x0800771d
 80076fc:	08007725 	.word	0x08007725
 8007700:	0800772d 	.word	0x0800772d
 8007704:	2300      	movs	r3, #0
 8007706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800770a:	e050      	b.n	80077ae <UART_SetConfig+0x5a2>
 800770c:	2304      	movs	r3, #4
 800770e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007712:	e04c      	b.n	80077ae <UART_SetConfig+0x5a2>
 8007714:	2308      	movs	r3, #8
 8007716:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800771a:	e048      	b.n	80077ae <UART_SetConfig+0x5a2>
 800771c:	2310      	movs	r3, #16
 800771e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007722:	e044      	b.n	80077ae <UART_SetConfig+0x5a2>
 8007724:	2320      	movs	r3, #32
 8007726:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800772a:	e040      	b.n	80077ae <UART_SetConfig+0x5a2>
 800772c:	2340      	movs	r3, #64	; 0x40
 800772e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007732:	e03c      	b.n	80077ae <UART_SetConfig+0x5a2>
 8007734:	2380      	movs	r3, #128	; 0x80
 8007736:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800773a:	e038      	b.n	80077ae <UART_SetConfig+0x5a2>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a5c      	ldr	r2, [pc, #368]	; (80078b4 <UART_SetConfig+0x6a8>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d130      	bne.n	80077a8 <UART_SetConfig+0x59c>
 8007746:	4b58      	ldr	r3, [pc, #352]	; (80078a8 <UART_SetConfig+0x69c>)
 8007748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800774a:	f003 0307 	and.w	r3, r3, #7
 800774e:	2b05      	cmp	r3, #5
 8007750:	d826      	bhi.n	80077a0 <UART_SetConfig+0x594>
 8007752:	a201      	add	r2, pc, #4	; (adr r2, 8007758 <UART_SetConfig+0x54c>)
 8007754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007758:	08007771 	.word	0x08007771
 800775c:	08007779 	.word	0x08007779
 8007760:	08007781 	.word	0x08007781
 8007764:	08007789 	.word	0x08007789
 8007768:	08007791 	.word	0x08007791
 800776c:	08007799 	.word	0x08007799
 8007770:	2302      	movs	r3, #2
 8007772:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007776:	e01a      	b.n	80077ae <UART_SetConfig+0x5a2>
 8007778:	2304      	movs	r3, #4
 800777a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800777e:	e016      	b.n	80077ae <UART_SetConfig+0x5a2>
 8007780:	2308      	movs	r3, #8
 8007782:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007786:	e012      	b.n	80077ae <UART_SetConfig+0x5a2>
 8007788:	2310      	movs	r3, #16
 800778a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800778e:	e00e      	b.n	80077ae <UART_SetConfig+0x5a2>
 8007790:	2320      	movs	r3, #32
 8007792:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007796:	e00a      	b.n	80077ae <UART_SetConfig+0x5a2>
 8007798:	2340      	movs	r3, #64	; 0x40
 800779a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800779e:	e006      	b.n	80077ae <UART_SetConfig+0x5a2>
 80077a0:	2380      	movs	r3, #128	; 0x80
 80077a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077a6:	e002      	b.n	80077ae <UART_SetConfig+0x5a2>
 80077a8:	2380      	movs	r3, #128	; 0x80
 80077aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a40      	ldr	r2, [pc, #256]	; (80078b4 <UART_SetConfig+0x6a8>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	f040 80ef 	bne.w	8007998 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80077ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80077be:	2b20      	cmp	r3, #32
 80077c0:	dc46      	bgt.n	8007850 <UART_SetConfig+0x644>
 80077c2:	2b02      	cmp	r3, #2
 80077c4:	f2c0 8081 	blt.w	80078ca <UART_SetConfig+0x6be>
 80077c8:	3b02      	subs	r3, #2
 80077ca:	2b1e      	cmp	r3, #30
 80077cc:	d87d      	bhi.n	80078ca <UART_SetConfig+0x6be>
 80077ce:	a201      	add	r2, pc, #4	; (adr r2, 80077d4 <UART_SetConfig+0x5c8>)
 80077d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d4:	08007857 	.word	0x08007857
 80077d8:	080078cb 	.word	0x080078cb
 80077dc:	0800785f 	.word	0x0800785f
 80077e0:	080078cb 	.word	0x080078cb
 80077e4:	080078cb 	.word	0x080078cb
 80077e8:	080078cb 	.word	0x080078cb
 80077ec:	0800786f 	.word	0x0800786f
 80077f0:	080078cb 	.word	0x080078cb
 80077f4:	080078cb 	.word	0x080078cb
 80077f8:	080078cb 	.word	0x080078cb
 80077fc:	080078cb 	.word	0x080078cb
 8007800:	080078cb 	.word	0x080078cb
 8007804:	080078cb 	.word	0x080078cb
 8007808:	080078cb 	.word	0x080078cb
 800780c:	0800787f 	.word	0x0800787f
 8007810:	080078cb 	.word	0x080078cb
 8007814:	080078cb 	.word	0x080078cb
 8007818:	080078cb 	.word	0x080078cb
 800781c:	080078cb 	.word	0x080078cb
 8007820:	080078cb 	.word	0x080078cb
 8007824:	080078cb 	.word	0x080078cb
 8007828:	080078cb 	.word	0x080078cb
 800782c:	080078cb 	.word	0x080078cb
 8007830:	080078cb 	.word	0x080078cb
 8007834:	080078cb 	.word	0x080078cb
 8007838:	080078cb 	.word	0x080078cb
 800783c:	080078cb 	.word	0x080078cb
 8007840:	080078cb 	.word	0x080078cb
 8007844:	080078cb 	.word	0x080078cb
 8007848:	080078cb 	.word	0x080078cb
 800784c:	080078bd 	.word	0x080078bd
 8007850:	2b40      	cmp	r3, #64	; 0x40
 8007852:	d036      	beq.n	80078c2 <UART_SetConfig+0x6b6>
 8007854:	e039      	b.n	80078ca <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007856:	f7fe fca7 	bl	80061a8 <HAL_RCCEx_GetD3PCLK1Freq>
 800785a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800785c:	e03b      	b.n	80078d6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800785e:	f107 0314 	add.w	r3, r7, #20
 8007862:	4618      	mov	r0, r3
 8007864:	f7fe fcb6 	bl	80061d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800786c:	e033      	b.n	80078d6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800786e:	f107 0308 	add.w	r3, r7, #8
 8007872:	4618      	mov	r0, r3
 8007874:	f7fe fe02 	bl	800647c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800787c:	e02b      	b.n	80078d6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800787e:	4b0a      	ldr	r3, [pc, #40]	; (80078a8 <UART_SetConfig+0x69c>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f003 0320 	and.w	r3, r3, #32
 8007886:	2b00      	cmp	r3, #0
 8007888:	d009      	beq.n	800789e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800788a:	4b07      	ldr	r3, [pc, #28]	; (80078a8 <UART_SetConfig+0x69c>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	08db      	lsrs	r3, r3, #3
 8007890:	f003 0303 	and.w	r3, r3, #3
 8007894:	4a08      	ldr	r2, [pc, #32]	; (80078b8 <UART_SetConfig+0x6ac>)
 8007896:	fa22 f303 	lsr.w	r3, r2, r3
 800789a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800789c:	e01b      	b.n	80078d6 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800789e:	4b06      	ldr	r3, [pc, #24]	; (80078b8 <UART_SetConfig+0x6ac>)
 80078a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80078a2:	e018      	b.n	80078d6 <UART_SetConfig+0x6ca>
 80078a4:	40011400 	.word	0x40011400
 80078a8:	58024400 	.word	0x58024400
 80078ac:	40007800 	.word	0x40007800
 80078b0:	40007c00 	.word	0x40007c00
 80078b4:	58000c00 	.word	0x58000c00
 80078b8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80078bc:	4bc4      	ldr	r3, [pc, #784]	; (8007bd0 <UART_SetConfig+0x9c4>)
 80078be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80078c0:	e009      	b.n	80078d6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80078c8:	e005      	b.n	80078d6 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 80078ca:	2300      	movs	r3, #0
 80078cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80078ce:	2301      	movs	r3, #1
 80078d0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80078d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80078d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d8:	2b00      	cmp	r3, #0
 80078da:	f000 81da 	beq.w	8007c92 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e2:	4abc      	ldr	r2, [pc, #752]	; (8007bd4 <UART_SetConfig+0x9c8>)
 80078e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078e8:	461a      	mov	r2, r3
 80078ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80078f0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	685a      	ldr	r2, [r3, #4]
 80078f6:	4613      	mov	r3, r2
 80078f8:	005b      	lsls	r3, r3, #1
 80078fa:	4413      	add	r3, r2
 80078fc:	6a3a      	ldr	r2, [r7, #32]
 80078fe:	429a      	cmp	r2, r3
 8007900:	d305      	bcc.n	800790e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007908:	6a3a      	ldr	r2, [r7, #32]
 800790a:	429a      	cmp	r2, r3
 800790c:	d903      	bls.n	8007916 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007914:	e1bd      	b.n	8007c92 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007918:	4618      	mov	r0, r3
 800791a:	f04f 0100 	mov.w	r1, #0
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007922:	4aac      	ldr	r2, [pc, #688]	; (8007bd4 <UART_SetConfig+0x9c8>)
 8007924:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007928:	b29a      	uxth	r2, r3
 800792a:	f04f 0300 	mov.w	r3, #0
 800792e:	f7f8 fcd3 	bl	80002d8 <__aeabi_uldivmod>
 8007932:	4602      	mov	r2, r0
 8007934:	460b      	mov	r3, r1
 8007936:	4610      	mov	r0, r2
 8007938:	4619      	mov	r1, r3
 800793a:	f04f 0200 	mov.w	r2, #0
 800793e:	f04f 0300 	mov.w	r3, #0
 8007942:	020b      	lsls	r3, r1, #8
 8007944:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007948:	0202      	lsls	r2, r0, #8
 800794a:	6879      	ldr	r1, [r7, #4]
 800794c:	6849      	ldr	r1, [r1, #4]
 800794e:	0849      	lsrs	r1, r1, #1
 8007950:	4608      	mov	r0, r1
 8007952:	f04f 0100 	mov.w	r1, #0
 8007956:	1814      	adds	r4, r2, r0
 8007958:	eb43 0501 	adc.w	r5, r3, r1
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	461a      	mov	r2, r3
 8007962:	f04f 0300 	mov.w	r3, #0
 8007966:	4620      	mov	r0, r4
 8007968:	4629      	mov	r1, r5
 800796a:	f7f8 fcb5 	bl	80002d8 <__aeabi_uldivmod>
 800796e:	4602      	mov	r2, r0
 8007970:	460b      	mov	r3, r1
 8007972:	4613      	mov	r3, r2
 8007974:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007978:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800797c:	d308      	bcc.n	8007990 <UART_SetConfig+0x784>
 800797e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007980:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007984:	d204      	bcs.n	8007990 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800798c:	60da      	str	r2, [r3, #12]
 800798e:	e180      	b.n	8007c92 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007996:	e17c      	b.n	8007c92 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	69db      	ldr	r3, [r3, #28]
 800799c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079a0:	f040 80bf 	bne.w	8007b22 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 80079a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80079a8:	2b20      	cmp	r3, #32
 80079aa:	dc49      	bgt.n	8007a40 <UART_SetConfig+0x834>
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	db7c      	blt.n	8007aaa <UART_SetConfig+0x89e>
 80079b0:	2b20      	cmp	r3, #32
 80079b2:	d87a      	bhi.n	8007aaa <UART_SetConfig+0x89e>
 80079b4:	a201      	add	r2, pc, #4	; (adr r2, 80079bc <UART_SetConfig+0x7b0>)
 80079b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ba:	bf00      	nop
 80079bc:	08007a47 	.word	0x08007a47
 80079c0:	08007a4f 	.word	0x08007a4f
 80079c4:	08007aab 	.word	0x08007aab
 80079c8:	08007aab 	.word	0x08007aab
 80079cc:	08007a57 	.word	0x08007a57
 80079d0:	08007aab 	.word	0x08007aab
 80079d4:	08007aab 	.word	0x08007aab
 80079d8:	08007aab 	.word	0x08007aab
 80079dc:	08007a67 	.word	0x08007a67
 80079e0:	08007aab 	.word	0x08007aab
 80079e4:	08007aab 	.word	0x08007aab
 80079e8:	08007aab 	.word	0x08007aab
 80079ec:	08007aab 	.word	0x08007aab
 80079f0:	08007aab 	.word	0x08007aab
 80079f4:	08007aab 	.word	0x08007aab
 80079f8:	08007aab 	.word	0x08007aab
 80079fc:	08007a77 	.word	0x08007a77
 8007a00:	08007aab 	.word	0x08007aab
 8007a04:	08007aab 	.word	0x08007aab
 8007a08:	08007aab 	.word	0x08007aab
 8007a0c:	08007aab 	.word	0x08007aab
 8007a10:	08007aab 	.word	0x08007aab
 8007a14:	08007aab 	.word	0x08007aab
 8007a18:	08007aab 	.word	0x08007aab
 8007a1c:	08007aab 	.word	0x08007aab
 8007a20:	08007aab 	.word	0x08007aab
 8007a24:	08007aab 	.word	0x08007aab
 8007a28:	08007aab 	.word	0x08007aab
 8007a2c:	08007aab 	.word	0x08007aab
 8007a30:	08007aab 	.word	0x08007aab
 8007a34:	08007aab 	.word	0x08007aab
 8007a38:	08007aab 	.word	0x08007aab
 8007a3c:	08007a9d 	.word	0x08007a9d
 8007a40:	2b40      	cmp	r3, #64	; 0x40
 8007a42:	d02e      	beq.n	8007aa2 <UART_SetConfig+0x896>
 8007a44:	e031      	b.n	8007aaa <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a46:	f7fd fc13 	bl	8005270 <HAL_RCC_GetPCLK1Freq>
 8007a4a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007a4c:	e033      	b.n	8007ab6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a4e:	f7fd fc25 	bl	800529c <HAL_RCC_GetPCLK2Freq>
 8007a52:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007a54:	e02f      	b.n	8007ab6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a56:	f107 0314 	add.w	r3, r7, #20
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f7fe fbba 	bl	80061d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007a60:	69bb      	ldr	r3, [r7, #24]
 8007a62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a64:	e027      	b.n	8007ab6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a66:	f107 0308 	add.w	r3, r7, #8
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7fe fd06 	bl	800647c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a74:	e01f      	b.n	8007ab6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a76:	4b58      	ldr	r3, [pc, #352]	; (8007bd8 <UART_SetConfig+0x9cc>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f003 0320 	and.w	r3, r3, #32
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d009      	beq.n	8007a96 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007a82:	4b55      	ldr	r3, [pc, #340]	; (8007bd8 <UART_SetConfig+0x9cc>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	08db      	lsrs	r3, r3, #3
 8007a88:	f003 0303 	and.w	r3, r3, #3
 8007a8c:	4a53      	ldr	r2, [pc, #332]	; (8007bdc <UART_SetConfig+0x9d0>)
 8007a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8007a92:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007a94:	e00f      	b.n	8007ab6 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8007a96:	4b51      	ldr	r3, [pc, #324]	; (8007bdc <UART_SetConfig+0x9d0>)
 8007a98:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a9a:	e00c      	b.n	8007ab6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007a9c:	4b4c      	ldr	r3, [pc, #304]	; (8007bd0 <UART_SetConfig+0x9c4>)
 8007a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007aa0:	e009      	b.n	8007ab6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007aa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007aa8:	e005      	b.n	8007ab6 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007ab4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	f000 80ea 	beq.w	8007c92 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac2:	4a44      	ldr	r2, [pc, #272]	; (8007bd4 <UART_SetConfig+0x9c8>)
 8007ac4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ac8:	461a      	mov	r2, r3
 8007aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007acc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ad0:	005a      	lsls	r2, r3, #1
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	085b      	lsrs	r3, r3, #1
 8007ad8:	441a      	add	r2, r3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae8:	2b0f      	cmp	r3, #15
 8007aea:	d916      	bls.n	8007b1a <UART_SetConfig+0x90e>
 8007aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007af2:	d212      	bcs.n	8007b1a <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	f023 030f 	bic.w	r3, r3, #15
 8007afc:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b00:	085b      	lsrs	r3, r3, #1
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	f003 0307 	and.w	r3, r3, #7
 8007b08:	b29a      	uxth	r2, r3
 8007b0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007b16:	60da      	str	r2, [r3, #12]
 8007b18:	e0bb      	b.n	8007c92 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007b20:	e0b7      	b.n	8007c92 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b22:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007b26:	2b20      	cmp	r3, #32
 8007b28:	dc4a      	bgt.n	8007bc0 <UART_SetConfig+0x9b4>
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	f2c0 8086 	blt.w	8007c3c <UART_SetConfig+0xa30>
 8007b30:	2b20      	cmp	r3, #32
 8007b32:	f200 8083 	bhi.w	8007c3c <UART_SetConfig+0xa30>
 8007b36:	a201      	add	r2, pc, #4	; (adr r2, 8007b3c <UART_SetConfig+0x930>)
 8007b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b3c:	08007bc7 	.word	0x08007bc7
 8007b40:	08007be1 	.word	0x08007be1
 8007b44:	08007c3d 	.word	0x08007c3d
 8007b48:	08007c3d 	.word	0x08007c3d
 8007b4c:	08007be9 	.word	0x08007be9
 8007b50:	08007c3d 	.word	0x08007c3d
 8007b54:	08007c3d 	.word	0x08007c3d
 8007b58:	08007c3d 	.word	0x08007c3d
 8007b5c:	08007bf9 	.word	0x08007bf9
 8007b60:	08007c3d 	.word	0x08007c3d
 8007b64:	08007c3d 	.word	0x08007c3d
 8007b68:	08007c3d 	.word	0x08007c3d
 8007b6c:	08007c3d 	.word	0x08007c3d
 8007b70:	08007c3d 	.word	0x08007c3d
 8007b74:	08007c3d 	.word	0x08007c3d
 8007b78:	08007c3d 	.word	0x08007c3d
 8007b7c:	08007c09 	.word	0x08007c09
 8007b80:	08007c3d 	.word	0x08007c3d
 8007b84:	08007c3d 	.word	0x08007c3d
 8007b88:	08007c3d 	.word	0x08007c3d
 8007b8c:	08007c3d 	.word	0x08007c3d
 8007b90:	08007c3d 	.word	0x08007c3d
 8007b94:	08007c3d 	.word	0x08007c3d
 8007b98:	08007c3d 	.word	0x08007c3d
 8007b9c:	08007c3d 	.word	0x08007c3d
 8007ba0:	08007c3d 	.word	0x08007c3d
 8007ba4:	08007c3d 	.word	0x08007c3d
 8007ba8:	08007c3d 	.word	0x08007c3d
 8007bac:	08007c3d 	.word	0x08007c3d
 8007bb0:	08007c3d 	.word	0x08007c3d
 8007bb4:	08007c3d 	.word	0x08007c3d
 8007bb8:	08007c3d 	.word	0x08007c3d
 8007bbc:	08007c2f 	.word	0x08007c2f
 8007bc0:	2b40      	cmp	r3, #64	; 0x40
 8007bc2:	d037      	beq.n	8007c34 <UART_SetConfig+0xa28>
 8007bc4:	e03a      	b.n	8007c3c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bc6:	f7fd fb53 	bl	8005270 <HAL_RCC_GetPCLK1Freq>
 8007bca:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007bcc:	e03c      	b.n	8007c48 <UART_SetConfig+0xa3c>
 8007bce:	bf00      	nop
 8007bd0:	003d0900 	.word	0x003d0900
 8007bd4:	08008f64 	.word	0x08008f64
 8007bd8:	58024400 	.word	0x58024400
 8007bdc:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007be0:	f7fd fb5c 	bl	800529c <HAL_RCC_GetPCLK2Freq>
 8007be4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007be6:	e02f      	b.n	8007c48 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007be8:	f107 0314 	add.w	r3, r7, #20
 8007bec:	4618      	mov	r0, r3
 8007bee:	f7fe faf1 	bl	80061d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007bf2:	69bb      	ldr	r3, [r7, #24]
 8007bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007bf6:	e027      	b.n	8007c48 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bf8:	f107 0308 	add.w	r3, r7, #8
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f7fe fc3d 	bl	800647c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c06:	e01f      	b.n	8007c48 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c08:	4b2c      	ldr	r3, [pc, #176]	; (8007cbc <UART_SetConfig+0xab0>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f003 0320 	and.w	r3, r3, #32
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d009      	beq.n	8007c28 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007c14:	4b29      	ldr	r3, [pc, #164]	; (8007cbc <UART_SetConfig+0xab0>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	08db      	lsrs	r3, r3, #3
 8007c1a:	f003 0303 	and.w	r3, r3, #3
 8007c1e:	4a28      	ldr	r2, [pc, #160]	; (8007cc0 <UART_SetConfig+0xab4>)
 8007c20:	fa22 f303 	lsr.w	r3, r2, r3
 8007c24:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007c26:	e00f      	b.n	8007c48 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8007c28:	4b25      	ldr	r3, [pc, #148]	; (8007cc0 <UART_SetConfig+0xab4>)
 8007c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c2c:	e00c      	b.n	8007c48 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007c2e:	4b25      	ldr	r3, [pc, #148]	; (8007cc4 <UART_SetConfig+0xab8>)
 8007c30:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c32:	e009      	b.n	8007c48 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c38:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c3a:	e005      	b.n	8007c48 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007c40:	2301      	movs	r3, #1
 8007c42:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007c46:	bf00      	nop
    }

    if (pclk != 0U)
 8007c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d021      	beq.n	8007c92 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c52:	4a1d      	ldr	r2, [pc, #116]	; (8007cc8 <UART_SetConfig+0xabc>)
 8007c54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c58:	461a      	mov	r2, r3
 8007c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c5c:	fbb3 f2f2 	udiv	r2, r3, r2
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	085b      	lsrs	r3, r3, #1
 8007c66:	441a      	add	r2, r3
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c76:	2b0f      	cmp	r3, #15
 8007c78:	d908      	bls.n	8007c8c <UART_SetConfig+0xa80>
 8007c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c80:	d204      	bcs.n	8007c8c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c88:	60da      	str	r2, [r3, #12]
 8007c8a:	e002      	b.n	8007c92 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2201      	movs	r2, #1
 8007c96:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007cae:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3738      	adds	r7, #56	; 0x38
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bdb0      	pop	{r4, r5, r7, pc}
 8007cba:	bf00      	nop
 8007cbc:	58024400 	.word	0x58024400
 8007cc0:	03d09000 	.word	0x03d09000
 8007cc4:	003d0900 	.word	0x003d0900
 8007cc8:	08008f64 	.word	0x08008f64

08007ccc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cd8:	f003 0301 	and.w	r3, r3, #1
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00a      	beq.n	8007cf6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	430a      	orrs	r2, r1
 8007cf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cfa:	f003 0302 	and.w	r3, r3, #2
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d00a      	beq.n	8007d18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	430a      	orrs	r2, r1
 8007d16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d1c:	f003 0304 	and.w	r3, r3, #4
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d00a      	beq.n	8007d3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	430a      	orrs	r2, r1
 8007d38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d3e:	f003 0308 	and.w	r3, r3, #8
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d00a      	beq.n	8007d5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	430a      	orrs	r2, r1
 8007d5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d60:	f003 0310 	and.w	r3, r3, #16
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d00a      	beq.n	8007d7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	430a      	orrs	r2, r1
 8007d7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d82:	f003 0320 	and.w	r3, r3, #32
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00a      	beq.n	8007da0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	430a      	orrs	r2, r1
 8007d9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d01a      	beq.n	8007de2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	430a      	orrs	r2, r1
 8007dc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dca:	d10a      	bne.n	8007de2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	430a      	orrs	r2, r1
 8007de0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00a      	beq.n	8007e04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	430a      	orrs	r2, r1
 8007e02:	605a      	str	r2, [r3, #4]
  }
}
 8007e04:	bf00      	nop
 8007e06:	370c      	adds	r7, #12
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b086      	sub	sp, #24
 8007e14:	af02      	add	r7, sp, #8
 8007e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e20:	f7f9 f91c 	bl	800105c <HAL_GetTick>
 8007e24:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 0308 	and.w	r3, r3, #8
 8007e30:	2b08      	cmp	r3, #8
 8007e32:	d10e      	bne.n	8007e52 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e38:	9300      	str	r3, [sp, #0]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 f82f 	bl	8007ea6 <UART_WaitOnFlagUntilTimeout>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d001      	beq.n	8007e52 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e4e:	2303      	movs	r3, #3
 8007e50:	e025      	b.n	8007e9e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f003 0304 	and.w	r3, r3, #4
 8007e5c:	2b04      	cmp	r3, #4
 8007e5e:	d10e      	bne.n	8007e7e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e64:	9300      	str	r3, [sp, #0]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 f819 	bl	8007ea6 <UART_WaitOnFlagUntilTimeout>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d001      	beq.n	8007e7e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e7a:	2303      	movs	r3, #3
 8007e7c:	e00f      	b.n	8007e9e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2220      	movs	r2, #32
 8007e82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2220      	movs	r2, #32
 8007e8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007e9c:	2300      	movs	r3, #0
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ea6:	b580      	push	{r7, lr}
 8007ea8:	b084      	sub	sp, #16
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	60f8      	str	r0, [r7, #12]
 8007eae:	60b9      	str	r1, [r7, #8]
 8007eb0:	603b      	str	r3, [r7, #0]
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007eb6:	e062      	b.n	8007f7e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007eb8:	69bb      	ldr	r3, [r7, #24]
 8007eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ebe:	d05e      	beq.n	8007f7e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ec0:	f7f9 f8cc 	bl	800105c <HAL_GetTick>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	69ba      	ldr	r2, [r7, #24]
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d302      	bcc.n	8007ed6 <UART_WaitOnFlagUntilTimeout+0x30>
 8007ed0:	69bb      	ldr	r3, [r7, #24]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d11d      	bne.n	8007f12 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007ee4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	689a      	ldr	r2, [r3, #8]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f022 0201 	bic.w	r2, r2, #1
 8007ef4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2220      	movs	r2, #32
 8007efa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2220      	movs	r2, #32
 8007f02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007f0e:	2303      	movs	r3, #3
 8007f10:	e045      	b.n	8007f9e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f003 0304 	and.w	r3, r3, #4
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d02e      	beq.n	8007f7e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	69db      	ldr	r3, [r3, #28]
 8007f26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f2e:	d126      	bne.n	8007f7e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f38:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007f48:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	689a      	ldr	r2, [r3, #8]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f022 0201 	bic.w	r2, r2, #1
 8007f58:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2220      	movs	r2, #32
 8007f5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2220      	movs	r2, #32
 8007f66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2220      	movs	r2, #32
 8007f6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2200      	movs	r2, #0
 8007f76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007f7a:	2303      	movs	r3, #3
 8007f7c:	e00f      	b.n	8007f9e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	69da      	ldr	r2, [r3, #28]
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	4013      	ands	r3, r2
 8007f88:	68ba      	ldr	r2, [r7, #8]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	bf0c      	ite	eq
 8007f8e:	2301      	moveq	r3, #1
 8007f90:	2300      	movne	r3, #0
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	461a      	mov	r2, r3
 8007f96:	79fb      	ldrb	r3, [r7, #7]
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d08d      	beq.n	8007eb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3710      	adds	r7, #16
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
	...

08007fa8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	60f8      	str	r0, [r7, #12]
 8007fb0:	60b9      	str	r1, [r7, #8]
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	68ba      	ldr	r2, [r7, #8]
 8007fba:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	88fa      	ldrh	r2, [r7, #6]
 8007fc0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2222      	movs	r2, #34	; 0x22
 8007fd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d02c      	beq.n	8008036 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fe0:	4a25      	ldr	r2, [pc, #148]	; (8008078 <UART_Start_Receive_DMA+0xd0>)
 8007fe2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fe8:	4a24      	ldr	r2, [pc, #144]	; (800807c <UART_Start_Receive_DMA+0xd4>)
 8007fea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ff0:	4a23      	ldr	r2, [pc, #140]	; (8008080 <UART_Start_Receive_DMA+0xd8>)
 8007ff2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	3324      	adds	r3, #36	; 0x24
 8008006:	4619      	mov	r1, r3
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800800c:	461a      	mov	r2, r3
 800800e:	88fb      	ldrh	r3, [r7, #6]
 8008010:	f7f9 fca8 	bl	8001964 <HAL_DMA_Start_IT>
 8008014:	4603      	mov	r3, r0
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00d      	beq.n	8008036 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2210      	movs	r2, #16
 800801e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2200      	movs	r2, #0
 8008026:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2220      	movs	r2, #32
 800802e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 8008032:	2301      	movs	r3, #1
 8008034:	e01c      	b.n	8008070 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2200      	movs	r2, #0
 800803a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800804c:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	689a      	ldr	r2, [r3, #8]
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f042 0201 	orr.w	r2, r2, #1
 800805c:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	689a      	ldr	r2, [r3, #8]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800806c:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800806e:	2300      	movs	r3, #0
}
 8008070:	4618      	mov	r0, r3
 8008072:	3710      	adds	r7, #16
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}
 8008078:	08008125 	.word	0x08008125
 800807c:	080081bb 	.word	0x080081bb
 8008080:	080081f3 	.word	0x080081f3

08008084 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	681a      	ldr	r2, [r3, #0]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800809a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	689a      	ldr	r2, [r3, #8]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80080aa:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2220      	movs	r2, #32
 80080b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80080b4:	bf00      	nop
 80080b6:	370c      	adds	r7, #12
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80080d6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	6899      	ldr	r1, [r3, #8]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	4b0f      	ldr	r3, [pc, #60]	; (8008120 <UART_EndRxTransfer+0x60>)
 80080e4:	400b      	ands	r3, r1
 80080e6:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d107      	bne.n	8008100 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f022 0210 	bic.w	r2, r2, #16
 80080fe:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2220      	movs	r2, #32
 8008104:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008114:	bf00      	nop
 8008116:	370c      	adds	r7, #12
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr
 8008120:	effffffe 	.word	0xeffffffe

08008124 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b084      	sub	sp, #16
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008130:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	69db      	ldr	r3, [r3, #28]
 8008136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800813a:	d02b      	beq.n	8008194 <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2200      	movs	r2, #0
 8008140:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008152:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	689a      	ldr	r2, [r3, #8]
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f022 0201 	bic.w	r2, r2, #1
 8008162:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	689a      	ldr	r2, [r3, #8]
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008172:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2220      	movs	r2, #32
 8008178:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008180:	2b01      	cmp	r3, #1
 8008182:	d107      	bne.n	8008194 <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f022 0210 	bic.w	r2, r2, #16
 8008192:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008198:	2b01      	cmp	r3, #1
 800819a:	d107      	bne.n	80081ac <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80081a2:	4619      	mov	r1, r3
 80081a4:	68f8      	ldr	r0, [r7, #12]
 80081a6:	f7ff f825 	bl	80071f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80081aa:	e002      	b.n	80081b2 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80081ac:	68f8      	ldr	r0, [r7, #12]
 80081ae:	f7f8 fb1d 	bl	80007ec <HAL_UART_RxCpltCallback>
}
 80081b2:	bf00      	nop
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b084      	sub	sp, #16
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081c6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d109      	bne.n	80081e4 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80081d6:	085b      	lsrs	r3, r3, #1
 80081d8:	b29b      	uxth	r3, r3
 80081da:	4619      	mov	r1, r3
 80081dc:	68f8      	ldr	r0, [r7, #12]
 80081de:	f7ff f809 	bl	80071f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80081e2:	e002      	b.n	80081ea <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80081e4:	68f8      	ldr	r0, [r7, #12]
 80081e6:	f7fe fff1 	bl	80071cc <HAL_UART_RxHalfCpltCallback>
}
 80081ea:	bf00      	nop
 80081ec:	3710      	adds	r7, #16
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}

080081f2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80081f2:	b580      	push	{r7, lr}
 80081f4:	b086      	sub	sp, #24
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081fe:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008206:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800820e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800821a:	2b80      	cmp	r3, #128	; 0x80
 800821c:	d109      	bne.n	8008232 <UART_DMAError+0x40>
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	2b21      	cmp	r3, #33	; 0x21
 8008222:	d106      	bne.n	8008232 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	2200      	movs	r2, #0
 8008228:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800822c:	6978      	ldr	r0, [r7, #20]
 800822e:	f7ff ff29 	bl	8008084 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800823c:	2b40      	cmp	r3, #64	; 0x40
 800823e:	d109      	bne.n	8008254 <UART_DMAError+0x62>
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2b22      	cmp	r3, #34	; 0x22
 8008244:	d106      	bne.n	8008254 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	2200      	movs	r2, #0
 800824a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800824e:	6978      	ldr	r0, [r7, #20]
 8008250:	f7ff ff36 	bl	80080c0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800825a:	f043 0210 	orr.w	r2, r3, #16
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008264:	6978      	ldr	r0, [r7, #20]
 8008266:	f7fe ffbb 	bl	80071e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800826a:	bf00      	nop
 800826c:	3718      	adds	r7, #24
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b084      	sub	sp, #16
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800827e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2200      	movs	r2, #0
 8008284:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2200      	movs	r2, #0
 800828c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008290:	68f8      	ldr	r0, [r7, #12]
 8008292:	f7fe ffa5 	bl	80071e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008296:	bf00      	nop
 8008298:	3710      	adds	r7, #16
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}

0800829e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800829e:	b580      	push	{r7, lr}
 80082a0:	b082      	sub	sp, #8
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082b4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2220      	movs	r2, #32
 80082ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2200      	movs	r2, #0
 80082c2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f7fe ff77 	bl	80071b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082ca:	bf00      	nop
 80082cc:	3708      	adds	r7, #8
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80082d2:	b480      	push	{r7}
 80082d4:	b083      	sub	sp, #12
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80082da:	bf00      	nop
 80082dc:	370c      	adds	r7, #12
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr

080082e6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80082e6:	b480      	push	{r7}
 80082e8:	b083      	sub	sp, #12
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80082ee:	bf00      	nop
 80082f0:	370c      	adds	r7, #12
 80082f2:	46bd      	mov	sp, r7
 80082f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f8:	4770      	bx	lr

080082fa <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80082fa:	b480      	push	{r7}
 80082fc:	b083      	sub	sp, #12
 80082fe:	af00      	add	r7, sp, #0
 8008300:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008302:	bf00      	nop
 8008304:	370c      	adds	r7, #12
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr

0800830e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800830e:	b480      	push	{r7}
 8008310:	b085      	sub	sp, #20
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800831c:	2b01      	cmp	r3, #1
 800831e:	d101      	bne.n	8008324 <HAL_UARTEx_DisableFifoMode+0x16>
 8008320:	2302      	movs	r3, #2
 8008322:	e027      	b.n	8008374 <HAL_UARTEx_DisableFifoMode+0x66>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2224      	movs	r2, #36	; 0x24
 8008330:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f022 0201 	bic.w	r2, r2, #1
 800834a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008352:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2200      	movs	r2, #0
 8008358:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	68fa      	ldr	r2, [r7, #12]
 8008360:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2220      	movs	r2, #32
 8008366:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008372:	2300      	movs	r3, #0
}
 8008374:	4618      	mov	r0, r3
 8008376:	3714      	adds	r7, #20
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b084      	sub	sp, #16
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008390:	2b01      	cmp	r3, #1
 8008392:	d101      	bne.n	8008398 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008394:	2302      	movs	r3, #2
 8008396:	e02d      	b.n	80083f4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2201      	movs	r2, #1
 800839c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2224      	movs	r2, #36	; 0x24
 80083a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f022 0201 	bic.w	r2, r2, #1
 80083be:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	683a      	ldr	r2, [r7, #0]
 80083d0:	430a      	orrs	r2, r1
 80083d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 f84f 	bl	8008478 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	68fa      	ldr	r2, [r7, #12]
 80083e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2220      	movs	r2, #32
 80083e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2200      	movs	r2, #0
 80083ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80083f2:	2300      	movs	r3, #0
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3710      	adds	r7, #16
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800840c:	2b01      	cmp	r3, #1
 800840e:	d101      	bne.n	8008414 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008410:	2302      	movs	r3, #2
 8008412:	e02d      	b.n	8008470 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2201      	movs	r2, #1
 8008418:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2224      	movs	r2, #36	; 0x24
 8008420:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f022 0201 	bic.w	r2, r2, #1
 800843a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	683a      	ldr	r2, [r7, #0]
 800844c:	430a      	orrs	r2, r1
 800844e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 f811 	bl	8008478 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	68fa      	ldr	r2, [r7, #12]
 800845c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2220      	movs	r2, #32
 8008462:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2200      	movs	r2, #0
 800846a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800846e:	2300      	movs	r3, #0
}
 8008470:	4618      	mov	r0, r3
 8008472:	3710      	adds	r7, #16
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008478:	b480      	push	{r7}
 800847a:	b085      	sub	sp, #20
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008484:	2b00      	cmp	r3, #0
 8008486:	d108      	bne.n	800849a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2201      	movs	r2, #1
 800848c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2201      	movs	r2, #1
 8008494:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008498:	e031      	b.n	80084fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800849a:	2310      	movs	r3, #16
 800849c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800849e:	2310      	movs	r3, #16
 80084a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	0e5b      	lsrs	r3, r3, #25
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	f003 0307 	and.w	r3, r3, #7
 80084b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	689b      	ldr	r3, [r3, #8]
 80084b8:	0f5b      	lsrs	r3, r3, #29
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	f003 0307 	and.w	r3, r3, #7
 80084c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084c2:	7bbb      	ldrb	r3, [r7, #14]
 80084c4:	7b3a      	ldrb	r2, [r7, #12]
 80084c6:	4911      	ldr	r1, [pc, #68]	; (800850c <UARTEx_SetNbDataToProcess+0x94>)
 80084c8:	5c8a      	ldrb	r2, [r1, r2]
 80084ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80084ce:	7b3a      	ldrb	r2, [r7, #12]
 80084d0:	490f      	ldr	r1, [pc, #60]	; (8008510 <UARTEx_SetNbDataToProcess+0x98>)
 80084d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80084d8:	b29a      	uxth	r2, r3
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084e0:	7bfb      	ldrb	r3, [r7, #15]
 80084e2:	7b7a      	ldrb	r2, [r7, #13]
 80084e4:	4909      	ldr	r1, [pc, #36]	; (800850c <UARTEx_SetNbDataToProcess+0x94>)
 80084e6:	5c8a      	ldrb	r2, [r1, r2]
 80084e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80084ec:	7b7a      	ldrb	r2, [r7, #13]
 80084ee:	4908      	ldr	r1, [pc, #32]	; (8008510 <UARTEx_SetNbDataToProcess+0x98>)
 80084f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80084f6:	b29a      	uxth	r2, r3
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80084fe:	bf00      	nop
 8008500:	3714      	adds	r7, #20
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr
 800850a:	bf00      	nop
 800850c:	08008f7c 	.word	0x08008f7c
 8008510:	08008f84 	.word	0x08008f84

08008514 <__errno>:
 8008514:	4b01      	ldr	r3, [pc, #4]	; (800851c <__errno+0x8>)
 8008516:	6818      	ldr	r0, [r3, #0]
 8008518:	4770      	bx	lr
 800851a:	bf00      	nop
 800851c:	24000010 	.word	0x24000010

08008520 <__libc_init_array>:
 8008520:	b570      	push	{r4, r5, r6, lr}
 8008522:	4d0d      	ldr	r5, [pc, #52]	; (8008558 <__libc_init_array+0x38>)
 8008524:	4c0d      	ldr	r4, [pc, #52]	; (800855c <__libc_init_array+0x3c>)
 8008526:	1b64      	subs	r4, r4, r5
 8008528:	10a4      	asrs	r4, r4, #2
 800852a:	2600      	movs	r6, #0
 800852c:	42a6      	cmp	r6, r4
 800852e:	d109      	bne.n	8008544 <__libc_init_array+0x24>
 8008530:	4d0b      	ldr	r5, [pc, #44]	; (8008560 <__libc_init_array+0x40>)
 8008532:	4c0c      	ldr	r4, [pc, #48]	; (8008564 <__libc_init_array+0x44>)
 8008534:	f000 fce6 	bl	8008f04 <_init>
 8008538:	1b64      	subs	r4, r4, r5
 800853a:	10a4      	asrs	r4, r4, #2
 800853c:	2600      	movs	r6, #0
 800853e:	42a6      	cmp	r6, r4
 8008540:	d105      	bne.n	800854e <__libc_init_array+0x2e>
 8008542:	bd70      	pop	{r4, r5, r6, pc}
 8008544:	f855 3b04 	ldr.w	r3, [r5], #4
 8008548:	4798      	blx	r3
 800854a:	3601      	adds	r6, #1
 800854c:	e7ee      	b.n	800852c <__libc_init_array+0xc>
 800854e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008552:	4798      	blx	r3
 8008554:	3601      	adds	r6, #1
 8008556:	e7f2      	b.n	800853e <__libc_init_array+0x1e>
 8008558:	08008ff8 	.word	0x08008ff8
 800855c:	08008ff8 	.word	0x08008ff8
 8008560:	08008ff8 	.word	0x08008ff8
 8008564:	08008ffc 	.word	0x08008ffc

08008568 <memset>:
 8008568:	4402      	add	r2, r0
 800856a:	4603      	mov	r3, r0
 800856c:	4293      	cmp	r3, r2
 800856e:	d100      	bne.n	8008572 <memset+0xa>
 8008570:	4770      	bx	lr
 8008572:	f803 1b01 	strb.w	r1, [r3], #1
 8008576:	e7f9      	b.n	800856c <memset+0x4>

08008578 <_puts_r>:
 8008578:	b570      	push	{r4, r5, r6, lr}
 800857a:	460e      	mov	r6, r1
 800857c:	4605      	mov	r5, r0
 800857e:	b118      	cbz	r0, 8008588 <_puts_r+0x10>
 8008580:	6983      	ldr	r3, [r0, #24]
 8008582:	b90b      	cbnz	r3, 8008588 <_puts_r+0x10>
 8008584:	f000 fa48 	bl	8008a18 <__sinit>
 8008588:	69ab      	ldr	r3, [r5, #24]
 800858a:	68ac      	ldr	r4, [r5, #8]
 800858c:	b913      	cbnz	r3, 8008594 <_puts_r+0x1c>
 800858e:	4628      	mov	r0, r5
 8008590:	f000 fa42 	bl	8008a18 <__sinit>
 8008594:	4b2c      	ldr	r3, [pc, #176]	; (8008648 <_puts_r+0xd0>)
 8008596:	429c      	cmp	r4, r3
 8008598:	d120      	bne.n	80085dc <_puts_r+0x64>
 800859a:	686c      	ldr	r4, [r5, #4]
 800859c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800859e:	07db      	lsls	r3, r3, #31
 80085a0:	d405      	bmi.n	80085ae <_puts_r+0x36>
 80085a2:	89a3      	ldrh	r3, [r4, #12]
 80085a4:	0598      	lsls	r0, r3, #22
 80085a6:	d402      	bmi.n	80085ae <_puts_r+0x36>
 80085a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085aa:	f000 fad3 	bl	8008b54 <__retarget_lock_acquire_recursive>
 80085ae:	89a3      	ldrh	r3, [r4, #12]
 80085b0:	0719      	lsls	r1, r3, #28
 80085b2:	d51d      	bpl.n	80085f0 <_puts_r+0x78>
 80085b4:	6923      	ldr	r3, [r4, #16]
 80085b6:	b1db      	cbz	r3, 80085f0 <_puts_r+0x78>
 80085b8:	3e01      	subs	r6, #1
 80085ba:	68a3      	ldr	r3, [r4, #8]
 80085bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80085c0:	3b01      	subs	r3, #1
 80085c2:	60a3      	str	r3, [r4, #8]
 80085c4:	bb39      	cbnz	r1, 8008616 <_puts_r+0x9e>
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	da38      	bge.n	800863c <_puts_r+0xc4>
 80085ca:	4622      	mov	r2, r4
 80085cc:	210a      	movs	r1, #10
 80085ce:	4628      	mov	r0, r5
 80085d0:	f000 f848 	bl	8008664 <__swbuf_r>
 80085d4:	3001      	adds	r0, #1
 80085d6:	d011      	beq.n	80085fc <_puts_r+0x84>
 80085d8:	250a      	movs	r5, #10
 80085da:	e011      	b.n	8008600 <_puts_r+0x88>
 80085dc:	4b1b      	ldr	r3, [pc, #108]	; (800864c <_puts_r+0xd4>)
 80085de:	429c      	cmp	r4, r3
 80085e0:	d101      	bne.n	80085e6 <_puts_r+0x6e>
 80085e2:	68ac      	ldr	r4, [r5, #8]
 80085e4:	e7da      	b.n	800859c <_puts_r+0x24>
 80085e6:	4b1a      	ldr	r3, [pc, #104]	; (8008650 <_puts_r+0xd8>)
 80085e8:	429c      	cmp	r4, r3
 80085ea:	bf08      	it	eq
 80085ec:	68ec      	ldreq	r4, [r5, #12]
 80085ee:	e7d5      	b.n	800859c <_puts_r+0x24>
 80085f0:	4621      	mov	r1, r4
 80085f2:	4628      	mov	r0, r5
 80085f4:	f000 f888 	bl	8008708 <__swsetup_r>
 80085f8:	2800      	cmp	r0, #0
 80085fa:	d0dd      	beq.n	80085b8 <_puts_r+0x40>
 80085fc:	f04f 35ff 	mov.w	r5, #4294967295
 8008600:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008602:	07da      	lsls	r2, r3, #31
 8008604:	d405      	bmi.n	8008612 <_puts_r+0x9a>
 8008606:	89a3      	ldrh	r3, [r4, #12]
 8008608:	059b      	lsls	r3, r3, #22
 800860a:	d402      	bmi.n	8008612 <_puts_r+0x9a>
 800860c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800860e:	f000 faa2 	bl	8008b56 <__retarget_lock_release_recursive>
 8008612:	4628      	mov	r0, r5
 8008614:	bd70      	pop	{r4, r5, r6, pc}
 8008616:	2b00      	cmp	r3, #0
 8008618:	da04      	bge.n	8008624 <_puts_r+0xac>
 800861a:	69a2      	ldr	r2, [r4, #24]
 800861c:	429a      	cmp	r2, r3
 800861e:	dc06      	bgt.n	800862e <_puts_r+0xb6>
 8008620:	290a      	cmp	r1, #10
 8008622:	d004      	beq.n	800862e <_puts_r+0xb6>
 8008624:	6823      	ldr	r3, [r4, #0]
 8008626:	1c5a      	adds	r2, r3, #1
 8008628:	6022      	str	r2, [r4, #0]
 800862a:	7019      	strb	r1, [r3, #0]
 800862c:	e7c5      	b.n	80085ba <_puts_r+0x42>
 800862e:	4622      	mov	r2, r4
 8008630:	4628      	mov	r0, r5
 8008632:	f000 f817 	bl	8008664 <__swbuf_r>
 8008636:	3001      	adds	r0, #1
 8008638:	d1bf      	bne.n	80085ba <_puts_r+0x42>
 800863a:	e7df      	b.n	80085fc <_puts_r+0x84>
 800863c:	6823      	ldr	r3, [r4, #0]
 800863e:	250a      	movs	r5, #10
 8008640:	1c5a      	adds	r2, r3, #1
 8008642:	6022      	str	r2, [r4, #0]
 8008644:	701d      	strb	r5, [r3, #0]
 8008646:	e7db      	b.n	8008600 <_puts_r+0x88>
 8008648:	08008fb0 	.word	0x08008fb0
 800864c:	08008fd0 	.word	0x08008fd0
 8008650:	08008f90 	.word	0x08008f90

08008654 <puts>:
 8008654:	4b02      	ldr	r3, [pc, #8]	; (8008660 <puts+0xc>)
 8008656:	4601      	mov	r1, r0
 8008658:	6818      	ldr	r0, [r3, #0]
 800865a:	f7ff bf8d 	b.w	8008578 <_puts_r>
 800865e:	bf00      	nop
 8008660:	24000010 	.word	0x24000010

08008664 <__swbuf_r>:
 8008664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008666:	460e      	mov	r6, r1
 8008668:	4614      	mov	r4, r2
 800866a:	4605      	mov	r5, r0
 800866c:	b118      	cbz	r0, 8008676 <__swbuf_r+0x12>
 800866e:	6983      	ldr	r3, [r0, #24]
 8008670:	b90b      	cbnz	r3, 8008676 <__swbuf_r+0x12>
 8008672:	f000 f9d1 	bl	8008a18 <__sinit>
 8008676:	4b21      	ldr	r3, [pc, #132]	; (80086fc <__swbuf_r+0x98>)
 8008678:	429c      	cmp	r4, r3
 800867a:	d12b      	bne.n	80086d4 <__swbuf_r+0x70>
 800867c:	686c      	ldr	r4, [r5, #4]
 800867e:	69a3      	ldr	r3, [r4, #24]
 8008680:	60a3      	str	r3, [r4, #8]
 8008682:	89a3      	ldrh	r3, [r4, #12]
 8008684:	071a      	lsls	r2, r3, #28
 8008686:	d52f      	bpl.n	80086e8 <__swbuf_r+0x84>
 8008688:	6923      	ldr	r3, [r4, #16]
 800868a:	b36b      	cbz	r3, 80086e8 <__swbuf_r+0x84>
 800868c:	6923      	ldr	r3, [r4, #16]
 800868e:	6820      	ldr	r0, [r4, #0]
 8008690:	1ac0      	subs	r0, r0, r3
 8008692:	6963      	ldr	r3, [r4, #20]
 8008694:	b2f6      	uxtb	r6, r6
 8008696:	4283      	cmp	r3, r0
 8008698:	4637      	mov	r7, r6
 800869a:	dc04      	bgt.n	80086a6 <__swbuf_r+0x42>
 800869c:	4621      	mov	r1, r4
 800869e:	4628      	mov	r0, r5
 80086a0:	f000 f926 	bl	80088f0 <_fflush_r>
 80086a4:	bb30      	cbnz	r0, 80086f4 <__swbuf_r+0x90>
 80086a6:	68a3      	ldr	r3, [r4, #8]
 80086a8:	3b01      	subs	r3, #1
 80086aa:	60a3      	str	r3, [r4, #8]
 80086ac:	6823      	ldr	r3, [r4, #0]
 80086ae:	1c5a      	adds	r2, r3, #1
 80086b0:	6022      	str	r2, [r4, #0]
 80086b2:	701e      	strb	r6, [r3, #0]
 80086b4:	6963      	ldr	r3, [r4, #20]
 80086b6:	3001      	adds	r0, #1
 80086b8:	4283      	cmp	r3, r0
 80086ba:	d004      	beq.n	80086c6 <__swbuf_r+0x62>
 80086bc:	89a3      	ldrh	r3, [r4, #12]
 80086be:	07db      	lsls	r3, r3, #31
 80086c0:	d506      	bpl.n	80086d0 <__swbuf_r+0x6c>
 80086c2:	2e0a      	cmp	r6, #10
 80086c4:	d104      	bne.n	80086d0 <__swbuf_r+0x6c>
 80086c6:	4621      	mov	r1, r4
 80086c8:	4628      	mov	r0, r5
 80086ca:	f000 f911 	bl	80088f0 <_fflush_r>
 80086ce:	b988      	cbnz	r0, 80086f4 <__swbuf_r+0x90>
 80086d0:	4638      	mov	r0, r7
 80086d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086d4:	4b0a      	ldr	r3, [pc, #40]	; (8008700 <__swbuf_r+0x9c>)
 80086d6:	429c      	cmp	r4, r3
 80086d8:	d101      	bne.n	80086de <__swbuf_r+0x7a>
 80086da:	68ac      	ldr	r4, [r5, #8]
 80086dc:	e7cf      	b.n	800867e <__swbuf_r+0x1a>
 80086de:	4b09      	ldr	r3, [pc, #36]	; (8008704 <__swbuf_r+0xa0>)
 80086e0:	429c      	cmp	r4, r3
 80086e2:	bf08      	it	eq
 80086e4:	68ec      	ldreq	r4, [r5, #12]
 80086e6:	e7ca      	b.n	800867e <__swbuf_r+0x1a>
 80086e8:	4621      	mov	r1, r4
 80086ea:	4628      	mov	r0, r5
 80086ec:	f000 f80c 	bl	8008708 <__swsetup_r>
 80086f0:	2800      	cmp	r0, #0
 80086f2:	d0cb      	beq.n	800868c <__swbuf_r+0x28>
 80086f4:	f04f 37ff 	mov.w	r7, #4294967295
 80086f8:	e7ea      	b.n	80086d0 <__swbuf_r+0x6c>
 80086fa:	bf00      	nop
 80086fc:	08008fb0 	.word	0x08008fb0
 8008700:	08008fd0 	.word	0x08008fd0
 8008704:	08008f90 	.word	0x08008f90

08008708 <__swsetup_r>:
 8008708:	4b32      	ldr	r3, [pc, #200]	; (80087d4 <__swsetup_r+0xcc>)
 800870a:	b570      	push	{r4, r5, r6, lr}
 800870c:	681d      	ldr	r5, [r3, #0]
 800870e:	4606      	mov	r6, r0
 8008710:	460c      	mov	r4, r1
 8008712:	b125      	cbz	r5, 800871e <__swsetup_r+0x16>
 8008714:	69ab      	ldr	r3, [r5, #24]
 8008716:	b913      	cbnz	r3, 800871e <__swsetup_r+0x16>
 8008718:	4628      	mov	r0, r5
 800871a:	f000 f97d 	bl	8008a18 <__sinit>
 800871e:	4b2e      	ldr	r3, [pc, #184]	; (80087d8 <__swsetup_r+0xd0>)
 8008720:	429c      	cmp	r4, r3
 8008722:	d10f      	bne.n	8008744 <__swsetup_r+0x3c>
 8008724:	686c      	ldr	r4, [r5, #4]
 8008726:	89a3      	ldrh	r3, [r4, #12]
 8008728:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800872c:	0719      	lsls	r1, r3, #28
 800872e:	d42c      	bmi.n	800878a <__swsetup_r+0x82>
 8008730:	06dd      	lsls	r5, r3, #27
 8008732:	d411      	bmi.n	8008758 <__swsetup_r+0x50>
 8008734:	2309      	movs	r3, #9
 8008736:	6033      	str	r3, [r6, #0]
 8008738:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800873c:	81a3      	strh	r3, [r4, #12]
 800873e:	f04f 30ff 	mov.w	r0, #4294967295
 8008742:	e03e      	b.n	80087c2 <__swsetup_r+0xba>
 8008744:	4b25      	ldr	r3, [pc, #148]	; (80087dc <__swsetup_r+0xd4>)
 8008746:	429c      	cmp	r4, r3
 8008748:	d101      	bne.n	800874e <__swsetup_r+0x46>
 800874a:	68ac      	ldr	r4, [r5, #8]
 800874c:	e7eb      	b.n	8008726 <__swsetup_r+0x1e>
 800874e:	4b24      	ldr	r3, [pc, #144]	; (80087e0 <__swsetup_r+0xd8>)
 8008750:	429c      	cmp	r4, r3
 8008752:	bf08      	it	eq
 8008754:	68ec      	ldreq	r4, [r5, #12]
 8008756:	e7e6      	b.n	8008726 <__swsetup_r+0x1e>
 8008758:	0758      	lsls	r0, r3, #29
 800875a:	d512      	bpl.n	8008782 <__swsetup_r+0x7a>
 800875c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800875e:	b141      	cbz	r1, 8008772 <__swsetup_r+0x6a>
 8008760:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008764:	4299      	cmp	r1, r3
 8008766:	d002      	beq.n	800876e <__swsetup_r+0x66>
 8008768:	4630      	mov	r0, r6
 800876a:	f000 fa59 	bl	8008c20 <_free_r>
 800876e:	2300      	movs	r3, #0
 8008770:	6363      	str	r3, [r4, #52]	; 0x34
 8008772:	89a3      	ldrh	r3, [r4, #12]
 8008774:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008778:	81a3      	strh	r3, [r4, #12]
 800877a:	2300      	movs	r3, #0
 800877c:	6063      	str	r3, [r4, #4]
 800877e:	6923      	ldr	r3, [r4, #16]
 8008780:	6023      	str	r3, [r4, #0]
 8008782:	89a3      	ldrh	r3, [r4, #12]
 8008784:	f043 0308 	orr.w	r3, r3, #8
 8008788:	81a3      	strh	r3, [r4, #12]
 800878a:	6923      	ldr	r3, [r4, #16]
 800878c:	b94b      	cbnz	r3, 80087a2 <__swsetup_r+0x9a>
 800878e:	89a3      	ldrh	r3, [r4, #12]
 8008790:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008794:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008798:	d003      	beq.n	80087a2 <__swsetup_r+0x9a>
 800879a:	4621      	mov	r1, r4
 800879c:	4630      	mov	r0, r6
 800879e:	f000 f9ff 	bl	8008ba0 <__smakebuf_r>
 80087a2:	89a0      	ldrh	r0, [r4, #12]
 80087a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087a8:	f010 0301 	ands.w	r3, r0, #1
 80087ac:	d00a      	beq.n	80087c4 <__swsetup_r+0xbc>
 80087ae:	2300      	movs	r3, #0
 80087b0:	60a3      	str	r3, [r4, #8]
 80087b2:	6963      	ldr	r3, [r4, #20]
 80087b4:	425b      	negs	r3, r3
 80087b6:	61a3      	str	r3, [r4, #24]
 80087b8:	6923      	ldr	r3, [r4, #16]
 80087ba:	b943      	cbnz	r3, 80087ce <__swsetup_r+0xc6>
 80087bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80087c0:	d1ba      	bne.n	8008738 <__swsetup_r+0x30>
 80087c2:	bd70      	pop	{r4, r5, r6, pc}
 80087c4:	0781      	lsls	r1, r0, #30
 80087c6:	bf58      	it	pl
 80087c8:	6963      	ldrpl	r3, [r4, #20]
 80087ca:	60a3      	str	r3, [r4, #8]
 80087cc:	e7f4      	b.n	80087b8 <__swsetup_r+0xb0>
 80087ce:	2000      	movs	r0, #0
 80087d0:	e7f7      	b.n	80087c2 <__swsetup_r+0xba>
 80087d2:	bf00      	nop
 80087d4:	24000010 	.word	0x24000010
 80087d8:	08008fb0 	.word	0x08008fb0
 80087dc:	08008fd0 	.word	0x08008fd0
 80087e0:	08008f90 	.word	0x08008f90

080087e4 <__sflush_r>:
 80087e4:	898a      	ldrh	r2, [r1, #12]
 80087e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087ea:	4605      	mov	r5, r0
 80087ec:	0710      	lsls	r0, r2, #28
 80087ee:	460c      	mov	r4, r1
 80087f0:	d458      	bmi.n	80088a4 <__sflush_r+0xc0>
 80087f2:	684b      	ldr	r3, [r1, #4]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	dc05      	bgt.n	8008804 <__sflush_r+0x20>
 80087f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	dc02      	bgt.n	8008804 <__sflush_r+0x20>
 80087fe:	2000      	movs	r0, #0
 8008800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008804:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008806:	2e00      	cmp	r6, #0
 8008808:	d0f9      	beq.n	80087fe <__sflush_r+0x1a>
 800880a:	2300      	movs	r3, #0
 800880c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008810:	682f      	ldr	r7, [r5, #0]
 8008812:	602b      	str	r3, [r5, #0]
 8008814:	d032      	beq.n	800887c <__sflush_r+0x98>
 8008816:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008818:	89a3      	ldrh	r3, [r4, #12]
 800881a:	075a      	lsls	r2, r3, #29
 800881c:	d505      	bpl.n	800882a <__sflush_r+0x46>
 800881e:	6863      	ldr	r3, [r4, #4]
 8008820:	1ac0      	subs	r0, r0, r3
 8008822:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008824:	b10b      	cbz	r3, 800882a <__sflush_r+0x46>
 8008826:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008828:	1ac0      	subs	r0, r0, r3
 800882a:	2300      	movs	r3, #0
 800882c:	4602      	mov	r2, r0
 800882e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008830:	6a21      	ldr	r1, [r4, #32]
 8008832:	4628      	mov	r0, r5
 8008834:	47b0      	blx	r6
 8008836:	1c43      	adds	r3, r0, #1
 8008838:	89a3      	ldrh	r3, [r4, #12]
 800883a:	d106      	bne.n	800884a <__sflush_r+0x66>
 800883c:	6829      	ldr	r1, [r5, #0]
 800883e:	291d      	cmp	r1, #29
 8008840:	d82c      	bhi.n	800889c <__sflush_r+0xb8>
 8008842:	4a2a      	ldr	r2, [pc, #168]	; (80088ec <__sflush_r+0x108>)
 8008844:	40ca      	lsrs	r2, r1
 8008846:	07d6      	lsls	r6, r2, #31
 8008848:	d528      	bpl.n	800889c <__sflush_r+0xb8>
 800884a:	2200      	movs	r2, #0
 800884c:	6062      	str	r2, [r4, #4]
 800884e:	04d9      	lsls	r1, r3, #19
 8008850:	6922      	ldr	r2, [r4, #16]
 8008852:	6022      	str	r2, [r4, #0]
 8008854:	d504      	bpl.n	8008860 <__sflush_r+0x7c>
 8008856:	1c42      	adds	r2, r0, #1
 8008858:	d101      	bne.n	800885e <__sflush_r+0x7a>
 800885a:	682b      	ldr	r3, [r5, #0]
 800885c:	b903      	cbnz	r3, 8008860 <__sflush_r+0x7c>
 800885e:	6560      	str	r0, [r4, #84]	; 0x54
 8008860:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008862:	602f      	str	r7, [r5, #0]
 8008864:	2900      	cmp	r1, #0
 8008866:	d0ca      	beq.n	80087fe <__sflush_r+0x1a>
 8008868:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800886c:	4299      	cmp	r1, r3
 800886e:	d002      	beq.n	8008876 <__sflush_r+0x92>
 8008870:	4628      	mov	r0, r5
 8008872:	f000 f9d5 	bl	8008c20 <_free_r>
 8008876:	2000      	movs	r0, #0
 8008878:	6360      	str	r0, [r4, #52]	; 0x34
 800887a:	e7c1      	b.n	8008800 <__sflush_r+0x1c>
 800887c:	6a21      	ldr	r1, [r4, #32]
 800887e:	2301      	movs	r3, #1
 8008880:	4628      	mov	r0, r5
 8008882:	47b0      	blx	r6
 8008884:	1c41      	adds	r1, r0, #1
 8008886:	d1c7      	bne.n	8008818 <__sflush_r+0x34>
 8008888:	682b      	ldr	r3, [r5, #0]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d0c4      	beq.n	8008818 <__sflush_r+0x34>
 800888e:	2b1d      	cmp	r3, #29
 8008890:	d001      	beq.n	8008896 <__sflush_r+0xb2>
 8008892:	2b16      	cmp	r3, #22
 8008894:	d101      	bne.n	800889a <__sflush_r+0xb6>
 8008896:	602f      	str	r7, [r5, #0]
 8008898:	e7b1      	b.n	80087fe <__sflush_r+0x1a>
 800889a:	89a3      	ldrh	r3, [r4, #12]
 800889c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088a0:	81a3      	strh	r3, [r4, #12]
 80088a2:	e7ad      	b.n	8008800 <__sflush_r+0x1c>
 80088a4:	690f      	ldr	r7, [r1, #16]
 80088a6:	2f00      	cmp	r7, #0
 80088a8:	d0a9      	beq.n	80087fe <__sflush_r+0x1a>
 80088aa:	0793      	lsls	r3, r2, #30
 80088ac:	680e      	ldr	r6, [r1, #0]
 80088ae:	bf08      	it	eq
 80088b0:	694b      	ldreq	r3, [r1, #20]
 80088b2:	600f      	str	r7, [r1, #0]
 80088b4:	bf18      	it	ne
 80088b6:	2300      	movne	r3, #0
 80088b8:	eba6 0807 	sub.w	r8, r6, r7
 80088bc:	608b      	str	r3, [r1, #8]
 80088be:	f1b8 0f00 	cmp.w	r8, #0
 80088c2:	dd9c      	ble.n	80087fe <__sflush_r+0x1a>
 80088c4:	6a21      	ldr	r1, [r4, #32]
 80088c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80088c8:	4643      	mov	r3, r8
 80088ca:	463a      	mov	r2, r7
 80088cc:	4628      	mov	r0, r5
 80088ce:	47b0      	blx	r6
 80088d0:	2800      	cmp	r0, #0
 80088d2:	dc06      	bgt.n	80088e2 <__sflush_r+0xfe>
 80088d4:	89a3      	ldrh	r3, [r4, #12]
 80088d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088da:	81a3      	strh	r3, [r4, #12]
 80088dc:	f04f 30ff 	mov.w	r0, #4294967295
 80088e0:	e78e      	b.n	8008800 <__sflush_r+0x1c>
 80088e2:	4407      	add	r7, r0
 80088e4:	eba8 0800 	sub.w	r8, r8, r0
 80088e8:	e7e9      	b.n	80088be <__sflush_r+0xda>
 80088ea:	bf00      	nop
 80088ec:	20400001 	.word	0x20400001

080088f0 <_fflush_r>:
 80088f0:	b538      	push	{r3, r4, r5, lr}
 80088f2:	690b      	ldr	r3, [r1, #16]
 80088f4:	4605      	mov	r5, r0
 80088f6:	460c      	mov	r4, r1
 80088f8:	b913      	cbnz	r3, 8008900 <_fflush_r+0x10>
 80088fa:	2500      	movs	r5, #0
 80088fc:	4628      	mov	r0, r5
 80088fe:	bd38      	pop	{r3, r4, r5, pc}
 8008900:	b118      	cbz	r0, 800890a <_fflush_r+0x1a>
 8008902:	6983      	ldr	r3, [r0, #24]
 8008904:	b90b      	cbnz	r3, 800890a <_fflush_r+0x1a>
 8008906:	f000 f887 	bl	8008a18 <__sinit>
 800890a:	4b14      	ldr	r3, [pc, #80]	; (800895c <_fflush_r+0x6c>)
 800890c:	429c      	cmp	r4, r3
 800890e:	d11b      	bne.n	8008948 <_fflush_r+0x58>
 8008910:	686c      	ldr	r4, [r5, #4]
 8008912:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d0ef      	beq.n	80088fa <_fflush_r+0xa>
 800891a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800891c:	07d0      	lsls	r0, r2, #31
 800891e:	d404      	bmi.n	800892a <_fflush_r+0x3a>
 8008920:	0599      	lsls	r1, r3, #22
 8008922:	d402      	bmi.n	800892a <_fflush_r+0x3a>
 8008924:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008926:	f000 f915 	bl	8008b54 <__retarget_lock_acquire_recursive>
 800892a:	4628      	mov	r0, r5
 800892c:	4621      	mov	r1, r4
 800892e:	f7ff ff59 	bl	80087e4 <__sflush_r>
 8008932:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008934:	07da      	lsls	r2, r3, #31
 8008936:	4605      	mov	r5, r0
 8008938:	d4e0      	bmi.n	80088fc <_fflush_r+0xc>
 800893a:	89a3      	ldrh	r3, [r4, #12]
 800893c:	059b      	lsls	r3, r3, #22
 800893e:	d4dd      	bmi.n	80088fc <_fflush_r+0xc>
 8008940:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008942:	f000 f908 	bl	8008b56 <__retarget_lock_release_recursive>
 8008946:	e7d9      	b.n	80088fc <_fflush_r+0xc>
 8008948:	4b05      	ldr	r3, [pc, #20]	; (8008960 <_fflush_r+0x70>)
 800894a:	429c      	cmp	r4, r3
 800894c:	d101      	bne.n	8008952 <_fflush_r+0x62>
 800894e:	68ac      	ldr	r4, [r5, #8]
 8008950:	e7df      	b.n	8008912 <_fflush_r+0x22>
 8008952:	4b04      	ldr	r3, [pc, #16]	; (8008964 <_fflush_r+0x74>)
 8008954:	429c      	cmp	r4, r3
 8008956:	bf08      	it	eq
 8008958:	68ec      	ldreq	r4, [r5, #12]
 800895a:	e7da      	b.n	8008912 <_fflush_r+0x22>
 800895c:	08008fb0 	.word	0x08008fb0
 8008960:	08008fd0 	.word	0x08008fd0
 8008964:	08008f90 	.word	0x08008f90

08008968 <std>:
 8008968:	2300      	movs	r3, #0
 800896a:	b510      	push	{r4, lr}
 800896c:	4604      	mov	r4, r0
 800896e:	e9c0 3300 	strd	r3, r3, [r0]
 8008972:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008976:	6083      	str	r3, [r0, #8]
 8008978:	8181      	strh	r1, [r0, #12]
 800897a:	6643      	str	r3, [r0, #100]	; 0x64
 800897c:	81c2      	strh	r2, [r0, #14]
 800897e:	6183      	str	r3, [r0, #24]
 8008980:	4619      	mov	r1, r3
 8008982:	2208      	movs	r2, #8
 8008984:	305c      	adds	r0, #92	; 0x5c
 8008986:	f7ff fdef 	bl	8008568 <memset>
 800898a:	4b05      	ldr	r3, [pc, #20]	; (80089a0 <std+0x38>)
 800898c:	6263      	str	r3, [r4, #36]	; 0x24
 800898e:	4b05      	ldr	r3, [pc, #20]	; (80089a4 <std+0x3c>)
 8008990:	62a3      	str	r3, [r4, #40]	; 0x28
 8008992:	4b05      	ldr	r3, [pc, #20]	; (80089a8 <std+0x40>)
 8008994:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008996:	4b05      	ldr	r3, [pc, #20]	; (80089ac <std+0x44>)
 8008998:	6224      	str	r4, [r4, #32]
 800899a:	6323      	str	r3, [r4, #48]	; 0x30
 800899c:	bd10      	pop	{r4, pc}
 800899e:	bf00      	nop
 80089a0:	08008d95 	.word	0x08008d95
 80089a4:	08008db7 	.word	0x08008db7
 80089a8:	08008def 	.word	0x08008def
 80089ac:	08008e13 	.word	0x08008e13

080089b0 <_cleanup_r>:
 80089b0:	4901      	ldr	r1, [pc, #4]	; (80089b8 <_cleanup_r+0x8>)
 80089b2:	f000 b8af 	b.w	8008b14 <_fwalk_reent>
 80089b6:	bf00      	nop
 80089b8:	080088f1 	.word	0x080088f1

080089bc <__sfmoreglue>:
 80089bc:	b570      	push	{r4, r5, r6, lr}
 80089be:	1e4a      	subs	r2, r1, #1
 80089c0:	2568      	movs	r5, #104	; 0x68
 80089c2:	4355      	muls	r5, r2
 80089c4:	460e      	mov	r6, r1
 80089c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80089ca:	f000 f979 	bl	8008cc0 <_malloc_r>
 80089ce:	4604      	mov	r4, r0
 80089d0:	b140      	cbz	r0, 80089e4 <__sfmoreglue+0x28>
 80089d2:	2100      	movs	r1, #0
 80089d4:	e9c0 1600 	strd	r1, r6, [r0]
 80089d8:	300c      	adds	r0, #12
 80089da:	60a0      	str	r0, [r4, #8]
 80089dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80089e0:	f7ff fdc2 	bl	8008568 <memset>
 80089e4:	4620      	mov	r0, r4
 80089e6:	bd70      	pop	{r4, r5, r6, pc}

080089e8 <__sfp_lock_acquire>:
 80089e8:	4801      	ldr	r0, [pc, #4]	; (80089f0 <__sfp_lock_acquire+0x8>)
 80089ea:	f000 b8b3 	b.w	8008b54 <__retarget_lock_acquire_recursive>
 80089ee:	bf00      	nop
 80089f0:	2400025c 	.word	0x2400025c

080089f4 <__sfp_lock_release>:
 80089f4:	4801      	ldr	r0, [pc, #4]	; (80089fc <__sfp_lock_release+0x8>)
 80089f6:	f000 b8ae 	b.w	8008b56 <__retarget_lock_release_recursive>
 80089fa:	bf00      	nop
 80089fc:	2400025c 	.word	0x2400025c

08008a00 <__sinit_lock_acquire>:
 8008a00:	4801      	ldr	r0, [pc, #4]	; (8008a08 <__sinit_lock_acquire+0x8>)
 8008a02:	f000 b8a7 	b.w	8008b54 <__retarget_lock_acquire_recursive>
 8008a06:	bf00      	nop
 8008a08:	24000257 	.word	0x24000257

08008a0c <__sinit_lock_release>:
 8008a0c:	4801      	ldr	r0, [pc, #4]	; (8008a14 <__sinit_lock_release+0x8>)
 8008a0e:	f000 b8a2 	b.w	8008b56 <__retarget_lock_release_recursive>
 8008a12:	bf00      	nop
 8008a14:	24000257 	.word	0x24000257

08008a18 <__sinit>:
 8008a18:	b510      	push	{r4, lr}
 8008a1a:	4604      	mov	r4, r0
 8008a1c:	f7ff fff0 	bl	8008a00 <__sinit_lock_acquire>
 8008a20:	69a3      	ldr	r3, [r4, #24]
 8008a22:	b11b      	cbz	r3, 8008a2c <__sinit+0x14>
 8008a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a28:	f7ff bff0 	b.w	8008a0c <__sinit_lock_release>
 8008a2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008a30:	6523      	str	r3, [r4, #80]	; 0x50
 8008a32:	4b13      	ldr	r3, [pc, #76]	; (8008a80 <__sinit+0x68>)
 8008a34:	4a13      	ldr	r2, [pc, #76]	; (8008a84 <__sinit+0x6c>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	62a2      	str	r2, [r4, #40]	; 0x28
 8008a3a:	42a3      	cmp	r3, r4
 8008a3c:	bf04      	itt	eq
 8008a3e:	2301      	moveq	r3, #1
 8008a40:	61a3      	streq	r3, [r4, #24]
 8008a42:	4620      	mov	r0, r4
 8008a44:	f000 f820 	bl	8008a88 <__sfp>
 8008a48:	6060      	str	r0, [r4, #4]
 8008a4a:	4620      	mov	r0, r4
 8008a4c:	f000 f81c 	bl	8008a88 <__sfp>
 8008a50:	60a0      	str	r0, [r4, #8]
 8008a52:	4620      	mov	r0, r4
 8008a54:	f000 f818 	bl	8008a88 <__sfp>
 8008a58:	2200      	movs	r2, #0
 8008a5a:	60e0      	str	r0, [r4, #12]
 8008a5c:	2104      	movs	r1, #4
 8008a5e:	6860      	ldr	r0, [r4, #4]
 8008a60:	f7ff ff82 	bl	8008968 <std>
 8008a64:	68a0      	ldr	r0, [r4, #8]
 8008a66:	2201      	movs	r2, #1
 8008a68:	2109      	movs	r1, #9
 8008a6a:	f7ff ff7d 	bl	8008968 <std>
 8008a6e:	68e0      	ldr	r0, [r4, #12]
 8008a70:	2202      	movs	r2, #2
 8008a72:	2112      	movs	r1, #18
 8008a74:	f7ff ff78 	bl	8008968 <std>
 8008a78:	2301      	movs	r3, #1
 8008a7a:	61a3      	str	r3, [r4, #24]
 8008a7c:	e7d2      	b.n	8008a24 <__sinit+0xc>
 8008a7e:	bf00      	nop
 8008a80:	08008f8c 	.word	0x08008f8c
 8008a84:	080089b1 	.word	0x080089b1

08008a88 <__sfp>:
 8008a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a8a:	4607      	mov	r7, r0
 8008a8c:	f7ff ffac 	bl	80089e8 <__sfp_lock_acquire>
 8008a90:	4b1e      	ldr	r3, [pc, #120]	; (8008b0c <__sfp+0x84>)
 8008a92:	681e      	ldr	r6, [r3, #0]
 8008a94:	69b3      	ldr	r3, [r6, #24]
 8008a96:	b913      	cbnz	r3, 8008a9e <__sfp+0x16>
 8008a98:	4630      	mov	r0, r6
 8008a9a:	f7ff ffbd 	bl	8008a18 <__sinit>
 8008a9e:	3648      	adds	r6, #72	; 0x48
 8008aa0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008aa4:	3b01      	subs	r3, #1
 8008aa6:	d503      	bpl.n	8008ab0 <__sfp+0x28>
 8008aa8:	6833      	ldr	r3, [r6, #0]
 8008aaa:	b30b      	cbz	r3, 8008af0 <__sfp+0x68>
 8008aac:	6836      	ldr	r6, [r6, #0]
 8008aae:	e7f7      	b.n	8008aa0 <__sfp+0x18>
 8008ab0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008ab4:	b9d5      	cbnz	r5, 8008aec <__sfp+0x64>
 8008ab6:	4b16      	ldr	r3, [pc, #88]	; (8008b10 <__sfp+0x88>)
 8008ab8:	60e3      	str	r3, [r4, #12]
 8008aba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008abe:	6665      	str	r5, [r4, #100]	; 0x64
 8008ac0:	f000 f847 	bl	8008b52 <__retarget_lock_init_recursive>
 8008ac4:	f7ff ff96 	bl	80089f4 <__sfp_lock_release>
 8008ac8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008acc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008ad0:	6025      	str	r5, [r4, #0]
 8008ad2:	61a5      	str	r5, [r4, #24]
 8008ad4:	2208      	movs	r2, #8
 8008ad6:	4629      	mov	r1, r5
 8008ad8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008adc:	f7ff fd44 	bl	8008568 <memset>
 8008ae0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008ae4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008ae8:	4620      	mov	r0, r4
 8008aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008aec:	3468      	adds	r4, #104	; 0x68
 8008aee:	e7d9      	b.n	8008aa4 <__sfp+0x1c>
 8008af0:	2104      	movs	r1, #4
 8008af2:	4638      	mov	r0, r7
 8008af4:	f7ff ff62 	bl	80089bc <__sfmoreglue>
 8008af8:	4604      	mov	r4, r0
 8008afa:	6030      	str	r0, [r6, #0]
 8008afc:	2800      	cmp	r0, #0
 8008afe:	d1d5      	bne.n	8008aac <__sfp+0x24>
 8008b00:	f7ff ff78 	bl	80089f4 <__sfp_lock_release>
 8008b04:	230c      	movs	r3, #12
 8008b06:	603b      	str	r3, [r7, #0]
 8008b08:	e7ee      	b.n	8008ae8 <__sfp+0x60>
 8008b0a:	bf00      	nop
 8008b0c:	08008f8c 	.word	0x08008f8c
 8008b10:	ffff0001 	.word	0xffff0001

08008b14 <_fwalk_reent>:
 8008b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b18:	4606      	mov	r6, r0
 8008b1a:	4688      	mov	r8, r1
 8008b1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008b20:	2700      	movs	r7, #0
 8008b22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008b26:	f1b9 0901 	subs.w	r9, r9, #1
 8008b2a:	d505      	bpl.n	8008b38 <_fwalk_reent+0x24>
 8008b2c:	6824      	ldr	r4, [r4, #0]
 8008b2e:	2c00      	cmp	r4, #0
 8008b30:	d1f7      	bne.n	8008b22 <_fwalk_reent+0xe>
 8008b32:	4638      	mov	r0, r7
 8008b34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b38:	89ab      	ldrh	r3, [r5, #12]
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d907      	bls.n	8008b4e <_fwalk_reent+0x3a>
 8008b3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b42:	3301      	adds	r3, #1
 8008b44:	d003      	beq.n	8008b4e <_fwalk_reent+0x3a>
 8008b46:	4629      	mov	r1, r5
 8008b48:	4630      	mov	r0, r6
 8008b4a:	47c0      	blx	r8
 8008b4c:	4307      	orrs	r7, r0
 8008b4e:	3568      	adds	r5, #104	; 0x68
 8008b50:	e7e9      	b.n	8008b26 <_fwalk_reent+0x12>

08008b52 <__retarget_lock_init_recursive>:
 8008b52:	4770      	bx	lr

08008b54 <__retarget_lock_acquire_recursive>:
 8008b54:	4770      	bx	lr

08008b56 <__retarget_lock_release_recursive>:
 8008b56:	4770      	bx	lr

08008b58 <__swhatbuf_r>:
 8008b58:	b570      	push	{r4, r5, r6, lr}
 8008b5a:	460e      	mov	r6, r1
 8008b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b60:	2900      	cmp	r1, #0
 8008b62:	b096      	sub	sp, #88	; 0x58
 8008b64:	4614      	mov	r4, r2
 8008b66:	461d      	mov	r5, r3
 8008b68:	da07      	bge.n	8008b7a <__swhatbuf_r+0x22>
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	602b      	str	r3, [r5, #0]
 8008b6e:	89b3      	ldrh	r3, [r6, #12]
 8008b70:	061a      	lsls	r2, r3, #24
 8008b72:	d410      	bmi.n	8008b96 <__swhatbuf_r+0x3e>
 8008b74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b78:	e00e      	b.n	8008b98 <__swhatbuf_r+0x40>
 8008b7a:	466a      	mov	r2, sp
 8008b7c:	f000 f970 	bl	8008e60 <_fstat_r>
 8008b80:	2800      	cmp	r0, #0
 8008b82:	dbf2      	blt.n	8008b6a <__swhatbuf_r+0x12>
 8008b84:	9a01      	ldr	r2, [sp, #4]
 8008b86:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008b8a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008b8e:	425a      	negs	r2, r3
 8008b90:	415a      	adcs	r2, r3
 8008b92:	602a      	str	r2, [r5, #0]
 8008b94:	e7ee      	b.n	8008b74 <__swhatbuf_r+0x1c>
 8008b96:	2340      	movs	r3, #64	; 0x40
 8008b98:	2000      	movs	r0, #0
 8008b9a:	6023      	str	r3, [r4, #0]
 8008b9c:	b016      	add	sp, #88	; 0x58
 8008b9e:	bd70      	pop	{r4, r5, r6, pc}

08008ba0 <__smakebuf_r>:
 8008ba0:	898b      	ldrh	r3, [r1, #12]
 8008ba2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ba4:	079d      	lsls	r5, r3, #30
 8008ba6:	4606      	mov	r6, r0
 8008ba8:	460c      	mov	r4, r1
 8008baa:	d507      	bpl.n	8008bbc <__smakebuf_r+0x1c>
 8008bac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008bb0:	6023      	str	r3, [r4, #0]
 8008bb2:	6123      	str	r3, [r4, #16]
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	6163      	str	r3, [r4, #20]
 8008bb8:	b002      	add	sp, #8
 8008bba:	bd70      	pop	{r4, r5, r6, pc}
 8008bbc:	ab01      	add	r3, sp, #4
 8008bbe:	466a      	mov	r2, sp
 8008bc0:	f7ff ffca 	bl	8008b58 <__swhatbuf_r>
 8008bc4:	9900      	ldr	r1, [sp, #0]
 8008bc6:	4605      	mov	r5, r0
 8008bc8:	4630      	mov	r0, r6
 8008bca:	f000 f879 	bl	8008cc0 <_malloc_r>
 8008bce:	b948      	cbnz	r0, 8008be4 <__smakebuf_r+0x44>
 8008bd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bd4:	059a      	lsls	r2, r3, #22
 8008bd6:	d4ef      	bmi.n	8008bb8 <__smakebuf_r+0x18>
 8008bd8:	f023 0303 	bic.w	r3, r3, #3
 8008bdc:	f043 0302 	orr.w	r3, r3, #2
 8008be0:	81a3      	strh	r3, [r4, #12]
 8008be2:	e7e3      	b.n	8008bac <__smakebuf_r+0xc>
 8008be4:	4b0d      	ldr	r3, [pc, #52]	; (8008c1c <__smakebuf_r+0x7c>)
 8008be6:	62b3      	str	r3, [r6, #40]	; 0x28
 8008be8:	89a3      	ldrh	r3, [r4, #12]
 8008bea:	6020      	str	r0, [r4, #0]
 8008bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bf0:	81a3      	strh	r3, [r4, #12]
 8008bf2:	9b00      	ldr	r3, [sp, #0]
 8008bf4:	6163      	str	r3, [r4, #20]
 8008bf6:	9b01      	ldr	r3, [sp, #4]
 8008bf8:	6120      	str	r0, [r4, #16]
 8008bfa:	b15b      	cbz	r3, 8008c14 <__smakebuf_r+0x74>
 8008bfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c00:	4630      	mov	r0, r6
 8008c02:	f000 f93f 	bl	8008e84 <_isatty_r>
 8008c06:	b128      	cbz	r0, 8008c14 <__smakebuf_r+0x74>
 8008c08:	89a3      	ldrh	r3, [r4, #12]
 8008c0a:	f023 0303 	bic.w	r3, r3, #3
 8008c0e:	f043 0301 	orr.w	r3, r3, #1
 8008c12:	81a3      	strh	r3, [r4, #12]
 8008c14:	89a0      	ldrh	r0, [r4, #12]
 8008c16:	4305      	orrs	r5, r0
 8008c18:	81a5      	strh	r5, [r4, #12]
 8008c1a:	e7cd      	b.n	8008bb8 <__smakebuf_r+0x18>
 8008c1c:	080089b1 	.word	0x080089b1

08008c20 <_free_r>:
 8008c20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c22:	2900      	cmp	r1, #0
 8008c24:	d048      	beq.n	8008cb8 <_free_r+0x98>
 8008c26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c2a:	9001      	str	r0, [sp, #4]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	f1a1 0404 	sub.w	r4, r1, #4
 8008c32:	bfb8      	it	lt
 8008c34:	18e4      	addlt	r4, r4, r3
 8008c36:	f000 f947 	bl	8008ec8 <__malloc_lock>
 8008c3a:	4a20      	ldr	r2, [pc, #128]	; (8008cbc <_free_r+0x9c>)
 8008c3c:	9801      	ldr	r0, [sp, #4]
 8008c3e:	6813      	ldr	r3, [r2, #0]
 8008c40:	4615      	mov	r5, r2
 8008c42:	b933      	cbnz	r3, 8008c52 <_free_r+0x32>
 8008c44:	6063      	str	r3, [r4, #4]
 8008c46:	6014      	str	r4, [r2, #0]
 8008c48:	b003      	add	sp, #12
 8008c4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c4e:	f000 b941 	b.w	8008ed4 <__malloc_unlock>
 8008c52:	42a3      	cmp	r3, r4
 8008c54:	d90b      	bls.n	8008c6e <_free_r+0x4e>
 8008c56:	6821      	ldr	r1, [r4, #0]
 8008c58:	1862      	adds	r2, r4, r1
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	bf04      	itt	eq
 8008c5e:	681a      	ldreq	r2, [r3, #0]
 8008c60:	685b      	ldreq	r3, [r3, #4]
 8008c62:	6063      	str	r3, [r4, #4]
 8008c64:	bf04      	itt	eq
 8008c66:	1852      	addeq	r2, r2, r1
 8008c68:	6022      	streq	r2, [r4, #0]
 8008c6a:	602c      	str	r4, [r5, #0]
 8008c6c:	e7ec      	b.n	8008c48 <_free_r+0x28>
 8008c6e:	461a      	mov	r2, r3
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	b10b      	cbz	r3, 8008c78 <_free_r+0x58>
 8008c74:	42a3      	cmp	r3, r4
 8008c76:	d9fa      	bls.n	8008c6e <_free_r+0x4e>
 8008c78:	6811      	ldr	r1, [r2, #0]
 8008c7a:	1855      	adds	r5, r2, r1
 8008c7c:	42a5      	cmp	r5, r4
 8008c7e:	d10b      	bne.n	8008c98 <_free_r+0x78>
 8008c80:	6824      	ldr	r4, [r4, #0]
 8008c82:	4421      	add	r1, r4
 8008c84:	1854      	adds	r4, r2, r1
 8008c86:	42a3      	cmp	r3, r4
 8008c88:	6011      	str	r1, [r2, #0]
 8008c8a:	d1dd      	bne.n	8008c48 <_free_r+0x28>
 8008c8c:	681c      	ldr	r4, [r3, #0]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	6053      	str	r3, [r2, #4]
 8008c92:	4421      	add	r1, r4
 8008c94:	6011      	str	r1, [r2, #0]
 8008c96:	e7d7      	b.n	8008c48 <_free_r+0x28>
 8008c98:	d902      	bls.n	8008ca0 <_free_r+0x80>
 8008c9a:	230c      	movs	r3, #12
 8008c9c:	6003      	str	r3, [r0, #0]
 8008c9e:	e7d3      	b.n	8008c48 <_free_r+0x28>
 8008ca0:	6825      	ldr	r5, [r4, #0]
 8008ca2:	1961      	adds	r1, r4, r5
 8008ca4:	428b      	cmp	r3, r1
 8008ca6:	bf04      	itt	eq
 8008ca8:	6819      	ldreq	r1, [r3, #0]
 8008caa:	685b      	ldreq	r3, [r3, #4]
 8008cac:	6063      	str	r3, [r4, #4]
 8008cae:	bf04      	itt	eq
 8008cb0:	1949      	addeq	r1, r1, r5
 8008cb2:	6021      	streq	r1, [r4, #0]
 8008cb4:	6054      	str	r4, [r2, #4]
 8008cb6:	e7c7      	b.n	8008c48 <_free_r+0x28>
 8008cb8:	b003      	add	sp, #12
 8008cba:	bd30      	pop	{r4, r5, pc}
 8008cbc:	24000098 	.word	0x24000098

08008cc0 <_malloc_r>:
 8008cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cc2:	1ccd      	adds	r5, r1, #3
 8008cc4:	f025 0503 	bic.w	r5, r5, #3
 8008cc8:	3508      	adds	r5, #8
 8008cca:	2d0c      	cmp	r5, #12
 8008ccc:	bf38      	it	cc
 8008cce:	250c      	movcc	r5, #12
 8008cd0:	2d00      	cmp	r5, #0
 8008cd2:	4606      	mov	r6, r0
 8008cd4:	db01      	blt.n	8008cda <_malloc_r+0x1a>
 8008cd6:	42a9      	cmp	r1, r5
 8008cd8:	d903      	bls.n	8008ce2 <_malloc_r+0x22>
 8008cda:	230c      	movs	r3, #12
 8008cdc:	6033      	str	r3, [r6, #0]
 8008cde:	2000      	movs	r0, #0
 8008ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ce2:	f000 f8f1 	bl	8008ec8 <__malloc_lock>
 8008ce6:	4921      	ldr	r1, [pc, #132]	; (8008d6c <_malloc_r+0xac>)
 8008ce8:	680a      	ldr	r2, [r1, #0]
 8008cea:	4614      	mov	r4, r2
 8008cec:	b99c      	cbnz	r4, 8008d16 <_malloc_r+0x56>
 8008cee:	4f20      	ldr	r7, [pc, #128]	; (8008d70 <_malloc_r+0xb0>)
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	b923      	cbnz	r3, 8008cfe <_malloc_r+0x3e>
 8008cf4:	4621      	mov	r1, r4
 8008cf6:	4630      	mov	r0, r6
 8008cf8:	f000 f83c 	bl	8008d74 <_sbrk_r>
 8008cfc:	6038      	str	r0, [r7, #0]
 8008cfe:	4629      	mov	r1, r5
 8008d00:	4630      	mov	r0, r6
 8008d02:	f000 f837 	bl	8008d74 <_sbrk_r>
 8008d06:	1c43      	adds	r3, r0, #1
 8008d08:	d123      	bne.n	8008d52 <_malloc_r+0x92>
 8008d0a:	230c      	movs	r3, #12
 8008d0c:	6033      	str	r3, [r6, #0]
 8008d0e:	4630      	mov	r0, r6
 8008d10:	f000 f8e0 	bl	8008ed4 <__malloc_unlock>
 8008d14:	e7e3      	b.n	8008cde <_malloc_r+0x1e>
 8008d16:	6823      	ldr	r3, [r4, #0]
 8008d18:	1b5b      	subs	r3, r3, r5
 8008d1a:	d417      	bmi.n	8008d4c <_malloc_r+0x8c>
 8008d1c:	2b0b      	cmp	r3, #11
 8008d1e:	d903      	bls.n	8008d28 <_malloc_r+0x68>
 8008d20:	6023      	str	r3, [r4, #0]
 8008d22:	441c      	add	r4, r3
 8008d24:	6025      	str	r5, [r4, #0]
 8008d26:	e004      	b.n	8008d32 <_malloc_r+0x72>
 8008d28:	6863      	ldr	r3, [r4, #4]
 8008d2a:	42a2      	cmp	r2, r4
 8008d2c:	bf0c      	ite	eq
 8008d2e:	600b      	streq	r3, [r1, #0]
 8008d30:	6053      	strne	r3, [r2, #4]
 8008d32:	4630      	mov	r0, r6
 8008d34:	f000 f8ce 	bl	8008ed4 <__malloc_unlock>
 8008d38:	f104 000b 	add.w	r0, r4, #11
 8008d3c:	1d23      	adds	r3, r4, #4
 8008d3e:	f020 0007 	bic.w	r0, r0, #7
 8008d42:	1ac2      	subs	r2, r0, r3
 8008d44:	d0cc      	beq.n	8008ce0 <_malloc_r+0x20>
 8008d46:	1a1b      	subs	r3, r3, r0
 8008d48:	50a3      	str	r3, [r4, r2]
 8008d4a:	e7c9      	b.n	8008ce0 <_malloc_r+0x20>
 8008d4c:	4622      	mov	r2, r4
 8008d4e:	6864      	ldr	r4, [r4, #4]
 8008d50:	e7cc      	b.n	8008cec <_malloc_r+0x2c>
 8008d52:	1cc4      	adds	r4, r0, #3
 8008d54:	f024 0403 	bic.w	r4, r4, #3
 8008d58:	42a0      	cmp	r0, r4
 8008d5a:	d0e3      	beq.n	8008d24 <_malloc_r+0x64>
 8008d5c:	1a21      	subs	r1, r4, r0
 8008d5e:	4630      	mov	r0, r6
 8008d60:	f000 f808 	bl	8008d74 <_sbrk_r>
 8008d64:	3001      	adds	r0, #1
 8008d66:	d1dd      	bne.n	8008d24 <_malloc_r+0x64>
 8008d68:	e7cf      	b.n	8008d0a <_malloc_r+0x4a>
 8008d6a:	bf00      	nop
 8008d6c:	24000098 	.word	0x24000098
 8008d70:	2400009c 	.word	0x2400009c

08008d74 <_sbrk_r>:
 8008d74:	b538      	push	{r3, r4, r5, lr}
 8008d76:	4d06      	ldr	r5, [pc, #24]	; (8008d90 <_sbrk_r+0x1c>)
 8008d78:	2300      	movs	r3, #0
 8008d7a:	4604      	mov	r4, r0
 8008d7c:	4608      	mov	r0, r1
 8008d7e:	602b      	str	r3, [r5, #0]
 8008d80:	f7f8 f886 	bl	8000e90 <_sbrk>
 8008d84:	1c43      	adds	r3, r0, #1
 8008d86:	d102      	bne.n	8008d8e <_sbrk_r+0x1a>
 8008d88:	682b      	ldr	r3, [r5, #0]
 8008d8a:	b103      	cbz	r3, 8008d8e <_sbrk_r+0x1a>
 8008d8c:	6023      	str	r3, [r4, #0]
 8008d8e:	bd38      	pop	{r3, r4, r5, pc}
 8008d90:	24000260 	.word	0x24000260

08008d94 <__sread>:
 8008d94:	b510      	push	{r4, lr}
 8008d96:	460c      	mov	r4, r1
 8008d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d9c:	f000 f8a0 	bl	8008ee0 <_read_r>
 8008da0:	2800      	cmp	r0, #0
 8008da2:	bfab      	itete	ge
 8008da4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008da6:	89a3      	ldrhlt	r3, [r4, #12]
 8008da8:	181b      	addge	r3, r3, r0
 8008daa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008dae:	bfac      	ite	ge
 8008db0:	6563      	strge	r3, [r4, #84]	; 0x54
 8008db2:	81a3      	strhlt	r3, [r4, #12]
 8008db4:	bd10      	pop	{r4, pc}

08008db6 <__swrite>:
 8008db6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dba:	461f      	mov	r7, r3
 8008dbc:	898b      	ldrh	r3, [r1, #12]
 8008dbe:	05db      	lsls	r3, r3, #23
 8008dc0:	4605      	mov	r5, r0
 8008dc2:	460c      	mov	r4, r1
 8008dc4:	4616      	mov	r6, r2
 8008dc6:	d505      	bpl.n	8008dd4 <__swrite+0x1e>
 8008dc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dcc:	2302      	movs	r3, #2
 8008dce:	2200      	movs	r2, #0
 8008dd0:	f000 f868 	bl	8008ea4 <_lseek_r>
 8008dd4:	89a3      	ldrh	r3, [r4, #12]
 8008dd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008dda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008dde:	81a3      	strh	r3, [r4, #12]
 8008de0:	4632      	mov	r2, r6
 8008de2:	463b      	mov	r3, r7
 8008de4:	4628      	mov	r0, r5
 8008de6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008dea:	f000 b817 	b.w	8008e1c <_write_r>

08008dee <__sseek>:
 8008dee:	b510      	push	{r4, lr}
 8008df0:	460c      	mov	r4, r1
 8008df2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008df6:	f000 f855 	bl	8008ea4 <_lseek_r>
 8008dfa:	1c43      	adds	r3, r0, #1
 8008dfc:	89a3      	ldrh	r3, [r4, #12]
 8008dfe:	bf15      	itete	ne
 8008e00:	6560      	strne	r0, [r4, #84]	; 0x54
 8008e02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008e06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008e0a:	81a3      	strheq	r3, [r4, #12]
 8008e0c:	bf18      	it	ne
 8008e0e:	81a3      	strhne	r3, [r4, #12]
 8008e10:	bd10      	pop	{r4, pc}

08008e12 <__sclose>:
 8008e12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e16:	f000 b813 	b.w	8008e40 <_close_r>
	...

08008e1c <_write_r>:
 8008e1c:	b538      	push	{r3, r4, r5, lr}
 8008e1e:	4d07      	ldr	r5, [pc, #28]	; (8008e3c <_write_r+0x20>)
 8008e20:	4604      	mov	r4, r0
 8008e22:	4608      	mov	r0, r1
 8008e24:	4611      	mov	r1, r2
 8008e26:	2200      	movs	r2, #0
 8008e28:	602a      	str	r2, [r5, #0]
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	f7f7 ffdf 	bl	8000dee <_write>
 8008e30:	1c43      	adds	r3, r0, #1
 8008e32:	d102      	bne.n	8008e3a <_write_r+0x1e>
 8008e34:	682b      	ldr	r3, [r5, #0]
 8008e36:	b103      	cbz	r3, 8008e3a <_write_r+0x1e>
 8008e38:	6023      	str	r3, [r4, #0]
 8008e3a:	bd38      	pop	{r3, r4, r5, pc}
 8008e3c:	24000260 	.word	0x24000260

08008e40 <_close_r>:
 8008e40:	b538      	push	{r3, r4, r5, lr}
 8008e42:	4d06      	ldr	r5, [pc, #24]	; (8008e5c <_close_r+0x1c>)
 8008e44:	2300      	movs	r3, #0
 8008e46:	4604      	mov	r4, r0
 8008e48:	4608      	mov	r0, r1
 8008e4a:	602b      	str	r3, [r5, #0]
 8008e4c:	f7f7 ffeb 	bl	8000e26 <_close>
 8008e50:	1c43      	adds	r3, r0, #1
 8008e52:	d102      	bne.n	8008e5a <_close_r+0x1a>
 8008e54:	682b      	ldr	r3, [r5, #0]
 8008e56:	b103      	cbz	r3, 8008e5a <_close_r+0x1a>
 8008e58:	6023      	str	r3, [r4, #0]
 8008e5a:	bd38      	pop	{r3, r4, r5, pc}
 8008e5c:	24000260 	.word	0x24000260

08008e60 <_fstat_r>:
 8008e60:	b538      	push	{r3, r4, r5, lr}
 8008e62:	4d07      	ldr	r5, [pc, #28]	; (8008e80 <_fstat_r+0x20>)
 8008e64:	2300      	movs	r3, #0
 8008e66:	4604      	mov	r4, r0
 8008e68:	4608      	mov	r0, r1
 8008e6a:	4611      	mov	r1, r2
 8008e6c:	602b      	str	r3, [r5, #0]
 8008e6e:	f7f7 ffe6 	bl	8000e3e <_fstat>
 8008e72:	1c43      	adds	r3, r0, #1
 8008e74:	d102      	bne.n	8008e7c <_fstat_r+0x1c>
 8008e76:	682b      	ldr	r3, [r5, #0]
 8008e78:	b103      	cbz	r3, 8008e7c <_fstat_r+0x1c>
 8008e7a:	6023      	str	r3, [r4, #0]
 8008e7c:	bd38      	pop	{r3, r4, r5, pc}
 8008e7e:	bf00      	nop
 8008e80:	24000260 	.word	0x24000260

08008e84 <_isatty_r>:
 8008e84:	b538      	push	{r3, r4, r5, lr}
 8008e86:	4d06      	ldr	r5, [pc, #24]	; (8008ea0 <_isatty_r+0x1c>)
 8008e88:	2300      	movs	r3, #0
 8008e8a:	4604      	mov	r4, r0
 8008e8c:	4608      	mov	r0, r1
 8008e8e:	602b      	str	r3, [r5, #0]
 8008e90:	f7f7 ffe5 	bl	8000e5e <_isatty>
 8008e94:	1c43      	adds	r3, r0, #1
 8008e96:	d102      	bne.n	8008e9e <_isatty_r+0x1a>
 8008e98:	682b      	ldr	r3, [r5, #0]
 8008e9a:	b103      	cbz	r3, 8008e9e <_isatty_r+0x1a>
 8008e9c:	6023      	str	r3, [r4, #0]
 8008e9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ea0:	24000260 	.word	0x24000260

08008ea4 <_lseek_r>:
 8008ea4:	b538      	push	{r3, r4, r5, lr}
 8008ea6:	4d07      	ldr	r5, [pc, #28]	; (8008ec4 <_lseek_r+0x20>)
 8008ea8:	4604      	mov	r4, r0
 8008eaa:	4608      	mov	r0, r1
 8008eac:	4611      	mov	r1, r2
 8008eae:	2200      	movs	r2, #0
 8008eb0:	602a      	str	r2, [r5, #0]
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	f7f7 ffde 	bl	8000e74 <_lseek>
 8008eb8:	1c43      	adds	r3, r0, #1
 8008eba:	d102      	bne.n	8008ec2 <_lseek_r+0x1e>
 8008ebc:	682b      	ldr	r3, [r5, #0]
 8008ebe:	b103      	cbz	r3, 8008ec2 <_lseek_r+0x1e>
 8008ec0:	6023      	str	r3, [r4, #0]
 8008ec2:	bd38      	pop	{r3, r4, r5, pc}
 8008ec4:	24000260 	.word	0x24000260

08008ec8 <__malloc_lock>:
 8008ec8:	4801      	ldr	r0, [pc, #4]	; (8008ed0 <__malloc_lock+0x8>)
 8008eca:	f7ff be43 	b.w	8008b54 <__retarget_lock_acquire_recursive>
 8008ece:	bf00      	nop
 8008ed0:	24000258 	.word	0x24000258

08008ed4 <__malloc_unlock>:
 8008ed4:	4801      	ldr	r0, [pc, #4]	; (8008edc <__malloc_unlock+0x8>)
 8008ed6:	f7ff be3e 	b.w	8008b56 <__retarget_lock_release_recursive>
 8008eda:	bf00      	nop
 8008edc:	24000258 	.word	0x24000258

08008ee0 <_read_r>:
 8008ee0:	b538      	push	{r3, r4, r5, lr}
 8008ee2:	4d07      	ldr	r5, [pc, #28]	; (8008f00 <_read_r+0x20>)
 8008ee4:	4604      	mov	r4, r0
 8008ee6:	4608      	mov	r0, r1
 8008ee8:	4611      	mov	r1, r2
 8008eea:	2200      	movs	r2, #0
 8008eec:	602a      	str	r2, [r5, #0]
 8008eee:	461a      	mov	r2, r3
 8008ef0:	f7f7 ff60 	bl	8000db4 <_read>
 8008ef4:	1c43      	adds	r3, r0, #1
 8008ef6:	d102      	bne.n	8008efe <_read_r+0x1e>
 8008ef8:	682b      	ldr	r3, [r5, #0]
 8008efa:	b103      	cbz	r3, 8008efe <_read_r+0x1e>
 8008efc:	6023      	str	r3, [r4, #0]
 8008efe:	bd38      	pop	{r3, r4, r5, pc}
 8008f00:	24000260 	.word	0x24000260

08008f04 <_init>:
 8008f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f06:	bf00      	nop
 8008f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f0a:	bc08      	pop	{r3}
 8008f0c:	469e      	mov	lr, r3
 8008f0e:	4770      	bx	lr

08008f10 <_fini>:
 8008f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f12:	bf00      	nop
 8008f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f16:	bc08      	pop	{r3}
 8008f18:	469e      	mov	lr, r3
 8008f1a:	4770      	bx	lr
