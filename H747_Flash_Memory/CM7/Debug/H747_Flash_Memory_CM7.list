
H747_Flash_Memory_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c84  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08007f1c  08007f1c  00017f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fc8  08007fc8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007fc8  08007fc8  00017fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fd0  08007fd0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fd0  08007fd0  00017fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fd4  08007fd4  00017fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  08007fd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  24000074  0800804c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400018c  0800804c  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d222  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000330b  00000000  00000000  0003d2c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e20  00000000  00000000  000405d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d28  00000000  00000000  000413f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ff51  00000000  00000000  00042118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012513  00000000  00000000  00082069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019798d  00000000  00000000  0009457c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0022bf09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004080  00000000  00000000  0022bf5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000074 	.word	0x24000074
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007f04 	.word	0x08007f04

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000078 	.word	0x24000078
 80002d4:	08007f04 	.word	0x08007f04

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <__io_putchar>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
//static void MX_QUADSPI_Init(void);
static void MX_UART8_Init(void);

int __io_putchar (int ch) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	uint8_t c = ch;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	b2db      	uxtb	r3, r3
 8000710:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart8, &c, 1, HAL_MAX_DELAY);
 8000712:	f107 010f 	add.w	r1, r7, #15
 8000716:	f04f 33ff 	mov.w	r3, #4294967295
 800071a:	2201      	movs	r2, #1
 800071c:	4803      	ldr	r0, [pc, #12]	; (800072c <__io_putchar+0x28>)
 800071e:	f005 fb29 	bl	8005d74 <HAL_UART_Transmit>
	return ch;
 8000722:	687b      	ldr	r3, [r7, #4]
}
 8000724:	4618      	mov	r0, r3
 8000726:	3710      	adds	r7, #16
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	2400009c 	.word	0x2400009c

08000730 <main>:

int main(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
	int32_t timeout;
	timeout = 0xFFFF;
 800073a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800073e:	f241 020c 	movw	r2, #4108	; 0x100c
 8000742:	443a      	add	r2, r7
 8000744:	6013      	str	r3, [r2, #0]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000746:	bf00      	nop
 8000748:	4b82      	ldr	r3, [pc, #520]	; (8000954 <main+0x224>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000750:	2b00      	cmp	r3, #0
 8000752:	d00a      	beq.n	800076a <main+0x3a>
 8000754:	f241 030c 	movw	r3, #4108	; 0x100c
 8000758:	443b      	add	r3, r7
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	1e5a      	subs	r2, r3, #1
 800075e:	f241 010c 	movw	r1, #4108	; 0x100c
 8000762:	4439      	add	r1, r7
 8000764:	600a      	str	r2, [r1, #0]
 8000766:	2b00      	cmp	r3, #0
 8000768:	dcee      	bgt.n	8000748 <main+0x18>
	if ( timeout < 0 )
 800076a:	f241 030c 	movw	r3, #4108	; 0x100c
 800076e:	443b      	add	r3, r7
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	da01      	bge.n	800077a <main+0x4a>
	{
		Error_Handler();
 8000776:	f000 fa69 	bl	8000c4c <Error_Handler>
	}
	HAL_Init();
 800077a:	f001 f817 	bl	80017ac <HAL_Init>
	SystemClock_Config();
 800077e:	f000 f8f1 	bl	8000964 <SystemClock_Config>
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000782:	4b74      	ldr	r3, [pc, #464]	; (8000954 <main+0x224>)
 8000784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000788:	4a72      	ldr	r2, [pc, #456]	; (8000954 <main+0x224>)
 800078a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800078e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000792:	4b70      	ldr	r3, [pc, #448]	; (8000954 <main+0x224>)
 8000794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000798:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 800079c:	4b6e      	ldr	r3, [pc, #440]	; (8000958 <main+0x228>)
 800079e:	f241 0110 	movw	r1, #4112	; 0x1010
 80007a2:	4439      	add	r1, r7
 80007a4:	440b      	add	r3, r1
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	4b6b      	ldr	r3, [pc, #428]	; (8000958 <main+0x228>)
 80007aa:	f241 0210 	movw	r2, #4112	; 0x1010
 80007ae:	443a      	add	r2, r7
 80007b0:	4413      	add	r3, r2
 80007b2:	681b      	ldr	r3, [r3, #0]
	HAL_HSEM_FastTake(HSEM_ID_0);
 80007b4:	2000      	movs	r0, #0
 80007b6:	f002 fa11 	bl	8002bdc <HAL_HSEM_FastTake>
	HAL_HSEM_Release(HSEM_ID_0,0);
 80007ba:	2100      	movs	r1, #0
 80007bc:	2000      	movs	r0, #0
 80007be:	f002 fa27 	bl	8002c10 <HAL_HSEM_Release>
	timeout = 0xFFFF;
 80007c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007c6:	f241 020c 	movw	r2, #4108	; 0x100c
 80007ca:	443a      	add	r2, r7
 80007cc:	6013      	str	r3, [r2, #0]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80007ce:	bf00      	nop
 80007d0:	4b60      	ldr	r3, [pc, #384]	; (8000954 <main+0x224>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d10a      	bne.n	80007f2 <main+0xc2>
 80007dc:	f241 030c 	movw	r3, #4108	; 0x100c
 80007e0:	443b      	add	r3, r7
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	1e5a      	subs	r2, r3, #1
 80007e6:	f241 010c 	movw	r1, #4108	; 0x100c
 80007ea:	4439      	add	r1, r7
 80007ec:	600a      	str	r2, [r1, #0]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	dcee      	bgt.n	80007d0 <main+0xa0>
	if ( timeout < 0 )
 80007f2:	f241 030c 	movw	r3, #4108	; 0x100c
 80007f6:	443b      	add	r3, r7
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	da01      	bge.n	8000802 <main+0xd2>
	{
		Error_Handler();
 80007fe:	f000 fa25 	bl	8000c4c <Error_Handler>
	}

	MX_GPIO_Init();
 8000802:	f000 f991 	bl	8000b28 <MX_GPIO_Init>
	MX_QUADSPI_Init();
 8000806:	f000 fa29 	bl	8000c5c <MX_QUADSPI_Init>
	MX_UART8_Init();
 800080a:	f000 f941 	bl	8000a90 <MX_UART8_Init>

  	uint8_t buffer_test[MEMORY_SECTOR_SIZE];
      uint32_t var = 0;
 800080e:	2300      	movs	r3, #0
 8000810:	f241 0208 	movw	r2, #4104	; 0x1008
 8000814:	443a      	add	r2, r7
 8000816:	6013      	str	r3, [r2, #0]

  	CSP_QUADSPI_Init();
 8000818:	f000 fb76 	bl	8000f08 <CSP_QUADSPI_Init>

  	for (var = 0; var < MEMORY_SECTOR_SIZE; var++) {
 800081c:	2300      	movs	r3, #0
 800081e:	f241 0208 	movw	r2, #4104	; 0x1008
 8000822:	443a      	add	r2, r7
 8000824:	6013      	str	r3, [r2, #0]
 8000826:	e019      	b.n	800085c <main+0x12c>
  		buffer_test[var] = (var & 0xff);
 8000828:	f241 0308 	movw	r3, #4104	; 0x1008
 800082c:	443b      	add	r3, r7
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	b2d9      	uxtb	r1, r3
 8000832:	4b4a      	ldr	r3, [pc, #296]	; (800095c <main+0x22c>)
 8000834:	f241 0210 	movw	r2, #4112	; 0x1010
 8000838:	443a      	add	r2, r7
 800083a:	4413      	add	r3, r2
 800083c:	f241 0208 	movw	r2, #4104	; 0x1008
 8000840:	443a      	add	r2, r7
 8000842:	6812      	ldr	r2, [r2, #0]
 8000844:	4413      	add	r3, r2
 8000846:	460a      	mov	r2, r1
 8000848:	701a      	strb	r2, [r3, #0]
  	for (var = 0; var < MEMORY_SECTOR_SIZE; var++) {
 800084a:	f241 0308 	movw	r3, #4104	; 0x1008
 800084e:	443b      	add	r3, r7
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	3301      	adds	r3, #1
 8000854:	f241 0208 	movw	r2, #4104	; 0x1008
 8000858:	443a      	add	r2, r7
 800085a:	6013      	str	r3, [r2, #0]
 800085c:	f241 0308 	movw	r3, #4104	; 0x1008
 8000860:	443b      	add	r3, r7
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000868:	d3de      	bcc.n	8000828 <main+0xf8>
  	}

  	for (var = 0; var < SECTORS_COUNT; var++) {
 800086a:	2300      	movs	r3, #0
 800086c:	f241 0208 	movw	r2, #4104	; 0x1008
 8000870:	443a      	add	r2, r7
 8000872:	6013      	str	r3, [r2, #0]
 8000874:	e02f      	b.n	80008d6 <main+0x1a6>

  		if (CSP_QSPI_EraseSector(var * MEMORY_SECTOR_SIZE,
 8000876:	f241 0308 	movw	r3, #4104	; 0x1008
 800087a:	443b      	add	r3, r7
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	031a      	lsls	r2, r3, #12
  				(var + 1) * MEMORY_SECTOR_SIZE - 1) != HAL_OK) {
 8000880:	f241 0308 	movw	r3, #4104	; 0x1008
 8000884:	443b      	add	r3, r7
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	3301      	adds	r3, #1
 800088a:	031b      	lsls	r3, r3, #12
  		if (CSP_QSPI_EraseSector(var * MEMORY_SECTOR_SIZE,
 800088c:	3b01      	subs	r3, #1
 800088e:	4619      	mov	r1, r3
 8000890:	4610      	mov	r0, r2
 8000892:	f000 fc91 	bl	80011b8 <CSP_QSPI_EraseSector>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d000      	beq.n	800089e <main+0x16e>

  			while (1)
 800089c:	e7fe      	b.n	800089c <main+0x16c>
  				;  //breakpoint - error detected
  		}

  		if (CSP_QSPI_WriteMemory(buffer_test, var * MEMORY_SECTOR_SIZE,
 800089e:	f241 0308 	movw	r3, #4104	; 0x1008
 80008a2:	443b      	add	r3, r7
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	0319      	lsls	r1, r3, #12
 80008a8:	4b2c      	ldr	r3, [pc, #176]	; (800095c <main+0x22c>)
 80008aa:	f241 0210 	movw	r2, #4112	; 0x1010
 80008ae:	443a      	add	r2, r7
 80008b0:	4413      	add	r3, r2
 80008b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008b6:	4618      	mov	r0, r3
 80008b8:	f000 fcd0 	bl	800125c <CSP_QSPI_WriteMemory>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d000      	beq.n	80008c4 <main+0x194>
  				sizeof(buffer_test)) != HAL_OK) {

  			while (1)
 80008c2:	e7fe      	b.n	80008c2 <main+0x192>
  	for (var = 0; var < SECTORS_COUNT; var++) {
 80008c4:	f241 0308 	movw	r3, #4104	; 0x1008
 80008c8:	443b      	add	r3, r7
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	3301      	adds	r3, #1
 80008ce:	f241 0208 	movw	r2, #4104	; 0x1008
 80008d2:	443a      	add	r2, r7
 80008d4:	6013      	str	r3, [r2, #0]
 80008d6:	f241 0308 	movw	r3, #4104	; 0x1008
 80008da:	443b      	add	r3, r7
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2b63      	cmp	r3, #99	; 0x63
 80008e0:	d9c9      	bls.n	8000876 <main+0x146>
  				;  //breakpoint - error detected
  		}

  	}

  	if (CSP_QSPI_EnableMemoryMappedMode() != HAL_OK) {
 80008e2:	f000 fd47 	bl	8001374 <CSP_QSPI_EnableMemoryMappedMode>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d000      	beq.n	80008ee <main+0x1be>

  		while (1)
 80008ec:	e7fe      	b.n	80008ec <main+0x1bc>
  			; //breakpoint - error detected
  	}

  	for (var = 0; var < SECTORS_COUNT; var++) {
 80008ee:	2300      	movs	r3, #0
 80008f0:	f241 0208 	movw	r2, #4104	; 0x1008
 80008f4:	443a      	add	r2, r7
 80008f6:	6013      	str	r3, [r2, #0]
 80008f8:	e01e      	b.n	8000938 <main+0x208>
  		if (memcmp(buffer_test,
  				(uint8_t*) (0x90000000 + var * MEMORY_SECTOR_SIZE),
 80008fa:	f241 0308 	movw	r3, #4104	; 0x1008
 80008fe:	443b      	add	r3, r7
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f503 2310 	add.w	r3, r3, #589824	; 0x90000
 8000906:	031b      	lsls	r3, r3, #12
  		if (memcmp(buffer_test,
 8000908:	4619      	mov	r1, r3
 800090a:	4b14      	ldr	r3, [pc, #80]	; (800095c <main+0x22c>)
 800090c:	f241 0210 	movw	r2, #4112	; 0x1010
 8000910:	443a      	add	r2, r7
 8000912:	4413      	add	r3, r2
 8000914:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000918:	4618      	mov	r0, r3
 800091a:	f006 fe17 	bl	800754c <memcmp>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d000      	beq.n	8000926 <main+0x1f6>
  				MEMORY_SECTOR_SIZE) != HAL_OK) {
  			while (1)
 8000924:	e7fe      	b.n	8000924 <main+0x1f4>
  	for (var = 0; var < SECTORS_COUNT; var++) {
 8000926:	f241 0308 	movw	r3, #4104	; 0x1008
 800092a:	443b      	add	r3, r7
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	3301      	adds	r3, #1
 8000930:	f241 0208 	movw	r2, #4104	; 0x1008
 8000934:	443a      	add	r2, r7
 8000936:	6013      	str	r3, [r2, #0]
 8000938:	f241 0308 	movw	r3, #4104	; 0x1008
 800093c:	443b      	add	r3, r7
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b63      	cmp	r3, #99	; 0x63
 8000942:	d9da      	bls.n	80008fa <main+0x1ca>
  		}
  	}

	while (1)
	{
		printf("Flash Memory\r\n");
 8000944:	4806      	ldr	r0, [pc, #24]	; (8000960 <main+0x230>)
 8000946:	f006 fe85 	bl	8007654 <puts>
		HAL_Delay(1000);
 800094a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800094e:	f000 ffbf 	bl	80018d0 <HAL_Delay>
		printf("Flash Memory\r\n");
 8000952:	e7f7      	b.n	8000944 <main+0x214>
 8000954:	58024400 	.word	0x58024400
 8000958:	ffffeff4 	.word	0xffffeff4
 800095c:	ffffeff8 	.word	0xffffeff8
 8000960:	08007f1c 	.word	0x08007f1c

08000964 <SystemClock_Config>:
	}
}

void SystemClock_Config(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b09e      	sub	sp, #120	; 0x78
 8000968:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;
	HAL_StatusTypeDef ret = HAL_OK;
 800096a:	2300      	movs	r3, #0
 800096c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	/*!< Supply configuration update enable */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000970:	2004      	movs	r0, #4
 8000972:	f002 f961 	bl	8002c38 <HAL_PWREx_ConfigSupply>

	/* The voltage scaling allows optimizing the power consumption when the device is
	 clocked below the maximum system frequency, to update the voltage scaling value
	 regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	4b42      	ldr	r3, [pc, #264]	; (8000a84 <SystemClock_Config+0x120>)
 800097c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800097e:	4a41      	ldr	r2, [pc, #260]	; (8000a84 <SystemClock_Config+0x120>)
 8000980:	f023 0301 	bic.w	r3, r3, #1
 8000984:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000986:	4b3f      	ldr	r3, [pc, #252]	; (8000a84 <SystemClock_Config+0x120>)
 8000988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	4b3d      	ldr	r3, [pc, #244]	; (8000a88 <SystemClock_Config+0x124>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	4a3c      	ldr	r2, [pc, #240]	; (8000a88 <SystemClock_Config+0x124>)
 8000996:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800099a:	6193      	str	r3, [r2, #24]
 800099c:	4b3a      	ldr	r3, [pc, #232]	; (8000a88 <SystemClock_Config+0x124>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	687b      	ldr	r3, [r7, #4]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009a8:	bf00      	nop
 80009aa:	4b37      	ldr	r3, [pc, #220]	; (8000a88 <SystemClock_Config+0x124>)
 80009ac:	699b      	ldr	r3, [r3, #24]
 80009ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009b6:	d1f8      	bne.n	80009aa <SystemClock_Config+0x46>

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009b8:	2301      	movs	r3, #1
 80009ba:	60bb      	str	r3, [r7, #8]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009c0:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 80009c2:	2300      	movs	r3, #0
 80009c4:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ca:	2302      	movs	r3, #2
 80009cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ce:	2302      	movs	r3, #2
 80009d0:	633b      	str	r3, [r7, #48]	; 0x30

	RCC_OscInitStruct.PLL.PLLM = 5;
 80009d2:	2305      	movs	r3, #5
 80009d4:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLN = 160;
 80009d6:	23a0      	movs	r3, #160	; 0xa0
 80009d8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLP = 2;
 80009de:	2302      	movs	r3, #2
 80009e0:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80009e2:	2302      	movs	r3, #2
 80009e4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80009e6:	2304      	movs	r3, #4
 80009e8:	643b      	str	r3, [r7, #64]	; 0x40

	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009ea:	2300      	movs	r3, #0
 80009ec:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80009ee:	2308      	movs	r3, #8
 80009f0:	64bb      	str	r3, [r7, #72]	; 0x48
	ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80009f2:	f107 0308 	add.w	r3, r7, #8
 80009f6:	4618      	mov	r0, r3
 80009f8:	f002 fe3e 	bl	8003678 <HAL_RCC_OscConfig>
 80009fc:	4603      	mov	r3, r0
 80009fe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if(ret != HAL_OK)
 8000a02:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <SystemClock_Config+0xaa>
	{
	Error_Handler();
 8000a0a:	f000 f91f 	bl	8000c4c <Error_Handler>
	}

	/* Select PLL as system clock source and configure  bus clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8000a0e:	233f      	movs	r3, #63	; 0x3f
 8000a10:	657b      	str	r3, [r7, #84]	; 0x54
								 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a12:	2303      	movs	r3, #3
 8000a14:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a16:	2300      	movs	r3, #0
 8000a18:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a1a:	2308      	movs	r3, #8
 8000a1c:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a1e:	2340      	movs	r3, #64	; 0x40
 8000a20:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a22:	2340      	movs	r3, #64	; 0x40
 8000a24:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a2a:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a2c:	2340      	movs	r3, #64	; 0x40
 8000a2e:	673b      	str	r3, [r7, #112]	; 0x70
	ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8000a30:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a34:	2104      	movs	r1, #4
 8000a36:	4618      	mov	r0, r3
 8000a38:	f003 fa2e 	bl	8003e98 <HAL_RCC_ClockConfig>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if(ret != HAL_OK)
 8000a42:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <SystemClock_Config+0xea>
	{
	Error_Handler();
 8000a4a:	f000 f8ff 	bl	8000c4c <Error_Handler>
		- Enabling the I/O Compensation Cell : setting bit[0] of register SYSCFG_CCCSR

		  To do this please uncomment the following code
	*/

	__HAL_RCC_CSI_ENABLE() ;
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <SystemClock_Config+0x128>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <SystemClock_Config+0x128>)
 8000a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a58:	6013      	str	r3, [r2, #0]

	__HAL_RCC_SYSCFG_CLK_ENABLE() ;
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <SystemClock_Config+0x128>)
 8000a5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a60:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <SystemClock_Config+0x128>)
 8000a62:	f043 0302 	orr.w	r3, r3, #2
 8000a66:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a6a:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <SystemClock_Config+0x128>)
 8000a6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a70:	f003 0302 	and.w	r3, r3, #2
 8000a74:	603b      	str	r3, [r7, #0]
 8000a76:	683b      	ldr	r3, [r7, #0]

	HAL_EnableCompensationCell();
 8000a78:	f000 ff5a 	bl	8001930 <HAL_EnableCompensationCell>

}
 8000a7c:	bf00      	nop
 8000a7e:	3778      	adds	r7, #120	; 0x78
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	58000400 	.word	0x58000400
 8000a88:	58024800 	.word	0x58024800
 8000a8c:	58024400 	.word	0x58024400

08000a90 <MX_UART8_Init>:
//	Error_Handler();
//	}
//}

static void MX_UART8_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  huart8.Instance = UART8;
 8000a94:	4b22      	ldr	r3, [pc, #136]	; (8000b20 <MX_UART8_Init+0x90>)
 8000a96:	4a23      	ldr	r2, [pc, #140]	; (8000b24 <MX_UART8_Init+0x94>)
 8000a98:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8000a9a:	4b21      	ldr	r3, [pc, #132]	; (8000b20 <MX_UART8_Init+0x90>)
 8000a9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa0:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa2:	4b1f      	ldr	r3, [pc, #124]	; (8000b20 <MX_UART8_Init+0x90>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000aa8:	4b1d      	ldr	r3, [pc, #116]	; (8000b20 <MX_UART8_Init+0x90>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000aae:	4b1c      	ldr	r3, [pc, #112]	; (8000b20 <MX_UART8_Init+0x90>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000ab4:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <MX_UART8_Init+0x90>)
 8000ab6:	220c      	movs	r2, #12
 8000ab8:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aba:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <MX_UART8_Init+0x90>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac0:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <MX_UART8_Init+0x90>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ac6:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <MX_UART8_Init+0x90>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000acc:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <MX_UART8_Init+0x90>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ad2:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <MX_UART8_Init+0x90>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000ad8:	4811      	ldr	r0, [pc, #68]	; (8000b20 <MX_UART8_Init+0x90>)
 8000ada:	f005 f8fb 	bl	8005cd4 <HAL_UART_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8000ae4:	f000 f8b2 	bl	8000c4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ae8:	2100      	movs	r1, #0
 8000aea:	480d      	ldr	r0, [pc, #52]	; (8000b20 <MX_UART8_Init+0x90>)
 8000aec:	f006 fc39 	bl	8007362 <HAL_UARTEx_SetTxFifoThreshold>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8000af6:	f000 f8a9 	bl	8000c4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000afa:	2100      	movs	r1, #0
 8000afc:	4808      	ldr	r0, [pc, #32]	; (8000b20 <MX_UART8_Init+0x90>)
 8000afe:	f006 fc6e 	bl	80073de <HAL_UARTEx_SetRxFifoThreshold>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8000b08:	f000 f8a0 	bl	8000c4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000b0c:	4804      	ldr	r0, [pc, #16]	; (8000b20 <MX_UART8_Init+0x90>)
 8000b0e:	f006 fbef 	bl	80072f0 <HAL_UARTEx_DisableFifoMode>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8000b18:	f000 f898 	bl	8000c4c <Error_Handler>
  }
}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	2400009c 	.word	0x2400009c
 8000b24:	40007c00 	.word	0x40007c00

08000b28 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08c      	sub	sp, #48	; 0x30
 8000b2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2e:	f107 031c 	add.w	r3, r7, #28
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
 8000b3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b3e:	4b41      	ldr	r3, [pc, #260]	; (8000c44 <MX_GPIO_Init+0x11c>)
 8000b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b44:	4a3f      	ldr	r2, [pc, #252]	; (8000c44 <MX_GPIO_Init+0x11c>)
 8000b46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b4e:	4b3d      	ldr	r3, [pc, #244]	; (8000c44 <MX_GPIO_Init+0x11c>)
 8000b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b58:	61bb      	str	r3, [r7, #24]
 8000b5a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000b5c:	4b39      	ldr	r3, [pc, #228]	; (8000c44 <MX_GPIO_Init+0x11c>)
 8000b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b62:	4a38      	ldr	r2, [pc, #224]	; (8000c44 <MX_GPIO_Init+0x11c>)
 8000b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b6c:	4b35      	ldr	r3, [pc, #212]	; (8000c44 <MX_GPIO_Init+0x11c>)
 8000b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b76:	617b      	str	r3, [r7, #20]
 8000b78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b7a:	4b32      	ldr	r3, [pc, #200]	; (8000c44 <MX_GPIO_Init+0x11c>)
 8000b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b80:	4a30      	ldr	r2, [pc, #192]	; (8000c44 <MX_GPIO_Init+0x11c>)
 8000b82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b8a:	4b2e      	ldr	r3, [pc, #184]	; (8000c44 <MX_GPIO_Init+0x11c>)
 8000b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b98:	4b2a      	ldr	r3, [pc, #168]	; (8000c44 <MX_GPIO_Init+0x11c>)
 8000b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9e:	4a29      	ldr	r2, [pc, #164]	; (8000c44 <MX_GPIO_Init+0x11c>)
 8000ba0:	f043 0320 	orr.w	r3, r3, #32
 8000ba4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ba8:	4b26      	ldr	r3, [pc, #152]	; (8000c44 <MX_GPIO_Init+0x11c>)
 8000baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bae:	f003 0320 	and.w	r3, r3, #32
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000bb6:	4b23      	ldr	r3, [pc, #140]	; (8000c44 <MX_GPIO_Init+0x11c>)
 8000bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bbc:	4a21      	ldr	r2, [pc, #132]	; (8000c44 <MX_GPIO_Init+0x11c>)
 8000bbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bc6:	4b1f      	ldr	r3, [pc, #124]	; (8000c44 <MX_GPIO_Init+0x11c>)
 8000bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd4:	4b1b      	ldr	r3, [pc, #108]	; (8000c44 <MX_GPIO_Init+0x11c>)
 8000bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bda:	4a1a      	ldr	r2, [pc, #104]	; (8000c44 <MX_GPIO_Init+0x11c>)
 8000bdc:	f043 0302 	orr.w	r3, r3, #2
 8000be0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000be4:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <MX_GPIO_Init+0x11c>)
 8000be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bea:	f003 0302 	and.w	r3, r3, #2
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bf2:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <MX_GPIO_Init+0x11c>)
 8000bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf8:	4a12      	ldr	r2, [pc, #72]	; (8000c44 <MX_GPIO_Init+0x11c>)
 8000bfa:	f043 0308 	orr.w	r3, r3, #8
 8000bfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c02:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <MX_GPIO_Init+0x11c>)
 8000c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c08:	f003 0308 	and.w	r3, r3, #8
 8000c0c:	603b      	str	r3, [r7, #0]
 8000c0e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000c10:	2200      	movs	r2, #0
 8000c12:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000c16:	480c      	ldr	r0, [pc, #48]	; (8000c48 <MX_GPIO_Init+0x120>)
 8000c18:	f001 ffc6 	bl	8002ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PI12 PI13 PI14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000c1c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c22:	2301      	movs	r3, #1
 8000c24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c2e:	f107 031c 	add.w	r3, r7, #28
 8000c32:	4619      	mov	r1, r3
 8000c34:	4804      	ldr	r0, [pc, #16]	; (8000c48 <MX_GPIO_Init+0x120>)
 8000c36:	f001 fcfd 	bl	8002634 <HAL_GPIO_Init>

}
 8000c3a:	bf00      	nop
 8000c3c:	3730      	adds	r7, #48	; 0x30
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	58024400 	.word	0x58024400
 8000c48:	58022000 	.word	0x58022000

08000c4c <Error_Handler>:

void Error_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0

}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
	...

08000c5c <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0

  hqspi.Instance = QUADSPI;
 8000c60:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <MX_QUADSPI_Init+0x4c>)
 8000c62:	4a12      	ldr	r2, [pc, #72]	; (8000cac <MX_QUADSPI_Init+0x50>)
 8000c64:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000c66:	4b10      	ldr	r3, [pc, #64]	; (8000ca8 <MX_QUADSPI_Init+0x4c>)
 8000c68:	2202      	movs	r2, #2
 8000c6a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000c6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <MX_QUADSPI_Init+0x4c>)
 8000c6e:	2204      	movs	r2, #4
 8000c70:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000c72:	4b0d      	ldr	r3, [pc, #52]	; (8000ca8 <MX_QUADSPI_Init+0x4c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 25;
 8000c78:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <MX_QUADSPI_Init+0x4c>)
 8000c7a:	2219      	movs	r2, #25
 8000c7c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000c7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <MX_QUADSPI_Init+0x4c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000c84:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <MX_QUADSPI_Init+0x4c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000c8a:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <MX_QUADSPI_Init+0x4c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000c90:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <MX_QUADSPI_Init+0x4c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000c96:	4804      	ldr	r0, [pc, #16]	; (8000ca8 <MX_QUADSPI_Init+0x4c>)
 8000c98:	f002 f828 	bl	8002cec <HAL_QSPI_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d000      	beq.n	8000ca4 <MX_QUADSPI_Init+0x48>
  {
	  while(1);
 8000ca2:	e7fe      	b.n	8000ca2 <MX_QUADSPI_Init+0x46>
    Error_Handler();
  }

}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	2400012c 	.word	0x2400012c
 8000cac:	52005000 	.word	0x52005000

08000cb0 <HAL_QSPI_MspInit>:
#define QSPI_CLK_GPIO_Port GPIOB
#define QSPI_BK1_IO0_Pin GPIO_PIN_11
#define QSPI_BK1_IO0_GPIO_Port GPIOD

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08e      	sub	sp, #56	; 0x38
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a6a      	ldr	r2, [pc, #424]	; (8000e78 <HAL_QSPI_MspInit+0x1c8>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	f040 80cd 	bne.w	8000e6e <HAL_QSPI_MspInit+0x1be>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000cd4:	4b69      	ldr	r3, [pc, #420]	; (8000e7c <HAL_QSPI_MspInit+0x1cc>)
 8000cd6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000cda:	4a68      	ldr	r2, [pc, #416]	; (8000e7c <HAL_QSPI_MspInit+0x1cc>)
 8000cdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce0:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000ce4:	4b65      	ldr	r3, [pc, #404]	; (8000e7c <HAL_QSPI_MspInit+0x1cc>)
 8000ce6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cee:	623b      	str	r3, [r7, #32]
 8000cf0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cf2:	4b62      	ldr	r3, [pc, #392]	; (8000e7c <HAL_QSPI_MspInit+0x1cc>)
 8000cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf8:	4a60      	ldr	r2, [pc, #384]	; (8000e7c <HAL_QSPI_MspInit+0x1cc>)
 8000cfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d02:	4b5e      	ldr	r3, [pc, #376]	; (8000e7c <HAL_QSPI_MspInit+0x1cc>)
 8000d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d0c:	61fb      	str	r3, [r7, #28]
 8000d0e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d10:	4b5a      	ldr	r3, [pc, #360]	; (8000e7c <HAL_QSPI_MspInit+0x1cc>)
 8000d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d16:	4a59      	ldr	r2, [pc, #356]	; (8000e7c <HAL_QSPI_MspInit+0x1cc>)
 8000d18:	f043 0320 	orr.w	r3, r3, #32
 8000d1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d20:	4b56      	ldr	r3, [pc, #344]	; (8000e7c <HAL_QSPI_MspInit+0x1cc>)
 8000d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d26:	f003 0320 	and.w	r3, r3, #32
 8000d2a:	61bb      	str	r3, [r7, #24]
 8000d2c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d2e:	4b53      	ldr	r3, [pc, #332]	; (8000e7c <HAL_QSPI_MspInit+0x1cc>)
 8000d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d34:	4a51      	ldr	r2, [pc, #324]	; (8000e7c <HAL_QSPI_MspInit+0x1cc>)
 8000d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d3e:	4b4f      	ldr	r3, [pc, #316]	; (8000e7c <HAL_QSPI_MspInit+0x1cc>)
 8000d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d48:	617b      	str	r3, [r7, #20]
 8000d4a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4c:	4b4b      	ldr	r3, [pc, #300]	; (8000e7c <HAL_QSPI_MspInit+0x1cc>)
 8000d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d52:	4a4a      	ldr	r2, [pc, #296]	; (8000e7c <HAL_QSPI_MspInit+0x1cc>)
 8000d54:	f043 0302 	orr.w	r3, r3, #2
 8000d58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d5c:	4b47      	ldr	r3, [pc, #284]	; (8000e7c <HAL_QSPI_MspInit+0x1cc>)
 8000d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d6a:	4b44      	ldr	r3, [pc, #272]	; (8000e7c <HAL_QSPI_MspInit+0x1cc>)
 8000d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d70:	4a42      	ldr	r2, [pc, #264]	; (8000e7c <HAL_QSPI_MspInit+0x1cc>)
 8000d72:	f043 0308 	orr.w	r3, r3, #8
 8000d76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d7a:	4b40      	ldr	r3, [pc, #256]	; (8000e7c <HAL_QSPI_MspInit+0x1cc>)
 8000d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d80:	f003 0308 	and.w	r3, r3, #8
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	68fb      	ldr	r3, [r7, #12]
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_BK2_IO2_Pin|QSPI_BK2_IO3_Pin;
 8000d88:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	2300      	movs	r3, #0
 8000d98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d9a:	2309      	movs	r3, #9
 8000d9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da2:	4619      	mov	r1, r3
 8000da4:	4836      	ldr	r0, [pc, #216]	; (8000e80 <HAL_QSPI_MspInit+0x1d0>)
 8000da6:	f001 fc45 	bl	8002634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8000daa:	2340      	movs	r3, #64	; 0x40
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dae:	2302      	movs	r3, #2
 8000db0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	2300      	movs	r3, #0
 8000db8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000dba:	230a      	movs	r3, #10
 8000dbc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8000dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	482e      	ldr	r0, [pc, #184]	; (8000e80 <HAL_QSPI_MspInit+0x1d0>)
 8000dc6:	f001 fc35 	bl	8002634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin|QSPI_BK1_IO2_Pin;
 8000dca:	23c0      	movs	r3, #192	; 0xc0
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000dda:	2309      	movs	r3, #9
 8000ddc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de2:	4619      	mov	r1, r3
 8000de4:	4827      	ldr	r0, [pc, #156]	; (8000e84 <HAL_QSPI_MspInit+0x1d4>)
 8000de6:	f001 fc25 	bl	8002634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin;
 8000dea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	2302      	movs	r3, #2
 8000df2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000dfc:	230a      	movs	r3, #10
 8000dfe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO1_GPIO_Port, &GPIO_InitStruct);
 8000e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e04:	4619      	mov	r1, r3
 8000e06:	481f      	ldr	r0, [pc, #124]	; (8000e84 <HAL_QSPI_MspInit+0x1d4>)
 8000e08:	f001 fc14 	bl	8002634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK2_IO0_Pin|QSPI_BK2_IO1_Pin;
 8000e0c:	230c      	movs	r3, #12
 8000e0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e10:	2302      	movs	r3, #2
 8000e12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e1c:	2309      	movs	r3, #9
 8000e1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e24:	4619      	mov	r1, r3
 8000e26:	4818      	ldr	r0, [pc, #96]	; (8000e88 <HAL_QSPI_MspInit+0x1d8>)
 8000e28:	f001 fc04 	bl	8002634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8000e2c:	2304      	movs	r3, #4
 8000e2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e30:	2302      	movs	r3, #2
 8000e32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e3c:	2309      	movs	r3, #9
 8000e3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8000e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e44:	4619      	mov	r1, r3
 8000e46:	4811      	ldr	r0, [pc, #68]	; (8000e8c <HAL_QSPI_MspInit+0x1dc>)
 8000e48:	f001 fbf4 	bl	8002634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin;
 8000e4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	2302      	movs	r3, #2
 8000e54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e5e:	2309      	movs	r3, #9
 8000e60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO0_GPIO_Port, &GPIO_InitStruct);
 8000e62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e66:	4619      	mov	r1, r3
 8000e68:	4809      	ldr	r0, [pc, #36]	; (8000e90 <HAL_QSPI_MspInit+0x1e0>)
 8000e6a:	f001 fbe3 	bl	8002634 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000e6e:	bf00      	nop
 8000e70:	3738      	adds	r7, #56	; 0x38
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	52005000 	.word	0x52005000
 8000e7c:	58024400 	.word	0x58024400
 8000e80:	58021800 	.word	0x58021800
 8000e84:	58021400 	.word	0x58021400
 8000e88:	58021c00 	.word	0x58021c00
 8000e8c:	58020400 	.word	0x58020400
 8000e90:	58020c00 	.word	0x58020c00

08000e94 <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a12      	ldr	r2, [pc, #72]	; (8000eec <HAL_QSPI_MspDeInit+0x58>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d11e      	bne.n	8000ee4 <HAL_QSPI_MspDeInit+0x50>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8000ea6:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <HAL_QSPI_MspDeInit+0x5c>)
 8000ea8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000eac:	4a10      	ldr	r2, [pc, #64]	; (8000ef0 <HAL_QSPI_MspDeInit+0x5c>)
 8000eae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000eb2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    HAL_GPIO_DeInit(GPIOG, QSPI_BK2_IO2_Pin|QSPI_BK2_IO3_Pin|QSPI_BK1_NCS_Pin);
 8000eb6:	f244 2140 	movw	r1, #16960	; 0x4240
 8000eba:	480e      	ldr	r0, [pc, #56]	; (8000ef4 <HAL_QSPI_MspDeInit+0x60>)
 8000ebc:	f001 fd6a 	bl	8002994 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOF, QSPI_BK1_IO3_Pin|QSPI_BK1_IO2_Pin|QSPI_BK1_IO1_Pin);
 8000ec0:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8000ec4:	480c      	ldr	r0, [pc, #48]	; (8000ef8 <HAL_QSPI_MspDeInit+0x64>)
 8000ec6:	f001 fd65 	bl	8002994 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOH, QSPI_BK2_IO0_Pin|QSPI_BK2_IO1_Pin);
 8000eca:	210c      	movs	r1, #12
 8000ecc:	480b      	ldr	r0, [pc, #44]	; (8000efc <HAL_QSPI_MspDeInit+0x68>)
 8000ece:	f001 fd61 	bl	8002994 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(QSPI_CLK_GPIO_Port, QSPI_CLK_Pin);
 8000ed2:	2104      	movs	r1, #4
 8000ed4:	480a      	ldr	r0, [pc, #40]	; (8000f00 <HAL_QSPI_MspDeInit+0x6c>)
 8000ed6:	f001 fd5d 	bl	8002994 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(QSPI_BK1_IO0_GPIO_Port, QSPI_BK1_IO0_Pin);
 8000eda:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ede:	4809      	ldr	r0, [pc, #36]	; (8000f04 <HAL_QSPI_MspDeInit+0x70>)
 8000ee0:	f001 fd58 	bl	8002994 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	52005000 	.word	0x52005000
 8000ef0:	58024400 	.word	0x58024400
 8000ef4:	58021800 	.word	0x58021800
 8000ef8:	58021400 	.word	0x58021400
 8000efc:	58021c00 	.word	0x58021c00
 8000f00:	58020400 	.word	0x58020400
 8000f04:	58020c00 	.word	0x58020c00

08000f08 <CSP_QUADSPI_Init>:

/* USER CODE BEGIN 1 */

/* QUADSPI init function */
uint8_t CSP_QUADSPI_Init(void) {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	//prepare QSPI peripheral for ST-Link Utility operations
	if (HAL_QSPI_DeInit(&hqspi) != HAL_OK) {
 8000f0c:	4813      	ldr	r0, [pc, #76]	; (8000f5c <CSP_QUADSPI_Init+0x54>)
 8000f0e:	f001 ff61 	bl	8002dd4 <HAL_QSPI_DeInit>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d000      	beq.n	8000f1a <CSP_QUADSPI_Init+0x12>
		while(1);
 8000f18:	e7fe      	b.n	8000f18 <CSP_QUADSPI_Init+0x10>
	}

	MX_QUADSPI_Init();
 8000f1a:	f7ff fe9f 	bl	8000c5c <MX_QUADSPI_Init>

	if (QSPI_ResetChip() != HAL_OK) {
 8000f1e:	f000 fa5d 	bl	80013dc <QSPI_ResetChip>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d000      	beq.n	8000f2a <CSP_QUADSPI_Init+0x22>
		while(1);
 8000f28:	e7fe      	b.n	8000f28 <CSP_QUADSPI_Init+0x20>
	}

	HAL_Delay(1);
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	f000 fcd0 	bl	80018d0 <HAL_Delay>

	if (QSPI_AutoPollingMemReady() != HAL_OK) {
 8000f30:	f000 f816 	bl	8000f60 <QSPI_AutoPollingMemReady>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d000      	beq.n	8000f3c <CSP_QUADSPI_Init+0x34>
		while(1);
 8000f3a:	e7fe      	b.n	8000f3a <CSP_QUADSPI_Init+0x32>
	}

	if (QSPI_WriteEnable() != HAL_OK) {
 8000f3c:	f000 f848 	bl	8000fd0 <QSPI_WriteEnable>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d000      	beq.n	8000f48 <CSP_QUADSPI_Init+0x40>
		while(1);
 8000f46:	e7fe      	b.n	8000f46 <CSP_QUADSPI_Init+0x3e>

	}

	if (QSPI_Configuration() != HAL_OK) {
 8000f48:	f000 f88c 	bl	8001064 <QSPI_Configuration>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d000      	beq.n	8000f54 <CSP_QUADSPI_Init+0x4c>
		while(1);
 8000f52:	e7fe      	b.n	8000f52 <CSP_QUADSPI_Init+0x4a>
	}

	return HAL_OK;
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	2400012c 	.word	0x2400012c

08000f60 <QSPI_AutoPollingMemReady>:
			}

	return HAL_OK;
}

uint8_t QSPI_AutoPollingMemReady(void) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b094      	sub	sp, #80	; 0x50
 8000f64:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;
	 QSPI_AutoPollingTypeDef sConfig;

	/* Configure automatic polling mode to wait for memory ready ------ */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000f66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f6a:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.Instruction = READ_STATUS_REG_CMD;
 8000f6c:	2305      	movs	r3, #5
 8000f6e:	61bb      	str	r3, [r7, #24]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000f70:	2300      	movs	r3, #0
 8000f72:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000f74:	2300      	movs	r3, #0
 8000f76:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000f78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DummyCycles = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000f82:	2300      	movs	r3, #0
 8000f84:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000f86:	2300      	movs	r3, #0
 8000f88:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	64fb      	str	r3, [r7, #76]	; 0x4c

	sConfig.Match = 0x00;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	603b      	str	r3, [r7, #0]
	sConfig.Mask = 0x01;
 8000f92:	2301      	movs	r3, #1
 8000f94:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	60fb      	str	r3, [r7, #12]
	sConfig.Interval = 0x10;
 8000f9e:	2310      	movs	r3, #16
 8000fa0:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000fa2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fa6:	617b      	str	r3, [r7, #20]

	if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 8000fa8:	463a      	mov	r2, r7
 8000faa:	f107 0118 	add.w	r1, r7, #24
 8000fae:	f241 3388 	movw	r3, #5000	; 0x1388
 8000fb2:	4806      	ldr	r0, [pc, #24]	; (8000fcc <QSPI_AutoPollingMemReady+0x6c>)
 8000fb4:	f002 f8bb 	bl	800312e <HAL_QSPI_AutoPolling>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <QSPI_AutoPollingMemReady+0x62>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e000      	b.n	8000fc4 <QSPI_AutoPollingMemReady+0x64>
	}

	return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3750      	adds	r7, #80	; 0x50
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	2400012c 	.word	0x2400012c

08000fd0 <QSPI_WriteEnable>:

static uint8_t QSPI_WriteEnable(void) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b094      	sub	sp, #80	; 0x50
 8000fd4:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	QSPI_AutoPollingTypeDef sConfig;

	/* Enable write operations ------------------------------------------ */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000fd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fda:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.Instruction = WRITE_ENABLE_CMD;
 8000fdc:	2306      	movs	r3, #6
 8000fde:	61bb      	str	r3, [r7, #24]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DataMode = QSPI_DATA_NONE;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DummyCycles = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000ffc:	f107 0318 	add.w	r3, r7, #24
 8001000:	f241 3288 	movw	r2, #5000	; 0x1388
 8001004:	4619      	mov	r1, r3
 8001006:	4816      	ldr	r0, [pc, #88]	; (8001060 <QSPI_WriteEnable+0x90>)
 8001008:	f001 ff04 	bl	8002e14 <HAL_QSPI_Command>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <QSPI_WriteEnable+0x46>
			!= HAL_OK) {
		return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e01f      	b.n	8001056 <QSPI_WriteEnable+0x86>
	}

	/* Configure automatic polling mode to wait for write enabling ---- */
	sConfig.Match = 0x02;
 8001016:	2302      	movs	r3, #2
 8001018:	603b      	str	r3, [r7, #0]
	sConfig.Mask = 0x02;
 800101a:	2302      	movs	r3, #2
 800101c:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
 8001022:	2301      	movs	r3, #1
 8001024:	60fb      	str	r3, [r7, #12]
	sConfig.Interval = 0x10;
 8001026:	2310      	movs	r3, #16
 8001028:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 800102a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800102e:	617b      	str	r3, [r7, #20]

	sCommand.Instruction = READ_STATUS_REG_CMD;
 8001030:	2305      	movs	r3, #5
 8001032:	61bb      	str	r3, [r7, #24]
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8001034:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001038:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 800103a:	463a      	mov	r2, r7
 800103c:	f107 0118 	add.w	r1, r7, #24
 8001040:	f241 3388 	movw	r3, #5000	; 0x1388
 8001044:	4806      	ldr	r0, [pc, #24]	; (8001060 <QSPI_WriteEnable+0x90>)
 8001046:	f002 f872 	bl	800312e <HAL_QSPI_AutoPolling>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <QSPI_WriteEnable+0x84>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e000      	b.n	8001056 <QSPI_WriteEnable+0x86>
	}

	return HAL_OK;
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3750      	adds	r7, #80	; 0x50
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	2400012c 	.word	0x2400012c

08001064 <QSPI_Configuration>:
/*Enable quad mode and set dummy cycles count*/
uint8_t QSPI_Configuration(void) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b090      	sub	sp, #64	; 0x40
 8001068:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;
	uint8_t test_buffer[4] = { 0 };
 800106a:	2300      	movs	r3, #0
 800106c:	607b      	str	r3, [r7, #4]
	/*read status register*/
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800106e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001072:	623b      	str	r3, [r7, #32]
	sCommand.Instruction = READ_STATUS_REG_CMD;
 8001074:	2305      	movs	r3, #5
 8001076:	60bb      	str	r3, [r7, #8]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001078:	2300      	movs	r3, #0
 800107a:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800107c:	2300      	movs	r3, #0
 800107e:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8001080:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001084:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	61fb      	str	r3, [r7, #28]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800108a:	2300      	movs	r3, #0
 800108c:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800108e:	2300      	movs	r3, #0
 8001090:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001092:	2300      	movs	r3, #0
 8001094:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.NbData = 1;
 8001096:	2301      	movs	r3, #1
 8001098:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800109a:	f107 0308 	add.w	r3, r7, #8
 800109e:	f241 3288 	movw	r2, #5000	; 0x1388
 80010a2:	4619      	mov	r1, r3
 80010a4:	4843      	ldr	r0, [pc, #268]	; (80011b4 <QSPI_Configuration+0x150>)
 80010a6:	f001 feb5 	bl	8002e14 <HAL_QSPI_Command>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <QSPI_Configuration+0x50>
			!= HAL_OK) {
		return HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e07a      	b.n	80011aa <QSPI_Configuration+0x146>
	}
	if (HAL_QSPI_Receive(&hqspi, test_buffer,
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80010ba:	4619      	mov	r1, r3
 80010bc:	483d      	ldr	r0, [pc, #244]	; (80011b4 <QSPI_Configuration+0x150>)
 80010be:	f001 ff99 	bl	8002ff4 <HAL_QSPI_Receive>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <QSPI_Configuration+0x68>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e06e      	b.n	80011aa <QSPI_Configuration+0x146>
	}
	/*read configuration register*/
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80010cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010d0:	623b      	str	r3, [r7, #32]
	sCommand.Instruction = READ_CONFIGURATION_REG_CMD;
 80010d2:	2315      	movs	r3, #21
 80010d4:	60bb      	str	r3, [r7, #8]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80010da:	2300      	movs	r3, #0
 80010dc:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DataMode = QSPI_DATA_1_LINE;
 80010de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61fb      	str	r3, [r7, #28]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80010e8:	2300      	movs	r3, #0
 80010ea:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80010ec:	2300      	movs	r3, #0
 80010ee:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80010f0:	2300      	movs	r3, #0
 80010f2:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.NbData = 1;
 80010f4:	2301      	movs	r3, #1
 80010f6:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80010f8:	f107 0308 	add.w	r3, r7, #8
 80010fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001100:	4619      	mov	r1, r3
 8001102:	482c      	ldr	r0, [pc, #176]	; (80011b4 <QSPI_Configuration+0x150>)
 8001104:	f001 fe86 	bl	8002e14 <HAL_QSPI_Command>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <QSPI_Configuration+0xae>
			!= HAL_OK) {
		return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e04b      	b.n	80011aa <QSPI_Configuration+0x146>
	}
	if (HAL_QSPI_Receive(&hqspi, &(test_buffer[1]),
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	3301      	adds	r3, #1
 8001116:	f241 3288 	movw	r2, #5000	; 0x1388
 800111a:	4619      	mov	r1, r3
 800111c:	4825      	ldr	r0, [pc, #148]	; (80011b4 <QSPI_Configuration+0x150>)
 800111e:	f001 ff69 	bl	8002ff4 <HAL_QSPI_Receive>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <QSPI_Configuration+0xc8>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e03e      	b.n	80011aa <QSPI_Configuration+0x146>
	}
	/*modify buffer to enable quad mode*/
	test_buffer[0] |= 0x40;
 800112c:	793b      	ldrb	r3, [r7, #4]
 800112e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001132:	b2db      	uxtb	r3, r3
 8001134:	713b      	strb	r3, [r7, #4]

	/*set dummy cycles*/
	test_buffer[1] |= 0xC0;
 8001136:	797b      	ldrb	r3, [r7, #5]
 8001138:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800113c:	b2db      	uxtb	r3, r3
 800113e:	717b      	strb	r3, [r7, #5]

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001140:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001144:	623b      	str	r3, [r7, #32]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8001146:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800114a:	617b      	str	r3, [r7, #20]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800114c:	2300      	movs	r3, #0
 800114e:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001150:	2300      	movs	r3, #0
 8001152:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001154:	2300      	movs	r3, #0
 8001156:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001158:	2300      	movs	r3, #0
 800115a:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.Instruction = WRITE_STATUS_REG_CMD;
 800115c:	2301      	movs	r3, #1
 800115e:	60bb      	str	r3, [r7, #8]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001160:	2300      	movs	r3, #0
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8001164:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001168:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
	sCommand.NbData = 2;
 800116e:	2302      	movs	r3, #2
 8001170:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001172:	f107 0308 	add.w	r3, r7, #8
 8001176:	f241 3288 	movw	r2, #5000	; 0x1388
 800117a:	4619      	mov	r1, r3
 800117c:	480d      	ldr	r0, [pc, #52]	; (80011b4 <QSPI_Configuration+0x150>)
 800117e:	f001 fe49 	bl	8002e14 <HAL_QSPI_Command>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <QSPI_Configuration+0x128>
			!= HAL_OK) {
		return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e00e      	b.n	80011aa <QSPI_Configuration+0x146>
	}

	if (HAL_QSPI_Transmit(&hqspi, test_buffer,
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001192:	4619      	mov	r1, r3
 8001194:	4807      	ldr	r0, [pc, #28]	; (80011b4 <QSPI_Configuration+0x150>)
 8001196:	f001 fe9b 	bl	8002ed0 <HAL_QSPI_Transmit>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d003      	beq.n	80011a8 <QSPI_Configuration+0x144>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		Error_Handler();
 80011a0:	f7ff fd54 	bl	8000c4c <Error_Handler>
		return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e000      	b.n	80011aa <QSPI_Configuration+0x146>
	}
	return HAL_OK;
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3740      	adds	r7, #64	; 0x40
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	2400012c 	.word	0x2400012c

080011b8 <CSP_QSPI_EraseSector>:

uint8_t CSP_QSPI_EraseSector(uint32_t EraseStartAddress, uint32_t EraseEndAddress) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b090      	sub	sp, #64	; 0x40
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]

	QSPI_CommandTypeDef sCommand;

	EraseStartAddress = EraseStartAddress
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	4b23      	ldr	r3, [pc, #140]	; (8001254 <CSP_QSPI_EraseSector+0x9c>)
 80011c6:	4013      	ands	r3, r2
 80011c8:	607b      	str	r3, [r7, #4]
			- EraseStartAddress % MEMORY_SECTOR_SIZE;

	/* Erasing Sequence -------------------------------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80011ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011ce:	623b      	str	r3, [r7, #32]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 80011d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011d4:	617b      	str	r3, [r7, #20]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80011da:	2300      	movs	r3, #0
 80011dc:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80011de:	2300      	movs	r3, #0
 80011e0:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80011e2:	2300      	movs	r3, #0
 80011e4:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.Instruction = SECTOR_ERASE_CMD;
 80011e6:	2320      	movs	r3, #32
 80011e8:	60bb      	str	r3, [r7, #8]
	sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 80011ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24

	sCommand.DataMode = QSPI_DATA_NONE;
 80011f0:	2300      	movs	r3, #0
 80011f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	61fb      	str	r3, [r7, #28]

	while (EraseEndAddress >= EraseStartAddress) {
 80011f8:	e022      	b.n	8001240 <CSP_QSPI_EraseSector+0x88>
		sCommand.Address = (EraseStartAddress & 0x0FFFFFFF);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001200:	60fb      	str	r3, [r7, #12]

		if (QSPI_WriteEnable() != HAL_OK) {
 8001202:	f7ff fee5 	bl	8000fd0 <QSPI_WriteEnable>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <CSP_QSPI_EraseSector+0x58>
			return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e01c      	b.n	800124a <CSP_QSPI_EraseSector+0x92>
		}

		if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001210:	f107 0308 	add.w	r3, r7, #8
 8001214:	f241 3288 	movw	r2, #5000	; 0x1388
 8001218:	4619      	mov	r1, r3
 800121a:	480f      	ldr	r0, [pc, #60]	; (8001258 <CSP_QSPI_EraseSector+0xa0>)
 800121c:	f001 fdfa 	bl	8002e14 <HAL_QSPI_Command>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <CSP_QSPI_EraseSector+0x72>
				!= HAL_OK) {
			return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e00f      	b.n	800124a <CSP_QSPI_EraseSector+0x92>
		}
		EraseStartAddress += MEMORY_SECTOR_SIZE;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001230:	607b      	str	r3, [r7, #4]

		if (QSPI_AutoPollingMemReady() != HAL_OK) {
 8001232:	f7ff fe95 	bl	8000f60 <QSPI_AutoPollingMemReady>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <CSP_QSPI_EraseSector+0x88>
			return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e004      	b.n	800124a <CSP_QSPI_EraseSector+0x92>
	while (EraseEndAddress >= EraseStartAddress) {
 8001240:	683a      	ldr	r2, [r7, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	429a      	cmp	r2, r3
 8001246:	d2d8      	bcs.n	80011fa <CSP_QSPI_EraseSector+0x42>
		}
	}

	return HAL_OK;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3740      	adds	r7, #64	; 0x40
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	fffff000 	.word	0xfffff000
 8001258:	2400012c 	.word	0x2400012c

0800125c <CSP_QSPI_WriteMemory>:

uint8_t CSP_QSPI_WriteMemory(uint8_t* buffer, uint32_t address,uint32_t buffer_size) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b096      	sub	sp, #88	; 0x58
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]

	QSPI_CommandTypeDef sCommand;
	uint32_t end_addr, current_size, current_addr;

	/* Calculation of the size between the write address and the end of the page */
	current_addr = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	653b      	str	r3, [r7, #80]	; 0x50


	//
	while (current_addr <= address) {
 800126c:	e003      	b.n	8001276 <CSP_QSPI_WriteMemory+0x1a>
		current_addr += MEMORY_PAGE_SIZE;
 800126e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001270:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001274:	653b      	str	r3, [r7, #80]	; 0x50
	while (current_addr <= address) {
 8001276:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	429a      	cmp	r2, r3
 800127c:	d9f7      	bls.n	800126e <CSP_QSPI_WriteMemory+0x12>
	}
	current_size = current_addr - address;
 800127e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check if the size of the data is less than the remaining place in the page */
	if (current_size > buffer_size) {
 8001286:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	429a      	cmp	r2, r3
 800128c:	d901      	bls.n	8001292 <CSP_QSPI_WriteMemory+0x36>
		current_size = buffer_size;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Initialize the adress variables */
	current_addr = address;
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	653b      	str	r3, [r7, #80]	; 0x50
	end_addr = address + buffer_size;
 8001296:	68ba      	ldr	r2, [r7, #8]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4413      	add	r3, r2
 800129c:	64fb      	str	r3, [r7, #76]	; 0x4c

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800129e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 80012a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012a8:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80012aa:	2300      	movs	r3, #0
 80012ac:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	643b      	str	r3, [r7, #64]	; 0x40
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80012b2:	2300      	movs	r3, #0
 80012b4:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80012b6:	2300      	movs	r3, #0
 80012b8:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.Instruction = QUAD_IN_FAST_PROG_CMD;
 80012ba:	2338      	movs	r3, #56	; 0x38
 80012bc:	617b      	str	r3, [r7, #20]
	sCommand.AddressMode = QSPI_ADDRESS_4_LINES;
 80012be:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012c2:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DataMode = QSPI_DATA_4_LINES;
 80012c4:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80012c8:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.NbData = buffer_size;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.Address = address;
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	61bb      	str	r3, [r7, #24]
	sCommand.DummyCycles = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Perform the write page by page */
	do {
		sCommand.Address = current_addr;
 80012d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012d8:	61bb      	str	r3, [r7, #24]
		sCommand.NbData = current_size;
 80012da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012dc:	63fb      	str	r3, [r7, #60]	; 0x3c

		if (current_size == 0) {
 80012de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d101      	bne.n	80012e8 <CSP_QSPI_WriteMemory+0x8c>
			return HAL_OK;
 80012e4:	2300      	movs	r3, #0
 80012e6:	e03f      	b.n	8001368 <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Enable write operations */
		if (QSPI_WriteEnable() != HAL_OK) {
 80012e8:	f7ff fe72 	bl	8000fd0 <QSPI_WriteEnable>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <CSP_QSPI_WriteMemory+0x9a>
			return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e038      	b.n	8001368 <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Configure the command */
		if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80012f6:	f107 0314 	add.w	r3, r7, #20
 80012fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80012fe:	4619      	mov	r1, r3
 8001300:	481b      	ldr	r0, [pc, #108]	; (8001370 <CSP_QSPI_WriteMemory+0x114>)
 8001302:	f001 fd87 	bl	8002e14 <HAL_QSPI_Command>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <CSP_QSPI_WriteMemory+0xb4>
				!= HAL_OK) {

			return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e02b      	b.n	8001368 <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Transmission of the data */
		if (HAL_QSPI_Transmit(&hqspi, buffer, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8001310:	f241 3288 	movw	r2, #5000	; 0x1388
 8001314:	68f9      	ldr	r1, [r7, #12]
 8001316:	4816      	ldr	r0, [pc, #88]	; (8001370 <CSP_QSPI_WriteMemory+0x114>)
 8001318:	f001 fdda 	bl	8002ed0 <HAL_QSPI_Transmit>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <CSP_QSPI_WriteMemory+0xca>

			return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e020      	b.n	8001368 <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Configure automatic polling mode to wait for end of program */
		if (QSPI_AutoPollingMemReady() != HAL_OK) {
 8001326:	f7ff fe1b 	bl	8000f60 <QSPI_AutoPollingMemReady>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <CSP_QSPI_WriteMemory+0xd8>
			return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e019      	b.n	8001368 <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Update the address and size variables for next page programming */
		current_addr += current_size;
 8001334:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001336:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001338:	4413      	add	r3, r2
 800133a:	653b      	str	r3, [r7, #80]	; 0x50
		buffer += current_size;
 800133c:	68fa      	ldr	r2, [r7, #12]
 800133e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001340:	4413      	add	r3, r2
 8001342:	60fb      	str	r3, [r7, #12]
		current_size =
				((current_addr + MEMORY_PAGE_SIZE) > end_addr) ?
 8001344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001346:	f503 7380 	add.w	r3, r3, #256	; 0x100
						(end_addr - current_addr) : MEMORY_PAGE_SIZE;
 800134a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800134c:	429a      	cmp	r2, r3
 800134e:	d203      	bcs.n	8001358 <CSP_QSPI_WriteMemory+0xfc>
 8001350:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001352:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	e001      	b.n	800135c <CSP_QSPI_WriteMemory+0x100>
 8001358:	f44f 7380 	mov.w	r3, #256	; 0x100
		current_size =
 800135c:	657b      	str	r3, [r7, #84]	; 0x54
	} while (current_addr <= end_addr);
 800135e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001362:	429a      	cmp	r2, r3
 8001364:	d9b7      	bls.n	80012d6 <CSP_QSPI_WriteMemory+0x7a>

	return HAL_OK;
 8001366:	2300      	movs	r3, #0

}
 8001368:	4618      	mov	r0, r3
 800136a:	3758      	adds	r7, #88	; 0x58
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	2400012c 	.word	0x2400012c

08001374 <CSP_QSPI_EnableMemoryMappedMode>:


uint8_t CSP_QSPI_EnableMemoryMappedMode(void) {
 8001374:	b580      	push	{r7, lr}
 8001376:	b090      	sub	sp, #64	; 0x40
 8001378:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	QSPI_MemoryMappedTypeDef sMemMappedCfg;

	/* Enable Memory-Mapped mode-------------------------------------------------- */

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800137a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800137e:	623b      	str	r3, [r7, #32]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8001380:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001384:	617b      	str	r3, [r7, #20]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001386:	2300      	movs	r3, #0
 8001388:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800138a:	2300      	movs	r3, #0
 800138c:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800138e:	2300      	movs	r3, #0
 8001390:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001392:	2300      	movs	r3, #0
 8001394:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 8001396:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DataMode = QSPI_DATA_4_LINES;
 800139c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80013a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.NbData = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.Address = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
	sCommand.Instruction = QUAD_OUT_FAST_READ_CMD;
 80013aa:	236b      	movs	r3, #107	; 0x6b
 80013ac:	60bb      	str	r3, [r7, #8]
	sCommand.DummyCycles = DUMMY_CLOCK_CYCLES_READ_QUAD;
 80013ae:	230a      	movs	r3, #10
 80013b0:	61fb      	str	r3, [r7, #28]

	sMemMappedCfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 80013b2:	2300      	movs	r3, #0
 80013b4:	607b      	str	r3, [r7, #4]

	if (HAL_QSPI_MemoryMapped(&hqspi, &sCommand, &sMemMappedCfg) != HAL_OK) {
 80013b6:	463a      	mov	r2, r7
 80013b8:	f107 0308 	add.w	r3, r7, #8
 80013bc:	4619      	mov	r1, r3
 80013be:	4806      	ldr	r0, [pc, #24]	; (80013d8 <CSP_QSPI_EnableMemoryMappedMode+0x64>)
 80013c0:	f001 ff2c 	bl	800321c <HAL_QSPI_MemoryMapped>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <CSP_QSPI_EnableMemoryMappedMode+0x5a>
		return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e000      	b.n	80013d0 <CSP_QSPI_EnableMemoryMappedMode+0x5c>
	}
	return HAL_OK;
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3740      	adds	r7, #64	; 0x40
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	2400012c 	.word	0x2400012c

080013dc <QSPI_ResetChip>:

uint8_t QSPI_ResetChip() {
 80013dc:	b580      	push	{r7, lr}
 80013de:	b090      	sub	sp, #64	; 0x40
 80013e0:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	uint32_t temp = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Erasing Sequence -------------------------------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80013e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013ea:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 80013ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013f0:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80013f2:	2300      	movs	r3, #0
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80013f6:	2300      	movs	r3, #0
 80013f8:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80013fa:	2300      	movs	r3, #0
 80013fc:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80013fe:	2300      	movs	r3, #0
 8001400:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.Instruction = RESET_ENABLE_CMD;
 8001402:	2366      	movs	r3, #102	; 0x66
 8001404:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001406:	2300      	movs	r3, #0
 8001408:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 800140e:	2300      	movs	r3, #0
 8001410:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	f241 3288 	movw	r2, #5000	; 0x1388
 800141c:	4619      	mov	r1, r3
 800141e:	481d      	ldr	r0, [pc, #116]	; (8001494 <QSPI_ResetChip+0xb8>)
 8001420:	f001 fcf8 	bl	8002e14 <HAL_QSPI_Command>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <QSPI_ResetChip+0x52>
			!= HAL_OK) {
		return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e02e      	b.n	800148c <QSPI_ResetChip+0xb0>
	}
	for (temp = 0; temp < 0x2f; temp++) {
 800142e:	2300      	movs	r3, #0
 8001430:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001432:	e003      	b.n	800143c <QSPI_ResetChip+0x60>
		__NOP();
 8001434:	bf00      	nop
	for (temp = 0; temp < 0x2f; temp++) {
 8001436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001438:	3301      	adds	r3, #1
 800143a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800143c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800143e:	2b2e      	cmp	r3, #46	; 0x2e
 8001440:	d9f8      	bls.n	8001434 <QSPI_ResetChip+0x58>
	}

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001442:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001446:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8001448:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800144c:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800144e:	2300      	movs	r3, #0
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001452:	2300      	movs	r3, #0
 8001454:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001456:	2300      	movs	r3, #0
 8001458:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800145a:	2300      	movs	r3, #0
 800145c:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.Instruction = RESET_EXECUTE_CMD;
 800145e:	2399      	movs	r3, #153	; 0x99
 8001460:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001462:	2300      	movs	r3, #0
 8001464:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 800146a:	2300      	movs	r3, #0
 800146c:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001472:	1d3b      	adds	r3, r7, #4
 8001474:	f241 3288 	movw	r2, #5000	; 0x1388
 8001478:	4619      	mov	r1, r3
 800147a:	4806      	ldr	r0, [pc, #24]	; (8001494 <QSPI_ResetChip+0xb8>)
 800147c:	f001 fcca 	bl	8002e14 <HAL_QSPI_Command>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <QSPI_ResetChip+0xae>
			!= HAL_OK) {
		return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e000      	b.n	800148c <QSPI_ResetChip+0xb0>
	}
	return HAL_OK;
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	3740      	adds	r7, #64	; 0x40
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	2400012c 	.word	0x2400012c

08001498 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 800149e:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <HAL_MspInit+0x30>)
 80014a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014a4:	4a08      	ldr	r2, [pc, #32]	; (80014c8 <HAL_MspInit+0x30>)
 80014a6:	f043 0302 	orr.w	r3, r3, #2
 80014aa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <HAL_MspInit+0x30>)
 80014b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014b4:	f003 0302 	and.w	r3, r3, #2
 80014b8:	607b      	str	r3, [r7, #4]
 80014ba:	687b      	ldr	r3, [r7, #4]
	/* System interrupt init*/

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	58024400 	.word	0x58024400

080014cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b0ba      	sub	sp, #232	; 0xe8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	22c0      	movs	r2, #192	; 0xc0
 80014ea:	2100      	movs	r1, #0
 80014ec:	4618      	mov	r0, r3
 80014ee:	f006 f83b 	bl	8007568 <memset>
  if(huart->Instance==UART8)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a29      	ldr	r2, [pc, #164]	; (800159c <HAL_UART_MspInit+0xd0>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d14a      	bne.n	8001592 <HAL_UART_MspInit+0xc6>
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 80014fc:	2302      	movs	r3, #2
 80014fe:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001500:	2300      	movs	r3, #0
 8001502:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001506:	f107 0314 	add.w	r3, r7, #20
 800150a:	4618      	mov	r0, r3
 800150c:	f003 f850 	bl	80045b0 <HAL_RCCEx_PeriphCLKConfig>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001516:	f7ff fb99 	bl	8000c4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 800151a:	4b21      	ldr	r3, [pc, #132]	; (80015a0 <HAL_UART_MspInit+0xd4>)
 800151c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001520:	4a1f      	ldr	r2, [pc, #124]	; (80015a0 <HAL_UART_MspInit+0xd4>)
 8001522:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001526:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800152a:	4b1d      	ldr	r3, [pc, #116]	; (80015a0 <HAL_UART_MspInit+0xd4>)
 800152c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001530:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001534:	613b      	str	r3, [r7, #16]
 8001536:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001538:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <HAL_UART_MspInit+0xd4>)
 800153a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800153e:	4a18      	ldr	r2, [pc, #96]	; (80015a0 <HAL_UART_MspInit+0xd4>)
 8001540:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001544:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001548:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <HAL_UART_MspInit+0xd4>)
 800154a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800154e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
    /**UART8 GPIO Configuration
    PJ9     ------> UART8_RX
    PJ8     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8001556:	f44f 7340 	mov.w	r3, #768	; 0x300
 800155a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155e:	2302      	movs	r3, #2
 8001560:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156a:	2300      	movs	r3, #0
 800156c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001570:	2308      	movs	r3, #8
 8001572:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001576:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800157a:	4619      	mov	r1, r3
 800157c:	4809      	ldr	r0, [pc, #36]	; (80015a4 <HAL_UART_MspInit+0xd8>)
 800157e:	f001 f859 	bl	8002634 <HAL_GPIO_Init>

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	2100      	movs	r1, #0
 8001586:	2053      	movs	r0, #83	; 0x53
 8001588:	f000 fabd 	bl	8001b06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 800158c:	2053      	movs	r0, #83	; 0x53
 800158e:	f000 fad4 	bl	8001b3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }

}
 8001592:	bf00      	nop
 8001594:	37e8      	adds	r7, #232	; 0xe8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40007c00 	.word	0x40007c00
 80015a0:	58024400 	.word	0x58024400
 80015a4:	58022400 	.word	0x58022400

080015a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015ac:	e7fe      	b.n	80015ac <NMI_Handler+0x4>

080015ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015b2:	e7fe      	b.n	80015b2 <HardFault_Handler+0x4>

080015b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <MemManage_Handler+0x4>

080015ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015be:	e7fe      	b.n	80015be <BusFault_Handler+0x4>

080015c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <UsageFault_Handler+0x4>

080015c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015f4:	f000 f94c 	bl	8001890 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015f8:	bf00      	nop
 80015fa:	bd80      	pop	{r7, pc}

080015fc <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8001600:	4802      	ldr	r0, [pc, #8]	; (800160c <UART8_IRQHandler+0x10>)
 8001602:	f004 fc4d 	bl	8005ea0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	2400009c 	.word	0x2400009c

08001610 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	e00a      	b.n	8001638 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001622:	f3af 8000 	nop.w
 8001626:	4601      	mov	r1, r0
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	1c5a      	adds	r2, r3, #1
 800162c:	60ba      	str	r2, [r7, #8]
 800162e:	b2ca      	uxtb	r2, r1
 8001630:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	3301      	adds	r3, #1
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	697a      	ldr	r2, [r7, #20]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	429a      	cmp	r2, r3
 800163e:	dbf0      	blt.n	8001622 <_read+0x12>
	}

return len;
 8001640:	687b      	ldr	r3, [r7, #4]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b086      	sub	sp, #24
 800164e:	af00      	add	r7, sp, #0
 8001650:	60f8      	str	r0, [r7, #12]
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	e009      	b.n	8001670 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	1c5a      	adds	r2, r3, #1
 8001660:	60ba      	str	r2, [r7, #8]
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff f84d 	bl	8000704 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	3301      	adds	r3, #1
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	697a      	ldr	r2, [r7, #20]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	429a      	cmp	r2, r3
 8001676:	dbf1      	blt.n	800165c <_write+0x12>
	}
	return len;
 8001678:	687b      	ldr	r3, [r7, #4]
}
 800167a:	4618      	mov	r0, r3
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <_close>:

int _close(int file)
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
	return -1;
 800168a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800168e:	4618      	mov	r0, r3
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800169a:	b480      	push	{r7}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
 80016a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016aa:	605a      	str	r2, [r3, #4]
	return 0;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <_isatty>:

int _isatty(int file)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b083      	sub	sp, #12
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
	return 1;
 80016c2:	2301      	movs	r3, #1
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
	return 0;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3714      	adds	r7, #20
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
	...

080016ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016f4:	4a14      	ldr	r2, [pc, #80]	; (8001748 <_sbrk+0x5c>)
 80016f6:	4b15      	ldr	r3, [pc, #84]	; (800174c <_sbrk+0x60>)
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001700:	4b13      	ldr	r3, [pc, #76]	; (8001750 <_sbrk+0x64>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d102      	bne.n	800170e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001708:	4b11      	ldr	r3, [pc, #68]	; (8001750 <_sbrk+0x64>)
 800170a:	4a12      	ldr	r2, [pc, #72]	; (8001754 <_sbrk+0x68>)
 800170c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800170e:	4b10      	ldr	r3, [pc, #64]	; (8001750 <_sbrk+0x64>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4413      	add	r3, r2
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	429a      	cmp	r2, r3
 800171a:	d207      	bcs.n	800172c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800171c:	f005 feec 	bl	80074f8 <__errno>
 8001720:	4603      	mov	r3, r0
 8001722:	220c      	movs	r2, #12
 8001724:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001726:	f04f 33ff 	mov.w	r3, #4294967295
 800172a:	e009      	b.n	8001740 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800172c:	4b08      	ldr	r3, [pc, #32]	; (8001750 <_sbrk+0x64>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001732:	4b07      	ldr	r3, [pc, #28]	; (8001750 <_sbrk+0x64>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4413      	add	r3, r2
 800173a:	4a05      	ldr	r2, [pc, #20]	; (8001750 <_sbrk+0x64>)
 800173c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800173e:	68fb      	ldr	r3, [r7, #12]
}
 8001740:	4618      	mov	r0, r3
 8001742:	3718      	adds	r7, #24
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	24040000 	.word	0x24040000
 800174c:	00000400 	.word	0x00000400
 8001750:	24000090 	.word	0x24000090
 8001754:	24000190 	.word	0x24000190

08001758 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001758:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001790 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800175c:	f7fe ff38 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001760:	480c      	ldr	r0, [pc, #48]	; (8001794 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001762:	490d      	ldr	r1, [pc, #52]	; (8001798 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001764:	4a0d      	ldr	r2, [pc, #52]	; (800179c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001768:	e002      	b.n	8001770 <LoopCopyDataInit>

0800176a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800176a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800176c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800176e:	3304      	adds	r3, #4

08001770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001774:	d3f9      	bcc.n	800176a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001776:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001778:	4c0a      	ldr	r4, [pc, #40]	; (80017a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800177a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800177c:	e001      	b.n	8001782 <LoopFillZerobss>

0800177e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800177e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001780:	3204      	adds	r2, #4

08001782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001784:	d3fb      	bcc.n	800177e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001786:	f005 febd 	bl	8007504 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800178a:	f7fe ffd1 	bl	8000730 <main>
  bx  lr
 800178e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001790:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8001794:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001798:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 800179c:	08007fd8 	.word	0x08007fd8
  ldr r2, =_sbss
 80017a0:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 80017a4:	2400018c 	.word	0x2400018c

080017a8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017a8:	e7fe      	b.n	80017a8 <ADC3_IRQHandler>
	...

080017ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017b2:	2003      	movs	r0, #3
 80017b4:	f000 f99c 	bl	8001af0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80017b8:	f002 fd24 	bl	8004204 <HAL_RCC_GetSysClockFreq>
 80017bc:	4602      	mov	r2, r0
 80017be:	4b15      	ldr	r3, [pc, #84]	; (8001814 <HAL_Init+0x68>)
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	0a1b      	lsrs	r3, r3, #8
 80017c4:	f003 030f 	and.w	r3, r3, #15
 80017c8:	4913      	ldr	r1, [pc, #76]	; (8001818 <HAL_Init+0x6c>)
 80017ca:	5ccb      	ldrb	r3, [r1, r3]
 80017cc:	f003 031f 	and.w	r3, r3, #31
 80017d0:	fa22 f303 	lsr.w	r3, r2, r3
 80017d4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017d6:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <HAL_Init+0x68>)
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	f003 030f 	and.w	r3, r3, #15
 80017de:	4a0e      	ldr	r2, [pc, #56]	; (8001818 <HAL_Init+0x6c>)
 80017e0:	5cd3      	ldrb	r3, [r2, r3]
 80017e2:	f003 031f 	and.w	r3, r3, #31
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	fa22 f303 	lsr.w	r3, r2, r3
 80017ec:	4a0b      	ldr	r2, [pc, #44]	; (800181c <HAL_Init+0x70>)
 80017ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80017f0:	4a0b      	ldr	r2, [pc, #44]	; (8001820 <HAL_Init+0x74>)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017f6:	2000      	movs	r0, #0
 80017f8:	f000 f814 	bl	8001824 <HAL_InitTick>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e002      	b.n	800180c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001806:	f7ff fe47 	bl	8001498 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800180a:	2300      	movs	r3, #0
}
 800180c:	4618      	mov	r0, r3
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	58024400 	.word	0x58024400
 8001818:	08007f2c 	.word	0x08007f2c
 800181c:	24000004 	.word	0x24000004
 8001820:	24000000 	.word	0x24000000

08001824 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800182c:	4b15      	ldr	r3, [pc, #84]	; (8001884 <HAL_InitTick+0x60>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d101      	bne.n	8001838 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e021      	b.n	800187c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001838:	4b13      	ldr	r3, [pc, #76]	; (8001888 <HAL_InitTick+0x64>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	4b11      	ldr	r3, [pc, #68]	; (8001884 <HAL_InitTick+0x60>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	4619      	mov	r1, r3
 8001842:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001846:	fbb3 f3f1 	udiv	r3, r3, r1
 800184a:	fbb2 f3f3 	udiv	r3, r2, r3
 800184e:	4618      	mov	r0, r3
 8001850:	f000 f981 	bl	8001b56 <HAL_SYSTICK_Config>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e00e      	b.n	800187c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2b0f      	cmp	r3, #15
 8001862:	d80a      	bhi.n	800187a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001864:	2200      	movs	r2, #0
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	f04f 30ff 	mov.w	r0, #4294967295
 800186c:	f000 f94b 	bl	8001b06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001870:	4a06      	ldr	r2, [pc, #24]	; (800188c <HAL_InitTick+0x68>)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001876:	2300      	movs	r3, #0
 8001878:	e000      	b.n	800187c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
}
 800187c:	4618      	mov	r0, r3
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	2400000c 	.word	0x2400000c
 8001888:	24000000 	.word	0x24000000
 800188c:	24000008 	.word	0x24000008

08001890 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001894:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <HAL_IncTick+0x20>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	461a      	mov	r2, r3
 800189a:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <HAL_IncTick+0x24>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4413      	add	r3, r2
 80018a0:	4a04      	ldr	r2, [pc, #16]	; (80018b4 <HAL_IncTick+0x24>)
 80018a2:	6013      	str	r3, [r2, #0]
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	2400000c 	.word	0x2400000c
 80018b4:	24000178 	.word	0x24000178

080018b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  return uwTick;
 80018bc:	4b03      	ldr	r3, [pc, #12]	; (80018cc <HAL_GetTick+0x14>)
 80018be:	681b      	ldr	r3, [r3, #0]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	24000178 	.word	0x24000178

080018d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018d8:	f7ff ffee 	bl	80018b8 <HAL_GetTick>
 80018dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e8:	d005      	beq.n	80018f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ea:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <HAL_Delay+0x44>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	461a      	mov	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	4413      	add	r3, r2
 80018f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018f6:	bf00      	nop
 80018f8:	f7ff ffde 	bl	80018b8 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	429a      	cmp	r2, r3
 8001906:	d8f7      	bhi.n	80018f8 <HAL_Delay+0x28>
  {
  }
}
 8001908:	bf00      	nop
 800190a:	bf00      	nop
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	2400000c 	.word	0x2400000c

08001918 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800191c:	4b03      	ldr	r3, [pc, #12]	; (800192c <HAL_GetREVID+0x14>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	0c1b      	lsrs	r3, r3, #16
}
 8001922:	4618      	mov	r0, r3
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	5c001000 	.word	0x5c001000

08001930 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8001934:	4b05      	ldr	r3, [pc, #20]	; (800194c <HAL_EnableCompensationCell+0x1c>)
 8001936:	6a1b      	ldr	r3, [r3, #32]
 8001938:	4a04      	ldr	r2, [pc, #16]	; (800194c <HAL_EnableCompensationCell+0x1c>)
 800193a:	f043 0301 	orr.w	r3, r3, #1
 800193e:	6213      	str	r3, [r2, #32]
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	58000400 	.word	0x58000400

08001950 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001960:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <__NVIC_SetPriorityGrouping+0x40>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001966:	68ba      	ldr	r2, [r7, #8]
 8001968:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800196c:	4013      	ands	r3, r2
 800196e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <__NVIC_SetPriorityGrouping+0x44>)
 800197a:	4313      	orrs	r3, r2
 800197c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800197e:	4a04      	ldr	r2, [pc, #16]	; (8001990 <__NVIC_SetPriorityGrouping+0x40>)
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	60d3      	str	r3, [r2, #12]
}
 8001984:	bf00      	nop
 8001986:	3714      	adds	r7, #20
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	e000ed00 	.word	0xe000ed00
 8001994:	05fa0000 	.word	0x05fa0000

08001998 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800199c:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <__NVIC_GetPriorityGrouping+0x18>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	0a1b      	lsrs	r3, r3, #8
 80019a2:	f003 0307 	and.w	r3, r3, #7
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	db0b      	blt.n	80019de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019c6:	88fb      	ldrh	r3, [r7, #6]
 80019c8:	f003 021f 	and.w	r2, r3, #31
 80019cc:	4907      	ldr	r1, [pc, #28]	; (80019ec <__NVIC_EnableIRQ+0x38>)
 80019ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019d2:	095b      	lsrs	r3, r3, #5
 80019d4:	2001      	movs	r0, #1
 80019d6:	fa00 f202 	lsl.w	r2, r0, r2
 80019da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	e000e100 	.word	0xe000e100

080019f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	6039      	str	r1, [r7, #0]
 80019fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	db0a      	blt.n	8001a1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	490c      	ldr	r1, [pc, #48]	; (8001a3c <__NVIC_SetPriority+0x4c>)
 8001a0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a0e:	0112      	lsls	r2, r2, #4
 8001a10:	b2d2      	uxtb	r2, r2
 8001a12:	440b      	add	r3, r1
 8001a14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a18:	e00a      	b.n	8001a30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	b2da      	uxtb	r2, r3
 8001a1e:	4908      	ldr	r1, [pc, #32]	; (8001a40 <__NVIC_SetPriority+0x50>)
 8001a20:	88fb      	ldrh	r3, [r7, #6]
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	3b04      	subs	r3, #4
 8001a28:	0112      	lsls	r2, r2, #4
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	440b      	add	r3, r1
 8001a2e:	761a      	strb	r2, [r3, #24]
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	e000e100 	.word	0xe000e100
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b089      	sub	sp, #36	; 0x24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	f1c3 0307 	rsb	r3, r3, #7
 8001a5e:	2b04      	cmp	r3, #4
 8001a60:	bf28      	it	cs
 8001a62:	2304      	movcs	r3, #4
 8001a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	3304      	adds	r3, #4
 8001a6a:	2b06      	cmp	r3, #6
 8001a6c:	d902      	bls.n	8001a74 <NVIC_EncodePriority+0x30>
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	3b03      	subs	r3, #3
 8001a72:	e000      	b.n	8001a76 <NVIC_EncodePriority+0x32>
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a78:	f04f 32ff 	mov.w	r2, #4294967295
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43da      	mvns	r2, r3
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	401a      	ands	r2, r3
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	fa01 f303 	lsl.w	r3, r1, r3
 8001a96:	43d9      	mvns	r1, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a9c:	4313      	orrs	r3, r2
         );
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3724      	adds	r7, #36	; 0x24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
	...

08001aac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001abc:	d301      	bcc.n	8001ac2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e00f      	b.n	8001ae2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ac2:	4a0a      	ldr	r2, [pc, #40]	; (8001aec <SysTick_Config+0x40>)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aca:	210f      	movs	r1, #15
 8001acc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad0:	f7ff ff8e 	bl	80019f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ad4:	4b05      	ldr	r3, [pc, #20]	; (8001aec <SysTick_Config+0x40>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ada:	4b04      	ldr	r3, [pc, #16]	; (8001aec <SysTick_Config+0x40>)
 8001adc:	2207      	movs	r2, #7
 8001ade:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	e000e010 	.word	0xe000e010

08001af0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7ff ff29 	bl	8001950 <__NVIC_SetPriorityGrouping>
}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b086      	sub	sp, #24
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	60b9      	str	r1, [r7, #8]
 8001b10:	607a      	str	r2, [r7, #4]
 8001b12:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b14:	f7ff ff40 	bl	8001998 <__NVIC_GetPriorityGrouping>
 8001b18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	68b9      	ldr	r1, [r7, #8]
 8001b1e:	6978      	ldr	r0, [r7, #20]
 8001b20:	f7ff ff90 	bl	8001a44 <NVIC_EncodePriority>
 8001b24:	4602      	mov	r2, r0
 8001b26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b2a:	4611      	mov	r1, r2
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff ff5f 	bl	80019f0 <__NVIC_SetPriority>
}
 8001b32:	bf00      	nop
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b082      	sub	sp, #8
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	4603      	mov	r3, r0
 8001b42:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff ff33 	bl	80019b4 <__NVIC_EnableIRQ>
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff ffa4 	bl	8001aac <SysTick_Config>
 8001b64:	4603      	mov	r3, r0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
	...

08001b70 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001b78:	f7ff fe9e 	bl	80018b8 <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d101      	bne.n	8001b88 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e2dc      	b.n	8002142 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d008      	beq.n	8001ba6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2280      	movs	r2, #128	; 0x80
 8001b98:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e2cd      	b.n	8002142 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a76      	ldr	r2, [pc, #472]	; (8001d84 <HAL_DMA_Abort+0x214>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d04a      	beq.n	8001c46 <HAL_DMA_Abort+0xd6>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a74      	ldr	r2, [pc, #464]	; (8001d88 <HAL_DMA_Abort+0x218>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d045      	beq.n	8001c46 <HAL_DMA_Abort+0xd6>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a73      	ldr	r2, [pc, #460]	; (8001d8c <HAL_DMA_Abort+0x21c>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d040      	beq.n	8001c46 <HAL_DMA_Abort+0xd6>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a71      	ldr	r2, [pc, #452]	; (8001d90 <HAL_DMA_Abort+0x220>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d03b      	beq.n	8001c46 <HAL_DMA_Abort+0xd6>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a70      	ldr	r2, [pc, #448]	; (8001d94 <HAL_DMA_Abort+0x224>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d036      	beq.n	8001c46 <HAL_DMA_Abort+0xd6>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a6e      	ldr	r2, [pc, #440]	; (8001d98 <HAL_DMA_Abort+0x228>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d031      	beq.n	8001c46 <HAL_DMA_Abort+0xd6>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a6d      	ldr	r2, [pc, #436]	; (8001d9c <HAL_DMA_Abort+0x22c>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d02c      	beq.n	8001c46 <HAL_DMA_Abort+0xd6>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a6b      	ldr	r2, [pc, #428]	; (8001da0 <HAL_DMA_Abort+0x230>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d027      	beq.n	8001c46 <HAL_DMA_Abort+0xd6>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a6a      	ldr	r2, [pc, #424]	; (8001da4 <HAL_DMA_Abort+0x234>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d022      	beq.n	8001c46 <HAL_DMA_Abort+0xd6>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a68      	ldr	r2, [pc, #416]	; (8001da8 <HAL_DMA_Abort+0x238>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d01d      	beq.n	8001c46 <HAL_DMA_Abort+0xd6>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a67      	ldr	r2, [pc, #412]	; (8001dac <HAL_DMA_Abort+0x23c>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d018      	beq.n	8001c46 <HAL_DMA_Abort+0xd6>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a65      	ldr	r2, [pc, #404]	; (8001db0 <HAL_DMA_Abort+0x240>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d013      	beq.n	8001c46 <HAL_DMA_Abort+0xd6>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a64      	ldr	r2, [pc, #400]	; (8001db4 <HAL_DMA_Abort+0x244>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d00e      	beq.n	8001c46 <HAL_DMA_Abort+0xd6>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a62      	ldr	r2, [pc, #392]	; (8001db8 <HAL_DMA_Abort+0x248>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d009      	beq.n	8001c46 <HAL_DMA_Abort+0xd6>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a61      	ldr	r2, [pc, #388]	; (8001dbc <HAL_DMA_Abort+0x24c>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d004      	beq.n	8001c46 <HAL_DMA_Abort+0xd6>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a5f      	ldr	r2, [pc, #380]	; (8001dc0 <HAL_DMA_Abort+0x250>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d101      	bne.n	8001c4a <HAL_DMA_Abort+0xda>
 8001c46:	2301      	movs	r3, #1
 8001c48:	e000      	b.n	8001c4c <HAL_DMA_Abort+0xdc>
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d013      	beq.n	8001c78 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f022 021e 	bic.w	r2, r2, #30
 8001c5e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	695a      	ldr	r2, [r3, #20]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c6e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	e00a      	b.n	8001c8e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f022 020e 	bic.w	r2, r2, #14
 8001c86:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a3c      	ldr	r2, [pc, #240]	; (8001d84 <HAL_DMA_Abort+0x214>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d072      	beq.n	8001d7e <HAL_DMA_Abort+0x20e>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a3a      	ldr	r2, [pc, #232]	; (8001d88 <HAL_DMA_Abort+0x218>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d06d      	beq.n	8001d7e <HAL_DMA_Abort+0x20e>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a39      	ldr	r2, [pc, #228]	; (8001d8c <HAL_DMA_Abort+0x21c>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d068      	beq.n	8001d7e <HAL_DMA_Abort+0x20e>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a37      	ldr	r2, [pc, #220]	; (8001d90 <HAL_DMA_Abort+0x220>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d063      	beq.n	8001d7e <HAL_DMA_Abort+0x20e>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a36      	ldr	r2, [pc, #216]	; (8001d94 <HAL_DMA_Abort+0x224>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d05e      	beq.n	8001d7e <HAL_DMA_Abort+0x20e>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a34      	ldr	r2, [pc, #208]	; (8001d98 <HAL_DMA_Abort+0x228>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d059      	beq.n	8001d7e <HAL_DMA_Abort+0x20e>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a33      	ldr	r2, [pc, #204]	; (8001d9c <HAL_DMA_Abort+0x22c>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d054      	beq.n	8001d7e <HAL_DMA_Abort+0x20e>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a31      	ldr	r2, [pc, #196]	; (8001da0 <HAL_DMA_Abort+0x230>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d04f      	beq.n	8001d7e <HAL_DMA_Abort+0x20e>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a30      	ldr	r2, [pc, #192]	; (8001da4 <HAL_DMA_Abort+0x234>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d04a      	beq.n	8001d7e <HAL_DMA_Abort+0x20e>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a2e      	ldr	r2, [pc, #184]	; (8001da8 <HAL_DMA_Abort+0x238>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d045      	beq.n	8001d7e <HAL_DMA_Abort+0x20e>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a2d      	ldr	r2, [pc, #180]	; (8001dac <HAL_DMA_Abort+0x23c>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d040      	beq.n	8001d7e <HAL_DMA_Abort+0x20e>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a2b      	ldr	r2, [pc, #172]	; (8001db0 <HAL_DMA_Abort+0x240>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d03b      	beq.n	8001d7e <HAL_DMA_Abort+0x20e>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a2a      	ldr	r2, [pc, #168]	; (8001db4 <HAL_DMA_Abort+0x244>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d036      	beq.n	8001d7e <HAL_DMA_Abort+0x20e>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a28      	ldr	r2, [pc, #160]	; (8001db8 <HAL_DMA_Abort+0x248>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d031      	beq.n	8001d7e <HAL_DMA_Abort+0x20e>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a27      	ldr	r2, [pc, #156]	; (8001dbc <HAL_DMA_Abort+0x24c>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d02c      	beq.n	8001d7e <HAL_DMA_Abort+0x20e>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a25      	ldr	r2, [pc, #148]	; (8001dc0 <HAL_DMA_Abort+0x250>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d027      	beq.n	8001d7e <HAL_DMA_Abort+0x20e>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a24      	ldr	r2, [pc, #144]	; (8001dc4 <HAL_DMA_Abort+0x254>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d022      	beq.n	8001d7e <HAL_DMA_Abort+0x20e>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a22      	ldr	r2, [pc, #136]	; (8001dc8 <HAL_DMA_Abort+0x258>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d01d      	beq.n	8001d7e <HAL_DMA_Abort+0x20e>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a21      	ldr	r2, [pc, #132]	; (8001dcc <HAL_DMA_Abort+0x25c>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d018      	beq.n	8001d7e <HAL_DMA_Abort+0x20e>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a1f      	ldr	r2, [pc, #124]	; (8001dd0 <HAL_DMA_Abort+0x260>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d013      	beq.n	8001d7e <HAL_DMA_Abort+0x20e>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a1e      	ldr	r2, [pc, #120]	; (8001dd4 <HAL_DMA_Abort+0x264>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d00e      	beq.n	8001d7e <HAL_DMA_Abort+0x20e>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a1c      	ldr	r2, [pc, #112]	; (8001dd8 <HAL_DMA_Abort+0x268>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d009      	beq.n	8001d7e <HAL_DMA_Abort+0x20e>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a1b      	ldr	r2, [pc, #108]	; (8001ddc <HAL_DMA_Abort+0x26c>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d004      	beq.n	8001d7e <HAL_DMA_Abort+0x20e>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a19      	ldr	r2, [pc, #100]	; (8001de0 <HAL_DMA_Abort+0x270>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d132      	bne.n	8001de4 <HAL_DMA_Abort+0x274>
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e031      	b.n	8001de6 <HAL_DMA_Abort+0x276>
 8001d82:	bf00      	nop
 8001d84:	40020010 	.word	0x40020010
 8001d88:	40020028 	.word	0x40020028
 8001d8c:	40020040 	.word	0x40020040
 8001d90:	40020058 	.word	0x40020058
 8001d94:	40020070 	.word	0x40020070
 8001d98:	40020088 	.word	0x40020088
 8001d9c:	400200a0 	.word	0x400200a0
 8001da0:	400200b8 	.word	0x400200b8
 8001da4:	40020410 	.word	0x40020410
 8001da8:	40020428 	.word	0x40020428
 8001dac:	40020440 	.word	0x40020440
 8001db0:	40020458 	.word	0x40020458
 8001db4:	40020470 	.word	0x40020470
 8001db8:	40020488 	.word	0x40020488
 8001dbc:	400204a0 	.word	0x400204a0
 8001dc0:	400204b8 	.word	0x400204b8
 8001dc4:	58025408 	.word	0x58025408
 8001dc8:	5802541c 	.word	0x5802541c
 8001dcc:	58025430 	.word	0x58025430
 8001dd0:	58025444 	.word	0x58025444
 8001dd4:	58025458 	.word	0x58025458
 8001dd8:	5802546c 	.word	0x5802546c
 8001ddc:	58025480 	.word	0x58025480
 8001de0:	58025494 	.word	0x58025494
 8001de4:	2300      	movs	r3, #0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d007      	beq.n	8001dfa <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001df4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001df8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a6d      	ldr	r2, [pc, #436]	; (8001fb4 <HAL_DMA_Abort+0x444>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d04a      	beq.n	8001e9a <HAL_DMA_Abort+0x32a>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a6b      	ldr	r2, [pc, #428]	; (8001fb8 <HAL_DMA_Abort+0x448>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d045      	beq.n	8001e9a <HAL_DMA_Abort+0x32a>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a6a      	ldr	r2, [pc, #424]	; (8001fbc <HAL_DMA_Abort+0x44c>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d040      	beq.n	8001e9a <HAL_DMA_Abort+0x32a>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a68      	ldr	r2, [pc, #416]	; (8001fc0 <HAL_DMA_Abort+0x450>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d03b      	beq.n	8001e9a <HAL_DMA_Abort+0x32a>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a67      	ldr	r2, [pc, #412]	; (8001fc4 <HAL_DMA_Abort+0x454>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d036      	beq.n	8001e9a <HAL_DMA_Abort+0x32a>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a65      	ldr	r2, [pc, #404]	; (8001fc8 <HAL_DMA_Abort+0x458>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d031      	beq.n	8001e9a <HAL_DMA_Abort+0x32a>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a64      	ldr	r2, [pc, #400]	; (8001fcc <HAL_DMA_Abort+0x45c>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d02c      	beq.n	8001e9a <HAL_DMA_Abort+0x32a>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a62      	ldr	r2, [pc, #392]	; (8001fd0 <HAL_DMA_Abort+0x460>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d027      	beq.n	8001e9a <HAL_DMA_Abort+0x32a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a61      	ldr	r2, [pc, #388]	; (8001fd4 <HAL_DMA_Abort+0x464>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d022      	beq.n	8001e9a <HAL_DMA_Abort+0x32a>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a5f      	ldr	r2, [pc, #380]	; (8001fd8 <HAL_DMA_Abort+0x468>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d01d      	beq.n	8001e9a <HAL_DMA_Abort+0x32a>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a5e      	ldr	r2, [pc, #376]	; (8001fdc <HAL_DMA_Abort+0x46c>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d018      	beq.n	8001e9a <HAL_DMA_Abort+0x32a>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a5c      	ldr	r2, [pc, #368]	; (8001fe0 <HAL_DMA_Abort+0x470>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d013      	beq.n	8001e9a <HAL_DMA_Abort+0x32a>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a5b      	ldr	r2, [pc, #364]	; (8001fe4 <HAL_DMA_Abort+0x474>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d00e      	beq.n	8001e9a <HAL_DMA_Abort+0x32a>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a59      	ldr	r2, [pc, #356]	; (8001fe8 <HAL_DMA_Abort+0x478>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d009      	beq.n	8001e9a <HAL_DMA_Abort+0x32a>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a58      	ldr	r2, [pc, #352]	; (8001fec <HAL_DMA_Abort+0x47c>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d004      	beq.n	8001e9a <HAL_DMA_Abort+0x32a>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a56      	ldr	r2, [pc, #344]	; (8001ff0 <HAL_DMA_Abort+0x480>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d108      	bne.n	8001eac <HAL_DMA_Abort+0x33c>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 0201 	bic.w	r2, r2, #1
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	e007      	b.n	8001ebc <HAL_DMA_Abort+0x34c>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f022 0201 	bic.w	r2, r2, #1
 8001eba:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001ebc:	e013      	b.n	8001ee6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ebe:	f7ff fcfb 	bl	80018b8 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b05      	cmp	r3, #5
 8001eca:	d90c      	bls.n	8001ee6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2220      	movs	r2, #32
 8001ed0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2203      	movs	r2, #3
 8001ede:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e12d      	b.n	8002142 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1e5      	bne.n	8001ebe <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a2f      	ldr	r2, [pc, #188]	; (8001fb4 <HAL_DMA_Abort+0x444>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d04a      	beq.n	8001f92 <HAL_DMA_Abort+0x422>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a2d      	ldr	r2, [pc, #180]	; (8001fb8 <HAL_DMA_Abort+0x448>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d045      	beq.n	8001f92 <HAL_DMA_Abort+0x422>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a2c      	ldr	r2, [pc, #176]	; (8001fbc <HAL_DMA_Abort+0x44c>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d040      	beq.n	8001f92 <HAL_DMA_Abort+0x422>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a2a      	ldr	r2, [pc, #168]	; (8001fc0 <HAL_DMA_Abort+0x450>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d03b      	beq.n	8001f92 <HAL_DMA_Abort+0x422>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a29      	ldr	r2, [pc, #164]	; (8001fc4 <HAL_DMA_Abort+0x454>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d036      	beq.n	8001f92 <HAL_DMA_Abort+0x422>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a27      	ldr	r2, [pc, #156]	; (8001fc8 <HAL_DMA_Abort+0x458>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d031      	beq.n	8001f92 <HAL_DMA_Abort+0x422>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a26      	ldr	r2, [pc, #152]	; (8001fcc <HAL_DMA_Abort+0x45c>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d02c      	beq.n	8001f92 <HAL_DMA_Abort+0x422>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a24      	ldr	r2, [pc, #144]	; (8001fd0 <HAL_DMA_Abort+0x460>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d027      	beq.n	8001f92 <HAL_DMA_Abort+0x422>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a23      	ldr	r2, [pc, #140]	; (8001fd4 <HAL_DMA_Abort+0x464>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d022      	beq.n	8001f92 <HAL_DMA_Abort+0x422>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a21      	ldr	r2, [pc, #132]	; (8001fd8 <HAL_DMA_Abort+0x468>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d01d      	beq.n	8001f92 <HAL_DMA_Abort+0x422>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a20      	ldr	r2, [pc, #128]	; (8001fdc <HAL_DMA_Abort+0x46c>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d018      	beq.n	8001f92 <HAL_DMA_Abort+0x422>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a1e      	ldr	r2, [pc, #120]	; (8001fe0 <HAL_DMA_Abort+0x470>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d013      	beq.n	8001f92 <HAL_DMA_Abort+0x422>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a1d      	ldr	r2, [pc, #116]	; (8001fe4 <HAL_DMA_Abort+0x474>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d00e      	beq.n	8001f92 <HAL_DMA_Abort+0x422>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a1b      	ldr	r2, [pc, #108]	; (8001fe8 <HAL_DMA_Abort+0x478>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d009      	beq.n	8001f92 <HAL_DMA_Abort+0x422>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a1a      	ldr	r2, [pc, #104]	; (8001fec <HAL_DMA_Abort+0x47c>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d004      	beq.n	8001f92 <HAL_DMA_Abort+0x422>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a18      	ldr	r2, [pc, #96]	; (8001ff0 <HAL_DMA_Abort+0x480>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d101      	bne.n	8001f96 <HAL_DMA_Abort+0x426>
 8001f92:	2301      	movs	r3, #1
 8001f94:	e000      	b.n	8001f98 <HAL_DMA_Abort+0x428>
 8001f96:	2300      	movs	r3, #0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d02b      	beq.n	8001ff4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa6:	f003 031f 	and.w	r3, r3, #31
 8001faa:	223f      	movs	r2, #63	; 0x3f
 8001fac:	409a      	lsls	r2, r3
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	609a      	str	r2, [r3, #8]
 8001fb2:	e02a      	b.n	800200a <HAL_DMA_Abort+0x49a>
 8001fb4:	40020010 	.word	0x40020010
 8001fb8:	40020028 	.word	0x40020028
 8001fbc:	40020040 	.word	0x40020040
 8001fc0:	40020058 	.word	0x40020058
 8001fc4:	40020070 	.word	0x40020070
 8001fc8:	40020088 	.word	0x40020088
 8001fcc:	400200a0 	.word	0x400200a0
 8001fd0:	400200b8 	.word	0x400200b8
 8001fd4:	40020410 	.word	0x40020410
 8001fd8:	40020428 	.word	0x40020428
 8001fdc:	40020440 	.word	0x40020440
 8001fe0:	40020458 	.word	0x40020458
 8001fe4:	40020470 	.word	0x40020470
 8001fe8:	40020488 	.word	0x40020488
 8001fec:	400204a0 	.word	0x400204a0
 8001ff0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ffe:	f003 031f 	and.w	r3, r3, #31
 8002002:	2201      	movs	r2, #1
 8002004:	409a      	lsls	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a4f      	ldr	r2, [pc, #316]	; (800214c <HAL_DMA_Abort+0x5dc>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d072      	beq.n	80020fa <HAL_DMA_Abort+0x58a>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a4d      	ldr	r2, [pc, #308]	; (8002150 <HAL_DMA_Abort+0x5e0>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d06d      	beq.n	80020fa <HAL_DMA_Abort+0x58a>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a4c      	ldr	r2, [pc, #304]	; (8002154 <HAL_DMA_Abort+0x5e4>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d068      	beq.n	80020fa <HAL_DMA_Abort+0x58a>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a4a      	ldr	r2, [pc, #296]	; (8002158 <HAL_DMA_Abort+0x5e8>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d063      	beq.n	80020fa <HAL_DMA_Abort+0x58a>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a49      	ldr	r2, [pc, #292]	; (800215c <HAL_DMA_Abort+0x5ec>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d05e      	beq.n	80020fa <HAL_DMA_Abort+0x58a>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a47      	ldr	r2, [pc, #284]	; (8002160 <HAL_DMA_Abort+0x5f0>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d059      	beq.n	80020fa <HAL_DMA_Abort+0x58a>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a46      	ldr	r2, [pc, #280]	; (8002164 <HAL_DMA_Abort+0x5f4>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d054      	beq.n	80020fa <HAL_DMA_Abort+0x58a>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a44      	ldr	r2, [pc, #272]	; (8002168 <HAL_DMA_Abort+0x5f8>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d04f      	beq.n	80020fa <HAL_DMA_Abort+0x58a>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a43      	ldr	r2, [pc, #268]	; (800216c <HAL_DMA_Abort+0x5fc>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d04a      	beq.n	80020fa <HAL_DMA_Abort+0x58a>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a41      	ldr	r2, [pc, #260]	; (8002170 <HAL_DMA_Abort+0x600>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d045      	beq.n	80020fa <HAL_DMA_Abort+0x58a>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a40      	ldr	r2, [pc, #256]	; (8002174 <HAL_DMA_Abort+0x604>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d040      	beq.n	80020fa <HAL_DMA_Abort+0x58a>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a3e      	ldr	r2, [pc, #248]	; (8002178 <HAL_DMA_Abort+0x608>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d03b      	beq.n	80020fa <HAL_DMA_Abort+0x58a>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a3d      	ldr	r2, [pc, #244]	; (800217c <HAL_DMA_Abort+0x60c>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d036      	beq.n	80020fa <HAL_DMA_Abort+0x58a>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a3b      	ldr	r2, [pc, #236]	; (8002180 <HAL_DMA_Abort+0x610>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d031      	beq.n	80020fa <HAL_DMA_Abort+0x58a>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a3a      	ldr	r2, [pc, #232]	; (8002184 <HAL_DMA_Abort+0x614>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d02c      	beq.n	80020fa <HAL_DMA_Abort+0x58a>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a38      	ldr	r2, [pc, #224]	; (8002188 <HAL_DMA_Abort+0x618>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d027      	beq.n	80020fa <HAL_DMA_Abort+0x58a>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a37      	ldr	r2, [pc, #220]	; (800218c <HAL_DMA_Abort+0x61c>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d022      	beq.n	80020fa <HAL_DMA_Abort+0x58a>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a35      	ldr	r2, [pc, #212]	; (8002190 <HAL_DMA_Abort+0x620>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d01d      	beq.n	80020fa <HAL_DMA_Abort+0x58a>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a34      	ldr	r2, [pc, #208]	; (8002194 <HAL_DMA_Abort+0x624>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d018      	beq.n	80020fa <HAL_DMA_Abort+0x58a>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a32      	ldr	r2, [pc, #200]	; (8002198 <HAL_DMA_Abort+0x628>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d013      	beq.n	80020fa <HAL_DMA_Abort+0x58a>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a31      	ldr	r2, [pc, #196]	; (800219c <HAL_DMA_Abort+0x62c>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d00e      	beq.n	80020fa <HAL_DMA_Abort+0x58a>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a2f      	ldr	r2, [pc, #188]	; (80021a0 <HAL_DMA_Abort+0x630>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d009      	beq.n	80020fa <HAL_DMA_Abort+0x58a>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a2e      	ldr	r2, [pc, #184]	; (80021a4 <HAL_DMA_Abort+0x634>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d004      	beq.n	80020fa <HAL_DMA_Abort+0x58a>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a2c      	ldr	r2, [pc, #176]	; (80021a8 <HAL_DMA_Abort+0x638>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d101      	bne.n	80020fe <HAL_DMA_Abort+0x58e>
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <HAL_DMA_Abort+0x590>
 80020fe:	2300      	movs	r3, #0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d015      	beq.n	8002130 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800210c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00c      	beq.n	8002130 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002120:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002124:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800212e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40020010 	.word	0x40020010
 8002150:	40020028 	.word	0x40020028
 8002154:	40020040 	.word	0x40020040
 8002158:	40020058 	.word	0x40020058
 800215c:	40020070 	.word	0x40020070
 8002160:	40020088 	.word	0x40020088
 8002164:	400200a0 	.word	0x400200a0
 8002168:	400200b8 	.word	0x400200b8
 800216c:	40020410 	.word	0x40020410
 8002170:	40020428 	.word	0x40020428
 8002174:	40020440 	.word	0x40020440
 8002178:	40020458 	.word	0x40020458
 800217c:	40020470 	.word	0x40020470
 8002180:	40020488 	.word	0x40020488
 8002184:	400204a0 	.word	0x400204a0
 8002188:	400204b8 	.word	0x400204b8
 800218c:	58025408 	.word	0x58025408
 8002190:	5802541c 	.word	0x5802541c
 8002194:	58025430 	.word	0x58025430
 8002198:	58025444 	.word	0x58025444
 800219c:	58025458 	.word	0x58025458
 80021a0:	5802546c 	.word	0x5802546c
 80021a4:	58025480 	.word	0x58025480
 80021a8:	58025494 	.word	0x58025494

080021ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e205      	b.n	80025ca <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d004      	beq.n	80021d4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2280      	movs	r2, #128	; 0x80
 80021ce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e1fa      	b.n	80025ca <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a8c      	ldr	r2, [pc, #560]	; (800240c <HAL_DMA_Abort_IT+0x260>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d04a      	beq.n	8002274 <HAL_DMA_Abort_IT+0xc8>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a8b      	ldr	r2, [pc, #556]	; (8002410 <HAL_DMA_Abort_IT+0x264>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d045      	beq.n	8002274 <HAL_DMA_Abort_IT+0xc8>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a89      	ldr	r2, [pc, #548]	; (8002414 <HAL_DMA_Abort_IT+0x268>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d040      	beq.n	8002274 <HAL_DMA_Abort_IT+0xc8>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a88      	ldr	r2, [pc, #544]	; (8002418 <HAL_DMA_Abort_IT+0x26c>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d03b      	beq.n	8002274 <HAL_DMA_Abort_IT+0xc8>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a86      	ldr	r2, [pc, #536]	; (800241c <HAL_DMA_Abort_IT+0x270>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d036      	beq.n	8002274 <HAL_DMA_Abort_IT+0xc8>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a85      	ldr	r2, [pc, #532]	; (8002420 <HAL_DMA_Abort_IT+0x274>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d031      	beq.n	8002274 <HAL_DMA_Abort_IT+0xc8>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a83      	ldr	r2, [pc, #524]	; (8002424 <HAL_DMA_Abort_IT+0x278>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d02c      	beq.n	8002274 <HAL_DMA_Abort_IT+0xc8>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a82      	ldr	r2, [pc, #520]	; (8002428 <HAL_DMA_Abort_IT+0x27c>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d027      	beq.n	8002274 <HAL_DMA_Abort_IT+0xc8>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a80      	ldr	r2, [pc, #512]	; (800242c <HAL_DMA_Abort_IT+0x280>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d022      	beq.n	8002274 <HAL_DMA_Abort_IT+0xc8>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a7f      	ldr	r2, [pc, #508]	; (8002430 <HAL_DMA_Abort_IT+0x284>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d01d      	beq.n	8002274 <HAL_DMA_Abort_IT+0xc8>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a7d      	ldr	r2, [pc, #500]	; (8002434 <HAL_DMA_Abort_IT+0x288>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d018      	beq.n	8002274 <HAL_DMA_Abort_IT+0xc8>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a7c      	ldr	r2, [pc, #496]	; (8002438 <HAL_DMA_Abort_IT+0x28c>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d013      	beq.n	8002274 <HAL_DMA_Abort_IT+0xc8>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a7a      	ldr	r2, [pc, #488]	; (800243c <HAL_DMA_Abort_IT+0x290>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d00e      	beq.n	8002274 <HAL_DMA_Abort_IT+0xc8>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a79      	ldr	r2, [pc, #484]	; (8002440 <HAL_DMA_Abort_IT+0x294>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d009      	beq.n	8002274 <HAL_DMA_Abort_IT+0xc8>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a77      	ldr	r2, [pc, #476]	; (8002444 <HAL_DMA_Abort_IT+0x298>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d004      	beq.n	8002274 <HAL_DMA_Abort_IT+0xc8>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a76      	ldr	r2, [pc, #472]	; (8002448 <HAL_DMA_Abort_IT+0x29c>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d101      	bne.n	8002278 <HAL_DMA_Abort_IT+0xcc>
 8002274:	2301      	movs	r3, #1
 8002276:	e000      	b.n	800227a <HAL_DMA_Abort_IT+0xce>
 8002278:	2300      	movs	r3, #0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d065      	beq.n	800234a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2204      	movs	r2, #4
 8002282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a60      	ldr	r2, [pc, #384]	; (800240c <HAL_DMA_Abort_IT+0x260>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d04a      	beq.n	8002326 <HAL_DMA_Abort_IT+0x17a>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a5e      	ldr	r2, [pc, #376]	; (8002410 <HAL_DMA_Abort_IT+0x264>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d045      	beq.n	8002326 <HAL_DMA_Abort_IT+0x17a>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a5d      	ldr	r2, [pc, #372]	; (8002414 <HAL_DMA_Abort_IT+0x268>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d040      	beq.n	8002326 <HAL_DMA_Abort_IT+0x17a>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a5b      	ldr	r2, [pc, #364]	; (8002418 <HAL_DMA_Abort_IT+0x26c>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d03b      	beq.n	8002326 <HAL_DMA_Abort_IT+0x17a>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a5a      	ldr	r2, [pc, #360]	; (800241c <HAL_DMA_Abort_IT+0x270>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d036      	beq.n	8002326 <HAL_DMA_Abort_IT+0x17a>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a58      	ldr	r2, [pc, #352]	; (8002420 <HAL_DMA_Abort_IT+0x274>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d031      	beq.n	8002326 <HAL_DMA_Abort_IT+0x17a>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a57      	ldr	r2, [pc, #348]	; (8002424 <HAL_DMA_Abort_IT+0x278>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d02c      	beq.n	8002326 <HAL_DMA_Abort_IT+0x17a>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a55      	ldr	r2, [pc, #340]	; (8002428 <HAL_DMA_Abort_IT+0x27c>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d027      	beq.n	8002326 <HAL_DMA_Abort_IT+0x17a>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a54      	ldr	r2, [pc, #336]	; (800242c <HAL_DMA_Abort_IT+0x280>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d022      	beq.n	8002326 <HAL_DMA_Abort_IT+0x17a>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a52      	ldr	r2, [pc, #328]	; (8002430 <HAL_DMA_Abort_IT+0x284>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d01d      	beq.n	8002326 <HAL_DMA_Abort_IT+0x17a>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a51      	ldr	r2, [pc, #324]	; (8002434 <HAL_DMA_Abort_IT+0x288>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d018      	beq.n	8002326 <HAL_DMA_Abort_IT+0x17a>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a4f      	ldr	r2, [pc, #316]	; (8002438 <HAL_DMA_Abort_IT+0x28c>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d013      	beq.n	8002326 <HAL_DMA_Abort_IT+0x17a>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a4e      	ldr	r2, [pc, #312]	; (800243c <HAL_DMA_Abort_IT+0x290>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d00e      	beq.n	8002326 <HAL_DMA_Abort_IT+0x17a>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a4c      	ldr	r2, [pc, #304]	; (8002440 <HAL_DMA_Abort_IT+0x294>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d009      	beq.n	8002326 <HAL_DMA_Abort_IT+0x17a>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a4b      	ldr	r2, [pc, #300]	; (8002444 <HAL_DMA_Abort_IT+0x298>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d004      	beq.n	8002326 <HAL_DMA_Abort_IT+0x17a>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a49      	ldr	r2, [pc, #292]	; (8002448 <HAL_DMA_Abort_IT+0x29c>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d108      	bne.n	8002338 <HAL_DMA_Abort_IT+0x18c>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 0201 	bic.w	r2, r2, #1
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	e147      	b.n	80025c8 <HAL_DMA_Abort_IT+0x41c>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 0201 	bic.w	r2, r2, #1
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	e13e      	b.n	80025c8 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 020e 	bic.w	r2, r2, #14
 8002358:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a2b      	ldr	r2, [pc, #172]	; (800240c <HAL_DMA_Abort_IT+0x260>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d04a      	beq.n	80023fa <HAL_DMA_Abort_IT+0x24e>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a29      	ldr	r2, [pc, #164]	; (8002410 <HAL_DMA_Abort_IT+0x264>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d045      	beq.n	80023fa <HAL_DMA_Abort_IT+0x24e>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a28      	ldr	r2, [pc, #160]	; (8002414 <HAL_DMA_Abort_IT+0x268>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d040      	beq.n	80023fa <HAL_DMA_Abort_IT+0x24e>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a26      	ldr	r2, [pc, #152]	; (8002418 <HAL_DMA_Abort_IT+0x26c>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d03b      	beq.n	80023fa <HAL_DMA_Abort_IT+0x24e>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a25      	ldr	r2, [pc, #148]	; (800241c <HAL_DMA_Abort_IT+0x270>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d036      	beq.n	80023fa <HAL_DMA_Abort_IT+0x24e>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a23      	ldr	r2, [pc, #140]	; (8002420 <HAL_DMA_Abort_IT+0x274>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d031      	beq.n	80023fa <HAL_DMA_Abort_IT+0x24e>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a22      	ldr	r2, [pc, #136]	; (8002424 <HAL_DMA_Abort_IT+0x278>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d02c      	beq.n	80023fa <HAL_DMA_Abort_IT+0x24e>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a20      	ldr	r2, [pc, #128]	; (8002428 <HAL_DMA_Abort_IT+0x27c>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d027      	beq.n	80023fa <HAL_DMA_Abort_IT+0x24e>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a1f      	ldr	r2, [pc, #124]	; (800242c <HAL_DMA_Abort_IT+0x280>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d022      	beq.n	80023fa <HAL_DMA_Abort_IT+0x24e>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a1d      	ldr	r2, [pc, #116]	; (8002430 <HAL_DMA_Abort_IT+0x284>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d01d      	beq.n	80023fa <HAL_DMA_Abort_IT+0x24e>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a1c      	ldr	r2, [pc, #112]	; (8002434 <HAL_DMA_Abort_IT+0x288>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d018      	beq.n	80023fa <HAL_DMA_Abort_IT+0x24e>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a1a      	ldr	r2, [pc, #104]	; (8002438 <HAL_DMA_Abort_IT+0x28c>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d013      	beq.n	80023fa <HAL_DMA_Abort_IT+0x24e>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a19      	ldr	r2, [pc, #100]	; (800243c <HAL_DMA_Abort_IT+0x290>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d00e      	beq.n	80023fa <HAL_DMA_Abort_IT+0x24e>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a17      	ldr	r2, [pc, #92]	; (8002440 <HAL_DMA_Abort_IT+0x294>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d009      	beq.n	80023fa <HAL_DMA_Abort_IT+0x24e>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a16      	ldr	r2, [pc, #88]	; (8002444 <HAL_DMA_Abort_IT+0x298>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d004      	beq.n	80023fa <HAL_DMA_Abort_IT+0x24e>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a14      	ldr	r2, [pc, #80]	; (8002448 <HAL_DMA_Abort_IT+0x29c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d128      	bne.n	800244c <HAL_DMA_Abort_IT+0x2a0>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 0201 	bic.w	r2, r2, #1
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	e027      	b.n	800245c <HAL_DMA_Abort_IT+0x2b0>
 800240c:	40020010 	.word	0x40020010
 8002410:	40020028 	.word	0x40020028
 8002414:	40020040 	.word	0x40020040
 8002418:	40020058 	.word	0x40020058
 800241c:	40020070 	.word	0x40020070
 8002420:	40020088 	.word	0x40020088
 8002424:	400200a0 	.word	0x400200a0
 8002428:	400200b8 	.word	0x400200b8
 800242c:	40020410 	.word	0x40020410
 8002430:	40020428 	.word	0x40020428
 8002434:	40020440 	.word	0x40020440
 8002438:	40020458 	.word	0x40020458
 800243c:	40020470 	.word	0x40020470
 8002440:	40020488 	.word	0x40020488
 8002444:	400204a0 	.word	0x400204a0
 8002448:	400204b8 	.word	0x400204b8
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f022 0201 	bic.w	r2, r2, #1
 800245a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a5c      	ldr	r2, [pc, #368]	; (80025d4 <HAL_DMA_Abort_IT+0x428>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d072      	beq.n	800254c <HAL_DMA_Abort_IT+0x3a0>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a5b      	ldr	r2, [pc, #364]	; (80025d8 <HAL_DMA_Abort_IT+0x42c>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d06d      	beq.n	800254c <HAL_DMA_Abort_IT+0x3a0>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a59      	ldr	r2, [pc, #356]	; (80025dc <HAL_DMA_Abort_IT+0x430>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d068      	beq.n	800254c <HAL_DMA_Abort_IT+0x3a0>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a58      	ldr	r2, [pc, #352]	; (80025e0 <HAL_DMA_Abort_IT+0x434>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d063      	beq.n	800254c <HAL_DMA_Abort_IT+0x3a0>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a56      	ldr	r2, [pc, #344]	; (80025e4 <HAL_DMA_Abort_IT+0x438>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d05e      	beq.n	800254c <HAL_DMA_Abort_IT+0x3a0>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a55      	ldr	r2, [pc, #340]	; (80025e8 <HAL_DMA_Abort_IT+0x43c>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d059      	beq.n	800254c <HAL_DMA_Abort_IT+0x3a0>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a53      	ldr	r2, [pc, #332]	; (80025ec <HAL_DMA_Abort_IT+0x440>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d054      	beq.n	800254c <HAL_DMA_Abort_IT+0x3a0>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a52      	ldr	r2, [pc, #328]	; (80025f0 <HAL_DMA_Abort_IT+0x444>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d04f      	beq.n	800254c <HAL_DMA_Abort_IT+0x3a0>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a50      	ldr	r2, [pc, #320]	; (80025f4 <HAL_DMA_Abort_IT+0x448>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d04a      	beq.n	800254c <HAL_DMA_Abort_IT+0x3a0>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a4f      	ldr	r2, [pc, #316]	; (80025f8 <HAL_DMA_Abort_IT+0x44c>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d045      	beq.n	800254c <HAL_DMA_Abort_IT+0x3a0>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a4d      	ldr	r2, [pc, #308]	; (80025fc <HAL_DMA_Abort_IT+0x450>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d040      	beq.n	800254c <HAL_DMA_Abort_IT+0x3a0>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a4c      	ldr	r2, [pc, #304]	; (8002600 <HAL_DMA_Abort_IT+0x454>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d03b      	beq.n	800254c <HAL_DMA_Abort_IT+0x3a0>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a4a      	ldr	r2, [pc, #296]	; (8002604 <HAL_DMA_Abort_IT+0x458>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d036      	beq.n	800254c <HAL_DMA_Abort_IT+0x3a0>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a49      	ldr	r2, [pc, #292]	; (8002608 <HAL_DMA_Abort_IT+0x45c>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d031      	beq.n	800254c <HAL_DMA_Abort_IT+0x3a0>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a47      	ldr	r2, [pc, #284]	; (800260c <HAL_DMA_Abort_IT+0x460>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d02c      	beq.n	800254c <HAL_DMA_Abort_IT+0x3a0>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a46      	ldr	r2, [pc, #280]	; (8002610 <HAL_DMA_Abort_IT+0x464>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d027      	beq.n	800254c <HAL_DMA_Abort_IT+0x3a0>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a44      	ldr	r2, [pc, #272]	; (8002614 <HAL_DMA_Abort_IT+0x468>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d022      	beq.n	800254c <HAL_DMA_Abort_IT+0x3a0>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a43      	ldr	r2, [pc, #268]	; (8002618 <HAL_DMA_Abort_IT+0x46c>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d01d      	beq.n	800254c <HAL_DMA_Abort_IT+0x3a0>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a41      	ldr	r2, [pc, #260]	; (800261c <HAL_DMA_Abort_IT+0x470>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d018      	beq.n	800254c <HAL_DMA_Abort_IT+0x3a0>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a40      	ldr	r2, [pc, #256]	; (8002620 <HAL_DMA_Abort_IT+0x474>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d013      	beq.n	800254c <HAL_DMA_Abort_IT+0x3a0>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a3e      	ldr	r2, [pc, #248]	; (8002624 <HAL_DMA_Abort_IT+0x478>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d00e      	beq.n	800254c <HAL_DMA_Abort_IT+0x3a0>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a3d      	ldr	r2, [pc, #244]	; (8002628 <HAL_DMA_Abort_IT+0x47c>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d009      	beq.n	800254c <HAL_DMA_Abort_IT+0x3a0>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a3b      	ldr	r2, [pc, #236]	; (800262c <HAL_DMA_Abort_IT+0x480>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d004      	beq.n	800254c <HAL_DMA_Abort_IT+0x3a0>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a3a      	ldr	r2, [pc, #232]	; (8002630 <HAL_DMA_Abort_IT+0x484>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d101      	bne.n	8002550 <HAL_DMA_Abort_IT+0x3a4>
 800254c:	2301      	movs	r3, #1
 800254e:	e000      	b.n	8002552 <HAL_DMA_Abort_IT+0x3a6>
 8002550:	2300      	movs	r3, #0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d028      	beq.n	80025a8 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002560:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002564:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002570:	f003 031f 	and.w	r3, r3, #31
 8002574:	2201      	movs	r2, #1
 8002576:	409a      	lsls	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002584:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00c      	beq.n	80025a8 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002598:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800259c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80025a6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d003      	beq.n	80025c8 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40020010 	.word	0x40020010
 80025d8:	40020028 	.word	0x40020028
 80025dc:	40020040 	.word	0x40020040
 80025e0:	40020058 	.word	0x40020058
 80025e4:	40020070 	.word	0x40020070
 80025e8:	40020088 	.word	0x40020088
 80025ec:	400200a0 	.word	0x400200a0
 80025f0:	400200b8 	.word	0x400200b8
 80025f4:	40020410 	.word	0x40020410
 80025f8:	40020428 	.word	0x40020428
 80025fc:	40020440 	.word	0x40020440
 8002600:	40020458 	.word	0x40020458
 8002604:	40020470 	.word	0x40020470
 8002608:	40020488 	.word	0x40020488
 800260c:	400204a0 	.word	0x400204a0
 8002610:	400204b8 	.word	0x400204b8
 8002614:	58025408 	.word	0x58025408
 8002618:	5802541c 	.word	0x5802541c
 800261c:	58025430 	.word	0x58025430
 8002620:	58025444 	.word	0x58025444
 8002624:	58025458 	.word	0x58025458
 8002628:	5802546c 	.word	0x5802546c
 800262c:	58025480 	.word	0x58025480
 8002630:	58025494 	.word	0x58025494

08002634 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002634:	b480      	push	{r7}
 8002636:	b089      	sub	sp, #36	; 0x24
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800263e:	2300      	movs	r3, #0
 8002640:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002642:	4b89      	ldr	r3, [pc, #548]	; (8002868 <HAL_GPIO_Init+0x234>)
 8002644:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002646:	e194      	b.n	8002972 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	2101      	movs	r1, #1
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	fa01 f303 	lsl.w	r3, r1, r3
 8002654:	4013      	ands	r3, r2
 8002656:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 8186 	beq.w	800296c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d00b      	beq.n	8002680 <HAL_GPIO_Init+0x4c>
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	2b02      	cmp	r3, #2
 800266e:	d007      	beq.n	8002680 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002674:	2b11      	cmp	r3, #17
 8002676:	d003      	beq.n	8002680 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	2b12      	cmp	r3, #18
 800267e:	d130      	bne.n	80026e2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	2203      	movs	r2, #3
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	68da      	ldr	r2, [r3, #12]
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026b6:	2201      	movs	r2, #1
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	43db      	mvns	r3, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4013      	ands	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	091b      	lsrs	r3, r3, #4
 80026cc:	f003 0201 	and.w	r2, r3, #1
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4313      	orrs	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	2203      	movs	r2, #3
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	43db      	mvns	r3, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4013      	ands	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4313      	orrs	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b02      	cmp	r3, #2
 8002718:	d003      	beq.n	8002722 <HAL_GPIO_Init+0xee>
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b12      	cmp	r3, #18
 8002720:	d123      	bne.n	800276a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	08da      	lsrs	r2, r3, #3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	3208      	adds	r2, #8
 800272a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800272e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	220f      	movs	r2, #15
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	43db      	mvns	r3, r3
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4013      	ands	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	691a      	ldr	r2, [r3, #16]
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4313      	orrs	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	08da      	lsrs	r2, r3, #3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	3208      	adds	r2, #8
 8002764:	69b9      	ldr	r1, [r7, #24]
 8002766:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	2203      	movs	r2, #3
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	43db      	mvns	r3, r3
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	4013      	ands	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f003 0203 	and.w	r2, r3, #3
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4313      	orrs	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 80e0 	beq.w	800296c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ac:	4b2f      	ldr	r3, [pc, #188]	; (800286c <HAL_GPIO_Init+0x238>)
 80027ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80027b2:	4a2e      	ldr	r2, [pc, #184]	; (800286c <HAL_GPIO_Init+0x238>)
 80027b4:	f043 0302 	orr.w	r3, r3, #2
 80027b8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80027bc:	4b2b      	ldr	r3, [pc, #172]	; (800286c <HAL_GPIO_Init+0x238>)
 80027be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027ca:	4a29      	ldr	r2, [pc, #164]	; (8002870 <HAL_GPIO_Init+0x23c>)
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	089b      	lsrs	r3, r3, #2
 80027d0:	3302      	adds	r3, #2
 80027d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	220f      	movs	r2, #15
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	43db      	mvns	r3, r3
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	4013      	ands	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a20      	ldr	r2, [pc, #128]	; (8002874 <HAL_GPIO_Init+0x240>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d052      	beq.n	800289c <HAL_GPIO_Init+0x268>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a1f      	ldr	r2, [pc, #124]	; (8002878 <HAL_GPIO_Init+0x244>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d031      	beq.n	8002862 <HAL_GPIO_Init+0x22e>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a1e      	ldr	r2, [pc, #120]	; (800287c <HAL_GPIO_Init+0x248>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d02b      	beq.n	800285e <HAL_GPIO_Init+0x22a>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a1d      	ldr	r2, [pc, #116]	; (8002880 <HAL_GPIO_Init+0x24c>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d025      	beq.n	800285a <HAL_GPIO_Init+0x226>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a1c      	ldr	r2, [pc, #112]	; (8002884 <HAL_GPIO_Init+0x250>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d01f      	beq.n	8002856 <HAL_GPIO_Init+0x222>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a1b      	ldr	r2, [pc, #108]	; (8002888 <HAL_GPIO_Init+0x254>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d019      	beq.n	8002852 <HAL_GPIO_Init+0x21e>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a1a      	ldr	r2, [pc, #104]	; (800288c <HAL_GPIO_Init+0x258>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d013      	beq.n	800284e <HAL_GPIO_Init+0x21a>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a19      	ldr	r2, [pc, #100]	; (8002890 <HAL_GPIO_Init+0x25c>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d00d      	beq.n	800284a <HAL_GPIO_Init+0x216>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a18      	ldr	r2, [pc, #96]	; (8002894 <HAL_GPIO_Init+0x260>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d007      	beq.n	8002846 <HAL_GPIO_Init+0x212>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a17      	ldr	r2, [pc, #92]	; (8002898 <HAL_GPIO_Init+0x264>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d101      	bne.n	8002842 <HAL_GPIO_Init+0x20e>
 800283e:	2309      	movs	r3, #9
 8002840:	e02d      	b.n	800289e <HAL_GPIO_Init+0x26a>
 8002842:	230a      	movs	r3, #10
 8002844:	e02b      	b.n	800289e <HAL_GPIO_Init+0x26a>
 8002846:	2308      	movs	r3, #8
 8002848:	e029      	b.n	800289e <HAL_GPIO_Init+0x26a>
 800284a:	2307      	movs	r3, #7
 800284c:	e027      	b.n	800289e <HAL_GPIO_Init+0x26a>
 800284e:	2306      	movs	r3, #6
 8002850:	e025      	b.n	800289e <HAL_GPIO_Init+0x26a>
 8002852:	2305      	movs	r3, #5
 8002854:	e023      	b.n	800289e <HAL_GPIO_Init+0x26a>
 8002856:	2304      	movs	r3, #4
 8002858:	e021      	b.n	800289e <HAL_GPIO_Init+0x26a>
 800285a:	2303      	movs	r3, #3
 800285c:	e01f      	b.n	800289e <HAL_GPIO_Init+0x26a>
 800285e:	2302      	movs	r3, #2
 8002860:	e01d      	b.n	800289e <HAL_GPIO_Init+0x26a>
 8002862:	2301      	movs	r3, #1
 8002864:	e01b      	b.n	800289e <HAL_GPIO_Init+0x26a>
 8002866:	bf00      	nop
 8002868:	58000080 	.word	0x58000080
 800286c:	58024400 	.word	0x58024400
 8002870:	58000400 	.word	0x58000400
 8002874:	58020000 	.word	0x58020000
 8002878:	58020400 	.word	0x58020400
 800287c:	58020800 	.word	0x58020800
 8002880:	58020c00 	.word	0x58020c00
 8002884:	58021000 	.word	0x58021000
 8002888:	58021400 	.word	0x58021400
 800288c:	58021800 	.word	0x58021800
 8002890:	58021c00 	.word	0x58021c00
 8002894:	58022000 	.word	0x58022000
 8002898:	58022400 	.word	0x58022400
 800289c:	2300      	movs	r3, #0
 800289e:	69fa      	ldr	r2, [r7, #28]
 80028a0:	f002 0203 	and.w	r2, r2, #3
 80028a4:	0092      	lsls	r2, r2, #2
 80028a6:	4093      	lsls	r3, r2
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028ae:	4938      	ldr	r1, [pc, #224]	; (8002990 <HAL_GPIO_Init+0x35c>)
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	089b      	lsrs	r3, r3, #2
 80028b4:	3302      	adds	r3, #2
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	43db      	mvns	r3, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4013      	ands	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d003      	beq.n	80028e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	4313      	orrs	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	43db      	mvns	r3, r3
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	4013      	ands	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	4313      	orrs	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002910:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	43db      	mvns	r3, r3
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	4013      	ands	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	4313      	orrs	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002936:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800293e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	43db      	mvns	r3, r3
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4013      	ands	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d003      	beq.n	8002964 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	4313      	orrs	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002964:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	3301      	adds	r3, #1
 8002970:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	fa22 f303 	lsr.w	r3, r2, r3
 800297c:	2b00      	cmp	r3, #0
 800297e:	f47f ae63 	bne.w	8002648 <HAL_GPIO_Init+0x14>
  }
}
 8002982:	bf00      	nop
 8002984:	bf00      	nop
 8002986:	3724      	adds	r7, #36	; 0x24
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	58000400 	.word	0x58000400

08002994 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002994:	b480      	push	{r7}
 8002996:	b087      	sub	sp, #28
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800299e:	2300      	movs	r3, #0
 80029a0:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80029a2:	4b75      	ldr	r3, [pc, #468]	; (8002b78 <HAL_GPIO_DeInit+0x1e4>)
 80029a4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 80029a6:	e0d9      	b.n	8002b5c <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 80029a8:	2201      	movs	r2, #1
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	4013      	ands	r3, r2
 80029b4:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 80cc 	beq.w	8002b56 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 80029be:	4a6f      	ldr	r2, [pc, #444]	; (8002b7c <HAL_GPIO_DeInit+0x1e8>)
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	089b      	lsrs	r3, r3, #2
 80029c4:	3302      	adds	r3, #2
 80029c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ca:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	f003 0303 	and.w	r3, r3, #3
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	220f      	movs	r2, #15
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	68ba      	ldr	r2, [r7, #8]
 80029dc:	4013      	ands	r3, r2
 80029de:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a67      	ldr	r2, [pc, #412]	; (8002b80 <HAL_GPIO_DeInit+0x1ec>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d037      	beq.n	8002a58 <HAL_GPIO_DeInit+0xc4>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a66      	ldr	r2, [pc, #408]	; (8002b84 <HAL_GPIO_DeInit+0x1f0>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d031      	beq.n	8002a54 <HAL_GPIO_DeInit+0xc0>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a65      	ldr	r2, [pc, #404]	; (8002b88 <HAL_GPIO_DeInit+0x1f4>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d02b      	beq.n	8002a50 <HAL_GPIO_DeInit+0xbc>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a64      	ldr	r2, [pc, #400]	; (8002b8c <HAL_GPIO_DeInit+0x1f8>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d025      	beq.n	8002a4c <HAL_GPIO_DeInit+0xb8>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a63      	ldr	r2, [pc, #396]	; (8002b90 <HAL_GPIO_DeInit+0x1fc>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d01f      	beq.n	8002a48 <HAL_GPIO_DeInit+0xb4>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a62      	ldr	r2, [pc, #392]	; (8002b94 <HAL_GPIO_DeInit+0x200>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d019      	beq.n	8002a44 <HAL_GPIO_DeInit+0xb0>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a61      	ldr	r2, [pc, #388]	; (8002b98 <HAL_GPIO_DeInit+0x204>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d013      	beq.n	8002a40 <HAL_GPIO_DeInit+0xac>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a60      	ldr	r2, [pc, #384]	; (8002b9c <HAL_GPIO_DeInit+0x208>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d00d      	beq.n	8002a3c <HAL_GPIO_DeInit+0xa8>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a5f      	ldr	r2, [pc, #380]	; (8002ba0 <HAL_GPIO_DeInit+0x20c>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d007      	beq.n	8002a38 <HAL_GPIO_DeInit+0xa4>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a5e      	ldr	r2, [pc, #376]	; (8002ba4 <HAL_GPIO_DeInit+0x210>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d101      	bne.n	8002a34 <HAL_GPIO_DeInit+0xa0>
 8002a30:	2309      	movs	r3, #9
 8002a32:	e012      	b.n	8002a5a <HAL_GPIO_DeInit+0xc6>
 8002a34:	230a      	movs	r3, #10
 8002a36:	e010      	b.n	8002a5a <HAL_GPIO_DeInit+0xc6>
 8002a38:	2308      	movs	r3, #8
 8002a3a:	e00e      	b.n	8002a5a <HAL_GPIO_DeInit+0xc6>
 8002a3c:	2307      	movs	r3, #7
 8002a3e:	e00c      	b.n	8002a5a <HAL_GPIO_DeInit+0xc6>
 8002a40:	2306      	movs	r3, #6
 8002a42:	e00a      	b.n	8002a5a <HAL_GPIO_DeInit+0xc6>
 8002a44:	2305      	movs	r3, #5
 8002a46:	e008      	b.n	8002a5a <HAL_GPIO_DeInit+0xc6>
 8002a48:	2304      	movs	r3, #4
 8002a4a:	e006      	b.n	8002a5a <HAL_GPIO_DeInit+0xc6>
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e004      	b.n	8002a5a <HAL_GPIO_DeInit+0xc6>
 8002a50:	2302      	movs	r3, #2
 8002a52:	e002      	b.n	8002a5a <HAL_GPIO_DeInit+0xc6>
 8002a54:	2301      	movs	r3, #1
 8002a56:	e000      	b.n	8002a5a <HAL_GPIO_DeInit+0xc6>
 8002a58:	2300      	movs	r3, #0
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	f002 0203 	and.w	r2, r2, #3
 8002a60:	0092      	lsls	r2, r2, #2
 8002a62:	4093      	lsls	r3, r2
 8002a64:	68ba      	ldr	r2, [r7, #8]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d136      	bne.n	8002ad8 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	43db      	mvns	r3, r3
 8002a72:	401a      	ands	r2, r3
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	401a      	ands	r2, r3
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8002a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a94:	4013      	ands	r3, r2
 8002a96:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8002a98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	604b      	str	r3, [r1, #4]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	f003 0303 	and.w	r3, r3, #3
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	220f      	movs	r2, #15
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002aba:	4a30      	ldr	r2, [pc, #192]	; (8002b7c <HAL_GPIO_DeInit+0x1e8>)
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	089b      	lsrs	r3, r3, #2
 8002ac0:	3302      	adds	r3, #2
 8002ac2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	43da      	mvns	r2, r3
 8002aca:	482c      	ldr	r0, [pc, #176]	; (8002b7c <HAL_GPIO_DeInit+0x1e8>)
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	089b      	lsrs	r3, r3, #2
 8002ad0:	400a      	ands	r2, r1
 8002ad2:	3302      	adds	r3, #2
 8002ad4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	2103      	movs	r1, #3
 8002ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	08da      	lsrs	r2, r3, #3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3208      	adds	r2, #8
 8002af4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	220f      	movs	r2, #15
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	43db      	mvns	r3, r3
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	08d2      	lsrs	r2, r2, #3
 8002b0c:	4019      	ands	r1, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	3208      	adds	r2, #8
 8002b12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68da      	ldr	r2, [r3, #12]
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	2103      	movs	r1, #3
 8002b20:	fa01 f303 	lsl.w	r3, r1, r3
 8002b24:	43db      	mvns	r3, r3
 8002b26:	401a      	ands	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	2101      	movs	r1, #1
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	fa01 f303 	lsl.w	r3, r1, r3
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	401a      	ands	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689a      	ldr	r2, [r3, #8]
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	2103      	movs	r1, #3
 8002b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	401a      	ands	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	609a      	str	r2, [r3, #8]
    }

    position++;
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	fa22 f303 	lsr.w	r3, r2, r3
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f47f af1f 	bne.w	80029a8 <HAL_GPIO_DeInit+0x14>
  }
}
 8002b6a:	bf00      	nop
 8002b6c:	bf00      	nop
 8002b6e:	371c      	adds	r7, #28
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	58000080 	.word	0x58000080
 8002b7c:	58000400 	.word	0x58000400
 8002b80:	58020000 	.word	0x58020000
 8002b84:	58020400 	.word	0x58020400
 8002b88:	58020800 	.word	0x58020800
 8002b8c:	58020c00 	.word	0x58020c00
 8002b90:	58021000 	.word	0x58021000
 8002b94:	58021400 	.word	0x58021400
 8002b98:	58021800 	.word	0x58021800
 8002b9c:	58021c00 	.word	0x58021c00
 8002ba0:	58022000 	.word	0x58022000
 8002ba4:	58022400 	.word	0x58022400

08002ba8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	807b      	strh	r3, [r7, #2]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bb8:	787b      	ldrb	r3, [r7, #1]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bbe:	887a      	ldrh	r2, [r7, #2]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002bc4:	e003      	b.n	8002bce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002bc6:	887b      	ldrh	r3, [r7, #2]
 8002bc8:	041a      	lsls	r2, r3, #16
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	619a      	str	r2, [r3, #24]
}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
	...

08002bdc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002be4:	4a08      	ldr	r2, [pc, #32]	; (8002c08 <HAL_HSEM_FastTake+0x2c>)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	3320      	adds	r3, #32
 8002bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bee:	4a07      	ldr	r2, [pc, #28]	; (8002c0c <HAL_HSEM_FastTake+0x30>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d101      	bne.n	8002bf8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	e000      	b.n	8002bfa <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	58026400 	.word	0x58026400
 8002c0c:	80000300 	.word	0x80000300

08002c10 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002c1a:	4906      	ldr	r1, [pc, #24]	; (8002c34 <HAL_HSEM_Release+0x24>)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	58026400 	.word	0x58026400

08002c38 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002c40:	4b29      	ldr	r3, [pc, #164]	; (8002ce8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	2b06      	cmp	r3, #6
 8002c4a:	d00a      	beq.n	8002c62 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002c4c:	4b26      	ldr	r3, [pc, #152]	; (8002ce8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d001      	beq.n	8002c5e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e040      	b.n	8002ce0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	e03e      	b.n	8002ce0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002c62:	4b21      	ldr	r3, [pc, #132]	; (8002ce8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002c6a:	491f      	ldr	r1, [pc, #124]	; (8002ce8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002c72:	f7fe fe21 	bl	80018b8 <HAL_GetTick>
 8002c76:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002c78:	e009      	b.n	8002c8e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002c7a:	f7fe fe1d 	bl	80018b8 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c88:	d901      	bls.n	8002c8e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e028      	b.n	8002ce0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002c8e:	4b16      	ldr	r3, [pc, #88]	; (8002ce8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c9a:	d1ee      	bne.n	8002c7a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2b1e      	cmp	r3, #30
 8002ca0:	d008      	beq.n	8002cb4 <HAL_PWREx_ConfigSupply+0x7c>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2b2e      	cmp	r3, #46	; 0x2e
 8002ca6:	d005      	beq.n	8002cb4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b1d      	cmp	r3, #29
 8002cac:	d002      	beq.n	8002cb4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2b2d      	cmp	r3, #45	; 0x2d
 8002cb2:	d114      	bne.n	8002cde <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002cb4:	f7fe fe00 	bl	80018b8 <HAL_GetTick>
 8002cb8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002cba:	e009      	b.n	8002cd0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002cbc:	f7fe fdfc 	bl	80018b8 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cca:	d901      	bls.n	8002cd0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e007      	b.n	8002ce0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002cd0:	4b05      	ldr	r3, [pc, #20]	; (8002ce8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cdc:	d1ee      	bne.n	8002cbc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	58024800 	.word	0x58024800

08002cec <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af02      	add	r7, sp, #8
 8002cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002cf4:	f7fe fde0 	bl	80018b8 <HAL_GetTick>
 8002cf8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d101      	bne.n	8002d04 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e05f      	b.n	8002dc4 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d107      	bne.n	8002d20 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f7fd ffcd 	bl	8000cb0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002d16:	f241 3188 	movw	r1, #5000	; 0x1388
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fae0 	bl	80032e0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	021a      	lsls	r2, r3, #8
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d3e:	9300      	str	r3, [sp, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	2120      	movs	r1, #32
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 fad8 	bl	80032fc <QSPI_WaitFlagStateUntilTimeout>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002d50:	7afb      	ldrb	r3, [r7, #11]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d135      	bne.n	8002dc2 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	4b1b      	ldr	r3, [pc, #108]	; (8002dcc <HAL_QSPI_Init+0xe0>)
 8002d5e:	4013      	ands	r3, r2
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	6852      	ldr	r2, [r2, #4]
 8002d64:	0611      	lsls	r1, r2, #24
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	68d2      	ldr	r2, [r2, #12]
 8002d6a:	4311      	orrs	r1, r2
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	69d2      	ldr	r2, [r2, #28]
 8002d70:	4311      	orrs	r1, r2
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	6a12      	ldr	r2, [r2, #32]
 8002d76:	4311      	orrs	r1, r2
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	6812      	ldr	r2, [r2, #0]
 8002d7c:	430b      	orrs	r3, r1
 8002d7e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	4b12      	ldr	r3, [pc, #72]	; (8002dd0 <HAL_QSPI_Init+0xe4>)
 8002d88:	4013      	ands	r3, r2
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	6912      	ldr	r2, [r2, #16]
 8002d8e:	0411      	lsls	r1, r2, #16
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	6952      	ldr	r2, [r2, #20]
 8002d94:	4311      	orrs	r1, r2
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	6992      	ldr	r2, [r2, #24]
 8002d9a:	4311      	orrs	r1, r2
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	6812      	ldr	r2, [r2, #0]
 8002da0:	430b      	orrs	r3, r1
 8002da2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f042 0201 	orr.w	r2, r2, #1
 8002db2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8002dc2:	7afb      	ldrb	r3, [r7, #11]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	00ffff2f 	.word	0x00ffff2f
 8002dd0:	ffe0f8fe 	.word	0xffe0f8fe

08002dd4 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e012      	b.n	8002e0c <HAL_QSPI_DeInit+0x38>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 0201 	bic.w	r2, r2, #1
 8002df4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7fe f84c 	bl	8000e94 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3708      	adds	r7, #8
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b088      	sub	sp, #32
 8002e18:	af02      	add	r7, sp, #8
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002e20:	f7fe fd4a 	bl	80018b8 <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d101      	bne.n	8002e36 <HAL_QSPI_Command+0x22>
 8002e32:	2302      	movs	r3, #2
 8002e34:	e048      	b.n	8002ec8 <HAL_QSPI_Command+0xb4>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d137      	bne.n	8002eba <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2202      	movs	r2, #2
 8002e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	2120      	movs	r1, #32
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f000 fa4a 	bl	80032fc <QSPI_WaitFlagStateUntilTimeout>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8002e6c:	7dfb      	ldrb	r3, [r7, #23]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d125      	bne.n	8002ebe <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8002e72:	2200      	movs	r2, #0
 8002e74:	68b9      	ldr	r1, [r7, #8]
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f000 fa77 	bl	800336a <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d115      	bne.n	8002eb0 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	9300      	str	r3, [sp, #0]
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	2102      	movs	r1, #2
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f000 fa34 	bl	80032fc <QSPI_WaitFlagStateUntilTimeout>
 8002e94:	4603      	mov	r3, r0
 8002e96:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8002e98:	7dfb      	ldrb	r3, [r7, #23]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d10f      	bne.n	8002ebe <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002eae:	e006      	b.n	8002ebe <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002eb8:	e001      	b.n	8002ebe <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8002eba:	2302      	movs	r3, #2
 8002ebc:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8002ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3718      	adds	r7, #24
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <HAL_QSPI_Transmit>:
  * @note   This function is used only in Indirect Write Mode
  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b08a      	sub	sp, #40	; 0x28
 8002ed4:	af02      	add	r7, sp, #8
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002edc:	2300      	movs	r3, #0
 8002ede:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8002ee0:	f7fe fcea 	bl	80018b8 <HAL_GetTick>
 8002ee4:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	3320      	adds	r3, #32
 8002eec:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d101      	bne.n	8002efe <HAL_QSPI_Transmit+0x2e>
 8002efa:	2302      	movs	r3, #2
 8002efc:	e076      	b.n	8002fec <HAL_QSPI_Transmit+0x11c>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d165      	bne.n	8002fde <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d056      	beq.n	8002fcc <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2212      	movs	r2, #18
 8002f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	1c5a      	adds	r2, r3, #1
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	1c5a      	adds	r2, r3, #1
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	68ba      	ldr	r2, [r7, #8]
 8002f42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	695a      	ldr	r2, [r3, #20]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8002f52:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8002f54:	e01b      	b.n	8002f8e <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	2104      	movs	r1, #4
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 f9cb 	bl	80032fc <QSPI_WaitFlagStateUntilTimeout>
 8002f66:	4603      	mov	r3, r0
 8002f68:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8002f6a:	7ffb      	ldrb	r3, [r7, #31]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d113      	bne.n	8002f98 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	781a      	ldrb	r2, [r3, #0]
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7e:	1c5a      	adds	r2, r3, #1
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f88:	1e5a      	subs	r2, r3, #1
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1df      	bne.n	8002f56 <HAL_QSPI_Transmit+0x86>
 8002f96:	e000      	b.n	8002f9a <HAL_QSPI_Transmit+0xca>
          break;
 8002f98:	bf00      	nop
      }

      if (status == HAL_OK)
 8002f9a:	7ffb      	ldrb	r3, [r7, #31]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d110      	bne.n	8002fc2 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	2102      	movs	r1, #2
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 f9a6 	bl	80032fc <QSPI_WaitFlagStateUntilTimeout>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8002fb4:	7ffb      	ldrb	r3, [r7, #31]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d103      	bne.n	8002fc2 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002fca:	e00a      	b.n	8002fe2 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd0:	f043 0208 	orr.w	r2, r3, #8
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	77fb      	strb	r3, [r7, #31]
 8002fdc:	e001      	b.n	8002fe2 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 8002fde:	2302      	movs	r3, #2
 8002fe0:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8002fea:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3720      	adds	r7, #32
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b08a      	sub	sp, #40	; 0x28
 8002ff8:	af02      	add	r7, sp, #8
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003000:	2300      	movs	r3, #0
 8003002:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8003004:	f7fe fc58 	bl	80018b8 <HAL_GetTick>
 8003008:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	3320      	adds	r3, #32
 8003018:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b01      	cmp	r3, #1
 8003024:	d101      	bne.n	800302a <HAL_QSPI_Receive+0x36>
 8003026:	2302      	movs	r3, #2
 8003028:	e07d      	b.n	8003126 <HAL_QSPI_Receive+0x132>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b01      	cmp	r3, #1
 800303c:	d16c      	bne.n	8003118 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d05d      	beq.n	8003106 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2222      	movs	r2, #34	; 0x22
 800304e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	1c5a      	adds	r2, r3, #1
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	1c5a      	adds	r2, r3, #1
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	68ba      	ldr	r2, [r7, #8]
 800306e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003082:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800308c:	e01c      	b.n	80030c8 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	2201      	movs	r2, #1
 8003096:	2106      	movs	r1, #6
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f000 f92f 	bl	80032fc <QSPI_WaitFlagStateUntilTimeout>
 800309e:	4603      	mov	r3, r0
 80030a0:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 80030a2:	7ffb      	ldrb	r3, [r7, #31]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d114      	bne.n	80030d2 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	7812      	ldrb	r2, [r2, #0]
 80030b0:	b2d2      	uxtb	r2, r2
 80030b2:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b8:	1c5a      	adds	r2, r3, #1
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c2:	1e5a      	subs	r2, r3, #1
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1de      	bne.n	800308e <HAL_QSPI_Receive+0x9a>
 80030d0:	e000      	b.n	80030d4 <HAL_QSPI_Receive+0xe0>
          break;
 80030d2:	bf00      	nop
      }

      if (status == HAL_OK)
 80030d4:	7ffb      	ldrb	r3, [r7, #31]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d110      	bne.n	80030fc <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	2201      	movs	r2, #1
 80030e2:	2102      	movs	r1, #2
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f000 f909 	bl	80032fc <QSPI_WaitFlagStateUntilTimeout>
 80030ea:	4603      	mov	r3, r0
 80030ec:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 80030ee:	7ffb      	ldrb	r3, [r7, #31]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d103      	bne.n	80030fc <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2202      	movs	r2, #2
 80030fa:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003104:	e00a      	b.n	800311c <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310a:	f043 0208 	orr.w	r2, r3, #8
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	77fb      	strb	r3, [r7, #31]
 8003116:	e001      	b.n	800311c <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8003118:	2302      	movs	r3, #2
 800311a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8003124:	7ffb      	ldrb	r3, [r7, #31]
}
 8003126:	4618      	mov	r0, r3
 8003128:	3720      	adds	r7, #32
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b088      	sub	sp, #32
 8003132:	af02      	add	r7, sp, #8
 8003134:	60f8      	str	r0, [r7, #12]
 8003136:	60b9      	str	r1, [r7, #8]
 8003138:	607a      	str	r2, [r7, #4]
 800313a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800313c:	f7fe fbbc 	bl	80018b8 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b01      	cmp	r3, #1
 800314c:	d101      	bne.n	8003152 <HAL_QSPI_AutoPolling+0x24>
 800314e:	2302      	movs	r3, #2
 8003150:	e060      	b.n	8003214 <HAL_QSPI_AutoPolling+0xe6>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b01      	cmp	r3, #1
 8003164:	d14f      	bne.n	8003206 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2242      	movs	r2, #66	; 0x42
 8003170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	9300      	str	r3, [sp, #0]
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	2200      	movs	r2, #0
 800317c:	2120      	movs	r1, #32
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f000 f8bc 	bl	80032fc <QSPI_WaitFlagStateUntilTimeout>
 8003184:	4603      	mov	r3, r0
 8003186:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8003188:	7dfb      	ldrb	r3, [r7, #23]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d13d      	bne.n	800320a <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	6812      	ldr	r2, [r2, #0]
 8003196:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	6852      	ldr	r2, [r2, #4]
 80031a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	6892      	ldr	r2, [r2, #8]
 80031aa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	431a      	orrs	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80031c4:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68da      	ldr	r2, [r3, #12]
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80031ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80031d2:	68b9      	ldr	r1, [r7, #8]
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f000 f8c8 	bl	800336a <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	9300      	str	r3, [sp, #0]
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	2201      	movs	r2, #1
 80031e2:	2108      	movs	r1, #8
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f000 f889 	bl	80032fc <QSPI_WaitFlagStateUntilTimeout>
 80031ea:	4603      	mov	r3, r0
 80031ec:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80031ee:	7dfb      	ldrb	r3, [r7, #23]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d10a      	bne.n	800320a <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2208      	movs	r2, #8
 80031fa:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003204:	e001      	b.n	800320a <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8003206:	2302      	movs	r3, #2
 8003208:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8003212:	7dfb      	ldrb	r3, [r7, #23]
}
 8003214:	4618      	mov	r0, r3
 8003216:	3718      	adds	r7, #24
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <HAL_QSPI_MemoryMapped>:
  * @param  cfg : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b088      	sub	sp, #32
 8003220:	af02      	add	r7, sp, #8
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003228:	f7fe fb46 	bl	80018b8 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b01      	cmp	r3, #1
 8003238:	d101      	bne.n	800323e <HAL_QSPI_MemoryMapped+0x22>
 800323a:	2302      	movs	r3, #2
 800323c:	e04c      	b.n	80032d8 <HAL_QSPI_MemoryMapped+0xbc>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b01      	cmp	r3, #1
 8003250:	d13b      	bne.n	80032ca <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2282      	movs	r2, #130	; 0x82
 800325c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	2200      	movs	r2, #0
 800326a:	2120      	movs	r1, #32
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f000 f845 	bl	80032fc <QSPI_WaitFlagStateUntilTimeout>
 8003272:	4603      	mov	r3, r0
 8003274:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8003276:	7dfb      	ldrb	r3, [r7, #23]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d128      	bne.n	80032ce <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f023 0108 	bic.w	r1, r3, #8
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2b08      	cmp	r3, #8
 8003298:	d110      	bne.n	80032bc <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6812      	ldr	r2, [r2, #0]
 80032a2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2210      	movs	r2, #16
 80032aa:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80032ba:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 80032bc:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80032c0:	68b9      	ldr	r1, [r7, #8]
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 f851 	bl	800336a <QSPI_Config>
 80032c8:	e001      	b.n	80032ce <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 80032ca:	2302      	movs	r3, #2
 80032cc:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80032d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3718      	adds	r7, #24
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	649a      	str	r2, [r3, #72]	; 0x48
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	603b      	str	r3, [r7, #0]
 8003308:	4613      	mov	r3, r2
 800330a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800330c:	e01a      	b.n	8003344 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003314:	d016      	beq.n	8003344 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003316:	f7fe facf 	bl	80018b8 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	429a      	cmp	r2, r3
 8003324:	d302      	bcc.n	800332c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d10b      	bne.n	8003344 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2204      	movs	r2, #4
 8003330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003338:	f043 0201 	orr.w	r2, r3, #1
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e00e      	b.n	8003362 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689a      	ldr	r2, [r3, #8]
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	4013      	ands	r3, r2
 800334e:	2b00      	cmp	r3, #0
 8003350:	bf14      	ite	ne
 8003352:	2301      	movne	r3, #1
 8003354:	2300      	moveq	r3, #0
 8003356:	b2db      	uxtb	r3, r3
 8003358:	461a      	mov	r2, r3
 800335a:	79fb      	ldrb	r3, [r7, #7]
 800335c:	429a      	cmp	r2, r3
 800335e:	d1d6      	bne.n	800330e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800336a:	b480      	push	{r7}
 800336c:	b085      	sub	sp, #20
 800336e:	af00      	add	r7, sp, #0
 8003370:	60f8      	str	r0, [r7, #12]
 8003372:	60b9      	str	r1, [r7, #8]
 8003374:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337a:	2b00      	cmp	r3, #0
 800337c:	d009      	beq.n	8003392 <QSPI_Config+0x28>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003384:	d005      	beq.n	8003392 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	3a01      	subs	r2, #1
 8003390:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 80b9 	beq.w	800350e <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d05f      	beq.n	8003464 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	6892      	ldr	r2, [r2, #8]
 80033ac:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d031      	beq.n	800341a <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033be:	431a      	orrs	r2, r3
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c4:	431a      	orrs	r2, r3
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ca:	431a      	orrs	r2, r3
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	049b      	lsls	r3, r3, #18
 80033d2:	431a      	orrs	r2, r3
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	431a      	orrs	r2, r3
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	431a      	orrs	r2, r3
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	431a      	orrs	r2, r3
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	431a      	orrs	r2, r3
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	431a      	orrs	r2, r3
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	ea42 0103 	orr.w	r1, r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	430a      	orrs	r2, r1
 8003402:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800340a:	f000 812e 	beq.w	800366a <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	6852      	ldr	r2, [r2, #4]
 8003416:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8003418:	e127      	b.n	800366a <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003422:	431a      	orrs	r2, r3
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003428:	431a      	orrs	r2, r3
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	431a      	orrs	r2, r3
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	695b      	ldr	r3, [r3, #20]
 8003434:	049b      	lsls	r3, r3, #18
 8003436:	431a      	orrs	r2, r3
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	431a      	orrs	r2, r3
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	431a      	orrs	r2, r3
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	69db      	ldr	r3, [r3, #28]
 8003448:	431a      	orrs	r2, r3
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	431a      	orrs	r2, r3
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	ea42 0103 	orr.w	r1, r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	430a      	orrs	r2, r1
 8003460:	615a      	str	r2, [r3, #20]
}
 8003462:	e102      	b.n	800366a <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	69db      	ldr	r3, [r3, #28]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d02e      	beq.n	80034ca <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003474:	431a      	orrs	r2, r3
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800347a:	431a      	orrs	r2, r3
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	431a      	orrs	r2, r3
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	049b      	lsls	r3, r3, #18
 8003488:	431a      	orrs	r2, r3
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	431a      	orrs	r2, r3
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	431a      	orrs	r2, r3
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	431a      	orrs	r2, r3
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	431a      	orrs	r2, r3
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	ea42 0103 	orr.w	r1, r2, r3
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80034ba:	f000 80d6 	beq.w	800366a <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	6852      	ldr	r2, [r2, #4]
 80034c6:	619a      	str	r2, [r3, #24]
}
 80034c8:	e0cf      	b.n	800366a <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	431a      	orrs	r2, r3
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d8:	431a      	orrs	r2, r3
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034de:	431a      	orrs	r2, r3
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	049b      	lsls	r3, r3, #18
 80034e6:	431a      	orrs	r2, r3
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	6a1b      	ldr	r3, [r3, #32]
 80034ec:	431a      	orrs	r2, r3
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	431a      	orrs	r2, r3
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	431a      	orrs	r2, r3
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	ea42 0103 	orr.w	r1, r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	430a      	orrs	r2, r1
 800350a:	615a      	str	r2, [r3, #20]
}
 800350c:	e0ad      	b.n	800366a <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d058      	beq.n	80035c8 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	6892      	ldr	r2, [r2, #8]
 800351e:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	69db      	ldr	r3, [r3, #28]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d02d      	beq.n	8003584 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003530:	431a      	orrs	r2, r3
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003536:	431a      	orrs	r2, r3
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	431a      	orrs	r2, r3
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	049b      	lsls	r3, r3, #18
 8003544:	431a      	orrs	r2, r3
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	431a      	orrs	r2, r3
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	431a      	orrs	r2, r3
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	431a      	orrs	r2, r3
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	69db      	ldr	r3, [r3, #28]
 800355c:	431a      	orrs	r2, r3
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	ea42 0103 	orr.w	r1, r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	430a      	orrs	r2, r1
 800356e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003576:	d078      	beq.n	800366a <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68ba      	ldr	r2, [r7, #8]
 800357e:	6852      	ldr	r2, [r2, #4]
 8003580:	619a      	str	r2, [r3, #24]
}
 8003582:	e072      	b.n	800366a <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358c:	431a      	orrs	r2, r3
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003592:	431a      	orrs	r2, r3
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003598:	431a      	orrs	r2, r3
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	049b      	lsls	r3, r3, #18
 80035a0:	431a      	orrs	r2, r3
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	431a      	orrs	r2, r3
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	431a      	orrs	r2, r3
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	431a      	orrs	r2, r3
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	ea42 0103 	orr.w	r1, r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	615a      	str	r2, [r3, #20]
}
 80035c6:	e050      	b.n	800366a <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	69db      	ldr	r3, [r3, #28]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d02a      	beq.n	8003626 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d8:	431a      	orrs	r2, r3
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035de:	431a      	orrs	r2, r3
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e4:	431a      	orrs	r2, r3
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	049b      	lsls	r3, r3, #18
 80035ec:	431a      	orrs	r2, r3
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	431a      	orrs	r2, r3
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	431a      	orrs	r2, r3
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	431a      	orrs	r2, r3
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	ea42 0103 	orr.w	r1, r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	430a      	orrs	r2, r1
 8003610:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003618:	d027      	beq.n	800366a <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	6852      	ldr	r2, [r2, #4]
 8003622:	619a      	str	r2, [r3, #24]
}
 8003624:	e021      	b.n	800366a <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362a:	2b00      	cmp	r3, #0
 800362c:	d01d      	beq.n	800366a <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003636:	431a      	orrs	r2, r3
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800363c:	431a      	orrs	r2, r3
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003642:	431a      	orrs	r2, r3
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	049b      	lsls	r3, r3, #18
 800364a:	431a      	orrs	r2, r3
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	431a      	orrs	r2, r3
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	431a      	orrs	r2, r3
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	ea42 0103 	orr.w	r1, r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	430a      	orrs	r2, r1
 8003668:	615a      	str	r2, [r3, #20]
}
 800366a:	bf00      	nop
 800366c:	3714      	adds	r7, #20
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
	...

08003678 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b08c      	sub	sp, #48	; 0x30
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e3ff      	b.n	8003e8a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 8087 	beq.w	80037a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003698:	4b99      	ldr	r3, [pc, #612]	; (8003900 <HAL_RCC_OscConfig+0x288>)
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80036a2:	4b97      	ldr	r3, [pc, #604]	; (8003900 <HAL_RCC_OscConfig+0x288>)
 80036a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80036a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036aa:	2b10      	cmp	r3, #16
 80036ac:	d007      	beq.n	80036be <HAL_RCC_OscConfig+0x46>
 80036ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b0:	2b18      	cmp	r3, #24
 80036b2:	d110      	bne.n	80036d6 <HAL_RCC_OscConfig+0x5e>
 80036b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d10b      	bne.n	80036d6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036be:	4b90      	ldr	r3, [pc, #576]	; (8003900 <HAL_RCC_OscConfig+0x288>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d06c      	beq.n	80037a4 <HAL_RCC_OscConfig+0x12c>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d168      	bne.n	80037a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e3d9      	b.n	8003e8a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036de:	d106      	bne.n	80036ee <HAL_RCC_OscConfig+0x76>
 80036e0:	4b87      	ldr	r3, [pc, #540]	; (8003900 <HAL_RCC_OscConfig+0x288>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a86      	ldr	r2, [pc, #536]	; (8003900 <HAL_RCC_OscConfig+0x288>)
 80036e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ea:	6013      	str	r3, [r2, #0]
 80036ec:	e02e      	b.n	800374c <HAL_RCC_OscConfig+0xd4>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10c      	bne.n	8003710 <HAL_RCC_OscConfig+0x98>
 80036f6:	4b82      	ldr	r3, [pc, #520]	; (8003900 <HAL_RCC_OscConfig+0x288>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a81      	ldr	r2, [pc, #516]	; (8003900 <HAL_RCC_OscConfig+0x288>)
 80036fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003700:	6013      	str	r3, [r2, #0]
 8003702:	4b7f      	ldr	r3, [pc, #508]	; (8003900 <HAL_RCC_OscConfig+0x288>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a7e      	ldr	r2, [pc, #504]	; (8003900 <HAL_RCC_OscConfig+0x288>)
 8003708:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800370c:	6013      	str	r3, [r2, #0]
 800370e:	e01d      	b.n	800374c <HAL_RCC_OscConfig+0xd4>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003718:	d10c      	bne.n	8003734 <HAL_RCC_OscConfig+0xbc>
 800371a:	4b79      	ldr	r3, [pc, #484]	; (8003900 <HAL_RCC_OscConfig+0x288>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a78      	ldr	r2, [pc, #480]	; (8003900 <HAL_RCC_OscConfig+0x288>)
 8003720:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003724:	6013      	str	r3, [r2, #0]
 8003726:	4b76      	ldr	r3, [pc, #472]	; (8003900 <HAL_RCC_OscConfig+0x288>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a75      	ldr	r2, [pc, #468]	; (8003900 <HAL_RCC_OscConfig+0x288>)
 800372c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003730:	6013      	str	r3, [r2, #0]
 8003732:	e00b      	b.n	800374c <HAL_RCC_OscConfig+0xd4>
 8003734:	4b72      	ldr	r3, [pc, #456]	; (8003900 <HAL_RCC_OscConfig+0x288>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a71      	ldr	r2, [pc, #452]	; (8003900 <HAL_RCC_OscConfig+0x288>)
 800373a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800373e:	6013      	str	r3, [r2, #0]
 8003740:	4b6f      	ldr	r3, [pc, #444]	; (8003900 <HAL_RCC_OscConfig+0x288>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a6e      	ldr	r2, [pc, #440]	; (8003900 <HAL_RCC_OscConfig+0x288>)
 8003746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800374a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d013      	beq.n	800377c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003754:	f7fe f8b0 	bl	80018b8 <HAL_GetTick>
 8003758:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800375c:	f7fe f8ac 	bl	80018b8 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b64      	cmp	r3, #100	; 0x64
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e38d      	b.n	8003e8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800376e:	4b64      	ldr	r3, [pc, #400]	; (8003900 <HAL_RCC_OscConfig+0x288>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d0f0      	beq.n	800375c <HAL_RCC_OscConfig+0xe4>
 800377a:	e014      	b.n	80037a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800377c:	f7fe f89c 	bl	80018b8 <HAL_GetTick>
 8003780:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003784:	f7fe f898 	bl	80018b8 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b64      	cmp	r3, #100	; 0x64
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e379      	b.n	8003e8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003796:	4b5a      	ldr	r3, [pc, #360]	; (8003900 <HAL_RCC_OscConfig+0x288>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1f0      	bne.n	8003784 <HAL_RCC_OscConfig+0x10c>
 80037a2:	e000      	b.n	80037a6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f000 80ae 	beq.w	8003910 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037b4:	4b52      	ldr	r3, [pc, #328]	; (8003900 <HAL_RCC_OscConfig+0x288>)
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037bc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80037be:	4b50      	ldr	r3, [pc, #320]	; (8003900 <HAL_RCC_OscConfig+0x288>)
 80037c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80037c4:	6a3b      	ldr	r3, [r7, #32]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d007      	beq.n	80037da <HAL_RCC_OscConfig+0x162>
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	2b18      	cmp	r3, #24
 80037ce:	d13a      	bne.n	8003846 <HAL_RCC_OscConfig+0x1ce>
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	f003 0303 	and.w	r3, r3, #3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d135      	bne.n	8003846 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037da:	4b49      	ldr	r3, [pc, #292]	; (8003900 <HAL_RCC_OscConfig+0x288>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0304 	and.w	r3, r3, #4
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d005      	beq.n	80037f2 <HAL_RCC_OscConfig+0x17a>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e34b      	b.n	8003e8a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037f2:	f7fe f891 	bl	8001918 <HAL_GetREVID>
 80037f6:	4603      	mov	r3, r0
 80037f8:	f241 0203 	movw	r2, #4099	; 0x1003
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d817      	bhi.n	8003830 <HAL_RCC_OscConfig+0x1b8>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	2b40      	cmp	r3, #64	; 0x40
 8003806:	d108      	bne.n	800381a <HAL_RCC_OscConfig+0x1a2>
 8003808:	4b3d      	ldr	r3, [pc, #244]	; (8003900 <HAL_RCC_OscConfig+0x288>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003810:	4a3b      	ldr	r2, [pc, #236]	; (8003900 <HAL_RCC_OscConfig+0x288>)
 8003812:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003816:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003818:	e07a      	b.n	8003910 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800381a:	4b39      	ldr	r3, [pc, #228]	; (8003900 <HAL_RCC_OscConfig+0x288>)
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	031b      	lsls	r3, r3, #12
 8003828:	4935      	ldr	r1, [pc, #212]	; (8003900 <HAL_RCC_OscConfig+0x288>)
 800382a:	4313      	orrs	r3, r2
 800382c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800382e:	e06f      	b.n	8003910 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003830:	4b33      	ldr	r3, [pc, #204]	; (8003900 <HAL_RCC_OscConfig+0x288>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	061b      	lsls	r3, r3, #24
 800383e:	4930      	ldr	r1, [pc, #192]	; (8003900 <HAL_RCC_OscConfig+0x288>)
 8003840:	4313      	orrs	r3, r2
 8003842:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003844:	e064      	b.n	8003910 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d045      	beq.n	80038da <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800384e:	4b2c      	ldr	r3, [pc, #176]	; (8003900 <HAL_RCC_OscConfig+0x288>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f023 0219 	bic.w	r2, r3, #25
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	4929      	ldr	r1, [pc, #164]	; (8003900 <HAL_RCC_OscConfig+0x288>)
 800385c:	4313      	orrs	r3, r2
 800385e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003860:	f7fe f82a 	bl	80018b8 <HAL_GetTick>
 8003864:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003868:	f7fe f826 	bl	80018b8 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b02      	cmp	r3, #2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e307      	b.n	8003e8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800387a:	4b21      	ldr	r3, [pc, #132]	; (8003900 <HAL_RCC_OscConfig+0x288>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0304 	and.w	r3, r3, #4
 8003882:	2b00      	cmp	r3, #0
 8003884:	d0f0      	beq.n	8003868 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003886:	f7fe f847 	bl	8001918 <HAL_GetREVID>
 800388a:	4603      	mov	r3, r0
 800388c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003890:	4293      	cmp	r3, r2
 8003892:	d817      	bhi.n	80038c4 <HAL_RCC_OscConfig+0x24c>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	2b40      	cmp	r3, #64	; 0x40
 800389a:	d108      	bne.n	80038ae <HAL_RCC_OscConfig+0x236>
 800389c:	4b18      	ldr	r3, [pc, #96]	; (8003900 <HAL_RCC_OscConfig+0x288>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80038a4:	4a16      	ldr	r2, [pc, #88]	; (8003900 <HAL_RCC_OscConfig+0x288>)
 80038a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038aa:	6053      	str	r3, [r2, #4]
 80038ac:	e030      	b.n	8003910 <HAL_RCC_OscConfig+0x298>
 80038ae:	4b14      	ldr	r3, [pc, #80]	; (8003900 <HAL_RCC_OscConfig+0x288>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	031b      	lsls	r3, r3, #12
 80038bc:	4910      	ldr	r1, [pc, #64]	; (8003900 <HAL_RCC_OscConfig+0x288>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	604b      	str	r3, [r1, #4]
 80038c2:	e025      	b.n	8003910 <HAL_RCC_OscConfig+0x298>
 80038c4:	4b0e      	ldr	r3, [pc, #56]	; (8003900 <HAL_RCC_OscConfig+0x288>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	061b      	lsls	r3, r3, #24
 80038d2:	490b      	ldr	r1, [pc, #44]	; (8003900 <HAL_RCC_OscConfig+0x288>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	604b      	str	r3, [r1, #4]
 80038d8:	e01a      	b.n	8003910 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038da:	4b09      	ldr	r3, [pc, #36]	; (8003900 <HAL_RCC_OscConfig+0x288>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a08      	ldr	r2, [pc, #32]	; (8003900 <HAL_RCC_OscConfig+0x288>)
 80038e0:	f023 0301 	bic.w	r3, r3, #1
 80038e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e6:	f7fd ffe7 	bl	80018b8 <HAL_GetTick>
 80038ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80038ec:	e00a      	b.n	8003904 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038ee:	f7fd ffe3 	bl	80018b8 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d903      	bls.n	8003904 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e2c4      	b.n	8003e8a <HAL_RCC_OscConfig+0x812>
 8003900:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003904:	4ba4      	ldr	r3, [pc, #656]	; (8003b98 <HAL_RCC_OscConfig+0x520>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1ee      	bne.n	80038ee <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0310 	and.w	r3, r3, #16
 8003918:	2b00      	cmp	r3, #0
 800391a:	f000 80a9 	beq.w	8003a70 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800391e:	4b9e      	ldr	r3, [pc, #632]	; (8003b98 <HAL_RCC_OscConfig+0x520>)
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003926:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003928:	4b9b      	ldr	r3, [pc, #620]	; (8003b98 <HAL_RCC_OscConfig+0x520>)
 800392a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	2b08      	cmp	r3, #8
 8003932:	d007      	beq.n	8003944 <HAL_RCC_OscConfig+0x2cc>
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	2b18      	cmp	r3, #24
 8003938:	d13a      	bne.n	80039b0 <HAL_RCC_OscConfig+0x338>
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f003 0303 	and.w	r3, r3, #3
 8003940:	2b01      	cmp	r3, #1
 8003942:	d135      	bne.n	80039b0 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003944:	4b94      	ldr	r3, [pc, #592]	; (8003b98 <HAL_RCC_OscConfig+0x520>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800394c:	2b00      	cmp	r3, #0
 800394e:	d005      	beq.n	800395c <HAL_RCC_OscConfig+0x2e4>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	69db      	ldr	r3, [r3, #28]
 8003954:	2b80      	cmp	r3, #128	; 0x80
 8003956:	d001      	beq.n	800395c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e296      	b.n	8003e8a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800395c:	f7fd ffdc 	bl	8001918 <HAL_GetREVID>
 8003960:	4603      	mov	r3, r0
 8003962:	f241 0203 	movw	r2, #4099	; 0x1003
 8003966:	4293      	cmp	r3, r2
 8003968:	d817      	bhi.n	800399a <HAL_RCC_OscConfig+0x322>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	2b20      	cmp	r3, #32
 8003970:	d108      	bne.n	8003984 <HAL_RCC_OscConfig+0x30c>
 8003972:	4b89      	ldr	r3, [pc, #548]	; (8003b98 <HAL_RCC_OscConfig+0x520>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800397a:	4a87      	ldr	r2, [pc, #540]	; (8003b98 <HAL_RCC_OscConfig+0x520>)
 800397c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003980:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003982:	e075      	b.n	8003a70 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003984:	4b84      	ldr	r3, [pc, #528]	; (8003b98 <HAL_RCC_OscConfig+0x520>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a1b      	ldr	r3, [r3, #32]
 8003990:	069b      	lsls	r3, r3, #26
 8003992:	4981      	ldr	r1, [pc, #516]	; (8003b98 <HAL_RCC_OscConfig+0x520>)
 8003994:	4313      	orrs	r3, r2
 8003996:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003998:	e06a      	b.n	8003a70 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800399a:	4b7f      	ldr	r3, [pc, #508]	; (8003b98 <HAL_RCC_OscConfig+0x520>)
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	061b      	lsls	r3, r3, #24
 80039a8:	497b      	ldr	r1, [pc, #492]	; (8003b98 <HAL_RCC_OscConfig+0x520>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039ae:	e05f      	b.n	8003a70 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	69db      	ldr	r3, [r3, #28]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d042      	beq.n	8003a3e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80039b8:	4b77      	ldr	r3, [pc, #476]	; (8003b98 <HAL_RCC_OscConfig+0x520>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a76      	ldr	r2, [pc, #472]	; (8003b98 <HAL_RCC_OscConfig+0x520>)
 80039be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c4:	f7fd ff78 	bl	80018b8 <HAL_GetTick>
 80039c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80039cc:	f7fd ff74 	bl	80018b8 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e255      	b.n	8003e8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039de:	4b6e      	ldr	r3, [pc, #440]	; (8003b98 <HAL_RCC_OscConfig+0x520>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d0f0      	beq.n	80039cc <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039ea:	f7fd ff95 	bl	8001918 <HAL_GetREVID>
 80039ee:	4603      	mov	r3, r0
 80039f0:	f241 0203 	movw	r2, #4099	; 0x1003
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d817      	bhi.n	8003a28 <HAL_RCC_OscConfig+0x3b0>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	2b20      	cmp	r3, #32
 80039fe:	d108      	bne.n	8003a12 <HAL_RCC_OscConfig+0x39a>
 8003a00:	4b65      	ldr	r3, [pc, #404]	; (8003b98 <HAL_RCC_OscConfig+0x520>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003a08:	4a63      	ldr	r2, [pc, #396]	; (8003b98 <HAL_RCC_OscConfig+0x520>)
 8003a0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a0e:	6053      	str	r3, [r2, #4]
 8003a10:	e02e      	b.n	8003a70 <HAL_RCC_OscConfig+0x3f8>
 8003a12:	4b61      	ldr	r3, [pc, #388]	; (8003b98 <HAL_RCC_OscConfig+0x520>)
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	069b      	lsls	r3, r3, #26
 8003a20:	495d      	ldr	r1, [pc, #372]	; (8003b98 <HAL_RCC_OscConfig+0x520>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	604b      	str	r3, [r1, #4]
 8003a26:	e023      	b.n	8003a70 <HAL_RCC_OscConfig+0x3f8>
 8003a28:	4b5b      	ldr	r3, [pc, #364]	; (8003b98 <HAL_RCC_OscConfig+0x520>)
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	061b      	lsls	r3, r3, #24
 8003a36:	4958      	ldr	r1, [pc, #352]	; (8003b98 <HAL_RCC_OscConfig+0x520>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	60cb      	str	r3, [r1, #12]
 8003a3c:	e018      	b.n	8003a70 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003a3e:	4b56      	ldr	r3, [pc, #344]	; (8003b98 <HAL_RCC_OscConfig+0x520>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a55      	ldr	r2, [pc, #340]	; (8003b98 <HAL_RCC_OscConfig+0x520>)
 8003a44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a4a:	f7fd ff35 	bl	80018b8 <HAL_GetTick>
 8003a4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a50:	e008      	b.n	8003a64 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003a52:	f7fd ff31 	bl	80018b8 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d901      	bls.n	8003a64 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e212      	b.n	8003e8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a64:	4b4c      	ldr	r3, [pc, #304]	; (8003b98 <HAL_RCC_OscConfig+0x520>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1f0      	bne.n	8003a52 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0308 	and.w	r3, r3, #8
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d036      	beq.n	8003aea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d019      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a84:	4b44      	ldr	r3, [pc, #272]	; (8003b98 <HAL_RCC_OscConfig+0x520>)
 8003a86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a88:	4a43      	ldr	r2, [pc, #268]	; (8003b98 <HAL_RCC_OscConfig+0x520>)
 8003a8a:	f043 0301 	orr.w	r3, r3, #1
 8003a8e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a90:	f7fd ff12 	bl	80018b8 <HAL_GetTick>
 8003a94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a98:	f7fd ff0e 	bl	80018b8 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e1ef      	b.n	8003e8a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003aaa:	4b3b      	ldr	r3, [pc, #236]	; (8003b98 <HAL_RCC_OscConfig+0x520>)
 8003aac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0f0      	beq.n	8003a98 <HAL_RCC_OscConfig+0x420>
 8003ab6:	e018      	b.n	8003aea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ab8:	4b37      	ldr	r3, [pc, #220]	; (8003b98 <HAL_RCC_OscConfig+0x520>)
 8003aba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003abc:	4a36      	ldr	r2, [pc, #216]	; (8003b98 <HAL_RCC_OscConfig+0x520>)
 8003abe:	f023 0301 	bic.w	r3, r3, #1
 8003ac2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac4:	f7fd fef8 	bl	80018b8 <HAL_GetTick>
 8003ac8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003acc:	f7fd fef4 	bl	80018b8 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e1d5      	b.n	8003e8a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003ade:	4b2e      	ldr	r3, [pc, #184]	; (8003b98 <HAL_RCC_OscConfig+0x520>)
 8003ae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1f0      	bne.n	8003acc <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0320 	and.w	r3, r3, #32
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d036      	beq.n	8003b64 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d019      	beq.n	8003b32 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003afe:	4b26      	ldr	r3, [pc, #152]	; (8003b98 <HAL_RCC_OscConfig+0x520>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a25      	ldr	r2, [pc, #148]	; (8003b98 <HAL_RCC_OscConfig+0x520>)
 8003b04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b08:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b0a:	f7fd fed5 	bl	80018b8 <HAL_GetTick>
 8003b0e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b10:	e008      	b.n	8003b24 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003b12:	f7fd fed1 	bl	80018b8 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e1b2      	b.n	8003e8a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b24:	4b1c      	ldr	r3, [pc, #112]	; (8003b98 <HAL_RCC_OscConfig+0x520>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d0f0      	beq.n	8003b12 <HAL_RCC_OscConfig+0x49a>
 8003b30:	e018      	b.n	8003b64 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b32:	4b19      	ldr	r3, [pc, #100]	; (8003b98 <HAL_RCC_OscConfig+0x520>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a18      	ldr	r2, [pc, #96]	; (8003b98 <HAL_RCC_OscConfig+0x520>)
 8003b38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b3c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b3e:	f7fd febb 	bl	80018b8 <HAL_GetTick>
 8003b42:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b44:	e008      	b.n	8003b58 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003b46:	f7fd feb7 	bl	80018b8 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d901      	bls.n	8003b58 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e198      	b.n	8003e8a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b58:	4b0f      	ldr	r3, [pc, #60]	; (8003b98 <HAL_RCC_OscConfig+0x520>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1f0      	bne.n	8003b46 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 8085 	beq.w	8003c7c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003b72:	4b0a      	ldr	r3, [pc, #40]	; (8003b9c <HAL_RCC_OscConfig+0x524>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a09      	ldr	r2, [pc, #36]	; (8003b9c <HAL_RCC_OscConfig+0x524>)
 8003b78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b7c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b7e:	f7fd fe9b 	bl	80018b8 <HAL_GetTick>
 8003b82:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b84:	e00c      	b.n	8003ba0 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003b86:	f7fd fe97 	bl	80018b8 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b64      	cmp	r3, #100	; 0x64
 8003b92:	d905      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e178      	b.n	8003e8a <HAL_RCC_OscConfig+0x812>
 8003b98:	58024400 	.word	0x58024400
 8003b9c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ba0:	4b96      	ldr	r3, [pc, #600]	; (8003dfc <HAL_RCC_OscConfig+0x784>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d0ec      	beq.n	8003b86 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d106      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x54a>
 8003bb4:	4b92      	ldr	r3, [pc, #584]	; (8003e00 <HAL_RCC_OscConfig+0x788>)
 8003bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb8:	4a91      	ldr	r2, [pc, #580]	; (8003e00 <HAL_RCC_OscConfig+0x788>)
 8003bba:	f043 0301 	orr.w	r3, r3, #1
 8003bbe:	6713      	str	r3, [r2, #112]	; 0x70
 8003bc0:	e02d      	b.n	8003c1e <HAL_RCC_OscConfig+0x5a6>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10c      	bne.n	8003be4 <HAL_RCC_OscConfig+0x56c>
 8003bca:	4b8d      	ldr	r3, [pc, #564]	; (8003e00 <HAL_RCC_OscConfig+0x788>)
 8003bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bce:	4a8c      	ldr	r2, [pc, #560]	; (8003e00 <HAL_RCC_OscConfig+0x788>)
 8003bd0:	f023 0301 	bic.w	r3, r3, #1
 8003bd4:	6713      	str	r3, [r2, #112]	; 0x70
 8003bd6:	4b8a      	ldr	r3, [pc, #552]	; (8003e00 <HAL_RCC_OscConfig+0x788>)
 8003bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bda:	4a89      	ldr	r2, [pc, #548]	; (8003e00 <HAL_RCC_OscConfig+0x788>)
 8003bdc:	f023 0304 	bic.w	r3, r3, #4
 8003be0:	6713      	str	r3, [r2, #112]	; 0x70
 8003be2:	e01c      	b.n	8003c1e <HAL_RCC_OscConfig+0x5a6>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	2b05      	cmp	r3, #5
 8003bea:	d10c      	bne.n	8003c06 <HAL_RCC_OscConfig+0x58e>
 8003bec:	4b84      	ldr	r3, [pc, #528]	; (8003e00 <HAL_RCC_OscConfig+0x788>)
 8003bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf0:	4a83      	ldr	r2, [pc, #524]	; (8003e00 <HAL_RCC_OscConfig+0x788>)
 8003bf2:	f043 0304 	orr.w	r3, r3, #4
 8003bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8003bf8:	4b81      	ldr	r3, [pc, #516]	; (8003e00 <HAL_RCC_OscConfig+0x788>)
 8003bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfc:	4a80      	ldr	r2, [pc, #512]	; (8003e00 <HAL_RCC_OscConfig+0x788>)
 8003bfe:	f043 0301 	orr.w	r3, r3, #1
 8003c02:	6713      	str	r3, [r2, #112]	; 0x70
 8003c04:	e00b      	b.n	8003c1e <HAL_RCC_OscConfig+0x5a6>
 8003c06:	4b7e      	ldr	r3, [pc, #504]	; (8003e00 <HAL_RCC_OscConfig+0x788>)
 8003c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0a:	4a7d      	ldr	r2, [pc, #500]	; (8003e00 <HAL_RCC_OscConfig+0x788>)
 8003c0c:	f023 0301 	bic.w	r3, r3, #1
 8003c10:	6713      	str	r3, [r2, #112]	; 0x70
 8003c12:	4b7b      	ldr	r3, [pc, #492]	; (8003e00 <HAL_RCC_OscConfig+0x788>)
 8003c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c16:	4a7a      	ldr	r2, [pc, #488]	; (8003e00 <HAL_RCC_OscConfig+0x788>)
 8003c18:	f023 0304 	bic.w	r3, r3, #4
 8003c1c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d015      	beq.n	8003c52 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c26:	f7fd fe47 	bl	80018b8 <HAL_GetTick>
 8003c2a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c2c:	e00a      	b.n	8003c44 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c2e:	f7fd fe43 	bl	80018b8 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e122      	b.n	8003e8a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c44:	4b6e      	ldr	r3, [pc, #440]	; (8003e00 <HAL_RCC_OscConfig+0x788>)
 8003c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d0ee      	beq.n	8003c2e <HAL_RCC_OscConfig+0x5b6>
 8003c50:	e014      	b.n	8003c7c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c52:	f7fd fe31 	bl	80018b8 <HAL_GetTick>
 8003c56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c58:	e00a      	b.n	8003c70 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c5a:	f7fd fe2d 	bl	80018b8 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e10c      	b.n	8003e8a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c70:	4b63      	ldr	r3, [pc, #396]	; (8003e00 <HAL_RCC_OscConfig+0x788>)
 8003c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1ee      	bne.n	8003c5a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 8101 	beq.w	8003e88 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003c86:	4b5e      	ldr	r3, [pc, #376]	; (8003e00 <HAL_RCC_OscConfig+0x788>)
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c8e:	2b18      	cmp	r3, #24
 8003c90:	f000 80bc 	beq.w	8003e0c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	f040 8095 	bne.w	8003dc8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c9e:	4b58      	ldr	r3, [pc, #352]	; (8003e00 <HAL_RCC_OscConfig+0x788>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a57      	ldr	r2, [pc, #348]	; (8003e00 <HAL_RCC_OscConfig+0x788>)
 8003ca4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ca8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003caa:	f7fd fe05 	bl	80018b8 <HAL_GetTick>
 8003cae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cb0:	e008      	b.n	8003cc4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cb2:	f7fd fe01 	bl	80018b8 <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d901      	bls.n	8003cc4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e0e2      	b.n	8003e8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cc4:	4b4e      	ldr	r3, [pc, #312]	; (8003e00 <HAL_RCC_OscConfig+0x788>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1f0      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cd0:	4b4b      	ldr	r3, [pc, #300]	; (8003e00 <HAL_RCC_OscConfig+0x788>)
 8003cd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cd4:	4b4b      	ldr	r3, [pc, #300]	; (8003e04 <HAL_RCC_OscConfig+0x78c>)
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003ce0:	0112      	lsls	r2, r2, #4
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	4946      	ldr	r1, [pc, #280]	; (8003e00 <HAL_RCC_OscConfig+0x788>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	628b      	str	r3, [r1, #40]	; 0x28
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	025b      	lsls	r3, r3, #9
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d04:	3b01      	subs	r3, #1
 8003d06:	041b      	lsls	r3, r3, #16
 8003d08:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d12:	3b01      	subs	r3, #1
 8003d14:	061b      	lsls	r3, r3, #24
 8003d16:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d1a:	4939      	ldr	r1, [pc, #228]	; (8003e00 <HAL_RCC_OscConfig+0x788>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003d20:	4b37      	ldr	r3, [pc, #220]	; (8003e00 <HAL_RCC_OscConfig+0x788>)
 8003d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d24:	4a36      	ldr	r2, [pc, #216]	; (8003e00 <HAL_RCC_OscConfig+0x788>)
 8003d26:	f023 0301 	bic.w	r3, r3, #1
 8003d2a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003d2c:	4b34      	ldr	r3, [pc, #208]	; (8003e00 <HAL_RCC_OscConfig+0x788>)
 8003d2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d30:	4b35      	ldr	r3, [pc, #212]	; (8003e08 <HAL_RCC_OscConfig+0x790>)
 8003d32:	4013      	ands	r3, r2
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003d38:	00d2      	lsls	r2, r2, #3
 8003d3a:	4931      	ldr	r1, [pc, #196]	; (8003e00 <HAL_RCC_OscConfig+0x788>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003d40:	4b2f      	ldr	r3, [pc, #188]	; (8003e00 <HAL_RCC_OscConfig+0x788>)
 8003d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d44:	f023 020c 	bic.w	r2, r3, #12
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4c:	492c      	ldr	r1, [pc, #176]	; (8003e00 <HAL_RCC_OscConfig+0x788>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003d52:	4b2b      	ldr	r3, [pc, #172]	; (8003e00 <HAL_RCC_OscConfig+0x788>)
 8003d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d56:	f023 0202 	bic.w	r2, r3, #2
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5e:	4928      	ldr	r1, [pc, #160]	; (8003e00 <HAL_RCC_OscConfig+0x788>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003d64:	4b26      	ldr	r3, [pc, #152]	; (8003e00 <HAL_RCC_OscConfig+0x788>)
 8003d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d68:	4a25      	ldr	r2, [pc, #148]	; (8003e00 <HAL_RCC_OscConfig+0x788>)
 8003d6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d70:	4b23      	ldr	r3, [pc, #140]	; (8003e00 <HAL_RCC_OscConfig+0x788>)
 8003d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d74:	4a22      	ldr	r2, [pc, #136]	; (8003e00 <HAL_RCC_OscConfig+0x788>)
 8003d76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003d7c:	4b20      	ldr	r3, [pc, #128]	; (8003e00 <HAL_RCC_OscConfig+0x788>)
 8003d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d80:	4a1f      	ldr	r2, [pc, #124]	; (8003e00 <HAL_RCC_OscConfig+0x788>)
 8003d82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003d88:	4b1d      	ldr	r3, [pc, #116]	; (8003e00 <HAL_RCC_OscConfig+0x788>)
 8003d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8c:	4a1c      	ldr	r2, [pc, #112]	; (8003e00 <HAL_RCC_OscConfig+0x788>)
 8003d8e:	f043 0301 	orr.w	r3, r3, #1
 8003d92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d94:	4b1a      	ldr	r3, [pc, #104]	; (8003e00 <HAL_RCC_OscConfig+0x788>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a19      	ldr	r2, [pc, #100]	; (8003e00 <HAL_RCC_OscConfig+0x788>)
 8003d9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da0:	f7fd fd8a 	bl	80018b8 <HAL_GetTick>
 8003da4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003da6:	e008      	b.n	8003dba <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003da8:	f7fd fd86 	bl	80018b8 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e067      	b.n	8003e8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003dba:	4b11      	ldr	r3, [pc, #68]	; (8003e00 <HAL_RCC_OscConfig+0x788>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d0f0      	beq.n	8003da8 <HAL_RCC_OscConfig+0x730>
 8003dc6:	e05f      	b.n	8003e88 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dc8:	4b0d      	ldr	r3, [pc, #52]	; (8003e00 <HAL_RCC_OscConfig+0x788>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a0c      	ldr	r2, [pc, #48]	; (8003e00 <HAL_RCC_OscConfig+0x788>)
 8003dce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd4:	f7fd fd70 	bl	80018b8 <HAL_GetTick>
 8003dd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003dda:	e008      	b.n	8003dee <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ddc:	f7fd fd6c 	bl	80018b8 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e04d      	b.n	8003e8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003dee:	4b04      	ldr	r3, [pc, #16]	; (8003e00 <HAL_RCC_OscConfig+0x788>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1f0      	bne.n	8003ddc <HAL_RCC_OscConfig+0x764>
 8003dfa:	e045      	b.n	8003e88 <HAL_RCC_OscConfig+0x810>
 8003dfc:	58024800 	.word	0x58024800
 8003e00:	58024400 	.word	0x58024400
 8003e04:	fffffc0c 	.word	0xfffffc0c
 8003e08:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003e0c:	4b21      	ldr	r3, [pc, #132]	; (8003e94 <HAL_RCC_OscConfig+0x81c>)
 8003e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e10:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003e12:	4b20      	ldr	r3, [pc, #128]	; (8003e94 <HAL_RCC_OscConfig+0x81c>)
 8003e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e16:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d031      	beq.n	8003e84 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	f003 0203 	and.w	r2, r3, #3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d12a      	bne.n	8003e84 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	091b      	lsrs	r3, r3, #4
 8003e32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d122      	bne.n	8003e84 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e48:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d11a      	bne.n	8003e84 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	0a5b      	lsrs	r3, r3, #9
 8003e52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e5a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d111      	bne.n	8003e84 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	0c1b      	lsrs	r3, r3, #16
 8003e64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d108      	bne.n	8003e84 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	0e1b      	lsrs	r3, r3, #24
 8003e76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e7e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d001      	beq.n	8003e88 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e000      	b.n	8003e8a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3730      	adds	r7, #48	; 0x30
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	58024400 	.word	0x58024400

08003e98 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b086      	sub	sp, #24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e19c      	b.n	80041e6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003eac:	4b8a      	ldr	r3, [pc, #552]	; (80040d8 <HAL_RCC_ClockConfig+0x240>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 030f 	and.w	r3, r3, #15
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d910      	bls.n	8003edc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eba:	4b87      	ldr	r3, [pc, #540]	; (80040d8 <HAL_RCC_ClockConfig+0x240>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f023 020f 	bic.w	r2, r3, #15
 8003ec2:	4985      	ldr	r1, [pc, #532]	; (80040d8 <HAL_RCC_ClockConfig+0x240>)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eca:	4b83      	ldr	r3, [pc, #524]	; (80040d8 <HAL_RCC_ClockConfig+0x240>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 030f 	and.w	r3, r3, #15
 8003ed2:	683a      	ldr	r2, [r7, #0]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d001      	beq.n	8003edc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e184      	b.n	80041e6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d010      	beq.n	8003f0a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	691a      	ldr	r2, [r3, #16]
 8003eec:	4b7b      	ldr	r3, [pc, #492]	; (80040dc <HAL_RCC_ClockConfig+0x244>)
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d908      	bls.n	8003f0a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003ef8:	4b78      	ldr	r3, [pc, #480]	; (80040dc <HAL_RCC_ClockConfig+0x244>)
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	4975      	ldr	r1, [pc, #468]	; (80040dc <HAL_RCC_ClockConfig+0x244>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0308 	and.w	r3, r3, #8
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d010      	beq.n	8003f38 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	695a      	ldr	r2, [r3, #20]
 8003f1a:	4b70      	ldr	r3, [pc, #448]	; (80040dc <HAL_RCC_ClockConfig+0x244>)
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d908      	bls.n	8003f38 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003f26:	4b6d      	ldr	r3, [pc, #436]	; (80040dc <HAL_RCC_ClockConfig+0x244>)
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	496a      	ldr	r1, [pc, #424]	; (80040dc <HAL_RCC_ClockConfig+0x244>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0310 	and.w	r3, r3, #16
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d010      	beq.n	8003f66 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	699a      	ldr	r2, [r3, #24]
 8003f48:	4b64      	ldr	r3, [pc, #400]	; (80040dc <HAL_RCC_ClockConfig+0x244>)
 8003f4a:	69db      	ldr	r3, [r3, #28]
 8003f4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d908      	bls.n	8003f66 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003f54:	4b61      	ldr	r3, [pc, #388]	; (80040dc <HAL_RCC_ClockConfig+0x244>)
 8003f56:	69db      	ldr	r3, [r3, #28]
 8003f58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	495e      	ldr	r1, [pc, #376]	; (80040dc <HAL_RCC_ClockConfig+0x244>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0320 	and.w	r3, r3, #32
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d010      	beq.n	8003f94 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	69da      	ldr	r2, [r3, #28]
 8003f76:	4b59      	ldr	r3, [pc, #356]	; (80040dc <HAL_RCC_ClockConfig+0x244>)
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d908      	bls.n	8003f94 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003f82:	4b56      	ldr	r3, [pc, #344]	; (80040dc <HAL_RCC_ClockConfig+0x244>)
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	4953      	ldr	r1, [pc, #332]	; (80040dc <HAL_RCC_ClockConfig+0x244>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d010      	beq.n	8003fc2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	68da      	ldr	r2, [r3, #12]
 8003fa4:	4b4d      	ldr	r3, [pc, #308]	; (80040dc <HAL_RCC_ClockConfig+0x244>)
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	f003 030f 	and.w	r3, r3, #15
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d908      	bls.n	8003fc2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fb0:	4b4a      	ldr	r3, [pc, #296]	; (80040dc <HAL_RCC_ClockConfig+0x244>)
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	f023 020f 	bic.w	r2, r3, #15
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	4947      	ldr	r1, [pc, #284]	; (80040dc <HAL_RCC_ClockConfig+0x244>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d055      	beq.n	800407a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003fce:	4b43      	ldr	r3, [pc, #268]	; (80040dc <HAL_RCC_ClockConfig+0x244>)
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	4940      	ldr	r1, [pc, #256]	; (80040dc <HAL_RCC_ClockConfig+0x244>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d107      	bne.n	8003ff8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003fe8:	4b3c      	ldr	r3, [pc, #240]	; (80040dc <HAL_RCC_ClockConfig+0x244>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d121      	bne.n	8004038 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e0f6      	b.n	80041e6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	2b03      	cmp	r3, #3
 8003ffe:	d107      	bne.n	8004010 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004000:	4b36      	ldr	r3, [pc, #216]	; (80040dc <HAL_RCC_ClockConfig+0x244>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d115      	bne.n	8004038 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e0ea      	b.n	80041e6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d107      	bne.n	8004028 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004018:	4b30      	ldr	r3, [pc, #192]	; (80040dc <HAL_RCC_ClockConfig+0x244>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004020:	2b00      	cmp	r3, #0
 8004022:	d109      	bne.n	8004038 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e0de      	b.n	80041e6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004028:	4b2c      	ldr	r3, [pc, #176]	; (80040dc <HAL_RCC_ClockConfig+0x244>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0304 	and.w	r3, r3, #4
 8004030:	2b00      	cmp	r3, #0
 8004032:	d101      	bne.n	8004038 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e0d6      	b.n	80041e6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004038:	4b28      	ldr	r3, [pc, #160]	; (80040dc <HAL_RCC_ClockConfig+0x244>)
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	f023 0207 	bic.w	r2, r3, #7
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	4925      	ldr	r1, [pc, #148]	; (80040dc <HAL_RCC_ClockConfig+0x244>)
 8004046:	4313      	orrs	r3, r2
 8004048:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800404a:	f7fd fc35 	bl	80018b8 <HAL_GetTick>
 800404e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004050:	e00a      	b.n	8004068 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004052:	f7fd fc31 	bl	80018b8 <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004060:	4293      	cmp	r3, r2
 8004062:	d901      	bls.n	8004068 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e0be      	b.n	80041e6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004068:	4b1c      	ldr	r3, [pc, #112]	; (80040dc <HAL_RCC_ClockConfig+0x244>)
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	00db      	lsls	r3, r3, #3
 8004076:	429a      	cmp	r2, r3
 8004078:	d1eb      	bne.n	8004052 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d010      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68da      	ldr	r2, [r3, #12]
 800408a:	4b14      	ldr	r3, [pc, #80]	; (80040dc <HAL_RCC_ClockConfig+0x244>)
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	f003 030f 	and.w	r3, r3, #15
 8004092:	429a      	cmp	r2, r3
 8004094:	d208      	bcs.n	80040a8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004096:	4b11      	ldr	r3, [pc, #68]	; (80040dc <HAL_RCC_ClockConfig+0x244>)
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	f023 020f 	bic.w	r2, r3, #15
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	490e      	ldr	r1, [pc, #56]	; (80040dc <HAL_RCC_ClockConfig+0x244>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040a8:	4b0b      	ldr	r3, [pc, #44]	; (80040d8 <HAL_RCC_ClockConfig+0x240>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 030f 	and.w	r3, r3, #15
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d214      	bcs.n	80040e0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040b6:	4b08      	ldr	r3, [pc, #32]	; (80040d8 <HAL_RCC_ClockConfig+0x240>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f023 020f 	bic.w	r2, r3, #15
 80040be:	4906      	ldr	r1, [pc, #24]	; (80040d8 <HAL_RCC_ClockConfig+0x240>)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040c6:	4b04      	ldr	r3, [pc, #16]	; (80040d8 <HAL_RCC_ClockConfig+0x240>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 030f 	and.w	r3, r3, #15
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d005      	beq.n	80040e0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e086      	b.n	80041e6 <HAL_RCC_ClockConfig+0x34e>
 80040d8:	52002000 	.word	0x52002000
 80040dc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0304 	and.w	r3, r3, #4
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d010      	beq.n	800410e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	691a      	ldr	r2, [r3, #16]
 80040f0:	4b3f      	ldr	r3, [pc, #252]	; (80041f0 <HAL_RCC_ClockConfig+0x358>)
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d208      	bcs.n	800410e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80040fc:	4b3c      	ldr	r3, [pc, #240]	; (80041f0 <HAL_RCC_ClockConfig+0x358>)
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	4939      	ldr	r1, [pc, #228]	; (80041f0 <HAL_RCC_ClockConfig+0x358>)
 800410a:	4313      	orrs	r3, r2
 800410c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0308 	and.w	r3, r3, #8
 8004116:	2b00      	cmp	r3, #0
 8004118:	d010      	beq.n	800413c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	695a      	ldr	r2, [r3, #20]
 800411e:	4b34      	ldr	r3, [pc, #208]	; (80041f0 <HAL_RCC_ClockConfig+0x358>)
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004126:	429a      	cmp	r2, r3
 8004128:	d208      	bcs.n	800413c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800412a:	4b31      	ldr	r3, [pc, #196]	; (80041f0 <HAL_RCC_ClockConfig+0x358>)
 800412c:	69db      	ldr	r3, [r3, #28]
 800412e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	492e      	ldr	r1, [pc, #184]	; (80041f0 <HAL_RCC_ClockConfig+0x358>)
 8004138:	4313      	orrs	r3, r2
 800413a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0310 	and.w	r3, r3, #16
 8004144:	2b00      	cmp	r3, #0
 8004146:	d010      	beq.n	800416a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	699a      	ldr	r2, [r3, #24]
 800414c:	4b28      	ldr	r3, [pc, #160]	; (80041f0 <HAL_RCC_ClockConfig+0x358>)
 800414e:	69db      	ldr	r3, [r3, #28]
 8004150:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004154:	429a      	cmp	r2, r3
 8004156:	d208      	bcs.n	800416a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004158:	4b25      	ldr	r3, [pc, #148]	; (80041f0 <HAL_RCC_ClockConfig+0x358>)
 800415a:	69db      	ldr	r3, [r3, #28]
 800415c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	4922      	ldr	r1, [pc, #136]	; (80041f0 <HAL_RCC_ClockConfig+0x358>)
 8004166:	4313      	orrs	r3, r2
 8004168:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0320 	and.w	r3, r3, #32
 8004172:	2b00      	cmp	r3, #0
 8004174:	d010      	beq.n	8004198 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	69da      	ldr	r2, [r3, #28]
 800417a:	4b1d      	ldr	r3, [pc, #116]	; (80041f0 <HAL_RCC_ClockConfig+0x358>)
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004182:	429a      	cmp	r2, r3
 8004184:	d208      	bcs.n	8004198 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004186:	4b1a      	ldr	r3, [pc, #104]	; (80041f0 <HAL_RCC_ClockConfig+0x358>)
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	4917      	ldr	r1, [pc, #92]	; (80041f0 <HAL_RCC_ClockConfig+0x358>)
 8004194:	4313      	orrs	r3, r2
 8004196:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004198:	f000 f834 	bl	8004204 <HAL_RCC_GetSysClockFreq>
 800419c:	4602      	mov	r2, r0
 800419e:	4b14      	ldr	r3, [pc, #80]	; (80041f0 <HAL_RCC_ClockConfig+0x358>)
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	0a1b      	lsrs	r3, r3, #8
 80041a4:	f003 030f 	and.w	r3, r3, #15
 80041a8:	4912      	ldr	r1, [pc, #72]	; (80041f4 <HAL_RCC_ClockConfig+0x35c>)
 80041aa:	5ccb      	ldrb	r3, [r1, r3]
 80041ac:	f003 031f 	and.w	r3, r3, #31
 80041b0:	fa22 f303 	lsr.w	r3, r2, r3
 80041b4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80041b6:	4b0e      	ldr	r3, [pc, #56]	; (80041f0 <HAL_RCC_ClockConfig+0x358>)
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	f003 030f 	and.w	r3, r3, #15
 80041be:	4a0d      	ldr	r2, [pc, #52]	; (80041f4 <HAL_RCC_ClockConfig+0x35c>)
 80041c0:	5cd3      	ldrb	r3, [r2, r3]
 80041c2:	f003 031f 	and.w	r3, r3, #31
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	fa22 f303 	lsr.w	r3, r2, r3
 80041cc:	4a0a      	ldr	r2, [pc, #40]	; (80041f8 <HAL_RCC_ClockConfig+0x360>)
 80041ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80041d0:	4a0a      	ldr	r2, [pc, #40]	; (80041fc <HAL_RCC_ClockConfig+0x364>)
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80041d6:	4b0a      	ldr	r3, [pc, #40]	; (8004200 <HAL_RCC_ClockConfig+0x368>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4618      	mov	r0, r3
 80041dc:	f7fd fb22 	bl	8001824 <HAL_InitTick>
 80041e0:	4603      	mov	r3, r0
 80041e2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80041e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3718      	adds	r7, #24
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	58024400 	.word	0x58024400
 80041f4:	08007f2c 	.word	0x08007f2c
 80041f8:	24000004 	.word	0x24000004
 80041fc:	24000000 	.word	0x24000000
 8004200:	24000008 	.word	0x24000008

08004204 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004204:	b480      	push	{r7}
 8004206:	b089      	sub	sp, #36	; 0x24
 8004208:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800420a:	4bb3      	ldr	r3, [pc, #716]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004212:	2b18      	cmp	r3, #24
 8004214:	f200 8155 	bhi.w	80044c2 <HAL_RCC_GetSysClockFreq+0x2be>
 8004218:	a201      	add	r2, pc, #4	; (adr r2, 8004220 <HAL_RCC_GetSysClockFreq+0x1c>)
 800421a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421e:	bf00      	nop
 8004220:	08004285 	.word	0x08004285
 8004224:	080044c3 	.word	0x080044c3
 8004228:	080044c3 	.word	0x080044c3
 800422c:	080044c3 	.word	0x080044c3
 8004230:	080044c3 	.word	0x080044c3
 8004234:	080044c3 	.word	0x080044c3
 8004238:	080044c3 	.word	0x080044c3
 800423c:	080044c3 	.word	0x080044c3
 8004240:	080042ab 	.word	0x080042ab
 8004244:	080044c3 	.word	0x080044c3
 8004248:	080044c3 	.word	0x080044c3
 800424c:	080044c3 	.word	0x080044c3
 8004250:	080044c3 	.word	0x080044c3
 8004254:	080044c3 	.word	0x080044c3
 8004258:	080044c3 	.word	0x080044c3
 800425c:	080044c3 	.word	0x080044c3
 8004260:	080042b1 	.word	0x080042b1
 8004264:	080044c3 	.word	0x080044c3
 8004268:	080044c3 	.word	0x080044c3
 800426c:	080044c3 	.word	0x080044c3
 8004270:	080044c3 	.word	0x080044c3
 8004274:	080044c3 	.word	0x080044c3
 8004278:	080044c3 	.word	0x080044c3
 800427c:	080044c3 	.word	0x080044c3
 8004280:	080042b7 	.word	0x080042b7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004284:	4b94      	ldr	r3, [pc, #592]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0320 	and.w	r3, r3, #32
 800428c:	2b00      	cmp	r3, #0
 800428e:	d009      	beq.n	80042a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004290:	4b91      	ldr	r3, [pc, #580]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	08db      	lsrs	r3, r3, #3
 8004296:	f003 0303 	and.w	r3, r3, #3
 800429a:	4a90      	ldr	r2, [pc, #576]	; (80044dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800429c:	fa22 f303 	lsr.w	r3, r2, r3
 80042a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80042a2:	e111      	b.n	80044c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80042a4:	4b8d      	ldr	r3, [pc, #564]	; (80044dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80042a6:	61bb      	str	r3, [r7, #24]
    break;
 80042a8:	e10e      	b.n	80044c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80042aa:	4b8d      	ldr	r3, [pc, #564]	; (80044e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80042ac:	61bb      	str	r3, [r7, #24]
    break;
 80042ae:	e10b      	b.n	80044c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80042b0:	4b8c      	ldr	r3, [pc, #560]	; (80044e4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80042b2:	61bb      	str	r3, [r7, #24]
    break;
 80042b4:	e108      	b.n	80044c8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80042b6:	4b88      	ldr	r3, [pc, #544]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ba:	f003 0303 	and.w	r3, r3, #3
 80042be:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80042c0:	4b85      	ldr	r3, [pc, #532]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c4:	091b      	lsrs	r3, r3, #4
 80042c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042ca:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80042cc:	4b82      	ldr	r3, [pc, #520]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80042d6:	4b80      	ldr	r3, [pc, #512]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042da:	08db      	lsrs	r3, r3, #3
 80042dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	fb02 f303 	mul.w	r3, r2, r3
 80042e6:	ee07 3a90 	vmov	s15, r3
 80042ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ee:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f000 80e1 	beq.w	80044bc <HAL_RCC_GetSysClockFreq+0x2b8>
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	f000 8083 	beq.w	8004408 <HAL_RCC_GetSysClockFreq+0x204>
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	2b02      	cmp	r3, #2
 8004306:	f200 80a1 	bhi.w	800444c <HAL_RCC_GetSysClockFreq+0x248>
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d003      	beq.n	8004318 <HAL_RCC_GetSysClockFreq+0x114>
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d056      	beq.n	80043c4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004316:	e099      	b.n	800444c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004318:	4b6f      	ldr	r3, [pc, #444]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0320 	and.w	r3, r3, #32
 8004320:	2b00      	cmp	r3, #0
 8004322:	d02d      	beq.n	8004380 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004324:	4b6c      	ldr	r3, [pc, #432]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	08db      	lsrs	r3, r3, #3
 800432a:	f003 0303 	and.w	r3, r3, #3
 800432e:	4a6b      	ldr	r2, [pc, #428]	; (80044dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004330:	fa22 f303 	lsr.w	r3, r2, r3
 8004334:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	ee07 3a90 	vmov	s15, r3
 800433c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	ee07 3a90 	vmov	s15, r3
 8004346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800434a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800434e:	4b62      	ldr	r3, [pc, #392]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004356:	ee07 3a90 	vmov	s15, r3
 800435a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800435e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004362:	eddf 5a61 	vldr	s11, [pc, #388]	; 80044e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800436a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800436e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800437a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800437e:	e087      	b.n	8004490 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	ee07 3a90 	vmov	s15, r3
 8004386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800438a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80044ec <HAL_RCC_GetSysClockFreq+0x2e8>
 800438e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004392:	4b51      	ldr	r3, [pc, #324]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800439a:	ee07 3a90 	vmov	s15, r3
 800439e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80043a6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80044e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80043aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043c2:	e065      	b.n	8004490 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	ee07 3a90 	vmov	s15, r3
 80043ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ce:	eddf 6a48 	vldr	s13, [pc, #288]	; 80044f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80043d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043d6:	4b40      	ldr	r3, [pc, #256]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043de:	ee07 3a90 	vmov	s15, r3
 80043e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80043ea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80044e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80043ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004402:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004406:	e043      	b.n	8004490 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	ee07 3a90 	vmov	s15, r3
 800440e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004412:	eddf 6a38 	vldr	s13, [pc, #224]	; 80044f4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004416:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800441a:	4b2f      	ldr	r3, [pc, #188]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800441c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004422:	ee07 3a90 	vmov	s15, r3
 8004426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800442a:	ed97 6a02 	vldr	s12, [r7, #8]
 800442e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80044e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004432:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004436:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800443a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800443e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004446:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800444a:	e021      	b.n	8004490 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	ee07 3a90 	vmov	s15, r3
 8004452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004456:	eddf 6a26 	vldr	s13, [pc, #152]	; 80044f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800445a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800445e:	4b1e      	ldr	r3, [pc, #120]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004466:	ee07 3a90 	vmov	s15, r3
 800446a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800446e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004472:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80044e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004476:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800447a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800447e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004482:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800448a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800448e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004490:	4b11      	ldr	r3, [pc, #68]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004494:	0a5b      	lsrs	r3, r3, #9
 8004496:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800449a:	3301      	adds	r3, #1
 800449c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	ee07 3a90 	vmov	s15, r3
 80044a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80044a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80044ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044b4:	ee17 3a90 	vmov	r3, s15
 80044b8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80044ba:	e005      	b.n	80044c8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80044bc:	2300      	movs	r3, #0
 80044be:	61bb      	str	r3, [r7, #24]
    break;
 80044c0:	e002      	b.n	80044c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80044c2:	4b07      	ldr	r3, [pc, #28]	; (80044e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80044c4:	61bb      	str	r3, [r7, #24]
    break;
 80044c6:	bf00      	nop
  }

  return sysclockfreq;
 80044c8:	69bb      	ldr	r3, [r7, #24]
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3724      	adds	r7, #36	; 0x24
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	58024400 	.word	0x58024400
 80044dc:	03d09000 	.word	0x03d09000
 80044e0:	003d0900 	.word	0x003d0900
 80044e4:	017d7840 	.word	0x017d7840
 80044e8:	46000000 	.word	0x46000000
 80044ec:	4c742400 	.word	0x4c742400
 80044f0:	4a742400 	.word	0x4a742400
 80044f4:	4bbebc20 	.word	0x4bbebc20

080044f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80044fe:	f7ff fe81 	bl	8004204 <HAL_RCC_GetSysClockFreq>
 8004502:	4602      	mov	r2, r0
 8004504:	4b10      	ldr	r3, [pc, #64]	; (8004548 <HAL_RCC_GetHCLKFreq+0x50>)
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	0a1b      	lsrs	r3, r3, #8
 800450a:	f003 030f 	and.w	r3, r3, #15
 800450e:	490f      	ldr	r1, [pc, #60]	; (800454c <HAL_RCC_GetHCLKFreq+0x54>)
 8004510:	5ccb      	ldrb	r3, [r1, r3]
 8004512:	f003 031f 	and.w	r3, r3, #31
 8004516:	fa22 f303 	lsr.w	r3, r2, r3
 800451a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800451c:	4b0a      	ldr	r3, [pc, #40]	; (8004548 <HAL_RCC_GetHCLKFreq+0x50>)
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	f003 030f 	and.w	r3, r3, #15
 8004524:	4a09      	ldr	r2, [pc, #36]	; (800454c <HAL_RCC_GetHCLKFreq+0x54>)
 8004526:	5cd3      	ldrb	r3, [r2, r3]
 8004528:	f003 031f 	and.w	r3, r3, #31
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	fa22 f303 	lsr.w	r3, r2, r3
 8004532:	4a07      	ldr	r2, [pc, #28]	; (8004550 <HAL_RCC_GetHCLKFreq+0x58>)
 8004534:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004536:	4a07      	ldr	r2, [pc, #28]	; (8004554 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800453c:	4b04      	ldr	r3, [pc, #16]	; (8004550 <HAL_RCC_GetHCLKFreq+0x58>)
 800453e:	681b      	ldr	r3, [r3, #0]
}
 8004540:	4618      	mov	r0, r3
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	58024400 	.word	0x58024400
 800454c:	08007f2c 	.word	0x08007f2c
 8004550:	24000004 	.word	0x24000004
 8004554:	24000000 	.word	0x24000000

08004558 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800455c:	f7ff ffcc 	bl	80044f8 <HAL_RCC_GetHCLKFreq>
 8004560:	4602      	mov	r2, r0
 8004562:	4b06      	ldr	r3, [pc, #24]	; (800457c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	091b      	lsrs	r3, r3, #4
 8004568:	f003 0307 	and.w	r3, r3, #7
 800456c:	4904      	ldr	r1, [pc, #16]	; (8004580 <HAL_RCC_GetPCLK1Freq+0x28>)
 800456e:	5ccb      	ldrb	r3, [r1, r3]
 8004570:	f003 031f 	and.w	r3, r3, #31
 8004574:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004578:	4618      	mov	r0, r3
 800457a:	bd80      	pop	{r7, pc}
 800457c:	58024400 	.word	0x58024400
 8004580:	08007f2c 	.word	0x08007f2c

08004584 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004588:	f7ff ffb6 	bl	80044f8 <HAL_RCC_GetHCLKFreq>
 800458c:	4602      	mov	r2, r0
 800458e:	4b06      	ldr	r3, [pc, #24]	; (80045a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004590:	69db      	ldr	r3, [r3, #28]
 8004592:	0a1b      	lsrs	r3, r3, #8
 8004594:	f003 0307 	and.w	r3, r3, #7
 8004598:	4904      	ldr	r1, [pc, #16]	; (80045ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800459a:	5ccb      	ldrb	r3, [r1, r3]
 800459c:	f003 031f 	and.w	r3, r3, #31
 80045a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	58024400 	.word	0x58024400
 80045ac:	08007f2c 	.word	0x08007f2c

080045b0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80045b8:	2300      	movs	r3, #0
 80045ba:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045bc:	2300      	movs	r3, #0
 80045be:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d03f      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80045d4:	d02a      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80045d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80045da:	d824      	bhi.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80045dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045e0:	d018      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80045e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045e6:	d81e      	bhi.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d003      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80045ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045f0:	d007      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80045f2:	e018      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045f4:	4bab      	ldr	r3, [pc, #684]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80045f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f8:	4aaa      	ldr	r2, [pc, #680]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80045fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004600:	e015      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	3304      	adds	r3, #4
 8004606:	2102      	movs	r1, #2
 8004608:	4618      	mov	r0, r3
 800460a:	f001 f9ff 	bl	8005a0c <RCCEx_PLL2_Config>
 800460e:	4603      	mov	r3, r0
 8004610:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004612:	e00c      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	3324      	adds	r3, #36	; 0x24
 8004618:	2102      	movs	r1, #2
 800461a:	4618      	mov	r0, r3
 800461c:	f001 faa8 	bl	8005b70 <RCCEx_PLL3_Config>
 8004620:	4603      	mov	r3, r0
 8004622:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004624:	e003      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	75fb      	strb	r3, [r7, #23]
      break;
 800462a:	e000      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800462c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800462e:	7dfb      	ldrb	r3, [r7, #23]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d109      	bne.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004634:	4b9b      	ldr	r3, [pc, #620]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004638:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004640:	4998      	ldr	r1, [pc, #608]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004642:	4313      	orrs	r3, r2
 8004644:	650b      	str	r3, [r1, #80]	; 0x50
 8004646:	e001      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004648:	7dfb      	ldrb	r3, [r7, #23]
 800464a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004654:	2b00      	cmp	r3, #0
 8004656:	d03d      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800465c:	2b04      	cmp	r3, #4
 800465e:	d826      	bhi.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004660:	a201      	add	r2, pc, #4	; (adr r2, 8004668 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004666:	bf00      	nop
 8004668:	0800467d 	.word	0x0800467d
 800466c:	0800468b 	.word	0x0800468b
 8004670:	0800469d 	.word	0x0800469d
 8004674:	080046b5 	.word	0x080046b5
 8004678:	080046b5 	.word	0x080046b5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800467c:	4b89      	ldr	r3, [pc, #548]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800467e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004680:	4a88      	ldr	r2, [pc, #544]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004682:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004686:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004688:	e015      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	3304      	adds	r3, #4
 800468e:	2100      	movs	r1, #0
 8004690:	4618      	mov	r0, r3
 8004692:	f001 f9bb 	bl	8005a0c <RCCEx_PLL2_Config>
 8004696:	4603      	mov	r3, r0
 8004698:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800469a:	e00c      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	3324      	adds	r3, #36	; 0x24
 80046a0:	2100      	movs	r1, #0
 80046a2:	4618      	mov	r0, r3
 80046a4:	f001 fa64 	bl	8005b70 <RCCEx_PLL3_Config>
 80046a8:	4603      	mov	r3, r0
 80046aa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80046ac:	e003      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	75fb      	strb	r3, [r7, #23]
      break;
 80046b2:	e000      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80046b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046b6:	7dfb      	ldrb	r3, [r7, #23]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d109      	bne.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046bc:	4b79      	ldr	r3, [pc, #484]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80046be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046c0:	f023 0207 	bic.w	r2, r3, #7
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c8:	4976      	ldr	r1, [pc, #472]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	650b      	str	r3, [r1, #80]	; 0x50
 80046ce:	e001      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d0:	7dfb      	ldrb	r3, [r7, #23]
 80046d2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d042      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046e8:	d02b      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80046ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046ee:	d825      	bhi.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80046f0:	2bc0      	cmp	r3, #192	; 0xc0
 80046f2:	d028      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80046f4:	2bc0      	cmp	r3, #192	; 0xc0
 80046f6:	d821      	bhi.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80046f8:	2b80      	cmp	r3, #128	; 0x80
 80046fa:	d016      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80046fc:	2b80      	cmp	r3, #128	; 0x80
 80046fe:	d81d      	bhi.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004700:	2b00      	cmp	r3, #0
 8004702:	d002      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004704:	2b40      	cmp	r3, #64	; 0x40
 8004706:	d007      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004708:	e018      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800470a:	4b66      	ldr	r3, [pc, #408]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800470c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470e:	4a65      	ldr	r2, [pc, #404]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004714:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004716:	e017      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	3304      	adds	r3, #4
 800471c:	2100      	movs	r1, #0
 800471e:	4618      	mov	r0, r3
 8004720:	f001 f974 	bl	8005a0c <RCCEx_PLL2_Config>
 8004724:	4603      	mov	r3, r0
 8004726:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004728:	e00e      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	3324      	adds	r3, #36	; 0x24
 800472e:	2100      	movs	r1, #0
 8004730:	4618      	mov	r0, r3
 8004732:	f001 fa1d 	bl	8005b70 <RCCEx_PLL3_Config>
 8004736:	4603      	mov	r3, r0
 8004738:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800473a:	e005      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	75fb      	strb	r3, [r7, #23]
      break;
 8004740:	e002      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004742:	bf00      	nop
 8004744:	e000      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004746:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004748:	7dfb      	ldrb	r3, [r7, #23]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d109      	bne.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800474e:	4b55      	ldr	r3, [pc, #340]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004752:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800475a:	4952      	ldr	r1, [pc, #328]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800475c:	4313      	orrs	r3, r2
 800475e:	650b      	str	r3, [r1, #80]	; 0x50
 8004760:	e001      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004762:	7dfb      	ldrb	r3, [r7, #23]
 8004764:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800476e:	2b00      	cmp	r3, #0
 8004770:	d049      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004778:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800477c:	d030      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800477e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004782:	d82a      	bhi.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004784:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004788:	d02c      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800478a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800478e:	d824      	bhi.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004790:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004794:	d018      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004796:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800479a:	d81e      	bhi.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800479c:	2b00      	cmp	r3, #0
 800479e:	d003      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80047a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047a4:	d007      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80047a6:	e018      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047a8:	4b3e      	ldr	r3, [pc, #248]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80047aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ac:	4a3d      	ldr	r2, [pc, #244]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80047ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80047b4:	e017      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	3304      	adds	r3, #4
 80047ba:	2100      	movs	r1, #0
 80047bc:	4618      	mov	r0, r3
 80047be:	f001 f925 	bl	8005a0c <RCCEx_PLL2_Config>
 80047c2:	4603      	mov	r3, r0
 80047c4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80047c6:	e00e      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	3324      	adds	r3, #36	; 0x24
 80047cc:	2100      	movs	r1, #0
 80047ce:	4618      	mov	r0, r3
 80047d0:	f001 f9ce 	bl	8005b70 <RCCEx_PLL3_Config>
 80047d4:	4603      	mov	r3, r0
 80047d6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80047d8:	e005      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	75fb      	strb	r3, [r7, #23]
      break;
 80047de:	e002      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80047e0:	bf00      	nop
 80047e2:	e000      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80047e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047e6:	7dfb      	ldrb	r3, [r7, #23]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d10a      	bne.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80047ec:	4b2d      	ldr	r3, [pc, #180]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80047ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80047fa:	492a      	ldr	r1, [pc, #168]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	658b      	str	r3, [r1, #88]	; 0x58
 8004800:	e001      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004802:	7dfb      	ldrb	r3, [r7, #23]
 8004804:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800480e:	2b00      	cmp	r3, #0
 8004810:	d04c      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004818:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800481c:	d030      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800481e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004822:	d82a      	bhi.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004824:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004828:	d02c      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800482a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800482e:	d824      	bhi.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004830:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004834:	d018      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004836:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800483a:	d81e      	bhi.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800483c:	2b00      	cmp	r3, #0
 800483e:	d003      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004840:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004844:	d007      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004846:	e018      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004848:	4b16      	ldr	r3, [pc, #88]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800484a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484c:	4a15      	ldr	r2, [pc, #84]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800484e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004852:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004854:	e017      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	3304      	adds	r3, #4
 800485a:	2100      	movs	r1, #0
 800485c:	4618      	mov	r0, r3
 800485e:	f001 f8d5 	bl	8005a0c <RCCEx_PLL2_Config>
 8004862:	4603      	mov	r3, r0
 8004864:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004866:	e00e      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	3324      	adds	r3, #36	; 0x24
 800486c:	2100      	movs	r1, #0
 800486e:	4618      	mov	r0, r3
 8004870:	f001 f97e 	bl	8005b70 <RCCEx_PLL3_Config>
 8004874:	4603      	mov	r3, r0
 8004876:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004878:	e005      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	75fb      	strb	r3, [r7, #23]
      break;
 800487e:	e002      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004880:	bf00      	nop
 8004882:	e000      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004884:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004886:	7dfb      	ldrb	r3, [r7, #23]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d10d      	bne.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800488c:	4b05      	ldr	r3, [pc, #20]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800488e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004890:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800489a:	4902      	ldr	r1, [pc, #8]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800489c:	4313      	orrs	r3, r2
 800489e:	658b      	str	r3, [r1, #88]	; 0x58
 80048a0:	e004      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80048a2:	bf00      	nop
 80048a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048a8:	7dfb      	ldrb	r3, [r7, #23]
 80048aa:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d032      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048bc:	2b30      	cmp	r3, #48	; 0x30
 80048be:	d01c      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80048c0:	2b30      	cmp	r3, #48	; 0x30
 80048c2:	d817      	bhi.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80048c4:	2b20      	cmp	r3, #32
 80048c6:	d00c      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80048c8:	2b20      	cmp	r3, #32
 80048ca:	d813      	bhi.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d016      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80048d0:	2b10      	cmp	r3, #16
 80048d2:	d10f      	bne.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048d4:	4bb1      	ldr	r3, [pc, #708]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80048d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d8:	4ab0      	ldr	r2, [pc, #704]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80048da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80048e0:	e00e      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	3304      	adds	r3, #4
 80048e6:	2102      	movs	r1, #2
 80048e8:	4618      	mov	r0, r3
 80048ea:	f001 f88f 	bl	8005a0c <RCCEx_PLL2_Config>
 80048ee:	4603      	mov	r3, r0
 80048f0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80048f2:	e005      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	75fb      	strb	r3, [r7, #23]
      break;
 80048f8:	e002      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80048fa:	bf00      	nop
 80048fc:	e000      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80048fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004900:	7dfb      	ldrb	r3, [r7, #23]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d109      	bne.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004906:	4ba5      	ldr	r3, [pc, #660]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800490a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004912:	49a2      	ldr	r1, [pc, #648]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004914:	4313      	orrs	r3, r2
 8004916:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004918:	e001      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800491a:	7dfb      	ldrb	r3, [r7, #23]
 800491c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d047      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800492e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004932:	d030      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8004934:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004938:	d82a      	bhi.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800493a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800493e:	d02c      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8004940:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004944:	d824      	bhi.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004946:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800494a:	d018      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800494c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004950:	d81e      	bhi.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8004956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800495a:	d007      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800495c:	e018      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800495e:	4b8f      	ldr	r3, [pc, #572]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004962:	4a8e      	ldr	r2, [pc, #568]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004968:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800496a:	e017      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	3304      	adds	r3, #4
 8004970:	2100      	movs	r1, #0
 8004972:	4618      	mov	r0, r3
 8004974:	f001 f84a 	bl	8005a0c <RCCEx_PLL2_Config>
 8004978:	4603      	mov	r3, r0
 800497a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800497c:	e00e      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	3324      	adds	r3, #36	; 0x24
 8004982:	2100      	movs	r1, #0
 8004984:	4618      	mov	r0, r3
 8004986:	f001 f8f3 	bl	8005b70 <RCCEx_PLL3_Config>
 800498a:	4603      	mov	r3, r0
 800498c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800498e:	e005      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	75fb      	strb	r3, [r7, #23]
      break;
 8004994:	e002      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004996:	bf00      	nop
 8004998:	e000      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800499a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800499c:	7dfb      	ldrb	r3, [r7, #23]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d109      	bne.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80049a2:	4b7e      	ldr	r3, [pc, #504]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80049a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049a6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049ae:	497b      	ldr	r1, [pc, #492]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	650b      	str	r3, [r1, #80]	; 0x50
 80049b4:	e001      	b.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049b6:	7dfb      	ldrb	r3, [r7, #23]
 80049b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d049      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049ce:	d02e      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80049d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049d4:	d828      	bhi.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80049d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80049da:	d02a      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80049dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80049e0:	d822      	bhi.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80049e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80049e6:	d026      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80049e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80049ec:	d81c      	bhi.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80049ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049f2:	d010      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x466>
 80049f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049f8:	d816      	bhi.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d01d      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80049fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a02:	d111      	bne.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	3304      	adds	r3, #4
 8004a08:	2101      	movs	r1, #1
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f000 fffe 	bl	8005a0c <RCCEx_PLL2_Config>
 8004a10:	4603      	mov	r3, r0
 8004a12:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004a14:	e012      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	3324      	adds	r3, #36	; 0x24
 8004a1a:	2101      	movs	r1, #1
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f001 f8a7 	bl	8005b70 <RCCEx_PLL3_Config>
 8004a22:	4603      	mov	r3, r0
 8004a24:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004a26:	e009      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	75fb      	strb	r3, [r7, #23]
      break;
 8004a2c:	e006      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004a2e:	bf00      	nop
 8004a30:	e004      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004a32:	bf00      	nop
 8004a34:	e002      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004a36:	bf00      	nop
 8004a38:	e000      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004a3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a3c:	7dfb      	ldrb	r3, [r7, #23]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d109      	bne.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004a42:	4b56      	ldr	r3, [pc, #344]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a46:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a4e:	4953      	ldr	r1, [pc, #332]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	650b      	str	r3, [r1, #80]	; 0x50
 8004a54:	e001      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a56:	7dfb      	ldrb	r3, [r7, #23]
 8004a58:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d04b      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004a6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a70:	d02e      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8004a72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a76:	d828      	bhi.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a7c:	d02a      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a82:	d822      	bhi.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004a84:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a88:	d026      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004a8a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a8e:	d81c      	bhi.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004a90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a94:	d010      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8004a96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a9a:	d816      	bhi.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d01d      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004aa0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004aa4:	d111      	bne.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	3304      	adds	r3, #4
 8004aaa:	2101      	movs	r1, #1
 8004aac:	4618      	mov	r0, r3
 8004aae:	f000 ffad 	bl	8005a0c <RCCEx_PLL2_Config>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004ab6:	e012      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	3324      	adds	r3, #36	; 0x24
 8004abc:	2101      	movs	r1, #1
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f001 f856 	bl	8005b70 <RCCEx_PLL3_Config>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004ac8:	e009      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	75fb      	strb	r3, [r7, #23]
      break;
 8004ace:	e006      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004ad0:	bf00      	nop
 8004ad2:	e004      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004ad4:	bf00      	nop
 8004ad6:	e002      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004ad8:	bf00      	nop
 8004ada:	e000      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004adc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ade:	7dfb      	ldrb	r3, [r7, #23]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10a      	bne.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004ae4:	4b2d      	ldr	r3, [pc, #180]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004af2:	492a      	ldr	r1, [pc, #168]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	658b      	str	r3, [r1, #88]	; 0x58
 8004af8:	e001      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004afa:	7dfb      	ldrb	r3, [r7, #23]
 8004afc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d022      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    switch(PeriphClkInit->DsiClockSelection)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00e      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8004b12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b16:	d108      	bne.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x57a>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	3304      	adds	r3, #4
 8004b1c:	2101      	movs	r1, #1
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 ff74 	bl	8005a0c <RCCEx_PLL2_Config>
 8004b24:	4603      	mov	r3, r0
 8004b26:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 8004b28:	e003      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x582>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	75fb      	strb	r3, [r7, #23]
      break;
 8004b2e:	e000      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x582>
      break;
 8004b30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b32:	7dfb      	ldrb	r3, [r7, #23]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d109      	bne.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8004b38:	4b18      	ldr	r3, [pc, #96]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b3c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b44:	4915      	ldr	r1, [pc, #84]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004b4a:	e001      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b4c:	7dfb      	ldrb	r3, [r7, #23]
 8004b4e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d031      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x610>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b64:	d00e      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004b66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b6a:	d814      	bhi.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d017      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 8004b70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b74:	d10f      	bne.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b76:	4b09      	ldr	r3, [pc, #36]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7a:	4a08      	ldr	r2, [pc, #32]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004b82:	e00e      	b.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	3304      	adds	r3, #4
 8004b88:	2101      	movs	r1, #1
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f000 ff3e 	bl	8005a0c <RCCEx_PLL2_Config>
 8004b90:	4603      	mov	r3, r0
 8004b92:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004b94:	e005      	b.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	75fb      	strb	r3, [r7, #23]
      break;
 8004b9a:	e002      	b.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8004b9c:	58024400 	.word	0x58024400
      break;
 8004ba0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ba2:	7dfb      	ldrb	r3, [r7, #23]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d109      	bne.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ba8:	4bbc      	ldr	r3, [pc, #752]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004baa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bac:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb4:	49b9      	ldr	r1, [pc, #740]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	650b      	str	r3, [r1, #80]	; 0x50
 8004bba:	e001      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bbc:	7dfb      	ldrb	r3, [r7, #23]
 8004bbe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d032      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd0:	2b03      	cmp	r3, #3
 8004bd2:	d81b      	bhi.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8004bd4:	a201      	add	r2, pc, #4	; (adr r2, 8004bdc <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 8004bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bda:	bf00      	nop
 8004bdc:	08004c13 	.word	0x08004c13
 8004be0:	08004bed 	.word	0x08004bed
 8004be4:	08004bfb 	.word	0x08004bfb
 8004be8:	08004c13 	.word	0x08004c13
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bec:	4bab      	ldr	r3, [pc, #684]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf0:	4aaa      	ldr	r2, [pc, #680]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004bf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bf6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004bf8:	e00c      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x664>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	3304      	adds	r3, #4
 8004bfe:	2102      	movs	r1, #2
 8004c00:	4618      	mov	r0, r3
 8004c02:	f000 ff03 	bl	8005a0c <RCCEx_PLL2_Config>
 8004c06:	4603      	mov	r3, r0
 8004c08:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004c0a:	e003      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x664>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	75fb      	strb	r3, [r7, #23]
      break;
 8004c10:	e000      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x664>
      break;
 8004c12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c14:	7dfb      	ldrb	r3, [r7, #23]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d109      	bne.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004c1a:	4ba0      	ldr	r3, [pc, #640]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c1e:	f023 0203 	bic.w	r2, r3, #3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c26:	499d      	ldr	r1, [pc, #628]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004c2c:	e001      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x682>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c2e:	7dfb      	ldrb	r3, [r7, #23]
 8004c30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f000 8086 	beq.w	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x79c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c40:	4b97      	ldr	r3, [pc, #604]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a96      	ldr	r2, [pc, #600]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8004c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c4c:	f7fc fe34 	bl	80018b8 <HAL_GetTick>
 8004c50:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c52:	e009      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c54:	f7fc fe30 	bl	80018b8 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b64      	cmp	r3, #100	; 0x64
 8004c60:	d902      	bls.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      {
        ret = HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	75fb      	strb	r3, [r7, #23]
        break;
 8004c66:	e005      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c68:	4b8d      	ldr	r3, [pc, #564]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d0ef      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      }
    }

    if(ret == HAL_OK)
 8004c74:	7dfb      	ldrb	r3, [r7, #23]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d166      	bne.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004c7a:	4b88      	ldr	r3, [pc, #544]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004c7c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004c84:	4053      	eors	r3, r2
 8004c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d013      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x706>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c8e:	4b83      	ldr	r3, [pc, #524]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c96:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c98:	4b80      	ldr	r3, [pc, #512]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c9c:	4a7f      	ldr	r2, [pc, #508]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004c9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ca2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ca4:	4b7d      	ldr	r3, [pc, #500]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca8:	4a7c      	ldr	r2, [pc, #496]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004caa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cae:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004cb0:	4a7a      	ldr	r2, [pc, #488]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004cbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cc0:	d115      	bne.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc2:	f7fc fdf9 	bl	80018b8 <HAL_GetTick>
 8004cc6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cc8:	e00b      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x732>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cca:	f7fc fdf5 	bl	80018b8 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d902      	bls.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x732>
          {
            ret = HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	75fb      	strb	r3, [r7, #23]
            break;
 8004ce0:	e005      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x73e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ce2:	4b6e      	ldr	r3, [pc, #440]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d0ed      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x71a>
          }
        }
      }

      if(ret == HAL_OK)
 8004cee:	7dfb      	ldrb	r3, [r7, #23]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d126      	bne.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x792>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d02:	d10d      	bne.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x770>
 8004d04:	4b65      	ldr	r3, [pc, #404]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004d12:	0919      	lsrs	r1, r3, #4
 8004d14:	4b63      	ldr	r3, [pc, #396]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>)
 8004d16:	400b      	ands	r3, r1
 8004d18:	4960      	ldr	r1, [pc, #384]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	610b      	str	r3, [r1, #16]
 8004d1e:	e005      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x77c>
 8004d20:	4b5e      	ldr	r3, [pc, #376]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	4a5d      	ldr	r2, [pc, #372]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004d26:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004d2a:	6113      	str	r3, [r2, #16]
 8004d2c:	4b5b      	ldr	r3, [pc, #364]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004d2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004d36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d3a:	4958      	ldr	r1, [pc, #352]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	670b      	str	r3, [r1, #112]	; 0x70
 8004d40:	e004      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d42:	7dfb      	ldrb	r3, [r7, #23]
 8004d44:	75bb      	strb	r3, [r7, #22]
 8004d46:	e001      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d48:	7dfb      	ldrb	r3, [r7, #23]
 8004d4a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d07e      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d5c:	2b28      	cmp	r3, #40	; 0x28
 8004d5e:	d867      	bhi.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x880>
 8004d60:	a201      	add	r2, pc, #4	; (adr r2, 8004d68 <HAL_RCCEx_PeriphCLKConfig+0x7b8>)
 8004d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d66:	bf00      	nop
 8004d68:	08004e37 	.word	0x08004e37
 8004d6c:	08004e31 	.word	0x08004e31
 8004d70:	08004e31 	.word	0x08004e31
 8004d74:	08004e31 	.word	0x08004e31
 8004d78:	08004e31 	.word	0x08004e31
 8004d7c:	08004e31 	.word	0x08004e31
 8004d80:	08004e31 	.word	0x08004e31
 8004d84:	08004e31 	.word	0x08004e31
 8004d88:	08004e0d 	.word	0x08004e0d
 8004d8c:	08004e31 	.word	0x08004e31
 8004d90:	08004e31 	.word	0x08004e31
 8004d94:	08004e31 	.word	0x08004e31
 8004d98:	08004e31 	.word	0x08004e31
 8004d9c:	08004e31 	.word	0x08004e31
 8004da0:	08004e31 	.word	0x08004e31
 8004da4:	08004e31 	.word	0x08004e31
 8004da8:	08004e1f 	.word	0x08004e1f
 8004dac:	08004e31 	.word	0x08004e31
 8004db0:	08004e31 	.word	0x08004e31
 8004db4:	08004e31 	.word	0x08004e31
 8004db8:	08004e31 	.word	0x08004e31
 8004dbc:	08004e31 	.word	0x08004e31
 8004dc0:	08004e31 	.word	0x08004e31
 8004dc4:	08004e31 	.word	0x08004e31
 8004dc8:	08004e37 	.word	0x08004e37
 8004dcc:	08004e31 	.word	0x08004e31
 8004dd0:	08004e31 	.word	0x08004e31
 8004dd4:	08004e31 	.word	0x08004e31
 8004dd8:	08004e31 	.word	0x08004e31
 8004ddc:	08004e31 	.word	0x08004e31
 8004de0:	08004e31 	.word	0x08004e31
 8004de4:	08004e31 	.word	0x08004e31
 8004de8:	08004e37 	.word	0x08004e37
 8004dec:	08004e31 	.word	0x08004e31
 8004df0:	08004e31 	.word	0x08004e31
 8004df4:	08004e31 	.word	0x08004e31
 8004df8:	08004e31 	.word	0x08004e31
 8004dfc:	08004e31 	.word	0x08004e31
 8004e00:	08004e31 	.word	0x08004e31
 8004e04:	08004e31 	.word	0x08004e31
 8004e08:	08004e37 	.word	0x08004e37
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	3304      	adds	r3, #4
 8004e10:	2101      	movs	r1, #1
 8004e12:	4618      	mov	r0, r3
 8004e14:	f000 fdfa 	bl	8005a0c <RCCEx_PLL2_Config>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004e1c:	e00c      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x888>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	3324      	adds	r3, #36	; 0x24
 8004e22:	2101      	movs	r1, #1
 8004e24:	4618      	mov	r0, r3
 8004e26:	f000 fea3 	bl	8005b70 <RCCEx_PLL3_Config>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004e2e:	e003      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x888>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	75fb      	strb	r3, [r7, #23]
      break;
 8004e34:	e000      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x888>
      break;
 8004e36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e38:	7dfb      	ldrb	r3, [r7, #23]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d109      	bne.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004e3e:	4b17      	ldr	r3, [pc, #92]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e42:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e4a:	4914      	ldr	r1, [pc, #80]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	654b      	str	r3, [r1, #84]	; 0x54
 8004e50:	e001      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e52:	7dfb      	ldrb	r3, [r7, #23]
 8004e54:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0302 	and.w	r3, r3, #2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d03e      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e66:	2b05      	cmp	r3, #5
 8004e68:	d827      	bhi.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8004e6a:	a201      	add	r2, pc, #4	; (adr r2, 8004e70 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e70:	08004ec1 	.word	0x08004ec1
 8004e74:	08004e89 	.word	0x08004e89
 8004e78:	08004ea9 	.word	0x08004ea9
 8004e7c:	08004ec1 	.word	0x08004ec1
 8004e80:	08004ec1 	.word	0x08004ec1
 8004e84:	08004ec1 	.word	0x08004ec1
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	3304      	adds	r3, #4
 8004e8c:	2101      	movs	r1, #1
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f000 fdbc 	bl	8005a0c <RCCEx_PLL2_Config>
 8004e94:	4603      	mov	r3, r0
 8004e96:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004e98:	e013      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x912>
 8004e9a:	bf00      	nop
 8004e9c:	58024400 	.word	0x58024400
 8004ea0:	58024800 	.word	0x58024800
 8004ea4:	00ffffcf 	.word	0x00ffffcf

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	3324      	adds	r3, #36	; 0x24
 8004eac:	2101      	movs	r1, #1
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f000 fe5e 	bl	8005b70 <RCCEx_PLL3_Config>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004eb8:	e003      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x912>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	75fb      	strb	r3, [r7, #23]
      break;
 8004ebe:	e000      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8004ec0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ec2:	7dfb      	ldrb	r3, [r7, #23]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d109      	bne.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x92c>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004ec8:	4b9f      	ldr	r3, [pc, #636]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8004eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ecc:	f023 0207 	bic.w	r2, r3, #7
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ed4:	499c      	ldr	r1, [pc, #624]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	654b      	str	r3, [r1, #84]	; 0x54
 8004eda:	e001      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004edc:	7dfb      	ldrb	r3, [r7, #23]
 8004ede:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0304 	and.w	r3, r3, #4
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d039      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ef2:	2b05      	cmp	r3, #5
 8004ef4:	d820      	bhi.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8004ef6:	a201      	add	r2, pc, #4	; (adr r2, 8004efc <HAL_RCCEx_PeriphCLKConfig+0x94c>)
 8004ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efc:	08004f3f 	.word	0x08004f3f
 8004f00:	08004f15 	.word	0x08004f15
 8004f04:	08004f27 	.word	0x08004f27
 8004f08:	08004f3f 	.word	0x08004f3f
 8004f0c:	08004f3f 	.word	0x08004f3f
 8004f10:	08004f3f 	.word	0x08004f3f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	3304      	adds	r3, #4
 8004f18:	2101      	movs	r1, #1
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f000 fd76 	bl	8005a0c <RCCEx_PLL2_Config>
 8004f20:	4603      	mov	r3, r0
 8004f22:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004f24:	e00c      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x990>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	3324      	adds	r3, #36	; 0x24
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f000 fe1f 	bl	8005b70 <RCCEx_PLL3_Config>
 8004f32:	4603      	mov	r3, r0
 8004f34:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004f36:	e003      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x990>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	75fb      	strb	r3, [r7, #23]
      break;
 8004f3c:	e000      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x990>
      break;
 8004f3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f40:	7dfb      	ldrb	r3, [r7, #23]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d10a      	bne.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x9ac>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f46:	4b80      	ldr	r3, [pc, #512]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8004f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f4a:	f023 0207 	bic.w	r2, r3, #7
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f54:	497c      	ldr	r1, [pc, #496]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	658b      	str	r3, [r1, #88]	; 0x58
 8004f5a:	e001      	b.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f5c:	7dfb      	ldrb	r3, [r7, #23]
 8004f5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0320 	and.w	r3, r3, #32
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d04b      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0xa54>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f76:	d02e      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0xa26>
 8004f78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f7c:	d828      	bhi.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8004f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f82:	d02a      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 8004f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f88:	d822      	bhi.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8004f8a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f8e:	d026      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 8004f90:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f94:	d81c      	bhi.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8004f96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f9a:	d010      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8004f9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fa0:	d816      	bhi.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d01d      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8004fa6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004faa:	d111      	bne.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	3304      	adds	r3, #4
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f000 fd2a 	bl	8005a0c <RCCEx_PLL2_Config>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004fbc:	e012      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0xa34>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	3324      	adds	r3, #36	; 0x24
 8004fc2:	2102      	movs	r1, #2
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f000 fdd3 	bl	8005b70 <RCCEx_PLL3_Config>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004fce:	e009      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	75fb      	strb	r3, [r7, #23]
      break;
 8004fd4:	e006      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8004fd6:	bf00      	nop
 8004fd8:	e004      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8004fda:	bf00      	nop
 8004fdc:	e002      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8004fde:	bf00      	nop
 8004fe0:	e000      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8004fe2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fe4:	7dfb      	ldrb	r3, [r7, #23]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d10a      	bne.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004fea:	4b57      	ldr	r3, [pc, #348]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8004fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fee:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff8:	4953      	ldr	r1, [pc, #332]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	654b      	str	r3, [r1, #84]	; 0x54
 8004ffe:	e001      	b.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0xa54>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005000:	7dfb      	ldrb	r3, [r7, #23]
 8005002:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800500c:	2b00      	cmp	r3, #0
 800500e:	d04b      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005016:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800501a:	d02e      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0xaca>
 800501c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005020:	d828      	bhi.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8005022:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005026:	d02a      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0xace>
 8005028:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800502c:	d822      	bhi.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 800502e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005032:	d026      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0xad2>
 8005034:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005038:	d81c      	bhi.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 800503a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800503e:	d010      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8005040:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005044:	d816      	bhi.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8005046:	2b00      	cmp	r3, #0
 8005048:	d01d      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0xad6>
 800504a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800504e:	d111      	bne.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0xac4>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	3304      	adds	r3, #4
 8005054:	2100      	movs	r1, #0
 8005056:	4618      	mov	r0, r3
 8005058:	f000 fcd8 	bl	8005a0c <RCCEx_PLL2_Config>
 800505c:	4603      	mov	r3, r0
 800505e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005060:	e012      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0xad8>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	3324      	adds	r3, #36	; 0x24
 8005066:	2102      	movs	r1, #2
 8005068:	4618      	mov	r0, r3
 800506a:	f000 fd81 	bl	8005b70 <RCCEx_PLL3_Config>
 800506e:	4603      	mov	r3, r0
 8005070:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005072:	e009      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	75fb      	strb	r3, [r7, #23]
      break;
 8005078:	e006      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 800507a:	bf00      	nop
 800507c:	e004      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 800507e:	bf00      	nop
 8005080:	e002      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8005082:	bf00      	nop
 8005084:	e000      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8005086:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005088:	7dfb      	ldrb	r3, [r7, #23]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d10a      	bne.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800508e:	4b2e      	ldr	r3, [pc, #184]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8005090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005092:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800509c:	492a      	ldr	r1, [pc, #168]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	658b      	str	r3, [r1, #88]	; 0x58
 80050a2:	e001      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a4:	7dfb      	ldrb	r3, [r7, #23]
 80050a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d04d      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xba0>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80050ba:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80050be:	d02e      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 80050c0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80050c4:	d828      	bhi.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 80050c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050ca:	d02a      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0xb72>
 80050cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050d0:	d822      	bhi.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 80050d2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80050d6:	d026      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0xb76>
 80050d8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80050dc:	d81c      	bhi.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 80050de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050e2:	d010      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0xb56>
 80050e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050e8:	d816      	bhi.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d01d      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0xb7a>
 80050ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050f2:	d111      	bne.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0xb68>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	3304      	adds	r3, #4
 80050f8:	2100      	movs	r1, #0
 80050fa:	4618      	mov	r0, r3
 80050fc:	f000 fc86 	bl	8005a0c <RCCEx_PLL2_Config>
 8005100:	4603      	mov	r3, r0
 8005102:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005104:	e012      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xb7c>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	3324      	adds	r3, #36	; 0x24
 800510a:	2102      	movs	r1, #2
 800510c:	4618      	mov	r0, r3
 800510e:	f000 fd2f 	bl	8005b70 <RCCEx_PLL3_Config>
 8005112:	4603      	mov	r3, r0
 8005114:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005116:	e009      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	75fb      	strb	r3, [r7, #23]
      break;
 800511c:	e006      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 800511e:	bf00      	nop
 8005120:	e004      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8005122:	bf00      	nop
 8005124:	e002      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8005126:	bf00      	nop
 8005128:	e000      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 800512a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800512c:	7dfb      	ldrb	r3, [r7, #23]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d10c      	bne.n	800514c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005132:	4b05      	ldr	r3, [pc, #20]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8005134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005136:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005140:	4901      	ldr	r1, [pc, #4]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8005142:	4313      	orrs	r3, r2
 8005144:	658b      	str	r3, [r1, #88]	; 0x58
 8005146:	e003      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8005148:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800514c:	7dfb      	ldrb	r3, [r7, #23]
 800514e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0308 	and.w	r3, r3, #8
 8005158:	2b00      	cmp	r3, #0
 800515a:	d01a      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005166:	d10a      	bne.n	800517e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	3324      	adds	r3, #36	; 0x24
 800516c:	2102      	movs	r1, #2
 800516e:	4618      	mov	r0, r3
 8005170:	f000 fcfe 	bl	8005b70 <RCCEx_PLL3_Config>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d001      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0xbce>
        {
          status = HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800517e:	4b8c      	ldr	r3, [pc, #560]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8005180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005182:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800518c:	4988      	ldr	r1, [pc, #544]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800518e:	4313      	orrs	r3, r2
 8005190:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0310 	and.w	r3, r3, #16
 800519a:	2b00      	cmp	r3, #0
 800519c:	d01a      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051a8:	d10a      	bne.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	3324      	adds	r3, #36	; 0x24
 80051ae:	2102      	movs	r1, #2
 80051b0:	4618      	mov	r0, r3
 80051b2:	f000 fcdd 	bl	8005b70 <RCCEx_PLL3_Config>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d001      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
      {
        status = HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80051c0:	4b7b      	ldr	r3, [pc, #492]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80051c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051ce:	4978      	ldr	r1, [pc, #480]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d034      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80051e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051ea:	d01d      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80051ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051f0:	d817      	bhi.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d003      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80051f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051fa:	d009      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0xc60>
 80051fc:	e011      	b.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	3304      	adds	r3, #4
 8005202:	2100      	movs	r1, #0
 8005204:	4618      	mov	r0, r3
 8005206:	f000 fc01 	bl	8005a0c <RCCEx_PLL2_Config>
 800520a:	4603      	mov	r3, r0
 800520c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800520e:	e00c      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	3324      	adds	r3, #36	; 0x24
 8005214:	2102      	movs	r1, #2
 8005216:	4618      	mov	r0, r3
 8005218:	f000 fcaa 	bl	8005b70 <RCCEx_PLL3_Config>
 800521c:	4603      	mov	r3, r0
 800521e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005220:	e003      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	75fb      	strb	r3, [r7, #23]
      break;
 8005226:	e000      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      break;
 8005228:	bf00      	nop
    }

    if(ret == HAL_OK)
 800522a:	7dfb      	ldrb	r3, [r7, #23]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d10a      	bne.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005230:	4b5f      	ldr	r3, [pc, #380]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8005232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005234:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800523e:	495c      	ldr	r1, [pc, #368]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8005240:	4313      	orrs	r3, r2
 8005242:	658b      	str	r3, [r1, #88]	; 0x58
 8005244:	e001      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005246:	7dfb      	ldrb	r3, [r7, #23]
 8005248:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d033      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800525c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005260:	d01c      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0xcec>
 8005262:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005266:	d816      	bhi.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0xce6>
 8005268:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800526c:	d003      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 800526e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005272:	d007      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 8005274:	e00f      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0xce6>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005276:	4b4e      	ldr	r3, [pc, #312]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8005278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527a:	4a4d      	ldr	r2, [pc, #308]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800527c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005280:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005282:	e00c      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0xcee>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	3324      	adds	r3, #36	; 0x24
 8005288:	2101      	movs	r1, #1
 800528a:	4618      	mov	r0, r3
 800528c:	f000 fc70 	bl	8005b70 <RCCEx_PLL3_Config>
 8005290:	4603      	mov	r3, r0
 8005292:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005294:	e003      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0xcee>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	75fb      	strb	r3, [r7, #23]
      break;
 800529a:	e000      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0xcee>
      break;
 800529c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800529e:	7dfb      	ldrb	r3, [r7, #23]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10a      	bne.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0xd0a>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052a4:	4b42      	ldr	r3, [pc, #264]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80052a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b2:	493f      	ldr	r1, [pc, #252]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	654b      	str	r3, [r1, #84]	; 0x54
 80052b8:	e001      	b.n	80052be <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052ba:	7dfb      	ldrb	r3, [r7, #23]
 80052bc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d029      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d003      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0xd2a>
 80052d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052d6:	d007      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>
 80052d8:	e00f      	b.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0xd4a>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052da:	4b35      	ldr	r3, [pc, #212]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80052dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052de:	4a34      	ldr	r2, [pc, #208]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80052e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80052e6:	e00b      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	3304      	adds	r3, #4
 80052ec:	2102      	movs	r1, #2
 80052ee:	4618      	mov	r0, r3
 80052f0:	f000 fb8c 	bl	8005a0c <RCCEx_PLL2_Config>
 80052f4:	4603      	mov	r3, r0
 80052f6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80052f8:	e002      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    default:
      ret = HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	75fb      	strb	r3, [r7, #23]
      break;
 80052fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005300:	7dfb      	ldrb	r3, [r7, #23]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d109      	bne.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005306:	4b2a      	ldr	r3, [pc, #168]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8005308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800530a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005312:	4927      	ldr	r1, [pc, #156]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8005314:	4313      	orrs	r3, r2
 8005316:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005318:	e001      	b.n	800531e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800531a:	7dfb      	ldrb	r3, [r7, #23]
 800531c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00a      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xd90>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	3324      	adds	r3, #36	; 0x24
 800532e:	2102      	movs	r1, #2
 8005330:	4618      	mov	r0, r3
 8005332:	f000 fc1d 	bl	8005b70 <RCCEx_PLL3_Config>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d001      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xd90>
    {
      status=HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d035      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
  {

    switch(PeriphClkInit->RngClockSelection)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005352:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005356:	d017      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 8005358:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800535c:	d811      	bhi.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800535e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005362:	d013      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0xddc>
 8005364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005368:	d80b      	bhi.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800536a:	2b00      	cmp	r3, #0
 800536c:	d010      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0xde0>
 800536e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005372:	d106      	bne.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005374:	4b0e      	ldr	r3, [pc, #56]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8005376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005378:	4a0d      	ldr	r2, [pc, #52]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800537a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800537e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005380:	e007      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	75fb      	strb	r3, [r7, #23]
      break;
 8005386:	e004      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8005388:	bf00      	nop
 800538a:	e002      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 800538c:	bf00      	nop
 800538e:	e000      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8005390:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005392:	7dfb      	ldrb	r3, [r7, #23]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d10d      	bne.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0xe04>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005398:	4b05      	ldr	r3, [pc, #20]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800539a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800539c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053a6:	4902      	ldr	r1, [pc, #8]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	654b      	str	r3, [r1, #84]	; 0x54
 80053ac:	e004      	b.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 80053ae:	bf00      	nop
 80053b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053b4:	7dfb      	ldrb	r3, [r7, #23]
 80053b6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d008      	beq.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80053c4:	4b31      	ldr	r3, [pc, #196]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80053c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053d0:	492e      	ldr	r1, [pc, #184]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d009      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0xe46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80053e2:	4b2a      	ldr	r3, [pc, #168]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80053f0:	4926      	ldr	r1, [pc, #152]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d008      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0xe64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005402:	4b22      	ldr	r3, [pc, #136]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8005404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005406:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800540e:	491f      	ldr	r1, [pc, #124]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8005410:	4313      	orrs	r3, r2
 8005412:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00d      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0xe8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005420:	4b1a      	ldr	r3, [pc, #104]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	4a19      	ldr	r2, [pc, #100]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8005426:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800542a:	6113      	str	r3, [r2, #16]
 800542c:	4b17      	ldr	r3, [pc, #92]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800542e:	691a      	ldr	r2, [r3, #16]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005436:	4915      	ldr	r1, [pc, #84]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8005438:	4313      	orrs	r3, r2
 800543a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	da08      	bge.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xea6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005444:	4b11      	ldr	r3, [pc, #68]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8005446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005448:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005450:	490e      	ldr	r1, [pc, #56]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8005452:	4313      	orrs	r3, r2
 8005454:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d009      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0xec6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005462:	4b0a      	ldr	r3, [pc, #40]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8005464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005466:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005470:	4906      	ldr	r1, [pc, #24]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8005472:	4313      	orrs	r3, r2
 8005474:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005476:	7dbb      	ldrb	r3, [r7, #22]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d101      	bne.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0xed0>
  {
    return HAL_OK;
 800547c:	2300      	movs	r3, #0
 800547e:	e000      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  }
  return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
}
 8005482:	4618      	mov	r0, r3
 8005484:	3718      	adds	r7, #24
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	58024400 	.word	0x58024400

08005490 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005494:	f7ff f830 	bl	80044f8 <HAL_RCC_GetHCLKFreq>
 8005498:	4602      	mov	r2, r0
 800549a:	4b06      	ldr	r3, [pc, #24]	; (80054b4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	091b      	lsrs	r3, r3, #4
 80054a0:	f003 0307 	and.w	r3, r3, #7
 80054a4:	4904      	ldr	r1, [pc, #16]	; (80054b8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80054a6:	5ccb      	ldrb	r3, [r1, r3]
 80054a8:	f003 031f 	and.w	r3, r3, #31
 80054ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	58024400 	.word	0x58024400
 80054b8:	08007f2c 	.word	0x08007f2c

080054bc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80054bc:	b480      	push	{r7}
 80054be:	b089      	sub	sp, #36	; 0x24
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80054c4:	4ba1      	ldr	r3, [pc, #644]	; (800574c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c8:	f003 0303 	and.w	r3, r3, #3
 80054cc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80054ce:	4b9f      	ldr	r3, [pc, #636]	; (800574c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d2:	0b1b      	lsrs	r3, r3, #12
 80054d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054d8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80054da:	4b9c      	ldr	r3, [pc, #624]	; (800574c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054de:	091b      	lsrs	r3, r3, #4
 80054e0:	f003 0301 	and.w	r3, r3, #1
 80054e4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80054e6:	4b99      	ldr	r3, [pc, #612]	; (800574c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ea:	08db      	lsrs	r3, r3, #3
 80054ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	fb02 f303 	mul.w	r3, r2, r3
 80054f6:	ee07 3a90 	vmov	s15, r3
 80054fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	2b00      	cmp	r3, #0
 8005506:	f000 8111 	beq.w	800572c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	2b02      	cmp	r3, #2
 800550e:	f000 8083 	beq.w	8005618 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	2b02      	cmp	r3, #2
 8005516:	f200 80a1 	bhi.w	800565c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d003      	beq.n	8005528 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	2b01      	cmp	r3, #1
 8005524:	d056      	beq.n	80055d4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005526:	e099      	b.n	800565c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005528:	4b88      	ldr	r3, [pc, #544]	; (800574c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0320 	and.w	r3, r3, #32
 8005530:	2b00      	cmp	r3, #0
 8005532:	d02d      	beq.n	8005590 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005534:	4b85      	ldr	r3, [pc, #532]	; (800574c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	08db      	lsrs	r3, r3, #3
 800553a:	f003 0303 	and.w	r3, r3, #3
 800553e:	4a84      	ldr	r2, [pc, #528]	; (8005750 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005540:	fa22 f303 	lsr.w	r3, r2, r3
 8005544:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	ee07 3a90 	vmov	s15, r3
 800554c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	ee07 3a90 	vmov	s15, r3
 8005556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800555a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800555e:	4b7b      	ldr	r3, [pc, #492]	; (800574c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005566:	ee07 3a90 	vmov	s15, r3
 800556a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800556e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005572:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005754 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005576:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800557a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800557e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800558a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800558e:	e087      	b.n	80056a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	ee07 3a90 	vmov	s15, r3
 8005596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800559a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005758 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800559e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055a2:	4b6a      	ldr	r3, [pc, #424]	; (800574c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055aa:	ee07 3a90 	vmov	s15, r3
 80055ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80055b6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005754 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80055ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80055d2:	e065      	b.n	80056a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	ee07 3a90 	vmov	s15, r3
 80055da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055de:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800575c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80055e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055e6:	4b59      	ldr	r3, [pc, #356]	; (800574c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ee:	ee07 3a90 	vmov	s15, r3
 80055f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80055fa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005754 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80055fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005606:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800560a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800560e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005612:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005616:	e043      	b.n	80056a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	ee07 3a90 	vmov	s15, r3
 800561e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005622:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005760 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800562a:	4b48      	ldr	r3, [pc, #288]	; (800574c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800562c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005632:	ee07 3a90 	vmov	s15, r3
 8005636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800563a:	ed97 6a03 	vldr	s12, [r7, #12]
 800563e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005754 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800564a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800564e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005656:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800565a:	e021      	b.n	80056a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	ee07 3a90 	vmov	s15, r3
 8005662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005666:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800575c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800566a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800566e:	4b37      	ldr	r3, [pc, #220]	; (800574c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005676:	ee07 3a90 	vmov	s15, r3
 800567a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800567e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005682:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005754 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005686:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800568a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800568e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800569a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800569e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80056a0:	4b2a      	ldr	r3, [pc, #168]	; (800574c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a4:	0a5b      	lsrs	r3, r3, #9
 80056a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056aa:	ee07 3a90 	vmov	s15, r3
 80056ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80056be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056c6:	ee17 2a90 	vmov	r2, s15
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80056ce:	4b1f      	ldr	r3, [pc, #124]	; (800574c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d2:	0c1b      	lsrs	r3, r3, #16
 80056d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056d8:	ee07 3a90 	vmov	s15, r3
 80056dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80056ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056f4:	ee17 2a90 	vmov	r2, s15
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80056fc:	4b13      	ldr	r3, [pc, #76]	; (800574c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005700:	0e1b      	lsrs	r3, r3, #24
 8005702:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005706:	ee07 3a90 	vmov	s15, r3
 800570a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800570e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005712:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005716:	edd7 6a07 	vldr	s13, [r7, #28]
 800571a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800571e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005722:	ee17 2a90 	vmov	r2, s15
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800572a:	e008      	b.n	800573e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	609a      	str	r2, [r3, #8]
}
 800573e:	bf00      	nop
 8005740:	3724      	adds	r7, #36	; 0x24
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	58024400 	.word	0x58024400
 8005750:	03d09000 	.word	0x03d09000
 8005754:	46000000 	.word	0x46000000
 8005758:	4c742400 	.word	0x4c742400
 800575c:	4a742400 	.word	0x4a742400
 8005760:	4bbebc20 	.word	0x4bbebc20

08005764 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005764:	b480      	push	{r7}
 8005766:	b089      	sub	sp, #36	; 0x24
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800576c:	4ba1      	ldr	r3, [pc, #644]	; (80059f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800576e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005770:	f003 0303 	and.w	r3, r3, #3
 8005774:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005776:	4b9f      	ldr	r3, [pc, #636]	; (80059f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800577a:	0d1b      	lsrs	r3, r3, #20
 800577c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005780:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005782:	4b9c      	ldr	r3, [pc, #624]	; (80059f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005786:	0a1b      	lsrs	r3, r3, #8
 8005788:	f003 0301 	and.w	r3, r3, #1
 800578c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800578e:	4b99      	ldr	r3, [pc, #612]	; (80059f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005792:	08db      	lsrs	r3, r3, #3
 8005794:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	fb02 f303 	mul.w	r3, r2, r3
 800579e:	ee07 3a90 	vmov	s15, r3
 80057a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f000 8111 	beq.w	80059d4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	f000 8083 	beq.w	80058c0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	2b02      	cmp	r3, #2
 80057be:	f200 80a1 	bhi.w	8005904 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d003      	beq.n	80057d0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d056      	beq.n	800587c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80057ce:	e099      	b.n	8005904 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057d0:	4b88      	ldr	r3, [pc, #544]	; (80059f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0320 	and.w	r3, r3, #32
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d02d      	beq.n	8005838 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80057dc:	4b85      	ldr	r3, [pc, #532]	; (80059f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	08db      	lsrs	r3, r3, #3
 80057e2:	f003 0303 	and.w	r3, r3, #3
 80057e6:	4a84      	ldr	r2, [pc, #528]	; (80059f8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80057e8:	fa22 f303 	lsr.w	r3, r2, r3
 80057ec:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	ee07 3a90 	vmov	s15, r3
 80057f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	ee07 3a90 	vmov	s15, r3
 80057fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005802:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005806:	4b7b      	ldr	r3, [pc, #492]	; (80059f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800580e:	ee07 3a90 	vmov	s15, r3
 8005812:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005816:	ed97 6a03 	vldr	s12, [r7, #12]
 800581a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80059fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800581e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005822:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005826:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800582a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800582e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005832:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005836:	e087      	b.n	8005948 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	ee07 3a90 	vmov	s15, r3
 800583e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005842:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005a00 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800584a:	4b6a      	ldr	r3, [pc, #424]	; (80059f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800584c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005852:	ee07 3a90 	vmov	s15, r3
 8005856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800585a:	ed97 6a03 	vldr	s12, [r7, #12]
 800585e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80059fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800586a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800586e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005876:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800587a:	e065      	b.n	8005948 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	ee07 3a90 	vmov	s15, r3
 8005882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005886:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005a04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800588a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800588e:	4b59      	ldr	r3, [pc, #356]	; (80059f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005896:	ee07 3a90 	vmov	s15, r3
 800589a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800589e:	ed97 6a03 	vldr	s12, [r7, #12]
 80058a2:	eddf 5a56 	vldr	s11, [pc, #344]	; 80059fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80058a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058be:	e043      	b.n	8005948 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	ee07 3a90 	vmov	s15, r3
 80058c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005a08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80058ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058d2:	4b48      	ldr	r3, [pc, #288]	; (80059f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058da:	ee07 3a90 	vmov	s15, r3
 80058de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80058e6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80059fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80058ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005902:	e021      	b.n	8005948 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	ee07 3a90 	vmov	s15, r3
 800590a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800590e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005a04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005916:	4b37      	ldr	r3, [pc, #220]	; (80059f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800591e:	ee07 3a90 	vmov	s15, r3
 8005922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005926:	ed97 6a03 	vldr	s12, [r7, #12]
 800592a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80059fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800592e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005936:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800593a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800593e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005942:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005946:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005948:	4b2a      	ldr	r3, [pc, #168]	; (80059f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800594a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594c:	0a5b      	lsrs	r3, r3, #9
 800594e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005952:	ee07 3a90 	vmov	s15, r3
 8005956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800595a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800595e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005962:	edd7 6a07 	vldr	s13, [r7, #28]
 8005966:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800596a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800596e:	ee17 2a90 	vmov	r2, s15
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005976:	4b1f      	ldr	r3, [pc, #124]	; (80059f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597a:	0c1b      	lsrs	r3, r3, #16
 800597c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005980:	ee07 3a90 	vmov	s15, r3
 8005984:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005988:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800598c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005990:	edd7 6a07 	vldr	s13, [r7, #28]
 8005994:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005998:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800599c:	ee17 2a90 	vmov	r2, s15
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80059a4:	4b13      	ldr	r3, [pc, #76]	; (80059f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a8:	0e1b      	lsrs	r3, r3, #24
 80059aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059ae:	ee07 3a90 	vmov	s15, r3
 80059b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80059ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80059be:	edd7 6a07 	vldr	s13, [r7, #28]
 80059c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059ca:	ee17 2a90 	vmov	r2, s15
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80059d2:	e008      	b.n	80059e6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	609a      	str	r2, [r3, #8]
}
 80059e6:	bf00      	nop
 80059e8:	3724      	adds	r7, #36	; 0x24
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	58024400 	.word	0x58024400
 80059f8:	03d09000 	.word	0x03d09000
 80059fc:	46000000 	.word	0x46000000
 8005a00:	4c742400 	.word	0x4c742400
 8005a04:	4a742400 	.word	0x4a742400
 8005a08:	4bbebc20 	.word	0x4bbebc20

08005a0c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a16:	2300      	movs	r3, #0
 8005a18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005a1a:	4b53      	ldr	r3, [pc, #332]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1e:	f003 0303 	and.w	r3, r3, #3
 8005a22:	2b03      	cmp	r3, #3
 8005a24:	d101      	bne.n	8005a2a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e099      	b.n	8005b5e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005a2a:	4b4f      	ldr	r3, [pc, #316]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a4e      	ldr	r2, [pc, #312]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005a30:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a36:	f7fb ff3f 	bl	80018b8 <HAL_GetTick>
 8005a3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a3c:	e008      	b.n	8005a50 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005a3e:	f7fb ff3b 	bl	80018b8 <HAL_GetTick>
 8005a42:	4602      	mov	r2, r0
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d901      	bls.n	8005a50 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e086      	b.n	8005b5e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a50:	4b45      	ldr	r3, [pc, #276]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1f0      	bne.n	8005a3e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005a5c:	4b42      	ldr	r3, [pc, #264]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a60:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	031b      	lsls	r3, r3, #12
 8005a6a:	493f      	ldr	r1, [pc, #252]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	628b      	str	r3, [r1, #40]	; 0x28
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	3b01      	subs	r3, #1
 8005a76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	025b      	lsls	r3, r3, #9
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	431a      	orrs	r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	041b      	lsls	r3, r3, #16
 8005a8e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005a92:	431a      	orrs	r2, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	061b      	lsls	r3, r3, #24
 8005a9c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005aa0:	4931      	ldr	r1, [pc, #196]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005aa6:	4b30      	ldr	r3, [pc, #192]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aaa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	695b      	ldr	r3, [r3, #20]
 8005ab2:	492d      	ldr	r1, [pc, #180]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005ab8:	4b2b      	ldr	r3, [pc, #172]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005abc:	f023 0220 	bic.w	r2, r3, #32
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	699b      	ldr	r3, [r3, #24]
 8005ac4:	4928      	ldr	r1, [pc, #160]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005aca:	4b27      	ldr	r3, [pc, #156]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ace:	4a26      	ldr	r2, [pc, #152]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005ad0:	f023 0310 	bic.w	r3, r3, #16
 8005ad4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005ad6:	4b24      	ldr	r3, [pc, #144]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005ad8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ada:	4b24      	ldr	r3, [pc, #144]	; (8005b6c <RCCEx_PLL2_Config+0x160>)
 8005adc:	4013      	ands	r3, r2
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	69d2      	ldr	r2, [r2, #28]
 8005ae2:	00d2      	lsls	r2, r2, #3
 8005ae4:	4920      	ldr	r1, [pc, #128]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005aea:	4b1f      	ldr	r3, [pc, #124]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aee:	4a1e      	ldr	r2, [pc, #120]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005af0:	f043 0310 	orr.w	r3, r3, #16
 8005af4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d106      	bne.n	8005b0a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005afc:	4b1a      	ldr	r3, [pc, #104]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b00:	4a19      	ldr	r2, [pc, #100]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005b02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b08:	e00f      	b.n	8005b2a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d106      	bne.n	8005b1e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005b10:	4b15      	ldr	r3, [pc, #84]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b14:	4a14      	ldr	r2, [pc, #80]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005b16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b1c:	e005      	b.n	8005b2a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005b1e:	4b12      	ldr	r3, [pc, #72]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b22:	4a11      	ldr	r2, [pc, #68]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005b24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b28:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005b2a:	4b0f      	ldr	r3, [pc, #60]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a0e      	ldr	r2, [pc, #56]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005b30:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b36:	f7fb febf 	bl	80018b8 <HAL_GetTick>
 8005b3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b3c:	e008      	b.n	8005b50 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005b3e:	f7fb febb 	bl	80018b8 <HAL_GetTick>
 8005b42:	4602      	mov	r2, r0
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d901      	bls.n	8005b50 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e006      	b.n	8005b5e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b50:	4b05      	ldr	r3, [pc, #20]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d0f0      	beq.n	8005b3e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3710      	adds	r7, #16
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	58024400 	.word	0x58024400
 8005b6c:	ffff0007 	.word	0xffff0007

08005b70 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005b7e:	4b53      	ldr	r3, [pc, #332]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b82:	f003 0303 	and.w	r3, r3, #3
 8005b86:	2b03      	cmp	r3, #3
 8005b88:	d101      	bne.n	8005b8e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e099      	b.n	8005cc2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005b8e:	4b4f      	ldr	r3, [pc, #316]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a4e      	ldr	r2, [pc, #312]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005b94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b9a:	f7fb fe8d 	bl	80018b8 <HAL_GetTick>
 8005b9e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005ba0:	e008      	b.n	8005bb4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005ba2:	f7fb fe89 	bl	80018b8 <HAL_GetTick>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d901      	bls.n	8005bb4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	e086      	b.n	8005cc2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005bb4:	4b45      	ldr	r3, [pc, #276]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1f0      	bne.n	8005ba2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005bc0:	4b42      	ldr	r3, [pc, #264]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	051b      	lsls	r3, r3, #20
 8005bce:	493f      	ldr	r1, [pc, #252]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	628b      	str	r3, [r1, #40]	; 0x28
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	3b01      	subs	r3, #1
 8005be4:	025b      	lsls	r3, r3, #9
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	431a      	orrs	r2, r3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	041b      	lsls	r3, r3, #16
 8005bf2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005bf6:	431a      	orrs	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	061b      	lsls	r3, r3, #24
 8005c00:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005c04:	4931      	ldr	r1, [pc, #196]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005c06:	4313      	orrs	r3, r2
 8005c08:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005c0a:	4b30      	ldr	r3, [pc, #192]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	492d      	ldr	r1, [pc, #180]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005c1c:	4b2b      	ldr	r3, [pc, #172]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c20:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	699b      	ldr	r3, [r3, #24]
 8005c28:	4928      	ldr	r1, [pc, #160]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005c2e:	4b27      	ldr	r3, [pc, #156]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c32:	4a26      	ldr	r2, [pc, #152]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005c34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005c3a:	4b24      	ldr	r3, [pc, #144]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005c3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c3e:	4b24      	ldr	r3, [pc, #144]	; (8005cd0 <RCCEx_PLL3_Config+0x160>)
 8005c40:	4013      	ands	r3, r2
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	69d2      	ldr	r2, [r2, #28]
 8005c46:	00d2      	lsls	r2, r2, #3
 8005c48:	4920      	ldr	r1, [pc, #128]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005c4e:	4b1f      	ldr	r3, [pc, #124]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c52:	4a1e      	ldr	r2, [pc, #120]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d106      	bne.n	8005c6e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005c60:	4b1a      	ldr	r3, [pc, #104]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c64:	4a19      	ldr	r2, [pc, #100]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005c66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005c6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005c6c:	e00f      	b.n	8005c8e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d106      	bne.n	8005c82 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005c74:	4b15      	ldr	r3, [pc, #84]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c78:	4a14      	ldr	r2, [pc, #80]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005c7a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005c7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005c80:	e005      	b.n	8005c8e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005c82:	4b12      	ldr	r3, [pc, #72]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c86:	4a11      	ldr	r2, [pc, #68]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005c88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c8c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005c8e:	4b0f      	ldr	r3, [pc, #60]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a0e      	ldr	r2, [pc, #56]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c9a:	f7fb fe0d 	bl	80018b8 <HAL_GetTick>
 8005c9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ca0:	e008      	b.n	8005cb4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005ca2:	f7fb fe09 	bl	80018b8 <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d901      	bls.n	8005cb4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e006      	b.n	8005cc2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005cb4:	4b05      	ldr	r3, [pc, #20]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d0f0      	beq.n	8005ca2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	58024400 	.word	0x58024400
 8005cd0:	ffff0007 	.word	0xffff0007

08005cd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b082      	sub	sp, #8
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d101      	bne.n	8005ce6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e042      	b.n	8005d6c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d106      	bne.n	8005cfe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f7fb fbe7 	bl	80014cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2224      	movs	r2, #36	; 0x24
 8005d02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f022 0201 	bic.w	r2, r2, #1
 8005d14:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 fb9c 	bl	8006454 <UART_SetConfig>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d101      	bne.n	8005d26 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e022      	b.n	8005d6c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d002      	beq.n	8005d34 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f001 f8f0 	bl	8006f14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	685a      	ldr	r2, [r3, #4]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	689a      	ldr	r2, [r3, #8]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f042 0201 	orr.w	r2, r2, #1
 8005d62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f001 f977 	bl	8007058 <UART_CheckIdleState>
 8005d6a:	4603      	mov	r3, r0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3708      	adds	r7, #8
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b08a      	sub	sp, #40	; 0x28
 8005d78:	af02      	add	r7, sp, #8
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	603b      	str	r3, [r7, #0]
 8005d80:	4613      	mov	r3, r2
 8005d82:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d8a:	2b20      	cmp	r3, #32
 8005d8c:	f040 8083 	bne.w	8005e96 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d002      	beq.n	8005d9c <HAL_UART_Transmit+0x28>
 8005d96:	88fb      	ldrh	r3, [r7, #6]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d101      	bne.n	8005da0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e07b      	b.n	8005e98 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d101      	bne.n	8005dae <HAL_UART_Transmit+0x3a>
 8005daa:	2302      	movs	r3, #2
 8005dac:	e074      	b.n	8005e98 <HAL_UART_Transmit+0x124>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2221      	movs	r2, #33	; 0x21
 8005dc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005dc6:	f7fb fd77 	bl	80018b8 <HAL_GetTick>
 8005dca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	88fa      	ldrh	r2, [r7, #6]
 8005dd0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	88fa      	ldrh	r2, [r7, #6]
 8005dd8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005de4:	d108      	bne.n	8005df8 <HAL_UART_Transmit+0x84>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d104      	bne.n	8005df8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005dee:	2300      	movs	r3, #0
 8005df0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	61bb      	str	r3, [r7, #24]
 8005df6:	e003      	b.n	8005e00 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005e08:	e02c      	b.n	8005e64 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	9300      	str	r3, [sp, #0]
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	2200      	movs	r2, #0
 8005e12:	2180      	movs	r1, #128	; 0x80
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f001 f96a 	bl	80070ee <UART_WaitOnFlagUntilTimeout>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d001      	beq.n	8005e24 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e039      	b.n	8005e98 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10b      	bne.n	8005e42 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	881b      	ldrh	r3, [r3, #0]
 8005e2e:	461a      	mov	r2, r3
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e38:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	3302      	adds	r3, #2
 8005e3e:	61bb      	str	r3, [r7, #24]
 8005e40:	e007      	b.n	8005e52 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	781a      	ldrb	r2, [r3, #0]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	b29a      	uxth	r2, r3
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d1cc      	bne.n	8005e0a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	9300      	str	r3, [sp, #0]
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	2200      	movs	r2, #0
 8005e78:	2140      	movs	r1, #64	; 0x40
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	f001 f937 	bl	80070ee <UART_WaitOnFlagUntilTimeout>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d001      	beq.n	8005e8a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e006      	b.n	8005e98 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2220      	movs	r2, #32
 8005e8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005e92:	2300      	movs	r3, #0
 8005e94:	e000      	b.n	8005e98 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005e96:	2302      	movs	r3, #2
  }
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3720      	adds	r7, #32
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b088      	sub	sp, #32
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	69db      	ldr	r3, [r3, #28]
 8005eae:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005ec0:	69fa      	ldr	r2, [r7, #28]
 8005ec2:	f640 030f 	movw	r3, #2063	; 0x80f
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d118      	bne.n	8005f02 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	f003 0320 	and.w	r3, r3, #32
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d013      	beq.n	8005f02 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	f003 0320 	and.w	r3, r3, #32
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d104      	bne.n	8005eee <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d009      	beq.n	8005f02 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	f000 8282 	beq.w	80063fc <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	4798      	blx	r3
      }
      return;
 8005f00:	e27c      	b.n	80063fc <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	f000 80ef 	beq.w	80060e8 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	4b73      	ldr	r3, [pc, #460]	; (80060dc <HAL_UART_IRQHandler+0x23c>)
 8005f0e:	4013      	ands	r3, r2
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d105      	bne.n	8005f20 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005f14:	69ba      	ldr	r2, [r7, #24]
 8005f16:	4b72      	ldr	r3, [pc, #456]	; (80060e0 <HAL_UART_IRQHandler+0x240>)
 8005f18:	4013      	ands	r3, r2
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	f000 80e4 	beq.w	80060e8 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	f003 0301 	and.w	r3, r3, #1
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d010      	beq.n	8005f4c <HAL_UART_IRQHandler+0xac>
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00b      	beq.n	8005f4c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f42:	f043 0201 	orr.w	r2, r3, #1
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	f003 0302 	and.w	r3, r3, #2
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d010      	beq.n	8005f78 <HAL_UART_IRQHandler+0xd8>
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	f003 0301 	and.w	r3, r3, #1
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00b      	beq.n	8005f78 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2202      	movs	r2, #2
 8005f66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f6e:	f043 0204 	orr.w	r2, r3, #4
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	f003 0304 	and.w	r3, r3, #4
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d010      	beq.n	8005fa4 <HAL_UART_IRQHandler+0x104>
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	f003 0301 	and.w	r3, r3, #1
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00b      	beq.n	8005fa4 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2204      	movs	r2, #4
 8005f92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f9a:	f043 0202 	orr.w	r2, r3, #2
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	f003 0308 	and.w	r3, r3, #8
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d015      	beq.n	8005fda <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	f003 0320 	and.w	r3, r3, #32
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d104      	bne.n	8005fc2 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005fb8:	697a      	ldr	r2, [r7, #20]
 8005fba:	4b48      	ldr	r3, [pc, #288]	; (80060dc <HAL_UART_IRQHandler+0x23c>)
 8005fbc:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00b      	beq.n	8005fda <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2208      	movs	r2, #8
 8005fc8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fd0:	f043 0208 	orr.w	r2, r3, #8
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d011      	beq.n	8006008 <HAL_UART_IRQHandler+0x168>
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00c      	beq.n	8006008 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ff6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ffe:	f043 0220 	orr.w	r2, r3, #32
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800600e:	2b00      	cmp	r3, #0
 8006010:	f000 81f6 	beq.w	8006400 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	f003 0320 	and.w	r3, r3, #32
 800601a:	2b00      	cmp	r3, #0
 800601c:	d011      	beq.n	8006042 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	f003 0320 	and.w	r3, r3, #32
 8006024:	2b00      	cmp	r3, #0
 8006026:	d104      	bne.n	8006032 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800602e:	2b00      	cmp	r3, #0
 8006030:	d007      	beq.n	8006042 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006036:	2b00      	cmp	r3, #0
 8006038:	d003      	beq.n	8006042 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006048:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006054:	2b40      	cmp	r3, #64	; 0x40
 8006056:	d004      	beq.n	8006062 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800605e:	2b00      	cmp	r3, #0
 8006060:	d031      	beq.n	80060c6 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f001 f8c4 	bl	80071f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006072:	2b40      	cmp	r3, #64	; 0x40
 8006074:	d123      	bne.n	80060be <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	689a      	ldr	r2, [r3, #8]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006084:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800608a:	2b00      	cmp	r3, #0
 800608c:	d013      	beq.n	80060b6 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006092:	4a14      	ldr	r2, [pc, #80]	; (80060e4 <HAL_UART_IRQHandler+0x244>)
 8006094:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800609a:	4618      	mov	r0, r3
 800609c:	f7fc f886 	bl	80021ac <HAL_DMA_Abort_IT>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d017      	beq.n	80060d6 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80060b0:	4610      	mov	r0, r2
 80060b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060b4:	e00f      	b.n	80060d6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 f9b6 	bl	8006428 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060bc:	e00b      	b.n	80060d6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 f9b2 	bl	8006428 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060c4:	e007      	b.n	80060d6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 f9ae 	bl	8006428 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80060d4:	e194      	b.n	8006400 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060d6:	bf00      	nop
    return;
 80060d8:	e192      	b.n	8006400 <HAL_UART_IRQHandler+0x560>
 80060da:	bf00      	nop
 80060dc:	10000001 	.word	0x10000001
 80060e0:	04000120 	.word	0x04000120
 80060e4:	08007255 	.word	0x08007255

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	f040 810f 	bne.w	8006310 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	f003 0310 	and.w	r3, r3, #16
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	f000 8109 	beq.w	8006310 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	f003 0310 	and.w	r3, r3, #16
 8006104:	2b00      	cmp	r3, #0
 8006106:	f000 8103 	beq.w	8006310 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2210      	movs	r2, #16
 8006110:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800611c:	2b40      	cmp	r3, #64	; 0x40
 800611e:	f040 80bb 	bne.w	8006298 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a96      	ldr	r2, [pc, #600]	; (8006384 <HAL_UART_IRQHandler+0x4e4>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d059      	beq.n	80061e2 <HAL_UART_IRQHandler+0x342>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a94      	ldr	r2, [pc, #592]	; (8006388 <HAL_UART_IRQHandler+0x4e8>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d053      	beq.n	80061e2 <HAL_UART_IRQHandler+0x342>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a92      	ldr	r2, [pc, #584]	; (800638c <HAL_UART_IRQHandler+0x4ec>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d04d      	beq.n	80061e2 <HAL_UART_IRQHandler+0x342>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a90      	ldr	r2, [pc, #576]	; (8006390 <HAL_UART_IRQHandler+0x4f0>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d047      	beq.n	80061e2 <HAL_UART_IRQHandler+0x342>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a8e      	ldr	r2, [pc, #568]	; (8006394 <HAL_UART_IRQHandler+0x4f4>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d041      	beq.n	80061e2 <HAL_UART_IRQHandler+0x342>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a8c      	ldr	r2, [pc, #560]	; (8006398 <HAL_UART_IRQHandler+0x4f8>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d03b      	beq.n	80061e2 <HAL_UART_IRQHandler+0x342>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a8a      	ldr	r2, [pc, #552]	; (800639c <HAL_UART_IRQHandler+0x4fc>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d035      	beq.n	80061e2 <HAL_UART_IRQHandler+0x342>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a88      	ldr	r2, [pc, #544]	; (80063a0 <HAL_UART_IRQHandler+0x500>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d02f      	beq.n	80061e2 <HAL_UART_IRQHandler+0x342>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a86      	ldr	r2, [pc, #536]	; (80063a4 <HAL_UART_IRQHandler+0x504>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d029      	beq.n	80061e2 <HAL_UART_IRQHandler+0x342>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a84      	ldr	r2, [pc, #528]	; (80063a8 <HAL_UART_IRQHandler+0x508>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d023      	beq.n	80061e2 <HAL_UART_IRQHandler+0x342>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a82      	ldr	r2, [pc, #520]	; (80063ac <HAL_UART_IRQHandler+0x50c>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d01d      	beq.n	80061e2 <HAL_UART_IRQHandler+0x342>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a80      	ldr	r2, [pc, #512]	; (80063b0 <HAL_UART_IRQHandler+0x510>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d017      	beq.n	80061e2 <HAL_UART_IRQHandler+0x342>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a7e      	ldr	r2, [pc, #504]	; (80063b4 <HAL_UART_IRQHandler+0x514>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d011      	beq.n	80061e2 <HAL_UART_IRQHandler+0x342>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a7c      	ldr	r2, [pc, #496]	; (80063b8 <HAL_UART_IRQHandler+0x518>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d00b      	beq.n	80061e2 <HAL_UART_IRQHandler+0x342>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a7a      	ldr	r2, [pc, #488]	; (80063bc <HAL_UART_IRQHandler+0x51c>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d005      	beq.n	80061e2 <HAL_UART_IRQHandler+0x342>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a78      	ldr	r2, [pc, #480]	; (80063c0 <HAL_UART_IRQHandler+0x520>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d105      	bne.n	80061ee <HAL_UART_IRQHandler+0x34e>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	e004      	b.n	80061f8 <HAL_UART_IRQHandler+0x358>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80061fa:	893b      	ldrh	r3, [r7, #8]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	f000 8101 	beq.w	8006404 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006208:	893a      	ldrh	r2, [r7, #8]
 800620a:	429a      	cmp	r2, r3
 800620c:	f080 80fa 	bcs.w	8006404 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	893a      	ldrh	r2, [r7, #8]
 8006214:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800621c:	69db      	ldr	r3, [r3, #28]
 800621e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006222:	d02b      	beq.n	800627c <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006232:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	689a      	ldr	r2, [r3, #8]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f022 0201 	bic.w	r2, r2, #1
 8006242:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	689a      	ldr	r2, [r3, #8]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006252:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2220      	movs	r2, #32
 8006258:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f022 0210 	bic.w	r2, r2, #16
 8006270:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006276:	4618      	mov	r0, r3
 8006278:	f7fb fc7a 	bl	8001b70 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006288:	b29b      	uxth	r3, r3
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	b29b      	uxth	r3, r3
 800628e:	4619      	mov	r1, r3
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 f8d3 	bl	800643c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006296:	e0b5      	b.n	8006404 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	1ad3      	subs	r3, r2, r3
 80062a8:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f000 80a8 	beq.w	8006408 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 80062b8:	897b      	ldrh	r3, [r7, #10]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	f000 80a4 	beq.w	8006408 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80062ce:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	6899      	ldr	r1, [r3, #8]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	4b3a      	ldr	r3, [pc, #232]	; (80063c4 <HAL_UART_IRQHandler+0x524>)
 80062dc:	400b      	ands	r3, r1
 80062de:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2220      	movs	r2, #32
 80062e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f022 0210 	bic.w	r2, r2, #16
 8006302:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006304:	897b      	ldrh	r3, [r7, #10]
 8006306:	4619      	mov	r1, r3
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 f897 	bl	800643c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800630e:	e07b      	b.n	8006408 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00d      	beq.n	8006336 <HAL_UART_IRQHandler+0x496>
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006320:	2b00      	cmp	r3, #0
 8006322:	d008      	beq.n	8006336 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800632c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 ffc0 	bl	80072b4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006334:	e06b      	b.n	800640e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800633c:	2b00      	cmp	r3, #0
 800633e:	d012      	beq.n	8006366 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006346:	2b00      	cmp	r3, #0
 8006348:	d104      	bne.n	8006354 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006350:	2b00      	cmp	r3, #0
 8006352:	d008      	beq.n	8006366 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006358:	2b00      	cmp	r3, #0
 800635a:	d057      	beq.n	800640c <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	4798      	blx	r3
    }
    return;
 8006364:	e052      	b.n	800640c <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800636c:	2b00      	cmp	r3, #0
 800636e:	d02b      	beq.n	80063c8 <HAL_UART_IRQHandler+0x528>
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006376:	2b00      	cmp	r3, #0
 8006378:	d026      	beq.n	80063c8 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 ff80 	bl	8007280 <UART_EndTransmit_IT>
    return;
 8006380:	e045      	b.n	800640e <HAL_UART_IRQHandler+0x56e>
 8006382:	bf00      	nop
 8006384:	40020010 	.word	0x40020010
 8006388:	40020028 	.word	0x40020028
 800638c:	40020040 	.word	0x40020040
 8006390:	40020058 	.word	0x40020058
 8006394:	40020070 	.word	0x40020070
 8006398:	40020088 	.word	0x40020088
 800639c:	400200a0 	.word	0x400200a0
 80063a0:	400200b8 	.word	0x400200b8
 80063a4:	40020410 	.word	0x40020410
 80063a8:	40020428 	.word	0x40020428
 80063ac:	40020440 	.word	0x40020440
 80063b0:	40020458 	.word	0x40020458
 80063b4:	40020470 	.word	0x40020470
 80063b8:	40020488 	.word	0x40020488
 80063bc:	400204a0 	.word	0x400204a0
 80063c0:	400204b8 	.word	0x400204b8
 80063c4:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d008      	beq.n	80063e4 <HAL_UART_IRQHandler+0x544>
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d003      	beq.n	80063e4 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 ff7d 	bl	80072dc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80063e2:	e014      	b.n	800640e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00f      	beq.n	800640e <HAL_UART_IRQHandler+0x56e>
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	da0c      	bge.n	800640e <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 ff67 	bl	80072c8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80063fa:	e008      	b.n	800640e <HAL_UART_IRQHandler+0x56e>
      return;
 80063fc:	bf00      	nop
 80063fe:	e006      	b.n	800640e <HAL_UART_IRQHandler+0x56e>
    return;
 8006400:	bf00      	nop
 8006402:	e004      	b.n	800640e <HAL_UART_IRQHandler+0x56e>
      return;
 8006404:	bf00      	nop
 8006406:	e002      	b.n	800640e <HAL_UART_IRQHandler+0x56e>
      return;
 8006408:	bf00      	nop
 800640a:	e000      	b.n	800640e <HAL_UART_IRQHandler+0x56e>
    return;
 800640c:	bf00      	nop
  }
}
 800640e:	3720      	adds	r7, #32
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006430:	bf00      	nop
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	460b      	mov	r3, r1
 8006446:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006448:	bf00      	nop
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006454:	b5b0      	push	{r4, r5, r7, lr}
 8006456:	b08e      	sub	sp, #56	; 0x38
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800645c:	2300      	movs	r3, #0
 800645e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	689a      	ldr	r2, [r3, #8]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	431a      	orrs	r2, r3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	695b      	ldr	r3, [r3, #20]
 8006470:	431a      	orrs	r2, r3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	69db      	ldr	r3, [r3, #28]
 8006476:	4313      	orrs	r3, r2
 8006478:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	4bbf      	ldr	r3, [pc, #764]	; (8006780 <UART_SetConfig+0x32c>)
 8006482:	4013      	ands	r3, r2
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	6812      	ldr	r2, [r2, #0]
 8006488:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800648a:	430b      	orrs	r3, r1
 800648c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	68da      	ldr	r2, [r3, #12]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	430a      	orrs	r2, r1
 80064a2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	699b      	ldr	r3, [r3, #24]
 80064a8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4ab5      	ldr	r2, [pc, #724]	; (8006784 <UART_SetConfig+0x330>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d004      	beq.n	80064be <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a1b      	ldr	r3, [r3, #32]
 80064b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064ba:	4313      	orrs	r3, r2
 80064bc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	689a      	ldr	r2, [r3, #8]
 80064c4:	4bb0      	ldr	r3, [pc, #704]	; (8006788 <UART_SetConfig+0x334>)
 80064c6:	4013      	ands	r3, r2
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	6812      	ldr	r2, [r2, #0]
 80064cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80064ce:	430b      	orrs	r3, r1
 80064d0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d8:	f023 010f 	bic.w	r1, r3, #15
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	430a      	orrs	r2, r1
 80064e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4aa7      	ldr	r2, [pc, #668]	; (800678c <UART_SetConfig+0x338>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d176      	bne.n	80065e0 <UART_SetConfig+0x18c>
 80064f2:	4ba7      	ldr	r3, [pc, #668]	; (8006790 <UART_SetConfig+0x33c>)
 80064f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064fa:	2b28      	cmp	r3, #40	; 0x28
 80064fc:	d86c      	bhi.n	80065d8 <UART_SetConfig+0x184>
 80064fe:	a201      	add	r2, pc, #4	; (adr r2, 8006504 <UART_SetConfig+0xb0>)
 8006500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006504:	080065a9 	.word	0x080065a9
 8006508:	080065d9 	.word	0x080065d9
 800650c:	080065d9 	.word	0x080065d9
 8006510:	080065d9 	.word	0x080065d9
 8006514:	080065d9 	.word	0x080065d9
 8006518:	080065d9 	.word	0x080065d9
 800651c:	080065d9 	.word	0x080065d9
 8006520:	080065d9 	.word	0x080065d9
 8006524:	080065b1 	.word	0x080065b1
 8006528:	080065d9 	.word	0x080065d9
 800652c:	080065d9 	.word	0x080065d9
 8006530:	080065d9 	.word	0x080065d9
 8006534:	080065d9 	.word	0x080065d9
 8006538:	080065d9 	.word	0x080065d9
 800653c:	080065d9 	.word	0x080065d9
 8006540:	080065d9 	.word	0x080065d9
 8006544:	080065b9 	.word	0x080065b9
 8006548:	080065d9 	.word	0x080065d9
 800654c:	080065d9 	.word	0x080065d9
 8006550:	080065d9 	.word	0x080065d9
 8006554:	080065d9 	.word	0x080065d9
 8006558:	080065d9 	.word	0x080065d9
 800655c:	080065d9 	.word	0x080065d9
 8006560:	080065d9 	.word	0x080065d9
 8006564:	080065c1 	.word	0x080065c1
 8006568:	080065d9 	.word	0x080065d9
 800656c:	080065d9 	.word	0x080065d9
 8006570:	080065d9 	.word	0x080065d9
 8006574:	080065d9 	.word	0x080065d9
 8006578:	080065d9 	.word	0x080065d9
 800657c:	080065d9 	.word	0x080065d9
 8006580:	080065d9 	.word	0x080065d9
 8006584:	080065c9 	.word	0x080065c9
 8006588:	080065d9 	.word	0x080065d9
 800658c:	080065d9 	.word	0x080065d9
 8006590:	080065d9 	.word	0x080065d9
 8006594:	080065d9 	.word	0x080065d9
 8006598:	080065d9 	.word	0x080065d9
 800659c:	080065d9 	.word	0x080065d9
 80065a0:	080065d9 	.word	0x080065d9
 80065a4:	080065d1 	.word	0x080065d1
 80065a8:	2301      	movs	r3, #1
 80065aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065ae:	e222      	b.n	80069f6 <UART_SetConfig+0x5a2>
 80065b0:	2304      	movs	r3, #4
 80065b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065b6:	e21e      	b.n	80069f6 <UART_SetConfig+0x5a2>
 80065b8:	2308      	movs	r3, #8
 80065ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065be:	e21a      	b.n	80069f6 <UART_SetConfig+0x5a2>
 80065c0:	2310      	movs	r3, #16
 80065c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065c6:	e216      	b.n	80069f6 <UART_SetConfig+0x5a2>
 80065c8:	2320      	movs	r3, #32
 80065ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065ce:	e212      	b.n	80069f6 <UART_SetConfig+0x5a2>
 80065d0:	2340      	movs	r3, #64	; 0x40
 80065d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065d6:	e20e      	b.n	80069f6 <UART_SetConfig+0x5a2>
 80065d8:	2380      	movs	r3, #128	; 0x80
 80065da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065de:	e20a      	b.n	80069f6 <UART_SetConfig+0x5a2>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a6b      	ldr	r2, [pc, #428]	; (8006794 <UART_SetConfig+0x340>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d130      	bne.n	800664c <UART_SetConfig+0x1f8>
 80065ea:	4b69      	ldr	r3, [pc, #420]	; (8006790 <UART_SetConfig+0x33c>)
 80065ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ee:	f003 0307 	and.w	r3, r3, #7
 80065f2:	2b05      	cmp	r3, #5
 80065f4:	d826      	bhi.n	8006644 <UART_SetConfig+0x1f0>
 80065f6:	a201      	add	r2, pc, #4	; (adr r2, 80065fc <UART_SetConfig+0x1a8>)
 80065f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065fc:	08006615 	.word	0x08006615
 8006600:	0800661d 	.word	0x0800661d
 8006604:	08006625 	.word	0x08006625
 8006608:	0800662d 	.word	0x0800662d
 800660c:	08006635 	.word	0x08006635
 8006610:	0800663d 	.word	0x0800663d
 8006614:	2300      	movs	r3, #0
 8006616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800661a:	e1ec      	b.n	80069f6 <UART_SetConfig+0x5a2>
 800661c:	2304      	movs	r3, #4
 800661e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006622:	e1e8      	b.n	80069f6 <UART_SetConfig+0x5a2>
 8006624:	2308      	movs	r3, #8
 8006626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800662a:	e1e4      	b.n	80069f6 <UART_SetConfig+0x5a2>
 800662c:	2310      	movs	r3, #16
 800662e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006632:	e1e0      	b.n	80069f6 <UART_SetConfig+0x5a2>
 8006634:	2320      	movs	r3, #32
 8006636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800663a:	e1dc      	b.n	80069f6 <UART_SetConfig+0x5a2>
 800663c:	2340      	movs	r3, #64	; 0x40
 800663e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006642:	e1d8      	b.n	80069f6 <UART_SetConfig+0x5a2>
 8006644:	2380      	movs	r3, #128	; 0x80
 8006646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800664a:	e1d4      	b.n	80069f6 <UART_SetConfig+0x5a2>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a51      	ldr	r2, [pc, #324]	; (8006798 <UART_SetConfig+0x344>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d130      	bne.n	80066b8 <UART_SetConfig+0x264>
 8006656:	4b4e      	ldr	r3, [pc, #312]	; (8006790 <UART_SetConfig+0x33c>)
 8006658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800665a:	f003 0307 	and.w	r3, r3, #7
 800665e:	2b05      	cmp	r3, #5
 8006660:	d826      	bhi.n	80066b0 <UART_SetConfig+0x25c>
 8006662:	a201      	add	r2, pc, #4	; (adr r2, 8006668 <UART_SetConfig+0x214>)
 8006664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006668:	08006681 	.word	0x08006681
 800666c:	08006689 	.word	0x08006689
 8006670:	08006691 	.word	0x08006691
 8006674:	08006699 	.word	0x08006699
 8006678:	080066a1 	.word	0x080066a1
 800667c:	080066a9 	.word	0x080066a9
 8006680:	2300      	movs	r3, #0
 8006682:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006686:	e1b6      	b.n	80069f6 <UART_SetConfig+0x5a2>
 8006688:	2304      	movs	r3, #4
 800668a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800668e:	e1b2      	b.n	80069f6 <UART_SetConfig+0x5a2>
 8006690:	2308      	movs	r3, #8
 8006692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006696:	e1ae      	b.n	80069f6 <UART_SetConfig+0x5a2>
 8006698:	2310      	movs	r3, #16
 800669a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800669e:	e1aa      	b.n	80069f6 <UART_SetConfig+0x5a2>
 80066a0:	2320      	movs	r3, #32
 80066a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066a6:	e1a6      	b.n	80069f6 <UART_SetConfig+0x5a2>
 80066a8:	2340      	movs	r3, #64	; 0x40
 80066aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066ae:	e1a2      	b.n	80069f6 <UART_SetConfig+0x5a2>
 80066b0:	2380      	movs	r3, #128	; 0x80
 80066b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066b6:	e19e      	b.n	80069f6 <UART_SetConfig+0x5a2>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a37      	ldr	r2, [pc, #220]	; (800679c <UART_SetConfig+0x348>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d130      	bne.n	8006724 <UART_SetConfig+0x2d0>
 80066c2:	4b33      	ldr	r3, [pc, #204]	; (8006790 <UART_SetConfig+0x33c>)
 80066c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066c6:	f003 0307 	and.w	r3, r3, #7
 80066ca:	2b05      	cmp	r3, #5
 80066cc:	d826      	bhi.n	800671c <UART_SetConfig+0x2c8>
 80066ce:	a201      	add	r2, pc, #4	; (adr r2, 80066d4 <UART_SetConfig+0x280>)
 80066d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d4:	080066ed 	.word	0x080066ed
 80066d8:	080066f5 	.word	0x080066f5
 80066dc:	080066fd 	.word	0x080066fd
 80066e0:	08006705 	.word	0x08006705
 80066e4:	0800670d 	.word	0x0800670d
 80066e8:	08006715 	.word	0x08006715
 80066ec:	2300      	movs	r3, #0
 80066ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066f2:	e180      	b.n	80069f6 <UART_SetConfig+0x5a2>
 80066f4:	2304      	movs	r3, #4
 80066f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066fa:	e17c      	b.n	80069f6 <UART_SetConfig+0x5a2>
 80066fc:	2308      	movs	r3, #8
 80066fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006702:	e178      	b.n	80069f6 <UART_SetConfig+0x5a2>
 8006704:	2310      	movs	r3, #16
 8006706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800670a:	e174      	b.n	80069f6 <UART_SetConfig+0x5a2>
 800670c:	2320      	movs	r3, #32
 800670e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006712:	e170      	b.n	80069f6 <UART_SetConfig+0x5a2>
 8006714:	2340      	movs	r3, #64	; 0x40
 8006716:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800671a:	e16c      	b.n	80069f6 <UART_SetConfig+0x5a2>
 800671c:	2380      	movs	r3, #128	; 0x80
 800671e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006722:	e168      	b.n	80069f6 <UART_SetConfig+0x5a2>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a1d      	ldr	r2, [pc, #116]	; (80067a0 <UART_SetConfig+0x34c>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d142      	bne.n	80067b4 <UART_SetConfig+0x360>
 800672e:	4b18      	ldr	r3, [pc, #96]	; (8006790 <UART_SetConfig+0x33c>)
 8006730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006732:	f003 0307 	and.w	r3, r3, #7
 8006736:	2b05      	cmp	r3, #5
 8006738:	d838      	bhi.n	80067ac <UART_SetConfig+0x358>
 800673a:	a201      	add	r2, pc, #4	; (adr r2, 8006740 <UART_SetConfig+0x2ec>)
 800673c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006740:	08006759 	.word	0x08006759
 8006744:	08006761 	.word	0x08006761
 8006748:	08006769 	.word	0x08006769
 800674c:	08006771 	.word	0x08006771
 8006750:	08006779 	.word	0x08006779
 8006754:	080067a5 	.word	0x080067a5
 8006758:	2300      	movs	r3, #0
 800675a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800675e:	e14a      	b.n	80069f6 <UART_SetConfig+0x5a2>
 8006760:	2304      	movs	r3, #4
 8006762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006766:	e146      	b.n	80069f6 <UART_SetConfig+0x5a2>
 8006768:	2308      	movs	r3, #8
 800676a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800676e:	e142      	b.n	80069f6 <UART_SetConfig+0x5a2>
 8006770:	2310      	movs	r3, #16
 8006772:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006776:	e13e      	b.n	80069f6 <UART_SetConfig+0x5a2>
 8006778:	2320      	movs	r3, #32
 800677a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800677e:	e13a      	b.n	80069f6 <UART_SetConfig+0x5a2>
 8006780:	cfff69f3 	.word	0xcfff69f3
 8006784:	58000c00 	.word	0x58000c00
 8006788:	11fff4ff 	.word	0x11fff4ff
 800678c:	40011000 	.word	0x40011000
 8006790:	58024400 	.word	0x58024400
 8006794:	40004400 	.word	0x40004400
 8006798:	40004800 	.word	0x40004800
 800679c:	40004c00 	.word	0x40004c00
 80067a0:	40005000 	.word	0x40005000
 80067a4:	2340      	movs	r3, #64	; 0x40
 80067a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067aa:	e124      	b.n	80069f6 <UART_SetConfig+0x5a2>
 80067ac:	2380      	movs	r3, #128	; 0x80
 80067ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067b2:	e120      	b.n	80069f6 <UART_SetConfig+0x5a2>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4acc      	ldr	r2, [pc, #816]	; (8006aec <UART_SetConfig+0x698>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d176      	bne.n	80068ac <UART_SetConfig+0x458>
 80067be:	4bcc      	ldr	r3, [pc, #816]	; (8006af0 <UART_SetConfig+0x69c>)
 80067c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067c6:	2b28      	cmp	r3, #40	; 0x28
 80067c8:	d86c      	bhi.n	80068a4 <UART_SetConfig+0x450>
 80067ca:	a201      	add	r2, pc, #4	; (adr r2, 80067d0 <UART_SetConfig+0x37c>)
 80067cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d0:	08006875 	.word	0x08006875
 80067d4:	080068a5 	.word	0x080068a5
 80067d8:	080068a5 	.word	0x080068a5
 80067dc:	080068a5 	.word	0x080068a5
 80067e0:	080068a5 	.word	0x080068a5
 80067e4:	080068a5 	.word	0x080068a5
 80067e8:	080068a5 	.word	0x080068a5
 80067ec:	080068a5 	.word	0x080068a5
 80067f0:	0800687d 	.word	0x0800687d
 80067f4:	080068a5 	.word	0x080068a5
 80067f8:	080068a5 	.word	0x080068a5
 80067fc:	080068a5 	.word	0x080068a5
 8006800:	080068a5 	.word	0x080068a5
 8006804:	080068a5 	.word	0x080068a5
 8006808:	080068a5 	.word	0x080068a5
 800680c:	080068a5 	.word	0x080068a5
 8006810:	08006885 	.word	0x08006885
 8006814:	080068a5 	.word	0x080068a5
 8006818:	080068a5 	.word	0x080068a5
 800681c:	080068a5 	.word	0x080068a5
 8006820:	080068a5 	.word	0x080068a5
 8006824:	080068a5 	.word	0x080068a5
 8006828:	080068a5 	.word	0x080068a5
 800682c:	080068a5 	.word	0x080068a5
 8006830:	0800688d 	.word	0x0800688d
 8006834:	080068a5 	.word	0x080068a5
 8006838:	080068a5 	.word	0x080068a5
 800683c:	080068a5 	.word	0x080068a5
 8006840:	080068a5 	.word	0x080068a5
 8006844:	080068a5 	.word	0x080068a5
 8006848:	080068a5 	.word	0x080068a5
 800684c:	080068a5 	.word	0x080068a5
 8006850:	08006895 	.word	0x08006895
 8006854:	080068a5 	.word	0x080068a5
 8006858:	080068a5 	.word	0x080068a5
 800685c:	080068a5 	.word	0x080068a5
 8006860:	080068a5 	.word	0x080068a5
 8006864:	080068a5 	.word	0x080068a5
 8006868:	080068a5 	.word	0x080068a5
 800686c:	080068a5 	.word	0x080068a5
 8006870:	0800689d 	.word	0x0800689d
 8006874:	2301      	movs	r3, #1
 8006876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800687a:	e0bc      	b.n	80069f6 <UART_SetConfig+0x5a2>
 800687c:	2304      	movs	r3, #4
 800687e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006882:	e0b8      	b.n	80069f6 <UART_SetConfig+0x5a2>
 8006884:	2308      	movs	r3, #8
 8006886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800688a:	e0b4      	b.n	80069f6 <UART_SetConfig+0x5a2>
 800688c:	2310      	movs	r3, #16
 800688e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006892:	e0b0      	b.n	80069f6 <UART_SetConfig+0x5a2>
 8006894:	2320      	movs	r3, #32
 8006896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800689a:	e0ac      	b.n	80069f6 <UART_SetConfig+0x5a2>
 800689c:	2340      	movs	r3, #64	; 0x40
 800689e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068a2:	e0a8      	b.n	80069f6 <UART_SetConfig+0x5a2>
 80068a4:	2380      	movs	r3, #128	; 0x80
 80068a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068aa:	e0a4      	b.n	80069f6 <UART_SetConfig+0x5a2>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a90      	ldr	r2, [pc, #576]	; (8006af4 <UART_SetConfig+0x6a0>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d130      	bne.n	8006918 <UART_SetConfig+0x4c4>
 80068b6:	4b8e      	ldr	r3, [pc, #568]	; (8006af0 <UART_SetConfig+0x69c>)
 80068b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ba:	f003 0307 	and.w	r3, r3, #7
 80068be:	2b05      	cmp	r3, #5
 80068c0:	d826      	bhi.n	8006910 <UART_SetConfig+0x4bc>
 80068c2:	a201      	add	r2, pc, #4	; (adr r2, 80068c8 <UART_SetConfig+0x474>)
 80068c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c8:	080068e1 	.word	0x080068e1
 80068cc:	080068e9 	.word	0x080068e9
 80068d0:	080068f1 	.word	0x080068f1
 80068d4:	080068f9 	.word	0x080068f9
 80068d8:	08006901 	.word	0x08006901
 80068dc:	08006909 	.word	0x08006909
 80068e0:	2300      	movs	r3, #0
 80068e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068e6:	e086      	b.n	80069f6 <UART_SetConfig+0x5a2>
 80068e8:	2304      	movs	r3, #4
 80068ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068ee:	e082      	b.n	80069f6 <UART_SetConfig+0x5a2>
 80068f0:	2308      	movs	r3, #8
 80068f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068f6:	e07e      	b.n	80069f6 <UART_SetConfig+0x5a2>
 80068f8:	2310      	movs	r3, #16
 80068fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068fe:	e07a      	b.n	80069f6 <UART_SetConfig+0x5a2>
 8006900:	2320      	movs	r3, #32
 8006902:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006906:	e076      	b.n	80069f6 <UART_SetConfig+0x5a2>
 8006908:	2340      	movs	r3, #64	; 0x40
 800690a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800690e:	e072      	b.n	80069f6 <UART_SetConfig+0x5a2>
 8006910:	2380      	movs	r3, #128	; 0x80
 8006912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006916:	e06e      	b.n	80069f6 <UART_SetConfig+0x5a2>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a76      	ldr	r2, [pc, #472]	; (8006af8 <UART_SetConfig+0x6a4>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d130      	bne.n	8006984 <UART_SetConfig+0x530>
 8006922:	4b73      	ldr	r3, [pc, #460]	; (8006af0 <UART_SetConfig+0x69c>)
 8006924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006926:	f003 0307 	and.w	r3, r3, #7
 800692a:	2b05      	cmp	r3, #5
 800692c:	d826      	bhi.n	800697c <UART_SetConfig+0x528>
 800692e:	a201      	add	r2, pc, #4	; (adr r2, 8006934 <UART_SetConfig+0x4e0>)
 8006930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006934:	0800694d 	.word	0x0800694d
 8006938:	08006955 	.word	0x08006955
 800693c:	0800695d 	.word	0x0800695d
 8006940:	08006965 	.word	0x08006965
 8006944:	0800696d 	.word	0x0800696d
 8006948:	08006975 	.word	0x08006975
 800694c:	2300      	movs	r3, #0
 800694e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006952:	e050      	b.n	80069f6 <UART_SetConfig+0x5a2>
 8006954:	2304      	movs	r3, #4
 8006956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800695a:	e04c      	b.n	80069f6 <UART_SetConfig+0x5a2>
 800695c:	2308      	movs	r3, #8
 800695e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006962:	e048      	b.n	80069f6 <UART_SetConfig+0x5a2>
 8006964:	2310      	movs	r3, #16
 8006966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800696a:	e044      	b.n	80069f6 <UART_SetConfig+0x5a2>
 800696c:	2320      	movs	r3, #32
 800696e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006972:	e040      	b.n	80069f6 <UART_SetConfig+0x5a2>
 8006974:	2340      	movs	r3, #64	; 0x40
 8006976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800697a:	e03c      	b.n	80069f6 <UART_SetConfig+0x5a2>
 800697c:	2380      	movs	r3, #128	; 0x80
 800697e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006982:	e038      	b.n	80069f6 <UART_SetConfig+0x5a2>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a5c      	ldr	r2, [pc, #368]	; (8006afc <UART_SetConfig+0x6a8>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d130      	bne.n	80069f0 <UART_SetConfig+0x59c>
 800698e:	4b58      	ldr	r3, [pc, #352]	; (8006af0 <UART_SetConfig+0x69c>)
 8006990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006992:	f003 0307 	and.w	r3, r3, #7
 8006996:	2b05      	cmp	r3, #5
 8006998:	d826      	bhi.n	80069e8 <UART_SetConfig+0x594>
 800699a:	a201      	add	r2, pc, #4	; (adr r2, 80069a0 <UART_SetConfig+0x54c>)
 800699c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a0:	080069b9 	.word	0x080069b9
 80069a4:	080069c1 	.word	0x080069c1
 80069a8:	080069c9 	.word	0x080069c9
 80069ac:	080069d1 	.word	0x080069d1
 80069b0:	080069d9 	.word	0x080069d9
 80069b4:	080069e1 	.word	0x080069e1
 80069b8:	2302      	movs	r3, #2
 80069ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069be:	e01a      	b.n	80069f6 <UART_SetConfig+0x5a2>
 80069c0:	2304      	movs	r3, #4
 80069c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069c6:	e016      	b.n	80069f6 <UART_SetConfig+0x5a2>
 80069c8:	2308      	movs	r3, #8
 80069ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069ce:	e012      	b.n	80069f6 <UART_SetConfig+0x5a2>
 80069d0:	2310      	movs	r3, #16
 80069d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069d6:	e00e      	b.n	80069f6 <UART_SetConfig+0x5a2>
 80069d8:	2320      	movs	r3, #32
 80069da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069de:	e00a      	b.n	80069f6 <UART_SetConfig+0x5a2>
 80069e0:	2340      	movs	r3, #64	; 0x40
 80069e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069e6:	e006      	b.n	80069f6 <UART_SetConfig+0x5a2>
 80069e8:	2380      	movs	r3, #128	; 0x80
 80069ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069ee:	e002      	b.n	80069f6 <UART_SetConfig+0x5a2>
 80069f0:	2380      	movs	r3, #128	; 0x80
 80069f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a40      	ldr	r2, [pc, #256]	; (8006afc <UART_SetConfig+0x6a8>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	f040 80ef 	bne.w	8006be0 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006a02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006a06:	2b20      	cmp	r3, #32
 8006a08:	dc46      	bgt.n	8006a98 <UART_SetConfig+0x644>
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	f2c0 8081 	blt.w	8006b12 <UART_SetConfig+0x6be>
 8006a10:	3b02      	subs	r3, #2
 8006a12:	2b1e      	cmp	r3, #30
 8006a14:	d87d      	bhi.n	8006b12 <UART_SetConfig+0x6be>
 8006a16:	a201      	add	r2, pc, #4	; (adr r2, 8006a1c <UART_SetConfig+0x5c8>)
 8006a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1c:	08006a9f 	.word	0x08006a9f
 8006a20:	08006b13 	.word	0x08006b13
 8006a24:	08006aa7 	.word	0x08006aa7
 8006a28:	08006b13 	.word	0x08006b13
 8006a2c:	08006b13 	.word	0x08006b13
 8006a30:	08006b13 	.word	0x08006b13
 8006a34:	08006ab7 	.word	0x08006ab7
 8006a38:	08006b13 	.word	0x08006b13
 8006a3c:	08006b13 	.word	0x08006b13
 8006a40:	08006b13 	.word	0x08006b13
 8006a44:	08006b13 	.word	0x08006b13
 8006a48:	08006b13 	.word	0x08006b13
 8006a4c:	08006b13 	.word	0x08006b13
 8006a50:	08006b13 	.word	0x08006b13
 8006a54:	08006ac7 	.word	0x08006ac7
 8006a58:	08006b13 	.word	0x08006b13
 8006a5c:	08006b13 	.word	0x08006b13
 8006a60:	08006b13 	.word	0x08006b13
 8006a64:	08006b13 	.word	0x08006b13
 8006a68:	08006b13 	.word	0x08006b13
 8006a6c:	08006b13 	.word	0x08006b13
 8006a70:	08006b13 	.word	0x08006b13
 8006a74:	08006b13 	.word	0x08006b13
 8006a78:	08006b13 	.word	0x08006b13
 8006a7c:	08006b13 	.word	0x08006b13
 8006a80:	08006b13 	.word	0x08006b13
 8006a84:	08006b13 	.word	0x08006b13
 8006a88:	08006b13 	.word	0x08006b13
 8006a8c:	08006b13 	.word	0x08006b13
 8006a90:	08006b13 	.word	0x08006b13
 8006a94:	08006b05 	.word	0x08006b05
 8006a98:	2b40      	cmp	r3, #64	; 0x40
 8006a9a:	d036      	beq.n	8006b0a <UART_SetConfig+0x6b6>
 8006a9c:	e039      	b.n	8006b12 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006a9e:	f7fe fcf7 	bl	8005490 <HAL_RCCEx_GetD3PCLK1Freq>
 8006aa2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006aa4:	e03b      	b.n	8006b1e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006aa6:	f107 0314 	add.w	r3, r7, #20
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7fe fd06 	bl	80054bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006ab4:	e033      	b.n	8006b1e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ab6:	f107 0308 	add.w	r3, r7, #8
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7fe fe52 	bl	8005764 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006ac4:	e02b      	b.n	8006b1e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ac6:	4b0a      	ldr	r3, [pc, #40]	; (8006af0 <UART_SetConfig+0x69c>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 0320 	and.w	r3, r3, #32
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d009      	beq.n	8006ae6 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006ad2:	4b07      	ldr	r3, [pc, #28]	; (8006af0 <UART_SetConfig+0x69c>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	08db      	lsrs	r3, r3, #3
 8006ad8:	f003 0303 	and.w	r3, r3, #3
 8006adc:	4a08      	ldr	r2, [pc, #32]	; (8006b00 <UART_SetConfig+0x6ac>)
 8006ade:	fa22 f303 	lsr.w	r3, r2, r3
 8006ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006ae4:	e01b      	b.n	8006b1e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8006ae6:	4b06      	ldr	r3, [pc, #24]	; (8006b00 <UART_SetConfig+0x6ac>)
 8006ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006aea:	e018      	b.n	8006b1e <UART_SetConfig+0x6ca>
 8006aec:	40011400 	.word	0x40011400
 8006af0:	58024400 	.word	0x58024400
 8006af4:	40007800 	.word	0x40007800
 8006af8:	40007c00 	.word	0x40007c00
 8006afc:	58000c00 	.word	0x58000c00
 8006b00:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006b04:	4bc4      	ldr	r3, [pc, #784]	; (8006e18 <UART_SetConfig+0x9c4>)
 8006b06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b08:	e009      	b.n	8006b1e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b10:	e005      	b.n	8006b1e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8006b12:	2300      	movs	r3, #0
 8006b14:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006b1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f000 81da 	beq.w	8006eda <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2a:	4abc      	ldr	r2, [pc, #752]	; (8006e1c <UART_SetConfig+0x9c8>)
 8006b2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b30:	461a      	mov	r2, r3
 8006b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b34:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b38:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	685a      	ldr	r2, [r3, #4]
 8006b3e:	4613      	mov	r3, r2
 8006b40:	005b      	lsls	r3, r3, #1
 8006b42:	4413      	add	r3, r2
 8006b44:	6a3a      	ldr	r2, [r7, #32]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d305      	bcc.n	8006b56 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b50:	6a3a      	ldr	r2, [r7, #32]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d903      	bls.n	8006b5e <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006b5c:	e1bd      	b.n	8006eda <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b60:	4618      	mov	r0, r3
 8006b62:	f04f 0100 	mov.w	r1, #0
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6a:	4aac      	ldr	r2, [pc, #688]	; (8006e1c <UART_SetConfig+0x9c8>)
 8006b6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b70:	b29a      	uxth	r2, r3
 8006b72:	f04f 0300 	mov.w	r3, #0
 8006b76:	f7f9 fbaf 	bl	80002d8 <__aeabi_uldivmod>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	4610      	mov	r0, r2
 8006b80:	4619      	mov	r1, r3
 8006b82:	f04f 0200 	mov.w	r2, #0
 8006b86:	f04f 0300 	mov.w	r3, #0
 8006b8a:	020b      	lsls	r3, r1, #8
 8006b8c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006b90:	0202      	lsls	r2, r0, #8
 8006b92:	6879      	ldr	r1, [r7, #4]
 8006b94:	6849      	ldr	r1, [r1, #4]
 8006b96:	0849      	lsrs	r1, r1, #1
 8006b98:	4608      	mov	r0, r1
 8006b9a:	f04f 0100 	mov.w	r1, #0
 8006b9e:	1814      	adds	r4, r2, r0
 8006ba0:	eb43 0501 	adc.w	r5, r3, r1
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	461a      	mov	r2, r3
 8006baa:	f04f 0300 	mov.w	r3, #0
 8006bae:	4620      	mov	r0, r4
 8006bb0:	4629      	mov	r1, r5
 8006bb2:	f7f9 fb91 	bl	80002d8 <__aeabi_uldivmod>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	460b      	mov	r3, r1
 8006bba:	4613      	mov	r3, r2
 8006bbc:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bc4:	d308      	bcc.n	8006bd8 <UART_SetConfig+0x784>
 8006bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bcc:	d204      	bcs.n	8006bd8 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bd4:	60da      	str	r2, [r3, #12]
 8006bd6:	e180      	b.n	8006eda <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006bde:	e17c      	b.n	8006eda <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	69db      	ldr	r3, [r3, #28]
 8006be4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006be8:	f040 80bf 	bne.w	8006d6a <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8006bec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006bf0:	2b20      	cmp	r3, #32
 8006bf2:	dc49      	bgt.n	8006c88 <UART_SetConfig+0x834>
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	db7c      	blt.n	8006cf2 <UART_SetConfig+0x89e>
 8006bf8:	2b20      	cmp	r3, #32
 8006bfa:	d87a      	bhi.n	8006cf2 <UART_SetConfig+0x89e>
 8006bfc:	a201      	add	r2, pc, #4	; (adr r2, 8006c04 <UART_SetConfig+0x7b0>)
 8006bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c02:	bf00      	nop
 8006c04:	08006c8f 	.word	0x08006c8f
 8006c08:	08006c97 	.word	0x08006c97
 8006c0c:	08006cf3 	.word	0x08006cf3
 8006c10:	08006cf3 	.word	0x08006cf3
 8006c14:	08006c9f 	.word	0x08006c9f
 8006c18:	08006cf3 	.word	0x08006cf3
 8006c1c:	08006cf3 	.word	0x08006cf3
 8006c20:	08006cf3 	.word	0x08006cf3
 8006c24:	08006caf 	.word	0x08006caf
 8006c28:	08006cf3 	.word	0x08006cf3
 8006c2c:	08006cf3 	.word	0x08006cf3
 8006c30:	08006cf3 	.word	0x08006cf3
 8006c34:	08006cf3 	.word	0x08006cf3
 8006c38:	08006cf3 	.word	0x08006cf3
 8006c3c:	08006cf3 	.word	0x08006cf3
 8006c40:	08006cf3 	.word	0x08006cf3
 8006c44:	08006cbf 	.word	0x08006cbf
 8006c48:	08006cf3 	.word	0x08006cf3
 8006c4c:	08006cf3 	.word	0x08006cf3
 8006c50:	08006cf3 	.word	0x08006cf3
 8006c54:	08006cf3 	.word	0x08006cf3
 8006c58:	08006cf3 	.word	0x08006cf3
 8006c5c:	08006cf3 	.word	0x08006cf3
 8006c60:	08006cf3 	.word	0x08006cf3
 8006c64:	08006cf3 	.word	0x08006cf3
 8006c68:	08006cf3 	.word	0x08006cf3
 8006c6c:	08006cf3 	.word	0x08006cf3
 8006c70:	08006cf3 	.word	0x08006cf3
 8006c74:	08006cf3 	.word	0x08006cf3
 8006c78:	08006cf3 	.word	0x08006cf3
 8006c7c:	08006cf3 	.word	0x08006cf3
 8006c80:	08006cf3 	.word	0x08006cf3
 8006c84:	08006ce5 	.word	0x08006ce5
 8006c88:	2b40      	cmp	r3, #64	; 0x40
 8006c8a:	d02e      	beq.n	8006cea <UART_SetConfig+0x896>
 8006c8c:	e031      	b.n	8006cf2 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c8e:	f7fd fc63 	bl	8004558 <HAL_RCC_GetPCLK1Freq>
 8006c92:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006c94:	e033      	b.n	8006cfe <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c96:	f7fd fc75 	bl	8004584 <HAL_RCC_GetPCLK2Freq>
 8006c9a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006c9c:	e02f      	b.n	8006cfe <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c9e:	f107 0314 	add.w	r3, r7, #20
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f7fe fc0a 	bl	80054bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006cac:	e027      	b.n	8006cfe <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cae:	f107 0308 	add.w	r3, r7, #8
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f7fe fd56 	bl	8005764 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006cbc:	e01f      	b.n	8006cfe <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006cbe:	4b58      	ldr	r3, [pc, #352]	; (8006e20 <UART_SetConfig+0x9cc>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 0320 	and.w	r3, r3, #32
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d009      	beq.n	8006cde <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006cca:	4b55      	ldr	r3, [pc, #340]	; (8006e20 <UART_SetConfig+0x9cc>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	08db      	lsrs	r3, r3, #3
 8006cd0:	f003 0303 	and.w	r3, r3, #3
 8006cd4:	4a53      	ldr	r2, [pc, #332]	; (8006e24 <UART_SetConfig+0x9d0>)
 8006cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8006cda:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006cdc:	e00f      	b.n	8006cfe <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8006cde:	4b51      	ldr	r3, [pc, #324]	; (8006e24 <UART_SetConfig+0x9d0>)
 8006ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006ce2:	e00c      	b.n	8006cfe <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006ce4:	4b4c      	ldr	r3, [pc, #304]	; (8006e18 <UART_SetConfig+0x9c4>)
 8006ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006ce8:	e009      	b.n	8006cfe <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006cf0:	e005      	b.n	8006cfe <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006cfc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f000 80ea 	beq.w	8006eda <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0a:	4a44      	ldr	r2, [pc, #272]	; (8006e1c <UART_SetConfig+0x9c8>)
 8006d0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d10:	461a      	mov	r2, r3
 8006d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d14:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d18:	005a      	lsls	r2, r3, #1
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	085b      	lsrs	r3, r3, #1
 8006d20:	441a      	add	r2, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d30:	2b0f      	cmp	r3, #15
 8006d32:	d916      	bls.n	8006d62 <UART_SetConfig+0x90e>
 8006d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d3a:	d212      	bcs.n	8006d62 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	f023 030f 	bic.w	r3, r3, #15
 8006d44:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d48:	085b      	lsrs	r3, r3, #1
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	f003 0307 	and.w	r3, r3, #7
 8006d50:	b29a      	uxth	r2, r3
 8006d52:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006d54:	4313      	orrs	r3, r2
 8006d56:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006d5e:	60da      	str	r2, [r3, #12]
 8006d60:	e0bb      	b.n	8006eda <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006d68:	e0b7      	b.n	8006eda <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d6a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006d6e:	2b20      	cmp	r3, #32
 8006d70:	dc4a      	bgt.n	8006e08 <UART_SetConfig+0x9b4>
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	f2c0 8086 	blt.w	8006e84 <UART_SetConfig+0xa30>
 8006d78:	2b20      	cmp	r3, #32
 8006d7a:	f200 8083 	bhi.w	8006e84 <UART_SetConfig+0xa30>
 8006d7e:	a201      	add	r2, pc, #4	; (adr r2, 8006d84 <UART_SetConfig+0x930>)
 8006d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d84:	08006e0f 	.word	0x08006e0f
 8006d88:	08006e29 	.word	0x08006e29
 8006d8c:	08006e85 	.word	0x08006e85
 8006d90:	08006e85 	.word	0x08006e85
 8006d94:	08006e31 	.word	0x08006e31
 8006d98:	08006e85 	.word	0x08006e85
 8006d9c:	08006e85 	.word	0x08006e85
 8006da0:	08006e85 	.word	0x08006e85
 8006da4:	08006e41 	.word	0x08006e41
 8006da8:	08006e85 	.word	0x08006e85
 8006dac:	08006e85 	.word	0x08006e85
 8006db0:	08006e85 	.word	0x08006e85
 8006db4:	08006e85 	.word	0x08006e85
 8006db8:	08006e85 	.word	0x08006e85
 8006dbc:	08006e85 	.word	0x08006e85
 8006dc0:	08006e85 	.word	0x08006e85
 8006dc4:	08006e51 	.word	0x08006e51
 8006dc8:	08006e85 	.word	0x08006e85
 8006dcc:	08006e85 	.word	0x08006e85
 8006dd0:	08006e85 	.word	0x08006e85
 8006dd4:	08006e85 	.word	0x08006e85
 8006dd8:	08006e85 	.word	0x08006e85
 8006ddc:	08006e85 	.word	0x08006e85
 8006de0:	08006e85 	.word	0x08006e85
 8006de4:	08006e85 	.word	0x08006e85
 8006de8:	08006e85 	.word	0x08006e85
 8006dec:	08006e85 	.word	0x08006e85
 8006df0:	08006e85 	.word	0x08006e85
 8006df4:	08006e85 	.word	0x08006e85
 8006df8:	08006e85 	.word	0x08006e85
 8006dfc:	08006e85 	.word	0x08006e85
 8006e00:	08006e85 	.word	0x08006e85
 8006e04:	08006e77 	.word	0x08006e77
 8006e08:	2b40      	cmp	r3, #64	; 0x40
 8006e0a:	d037      	beq.n	8006e7c <UART_SetConfig+0xa28>
 8006e0c:	e03a      	b.n	8006e84 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e0e:	f7fd fba3 	bl	8004558 <HAL_RCC_GetPCLK1Freq>
 8006e12:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006e14:	e03c      	b.n	8006e90 <UART_SetConfig+0xa3c>
 8006e16:	bf00      	nop
 8006e18:	003d0900 	.word	0x003d0900
 8006e1c:	08007f3c 	.word	0x08007f3c
 8006e20:	58024400 	.word	0x58024400
 8006e24:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e28:	f7fd fbac 	bl	8004584 <HAL_RCC_GetPCLK2Freq>
 8006e2c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006e2e:	e02f      	b.n	8006e90 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e30:	f107 0314 	add.w	r3, r7, #20
 8006e34:	4618      	mov	r0, r3
 8006e36:	f7fe fb41 	bl	80054bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e3e:	e027      	b.n	8006e90 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e40:	f107 0308 	add.w	r3, r7, #8
 8006e44:	4618      	mov	r0, r3
 8006e46:	f7fe fc8d 	bl	8005764 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e4e:	e01f      	b.n	8006e90 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e50:	4b2c      	ldr	r3, [pc, #176]	; (8006f04 <UART_SetConfig+0xab0>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 0320 	and.w	r3, r3, #32
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d009      	beq.n	8006e70 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006e5c:	4b29      	ldr	r3, [pc, #164]	; (8006f04 <UART_SetConfig+0xab0>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	08db      	lsrs	r3, r3, #3
 8006e62:	f003 0303 	and.w	r3, r3, #3
 8006e66:	4a28      	ldr	r2, [pc, #160]	; (8006f08 <UART_SetConfig+0xab4>)
 8006e68:	fa22 f303 	lsr.w	r3, r2, r3
 8006e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006e6e:	e00f      	b.n	8006e90 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8006e70:	4b25      	ldr	r3, [pc, #148]	; (8006f08 <UART_SetConfig+0xab4>)
 8006e72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e74:	e00c      	b.n	8006e90 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006e76:	4b25      	ldr	r3, [pc, #148]	; (8006f0c <UART_SetConfig+0xab8>)
 8006e78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e7a:	e009      	b.n	8006e90 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e82:	e005      	b.n	8006e90 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8006e84:	2300      	movs	r3, #0
 8006e86:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006e8e:	bf00      	nop
    }

    if (pclk != 0U)
 8006e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d021      	beq.n	8006eda <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9a:	4a1d      	ldr	r2, [pc, #116]	; (8006f10 <UART_SetConfig+0xabc>)
 8006e9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea4:	fbb3 f2f2 	udiv	r2, r3, r2
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	085b      	lsrs	r3, r3, #1
 8006eae:	441a      	add	r2, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ebe:	2b0f      	cmp	r3, #15
 8006ec0:	d908      	bls.n	8006ed4 <UART_SetConfig+0xa80>
 8006ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ec8:	d204      	bcs.n	8006ed4 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ed0:	60da      	str	r2, [r3, #12]
 8006ed2:	e002      	b.n	8006eda <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006ef6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3738      	adds	r7, #56	; 0x38
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bdb0      	pop	{r4, r5, r7, pc}
 8006f02:	bf00      	nop
 8006f04:	58024400 	.word	0x58024400
 8006f08:	03d09000 	.word	0x03d09000
 8006f0c:	003d0900 	.word	0x003d0900
 8006f10:	08007f3c 	.word	0x08007f3c

08006f14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f20:	f003 0301 	and.w	r3, r3, #1
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d00a      	beq.n	8006f3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	430a      	orrs	r2, r1
 8006f3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f42:	f003 0302 	and.w	r3, r3, #2
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d00a      	beq.n	8006f60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	430a      	orrs	r2, r1
 8006f5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f64:	f003 0304 	and.w	r3, r3, #4
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d00a      	beq.n	8006f82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	430a      	orrs	r2, r1
 8006f80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f86:	f003 0308 	and.w	r3, r3, #8
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00a      	beq.n	8006fa4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	430a      	orrs	r2, r1
 8006fa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fa8:	f003 0310 	and.w	r3, r3, #16
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d00a      	beq.n	8006fc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	430a      	orrs	r2, r1
 8006fc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fca:	f003 0320 	and.w	r3, r3, #32
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00a      	beq.n	8006fe8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	430a      	orrs	r2, r1
 8006fe6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d01a      	beq.n	800702a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	430a      	orrs	r2, r1
 8007008:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800700e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007012:	d10a      	bne.n	800702a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	430a      	orrs	r2, r1
 8007028:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800702e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00a      	beq.n	800704c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	430a      	orrs	r2, r1
 800704a:	605a      	str	r2, [r3, #4]
  }
}
 800704c:	bf00      	nop
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b086      	sub	sp, #24
 800705c:	af02      	add	r7, sp, #8
 800705e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007068:	f7fa fc26 	bl	80018b8 <HAL_GetTick>
 800706c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 0308 	and.w	r3, r3, #8
 8007078:	2b08      	cmp	r3, #8
 800707a:	d10e      	bne.n	800709a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800707c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007080:	9300      	str	r3, [sp, #0]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2200      	movs	r2, #0
 8007086:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 f82f 	bl	80070ee <UART_WaitOnFlagUntilTimeout>
 8007090:	4603      	mov	r3, r0
 8007092:	2b00      	cmp	r3, #0
 8007094:	d001      	beq.n	800709a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007096:	2303      	movs	r3, #3
 8007098:	e025      	b.n	80070e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 0304 	and.w	r3, r3, #4
 80070a4:	2b04      	cmp	r3, #4
 80070a6:	d10e      	bne.n	80070c6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070ac:	9300      	str	r3, [sp, #0]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2200      	movs	r2, #0
 80070b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 f819 	bl	80070ee <UART_WaitOnFlagUntilTimeout>
 80070bc:	4603      	mov	r3, r0
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d001      	beq.n	80070c6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070c2:	2303      	movs	r3, #3
 80070c4:	e00f      	b.n	80070e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2220      	movs	r2, #32
 80070ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2220      	movs	r2, #32
 80070d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3710      	adds	r7, #16
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b084      	sub	sp, #16
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	60f8      	str	r0, [r7, #12]
 80070f6:	60b9      	str	r1, [r7, #8]
 80070f8:	603b      	str	r3, [r7, #0]
 80070fa:	4613      	mov	r3, r2
 80070fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070fe:	e062      	b.n	80071c6 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007106:	d05e      	beq.n	80071c6 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007108:	f7fa fbd6 	bl	80018b8 <HAL_GetTick>
 800710c:	4602      	mov	r2, r0
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	1ad3      	subs	r3, r2, r3
 8007112:	69ba      	ldr	r2, [r7, #24]
 8007114:	429a      	cmp	r2, r3
 8007116:	d302      	bcc.n	800711e <UART_WaitOnFlagUntilTimeout+0x30>
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d11d      	bne.n	800715a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800712c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	689a      	ldr	r2, [r3, #8]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f022 0201 	bic.w	r2, r2, #1
 800713c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2220      	movs	r2, #32
 8007142:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2220      	movs	r2, #32
 800714a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007156:	2303      	movs	r3, #3
 8007158:	e045      	b.n	80071e6 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 0304 	and.w	r3, r3, #4
 8007164:	2b00      	cmp	r3, #0
 8007166:	d02e      	beq.n	80071c6 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	69db      	ldr	r3, [r3, #28]
 800716e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007172:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007176:	d126      	bne.n	80071c6 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007180:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007190:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	689a      	ldr	r2, [r3, #8]
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f022 0201 	bic.w	r2, r2, #1
 80071a0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2220      	movs	r2, #32
 80071a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2220      	movs	r2, #32
 80071ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2220      	movs	r2, #32
 80071b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2200      	movs	r2, #0
 80071be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80071c2:	2303      	movs	r3, #3
 80071c4:	e00f      	b.n	80071e6 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	69da      	ldr	r2, [r3, #28]
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	4013      	ands	r3, r2
 80071d0:	68ba      	ldr	r2, [r7, #8]
 80071d2:	429a      	cmp	r2, r3
 80071d4:	bf0c      	ite	eq
 80071d6:	2301      	moveq	r3, #1
 80071d8:	2300      	movne	r3, #0
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	461a      	mov	r2, r3
 80071de:	79fb      	ldrb	r3, [r7, #7]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d08d      	beq.n	8007100 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
	...

080071f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007206:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	6899      	ldr	r1, [r3, #8]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	4b0f      	ldr	r3, [pc, #60]	; (8007250 <UART_EndRxTransfer+0x60>)
 8007214:	400b      	ands	r3, r1
 8007216:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800721c:	2b01      	cmp	r3, #1
 800721e:	d107      	bne.n	8007230 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f022 0210 	bic.w	r2, r2, #16
 800722e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2220      	movs	r2, #32
 8007234:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007244:	bf00      	nop
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr
 8007250:	effffffe 	.word	0xeffffffe

08007254 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007260:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2200      	movs	r2, #0
 8007266:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2200      	movs	r2, #0
 800726e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007272:	68f8      	ldr	r0, [r7, #12]
 8007274:	f7ff f8d8 	bl	8006428 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007278:	bf00      	nop
 800727a:	3710      	adds	r7, #16
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007296:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2220      	movs	r2, #32
 800729c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f7ff f8b4 	bl	8006414 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072ac:	bf00      	nop
 80072ae:	3708      	adds	r7, #8
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80072bc:	bf00      	nop
 80072be:	370c      	adds	r7, #12
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80072d0:	bf00      	nop
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80072e4:	bf00      	nop
 80072e6:	370c      	adds	r7, #12
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b085      	sub	sp, #20
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d101      	bne.n	8007306 <HAL_UARTEx_DisableFifoMode+0x16>
 8007302:	2302      	movs	r3, #2
 8007304:	e027      	b.n	8007356 <HAL_UARTEx_DisableFifoMode+0x66>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2201      	movs	r2, #1
 800730a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2224      	movs	r2, #36	; 0x24
 8007312:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f022 0201 	bic.w	r2, r2, #1
 800732c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007334:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	68fa      	ldr	r2, [r7, #12]
 8007342:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2220      	movs	r2, #32
 8007348:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3714      	adds	r7, #20
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr

08007362 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007362:	b580      	push	{r7, lr}
 8007364:	b084      	sub	sp, #16
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
 800736a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007372:	2b01      	cmp	r3, #1
 8007374:	d101      	bne.n	800737a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007376:	2302      	movs	r3, #2
 8007378:	e02d      	b.n	80073d6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2201      	movs	r2, #1
 800737e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2224      	movs	r2, #36	; 0x24
 8007386:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f022 0201 	bic.w	r2, r2, #1
 80073a0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	683a      	ldr	r2, [r7, #0]
 80073b2:	430a      	orrs	r2, r1
 80073b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 f850 	bl	800745c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68fa      	ldr	r2, [r7, #12]
 80073c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2220      	movs	r2, #32
 80073c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3710      	adds	r7, #16
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}

080073de <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80073de:	b580      	push	{r7, lr}
 80073e0:	b084      	sub	sp, #16
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
 80073e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d101      	bne.n	80073f6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80073f2:	2302      	movs	r3, #2
 80073f4:	e02d      	b.n	8007452 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2224      	movs	r2, #36	; 0x24
 8007402:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f022 0201 	bic.w	r2, r2, #1
 800741c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	683a      	ldr	r2, [r7, #0]
 800742e:	430a      	orrs	r2, r1
 8007430:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 f812 	bl	800745c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	68fa      	ldr	r2, [r7, #12]
 800743e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2220      	movs	r2, #32
 8007444:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007450:	2300      	movs	r3, #0
}
 8007452:	4618      	mov	r0, r3
 8007454:	3710      	adds	r7, #16
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
	...

0800745c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800745c:	b480      	push	{r7}
 800745e:	b085      	sub	sp, #20
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007468:	2b00      	cmp	r3, #0
 800746a:	d108      	bne.n	800747e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800747c:	e031      	b.n	80074e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800747e:	2310      	movs	r3, #16
 8007480:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007482:	2310      	movs	r3, #16
 8007484:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	0e5b      	lsrs	r3, r3, #25
 800748e:	b2db      	uxtb	r3, r3
 8007490:	f003 0307 	and.w	r3, r3, #7
 8007494:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	0f5b      	lsrs	r3, r3, #29
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	f003 0307 	and.w	r3, r3, #7
 80074a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80074a6:	7bbb      	ldrb	r3, [r7, #14]
 80074a8:	7b3a      	ldrb	r2, [r7, #12]
 80074aa:	4911      	ldr	r1, [pc, #68]	; (80074f0 <UARTEx_SetNbDataToProcess+0x94>)
 80074ac:	5c8a      	ldrb	r2, [r1, r2]
 80074ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80074b2:	7b3a      	ldrb	r2, [r7, #12]
 80074b4:	490f      	ldr	r1, [pc, #60]	; (80074f4 <UARTEx_SetNbDataToProcess+0x98>)
 80074b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80074b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80074bc:	b29a      	uxth	r2, r3
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80074c4:	7bfb      	ldrb	r3, [r7, #15]
 80074c6:	7b7a      	ldrb	r2, [r7, #13]
 80074c8:	4909      	ldr	r1, [pc, #36]	; (80074f0 <UARTEx_SetNbDataToProcess+0x94>)
 80074ca:	5c8a      	ldrb	r2, [r1, r2]
 80074cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80074d0:	7b7a      	ldrb	r2, [r7, #13]
 80074d2:	4908      	ldr	r1, [pc, #32]	; (80074f4 <UARTEx_SetNbDataToProcess+0x98>)
 80074d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80074d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80074da:	b29a      	uxth	r2, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80074e2:	bf00      	nop
 80074e4:	3714      	adds	r7, #20
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr
 80074ee:	bf00      	nop
 80074f0:	08007f54 	.word	0x08007f54
 80074f4:	08007f5c 	.word	0x08007f5c

080074f8 <__errno>:
 80074f8:	4b01      	ldr	r3, [pc, #4]	; (8007500 <__errno+0x8>)
 80074fa:	6818      	ldr	r0, [r3, #0]
 80074fc:	4770      	bx	lr
 80074fe:	bf00      	nop
 8007500:	24000010 	.word	0x24000010

08007504 <__libc_init_array>:
 8007504:	b570      	push	{r4, r5, r6, lr}
 8007506:	4d0d      	ldr	r5, [pc, #52]	; (800753c <__libc_init_array+0x38>)
 8007508:	4c0d      	ldr	r4, [pc, #52]	; (8007540 <__libc_init_array+0x3c>)
 800750a:	1b64      	subs	r4, r4, r5
 800750c:	10a4      	asrs	r4, r4, #2
 800750e:	2600      	movs	r6, #0
 8007510:	42a6      	cmp	r6, r4
 8007512:	d109      	bne.n	8007528 <__libc_init_array+0x24>
 8007514:	4d0b      	ldr	r5, [pc, #44]	; (8007544 <__libc_init_array+0x40>)
 8007516:	4c0c      	ldr	r4, [pc, #48]	; (8007548 <__libc_init_array+0x44>)
 8007518:	f000 fcf4 	bl	8007f04 <_init>
 800751c:	1b64      	subs	r4, r4, r5
 800751e:	10a4      	asrs	r4, r4, #2
 8007520:	2600      	movs	r6, #0
 8007522:	42a6      	cmp	r6, r4
 8007524:	d105      	bne.n	8007532 <__libc_init_array+0x2e>
 8007526:	bd70      	pop	{r4, r5, r6, pc}
 8007528:	f855 3b04 	ldr.w	r3, [r5], #4
 800752c:	4798      	blx	r3
 800752e:	3601      	adds	r6, #1
 8007530:	e7ee      	b.n	8007510 <__libc_init_array+0xc>
 8007532:	f855 3b04 	ldr.w	r3, [r5], #4
 8007536:	4798      	blx	r3
 8007538:	3601      	adds	r6, #1
 800753a:	e7f2      	b.n	8007522 <__libc_init_array+0x1e>
 800753c:	08007fd0 	.word	0x08007fd0
 8007540:	08007fd0 	.word	0x08007fd0
 8007544:	08007fd0 	.word	0x08007fd0
 8007548:	08007fd4 	.word	0x08007fd4

0800754c <memcmp>:
 800754c:	b530      	push	{r4, r5, lr}
 800754e:	3901      	subs	r1, #1
 8007550:	2400      	movs	r4, #0
 8007552:	42a2      	cmp	r2, r4
 8007554:	d101      	bne.n	800755a <memcmp+0xe>
 8007556:	2000      	movs	r0, #0
 8007558:	e005      	b.n	8007566 <memcmp+0x1a>
 800755a:	5d03      	ldrb	r3, [r0, r4]
 800755c:	3401      	adds	r4, #1
 800755e:	5d0d      	ldrb	r5, [r1, r4]
 8007560:	42ab      	cmp	r3, r5
 8007562:	d0f6      	beq.n	8007552 <memcmp+0x6>
 8007564:	1b58      	subs	r0, r3, r5
 8007566:	bd30      	pop	{r4, r5, pc}

08007568 <memset>:
 8007568:	4402      	add	r2, r0
 800756a:	4603      	mov	r3, r0
 800756c:	4293      	cmp	r3, r2
 800756e:	d100      	bne.n	8007572 <memset+0xa>
 8007570:	4770      	bx	lr
 8007572:	f803 1b01 	strb.w	r1, [r3], #1
 8007576:	e7f9      	b.n	800756c <memset+0x4>

08007578 <_puts_r>:
 8007578:	b570      	push	{r4, r5, r6, lr}
 800757a:	460e      	mov	r6, r1
 800757c:	4605      	mov	r5, r0
 800757e:	b118      	cbz	r0, 8007588 <_puts_r+0x10>
 8007580:	6983      	ldr	r3, [r0, #24]
 8007582:	b90b      	cbnz	r3, 8007588 <_puts_r+0x10>
 8007584:	f000 fa48 	bl	8007a18 <__sinit>
 8007588:	69ab      	ldr	r3, [r5, #24]
 800758a:	68ac      	ldr	r4, [r5, #8]
 800758c:	b913      	cbnz	r3, 8007594 <_puts_r+0x1c>
 800758e:	4628      	mov	r0, r5
 8007590:	f000 fa42 	bl	8007a18 <__sinit>
 8007594:	4b2c      	ldr	r3, [pc, #176]	; (8007648 <_puts_r+0xd0>)
 8007596:	429c      	cmp	r4, r3
 8007598:	d120      	bne.n	80075dc <_puts_r+0x64>
 800759a:	686c      	ldr	r4, [r5, #4]
 800759c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800759e:	07db      	lsls	r3, r3, #31
 80075a0:	d405      	bmi.n	80075ae <_puts_r+0x36>
 80075a2:	89a3      	ldrh	r3, [r4, #12]
 80075a4:	0598      	lsls	r0, r3, #22
 80075a6:	d402      	bmi.n	80075ae <_puts_r+0x36>
 80075a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075aa:	f000 fad3 	bl	8007b54 <__retarget_lock_acquire_recursive>
 80075ae:	89a3      	ldrh	r3, [r4, #12]
 80075b0:	0719      	lsls	r1, r3, #28
 80075b2:	d51d      	bpl.n	80075f0 <_puts_r+0x78>
 80075b4:	6923      	ldr	r3, [r4, #16]
 80075b6:	b1db      	cbz	r3, 80075f0 <_puts_r+0x78>
 80075b8:	3e01      	subs	r6, #1
 80075ba:	68a3      	ldr	r3, [r4, #8]
 80075bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80075c0:	3b01      	subs	r3, #1
 80075c2:	60a3      	str	r3, [r4, #8]
 80075c4:	bb39      	cbnz	r1, 8007616 <_puts_r+0x9e>
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	da38      	bge.n	800763c <_puts_r+0xc4>
 80075ca:	4622      	mov	r2, r4
 80075cc:	210a      	movs	r1, #10
 80075ce:	4628      	mov	r0, r5
 80075d0:	f000 f848 	bl	8007664 <__swbuf_r>
 80075d4:	3001      	adds	r0, #1
 80075d6:	d011      	beq.n	80075fc <_puts_r+0x84>
 80075d8:	250a      	movs	r5, #10
 80075da:	e011      	b.n	8007600 <_puts_r+0x88>
 80075dc:	4b1b      	ldr	r3, [pc, #108]	; (800764c <_puts_r+0xd4>)
 80075de:	429c      	cmp	r4, r3
 80075e0:	d101      	bne.n	80075e6 <_puts_r+0x6e>
 80075e2:	68ac      	ldr	r4, [r5, #8]
 80075e4:	e7da      	b.n	800759c <_puts_r+0x24>
 80075e6:	4b1a      	ldr	r3, [pc, #104]	; (8007650 <_puts_r+0xd8>)
 80075e8:	429c      	cmp	r4, r3
 80075ea:	bf08      	it	eq
 80075ec:	68ec      	ldreq	r4, [r5, #12]
 80075ee:	e7d5      	b.n	800759c <_puts_r+0x24>
 80075f0:	4621      	mov	r1, r4
 80075f2:	4628      	mov	r0, r5
 80075f4:	f000 f888 	bl	8007708 <__swsetup_r>
 80075f8:	2800      	cmp	r0, #0
 80075fa:	d0dd      	beq.n	80075b8 <_puts_r+0x40>
 80075fc:	f04f 35ff 	mov.w	r5, #4294967295
 8007600:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007602:	07da      	lsls	r2, r3, #31
 8007604:	d405      	bmi.n	8007612 <_puts_r+0x9a>
 8007606:	89a3      	ldrh	r3, [r4, #12]
 8007608:	059b      	lsls	r3, r3, #22
 800760a:	d402      	bmi.n	8007612 <_puts_r+0x9a>
 800760c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800760e:	f000 faa2 	bl	8007b56 <__retarget_lock_release_recursive>
 8007612:	4628      	mov	r0, r5
 8007614:	bd70      	pop	{r4, r5, r6, pc}
 8007616:	2b00      	cmp	r3, #0
 8007618:	da04      	bge.n	8007624 <_puts_r+0xac>
 800761a:	69a2      	ldr	r2, [r4, #24]
 800761c:	429a      	cmp	r2, r3
 800761e:	dc06      	bgt.n	800762e <_puts_r+0xb6>
 8007620:	290a      	cmp	r1, #10
 8007622:	d004      	beq.n	800762e <_puts_r+0xb6>
 8007624:	6823      	ldr	r3, [r4, #0]
 8007626:	1c5a      	adds	r2, r3, #1
 8007628:	6022      	str	r2, [r4, #0]
 800762a:	7019      	strb	r1, [r3, #0]
 800762c:	e7c5      	b.n	80075ba <_puts_r+0x42>
 800762e:	4622      	mov	r2, r4
 8007630:	4628      	mov	r0, r5
 8007632:	f000 f817 	bl	8007664 <__swbuf_r>
 8007636:	3001      	adds	r0, #1
 8007638:	d1bf      	bne.n	80075ba <_puts_r+0x42>
 800763a:	e7df      	b.n	80075fc <_puts_r+0x84>
 800763c:	6823      	ldr	r3, [r4, #0]
 800763e:	250a      	movs	r5, #10
 8007640:	1c5a      	adds	r2, r3, #1
 8007642:	6022      	str	r2, [r4, #0]
 8007644:	701d      	strb	r5, [r3, #0]
 8007646:	e7db      	b.n	8007600 <_puts_r+0x88>
 8007648:	08007f88 	.word	0x08007f88
 800764c:	08007fa8 	.word	0x08007fa8
 8007650:	08007f68 	.word	0x08007f68

08007654 <puts>:
 8007654:	4b02      	ldr	r3, [pc, #8]	; (8007660 <puts+0xc>)
 8007656:	4601      	mov	r1, r0
 8007658:	6818      	ldr	r0, [r3, #0]
 800765a:	f7ff bf8d 	b.w	8007578 <_puts_r>
 800765e:	bf00      	nop
 8007660:	24000010 	.word	0x24000010

08007664 <__swbuf_r>:
 8007664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007666:	460e      	mov	r6, r1
 8007668:	4614      	mov	r4, r2
 800766a:	4605      	mov	r5, r0
 800766c:	b118      	cbz	r0, 8007676 <__swbuf_r+0x12>
 800766e:	6983      	ldr	r3, [r0, #24]
 8007670:	b90b      	cbnz	r3, 8007676 <__swbuf_r+0x12>
 8007672:	f000 f9d1 	bl	8007a18 <__sinit>
 8007676:	4b21      	ldr	r3, [pc, #132]	; (80076fc <__swbuf_r+0x98>)
 8007678:	429c      	cmp	r4, r3
 800767a:	d12b      	bne.n	80076d4 <__swbuf_r+0x70>
 800767c:	686c      	ldr	r4, [r5, #4]
 800767e:	69a3      	ldr	r3, [r4, #24]
 8007680:	60a3      	str	r3, [r4, #8]
 8007682:	89a3      	ldrh	r3, [r4, #12]
 8007684:	071a      	lsls	r2, r3, #28
 8007686:	d52f      	bpl.n	80076e8 <__swbuf_r+0x84>
 8007688:	6923      	ldr	r3, [r4, #16]
 800768a:	b36b      	cbz	r3, 80076e8 <__swbuf_r+0x84>
 800768c:	6923      	ldr	r3, [r4, #16]
 800768e:	6820      	ldr	r0, [r4, #0]
 8007690:	1ac0      	subs	r0, r0, r3
 8007692:	6963      	ldr	r3, [r4, #20]
 8007694:	b2f6      	uxtb	r6, r6
 8007696:	4283      	cmp	r3, r0
 8007698:	4637      	mov	r7, r6
 800769a:	dc04      	bgt.n	80076a6 <__swbuf_r+0x42>
 800769c:	4621      	mov	r1, r4
 800769e:	4628      	mov	r0, r5
 80076a0:	f000 f926 	bl	80078f0 <_fflush_r>
 80076a4:	bb30      	cbnz	r0, 80076f4 <__swbuf_r+0x90>
 80076a6:	68a3      	ldr	r3, [r4, #8]
 80076a8:	3b01      	subs	r3, #1
 80076aa:	60a3      	str	r3, [r4, #8]
 80076ac:	6823      	ldr	r3, [r4, #0]
 80076ae:	1c5a      	adds	r2, r3, #1
 80076b0:	6022      	str	r2, [r4, #0]
 80076b2:	701e      	strb	r6, [r3, #0]
 80076b4:	6963      	ldr	r3, [r4, #20]
 80076b6:	3001      	adds	r0, #1
 80076b8:	4283      	cmp	r3, r0
 80076ba:	d004      	beq.n	80076c6 <__swbuf_r+0x62>
 80076bc:	89a3      	ldrh	r3, [r4, #12]
 80076be:	07db      	lsls	r3, r3, #31
 80076c0:	d506      	bpl.n	80076d0 <__swbuf_r+0x6c>
 80076c2:	2e0a      	cmp	r6, #10
 80076c4:	d104      	bne.n	80076d0 <__swbuf_r+0x6c>
 80076c6:	4621      	mov	r1, r4
 80076c8:	4628      	mov	r0, r5
 80076ca:	f000 f911 	bl	80078f0 <_fflush_r>
 80076ce:	b988      	cbnz	r0, 80076f4 <__swbuf_r+0x90>
 80076d0:	4638      	mov	r0, r7
 80076d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076d4:	4b0a      	ldr	r3, [pc, #40]	; (8007700 <__swbuf_r+0x9c>)
 80076d6:	429c      	cmp	r4, r3
 80076d8:	d101      	bne.n	80076de <__swbuf_r+0x7a>
 80076da:	68ac      	ldr	r4, [r5, #8]
 80076dc:	e7cf      	b.n	800767e <__swbuf_r+0x1a>
 80076de:	4b09      	ldr	r3, [pc, #36]	; (8007704 <__swbuf_r+0xa0>)
 80076e0:	429c      	cmp	r4, r3
 80076e2:	bf08      	it	eq
 80076e4:	68ec      	ldreq	r4, [r5, #12]
 80076e6:	e7ca      	b.n	800767e <__swbuf_r+0x1a>
 80076e8:	4621      	mov	r1, r4
 80076ea:	4628      	mov	r0, r5
 80076ec:	f000 f80c 	bl	8007708 <__swsetup_r>
 80076f0:	2800      	cmp	r0, #0
 80076f2:	d0cb      	beq.n	800768c <__swbuf_r+0x28>
 80076f4:	f04f 37ff 	mov.w	r7, #4294967295
 80076f8:	e7ea      	b.n	80076d0 <__swbuf_r+0x6c>
 80076fa:	bf00      	nop
 80076fc:	08007f88 	.word	0x08007f88
 8007700:	08007fa8 	.word	0x08007fa8
 8007704:	08007f68 	.word	0x08007f68

08007708 <__swsetup_r>:
 8007708:	4b32      	ldr	r3, [pc, #200]	; (80077d4 <__swsetup_r+0xcc>)
 800770a:	b570      	push	{r4, r5, r6, lr}
 800770c:	681d      	ldr	r5, [r3, #0]
 800770e:	4606      	mov	r6, r0
 8007710:	460c      	mov	r4, r1
 8007712:	b125      	cbz	r5, 800771e <__swsetup_r+0x16>
 8007714:	69ab      	ldr	r3, [r5, #24]
 8007716:	b913      	cbnz	r3, 800771e <__swsetup_r+0x16>
 8007718:	4628      	mov	r0, r5
 800771a:	f000 f97d 	bl	8007a18 <__sinit>
 800771e:	4b2e      	ldr	r3, [pc, #184]	; (80077d8 <__swsetup_r+0xd0>)
 8007720:	429c      	cmp	r4, r3
 8007722:	d10f      	bne.n	8007744 <__swsetup_r+0x3c>
 8007724:	686c      	ldr	r4, [r5, #4]
 8007726:	89a3      	ldrh	r3, [r4, #12]
 8007728:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800772c:	0719      	lsls	r1, r3, #28
 800772e:	d42c      	bmi.n	800778a <__swsetup_r+0x82>
 8007730:	06dd      	lsls	r5, r3, #27
 8007732:	d411      	bmi.n	8007758 <__swsetup_r+0x50>
 8007734:	2309      	movs	r3, #9
 8007736:	6033      	str	r3, [r6, #0]
 8007738:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800773c:	81a3      	strh	r3, [r4, #12]
 800773e:	f04f 30ff 	mov.w	r0, #4294967295
 8007742:	e03e      	b.n	80077c2 <__swsetup_r+0xba>
 8007744:	4b25      	ldr	r3, [pc, #148]	; (80077dc <__swsetup_r+0xd4>)
 8007746:	429c      	cmp	r4, r3
 8007748:	d101      	bne.n	800774e <__swsetup_r+0x46>
 800774a:	68ac      	ldr	r4, [r5, #8]
 800774c:	e7eb      	b.n	8007726 <__swsetup_r+0x1e>
 800774e:	4b24      	ldr	r3, [pc, #144]	; (80077e0 <__swsetup_r+0xd8>)
 8007750:	429c      	cmp	r4, r3
 8007752:	bf08      	it	eq
 8007754:	68ec      	ldreq	r4, [r5, #12]
 8007756:	e7e6      	b.n	8007726 <__swsetup_r+0x1e>
 8007758:	0758      	lsls	r0, r3, #29
 800775a:	d512      	bpl.n	8007782 <__swsetup_r+0x7a>
 800775c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800775e:	b141      	cbz	r1, 8007772 <__swsetup_r+0x6a>
 8007760:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007764:	4299      	cmp	r1, r3
 8007766:	d002      	beq.n	800776e <__swsetup_r+0x66>
 8007768:	4630      	mov	r0, r6
 800776a:	f000 fa59 	bl	8007c20 <_free_r>
 800776e:	2300      	movs	r3, #0
 8007770:	6363      	str	r3, [r4, #52]	; 0x34
 8007772:	89a3      	ldrh	r3, [r4, #12]
 8007774:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007778:	81a3      	strh	r3, [r4, #12]
 800777a:	2300      	movs	r3, #0
 800777c:	6063      	str	r3, [r4, #4]
 800777e:	6923      	ldr	r3, [r4, #16]
 8007780:	6023      	str	r3, [r4, #0]
 8007782:	89a3      	ldrh	r3, [r4, #12]
 8007784:	f043 0308 	orr.w	r3, r3, #8
 8007788:	81a3      	strh	r3, [r4, #12]
 800778a:	6923      	ldr	r3, [r4, #16]
 800778c:	b94b      	cbnz	r3, 80077a2 <__swsetup_r+0x9a>
 800778e:	89a3      	ldrh	r3, [r4, #12]
 8007790:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007794:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007798:	d003      	beq.n	80077a2 <__swsetup_r+0x9a>
 800779a:	4621      	mov	r1, r4
 800779c:	4630      	mov	r0, r6
 800779e:	f000 f9ff 	bl	8007ba0 <__smakebuf_r>
 80077a2:	89a0      	ldrh	r0, [r4, #12]
 80077a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80077a8:	f010 0301 	ands.w	r3, r0, #1
 80077ac:	d00a      	beq.n	80077c4 <__swsetup_r+0xbc>
 80077ae:	2300      	movs	r3, #0
 80077b0:	60a3      	str	r3, [r4, #8]
 80077b2:	6963      	ldr	r3, [r4, #20]
 80077b4:	425b      	negs	r3, r3
 80077b6:	61a3      	str	r3, [r4, #24]
 80077b8:	6923      	ldr	r3, [r4, #16]
 80077ba:	b943      	cbnz	r3, 80077ce <__swsetup_r+0xc6>
 80077bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80077c0:	d1ba      	bne.n	8007738 <__swsetup_r+0x30>
 80077c2:	bd70      	pop	{r4, r5, r6, pc}
 80077c4:	0781      	lsls	r1, r0, #30
 80077c6:	bf58      	it	pl
 80077c8:	6963      	ldrpl	r3, [r4, #20]
 80077ca:	60a3      	str	r3, [r4, #8]
 80077cc:	e7f4      	b.n	80077b8 <__swsetup_r+0xb0>
 80077ce:	2000      	movs	r0, #0
 80077d0:	e7f7      	b.n	80077c2 <__swsetup_r+0xba>
 80077d2:	bf00      	nop
 80077d4:	24000010 	.word	0x24000010
 80077d8:	08007f88 	.word	0x08007f88
 80077dc:	08007fa8 	.word	0x08007fa8
 80077e0:	08007f68 	.word	0x08007f68

080077e4 <__sflush_r>:
 80077e4:	898a      	ldrh	r2, [r1, #12]
 80077e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077ea:	4605      	mov	r5, r0
 80077ec:	0710      	lsls	r0, r2, #28
 80077ee:	460c      	mov	r4, r1
 80077f0:	d458      	bmi.n	80078a4 <__sflush_r+0xc0>
 80077f2:	684b      	ldr	r3, [r1, #4]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	dc05      	bgt.n	8007804 <__sflush_r+0x20>
 80077f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	dc02      	bgt.n	8007804 <__sflush_r+0x20>
 80077fe:	2000      	movs	r0, #0
 8007800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007804:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007806:	2e00      	cmp	r6, #0
 8007808:	d0f9      	beq.n	80077fe <__sflush_r+0x1a>
 800780a:	2300      	movs	r3, #0
 800780c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007810:	682f      	ldr	r7, [r5, #0]
 8007812:	602b      	str	r3, [r5, #0]
 8007814:	d032      	beq.n	800787c <__sflush_r+0x98>
 8007816:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007818:	89a3      	ldrh	r3, [r4, #12]
 800781a:	075a      	lsls	r2, r3, #29
 800781c:	d505      	bpl.n	800782a <__sflush_r+0x46>
 800781e:	6863      	ldr	r3, [r4, #4]
 8007820:	1ac0      	subs	r0, r0, r3
 8007822:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007824:	b10b      	cbz	r3, 800782a <__sflush_r+0x46>
 8007826:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007828:	1ac0      	subs	r0, r0, r3
 800782a:	2300      	movs	r3, #0
 800782c:	4602      	mov	r2, r0
 800782e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007830:	6a21      	ldr	r1, [r4, #32]
 8007832:	4628      	mov	r0, r5
 8007834:	47b0      	blx	r6
 8007836:	1c43      	adds	r3, r0, #1
 8007838:	89a3      	ldrh	r3, [r4, #12]
 800783a:	d106      	bne.n	800784a <__sflush_r+0x66>
 800783c:	6829      	ldr	r1, [r5, #0]
 800783e:	291d      	cmp	r1, #29
 8007840:	d82c      	bhi.n	800789c <__sflush_r+0xb8>
 8007842:	4a2a      	ldr	r2, [pc, #168]	; (80078ec <__sflush_r+0x108>)
 8007844:	40ca      	lsrs	r2, r1
 8007846:	07d6      	lsls	r6, r2, #31
 8007848:	d528      	bpl.n	800789c <__sflush_r+0xb8>
 800784a:	2200      	movs	r2, #0
 800784c:	6062      	str	r2, [r4, #4]
 800784e:	04d9      	lsls	r1, r3, #19
 8007850:	6922      	ldr	r2, [r4, #16]
 8007852:	6022      	str	r2, [r4, #0]
 8007854:	d504      	bpl.n	8007860 <__sflush_r+0x7c>
 8007856:	1c42      	adds	r2, r0, #1
 8007858:	d101      	bne.n	800785e <__sflush_r+0x7a>
 800785a:	682b      	ldr	r3, [r5, #0]
 800785c:	b903      	cbnz	r3, 8007860 <__sflush_r+0x7c>
 800785e:	6560      	str	r0, [r4, #84]	; 0x54
 8007860:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007862:	602f      	str	r7, [r5, #0]
 8007864:	2900      	cmp	r1, #0
 8007866:	d0ca      	beq.n	80077fe <__sflush_r+0x1a>
 8007868:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800786c:	4299      	cmp	r1, r3
 800786e:	d002      	beq.n	8007876 <__sflush_r+0x92>
 8007870:	4628      	mov	r0, r5
 8007872:	f000 f9d5 	bl	8007c20 <_free_r>
 8007876:	2000      	movs	r0, #0
 8007878:	6360      	str	r0, [r4, #52]	; 0x34
 800787a:	e7c1      	b.n	8007800 <__sflush_r+0x1c>
 800787c:	6a21      	ldr	r1, [r4, #32]
 800787e:	2301      	movs	r3, #1
 8007880:	4628      	mov	r0, r5
 8007882:	47b0      	blx	r6
 8007884:	1c41      	adds	r1, r0, #1
 8007886:	d1c7      	bne.n	8007818 <__sflush_r+0x34>
 8007888:	682b      	ldr	r3, [r5, #0]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d0c4      	beq.n	8007818 <__sflush_r+0x34>
 800788e:	2b1d      	cmp	r3, #29
 8007890:	d001      	beq.n	8007896 <__sflush_r+0xb2>
 8007892:	2b16      	cmp	r3, #22
 8007894:	d101      	bne.n	800789a <__sflush_r+0xb6>
 8007896:	602f      	str	r7, [r5, #0]
 8007898:	e7b1      	b.n	80077fe <__sflush_r+0x1a>
 800789a:	89a3      	ldrh	r3, [r4, #12]
 800789c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078a0:	81a3      	strh	r3, [r4, #12]
 80078a2:	e7ad      	b.n	8007800 <__sflush_r+0x1c>
 80078a4:	690f      	ldr	r7, [r1, #16]
 80078a6:	2f00      	cmp	r7, #0
 80078a8:	d0a9      	beq.n	80077fe <__sflush_r+0x1a>
 80078aa:	0793      	lsls	r3, r2, #30
 80078ac:	680e      	ldr	r6, [r1, #0]
 80078ae:	bf08      	it	eq
 80078b0:	694b      	ldreq	r3, [r1, #20]
 80078b2:	600f      	str	r7, [r1, #0]
 80078b4:	bf18      	it	ne
 80078b6:	2300      	movne	r3, #0
 80078b8:	eba6 0807 	sub.w	r8, r6, r7
 80078bc:	608b      	str	r3, [r1, #8]
 80078be:	f1b8 0f00 	cmp.w	r8, #0
 80078c2:	dd9c      	ble.n	80077fe <__sflush_r+0x1a>
 80078c4:	6a21      	ldr	r1, [r4, #32]
 80078c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80078c8:	4643      	mov	r3, r8
 80078ca:	463a      	mov	r2, r7
 80078cc:	4628      	mov	r0, r5
 80078ce:	47b0      	blx	r6
 80078d0:	2800      	cmp	r0, #0
 80078d2:	dc06      	bgt.n	80078e2 <__sflush_r+0xfe>
 80078d4:	89a3      	ldrh	r3, [r4, #12]
 80078d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078da:	81a3      	strh	r3, [r4, #12]
 80078dc:	f04f 30ff 	mov.w	r0, #4294967295
 80078e0:	e78e      	b.n	8007800 <__sflush_r+0x1c>
 80078e2:	4407      	add	r7, r0
 80078e4:	eba8 0800 	sub.w	r8, r8, r0
 80078e8:	e7e9      	b.n	80078be <__sflush_r+0xda>
 80078ea:	bf00      	nop
 80078ec:	20400001 	.word	0x20400001

080078f0 <_fflush_r>:
 80078f0:	b538      	push	{r3, r4, r5, lr}
 80078f2:	690b      	ldr	r3, [r1, #16]
 80078f4:	4605      	mov	r5, r0
 80078f6:	460c      	mov	r4, r1
 80078f8:	b913      	cbnz	r3, 8007900 <_fflush_r+0x10>
 80078fa:	2500      	movs	r5, #0
 80078fc:	4628      	mov	r0, r5
 80078fe:	bd38      	pop	{r3, r4, r5, pc}
 8007900:	b118      	cbz	r0, 800790a <_fflush_r+0x1a>
 8007902:	6983      	ldr	r3, [r0, #24]
 8007904:	b90b      	cbnz	r3, 800790a <_fflush_r+0x1a>
 8007906:	f000 f887 	bl	8007a18 <__sinit>
 800790a:	4b14      	ldr	r3, [pc, #80]	; (800795c <_fflush_r+0x6c>)
 800790c:	429c      	cmp	r4, r3
 800790e:	d11b      	bne.n	8007948 <_fflush_r+0x58>
 8007910:	686c      	ldr	r4, [r5, #4]
 8007912:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d0ef      	beq.n	80078fa <_fflush_r+0xa>
 800791a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800791c:	07d0      	lsls	r0, r2, #31
 800791e:	d404      	bmi.n	800792a <_fflush_r+0x3a>
 8007920:	0599      	lsls	r1, r3, #22
 8007922:	d402      	bmi.n	800792a <_fflush_r+0x3a>
 8007924:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007926:	f000 f915 	bl	8007b54 <__retarget_lock_acquire_recursive>
 800792a:	4628      	mov	r0, r5
 800792c:	4621      	mov	r1, r4
 800792e:	f7ff ff59 	bl	80077e4 <__sflush_r>
 8007932:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007934:	07da      	lsls	r2, r3, #31
 8007936:	4605      	mov	r5, r0
 8007938:	d4e0      	bmi.n	80078fc <_fflush_r+0xc>
 800793a:	89a3      	ldrh	r3, [r4, #12]
 800793c:	059b      	lsls	r3, r3, #22
 800793e:	d4dd      	bmi.n	80078fc <_fflush_r+0xc>
 8007940:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007942:	f000 f908 	bl	8007b56 <__retarget_lock_release_recursive>
 8007946:	e7d9      	b.n	80078fc <_fflush_r+0xc>
 8007948:	4b05      	ldr	r3, [pc, #20]	; (8007960 <_fflush_r+0x70>)
 800794a:	429c      	cmp	r4, r3
 800794c:	d101      	bne.n	8007952 <_fflush_r+0x62>
 800794e:	68ac      	ldr	r4, [r5, #8]
 8007950:	e7df      	b.n	8007912 <_fflush_r+0x22>
 8007952:	4b04      	ldr	r3, [pc, #16]	; (8007964 <_fflush_r+0x74>)
 8007954:	429c      	cmp	r4, r3
 8007956:	bf08      	it	eq
 8007958:	68ec      	ldreq	r4, [r5, #12]
 800795a:	e7da      	b.n	8007912 <_fflush_r+0x22>
 800795c:	08007f88 	.word	0x08007f88
 8007960:	08007fa8 	.word	0x08007fa8
 8007964:	08007f68 	.word	0x08007f68

08007968 <std>:
 8007968:	2300      	movs	r3, #0
 800796a:	b510      	push	{r4, lr}
 800796c:	4604      	mov	r4, r0
 800796e:	e9c0 3300 	strd	r3, r3, [r0]
 8007972:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007976:	6083      	str	r3, [r0, #8]
 8007978:	8181      	strh	r1, [r0, #12]
 800797a:	6643      	str	r3, [r0, #100]	; 0x64
 800797c:	81c2      	strh	r2, [r0, #14]
 800797e:	6183      	str	r3, [r0, #24]
 8007980:	4619      	mov	r1, r3
 8007982:	2208      	movs	r2, #8
 8007984:	305c      	adds	r0, #92	; 0x5c
 8007986:	f7ff fdef 	bl	8007568 <memset>
 800798a:	4b05      	ldr	r3, [pc, #20]	; (80079a0 <std+0x38>)
 800798c:	6263      	str	r3, [r4, #36]	; 0x24
 800798e:	4b05      	ldr	r3, [pc, #20]	; (80079a4 <std+0x3c>)
 8007990:	62a3      	str	r3, [r4, #40]	; 0x28
 8007992:	4b05      	ldr	r3, [pc, #20]	; (80079a8 <std+0x40>)
 8007994:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007996:	4b05      	ldr	r3, [pc, #20]	; (80079ac <std+0x44>)
 8007998:	6224      	str	r4, [r4, #32]
 800799a:	6323      	str	r3, [r4, #48]	; 0x30
 800799c:	bd10      	pop	{r4, pc}
 800799e:	bf00      	nop
 80079a0:	08007d95 	.word	0x08007d95
 80079a4:	08007db7 	.word	0x08007db7
 80079a8:	08007def 	.word	0x08007def
 80079ac:	08007e13 	.word	0x08007e13

080079b0 <_cleanup_r>:
 80079b0:	4901      	ldr	r1, [pc, #4]	; (80079b8 <_cleanup_r+0x8>)
 80079b2:	f000 b8af 	b.w	8007b14 <_fwalk_reent>
 80079b6:	bf00      	nop
 80079b8:	080078f1 	.word	0x080078f1

080079bc <__sfmoreglue>:
 80079bc:	b570      	push	{r4, r5, r6, lr}
 80079be:	1e4a      	subs	r2, r1, #1
 80079c0:	2568      	movs	r5, #104	; 0x68
 80079c2:	4355      	muls	r5, r2
 80079c4:	460e      	mov	r6, r1
 80079c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80079ca:	f000 f979 	bl	8007cc0 <_malloc_r>
 80079ce:	4604      	mov	r4, r0
 80079d0:	b140      	cbz	r0, 80079e4 <__sfmoreglue+0x28>
 80079d2:	2100      	movs	r1, #0
 80079d4:	e9c0 1600 	strd	r1, r6, [r0]
 80079d8:	300c      	adds	r0, #12
 80079da:	60a0      	str	r0, [r4, #8]
 80079dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80079e0:	f7ff fdc2 	bl	8007568 <memset>
 80079e4:	4620      	mov	r0, r4
 80079e6:	bd70      	pop	{r4, r5, r6, pc}

080079e8 <__sfp_lock_acquire>:
 80079e8:	4801      	ldr	r0, [pc, #4]	; (80079f0 <__sfp_lock_acquire+0x8>)
 80079ea:	f000 b8b3 	b.w	8007b54 <__retarget_lock_acquire_recursive>
 80079ee:	bf00      	nop
 80079f0:	24000184 	.word	0x24000184

080079f4 <__sfp_lock_release>:
 80079f4:	4801      	ldr	r0, [pc, #4]	; (80079fc <__sfp_lock_release+0x8>)
 80079f6:	f000 b8ae 	b.w	8007b56 <__retarget_lock_release_recursive>
 80079fa:	bf00      	nop
 80079fc:	24000184 	.word	0x24000184

08007a00 <__sinit_lock_acquire>:
 8007a00:	4801      	ldr	r0, [pc, #4]	; (8007a08 <__sinit_lock_acquire+0x8>)
 8007a02:	f000 b8a7 	b.w	8007b54 <__retarget_lock_acquire_recursive>
 8007a06:	bf00      	nop
 8007a08:	2400017f 	.word	0x2400017f

08007a0c <__sinit_lock_release>:
 8007a0c:	4801      	ldr	r0, [pc, #4]	; (8007a14 <__sinit_lock_release+0x8>)
 8007a0e:	f000 b8a2 	b.w	8007b56 <__retarget_lock_release_recursive>
 8007a12:	bf00      	nop
 8007a14:	2400017f 	.word	0x2400017f

08007a18 <__sinit>:
 8007a18:	b510      	push	{r4, lr}
 8007a1a:	4604      	mov	r4, r0
 8007a1c:	f7ff fff0 	bl	8007a00 <__sinit_lock_acquire>
 8007a20:	69a3      	ldr	r3, [r4, #24]
 8007a22:	b11b      	cbz	r3, 8007a2c <__sinit+0x14>
 8007a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a28:	f7ff bff0 	b.w	8007a0c <__sinit_lock_release>
 8007a2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007a30:	6523      	str	r3, [r4, #80]	; 0x50
 8007a32:	4b13      	ldr	r3, [pc, #76]	; (8007a80 <__sinit+0x68>)
 8007a34:	4a13      	ldr	r2, [pc, #76]	; (8007a84 <__sinit+0x6c>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	62a2      	str	r2, [r4, #40]	; 0x28
 8007a3a:	42a3      	cmp	r3, r4
 8007a3c:	bf04      	itt	eq
 8007a3e:	2301      	moveq	r3, #1
 8007a40:	61a3      	streq	r3, [r4, #24]
 8007a42:	4620      	mov	r0, r4
 8007a44:	f000 f820 	bl	8007a88 <__sfp>
 8007a48:	6060      	str	r0, [r4, #4]
 8007a4a:	4620      	mov	r0, r4
 8007a4c:	f000 f81c 	bl	8007a88 <__sfp>
 8007a50:	60a0      	str	r0, [r4, #8]
 8007a52:	4620      	mov	r0, r4
 8007a54:	f000 f818 	bl	8007a88 <__sfp>
 8007a58:	2200      	movs	r2, #0
 8007a5a:	60e0      	str	r0, [r4, #12]
 8007a5c:	2104      	movs	r1, #4
 8007a5e:	6860      	ldr	r0, [r4, #4]
 8007a60:	f7ff ff82 	bl	8007968 <std>
 8007a64:	68a0      	ldr	r0, [r4, #8]
 8007a66:	2201      	movs	r2, #1
 8007a68:	2109      	movs	r1, #9
 8007a6a:	f7ff ff7d 	bl	8007968 <std>
 8007a6e:	68e0      	ldr	r0, [r4, #12]
 8007a70:	2202      	movs	r2, #2
 8007a72:	2112      	movs	r1, #18
 8007a74:	f7ff ff78 	bl	8007968 <std>
 8007a78:	2301      	movs	r3, #1
 8007a7a:	61a3      	str	r3, [r4, #24]
 8007a7c:	e7d2      	b.n	8007a24 <__sinit+0xc>
 8007a7e:	bf00      	nop
 8007a80:	08007f64 	.word	0x08007f64
 8007a84:	080079b1 	.word	0x080079b1

08007a88 <__sfp>:
 8007a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a8a:	4607      	mov	r7, r0
 8007a8c:	f7ff ffac 	bl	80079e8 <__sfp_lock_acquire>
 8007a90:	4b1e      	ldr	r3, [pc, #120]	; (8007b0c <__sfp+0x84>)
 8007a92:	681e      	ldr	r6, [r3, #0]
 8007a94:	69b3      	ldr	r3, [r6, #24]
 8007a96:	b913      	cbnz	r3, 8007a9e <__sfp+0x16>
 8007a98:	4630      	mov	r0, r6
 8007a9a:	f7ff ffbd 	bl	8007a18 <__sinit>
 8007a9e:	3648      	adds	r6, #72	; 0x48
 8007aa0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007aa4:	3b01      	subs	r3, #1
 8007aa6:	d503      	bpl.n	8007ab0 <__sfp+0x28>
 8007aa8:	6833      	ldr	r3, [r6, #0]
 8007aaa:	b30b      	cbz	r3, 8007af0 <__sfp+0x68>
 8007aac:	6836      	ldr	r6, [r6, #0]
 8007aae:	e7f7      	b.n	8007aa0 <__sfp+0x18>
 8007ab0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007ab4:	b9d5      	cbnz	r5, 8007aec <__sfp+0x64>
 8007ab6:	4b16      	ldr	r3, [pc, #88]	; (8007b10 <__sfp+0x88>)
 8007ab8:	60e3      	str	r3, [r4, #12]
 8007aba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007abe:	6665      	str	r5, [r4, #100]	; 0x64
 8007ac0:	f000 f847 	bl	8007b52 <__retarget_lock_init_recursive>
 8007ac4:	f7ff ff96 	bl	80079f4 <__sfp_lock_release>
 8007ac8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007acc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007ad0:	6025      	str	r5, [r4, #0]
 8007ad2:	61a5      	str	r5, [r4, #24]
 8007ad4:	2208      	movs	r2, #8
 8007ad6:	4629      	mov	r1, r5
 8007ad8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007adc:	f7ff fd44 	bl	8007568 <memset>
 8007ae0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007ae4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007ae8:	4620      	mov	r0, r4
 8007aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007aec:	3468      	adds	r4, #104	; 0x68
 8007aee:	e7d9      	b.n	8007aa4 <__sfp+0x1c>
 8007af0:	2104      	movs	r1, #4
 8007af2:	4638      	mov	r0, r7
 8007af4:	f7ff ff62 	bl	80079bc <__sfmoreglue>
 8007af8:	4604      	mov	r4, r0
 8007afa:	6030      	str	r0, [r6, #0]
 8007afc:	2800      	cmp	r0, #0
 8007afe:	d1d5      	bne.n	8007aac <__sfp+0x24>
 8007b00:	f7ff ff78 	bl	80079f4 <__sfp_lock_release>
 8007b04:	230c      	movs	r3, #12
 8007b06:	603b      	str	r3, [r7, #0]
 8007b08:	e7ee      	b.n	8007ae8 <__sfp+0x60>
 8007b0a:	bf00      	nop
 8007b0c:	08007f64 	.word	0x08007f64
 8007b10:	ffff0001 	.word	0xffff0001

08007b14 <_fwalk_reent>:
 8007b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b18:	4606      	mov	r6, r0
 8007b1a:	4688      	mov	r8, r1
 8007b1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007b20:	2700      	movs	r7, #0
 8007b22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b26:	f1b9 0901 	subs.w	r9, r9, #1
 8007b2a:	d505      	bpl.n	8007b38 <_fwalk_reent+0x24>
 8007b2c:	6824      	ldr	r4, [r4, #0]
 8007b2e:	2c00      	cmp	r4, #0
 8007b30:	d1f7      	bne.n	8007b22 <_fwalk_reent+0xe>
 8007b32:	4638      	mov	r0, r7
 8007b34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b38:	89ab      	ldrh	r3, [r5, #12]
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d907      	bls.n	8007b4e <_fwalk_reent+0x3a>
 8007b3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b42:	3301      	adds	r3, #1
 8007b44:	d003      	beq.n	8007b4e <_fwalk_reent+0x3a>
 8007b46:	4629      	mov	r1, r5
 8007b48:	4630      	mov	r0, r6
 8007b4a:	47c0      	blx	r8
 8007b4c:	4307      	orrs	r7, r0
 8007b4e:	3568      	adds	r5, #104	; 0x68
 8007b50:	e7e9      	b.n	8007b26 <_fwalk_reent+0x12>

08007b52 <__retarget_lock_init_recursive>:
 8007b52:	4770      	bx	lr

08007b54 <__retarget_lock_acquire_recursive>:
 8007b54:	4770      	bx	lr

08007b56 <__retarget_lock_release_recursive>:
 8007b56:	4770      	bx	lr

08007b58 <__swhatbuf_r>:
 8007b58:	b570      	push	{r4, r5, r6, lr}
 8007b5a:	460e      	mov	r6, r1
 8007b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b60:	2900      	cmp	r1, #0
 8007b62:	b096      	sub	sp, #88	; 0x58
 8007b64:	4614      	mov	r4, r2
 8007b66:	461d      	mov	r5, r3
 8007b68:	da07      	bge.n	8007b7a <__swhatbuf_r+0x22>
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	602b      	str	r3, [r5, #0]
 8007b6e:	89b3      	ldrh	r3, [r6, #12]
 8007b70:	061a      	lsls	r2, r3, #24
 8007b72:	d410      	bmi.n	8007b96 <__swhatbuf_r+0x3e>
 8007b74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b78:	e00e      	b.n	8007b98 <__swhatbuf_r+0x40>
 8007b7a:	466a      	mov	r2, sp
 8007b7c:	f000 f970 	bl	8007e60 <_fstat_r>
 8007b80:	2800      	cmp	r0, #0
 8007b82:	dbf2      	blt.n	8007b6a <__swhatbuf_r+0x12>
 8007b84:	9a01      	ldr	r2, [sp, #4]
 8007b86:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007b8a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007b8e:	425a      	negs	r2, r3
 8007b90:	415a      	adcs	r2, r3
 8007b92:	602a      	str	r2, [r5, #0]
 8007b94:	e7ee      	b.n	8007b74 <__swhatbuf_r+0x1c>
 8007b96:	2340      	movs	r3, #64	; 0x40
 8007b98:	2000      	movs	r0, #0
 8007b9a:	6023      	str	r3, [r4, #0]
 8007b9c:	b016      	add	sp, #88	; 0x58
 8007b9e:	bd70      	pop	{r4, r5, r6, pc}

08007ba0 <__smakebuf_r>:
 8007ba0:	898b      	ldrh	r3, [r1, #12]
 8007ba2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ba4:	079d      	lsls	r5, r3, #30
 8007ba6:	4606      	mov	r6, r0
 8007ba8:	460c      	mov	r4, r1
 8007baa:	d507      	bpl.n	8007bbc <__smakebuf_r+0x1c>
 8007bac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007bb0:	6023      	str	r3, [r4, #0]
 8007bb2:	6123      	str	r3, [r4, #16]
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	6163      	str	r3, [r4, #20]
 8007bb8:	b002      	add	sp, #8
 8007bba:	bd70      	pop	{r4, r5, r6, pc}
 8007bbc:	ab01      	add	r3, sp, #4
 8007bbe:	466a      	mov	r2, sp
 8007bc0:	f7ff ffca 	bl	8007b58 <__swhatbuf_r>
 8007bc4:	9900      	ldr	r1, [sp, #0]
 8007bc6:	4605      	mov	r5, r0
 8007bc8:	4630      	mov	r0, r6
 8007bca:	f000 f879 	bl	8007cc0 <_malloc_r>
 8007bce:	b948      	cbnz	r0, 8007be4 <__smakebuf_r+0x44>
 8007bd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bd4:	059a      	lsls	r2, r3, #22
 8007bd6:	d4ef      	bmi.n	8007bb8 <__smakebuf_r+0x18>
 8007bd8:	f023 0303 	bic.w	r3, r3, #3
 8007bdc:	f043 0302 	orr.w	r3, r3, #2
 8007be0:	81a3      	strh	r3, [r4, #12]
 8007be2:	e7e3      	b.n	8007bac <__smakebuf_r+0xc>
 8007be4:	4b0d      	ldr	r3, [pc, #52]	; (8007c1c <__smakebuf_r+0x7c>)
 8007be6:	62b3      	str	r3, [r6, #40]	; 0x28
 8007be8:	89a3      	ldrh	r3, [r4, #12]
 8007bea:	6020      	str	r0, [r4, #0]
 8007bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bf0:	81a3      	strh	r3, [r4, #12]
 8007bf2:	9b00      	ldr	r3, [sp, #0]
 8007bf4:	6163      	str	r3, [r4, #20]
 8007bf6:	9b01      	ldr	r3, [sp, #4]
 8007bf8:	6120      	str	r0, [r4, #16]
 8007bfa:	b15b      	cbz	r3, 8007c14 <__smakebuf_r+0x74>
 8007bfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c00:	4630      	mov	r0, r6
 8007c02:	f000 f93f 	bl	8007e84 <_isatty_r>
 8007c06:	b128      	cbz	r0, 8007c14 <__smakebuf_r+0x74>
 8007c08:	89a3      	ldrh	r3, [r4, #12]
 8007c0a:	f023 0303 	bic.w	r3, r3, #3
 8007c0e:	f043 0301 	orr.w	r3, r3, #1
 8007c12:	81a3      	strh	r3, [r4, #12]
 8007c14:	89a0      	ldrh	r0, [r4, #12]
 8007c16:	4305      	orrs	r5, r0
 8007c18:	81a5      	strh	r5, [r4, #12]
 8007c1a:	e7cd      	b.n	8007bb8 <__smakebuf_r+0x18>
 8007c1c:	080079b1 	.word	0x080079b1

08007c20 <_free_r>:
 8007c20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c22:	2900      	cmp	r1, #0
 8007c24:	d048      	beq.n	8007cb8 <_free_r+0x98>
 8007c26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c2a:	9001      	str	r0, [sp, #4]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	f1a1 0404 	sub.w	r4, r1, #4
 8007c32:	bfb8      	it	lt
 8007c34:	18e4      	addlt	r4, r4, r3
 8007c36:	f000 f947 	bl	8007ec8 <__malloc_lock>
 8007c3a:	4a20      	ldr	r2, [pc, #128]	; (8007cbc <_free_r+0x9c>)
 8007c3c:	9801      	ldr	r0, [sp, #4]
 8007c3e:	6813      	ldr	r3, [r2, #0]
 8007c40:	4615      	mov	r5, r2
 8007c42:	b933      	cbnz	r3, 8007c52 <_free_r+0x32>
 8007c44:	6063      	str	r3, [r4, #4]
 8007c46:	6014      	str	r4, [r2, #0]
 8007c48:	b003      	add	sp, #12
 8007c4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c4e:	f000 b941 	b.w	8007ed4 <__malloc_unlock>
 8007c52:	42a3      	cmp	r3, r4
 8007c54:	d90b      	bls.n	8007c6e <_free_r+0x4e>
 8007c56:	6821      	ldr	r1, [r4, #0]
 8007c58:	1862      	adds	r2, r4, r1
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	bf04      	itt	eq
 8007c5e:	681a      	ldreq	r2, [r3, #0]
 8007c60:	685b      	ldreq	r3, [r3, #4]
 8007c62:	6063      	str	r3, [r4, #4]
 8007c64:	bf04      	itt	eq
 8007c66:	1852      	addeq	r2, r2, r1
 8007c68:	6022      	streq	r2, [r4, #0]
 8007c6a:	602c      	str	r4, [r5, #0]
 8007c6c:	e7ec      	b.n	8007c48 <_free_r+0x28>
 8007c6e:	461a      	mov	r2, r3
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	b10b      	cbz	r3, 8007c78 <_free_r+0x58>
 8007c74:	42a3      	cmp	r3, r4
 8007c76:	d9fa      	bls.n	8007c6e <_free_r+0x4e>
 8007c78:	6811      	ldr	r1, [r2, #0]
 8007c7a:	1855      	adds	r5, r2, r1
 8007c7c:	42a5      	cmp	r5, r4
 8007c7e:	d10b      	bne.n	8007c98 <_free_r+0x78>
 8007c80:	6824      	ldr	r4, [r4, #0]
 8007c82:	4421      	add	r1, r4
 8007c84:	1854      	adds	r4, r2, r1
 8007c86:	42a3      	cmp	r3, r4
 8007c88:	6011      	str	r1, [r2, #0]
 8007c8a:	d1dd      	bne.n	8007c48 <_free_r+0x28>
 8007c8c:	681c      	ldr	r4, [r3, #0]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	6053      	str	r3, [r2, #4]
 8007c92:	4421      	add	r1, r4
 8007c94:	6011      	str	r1, [r2, #0]
 8007c96:	e7d7      	b.n	8007c48 <_free_r+0x28>
 8007c98:	d902      	bls.n	8007ca0 <_free_r+0x80>
 8007c9a:	230c      	movs	r3, #12
 8007c9c:	6003      	str	r3, [r0, #0]
 8007c9e:	e7d3      	b.n	8007c48 <_free_r+0x28>
 8007ca0:	6825      	ldr	r5, [r4, #0]
 8007ca2:	1961      	adds	r1, r4, r5
 8007ca4:	428b      	cmp	r3, r1
 8007ca6:	bf04      	itt	eq
 8007ca8:	6819      	ldreq	r1, [r3, #0]
 8007caa:	685b      	ldreq	r3, [r3, #4]
 8007cac:	6063      	str	r3, [r4, #4]
 8007cae:	bf04      	itt	eq
 8007cb0:	1949      	addeq	r1, r1, r5
 8007cb2:	6021      	streq	r1, [r4, #0]
 8007cb4:	6054      	str	r4, [r2, #4]
 8007cb6:	e7c7      	b.n	8007c48 <_free_r+0x28>
 8007cb8:	b003      	add	sp, #12
 8007cba:	bd30      	pop	{r4, r5, pc}
 8007cbc:	24000094 	.word	0x24000094

08007cc0 <_malloc_r>:
 8007cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cc2:	1ccd      	adds	r5, r1, #3
 8007cc4:	f025 0503 	bic.w	r5, r5, #3
 8007cc8:	3508      	adds	r5, #8
 8007cca:	2d0c      	cmp	r5, #12
 8007ccc:	bf38      	it	cc
 8007cce:	250c      	movcc	r5, #12
 8007cd0:	2d00      	cmp	r5, #0
 8007cd2:	4606      	mov	r6, r0
 8007cd4:	db01      	blt.n	8007cda <_malloc_r+0x1a>
 8007cd6:	42a9      	cmp	r1, r5
 8007cd8:	d903      	bls.n	8007ce2 <_malloc_r+0x22>
 8007cda:	230c      	movs	r3, #12
 8007cdc:	6033      	str	r3, [r6, #0]
 8007cde:	2000      	movs	r0, #0
 8007ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ce2:	f000 f8f1 	bl	8007ec8 <__malloc_lock>
 8007ce6:	4921      	ldr	r1, [pc, #132]	; (8007d6c <_malloc_r+0xac>)
 8007ce8:	680a      	ldr	r2, [r1, #0]
 8007cea:	4614      	mov	r4, r2
 8007cec:	b99c      	cbnz	r4, 8007d16 <_malloc_r+0x56>
 8007cee:	4f20      	ldr	r7, [pc, #128]	; (8007d70 <_malloc_r+0xb0>)
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	b923      	cbnz	r3, 8007cfe <_malloc_r+0x3e>
 8007cf4:	4621      	mov	r1, r4
 8007cf6:	4630      	mov	r0, r6
 8007cf8:	f000 f83c 	bl	8007d74 <_sbrk_r>
 8007cfc:	6038      	str	r0, [r7, #0]
 8007cfe:	4629      	mov	r1, r5
 8007d00:	4630      	mov	r0, r6
 8007d02:	f000 f837 	bl	8007d74 <_sbrk_r>
 8007d06:	1c43      	adds	r3, r0, #1
 8007d08:	d123      	bne.n	8007d52 <_malloc_r+0x92>
 8007d0a:	230c      	movs	r3, #12
 8007d0c:	6033      	str	r3, [r6, #0]
 8007d0e:	4630      	mov	r0, r6
 8007d10:	f000 f8e0 	bl	8007ed4 <__malloc_unlock>
 8007d14:	e7e3      	b.n	8007cde <_malloc_r+0x1e>
 8007d16:	6823      	ldr	r3, [r4, #0]
 8007d18:	1b5b      	subs	r3, r3, r5
 8007d1a:	d417      	bmi.n	8007d4c <_malloc_r+0x8c>
 8007d1c:	2b0b      	cmp	r3, #11
 8007d1e:	d903      	bls.n	8007d28 <_malloc_r+0x68>
 8007d20:	6023      	str	r3, [r4, #0]
 8007d22:	441c      	add	r4, r3
 8007d24:	6025      	str	r5, [r4, #0]
 8007d26:	e004      	b.n	8007d32 <_malloc_r+0x72>
 8007d28:	6863      	ldr	r3, [r4, #4]
 8007d2a:	42a2      	cmp	r2, r4
 8007d2c:	bf0c      	ite	eq
 8007d2e:	600b      	streq	r3, [r1, #0]
 8007d30:	6053      	strne	r3, [r2, #4]
 8007d32:	4630      	mov	r0, r6
 8007d34:	f000 f8ce 	bl	8007ed4 <__malloc_unlock>
 8007d38:	f104 000b 	add.w	r0, r4, #11
 8007d3c:	1d23      	adds	r3, r4, #4
 8007d3e:	f020 0007 	bic.w	r0, r0, #7
 8007d42:	1ac2      	subs	r2, r0, r3
 8007d44:	d0cc      	beq.n	8007ce0 <_malloc_r+0x20>
 8007d46:	1a1b      	subs	r3, r3, r0
 8007d48:	50a3      	str	r3, [r4, r2]
 8007d4a:	e7c9      	b.n	8007ce0 <_malloc_r+0x20>
 8007d4c:	4622      	mov	r2, r4
 8007d4e:	6864      	ldr	r4, [r4, #4]
 8007d50:	e7cc      	b.n	8007cec <_malloc_r+0x2c>
 8007d52:	1cc4      	adds	r4, r0, #3
 8007d54:	f024 0403 	bic.w	r4, r4, #3
 8007d58:	42a0      	cmp	r0, r4
 8007d5a:	d0e3      	beq.n	8007d24 <_malloc_r+0x64>
 8007d5c:	1a21      	subs	r1, r4, r0
 8007d5e:	4630      	mov	r0, r6
 8007d60:	f000 f808 	bl	8007d74 <_sbrk_r>
 8007d64:	3001      	adds	r0, #1
 8007d66:	d1dd      	bne.n	8007d24 <_malloc_r+0x64>
 8007d68:	e7cf      	b.n	8007d0a <_malloc_r+0x4a>
 8007d6a:	bf00      	nop
 8007d6c:	24000094 	.word	0x24000094
 8007d70:	24000098 	.word	0x24000098

08007d74 <_sbrk_r>:
 8007d74:	b538      	push	{r3, r4, r5, lr}
 8007d76:	4d06      	ldr	r5, [pc, #24]	; (8007d90 <_sbrk_r+0x1c>)
 8007d78:	2300      	movs	r3, #0
 8007d7a:	4604      	mov	r4, r0
 8007d7c:	4608      	mov	r0, r1
 8007d7e:	602b      	str	r3, [r5, #0]
 8007d80:	f7f9 fcb4 	bl	80016ec <_sbrk>
 8007d84:	1c43      	adds	r3, r0, #1
 8007d86:	d102      	bne.n	8007d8e <_sbrk_r+0x1a>
 8007d88:	682b      	ldr	r3, [r5, #0]
 8007d8a:	b103      	cbz	r3, 8007d8e <_sbrk_r+0x1a>
 8007d8c:	6023      	str	r3, [r4, #0]
 8007d8e:	bd38      	pop	{r3, r4, r5, pc}
 8007d90:	24000188 	.word	0x24000188

08007d94 <__sread>:
 8007d94:	b510      	push	{r4, lr}
 8007d96:	460c      	mov	r4, r1
 8007d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d9c:	f000 f8a0 	bl	8007ee0 <_read_r>
 8007da0:	2800      	cmp	r0, #0
 8007da2:	bfab      	itete	ge
 8007da4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007da6:	89a3      	ldrhlt	r3, [r4, #12]
 8007da8:	181b      	addge	r3, r3, r0
 8007daa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007dae:	bfac      	ite	ge
 8007db0:	6563      	strge	r3, [r4, #84]	; 0x54
 8007db2:	81a3      	strhlt	r3, [r4, #12]
 8007db4:	bd10      	pop	{r4, pc}

08007db6 <__swrite>:
 8007db6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dba:	461f      	mov	r7, r3
 8007dbc:	898b      	ldrh	r3, [r1, #12]
 8007dbe:	05db      	lsls	r3, r3, #23
 8007dc0:	4605      	mov	r5, r0
 8007dc2:	460c      	mov	r4, r1
 8007dc4:	4616      	mov	r6, r2
 8007dc6:	d505      	bpl.n	8007dd4 <__swrite+0x1e>
 8007dc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dcc:	2302      	movs	r3, #2
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f000 f868 	bl	8007ea4 <_lseek_r>
 8007dd4:	89a3      	ldrh	r3, [r4, #12]
 8007dd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007dde:	81a3      	strh	r3, [r4, #12]
 8007de0:	4632      	mov	r2, r6
 8007de2:	463b      	mov	r3, r7
 8007de4:	4628      	mov	r0, r5
 8007de6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dea:	f000 b817 	b.w	8007e1c <_write_r>

08007dee <__sseek>:
 8007dee:	b510      	push	{r4, lr}
 8007df0:	460c      	mov	r4, r1
 8007df2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007df6:	f000 f855 	bl	8007ea4 <_lseek_r>
 8007dfa:	1c43      	adds	r3, r0, #1
 8007dfc:	89a3      	ldrh	r3, [r4, #12]
 8007dfe:	bf15      	itete	ne
 8007e00:	6560      	strne	r0, [r4, #84]	; 0x54
 8007e02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007e06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007e0a:	81a3      	strheq	r3, [r4, #12]
 8007e0c:	bf18      	it	ne
 8007e0e:	81a3      	strhne	r3, [r4, #12]
 8007e10:	bd10      	pop	{r4, pc}

08007e12 <__sclose>:
 8007e12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e16:	f000 b813 	b.w	8007e40 <_close_r>
	...

08007e1c <_write_r>:
 8007e1c:	b538      	push	{r3, r4, r5, lr}
 8007e1e:	4d07      	ldr	r5, [pc, #28]	; (8007e3c <_write_r+0x20>)
 8007e20:	4604      	mov	r4, r0
 8007e22:	4608      	mov	r0, r1
 8007e24:	4611      	mov	r1, r2
 8007e26:	2200      	movs	r2, #0
 8007e28:	602a      	str	r2, [r5, #0]
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	f7f9 fc0d 	bl	800164a <_write>
 8007e30:	1c43      	adds	r3, r0, #1
 8007e32:	d102      	bne.n	8007e3a <_write_r+0x1e>
 8007e34:	682b      	ldr	r3, [r5, #0]
 8007e36:	b103      	cbz	r3, 8007e3a <_write_r+0x1e>
 8007e38:	6023      	str	r3, [r4, #0]
 8007e3a:	bd38      	pop	{r3, r4, r5, pc}
 8007e3c:	24000188 	.word	0x24000188

08007e40 <_close_r>:
 8007e40:	b538      	push	{r3, r4, r5, lr}
 8007e42:	4d06      	ldr	r5, [pc, #24]	; (8007e5c <_close_r+0x1c>)
 8007e44:	2300      	movs	r3, #0
 8007e46:	4604      	mov	r4, r0
 8007e48:	4608      	mov	r0, r1
 8007e4a:	602b      	str	r3, [r5, #0]
 8007e4c:	f7f9 fc19 	bl	8001682 <_close>
 8007e50:	1c43      	adds	r3, r0, #1
 8007e52:	d102      	bne.n	8007e5a <_close_r+0x1a>
 8007e54:	682b      	ldr	r3, [r5, #0]
 8007e56:	b103      	cbz	r3, 8007e5a <_close_r+0x1a>
 8007e58:	6023      	str	r3, [r4, #0]
 8007e5a:	bd38      	pop	{r3, r4, r5, pc}
 8007e5c:	24000188 	.word	0x24000188

08007e60 <_fstat_r>:
 8007e60:	b538      	push	{r3, r4, r5, lr}
 8007e62:	4d07      	ldr	r5, [pc, #28]	; (8007e80 <_fstat_r+0x20>)
 8007e64:	2300      	movs	r3, #0
 8007e66:	4604      	mov	r4, r0
 8007e68:	4608      	mov	r0, r1
 8007e6a:	4611      	mov	r1, r2
 8007e6c:	602b      	str	r3, [r5, #0]
 8007e6e:	f7f9 fc14 	bl	800169a <_fstat>
 8007e72:	1c43      	adds	r3, r0, #1
 8007e74:	d102      	bne.n	8007e7c <_fstat_r+0x1c>
 8007e76:	682b      	ldr	r3, [r5, #0]
 8007e78:	b103      	cbz	r3, 8007e7c <_fstat_r+0x1c>
 8007e7a:	6023      	str	r3, [r4, #0]
 8007e7c:	bd38      	pop	{r3, r4, r5, pc}
 8007e7e:	bf00      	nop
 8007e80:	24000188 	.word	0x24000188

08007e84 <_isatty_r>:
 8007e84:	b538      	push	{r3, r4, r5, lr}
 8007e86:	4d06      	ldr	r5, [pc, #24]	; (8007ea0 <_isatty_r+0x1c>)
 8007e88:	2300      	movs	r3, #0
 8007e8a:	4604      	mov	r4, r0
 8007e8c:	4608      	mov	r0, r1
 8007e8e:	602b      	str	r3, [r5, #0]
 8007e90:	f7f9 fc13 	bl	80016ba <_isatty>
 8007e94:	1c43      	adds	r3, r0, #1
 8007e96:	d102      	bne.n	8007e9e <_isatty_r+0x1a>
 8007e98:	682b      	ldr	r3, [r5, #0]
 8007e9a:	b103      	cbz	r3, 8007e9e <_isatty_r+0x1a>
 8007e9c:	6023      	str	r3, [r4, #0]
 8007e9e:	bd38      	pop	{r3, r4, r5, pc}
 8007ea0:	24000188 	.word	0x24000188

08007ea4 <_lseek_r>:
 8007ea4:	b538      	push	{r3, r4, r5, lr}
 8007ea6:	4d07      	ldr	r5, [pc, #28]	; (8007ec4 <_lseek_r+0x20>)
 8007ea8:	4604      	mov	r4, r0
 8007eaa:	4608      	mov	r0, r1
 8007eac:	4611      	mov	r1, r2
 8007eae:	2200      	movs	r2, #0
 8007eb0:	602a      	str	r2, [r5, #0]
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	f7f9 fc0c 	bl	80016d0 <_lseek>
 8007eb8:	1c43      	adds	r3, r0, #1
 8007eba:	d102      	bne.n	8007ec2 <_lseek_r+0x1e>
 8007ebc:	682b      	ldr	r3, [r5, #0]
 8007ebe:	b103      	cbz	r3, 8007ec2 <_lseek_r+0x1e>
 8007ec0:	6023      	str	r3, [r4, #0]
 8007ec2:	bd38      	pop	{r3, r4, r5, pc}
 8007ec4:	24000188 	.word	0x24000188

08007ec8 <__malloc_lock>:
 8007ec8:	4801      	ldr	r0, [pc, #4]	; (8007ed0 <__malloc_lock+0x8>)
 8007eca:	f7ff be43 	b.w	8007b54 <__retarget_lock_acquire_recursive>
 8007ece:	bf00      	nop
 8007ed0:	24000180 	.word	0x24000180

08007ed4 <__malloc_unlock>:
 8007ed4:	4801      	ldr	r0, [pc, #4]	; (8007edc <__malloc_unlock+0x8>)
 8007ed6:	f7ff be3e 	b.w	8007b56 <__retarget_lock_release_recursive>
 8007eda:	bf00      	nop
 8007edc:	24000180 	.word	0x24000180

08007ee0 <_read_r>:
 8007ee0:	b538      	push	{r3, r4, r5, lr}
 8007ee2:	4d07      	ldr	r5, [pc, #28]	; (8007f00 <_read_r+0x20>)
 8007ee4:	4604      	mov	r4, r0
 8007ee6:	4608      	mov	r0, r1
 8007ee8:	4611      	mov	r1, r2
 8007eea:	2200      	movs	r2, #0
 8007eec:	602a      	str	r2, [r5, #0]
 8007eee:	461a      	mov	r2, r3
 8007ef0:	f7f9 fb8e 	bl	8001610 <_read>
 8007ef4:	1c43      	adds	r3, r0, #1
 8007ef6:	d102      	bne.n	8007efe <_read_r+0x1e>
 8007ef8:	682b      	ldr	r3, [r5, #0]
 8007efa:	b103      	cbz	r3, 8007efe <_read_r+0x1e>
 8007efc:	6023      	str	r3, [r4, #0]
 8007efe:	bd38      	pop	{r3, r4, r5, pc}
 8007f00:	24000188 	.word	0x24000188

08007f04 <_init>:
 8007f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f06:	bf00      	nop
 8007f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f0a:	bc08      	pop	{r3}
 8007f0c:	469e      	mov	lr, r3
 8007f0e:	4770      	bx	lr

08007f10 <_fini>:
 8007f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f12:	bf00      	nop
 8007f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f16:	bc08      	pop	{r3}
 8007f18:	469e      	mov	lr, r3
 8007f1a:	4770      	bx	lr
