
SPI5_master_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e98  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004130  08004130  00014130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004140  08004140  00014140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004144  08004144  00014144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  08004148  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000a8  20000014  0800415c  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  200000bc  0800415c  000200bc  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   00014036  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000022ff  00000000  00000000  00034078  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a68  00000000  00000000  00036378  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000990  00000000  00000000  00036de0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003d7cb  00000000  00000000  00037770  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000a5bf  00000000  00000000  00074f3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0018eec6  00000000  00000000  0007f4fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  0020e3c0  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000029bc  00000000  00000000  0020e43c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000014 	.word	0x20000014
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004118 	.word	0x08004118

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000018 	.word	0x20000018
 80002d4:	08004118 	.word	0x08004118

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3f      	ldr	r3, [pc, #252]	; (80003dc <SystemInit+0x104>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3e      	ldr	r2, [pc, #248]	; (80003dc <SystemInit+0x104>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b3b      	ldr	r3, [pc, #236]	; (80003dc <SystemInit+0x104>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a3a      	ldr	r2, [pc, #232]	; (80003dc <SystemInit+0x104>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b39      	ldr	r3, [pc, #228]	; (80003e0 <SystemInit+0x108>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b36      	ldr	r3, [pc, #216]	; (80003e0 <SystemInit+0x108>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a34      	ldr	r2, [pc, #208]	; (80003e0 <SystemInit+0x108>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b33      	ldr	r3, [pc, #204]	; (80003e4 <SystemInit+0x10c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a32      	ldr	r2, [pc, #200]	; (80003e4 <SystemInit+0x10c>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b30      	ldr	r3, [pc, #192]	; (80003e4 <SystemInit+0x10c>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2f      	ldr	r3, [pc, #188]	; (80003e4 <SystemInit+0x10c>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492e      	ldr	r1, [pc, #184]	; (80003e4 <SystemInit+0x10c>)
 800032c:	4b2e      	ldr	r3, [pc, #184]	; (80003e8 <SystemInit+0x110>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b2b      	ldr	r3, [pc, #172]	; (80003e0 <SystemInit+0x108>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 030f 	and.w	r3, r3, #15
 800033a:	2b07      	cmp	r3, #7
 800033c:	d907      	bls.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <SystemInit+0x108>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a26      	ldr	r2, [pc, #152]	; (80003e0 <SystemInit+0x108>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b25      	ldr	r3, [pc, #148]	; (80003e4 <SystemInit+0x10c>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b23      	ldr	r3, [pc, #140]	; (80003e4 <SystemInit+0x10c>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b22      	ldr	r3, [pc, #136]	; (80003e4 <SystemInit+0x10c>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b20      	ldr	r3, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000362:	4a22      	ldr	r2, [pc, #136]	; (80003ec <SystemInit+0x114>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1f      	ldr	r3, [pc, #124]	; (80003e4 <SystemInit+0x10c>)
 8000368:	4a21      	ldr	r2, [pc, #132]	; (80003f0 <SystemInit+0x118>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <SystemInit+0x10c>)
 800036e:	4a21      	ldr	r2, [pc, #132]	; (80003f4 <SystemInit+0x11c>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1c      	ldr	r3, [pc, #112]	; (80003e4 <SystemInit+0x10c>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <SystemInit+0x10c>)
 800037a:	4a1e      	ldr	r2, [pc, #120]	; (80003f4 <SystemInit+0x11c>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b19      	ldr	r3, [pc, #100]	; (80003e4 <SystemInit+0x10c>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <SystemInit+0x10c>)
 8000386:	4a1b      	ldr	r2, [pc, #108]	; (80003f4 <SystemInit+0x11c>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b16      	ldr	r3, [pc, #88]	; (80003e4 <SystemInit+0x10c>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <SystemInit+0x10c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a13      	ldr	r2, [pc, #76]	; (80003e4 <SystemInit+0x10c>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <SystemInit+0x10c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <SystemInit+0x120>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a14      	ldr	r2, [pc, #80]	; (80003f8 <SystemInit+0x120>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b13      	ldr	r3, [pc, #76]	; (80003fc <SystemInit+0x124>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b13      	ldr	r3, [pc, #76]	; (8000400 <SystemInit+0x128>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <SystemInit+0x12c>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <SystemInit+0x130>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80003ca:	4b04      	ldr	r3, [pc, #16]	; (80003dc <SystemInit+0x104>)
 80003cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003d0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	e000ed00 	.word	0xe000ed00
 80003e0:	52002000 	.word	0x52002000
 80003e4:	58024400 	.word	0x58024400
 80003e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80003ec:	02020200 	.word	0x02020200
 80003f0:	01ff0000 	.word	0x01ff0000
 80003f4:	01010280 	.word	0x01010280
 80003f8:	580000c0 	.word	0x580000c0
 80003fc:	5c001000 	.word	0x5c001000
 8000400:	ffff0000 	.word	0xffff0000
 8000404:	51008108 	.word	0x51008108
 8000408:	52004000 	.word	0x52004000

0800040c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000412:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000416:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000418:	bf00      	nop
 800041a:	4b24      	ldr	r3, [pc, #144]	; (80004ac <main+0xa0>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000422:	2b00      	cmp	r3, #0
 8000424:	d004      	beq.n	8000430 <main+0x24>
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	1e5a      	subs	r2, r3, #1
 800042a:	607a      	str	r2, [r7, #4]
 800042c:	2b00      	cmp	r3, #0
 800042e:	dcf4      	bgt.n	800041a <main+0xe>
  if ( timeout < 0 )
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	2b00      	cmp	r3, #0
 8000434:	da01      	bge.n	800043a <main+0x2e>
  {
  Error_Handler();
 8000436:	f000 f973 	bl	8000720 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800043a:	f000 fa69 	bl	8000910 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800043e:	f000 f83b 	bl	80004b8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000442:	4b1a      	ldr	r3, [pc, #104]	; (80004ac <main+0xa0>)
 8000444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000448:	4a18      	ldr	r2, [pc, #96]	; (80004ac <main+0xa0>)
 800044a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800044e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000452:	4b16      	ldr	r3, [pc, #88]	; (80004ac <main+0xa0>)
 8000454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800045c:	603b      	str	r3, [r7, #0]
 800045e:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000460:	2000      	movs	r0, #0
 8000462:	f000 fff7 	bl	8001454 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000466:	2100      	movs	r1, #0
 8000468:	2000      	movs	r0, #0
 800046a:	f001 f80d 	bl	8001488 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800046e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000472:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000474:	bf00      	nop
 8000476:	4b0d      	ldr	r3, [pc, #52]	; (80004ac <main+0xa0>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800047e:	2b00      	cmp	r3, #0
 8000480:	d104      	bne.n	800048c <main+0x80>
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	1e5a      	subs	r2, r3, #1
 8000486:	607a      	str	r2, [r7, #4]
 8000488:	2b00      	cmp	r3, #0
 800048a:	dcf4      	bgt.n	8000476 <main+0x6a>
if ( timeout < 0 )
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	2b00      	cmp	r3, #0
 8000490:	da01      	bge.n	8000496 <main+0x8a>
{
Error_Handler();
 8000492:	f000 f945 	bl	8000720 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000496:	f000 f919 	bl	80006cc <MX_GPIO_Init>
  MX_SPI5_Init();
 800049a:	f000 f8c1 	bl	8000620 <MX_SPI5_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_SPI_Transmit(&hspi5, &send_data, 1,1);
 800049e:	2301      	movs	r3, #1
 80004a0:	2201      	movs	r2, #1
 80004a2:	4903      	ldr	r1, [pc, #12]	; (80004b0 <main+0xa4>)
 80004a4:	4803      	ldr	r0, [pc, #12]	; (80004b4 <main+0xa8>)
 80004a6:	f003 f90b 	bl	80036c0 <HAL_SPI_Transmit>
 80004aa:	e7f8      	b.n	800049e <main+0x92>
 80004ac:	58024400 	.word	0x58024400
 80004b0:	20000008 	.word	0x20000008
 80004b4:	20000030 	.word	0x20000030

080004b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b0ce      	sub	sp, #312	; 0x138
 80004bc:	af00      	add	r7, sp, #0
	  RCC_ClkInitTypeDef RCC_ClkInitStruct;
	  RCC_OscInitTypeDef RCC_OscInitStruct;
	  HAL_StatusTypeDef ret = HAL_OK;
 80004be:	2300      	movs	r3, #0
 80004c0:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
	  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80004c4:	f107 0308 	add.w	r3, r7, #8
 80004c8:	4618      	mov	r0, r3
 80004ca:	23c0      	movs	r3, #192	; 0xc0
 80004cc:	461a      	mov	r2, r3
 80004ce:	2100      	movs	r1, #0
 80004d0:	f003 fe1a 	bl	8004108 <memset>
	  /*!< Supply configuration update enable */
	  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80004d4:	2004      	movs	r0, #4
 80004d6:	f000 ffeb 	bl	80014b0 <HAL_PWREx_ConfigSupply>

	  /* The voltage scaling allows optimizing the power consumption when the device is
	     clocked below the maximum system frequency, to update the voltage scaling value
	     regarding system frequency refer to product datasheet.  */
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	4b4d      	ldr	r3, [pc, #308]	; (8000618 <SystemClock_Config+0x160>)
 80004e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004e4:	4a4c      	ldr	r2, [pc, #304]	; (8000618 <SystemClock_Config+0x160>)
 80004e6:	f023 0301 	bic.w	r3, r3, #1
 80004ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80004ec:	4b4a      	ldr	r3, [pc, #296]	; (8000618 <SystemClock_Config+0x160>)
 80004ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004f0:	f003 0201 	and.w	r2, r3, #1
 80004f4:	1d3b      	adds	r3, r7, #4
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	4b48      	ldr	r3, [pc, #288]	; (800061c <SystemClock_Config+0x164>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	4a47      	ldr	r2, [pc, #284]	; (800061c <SystemClock_Config+0x164>)
 80004fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000502:	6193      	str	r3, [r2, #24]
 8000504:	4b45      	ldr	r3, [pc, #276]	; (800061c <SystemClock_Config+0x164>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800050c:	1d3b      	adds	r3, r7, #4
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	681b      	ldr	r3, [r3, #0]

	  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000514:	bf00      	nop
 8000516:	4b41      	ldr	r3, [pc, #260]	; (800061c <SystemClock_Config+0x164>)
 8000518:	699b      	ldr	r3, [r3, #24]
 800051a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800051e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000522:	d1f8      	bne.n	8000516 <SystemClock_Config+0x5e>

	  /* Enable HSE Oscillator and activate PLL with HSE as source */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000524:	2301      	movs	r3, #1
 8000526:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800052a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800052e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000532:	2300      	movs	r3, #0
 8000534:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8000538:	2300      	movs	r3, #0
 800053a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800053e:	2302      	movs	r3, #2
 8000540:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000544:	2302      	movs	r3, #2
 8000546:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

	  RCC_OscInitStruct.PLL.PLLM = 5;
 800054a:	2305      	movs	r3, #5
 800054c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	  RCC_OscInitStruct.PLL.PLLN = 160;
 8000550:	23a0      	movs	r3, #160	; 0xa0
 8000552:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	  RCC_OscInitStruct.PLL.PLLP = 2;
 800055c:	2302      	movs	r3, #2
 800055e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	  RCC_OscInitStruct.PLL.PLLR = 2;
 8000562:	2302      	movs	r3, #2
 8000564:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000568:	2304      	movs	r3, #4
 800056a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

	  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800056e:	2300      	movs	r3, #0
 8000570:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000574:	2308      	movs	r3, #8
 8000576:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800057a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800057e:	4618      	mov	r0, r3
 8000580:	f000 fff0 	bl	8001564 <HAL_RCC_OscConfig>
 8000584:	4603      	mov	r3, r0
 8000586:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
	  if(ret != HAL_OK)
 800058a:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0xde>
	  {
	    Error_Handler();
 8000592:	f000 f8c5 	bl	8000720 <Error_Handler>
	  }

	/* Select PLL as system clock source and configure  bus clocks dividers */
	  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8000596:	233f      	movs	r3, #63	; 0x3f
 8000598:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059c:	2303      	movs	r3, #3
 800059e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80005a8:	2308      	movs	r3, #8
 80005aa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80005ae:	2340      	movs	r3, #64	; 0x40
 80005b0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80005b4:	2340      	movs	r3, #64	; 0x40
 80005b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80005ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80005c2:	2340      	movs	r3, #64	; 0x40
 80005c4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 80005c8:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80005cc:	2104      	movs	r1, #4
 80005ce:	4618      	mov	r0, r3
 80005d0:	f001 fbd8 	bl	8001d84 <HAL_RCC_ClockConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
	  if(ret != HAL_OK)
 80005da:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0x12e>
	  {
	    Error_Handler();
 80005e2:	f000 f89d 	bl	8000720 <Error_Handler>
	  }
	  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 80005e6:	f107 0308 	add.w	r3, r7, #8
 80005ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005ee:	601a      	str	r2, [r3, #0]
	  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80005f0:	f107 0308 	add.w	r3, r7, #8
 80005f4:	2200      	movs	r2, #0
 80005f6:	665a      	str	r2, [r3, #100]	; 0x64
	  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005f8:	f107 0308 	add.w	r3, r7, #8
 80005fc:	4618      	mov	r0, r3
 80005fe:	f001 fee9 	bl	80023d4 <HAL_RCCEx_PeriphCLKConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x154>
	  {
		Error_Handler();
 8000608:	f000 f88a 	bl	8000720 <Error_Handler>
	  }
}
 800060c:	bf00      	nop
 800060e:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	58000400 	.word	0x58000400
 800061c:	58024800 	.word	0x58024800

08000620 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000624:	4b27      	ldr	r3, [pc, #156]	; (80006c4 <MX_SPI5_Init+0xa4>)
 8000626:	4a28      	ldr	r2, [pc, #160]	; (80006c8 <MX_SPI5_Init+0xa8>)
 8000628:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800062a:	4b26      	ldr	r3, [pc, #152]	; (80006c4 <MX_SPI5_Init+0xa4>)
 800062c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000630:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000632:	4b24      	ldr	r3, [pc, #144]	; (80006c4 <MX_SPI5_Init+0xa4>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 8000638:	4b22      	ldr	r3, [pc, #136]	; (80006c4 <MX_SPI5_Init+0xa4>)
 800063a:	2203      	movs	r2, #3
 800063c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800063e:	4b21      	ldr	r3, [pc, #132]	; (80006c4 <MX_SPI5_Init+0xa4>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000644:	4b1f      	ldr	r3, [pc, #124]	; (80006c4 <MX_SPI5_Init+0xa4>)
 8000646:	2200      	movs	r2, #0
 8000648:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800064a:	4b1e      	ldr	r3, [pc, #120]	; (80006c4 <MX_SPI5_Init+0xa4>)
 800064c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000650:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000652:	4b1c      	ldr	r3, [pc, #112]	; (80006c4 <MX_SPI5_Init+0xa4>)
 8000654:	2200      	movs	r2, #0
 8000656:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000658:	4b1a      	ldr	r3, [pc, #104]	; (80006c4 <MX_SPI5_Init+0xa4>)
 800065a:	2200      	movs	r2, #0
 800065c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800065e:	4b19      	ldr	r3, [pc, #100]	; (80006c4 <MX_SPI5_Init+0xa4>)
 8000660:	2200      	movs	r2, #0
 8000662:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000664:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <MX_SPI5_Init+0xa4>)
 8000666:	2200      	movs	r2, #0
 8000668:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 800066a:	4b16      	ldr	r3, [pc, #88]	; (80006c4 <MX_SPI5_Init+0xa4>)
 800066c:	2200      	movs	r2, #0
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000670:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <MX_SPI5_Init+0xa4>)
 8000672:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000676:	635a      	str	r2, [r3, #52]	; 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000678:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <MX_SPI5_Init+0xa4>)
 800067a:	2200      	movs	r2, #0
 800067c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800067e:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <MX_SPI5_Init+0xa4>)
 8000680:	2200      	movs	r2, #0
 8000682:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000684:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <MX_SPI5_Init+0xa4>)
 8000686:	2200      	movs	r2, #0
 8000688:	641a      	str	r2, [r3, #64]	; 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <MX_SPI5_Init+0xa4>)
 800068c:	2200      	movs	r2, #0
 800068e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_SPI5_Init+0xa4>)
 8000692:	2200      	movs	r2, #0
 8000694:	649a      	str	r2, [r3, #72]	; 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000696:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <MX_SPI5_Init+0xa4>)
 8000698:	2200      	movs	r2, #0
 800069a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MX_SPI5_Init+0xa4>)
 800069e:	2200      	movs	r2, #0
 80006a0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80006a2:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <MX_SPI5_Init+0xa4>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_SPI5_Init+0xa4>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80006ae:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_SPI5_Init+0xa4>)
 80006b0:	f002 ff0e 	bl	80034d0 <HAL_SPI_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_SPI5_Init+0x9e>
  {
    Error_Handler();
 80006ba:	f000 f831 	bl	8000720 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000030 	.word	0x20000030
 80006c8:	40015000 	.word	0x40015000

080006cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80006d2:	4b12      	ldr	r3, [pc, #72]	; (800071c <MX_GPIO_Init+0x50>)
 80006d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d8:	4a10      	ldr	r2, [pc, #64]	; (800071c <MX_GPIO_Init+0x50>)
 80006da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_GPIO_Init+0x50>)
 80006e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80006f0:	4b0a      	ldr	r3, [pc, #40]	; (800071c <MX_GPIO_Init+0x50>)
 80006f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f6:	4a09      	ldr	r2, [pc, #36]	; (800071c <MX_GPIO_Init+0x50>)
 80006f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_GPIO_Init+0x50>)
 8000702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000706:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	683b      	ldr	r3, [r7, #0]

}
 800070e:	bf00      	nop
 8000710:	370c      	adds	r7, #12
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	58024400 	.word	0x58024400

08000720 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
	...

08000730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000736:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <HAL_MspInit+0x30>)
 8000738:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800073c:	4a08      	ldr	r2, [pc, #32]	; (8000760 <HAL_MspInit+0x30>)
 800073e:	f043 0302 	orr.w	r3, r3, #2
 8000742:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <HAL_MspInit+0x30>)
 8000748:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800074c:	f003 0302 	and.w	r3, r3, #2
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000754:	bf00      	nop
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	58024400 	.word	0x58024400

08000764 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08a      	sub	sp, #40	; 0x28
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a2e      	ldr	r2, [pc, #184]	; (800083c <HAL_SPI_MspInit+0xd8>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d155      	bne.n	8000832 <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000786:	4b2e      	ldr	r3, [pc, #184]	; (8000840 <HAL_SPI_MspInit+0xdc>)
 8000788:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800078c:	4a2c      	ldr	r2, [pc, #176]	; (8000840 <HAL_SPI_MspInit+0xdc>)
 800078e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000792:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000796:	4b2a      	ldr	r3, [pc, #168]	; (8000840 <HAL_SPI_MspInit+0xdc>)
 8000798:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800079c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 80007a4:	4b26      	ldr	r3, [pc, #152]	; (8000840 <HAL_SPI_MspInit+0xdc>)
 80007a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007aa:	4a25      	ldr	r2, [pc, #148]	; (8000840 <HAL_SPI_MspInit+0xdc>)
 80007ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007b4:	4b22      	ldr	r3, [pc, #136]	; (8000840 <HAL_SPI_MspInit+0xdc>)
 80007b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80007c2:	4b1f      	ldr	r3, [pc, #124]	; (8000840 <HAL_SPI_MspInit+0xdc>)
 80007c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007c8:	4a1d      	ldr	r2, [pc, #116]	; (8000840 <HAL_SPI_MspInit+0xdc>)
 80007ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007d2:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <HAL_SPI_MspInit+0xdc>)
 80007d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	68bb      	ldr	r3, [r7, #8]
    PK0     ------> SPI5_SCK
    PK1     ------> SPI5_NSS
    PJ11     ------> SPI5_MISO
    PJ10     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80007e0:	2303      	movs	r3, #3
 80007e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e4:	2302      	movs	r3, #2
 80007e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ec:	2300      	movs	r3, #0
 80007ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80007f0:	2305      	movs	r3, #5
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	4619      	mov	r1, r3
 80007fa:	4812      	ldr	r0, [pc, #72]	; (8000844 <HAL_SPI_MspInit+0xe0>)
 80007fc:	f000 fc7a 	bl	80010f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8000800:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000804:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000806:	2302      	movs	r3, #2
 8000808:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000812:	2305      	movs	r3, #5
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	4619      	mov	r1, r3
 800081c:	480a      	ldr	r0, [pc, #40]	; (8000848 <HAL_SPI_MspInit+0xe4>)
 800081e:	f000 fc69 	bl	80010f4 <HAL_GPIO_Init>

    /* SPI5 interrupt Init */
    HAL_NVIC_SetPriority(SPI5_IRQn, 0, 0);
 8000822:	2200      	movs	r2, #0
 8000824:	2100      	movs	r1, #0
 8000826:	2055      	movs	r0, #85	; 0x55
 8000828:	f000 f9eb 	bl	8000c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 800082c:	2055      	movs	r0, #85	; 0x55
 800082e:	f000 fa02 	bl	8000c36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8000832:	bf00      	nop
 8000834:	3728      	adds	r7, #40	; 0x28
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40015000 	.word	0x40015000
 8000840:	58024400 	.word	0x58024400
 8000844:	58022800 	.word	0x58022800
 8000848:	58022400 	.word	0x58022400

0800084c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr

0800085a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800085e:	e7fe      	b.n	800085e <HardFault_Handler+0x4>

08000860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000864:	e7fe      	b.n	8000864 <MemManage_Handler+0x4>

08000866 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800086a:	e7fe      	b.n	800086a <BusFault_Handler+0x4>

0800086c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000870:	e7fe      	b.n	8000870 <UsageFault_Handler+0x4>

08000872 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr

0800088e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a0:	f000 f8a8 	bl	80009f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <SPI5_IRQHandler>:

/**
  * @brief This function handles SPI5 global interrupt.
  */
void SPI5_IRQHandler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 80008ac:	4802      	ldr	r0, [pc, #8]	; (80008b8 <SPI5_IRQHandler+0x10>)
 80008ae:	f003 f8f9 	bl	8003aa4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI5_IRQn 1 */

  /* USER CODE END SPI5_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000030 	.word	0x20000030

080008bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80008bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008f4 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80008c0:	f7ff fd0a 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80008c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80008c6:	e003      	b.n	80008d0 <LoopCopyDataInit>

080008c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80008c8:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80008ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80008cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80008ce:	3104      	adds	r1, #4

080008d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80008d0:	480a      	ldr	r0, [pc, #40]	; (80008fc <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80008d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80008d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80008d8:	d3f6      	bcc.n	80008c8 <CopyDataInit>
  ldr  r2, =_sbss
 80008da:	4a0a      	ldr	r2, [pc, #40]	; (8000904 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80008dc:	e002      	b.n	80008e4 <LoopFillZerobss>

080008de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80008de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80008e0:	f842 3b04 	str.w	r3, [r2], #4

080008e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80008e4:	4b08      	ldr	r3, [pc, #32]	; (8000908 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80008e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80008e8:	d3f9      	bcc.n	80008de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008ea:	f003 fbe9 	bl	80040c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ee:	f7ff fd8d 	bl	800040c <main>
  bx  lr    
 80008f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008f4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80008f8:	08004148 	.word	0x08004148
  ldr  r0, =_sdata
 80008fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000900:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8000904:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8000908:	200000bc 	.word	0x200000bc

0800090c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800090c:	e7fe      	b.n	800090c <ADC3_IRQHandler>
	...

08000910 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000916:	2003      	movs	r0, #3
 8000918:	f000 f968 	bl	8000bec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800091c:	f001 fbe8 	bl	80020f0 <HAL_RCC_GetSysClockFreq>
 8000920:	4601      	mov	r1, r0
 8000922:	4b15      	ldr	r3, [pc, #84]	; (8000978 <HAL_Init+0x68>)
 8000924:	699b      	ldr	r3, [r3, #24]
 8000926:	0a1b      	lsrs	r3, r3, #8
 8000928:	f003 030f 	and.w	r3, r3, #15
 800092c:	4a13      	ldr	r2, [pc, #76]	; (800097c <HAL_Init+0x6c>)
 800092e:	5cd3      	ldrb	r3, [r2, r3]
 8000930:	f003 031f 	and.w	r3, r3, #31
 8000934:	fa21 f303 	lsr.w	r3, r1, r3
 8000938:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800093a:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <HAL_Init+0x68>)
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	f003 030f 	and.w	r3, r3, #15
 8000942:	4a0e      	ldr	r2, [pc, #56]	; (800097c <HAL_Init+0x6c>)
 8000944:	5cd3      	ldrb	r3, [r2, r3]
 8000946:	f003 031f 	and.w	r3, r3, #31
 800094a:	687a      	ldr	r2, [r7, #4]
 800094c:	fa22 f303 	lsr.w	r3, r2, r3
 8000950:	4a0b      	ldr	r2, [pc, #44]	; (8000980 <HAL_Init+0x70>)
 8000952:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000954:	4a0b      	ldr	r2, [pc, #44]	; (8000984 <HAL_Init+0x74>)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800095a:	2000      	movs	r0, #0
 800095c:	f000 f814 	bl	8000988 <HAL_InitTick>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000966:	2301      	movs	r3, #1
 8000968:	e002      	b.n	8000970 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800096a:	f7ff fee1 	bl	8000730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800096e:	2300      	movs	r3, #0
}
 8000970:	4618      	mov	r0, r3
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	58024400 	.word	0x58024400
 800097c:	08004130 	.word	0x08004130
 8000980:	20000004 	.word	0x20000004
 8000984:	20000000 	.word	0x20000000

08000988 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000990:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <HAL_InitTick+0x60>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d101      	bne.n	800099c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000998:	2301      	movs	r3, #1
 800099a:	e021      	b.n	80009e0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800099c:	4b13      	ldr	r3, [pc, #76]	; (80009ec <HAL_InitTick+0x64>)
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <HAL_InitTick+0x60>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	4619      	mov	r1, r3
 80009a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b2:	4618      	mov	r0, r3
 80009b4:	f000 f94d 	bl	8000c52 <HAL_SYSTICK_Config>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
 80009c0:	e00e      	b.n	80009e0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2b0f      	cmp	r3, #15
 80009c6:	d80a      	bhi.n	80009de <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c8:	2200      	movs	r2, #0
 80009ca:	6879      	ldr	r1, [r7, #4]
 80009cc:	f04f 30ff 	mov.w	r0, #4294967295
 80009d0:	f000 f917 	bl	8000c02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009d4:	4a06      	ldr	r2, [pc, #24]	; (80009f0 <HAL_InitTick+0x68>)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009da:	2300      	movs	r3, #0
 80009dc:	e000      	b.n	80009e0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80009de:	2301      	movs	r3, #1
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000010 	.word	0x20000010
 80009ec:	20000000 	.word	0x20000000
 80009f0:	2000000c 	.word	0x2000000c

080009f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <HAL_IncTick+0x20>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	461a      	mov	r2, r3
 80009fe:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <HAL_IncTick+0x24>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4413      	add	r3, r2
 8000a04:	4a04      	ldr	r2, [pc, #16]	; (8000a18 <HAL_IncTick+0x24>)
 8000a06:	6013      	str	r3, [r2, #0]
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	20000010 	.word	0x20000010
 8000a18:	200000b8 	.word	0x200000b8

08000a1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a20:	4b03      	ldr	r3, [pc, #12]	; (8000a30 <HAL_GetTick+0x14>)
 8000a22:	681b      	ldr	r3, [r3, #0]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	200000b8 	.word	0x200000b8

08000a34 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000a38:	4b03      	ldr	r3, [pc, #12]	; (8000a48 <HAL_GetREVID+0x14>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	0c1b      	lsrs	r3, r3, #16
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	5c001000 	.word	0x5c001000

08000a4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	f003 0307 	and.w	r3, r3, #7
 8000a5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a5c:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <__NVIC_SetPriorityGrouping+0x40>)
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a62:	68ba      	ldr	r2, [r7, #8]
 8000a64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a68:	4013      	ands	r3, r2
 8000a6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <__NVIC_SetPriorityGrouping+0x44>)
 8000a76:	4313      	orrs	r3, r2
 8000a78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a7a:	4a04      	ldr	r2, [pc, #16]	; (8000a8c <__NVIC_SetPriorityGrouping+0x40>)
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	60d3      	str	r3, [r2, #12]
}
 8000a80:	bf00      	nop
 8000a82:	3714      	adds	r7, #20
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	e000ed00 	.word	0xe000ed00
 8000a90:	05fa0000 	.word	0x05fa0000

08000a94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a98:	4b04      	ldr	r3, [pc, #16]	; (8000aac <__NVIC_GetPriorityGrouping+0x18>)
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	0a1b      	lsrs	r3, r3, #8
 8000a9e:	f003 0307 	and.w	r3, r3, #7
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000aba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	db0b      	blt.n	8000ada <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ac2:	88fb      	ldrh	r3, [r7, #6]
 8000ac4:	f003 021f 	and.w	r2, r3, #31
 8000ac8:	4907      	ldr	r1, [pc, #28]	; (8000ae8 <__NVIC_EnableIRQ+0x38>)
 8000aca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ace:	095b      	lsrs	r3, r3, #5
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ada:	bf00      	nop
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	e000e100 	.word	0xe000e100

08000aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	6039      	str	r1, [r7, #0]
 8000af6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000af8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	db0a      	blt.n	8000b16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	b2da      	uxtb	r2, r3
 8000b04:	490c      	ldr	r1, [pc, #48]	; (8000b38 <__NVIC_SetPriority+0x4c>)
 8000b06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b0a:	0112      	lsls	r2, r2, #4
 8000b0c:	b2d2      	uxtb	r2, r2
 8000b0e:	440b      	add	r3, r1
 8000b10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b14:	e00a      	b.n	8000b2c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	4908      	ldr	r1, [pc, #32]	; (8000b3c <__NVIC_SetPriority+0x50>)
 8000b1c:	88fb      	ldrh	r3, [r7, #6]
 8000b1e:	f003 030f 	and.w	r3, r3, #15
 8000b22:	3b04      	subs	r3, #4
 8000b24:	0112      	lsls	r2, r2, #4
 8000b26:	b2d2      	uxtb	r2, r2
 8000b28:	440b      	add	r3, r1
 8000b2a:	761a      	strb	r2, [r3, #24]
}
 8000b2c:	bf00      	nop
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	e000e100 	.word	0xe000e100
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b089      	sub	sp, #36	; 0x24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	f003 0307 	and.w	r3, r3, #7
 8000b52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b54:	69fb      	ldr	r3, [r7, #28]
 8000b56:	f1c3 0307 	rsb	r3, r3, #7
 8000b5a:	2b04      	cmp	r3, #4
 8000b5c:	bf28      	it	cs
 8000b5e:	2304      	movcs	r3, #4
 8000b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	3304      	adds	r3, #4
 8000b66:	2b06      	cmp	r3, #6
 8000b68:	d902      	bls.n	8000b70 <NVIC_EncodePriority+0x30>
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	3b03      	subs	r3, #3
 8000b6e:	e000      	b.n	8000b72 <NVIC_EncodePriority+0x32>
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b74:	f04f 32ff 	mov.w	r2, #4294967295
 8000b78:	69bb      	ldr	r3, [r7, #24]
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	43da      	mvns	r2, r3
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	401a      	ands	r2, r3
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b88:	f04f 31ff 	mov.w	r1, #4294967295
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b92:	43d9      	mvns	r1, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b98:	4313      	orrs	r3, r2
         );
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3724      	adds	r7, #36	; 0x24
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
	...

08000ba8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bb8:	d301      	bcc.n	8000bbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e00f      	b.n	8000bde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bbe:	4a0a      	ldr	r2, [pc, #40]	; (8000be8 <SysTick_Config+0x40>)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bc6:	210f      	movs	r1, #15
 8000bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bcc:	f7ff ff8e 	bl	8000aec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bd0:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <SysTick_Config+0x40>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bd6:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <SysTick_Config+0x40>)
 8000bd8:	2207      	movs	r2, #7
 8000bda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	e000e010 	.word	0xe000e010

08000bec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f7ff ff29 	bl	8000a4c <__NVIC_SetPriorityGrouping>
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b086      	sub	sp, #24
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	4603      	mov	r3, r0
 8000c0a:	60b9      	str	r1, [r7, #8]
 8000c0c:	607a      	str	r2, [r7, #4]
 8000c0e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c10:	f7ff ff40 	bl	8000a94 <__NVIC_GetPriorityGrouping>
 8000c14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	68b9      	ldr	r1, [r7, #8]
 8000c1a:	6978      	ldr	r0, [r7, #20]
 8000c1c:	f7ff ff90 	bl	8000b40 <NVIC_EncodePriority>
 8000c20:	4602      	mov	r2, r0
 8000c22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c26:	4611      	mov	r1, r2
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff ff5f 	bl	8000aec <__NVIC_SetPriority>
}
 8000c2e:	bf00      	nop
 8000c30:	3718      	adds	r7, #24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b082      	sub	sp, #8
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff ff33 	bl	8000ab0 <__NVIC_EnableIRQ>
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b082      	sub	sp, #8
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f7ff ffa4 	bl	8000ba8 <SysTick_Config>
 8000c60:	4603      	mov	r3, r0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
	...

08000c6c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d101      	bne.n	8000c7e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e205      	b.n	800108a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	d004      	beq.n	8000c94 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2280      	movs	r2, #128	; 0x80
 8000c8e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000c90:	2301      	movs	r3, #1
 8000c92:	e1fa      	b.n	800108a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a8c      	ldr	r2, [pc, #560]	; (8000ecc <HAL_DMA_Abort_IT+0x260>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d04a      	beq.n	8000d34 <HAL_DMA_Abort_IT+0xc8>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a8b      	ldr	r2, [pc, #556]	; (8000ed0 <HAL_DMA_Abort_IT+0x264>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d045      	beq.n	8000d34 <HAL_DMA_Abort_IT+0xc8>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a89      	ldr	r2, [pc, #548]	; (8000ed4 <HAL_DMA_Abort_IT+0x268>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d040      	beq.n	8000d34 <HAL_DMA_Abort_IT+0xc8>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a88      	ldr	r2, [pc, #544]	; (8000ed8 <HAL_DMA_Abort_IT+0x26c>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d03b      	beq.n	8000d34 <HAL_DMA_Abort_IT+0xc8>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a86      	ldr	r2, [pc, #536]	; (8000edc <HAL_DMA_Abort_IT+0x270>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d036      	beq.n	8000d34 <HAL_DMA_Abort_IT+0xc8>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a85      	ldr	r2, [pc, #532]	; (8000ee0 <HAL_DMA_Abort_IT+0x274>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d031      	beq.n	8000d34 <HAL_DMA_Abort_IT+0xc8>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a83      	ldr	r2, [pc, #524]	; (8000ee4 <HAL_DMA_Abort_IT+0x278>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d02c      	beq.n	8000d34 <HAL_DMA_Abort_IT+0xc8>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a82      	ldr	r2, [pc, #520]	; (8000ee8 <HAL_DMA_Abort_IT+0x27c>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d027      	beq.n	8000d34 <HAL_DMA_Abort_IT+0xc8>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a80      	ldr	r2, [pc, #512]	; (8000eec <HAL_DMA_Abort_IT+0x280>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d022      	beq.n	8000d34 <HAL_DMA_Abort_IT+0xc8>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a7f      	ldr	r2, [pc, #508]	; (8000ef0 <HAL_DMA_Abort_IT+0x284>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d01d      	beq.n	8000d34 <HAL_DMA_Abort_IT+0xc8>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a7d      	ldr	r2, [pc, #500]	; (8000ef4 <HAL_DMA_Abort_IT+0x288>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d018      	beq.n	8000d34 <HAL_DMA_Abort_IT+0xc8>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a7c      	ldr	r2, [pc, #496]	; (8000ef8 <HAL_DMA_Abort_IT+0x28c>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d013      	beq.n	8000d34 <HAL_DMA_Abort_IT+0xc8>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a7a      	ldr	r2, [pc, #488]	; (8000efc <HAL_DMA_Abort_IT+0x290>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d00e      	beq.n	8000d34 <HAL_DMA_Abort_IT+0xc8>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a79      	ldr	r2, [pc, #484]	; (8000f00 <HAL_DMA_Abort_IT+0x294>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d009      	beq.n	8000d34 <HAL_DMA_Abort_IT+0xc8>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a77      	ldr	r2, [pc, #476]	; (8000f04 <HAL_DMA_Abort_IT+0x298>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d004      	beq.n	8000d34 <HAL_DMA_Abort_IT+0xc8>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a76      	ldr	r2, [pc, #472]	; (8000f08 <HAL_DMA_Abort_IT+0x29c>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d101      	bne.n	8000d38 <HAL_DMA_Abort_IT+0xcc>
 8000d34:	2301      	movs	r3, #1
 8000d36:	e000      	b.n	8000d3a <HAL_DMA_Abort_IT+0xce>
 8000d38:	2300      	movs	r3, #0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d065      	beq.n	8000e0a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2204      	movs	r2, #4
 8000d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a60      	ldr	r2, [pc, #384]	; (8000ecc <HAL_DMA_Abort_IT+0x260>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d04a      	beq.n	8000de6 <HAL_DMA_Abort_IT+0x17a>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a5e      	ldr	r2, [pc, #376]	; (8000ed0 <HAL_DMA_Abort_IT+0x264>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d045      	beq.n	8000de6 <HAL_DMA_Abort_IT+0x17a>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a5d      	ldr	r2, [pc, #372]	; (8000ed4 <HAL_DMA_Abort_IT+0x268>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d040      	beq.n	8000de6 <HAL_DMA_Abort_IT+0x17a>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a5b      	ldr	r2, [pc, #364]	; (8000ed8 <HAL_DMA_Abort_IT+0x26c>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d03b      	beq.n	8000de6 <HAL_DMA_Abort_IT+0x17a>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a5a      	ldr	r2, [pc, #360]	; (8000edc <HAL_DMA_Abort_IT+0x270>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d036      	beq.n	8000de6 <HAL_DMA_Abort_IT+0x17a>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a58      	ldr	r2, [pc, #352]	; (8000ee0 <HAL_DMA_Abort_IT+0x274>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d031      	beq.n	8000de6 <HAL_DMA_Abort_IT+0x17a>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a57      	ldr	r2, [pc, #348]	; (8000ee4 <HAL_DMA_Abort_IT+0x278>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d02c      	beq.n	8000de6 <HAL_DMA_Abort_IT+0x17a>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a55      	ldr	r2, [pc, #340]	; (8000ee8 <HAL_DMA_Abort_IT+0x27c>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d027      	beq.n	8000de6 <HAL_DMA_Abort_IT+0x17a>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a54      	ldr	r2, [pc, #336]	; (8000eec <HAL_DMA_Abort_IT+0x280>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d022      	beq.n	8000de6 <HAL_DMA_Abort_IT+0x17a>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a52      	ldr	r2, [pc, #328]	; (8000ef0 <HAL_DMA_Abort_IT+0x284>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d01d      	beq.n	8000de6 <HAL_DMA_Abort_IT+0x17a>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a51      	ldr	r2, [pc, #324]	; (8000ef4 <HAL_DMA_Abort_IT+0x288>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d018      	beq.n	8000de6 <HAL_DMA_Abort_IT+0x17a>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a4f      	ldr	r2, [pc, #316]	; (8000ef8 <HAL_DMA_Abort_IT+0x28c>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d013      	beq.n	8000de6 <HAL_DMA_Abort_IT+0x17a>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a4e      	ldr	r2, [pc, #312]	; (8000efc <HAL_DMA_Abort_IT+0x290>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d00e      	beq.n	8000de6 <HAL_DMA_Abort_IT+0x17a>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a4c      	ldr	r2, [pc, #304]	; (8000f00 <HAL_DMA_Abort_IT+0x294>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d009      	beq.n	8000de6 <HAL_DMA_Abort_IT+0x17a>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a4b      	ldr	r2, [pc, #300]	; (8000f04 <HAL_DMA_Abort_IT+0x298>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d004      	beq.n	8000de6 <HAL_DMA_Abort_IT+0x17a>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a49      	ldr	r2, [pc, #292]	; (8000f08 <HAL_DMA_Abort_IT+0x29c>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d108      	bne.n	8000df8 <HAL_DMA_Abort_IT+0x18c>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f022 0201 	bic.w	r2, r2, #1
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	e147      	b.n	8001088 <HAL_DMA_Abort_IT+0x41c>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f022 0201 	bic.w	r2, r2, #1
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	e13e      	b.n	8001088 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f022 020e 	bic.w	r2, r2, #14
 8000e18:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a2b      	ldr	r2, [pc, #172]	; (8000ecc <HAL_DMA_Abort_IT+0x260>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d04a      	beq.n	8000eba <HAL_DMA_Abort_IT+0x24e>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a29      	ldr	r2, [pc, #164]	; (8000ed0 <HAL_DMA_Abort_IT+0x264>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d045      	beq.n	8000eba <HAL_DMA_Abort_IT+0x24e>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a28      	ldr	r2, [pc, #160]	; (8000ed4 <HAL_DMA_Abort_IT+0x268>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d040      	beq.n	8000eba <HAL_DMA_Abort_IT+0x24e>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a26      	ldr	r2, [pc, #152]	; (8000ed8 <HAL_DMA_Abort_IT+0x26c>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d03b      	beq.n	8000eba <HAL_DMA_Abort_IT+0x24e>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a25      	ldr	r2, [pc, #148]	; (8000edc <HAL_DMA_Abort_IT+0x270>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d036      	beq.n	8000eba <HAL_DMA_Abort_IT+0x24e>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a23      	ldr	r2, [pc, #140]	; (8000ee0 <HAL_DMA_Abort_IT+0x274>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d031      	beq.n	8000eba <HAL_DMA_Abort_IT+0x24e>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a22      	ldr	r2, [pc, #136]	; (8000ee4 <HAL_DMA_Abort_IT+0x278>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d02c      	beq.n	8000eba <HAL_DMA_Abort_IT+0x24e>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a20      	ldr	r2, [pc, #128]	; (8000ee8 <HAL_DMA_Abort_IT+0x27c>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d027      	beq.n	8000eba <HAL_DMA_Abort_IT+0x24e>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a1f      	ldr	r2, [pc, #124]	; (8000eec <HAL_DMA_Abort_IT+0x280>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d022      	beq.n	8000eba <HAL_DMA_Abort_IT+0x24e>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a1d      	ldr	r2, [pc, #116]	; (8000ef0 <HAL_DMA_Abort_IT+0x284>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d01d      	beq.n	8000eba <HAL_DMA_Abort_IT+0x24e>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a1c      	ldr	r2, [pc, #112]	; (8000ef4 <HAL_DMA_Abort_IT+0x288>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d018      	beq.n	8000eba <HAL_DMA_Abort_IT+0x24e>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a1a      	ldr	r2, [pc, #104]	; (8000ef8 <HAL_DMA_Abort_IT+0x28c>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d013      	beq.n	8000eba <HAL_DMA_Abort_IT+0x24e>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a19      	ldr	r2, [pc, #100]	; (8000efc <HAL_DMA_Abort_IT+0x290>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d00e      	beq.n	8000eba <HAL_DMA_Abort_IT+0x24e>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a17      	ldr	r2, [pc, #92]	; (8000f00 <HAL_DMA_Abort_IT+0x294>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d009      	beq.n	8000eba <HAL_DMA_Abort_IT+0x24e>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a16      	ldr	r2, [pc, #88]	; (8000f04 <HAL_DMA_Abort_IT+0x298>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d004      	beq.n	8000eba <HAL_DMA_Abort_IT+0x24e>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a14      	ldr	r2, [pc, #80]	; (8000f08 <HAL_DMA_Abort_IT+0x29c>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d128      	bne.n	8000f0c <HAL_DMA_Abort_IT+0x2a0>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f022 0201 	bic.w	r2, r2, #1
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	e027      	b.n	8000f1c <HAL_DMA_Abort_IT+0x2b0>
 8000ecc:	40020010 	.word	0x40020010
 8000ed0:	40020028 	.word	0x40020028
 8000ed4:	40020040 	.word	0x40020040
 8000ed8:	40020058 	.word	0x40020058
 8000edc:	40020070 	.word	0x40020070
 8000ee0:	40020088 	.word	0x40020088
 8000ee4:	400200a0 	.word	0x400200a0
 8000ee8:	400200b8 	.word	0x400200b8
 8000eec:	40020410 	.word	0x40020410
 8000ef0:	40020428 	.word	0x40020428
 8000ef4:	40020440 	.word	0x40020440
 8000ef8:	40020458 	.word	0x40020458
 8000efc:	40020470 	.word	0x40020470
 8000f00:	40020488 	.word	0x40020488
 8000f04:	400204a0 	.word	0x400204a0
 8000f08:	400204b8 	.word	0x400204b8
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f022 0201 	bic.w	r2, r2, #1
 8000f1a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a5c      	ldr	r2, [pc, #368]	; (8001094 <HAL_DMA_Abort_IT+0x428>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d072      	beq.n	800100c <HAL_DMA_Abort_IT+0x3a0>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a5b      	ldr	r2, [pc, #364]	; (8001098 <HAL_DMA_Abort_IT+0x42c>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d06d      	beq.n	800100c <HAL_DMA_Abort_IT+0x3a0>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a59      	ldr	r2, [pc, #356]	; (800109c <HAL_DMA_Abort_IT+0x430>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d068      	beq.n	800100c <HAL_DMA_Abort_IT+0x3a0>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a58      	ldr	r2, [pc, #352]	; (80010a0 <HAL_DMA_Abort_IT+0x434>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d063      	beq.n	800100c <HAL_DMA_Abort_IT+0x3a0>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a56      	ldr	r2, [pc, #344]	; (80010a4 <HAL_DMA_Abort_IT+0x438>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d05e      	beq.n	800100c <HAL_DMA_Abort_IT+0x3a0>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a55      	ldr	r2, [pc, #340]	; (80010a8 <HAL_DMA_Abort_IT+0x43c>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d059      	beq.n	800100c <HAL_DMA_Abort_IT+0x3a0>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a53      	ldr	r2, [pc, #332]	; (80010ac <HAL_DMA_Abort_IT+0x440>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d054      	beq.n	800100c <HAL_DMA_Abort_IT+0x3a0>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a52      	ldr	r2, [pc, #328]	; (80010b0 <HAL_DMA_Abort_IT+0x444>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d04f      	beq.n	800100c <HAL_DMA_Abort_IT+0x3a0>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a50      	ldr	r2, [pc, #320]	; (80010b4 <HAL_DMA_Abort_IT+0x448>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d04a      	beq.n	800100c <HAL_DMA_Abort_IT+0x3a0>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a4f      	ldr	r2, [pc, #316]	; (80010b8 <HAL_DMA_Abort_IT+0x44c>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d045      	beq.n	800100c <HAL_DMA_Abort_IT+0x3a0>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a4d      	ldr	r2, [pc, #308]	; (80010bc <HAL_DMA_Abort_IT+0x450>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d040      	beq.n	800100c <HAL_DMA_Abort_IT+0x3a0>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a4c      	ldr	r2, [pc, #304]	; (80010c0 <HAL_DMA_Abort_IT+0x454>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d03b      	beq.n	800100c <HAL_DMA_Abort_IT+0x3a0>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a4a      	ldr	r2, [pc, #296]	; (80010c4 <HAL_DMA_Abort_IT+0x458>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d036      	beq.n	800100c <HAL_DMA_Abort_IT+0x3a0>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a49      	ldr	r2, [pc, #292]	; (80010c8 <HAL_DMA_Abort_IT+0x45c>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d031      	beq.n	800100c <HAL_DMA_Abort_IT+0x3a0>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a47      	ldr	r2, [pc, #284]	; (80010cc <HAL_DMA_Abort_IT+0x460>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d02c      	beq.n	800100c <HAL_DMA_Abort_IT+0x3a0>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a46      	ldr	r2, [pc, #280]	; (80010d0 <HAL_DMA_Abort_IT+0x464>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d027      	beq.n	800100c <HAL_DMA_Abort_IT+0x3a0>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a44      	ldr	r2, [pc, #272]	; (80010d4 <HAL_DMA_Abort_IT+0x468>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d022      	beq.n	800100c <HAL_DMA_Abort_IT+0x3a0>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a43      	ldr	r2, [pc, #268]	; (80010d8 <HAL_DMA_Abort_IT+0x46c>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d01d      	beq.n	800100c <HAL_DMA_Abort_IT+0x3a0>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a41      	ldr	r2, [pc, #260]	; (80010dc <HAL_DMA_Abort_IT+0x470>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d018      	beq.n	800100c <HAL_DMA_Abort_IT+0x3a0>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a40      	ldr	r2, [pc, #256]	; (80010e0 <HAL_DMA_Abort_IT+0x474>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d013      	beq.n	800100c <HAL_DMA_Abort_IT+0x3a0>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a3e      	ldr	r2, [pc, #248]	; (80010e4 <HAL_DMA_Abort_IT+0x478>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d00e      	beq.n	800100c <HAL_DMA_Abort_IT+0x3a0>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a3d      	ldr	r2, [pc, #244]	; (80010e8 <HAL_DMA_Abort_IT+0x47c>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d009      	beq.n	800100c <HAL_DMA_Abort_IT+0x3a0>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a3b      	ldr	r2, [pc, #236]	; (80010ec <HAL_DMA_Abort_IT+0x480>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d004      	beq.n	800100c <HAL_DMA_Abort_IT+0x3a0>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a3a      	ldr	r2, [pc, #232]	; (80010f0 <HAL_DMA_Abort_IT+0x484>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d101      	bne.n	8001010 <HAL_DMA_Abort_IT+0x3a4>
 800100c:	2301      	movs	r3, #1
 800100e:	e000      	b.n	8001012 <HAL_DMA_Abort_IT+0x3a6>
 8001010:	2300      	movs	r3, #0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d028      	beq.n	8001068 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001020:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001024:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001030:	f003 031f 	and.w	r3, r3, #31
 8001034:	2201      	movs	r2, #1
 8001036:	409a      	lsls	r2, r3
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001044:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800104a:	2b00      	cmp	r3, #0
 800104c:	d00c      	beq.n	8001068 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001058:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800105c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001066:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2201      	movs	r2, #1
 8001074:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800107c:	2b00      	cmp	r3, #0
 800107e:	d003      	beq.n	8001088 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40020010 	.word	0x40020010
 8001098:	40020028 	.word	0x40020028
 800109c:	40020040 	.word	0x40020040
 80010a0:	40020058 	.word	0x40020058
 80010a4:	40020070 	.word	0x40020070
 80010a8:	40020088 	.word	0x40020088
 80010ac:	400200a0 	.word	0x400200a0
 80010b0:	400200b8 	.word	0x400200b8
 80010b4:	40020410 	.word	0x40020410
 80010b8:	40020428 	.word	0x40020428
 80010bc:	40020440 	.word	0x40020440
 80010c0:	40020458 	.word	0x40020458
 80010c4:	40020470 	.word	0x40020470
 80010c8:	40020488 	.word	0x40020488
 80010cc:	400204a0 	.word	0x400204a0
 80010d0:	400204b8 	.word	0x400204b8
 80010d4:	58025408 	.word	0x58025408
 80010d8:	5802541c 	.word	0x5802541c
 80010dc:	58025430 	.word	0x58025430
 80010e0:	58025444 	.word	0x58025444
 80010e4:	58025458 	.word	0x58025458
 80010e8:	5802546c 	.word	0x5802546c
 80010ec:	58025480 	.word	0x58025480
 80010f0:	58025494 	.word	0x58025494

080010f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b089      	sub	sp, #36	; 0x24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001102:	4b89      	ldr	r3, [pc, #548]	; (8001328 <HAL_GPIO_Init+0x234>)
 8001104:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001106:	e194      	b.n	8001432 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	2101      	movs	r1, #1
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	fa01 f303 	lsl.w	r3, r1, r3
 8001114:	4013      	ands	r3, r2
 8001116:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	2b00      	cmp	r3, #0
 800111c:	f000 8186 	beq.w	800142c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d00b      	beq.n	8001140 <HAL_GPIO_Init+0x4c>
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	2b02      	cmp	r3, #2
 800112e:	d007      	beq.n	8001140 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001134:	2b11      	cmp	r3, #17
 8001136:	d003      	beq.n	8001140 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	2b12      	cmp	r3, #18
 800113e:	d130      	bne.n	80011a2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	2203      	movs	r2, #3
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4013      	ands	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	68da      	ldr	r2, [r3, #12]
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4313      	orrs	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001176:	2201      	movs	r2, #1
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43db      	mvns	r3, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4013      	ands	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	091b      	lsrs	r3, r3, #4
 800118c:	f003 0201 	and.w	r2, r3, #1
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4313      	orrs	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	2203      	movs	r2, #3
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43db      	mvns	r3, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4013      	ands	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	689a      	ldr	r2, [r3, #8]
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d003      	beq.n	80011e2 <HAL_GPIO_Init+0xee>
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2b12      	cmp	r3, #18
 80011e0:	d123      	bne.n	800122a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	08da      	lsrs	r2, r3, #3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	3208      	adds	r2, #8
 80011ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	220f      	movs	r2, #15
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	691a      	ldr	r2, [r3, #16]
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	f003 0307 	and.w	r3, r3, #7
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4313      	orrs	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	08da      	lsrs	r2, r3, #3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3208      	adds	r2, #8
 8001224:	69b9      	ldr	r1, [r7, #24]
 8001226:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	2203      	movs	r2, #3
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43db      	mvns	r3, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4013      	ands	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f003 0203 	and.w	r2, r3, #3
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4313      	orrs	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001266:	2b00      	cmp	r3, #0
 8001268:	f000 80e0 	beq.w	800142c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126c:	4b2f      	ldr	r3, [pc, #188]	; (800132c <HAL_GPIO_Init+0x238>)
 800126e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001272:	4a2e      	ldr	r2, [pc, #184]	; (800132c <HAL_GPIO_Init+0x238>)
 8001274:	f043 0302 	orr.w	r3, r3, #2
 8001278:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800127c:	4b2b      	ldr	r3, [pc, #172]	; (800132c <HAL_GPIO_Init+0x238>)
 800127e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800128a:	4a29      	ldr	r2, [pc, #164]	; (8001330 <HAL_GPIO_Init+0x23c>)
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	089b      	lsrs	r3, r3, #2
 8001290:	3302      	adds	r3, #2
 8001292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001296:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	f003 0303 	and.w	r3, r3, #3
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	220f      	movs	r2, #15
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4013      	ands	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a20      	ldr	r2, [pc, #128]	; (8001334 <HAL_GPIO_Init+0x240>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d052      	beq.n	800135c <HAL_GPIO_Init+0x268>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a1f      	ldr	r2, [pc, #124]	; (8001338 <HAL_GPIO_Init+0x244>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d031      	beq.n	8001322 <HAL_GPIO_Init+0x22e>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a1e      	ldr	r2, [pc, #120]	; (800133c <HAL_GPIO_Init+0x248>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d02b      	beq.n	800131e <HAL_GPIO_Init+0x22a>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a1d      	ldr	r2, [pc, #116]	; (8001340 <HAL_GPIO_Init+0x24c>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d025      	beq.n	800131a <HAL_GPIO_Init+0x226>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a1c      	ldr	r2, [pc, #112]	; (8001344 <HAL_GPIO_Init+0x250>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d01f      	beq.n	8001316 <HAL_GPIO_Init+0x222>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a1b      	ldr	r2, [pc, #108]	; (8001348 <HAL_GPIO_Init+0x254>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d019      	beq.n	8001312 <HAL_GPIO_Init+0x21e>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a1a      	ldr	r2, [pc, #104]	; (800134c <HAL_GPIO_Init+0x258>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d013      	beq.n	800130e <HAL_GPIO_Init+0x21a>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a19      	ldr	r2, [pc, #100]	; (8001350 <HAL_GPIO_Init+0x25c>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d00d      	beq.n	800130a <HAL_GPIO_Init+0x216>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a18      	ldr	r2, [pc, #96]	; (8001354 <HAL_GPIO_Init+0x260>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d007      	beq.n	8001306 <HAL_GPIO_Init+0x212>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a17      	ldr	r2, [pc, #92]	; (8001358 <HAL_GPIO_Init+0x264>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d101      	bne.n	8001302 <HAL_GPIO_Init+0x20e>
 80012fe:	2309      	movs	r3, #9
 8001300:	e02d      	b.n	800135e <HAL_GPIO_Init+0x26a>
 8001302:	230a      	movs	r3, #10
 8001304:	e02b      	b.n	800135e <HAL_GPIO_Init+0x26a>
 8001306:	2308      	movs	r3, #8
 8001308:	e029      	b.n	800135e <HAL_GPIO_Init+0x26a>
 800130a:	2307      	movs	r3, #7
 800130c:	e027      	b.n	800135e <HAL_GPIO_Init+0x26a>
 800130e:	2306      	movs	r3, #6
 8001310:	e025      	b.n	800135e <HAL_GPIO_Init+0x26a>
 8001312:	2305      	movs	r3, #5
 8001314:	e023      	b.n	800135e <HAL_GPIO_Init+0x26a>
 8001316:	2304      	movs	r3, #4
 8001318:	e021      	b.n	800135e <HAL_GPIO_Init+0x26a>
 800131a:	2303      	movs	r3, #3
 800131c:	e01f      	b.n	800135e <HAL_GPIO_Init+0x26a>
 800131e:	2302      	movs	r3, #2
 8001320:	e01d      	b.n	800135e <HAL_GPIO_Init+0x26a>
 8001322:	2301      	movs	r3, #1
 8001324:	e01b      	b.n	800135e <HAL_GPIO_Init+0x26a>
 8001326:	bf00      	nop
 8001328:	58000080 	.word	0x58000080
 800132c:	58024400 	.word	0x58024400
 8001330:	58000400 	.word	0x58000400
 8001334:	58020000 	.word	0x58020000
 8001338:	58020400 	.word	0x58020400
 800133c:	58020800 	.word	0x58020800
 8001340:	58020c00 	.word	0x58020c00
 8001344:	58021000 	.word	0x58021000
 8001348:	58021400 	.word	0x58021400
 800134c:	58021800 	.word	0x58021800
 8001350:	58021c00 	.word	0x58021c00
 8001354:	58022000 	.word	0x58022000
 8001358:	58022400 	.word	0x58022400
 800135c:	2300      	movs	r3, #0
 800135e:	69fa      	ldr	r2, [r7, #28]
 8001360:	f002 0203 	and.w	r2, r2, #3
 8001364:	0092      	lsls	r2, r2, #2
 8001366:	4093      	lsls	r3, r2
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800136e:	4938      	ldr	r1, [pc, #224]	; (8001450 <HAL_GPIO_Init+0x35c>)
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	089b      	lsrs	r3, r3, #2
 8001374:	3302      	adds	r3, #2
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d003      	beq.n	80013a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	4313      	orrs	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4013      	ands	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	43db      	mvns	r3, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4013      	ands	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80013f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80013fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	43db      	mvns	r3, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4013      	ands	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d003      	beq.n	8001424 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	4313      	orrs	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001424:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	3301      	adds	r3, #1
 8001430:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	fa22 f303 	lsr.w	r3, r2, r3
 800143c:	2b00      	cmp	r3, #0
 800143e:	f47f ae63 	bne.w	8001108 <HAL_GPIO_Init+0x14>
  }
}
 8001442:	bf00      	nop
 8001444:	3724      	adds	r7, #36	; 0x24
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	58000400 	.word	0x58000400

08001454 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800145c:	4a08      	ldr	r2, [pc, #32]	; (8001480 <HAL_HSEM_FastTake+0x2c>)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	3320      	adds	r3, #32
 8001462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001466:	4a07      	ldr	r2, [pc, #28]	; (8001484 <HAL_HSEM_FastTake+0x30>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d101      	bne.n	8001470 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800146c:	2300      	movs	r3, #0
 800146e:	e000      	b.n	8001472 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
}
 8001472:	4618      	mov	r0, r3
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	58026400 	.word	0x58026400
 8001484:	80000300 	.word	0x80000300

08001488 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001492:	4906      	ldr	r1, [pc, #24]	; (80014ac <HAL_HSEM_Release+0x24>)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	58026400 	.word	0x58026400

080014b0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80014b8:	4b29      	ldr	r3, [pc, #164]	; (8001560 <HAL_PWREx_ConfigSupply+0xb0>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	f003 0307 	and.w	r3, r3, #7
 80014c0:	2b06      	cmp	r3, #6
 80014c2:	d00a      	beq.n	80014da <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80014c4:	4b26      	ldr	r3, [pc, #152]	; (8001560 <HAL_PWREx_ConfigSupply+0xb0>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d001      	beq.n	80014d6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e040      	b.n	8001558 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80014d6:	2300      	movs	r3, #0
 80014d8:	e03e      	b.n	8001558 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80014da:	4b21      	ldr	r3, [pc, #132]	; (8001560 <HAL_PWREx_ConfigSupply+0xb0>)
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80014e2:	491f      	ldr	r1, [pc, #124]	; (8001560 <HAL_PWREx_ConfigSupply+0xb0>)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80014ea:	f7ff fa97 	bl	8000a1c <HAL_GetTick>
 80014ee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80014f0:	e009      	b.n	8001506 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80014f2:	f7ff fa93 	bl	8000a1c <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001500:	d901      	bls.n	8001506 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e028      	b.n	8001558 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001506:	4b16      	ldr	r3, [pc, #88]	; (8001560 <HAL_PWREx_ConfigSupply+0xb0>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800150e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001512:	d1ee      	bne.n	80014f2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2b1e      	cmp	r3, #30
 8001518:	d008      	beq.n	800152c <HAL_PWREx_ConfigSupply+0x7c>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2b2e      	cmp	r3, #46	; 0x2e
 800151e:	d005      	beq.n	800152c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b1d      	cmp	r3, #29
 8001524:	d002      	beq.n	800152c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b2d      	cmp	r3, #45	; 0x2d
 800152a:	d114      	bne.n	8001556 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800152c:	f7ff fa76 	bl	8000a1c <HAL_GetTick>
 8001530:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001532:	e009      	b.n	8001548 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001534:	f7ff fa72 	bl	8000a1c <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001542:	d901      	bls.n	8001548 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e007      	b.n	8001558 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <HAL_PWREx_ConfigSupply+0xb0>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001554:	d1ee      	bne.n	8001534 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	58024800 	.word	0x58024800

08001564 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08c      	sub	sp, #48	; 0x30
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e3ff      	b.n	8001d76 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	2b00      	cmp	r3, #0
 8001580:	f000 8087 	beq.w	8001692 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001584:	4b99      	ldr	r3, [pc, #612]	; (80017ec <HAL_RCC_OscConfig+0x288>)
 8001586:	691b      	ldr	r3, [r3, #16]
 8001588:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800158c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800158e:	4b97      	ldr	r3, [pc, #604]	; (80017ec <HAL_RCC_OscConfig+0x288>)
 8001590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001592:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001596:	2b10      	cmp	r3, #16
 8001598:	d007      	beq.n	80015aa <HAL_RCC_OscConfig+0x46>
 800159a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800159c:	2b18      	cmp	r3, #24
 800159e:	d110      	bne.n	80015c2 <HAL_RCC_OscConfig+0x5e>
 80015a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a2:	f003 0303 	and.w	r3, r3, #3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d10b      	bne.n	80015c2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015aa:	4b90      	ldr	r3, [pc, #576]	; (80017ec <HAL_RCC_OscConfig+0x288>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d06c      	beq.n	8001690 <HAL_RCC_OscConfig+0x12c>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d168      	bne.n	8001690 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e3d9      	b.n	8001d76 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ca:	d106      	bne.n	80015da <HAL_RCC_OscConfig+0x76>
 80015cc:	4b87      	ldr	r3, [pc, #540]	; (80017ec <HAL_RCC_OscConfig+0x288>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a86      	ldr	r2, [pc, #536]	; (80017ec <HAL_RCC_OscConfig+0x288>)
 80015d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d6:	6013      	str	r3, [r2, #0]
 80015d8:	e02e      	b.n	8001638 <HAL_RCC_OscConfig+0xd4>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d10c      	bne.n	80015fc <HAL_RCC_OscConfig+0x98>
 80015e2:	4b82      	ldr	r3, [pc, #520]	; (80017ec <HAL_RCC_OscConfig+0x288>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a81      	ldr	r2, [pc, #516]	; (80017ec <HAL_RCC_OscConfig+0x288>)
 80015e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ec:	6013      	str	r3, [r2, #0]
 80015ee:	4b7f      	ldr	r3, [pc, #508]	; (80017ec <HAL_RCC_OscConfig+0x288>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a7e      	ldr	r2, [pc, #504]	; (80017ec <HAL_RCC_OscConfig+0x288>)
 80015f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015f8:	6013      	str	r3, [r2, #0]
 80015fa:	e01d      	b.n	8001638 <HAL_RCC_OscConfig+0xd4>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001604:	d10c      	bne.n	8001620 <HAL_RCC_OscConfig+0xbc>
 8001606:	4b79      	ldr	r3, [pc, #484]	; (80017ec <HAL_RCC_OscConfig+0x288>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a78      	ldr	r2, [pc, #480]	; (80017ec <HAL_RCC_OscConfig+0x288>)
 800160c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	4b76      	ldr	r3, [pc, #472]	; (80017ec <HAL_RCC_OscConfig+0x288>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a75      	ldr	r2, [pc, #468]	; (80017ec <HAL_RCC_OscConfig+0x288>)
 8001618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800161c:	6013      	str	r3, [r2, #0]
 800161e:	e00b      	b.n	8001638 <HAL_RCC_OscConfig+0xd4>
 8001620:	4b72      	ldr	r3, [pc, #456]	; (80017ec <HAL_RCC_OscConfig+0x288>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a71      	ldr	r2, [pc, #452]	; (80017ec <HAL_RCC_OscConfig+0x288>)
 8001626:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800162a:	6013      	str	r3, [r2, #0]
 800162c:	4b6f      	ldr	r3, [pc, #444]	; (80017ec <HAL_RCC_OscConfig+0x288>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a6e      	ldr	r2, [pc, #440]	; (80017ec <HAL_RCC_OscConfig+0x288>)
 8001632:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001636:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d013      	beq.n	8001668 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001640:	f7ff f9ec 	bl	8000a1c <HAL_GetTick>
 8001644:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001648:	f7ff f9e8 	bl	8000a1c <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b64      	cmp	r3, #100	; 0x64
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e38d      	b.n	8001d76 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800165a:	4b64      	ldr	r3, [pc, #400]	; (80017ec <HAL_RCC_OscConfig+0x288>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0f0      	beq.n	8001648 <HAL_RCC_OscConfig+0xe4>
 8001666:	e014      	b.n	8001692 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001668:	f7ff f9d8 	bl	8000a1c <HAL_GetTick>
 800166c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001670:	f7ff f9d4 	bl	8000a1c <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b64      	cmp	r3, #100	; 0x64
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e379      	b.n	8001d76 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001682:	4b5a      	ldr	r3, [pc, #360]	; (80017ec <HAL_RCC_OscConfig+0x288>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1f0      	bne.n	8001670 <HAL_RCC_OscConfig+0x10c>
 800168e:	e000      	b.n	8001692 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001690:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	f000 80ae 	beq.w	80017fc <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016a0:	4b52      	ldr	r3, [pc, #328]	; (80017ec <HAL_RCC_OscConfig+0x288>)
 80016a2:	691b      	ldr	r3, [r3, #16]
 80016a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016a8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80016aa:	4b50      	ldr	r3, [pc, #320]	; (80017ec <HAL_RCC_OscConfig+0x288>)
 80016ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ae:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80016b0:	6a3b      	ldr	r3, [r7, #32]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d007      	beq.n	80016c6 <HAL_RCC_OscConfig+0x162>
 80016b6:	6a3b      	ldr	r3, [r7, #32]
 80016b8:	2b18      	cmp	r3, #24
 80016ba:	d13a      	bne.n	8001732 <HAL_RCC_OscConfig+0x1ce>
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	f003 0303 	and.w	r3, r3, #3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d135      	bne.n	8001732 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016c6:	4b49      	ldr	r3, [pc, #292]	; (80017ec <HAL_RCC_OscConfig+0x288>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0304 	and.w	r3, r3, #4
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d005      	beq.n	80016de <HAL_RCC_OscConfig+0x17a>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d101      	bne.n	80016de <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e34b      	b.n	8001d76 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016de:	f7ff f9a9 	bl	8000a34 <HAL_GetREVID>
 80016e2:	4602      	mov	r2, r0
 80016e4:	f241 0303 	movw	r3, #4099	; 0x1003
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d817      	bhi.n	800171c <HAL_RCC_OscConfig+0x1b8>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	691b      	ldr	r3, [r3, #16]
 80016f0:	2b40      	cmp	r3, #64	; 0x40
 80016f2:	d108      	bne.n	8001706 <HAL_RCC_OscConfig+0x1a2>
 80016f4:	4b3d      	ldr	r3, [pc, #244]	; (80017ec <HAL_RCC_OscConfig+0x288>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80016fc:	4a3b      	ldr	r2, [pc, #236]	; (80017ec <HAL_RCC_OscConfig+0x288>)
 80016fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001702:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001704:	e07a      	b.n	80017fc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001706:	4b39      	ldr	r3, [pc, #228]	; (80017ec <HAL_RCC_OscConfig+0x288>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	031b      	lsls	r3, r3, #12
 8001714:	4935      	ldr	r1, [pc, #212]	; (80017ec <HAL_RCC_OscConfig+0x288>)
 8001716:	4313      	orrs	r3, r2
 8001718:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800171a:	e06f      	b.n	80017fc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800171c:	4b33      	ldr	r3, [pc, #204]	; (80017ec <HAL_RCC_OscConfig+0x288>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	061b      	lsls	r3, r3, #24
 800172a:	4930      	ldr	r1, [pc, #192]	; (80017ec <HAL_RCC_OscConfig+0x288>)
 800172c:	4313      	orrs	r3, r2
 800172e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001730:	e064      	b.n	80017fc <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d045      	beq.n	80017c6 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800173a:	4b2c      	ldr	r3, [pc, #176]	; (80017ec <HAL_RCC_OscConfig+0x288>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f023 0219 	bic.w	r2, r3, #25
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	4929      	ldr	r1, [pc, #164]	; (80017ec <HAL_RCC_OscConfig+0x288>)
 8001748:	4313      	orrs	r3, r2
 800174a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174c:	f7ff f966 	bl	8000a1c <HAL_GetTick>
 8001750:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001754:	f7ff f962 	bl	8000a1c <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e307      	b.n	8001d76 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001766:	4b21      	ldr	r3, [pc, #132]	; (80017ec <HAL_RCC_OscConfig+0x288>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0304 	and.w	r3, r3, #4
 800176e:	2b00      	cmp	r3, #0
 8001770:	d0f0      	beq.n	8001754 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001772:	f7ff f95f 	bl	8000a34 <HAL_GetREVID>
 8001776:	4602      	mov	r2, r0
 8001778:	f241 0303 	movw	r3, #4099	; 0x1003
 800177c:	429a      	cmp	r2, r3
 800177e:	d817      	bhi.n	80017b0 <HAL_RCC_OscConfig+0x24c>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	691b      	ldr	r3, [r3, #16]
 8001784:	2b40      	cmp	r3, #64	; 0x40
 8001786:	d108      	bne.n	800179a <HAL_RCC_OscConfig+0x236>
 8001788:	4b18      	ldr	r3, [pc, #96]	; (80017ec <HAL_RCC_OscConfig+0x288>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001790:	4a16      	ldr	r2, [pc, #88]	; (80017ec <HAL_RCC_OscConfig+0x288>)
 8001792:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001796:	6053      	str	r3, [r2, #4]
 8001798:	e030      	b.n	80017fc <HAL_RCC_OscConfig+0x298>
 800179a:	4b14      	ldr	r3, [pc, #80]	; (80017ec <HAL_RCC_OscConfig+0x288>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	691b      	ldr	r3, [r3, #16]
 80017a6:	031b      	lsls	r3, r3, #12
 80017a8:	4910      	ldr	r1, [pc, #64]	; (80017ec <HAL_RCC_OscConfig+0x288>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	604b      	str	r3, [r1, #4]
 80017ae:	e025      	b.n	80017fc <HAL_RCC_OscConfig+0x298>
 80017b0:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <HAL_RCC_OscConfig+0x288>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	061b      	lsls	r3, r3, #24
 80017be:	490b      	ldr	r1, [pc, #44]	; (80017ec <HAL_RCC_OscConfig+0x288>)
 80017c0:	4313      	orrs	r3, r2
 80017c2:	604b      	str	r3, [r1, #4]
 80017c4:	e01a      	b.n	80017fc <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017c6:	4b09      	ldr	r3, [pc, #36]	; (80017ec <HAL_RCC_OscConfig+0x288>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a08      	ldr	r2, [pc, #32]	; (80017ec <HAL_RCC_OscConfig+0x288>)
 80017cc:	f023 0301 	bic.w	r3, r3, #1
 80017d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d2:	f7ff f923 	bl	8000a1c <HAL_GetTick>
 80017d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80017d8:	e00a      	b.n	80017f0 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017da:	f7ff f91f 	bl	8000a1c <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d903      	bls.n	80017f0 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e2c4      	b.n	8001d76 <HAL_RCC_OscConfig+0x812>
 80017ec:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80017f0:	4ba4      	ldr	r3, [pc, #656]	; (8001a84 <HAL_RCC_OscConfig+0x520>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1ee      	bne.n	80017da <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0310 	and.w	r3, r3, #16
 8001804:	2b00      	cmp	r3, #0
 8001806:	f000 80a9 	beq.w	800195c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800180a:	4b9e      	ldr	r3, [pc, #632]	; (8001a84 <HAL_RCC_OscConfig+0x520>)
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001812:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001814:	4b9b      	ldr	r3, [pc, #620]	; (8001a84 <HAL_RCC_OscConfig+0x520>)
 8001816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001818:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	2b08      	cmp	r3, #8
 800181e:	d007      	beq.n	8001830 <HAL_RCC_OscConfig+0x2cc>
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	2b18      	cmp	r3, #24
 8001824:	d13a      	bne.n	800189c <HAL_RCC_OscConfig+0x338>
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	f003 0303 	and.w	r3, r3, #3
 800182c:	2b01      	cmp	r3, #1
 800182e:	d135      	bne.n	800189c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001830:	4b94      	ldr	r3, [pc, #592]	; (8001a84 <HAL_RCC_OscConfig+0x520>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001838:	2b00      	cmp	r3, #0
 800183a:	d005      	beq.n	8001848 <HAL_RCC_OscConfig+0x2e4>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	69db      	ldr	r3, [r3, #28]
 8001840:	2b80      	cmp	r3, #128	; 0x80
 8001842:	d001      	beq.n	8001848 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e296      	b.n	8001d76 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001848:	f7ff f8f4 	bl	8000a34 <HAL_GetREVID>
 800184c:	4602      	mov	r2, r0
 800184e:	f241 0303 	movw	r3, #4099	; 0x1003
 8001852:	429a      	cmp	r2, r3
 8001854:	d817      	bhi.n	8001886 <HAL_RCC_OscConfig+0x322>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a1b      	ldr	r3, [r3, #32]
 800185a:	2b20      	cmp	r3, #32
 800185c:	d108      	bne.n	8001870 <HAL_RCC_OscConfig+0x30c>
 800185e:	4b89      	ldr	r3, [pc, #548]	; (8001a84 <HAL_RCC_OscConfig+0x520>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001866:	4a87      	ldr	r2, [pc, #540]	; (8001a84 <HAL_RCC_OscConfig+0x520>)
 8001868:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800186c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800186e:	e075      	b.n	800195c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001870:	4b84      	ldr	r3, [pc, #528]	; (8001a84 <HAL_RCC_OscConfig+0x520>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a1b      	ldr	r3, [r3, #32]
 800187c:	069b      	lsls	r3, r3, #26
 800187e:	4981      	ldr	r1, [pc, #516]	; (8001a84 <HAL_RCC_OscConfig+0x520>)
 8001880:	4313      	orrs	r3, r2
 8001882:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001884:	e06a      	b.n	800195c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001886:	4b7f      	ldr	r3, [pc, #508]	; (8001a84 <HAL_RCC_OscConfig+0x520>)
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a1b      	ldr	r3, [r3, #32]
 8001892:	061b      	lsls	r3, r3, #24
 8001894:	497b      	ldr	r1, [pc, #492]	; (8001a84 <HAL_RCC_OscConfig+0x520>)
 8001896:	4313      	orrs	r3, r2
 8001898:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800189a:	e05f      	b.n	800195c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69db      	ldr	r3, [r3, #28]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d042      	beq.n	800192a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80018a4:	4b77      	ldr	r3, [pc, #476]	; (8001a84 <HAL_RCC_OscConfig+0x520>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a76      	ldr	r2, [pc, #472]	; (8001a84 <HAL_RCC_OscConfig+0x520>)
 80018aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b0:	f7ff f8b4 	bl	8000a1c <HAL_GetTick>
 80018b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80018b8:	f7ff f8b0 	bl	8000a1c <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e255      	b.n	8001d76 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80018ca:	4b6e      	ldr	r3, [pc, #440]	; (8001a84 <HAL_RCC_OscConfig+0x520>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0f0      	beq.n	80018b8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80018d6:	f7ff f8ad 	bl	8000a34 <HAL_GetREVID>
 80018da:	4602      	mov	r2, r0
 80018dc:	f241 0303 	movw	r3, #4099	; 0x1003
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d817      	bhi.n	8001914 <HAL_RCC_OscConfig+0x3b0>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	2b20      	cmp	r3, #32
 80018ea:	d108      	bne.n	80018fe <HAL_RCC_OscConfig+0x39a>
 80018ec:	4b65      	ldr	r3, [pc, #404]	; (8001a84 <HAL_RCC_OscConfig+0x520>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80018f4:	4a63      	ldr	r2, [pc, #396]	; (8001a84 <HAL_RCC_OscConfig+0x520>)
 80018f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80018fa:	6053      	str	r3, [r2, #4]
 80018fc:	e02e      	b.n	800195c <HAL_RCC_OscConfig+0x3f8>
 80018fe:	4b61      	ldr	r3, [pc, #388]	; (8001a84 <HAL_RCC_OscConfig+0x520>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a1b      	ldr	r3, [r3, #32]
 800190a:	069b      	lsls	r3, r3, #26
 800190c:	495d      	ldr	r1, [pc, #372]	; (8001a84 <HAL_RCC_OscConfig+0x520>)
 800190e:	4313      	orrs	r3, r2
 8001910:	604b      	str	r3, [r1, #4]
 8001912:	e023      	b.n	800195c <HAL_RCC_OscConfig+0x3f8>
 8001914:	4b5b      	ldr	r3, [pc, #364]	; (8001a84 <HAL_RCC_OscConfig+0x520>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a1b      	ldr	r3, [r3, #32]
 8001920:	061b      	lsls	r3, r3, #24
 8001922:	4958      	ldr	r1, [pc, #352]	; (8001a84 <HAL_RCC_OscConfig+0x520>)
 8001924:	4313      	orrs	r3, r2
 8001926:	60cb      	str	r3, [r1, #12]
 8001928:	e018      	b.n	800195c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800192a:	4b56      	ldr	r3, [pc, #344]	; (8001a84 <HAL_RCC_OscConfig+0x520>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a55      	ldr	r2, [pc, #340]	; (8001a84 <HAL_RCC_OscConfig+0x520>)
 8001930:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001934:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001936:	f7ff f871 	bl	8000a1c <HAL_GetTick>
 800193a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800193c:	e008      	b.n	8001950 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800193e:	f7ff f86d 	bl	8000a1c <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e212      	b.n	8001d76 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001950:	4b4c      	ldr	r3, [pc, #304]	; (8001a84 <HAL_RCC_OscConfig+0x520>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1f0      	bne.n	800193e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0308 	and.w	r3, r3, #8
 8001964:	2b00      	cmp	r3, #0
 8001966:	d036      	beq.n	80019d6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	695b      	ldr	r3, [r3, #20]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d019      	beq.n	80019a4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001970:	4b44      	ldr	r3, [pc, #272]	; (8001a84 <HAL_RCC_OscConfig+0x520>)
 8001972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001974:	4a43      	ldr	r2, [pc, #268]	; (8001a84 <HAL_RCC_OscConfig+0x520>)
 8001976:	f043 0301 	orr.w	r3, r3, #1
 800197a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800197c:	f7ff f84e 	bl	8000a1c <HAL_GetTick>
 8001980:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001984:	f7ff f84a 	bl	8000a1c <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e1ef      	b.n	8001d76 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001996:	4b3b      	ldr	r3, [pc, #236]	; (8001a84 <HAL_RCC_OscConfig+0x520>)
 8001998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d0f0      	beq.n	8001984 <HAL_RCC_OscConfig+0x420>
 80019a2:	e018      	b.n	80019d6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019a4:	4b37      	ldr	r3, [pc, #220]	; (8001a84 <HAL_RCC_OscConfig+0x520>)
 80019a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019a8:	4a36      	ldr	r2, [pc, #216]	; (8001a84 <HAL_RCC_OscConfig+0x520>)
 80019aa:	f023 0301 	bic.w	r3, r3, #1
 80019ae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b0:	f7ff f834 	bl	8000a1c <HAL_GetTick>
 80019b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019b8:	f7ff f830 	bl	8000a1c <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e1d5      	b.n	8001d76 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80019ca:	4b2e      	ldr	r3, [pc, #184]	; (8001a84 <HAL_RCC_OscConfig+0x520>)
 80019cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1f0      	bne.n	80019b8 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0320 	and.w	r3, r3, #32
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d036      	beq.n	8001a50 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d019      	beq.n	8001a1e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019ea:	4b26      	ldr	r3, [pc, #152]	; (8001a84 <HAL_RCC_OscConfig+0x520>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a25      	ldr	r2, [pc, #148]	; (8001a84 <HAL_RCC_OscConfig+0x520>)
 80019f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019f4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80019f6:	f7ff f811 	bl	8000a1c <HAL_GetTick>
 80019fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80019fc:	e008      	b.n	8001a10 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80019fe:	f7ff f80d 	bl	8000a1c <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e1b2      	b.n	8001d76 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a10:	4b1c      	ldr	r3, [pc, #112]	; (8001a84 <HAL_RCC_OscConfig+0x520>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d0f0      	beq.n	80019fe <HAL_RCC_OscConfig+0x49a>
 8001a1c:	e018      	b.n	8001a50 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a1e:	4b19      	ldr	r3, [pc, #100]	; (8001a84 <HAL_RCC_OscConfig+0x520>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a18      	ldr	r2, [pc, #96]	; (8001a84 <HAL_RCC_OscConfig+0x520>)
 8001a24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a28:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001a2a:	f7fe fff7 	bl	8000a1c <HAL_GetTick>
 8001a2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001a32:	f7fe fff3 	bl	8000a1c <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e198      	b.n	8001d76 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a44:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <HAL_RCC_OscConfig+0x520>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1f0      	bne.n	8001a32 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f000 8085 	beq.w	8001b68 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001a5e:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <HAL_RCC_OscConfig+0x524>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a09      	ldr	r2, [pc, #36]	; (8001a88 <HAL_RCC_OscConfig+0x524>)
 8001a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a68:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001a6a:	f7fe ffd7 	bl	8000a1c <HAL_GetTick>
 8001a6e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a70:	e00c      	b.n	8001a8c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001a72:	f7fe ffd3 	bl	8000a1c <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b64      	cmp	r3, #100	; 0x64
 8001a7e:	d905      	bls.n	8001a8c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e178      	b.n	8001d76 <HAL_RCC_OscConfig+0x812>
 8001a84:	58024400 	.word	0x58024400
 8001a88:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a8c:	4b96      	ldr	r3, [pc, #600]	; (8001ce8 <HAL_RCC_OscConfig+0x784>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0ec      	beq.n	8001a72 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d106      	bne.n	8001aae <HAL_RCC_OscConfig+0x54a>
 8001aa0:	4b92      	ldr	r3, [pc, #584]	; (8001cec <HAL_RCC_OscConfig+0x788>)
 8001aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa4:	4a91      	ldr	r2, [pc, #580]	; (8001cec <HAL_RCC_OscConfig+0x788>)
 8001aa6:	f043 0301 	orr.w	r3, r3, #1
 8001aaa:	6713      	str	r3, [r2, #112]	; 0x70
 8001aac:	e02d      	b.n	8001b0a <HAL_RCC_OscConfig+0x5a6>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d10c      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x56c>
 8001ab6:	4b8d      	ldr	r3, [pc, #564]	; (8001cec <HAL_RCC_OscConfig+0x788>)
 8001ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aba:	4a8c      	ldr	r2, [pc, #560]	; (8001cec <HAL_RCC_OscConfig+0x788>)
 8001abc:	f023 0301 	bic.w	r3, r3, #1
 8001ac0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ac2:	4b8a      	ldr	r3, [pc, #552]	; (8001cec <HAL_RCC_OscConfig+0x788>)
 8001ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac6:	4a89      	ldr	r2, [pc, #548]	; (8001cec <HAL_RCC_OscConfig+0x788>)
 8001ac8:	f023 0304 	bic.w	r3, r3, #4
 8001acc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ace:	e01c      	b.n	8001b0a <HAL_RCC_OscConfig+0x5a6>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	2b05      	cmp	r3, #5
 8001ad6:	d10c      	bne.n	8001af2 <HAL_RCC_OscConfig+0x58e>
 8001ad8:	4b84      	ldr	r3, [pc, #528]	; (8001cec <HAL_RCC_OscConfig+0x788>)
 8001ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001adc:	4a83      	ldr	r2, [pc, #524]	; (8001cec <HAL_RCC_OscConfig+0x788>)
 8001ade:	f043 0304 	orr.w	r3, r3, #4
 8001ae2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ae4:	4b81      	ldr	r3, [pc, #516]	; (8001cec <HAL_RCC_OscConfig+0x788>)
 8001ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae8:	4a80      	ldr	r2, [pc, #512]	; (8001cec <HAL_RCC_OscConfig+0x788>)
 8001aea:	f043 0301 	orr.w	r3, r3, #1
 8001aee:	6713      	str	r3, [r2, #112]	; 0x70
 8001af0:	e00b      	b.n	8001b0a <HAL_RCC_OscConfig+0x5a6>
 8001af2:	4b7e      	ldr	r3, [pc, #504]	; (8001cec <HAL_RCC_OscConfig+0x788>)
 8001af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af6:	4a7d      	ldr	r2, [pc, #500]	; (8001cec <HAL_RCC_OscConfig+0x788>)
 8001af8:	f023 0301 	bic.w	r3, r3, #1
 8001afc:	6713      	str	r3, [r2, #112]	; 0x70
 8001afe:	4b7b      	ldr	r3, [pc, #492]	; (8001cec <HAL_RCC_OscConfig+0x788>)
 8001b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b02:	4a7a      	ldr	r2, [pc, #488]	; (8001cec <HAL_RCC_OscConfig+0x788>)
 8001b04:	f023 0304 	bic.w	r3, r3, #4
 8001b08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d015      	beq.n	8001b3e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b12:	f7fe ff83 	bl	8000a1c <HAL_GetTick>
 8001b16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b18:	e00a      	b.n	8001b30 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b1a:	f7fe ff7f 	bl	8000a1c <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e122      	b.n	8001d76 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b30:	4b6e      	ldr	r3, [pc, #440]	; (8001cec <HAL_RCC_OscConfig+0x788>)
 8001b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0ee      	beq.n	8001b1a <HAL_RCC_OscConfig+0x5b6>
 8001b3c:	e014      	b.n	8001b68 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b3e:	f7fe ff6d 	bl	8000a1c <HAL_GetTick>
 8001b42:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b44:	e00a      	b.n	8001b5c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b46:	f7fe ff69 	bl	8000a1c <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e10c      	b.n	8001d76 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b5c:	4b63      	ldr	r3, [pc, #396]	; (8001cec <HAL_RCC_OscConfig+0x788>)
 8001b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d1ee      	bne.n	8001b46 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f000 8101 	beq.w	8001d74 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001b72:	4b5e      	ldr	r3, [pc, #376]	; (8001cec <HAL_RCC_OscConfig+0x788>)
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b7a:	2b18      	cmp	r3, #24
 8001b7c:	f000 80bc 	beq.w	8001cf8 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	f040 8095 	bne.w	8001cb4 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b8a:	4b58      	ldr	r3, [pc, #352]	; (8001cec <HAL_RCC_OscConfig+0x788>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a57      	ldr	r2, [pc, #348]	; (8001cec <HAL_RCC_OscConfig+0x788>)
 8001b90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b96:	f7fe ff41 	bl	8000a1c <HAL_GetTick>
 8001b9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b9e:	f7fe ff3d 	bl	8000a1c <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e0e2      	b.n	8001d76 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001bb0:	4b4e      	ldr	r3, [pc, #312]	; (8001cec <HAL_RCC_OscConfig+0x788>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1f0      	bne.n	8001b9e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bbc:	4b4b      	ldr	r3, [pc, #300]	; (8001cec <HAL_RCC_OscConfig+0x788>)
 8001bbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bc0:	4b4b      	ldr	r3, [pc, #300]	; (8001cf0 <HAL_RCC_OscConfig+0x78c>)
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001bcc:	0112      	lsls	r2, r2, #4
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	4946      	ldr	r1, [pc, #280]	; (8001cec <HAL_RCC_OscConfig+0x788>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	628b      	str	r3, [r1, #40]	; 0x28
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001be4:	3b01      	subs	r3, #1
 8001be6:	025b      	lsls	r3, r3, #9
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	431a      	orrs	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	041b      	lsls	r3, r3, #16
 8001bf4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	061b      	lsls	r3, r3, #24
 8001c02:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001c06:	4939      	ldr	r1, [pc, #228]	; (8001cec <HAL_RCC_OscConfig+0x788>)
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001c0c:	4b37      	ldr	r3, [pc, #220]	; (8001cec <HAL_RCC_OscConfig+0x788>)
 8001c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c10:	4a36      	ldr	r2, [pc, #216]	; (8001cec <HAL_RCC_OscConfig+0x788>)
 8001c12:	f023 0301 	bic.w	r3, r3, #1
 8001c16:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001c18:	4b34      	ldr	r3, [pc, #208]	; (8001cec <HAL_RCC_OscConfig+0x788>)
 8001c1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c1c:	4b35      	ldr	r3, [pc, #212]	; (8001cf4 <HAL_RCC_OscConfig+0x790>)
 8001c1e:	4013      	ands	r3, r2
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c24:	00d2      	lsls	r2, r2, #3
 8001c26:	4931      	ldr	r1, [pc, #196]	; (8001cec <HAL_RCC_OscConfig+0x788>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001c2c:	4b2f      	ldr	r3, [pc, #188]	; (8001cec <HAL_RCC_OscConfig+0x788>)
 8001c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c30:	f023 020c 	bic.w	r2, r3, #12
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c38:	492c      	ldr	r1, [pc, #176]	; (8001cec <HAL_RCC_OscConfig+0x788>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001c3e:	4b2b      	ldr	r3, [pc, #172]	; (8001cec <HAL_RCC_OscConfig+0x788>)
 8001c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c42:	f023 0202 	bic.w	r2, r3, #2
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4a:	4928      	ldr	r1, [pc, #160]	; (8001cec <HAL_RCC_OscConfig+0x788>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001c50:	4b26      	ldr	r3, [pc, #152]	; (8001cec <HAL_RCC_OscConfig+0x788>)
 8001c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c54:	4a25      	ldr	r2, [pc, #148]	; (8001cec <HAL_RCC_OscConfig+0x788>)
 8001c56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001c5c:	4b23      	ldr	r3, [pc, #140]	; (8001cec <HAL_RCC_OscConfig+0x788>)
 8001c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c60:	4a22      	ldr	r2, [pc, #136]	; (8001cec <HAL_RCC_OscConfig+0x788>)
 8001c62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001c68:	4b20      	ldr	r3, [pc, #128]	; (8001cec <HAL_RCC_OscConfig+0x788>)
 8001c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6c:	4a1f      	ldr	r2, [pc, #124]	; (8001cec <HAL_RCC_OscConfig+0x788>)
 8001c6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001c74:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <HAL_RCC_OscConfig+0x788>)
 8001c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c78:	4a1c      	ldr	r2, [pc, #112]	; (8001cec <HAL_RCC_OscConfig+0x788>)
 8001c7a:	f043 0301 	orr.w	r3, r3, #1
 8001c7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c80:	4b1a      	ldr	r3, [pc, #104]	; (8001cec <HAL_RCC_OscConfig+0x788>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a19      	ldr	r2, [pc, #100]	; (8001cec <HAL_RCC_OscConfig+0x788>)
 8001c86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8c:	f7fe fec6 	bl	8000a1c <HAL_GetTick>
 8001c90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c94:	f7fe fec2 	bl	8000a1c <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e067      	b.n	8001d76 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ca6:	4b11      	ldr	r3, [pc, #68]	; (8001cec <HAL_RCC_OscConfig+0x788>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d0f0      	beq.n	8001c94 <HAL_RCC_OscConfig+0x730>
 8001cb2:	e05f      	b.n	8001d74 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb4:	4b0d      	ldr	r3, [pc, #52]	; (8001cec <HAL_RCC_OscConfig+0x788>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a0c      	ldr	r2, [pc, #48]	; (8001cec <HAL_RCC_OscConfig+0x788>)
 8001cba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc0:	f7fe feac 	bl	8000a1c <HAL_GetTick>
 8001cc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cc8:	f7fe fea8 	bl	8000a1c <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e04d      	b.n	8001d76 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cda:	4b04      	ldr	r3, [pc, #16]	; (8001cec <HAL_RCC_OscConfig+0x788>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f0      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x764>
 8001ce6:	e045      	b.n	8001d74 <HAL_RCC_OscConfig+0x810>
 8001ce8:	58024800 	.word	0x58024800
 8001cec:	58024400 	.word	0x58024400
 8001cf0:	fffffc0c 	.word	0xfffffc0c
 8001cf4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001cf8:	4b21      	ldr	r3, [pc, #132]	; (8001d80 <HAL_RCC_OscConfig+0x81c>)
 8001cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001cfe:	4b20      	ldr	r3, [pc, #128]	; (8001d80 <HAL_RCC_OscConfig+0x81c>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d031      	beq.n	8001d70 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	f003 0203 	and.w	r2, r3, #3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d12a      	bne.n	8001d70 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	091b      	lsrs	r3, r3, #4
 8001d1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d122      	bne.n	8001d70 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d34:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d11a      	bne.n	8001d70 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	0a5b      	lsrs	r3, r3, #9
 8001d3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d46:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d111      	bne.n	8001d70 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	0c1b      	lsrs	r3, r3, #16
 8001d50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d58:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d108      	bne.n	8001d70 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	0e1b      	lsrs	r3, r3, #24
 8001d62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d6a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d001      	beq.n	8001d74 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e000      	b.n	8001d76 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3730      	adds	r7, #48	; 0x30
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	58024400 	.word	0x58024400

08001d84 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e19c      	b.n	80020d2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d98:	4b8a      	ldr	r3, [pc, #552]	; (8001fc4 <HAL_RCC_ClockConfig+0x240>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 030f 	and.w	r3, r3, #15
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d910      	bls.n	8001dc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da6:	4b87      	ldr	r3, [pc, #540]	; (8001fc4 <HAL_RCC_ClockConfig+0x240>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f023 020f 	bic.w	r2, r3, #15
 8001dae:	4985      	ldr	r1, [pc, #532]	; (8001fc4 <HAL_RCC_ClockConfig+0x240>)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001db6:	4b83      	ldr	r3, [pc, #524]	; (8001fc4 <HAL_RCC_ClockConfig+0x240>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 030f 	and.w	r3, r3, #15
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d001      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e184      	b.n	80020d2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d010      	beq.n	8001df6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	691a      	ldr	r2, [r3, #16]
 8001dd8:	4b7b      	ldr	r3, [pc, #492]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d908      	bls.n	8001df6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001de4:	4b78      	ldr	r3, [pc, #480]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	4975      	ldr	r1, [pc, #468]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d010      	beq.n	8001e24 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	695a      	ldr	r2, [r3, #20]
 8001e06:	4b70      	ldr	r3, [pc, #448]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d908      	bls.n	8001e24 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001e12:	4b6d      	ldr	r3, [pc, #436]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	496a      	ldr	r1, [pc, #424]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0310 	and.w	r3, r3, #16
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d010      	beq.n	8001e52 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	699a      	ldr	r2, [r3, #24]
 8001e34:	4b64      	ldr	r3, [pc, #400]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001e36:	69db      	ldr	r3, [r3, #28]
 8001e38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d908      	bls.n	8001e52 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001e40:	4b61      	ldr	r3, [pc, #388]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001e42:	69db      	ldr	r3, [r3, #28]
 8001e44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	495e      	ldr	r1, [pc, #376]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0320 	and.w	r3, r3, #32
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d010      	beq.n	8001e80 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	69da      	ldr	r2, [r3, #28]
 8001e62:	4b59      	ldr	r3, [pc, #356]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d908      	bls.n	8001e80 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001e6e:	4b56      	ldr	r3, [pc, #344]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	4953      	ldr	r1, [pc, #332]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d010      	beq.n	8001eae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68da      	ldr	r2, [r3, #12]
 8001e90:	4b4d      	ldr	r3, [pc, #308]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	f003 030f 	and.w	r3, r3, #15
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d908      	bls.n	8001eae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e9c:	4b4a      	ldr	r3, [pc, #296]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	f023 020f 	bic.w	r2, r3, #15
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	4947      	ldr	r1, [pc, #284]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d055      	beq.n	8001f66 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001eba:	4b43      	ldr	r3, [pc, #268]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	4940      	ldr	r1, [pc, #256]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d107      	bne.n	8001ee4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ed4:	4b3c      	ldr	r3, [pc, #240]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d121      	bne.n	8001f24 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e0f6      	b.n	80020d2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2b03      	cmp	r3, #3
 8001eea:	d107      	bne.n	8001efc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001eec:	4b36      	ldr	r3, [pc, #216]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d115      	bne.n	8001f24 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e0ea      	b.n	80020d2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d107      	bne.n	8001f14 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f04:	4b30      	ldr	r3, [pc, #192]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d109      	bne.n	8001f24 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e0de      	b.n	80020d2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f14:	4b2c      	ldr	r3, [pc, #176]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d101      	bne.n	8001f24 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e0d6      	b.n	80020d2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f24:	4b28      	ldr	r3, [pc, #160]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	f023 0207 	bic.w	r2, r3, #7
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	4925      	ldr	r1, [pc, #148]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f36:	f7fe fd71 	bl	8000a1c <HAL_GetTick>
 8001f3a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f3c:	e00a      	b.n	8001f54 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f3e:	f7fe fd6d 	bl	8000a1c <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e0be      	b.n	80020d2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f54:	4b1c      	ldr	r3, [pc, #112]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d1eb      	bne.n	8001f3e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d010      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68da      	ldr	r2, [r3, #12]
 8001f76:	4b14      	ldr	r3, [pc, #80]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d208      	bcs.n	8001f94 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f82:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	f023 020f 	bic.w	r2, r3, #15
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	490e      	ldr	r1, [pc, #56]	; (8001fc8 <HAL_RCC_ClockConfig+0x244>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f94:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <HAL_RCC_ClockConfig+0x240>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 030f 	and.w	r3, r3, #15
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d214      	bcs.n	8001fcc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa2:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <HAL_RCC_ClockConfig+0x240>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 020f 	bic.w	r2, r3, #15
 8001faa:	4906      	ldr	r1, [pc, #24]	; (8001fc4 <HAL_RCC_ClockConfig+0x240>)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb2:	4b04      	ldr	r3, [pc, #16]	; (8001fc4 <HAL_RCC_ClockConfig+0x240>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d005      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e086      	b.n	80020d2 <HAL_RCC_ClockConfig+0x34e>
 8001fc4:	52002000 	.word	0x52002000
 8001fc8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d010      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	691a      	ldr	r2, [r3, #16]
 8001fdc:	4b3f      	ldr	r3, [pc, #252]	; (80020dc <HAL_RCC_ClockConfig+0x358>)
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d208      	bcs.n	8001ffa <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001fe8:	4b3c      	ldr	r3, [pc, #240]	; (80020dc <HAL_RCC_ClockConfig+0x358>)
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	4939      	ldr	r1, [pc, #228]	; (80020dc <HAL_RCC_ClockConfig+0x358>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0308 	and.w	r3, r3, #8
 8002002:	2b00      	cmp	r3, #0
 8002004:	d010      	beq.n	8002028 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	695a      	ldr	r2, [r3, #20]
 800200a:	4b34      	ldr	r3, [pc, #208]	; (80020dc <HAL_RCC_ClockConfig+0x358>)
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002012:	429a      	cmp	r2, r3
 8002014:	d208      	bcs.n	8002028 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002016:	4b31      	ldr	r3, [pc, #196]	; (80020dc <HAL_RCC_ClockConfig+0x358>)
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	492e      	ldr	r1, [pc, #184]	; (80020dc <HAL_RCC_ClockConfig+0x358>)
 8002024:	4313      	orrs	r3, r2
 8002026:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0310 	and.w	r3, r3, #16
 8002030:	2b00      	cmp	r3, #0
 8002032:	d010      	beq.n	8002056 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	699a      	ldr	r2, [r3, #24]
 8002038:	4b28      	ldr	r3, [pc, #160]	; (80020dc <HAL_RCC_ClockConfig+0x358>)
 800203a:	69db      	ldr	r3, [r3, #28]
 800203c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002040:	429a      	cmp	r2, r3
 8002042:	d208      	bcs.n	8002056 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002044:	4b25      	ldr	r3, [pc, #148]	; (80020dc <HAL_RCC_ClockConfig+0x358>)
 8002046:	69db      	ldr	r3, [r3, #28]
 8002048:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	4922      	ldr	r1, [pc, #136]	; (80020dc <HAL_RCC_ClockConfig+0x358>)
 8002052:	4313      	orrs	r3, r2
 8002054:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0320 	and.w	r3, r3, #32
 800205e:	2b00      	cmp	r3, #0
 8002060:	d010      	beq.n	8002084 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69da      	ldr	r2, [r3, #28]
 8002066:	4b1d      	ldr	r3, [pc, #116]	; (80020dc <HAL_RCC_ClockConfig+0x358>)
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800206e:	429a      	cmp	r2, r3
 8002070:	d208      	bcs.n	8002084 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002072:	4b1a      	ldr	r3, [pc, #104]	; (80020dc <HAL_RCC_ClockConfig+0x358>)
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	4917      	ldr	r1, [pc, #92]	; (80020dc <HAL_RCC_ClockConfig+0x358>)
 8002080:	4313      	orrs	r3, r2
 8002082:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002084:	f000 f834 	bl	80020f0 <HAL_RCC_GetSysClockFreq>
 8002088:	4601      	mov	r1, r0
 800208a:	4b14      	ldr	r3, [pc, #80]	; (80020dc <HAL_RCC_ClockConfig+0x358>)
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	0a1b      	lsrs	r3, r3, #8
 8002090:	f003 030f 	and.w	r3, r3, #15
 8002094:	4a12      	ldr	r2, [pc, #72]	; (80020e0 <HAL_RCC_ClockConfig+0x35c>)
 8002096:	5cd3      	ldrb	r3, [r2, r3]
 8002098:	f003 031f 	and.w	r3, r3, #31
 800209c:	fa21 f303 	lsr.w	r3, r1, r3
 80020a0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80020a2:	4b0e      	ldr	r3, [pc, #56]	; (80020dc <HAL_RCC_ClockConfig+0x358>)
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	4a0d      	ldr	r2, [pc, #52]	; (80020e0 <HAL_RCC_ClockConfig+0x35c>)
 80020ac:	5cd3      	ldrb	r3, [r2, r3]
 80020ae:	f003 031f 	and.w	r3, r3, #31
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	fa22 f303 	lsr.w	r3, r2, r3
 80020b8:	4a0a      	ldr	r2, [pc, #40]	; (80020e4 <HAL_RCC_ClockConfig+0x360>)
 80020ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80020bc:	4a0a      	ldr	r2, [pc, #40]	; (80020e8 <HAL_RCC_ClockConfig+0x364>)
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80020c2:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <HAL_RCC_ClockConfig+0x368>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7fe fc5e 	bl	8000988 <HAL_InitTick>
 80020cc:	4603      	mov	r3, r0
 80020ce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80020d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3718      	adds	r7, #24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	58024400 	.word	0x58024400
 80020e0:	08004130 	.word	0x08004130
 80020e4:	20000004 	.word	0x20000004
 80020e8:	20000000 	.word	0x20000000
 80020ec:	2000000c 	.word	0x2000000c

080020f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b089      	sub	sp, #36	; 0x24
 80020f4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020f6:	4baf      	ldr	r3, [pc, #700]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020fe:	2b18      	cmp	r3, #24
 8002100:	f200 814e 	bhi.w	80023a0 <HAL_RCC_GetSysClockFreq+0x2b0>
 8002104:	a201      	add	r2, pc, #4	; (adr r2, 800210c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800210a:	bf00      	nop
 800210c:	08002171 	.word	0x08002171
 8002110:	080023a1 	.word	0x080023a1
 8002114:	080023a1 	.word	0x080023a1
 8002118:	080023a1 	.word	0x080023a1
 800211c:	080023a1 	.word	0x080023a1
 8002120:	080023a1 	.word	0x080023a1
 8002124:	080023a1 	.word	0x080023a1
 8002128:	080023a1 	.word	0x080023a1
 800212c:	08002197 	.word	0x08002197
 8002130:	080023a1 	.word	0x080023a1
 8002134:	080023a1 	.word	0x080023a1
 8002138:	080023a1 	.word	0x080023a1
 800213c:	080023a1 	.word	0x080023a1
 8002140:	080023a1 	.word	0x080023a1
 8002144:	080023a1 	.word	0x080023a1
 8002148:	080023a1 	.word	0x080023a1
 800214c:	0800219d 	.word	0x0800219d
 8002150:	080023a1 	.word	0x080023a1
 8002154:	080023a1 	.word	0x080023a1
 8002158:	080023a1 	.word	0x080023a1
 800215c:	080023a1 	.word	0x080023a1
 8002160:	080023a1 	.word	0x080023a1
 8002164:	080023a1 	.word	0x080023a1
 8002168:	080023a1 	.word	0x080023a1
 800216c:	080021a3 	.word	0x080021a3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002170:	4b90      	ldr	r3, [pc, #576]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0320 	and.w	r3, r3, #32
 8002178:	2b00      	cmp	r3, #0
 800217a:	d009      	beq.n	8002190 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800217c:	4b8d      	ldr	r3, [pc, #564]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	08db      	lsrs	r3, r3, #3
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	4a8c      	ldr	r2, [pc, #560]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002188:	fa22 f303 	lsr.w	r3, r2, r3
 800218c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800218e:	e10a      	b.n	80023a6 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002190:	4b89      	ldr	r3, [pc, #548]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002192:	61bb      	str	r3, [r7, #24]
    break;
 8002194:	e107      	b.n	80023a6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002196:	4b89      	ldr	r3, [pc, #548]	; (80023bc <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002198:	61bb      	str	r3, [r7, #24]
    break;
 800219a:	e104      	b.n	80023a6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800219c:	4b88      	ldr	r3, [pc, #544]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x2d0>)
 800219e:	61bb      	str	r3, [r7, #24]
    break;
 80021a0:	e101      	b.n	80023a6 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80021a2:	4b84      	ldr	r3, [pc, #528]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80021a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a6:	f003 0303 	and.w	r3, r3, #3
 80021aa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80021ac:	4b81      	ldr	r3, [pc, #516]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80021ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021b6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80021b8:	4b7e      	ldr	r3, [pc, #504]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80021ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80021c2:	4b7c      	ldr	r3, [pc, #496]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80021c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021c6:	08db      	lsrs	r3, r3, #3
 80021c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	fb02 f303 	mul.w	r3, r2, r3
 80021d2:	ee07 3a90 	vmov	s15, r3
 80021d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021da:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f000 80da 	beq.w	800239a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d05a      	beq.n	80022a2 <HAL_RCC_GetSysClockFreq+0x1b2>
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d302      	bcc.n	80021f6 <HAL_RCC_GetSysClockFreq+0x106>
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d078      	beq.n	80022e6 <HAL_RCC_GetSysClockFreq+0x1f6>
 80021f4:	e099      	b.n	800232a <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80021f6:	4b6f      	ldr	r3, [pc, #444]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0320 	and.w	r3, r3, #32
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d02d      	beq.n	800225e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002202:	4b6c      	ldr	r3, [pc, #432]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	08db      	lsrs	r3, r3, #3
 8002208:	f003 0303 	and.w	r3, r3, #3
 800220c:	4a6a      	ldr	r2, [pc, #424]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800220e:	fa22 f303 	lsr.w	r3, r2, r3
 8002212:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	ee07 3a90 	vmov	s15, r3
 800221a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	ee07 3a90 	vmov	s15, r3
 8002224:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002228:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800222c:	4b61      	ldr	r3, [pc, #388]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800222e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002230:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002234:	ee07 3a90 	vmov	s15, r3
 8002238:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800223c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002240:	eddf 5a60 	vldr	s11, [pc, #384]	; 80023c4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002244:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002248:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800224c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002250:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002254:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002258:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800225c:	e087      	b.n	800236e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	ee07 3a90 	vmov	s15, r3
 8002264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002268:	eddf 6a57 	vldr	s13, [pc, #348]	; 80023c8 <HAL_RCC_GetSysClockFreq+0x2d8>
 800226c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002270:	4b50      	ldr	r3, [pc, #320]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002278:	ee07 3a90 	vmov	s15, r3
 800227c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002280:	ed97 6a02 	vldr	s12, [r7, #8]
 8002284:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80023c4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002288:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800228c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002290:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002294:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002298:	ee67 7a27 	vmul.f32	s15, s14, s15
 800229c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80022a0:	e065      	b.n	800236e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	ee07 3a90 	vmov	s15, r3
 80022a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022ac:	eddf 6a47 	vldr	s13, [pc, #284]	; 80023cc <HAL_RCC_GetSysClockFreq+0x2dc>
 80022b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022b4:	4b3f      	ldr	r3, [pc, #252]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80022b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022bc:	ee07 3a90 	vmov	s15, r3
 80022c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022c4:	ed97 6a02 	vldr	s12, [r7, #8]
 80022c8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80023c4 <HAL_RCC_GetSysClockFreq+0x2d4>
 80022cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80022e4:	e043      	b.n	800236e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	ee07 3a90 	vmov	s15, r3
 80022ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022f0:	eddf 6a37 	vldr	s13, [pc, #220]	; 80023d0 <HAL_RCC_GetSysClockFreq+0x2e0>
 80022f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022f8:	4b2e      	ldr	r3, [pc, #184]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80022fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002300:	ee07 3a90 	vmov	s15, r3
 8002304:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002308:	ed97 6a02 	vldr	s12, [r7, #8]
 800230c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80023c4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002310:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002314:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002318:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800231c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002320:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002324:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002328:	e021      	b.n	800236e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	ee07 3a90 	vmov	s15, r3
 8002330:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002334:	eddf 6a25 	vldr	s13, [pc, #148]	; 80023cc <HAL_RCC_GetSysClockFreq+0x2dc>
 8002338:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800233c:	4b1d      	ldr	r3, [pc, #116]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800233e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002340:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002344:	ee07 3a90 	vmov	s15, r3
 8002348:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800234c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002350:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80023c4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002354:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002358:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800235c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002360:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002364:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002368:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800236c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800236e:	4b11      	ldr	r3, [pc, #68]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	0a5b      	lsrs	r3, r3, #9
 8002374:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002378:	3301      	adds	r3, #1
 800237a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	ee07 3a90 	vmov	s15, r3
 8002382:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002386:	edd7 6a07 	vldr	s13, [r7, #28]
 800238a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800238e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002392:	ee17 3a90 	vmov	r3, s15
 8002396:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002398:	e005      	b.n	80023a6 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800239a:	2300      	movs	r3, #0
 800239c:	61bb      	str	r3, [r7, #24]
    break;
 800239e:	e002      	b.n	80023a6 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80023a0:	4b06      	ldr	r3, [pc, #24]	; (80023bc <HAL_RCC_GetSysClockFreq+0x2cc>)
 80023a2:	61bb      	str	r3, [r7, #24]
    break;
 80023a4:	bf00      	nop
  }

  return sysclockfreq;
 80023a6:	69bb      	ldr	r3, [r7, #24]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3724      	adds	r7, #36	; 0x24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	58024400 	.word	0x58024400
 80023b8:	03d09000 	.word	0x03d09000
 80023bc:	003d0900 	.word	0x003d0900
 80023c0:	017d7840 	.word	0x017d7840
 80023c4:	46000000 	.word	0x46000000
 80023c8:	4c742400 	.word	0x4c742400
 80023cc:	4a742400 	.word	0x4a742400
 80023d0:	4bbebc20 	.word	0x4bbebc20

080023d4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023dc:	2300      	movs	r3, #0
 80023de:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023e0:	2300      	movs	r3, #0
 80023e2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d03d      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023f8:	d013      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80023fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023fe:	d802      	bhi.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002400:	2b00      	cmp	r3, #0
 8002402:	d007      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002404:	e01f      	b.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002406:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800240a:	d013      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800240c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002410:	d01c      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002412:	e018      	b.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002414:	4baf      	ldr	r3, [pc, #700]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002418:	4aae      	ldr	r2, [pc, #696]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800241a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800241e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002420:	e015      	b.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	3304      	adds	r3, #4
 8002426:	2102      	movs	r1, #2
 8002428:	4618      	mov	r0, r3
 800242a:	f000 feed 	bl	8003208 <RCCEx_PLL2_Config>
 800242e:	4603      	mov	r3, r0
 8002430:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002432:	e00c      	b.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3324      	adds	r3, #36	; 0x24
 8002438:	2102      	movs	r1, #2
 800243a:	4618      	mov	r0, r3
 800243c:	f000 ff96 	bl	800336c <RCCEx_PLL3_Config>
 8002440:	4603      	mov	r3, r0
 8002442:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002444:	e003      	b.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	75fb      	strb	r3, [r7, #23]
      break;
 800244a:	e000      	b.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800244c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800244e:	7dfb      	ldrb	r3, [r7, #23]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d109      	bne.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002454:	4b9f      	ldr	r3, [pc, #636]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002458:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002460:	499c      	ldr	r1, [pc, #624]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002462:	4313      	orrs	r3, r2
 8002464:	650b      	str	r3, [r1, #80]	; 0x50
 8002466:	e001      	b.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002468:	7dfb      	ldrb	r3, [r7, #23]
 800246a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002474:	2b00      	cmp	r3, #0
 8002476:	d03d      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800247c:	2b04      	cmp	r3, #4
 800247e:	d826      	bhi.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8002480:	a201      	add	r2, pc, #4	; (adr r2, 8002488 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8002482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002486:	bf00      	nop
 8002488:	0800249d 	.word	0x0800249d
 800248c:	080024ab 	.word	0x080024ab
 8002490:	080024bd 	.word	0x080024bd
 8002494:	080024d5 	.word	0x080024d5
 8002498:	080024d5 	.word	0x080024d5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800249c:	4b8d      	ldr	r3, [pc, #564]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800249e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a0:	4a8c      	ldr	r2, [pc, #560]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80024a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80024a8:	e015      	b.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	3304      	adds	r3, #4
 80024ae:	2100      	movs	r1, #0
 80024b0:	4618      	mov	r0, r3
 80024b2:	f000 fea9 	bl	8003208 <RCCEx_PLL2_Config>
 80024b6:	4603      	mov	r3, r0
 80024b8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80024ba:	e00c      	b.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3324      	adds	r3, #36	; 0x24
 80024c0:	2100      	movs	r1, #0
 80024c2:	4618      	mov	r0, r3
 80024c4:	f000 ff52 	bl	800336c <RCCEx_PLL3_Config>
 80024c8:	4603      	mov	r3, r0
 80024ca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80024cc:	e003      	b.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	75fb      	strb	r3, [r7, #23]
      break;
 80024d2:	e000      	b.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80024d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024d6:	7dfb      	ldrb	r3, [r7, #23]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d109      	bne.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024dc:	4b7d      	ldr	r3, [pc, #500]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80024de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024e0:	f023 0207 	bic.w	r2, r3, #7
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e8:	497a      	ldr	r1, [pc, #488]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	650b      	str	r3, [r1, #80]	; 0x50
 80024ee:	e001      	b.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024f0:	7dfb      	ldrb	r3, [r7, #23]
 80024f2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d03e      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002504:	2b80      	cmp	r3, #128	; 0x80
 8002506:	d01c      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002508:	2b80      	cmp	r3, #128	; 0x80
 800250a:	d804      	bhi.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x142>
 800250c:	2b00      	cmp	r3, #0
 800250e:	d008      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002510:	2b40      	cmp	r3, #64	; 0x40
 8002512:	d00d      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002514:	e01e      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8002516:	2bc0      	cmp	r3, #192	; 0xc0
 8002518:	d01f      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x186>
 800251a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800251e:	d01e      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002520:	e018      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002522:	4b6c      	ldr	r3, [pc, #432]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002526:	4a6b      	ldr	r2, [pc, #428]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800252c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800252e:	e017      	b.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3304      	adds	r3, #4
 8002534:	2100      	movs	r1, #0
 8002536:	4618      	mov	r0, r3
 8002538:	f000 fe66 	bl	8003208 <RCCEx_PLL2_Config>
 800253c:	4603      	mov	r3, r0
 800253e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002540:	e00e      	b.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	3324      	adds	r3, #36	; 0x24
 8002546:	2100      	movs	r1, #0
 8002548:	4618      	mov	r0, r3
 800254a:	f000 ff0f 	bl	800336c <RCCEx_PLL3_Config>
 800254e:	4603      	mov	r3, r0
 8002550:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002552:	e005      	b.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	75fb      	strb	r3, [r7, #23]
      break;
 8002558:	e002      	b.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800255a:	bf00      	nop
 800255c:	e000      	b.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800255e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002560:	7dfb      	ldrb	r3, [r7, #23]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d109      	bne.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002566:	4b5b      	ldr	r3, [pc, #364]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800256a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002572:	4958      	ldr	r1, [pc, #352]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002574:	4313      	orrs	r3, r2
 8002576:	650b      	str	r3, [r1, #80]	; 0x50
 8002578:	e001      	b.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800257a:	7dfb      	ldrb	r3, [r7, #23]
 800257c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002586:	2b00      	cmp	r3, #0
 8002588:	d044      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002590:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002594:	d01f      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8002596:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800259a:	d805      	bhi.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00a      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80025a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025a4:	d00e      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80025a6:	e01f      	b.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80025a8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80025ac:	d01f      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80025ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025b2:	d01e      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80025b4:	e018      	b.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025b6:	4b47      	ldr	r3, [pc, #284]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80025b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ba:	4a46      	ldr	r2, [pc, #280]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80025bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80025c2:	e017      	b.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3304      	adds	r3, #4
 80025c8:	2100      	movs	r1, #0
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 fe1c 	bl	8003208 <RCCEx_PLL2_Config>
 80025d0:	4603      	mov	r3, r0
 80025d2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80025d4:	e00e      	b.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	3324      	adds	r3, #36	; 0x24
 80025da:	2100      	movs	r1, #0
 80025dc:	4618      	mov	r0, r3
 80025de:	f000 fec5 	bl	800336c <RCCEx_PLL3_Config>
 80025e2:	4603      	mov	r3, r0
 80025e4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80025e6:	e005      	b.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	75fb      	strb	r3, [r7, #23]
      break;
 80025ec:	e002      	b.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80025ee:	bf00      	nop
 80025f0:	e000      	b.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80025f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025f4:	7dfb      	ldrb	r3, [r7, #23]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10a      	bne.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80025fa:	4b36      	ldr	r3, [pc, #216]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80025fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fe:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002608:	4932      	ldr	r1, [pc, #200]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800260a:	4313      	orrs	r3, r2
 800260c:	658b      	str	r3, [r1, #88]	; 0x58
 800260e:	e001      	b.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002610:	7dfb      	ldrb	r3, [r7, #23]
 8002612:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800261c:	2b00      	cmp	r3, #0
 800261e:	d044      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002626:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800262a:	d01f      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800262c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002630:	d805      	bhi.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00a      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x278>
 8002636:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800263a:	d00e      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800263c:	e01f      	b.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800263e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002642:	d01f      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002644:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002648:	d01e      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800264a:	e018      	b.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800264c:	4b21      	ldr	r3, [pc, #132]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800264e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002650:	4a20      	ldr	r2, [pc, #128]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002656:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002658:	e017      	b.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	3304      	adds	r3, #4
 800265e:	2100      	movs	r1, #0
 8002660:	4618      	mov	r0, r3
 8002662:	f000 fdd1 	bl	8003208 <RCCEx_PLL2_Config>
 8002666:	4603      	mov	r3, r0
 8002668:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800266a:	e00e      	b.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3324      	adds	r3, #36	; 0x24
 8002670:	2100      	movs	r1, #0
 8002672:	4618      	mov	r0, r3
 8002674:	f000 fe7a 	bl	800336c <RCCEx_PLL3_Config>
 8002678:	4603      	mov	r3, r0
 800267a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800267c:	e005      	b.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	75fb      	strb	r3, [r7, #23]
      break;
 8002682:	e002      	b.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8002684:	bf00      	nop
 8002686:	e000      	b.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8002688:	bf00      	nop
    }

    if(ret == HAL_OK)
 800268a:	7dfb      	ldrb	r3, [r7, #23]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10a      	bne.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002690:	4b10      	ldr	r3, [pc, #64]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002694:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800269e:	490d      	ldr	r1, [pc, #52]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	658b      	str	r3, [r1, #88]	; 0x58
 80026a4:	e001      	b.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026a6:	7dfb      	ldrb	r3, [r7, #23]
 80026a8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d035      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ba:	2b10      	cmp	r3, #16
 80026bc:	d00c      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80026be:	2b10      	cmp	r3, #16
 80026c0:	d802      	bhi.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d01b      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80026c6:	e017      	b.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80026c8:	2b20      	cmp	r3, #32
 80026ca:	d00c      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80026cc:	2b30      	cmp	r3, #48	; 0x30
 80026ce:	d018      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80026d0:	e012      	b.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80026d2:	bf00      	nop
 80026d4:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026d8:	4bae      	ldr	r3, [pc, #696]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 80026da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026dc:	4aad      	ldr	r2, [pc, #692]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 80026de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80026e4:	e00e      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	3304      	adds	r3, #4
 80026ea:	2102      	movs	r1, #2
 80026ec:	4618      	mov	r0, r3
 80026ee:	f000 fd8b 	bl	8003208 <RCCEx_PLL2_Config>
 80026f2:	4603      	mov	r3, r0
 80026f4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80026f6:	e005      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	75fb      	strb	r3, [r7, #23]
      break;
 80026fc:	e002      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80026fe:	bf00      	nop
 8002700:	e000      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8002702:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002704:	7dfb      	ldrb	r3, [r7, #23]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d109      	bne.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800270a:	4ba2      	ldr	r3, [pc, #648]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 800270c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800270e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002716:	499f      	ldr	r1, [pc, #636]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002718:	4313      	orrs	r3, r2
 800271a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800271c:	e001      	b.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800271e:	7dfb      	ldrb	r3, [r7, #23]
 8002720:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d042      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002736:	d01f      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8002738:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800273c:	d805      	bhi.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00a      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8002742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002746:	d00e      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8002748:	e01f      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800274a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800274e:	d01f      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8002750:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002754:	d01e      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8002756:	e018      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002758:	4b8e      	ldr	r3, [pc, #568]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 800275a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275c:	4a8d      	ldr	r2, [pc, #564]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 800275e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002762:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002764:	e017      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	3304      	adds	r3, #4
 800276a:	2100      	movs	r1, #0
 800276c:	4618      	mov	r0, r3
 800276e:	f000 fd4b 	bl	8003208 <RCCEx_PLL2_Config>
 8002772:	4603      	mov	r3, r0
 8002774:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002776:	e00e      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3324      	adds	r3, #36	; 0x24
 800277c:	2100      	movs	r1, #0
 800277e:	4618      	mov	r0, r3
 8002780:	f000 fdf4 	bl	800336c <RCCEx_PLL3_Config>
 8002784:	4603      	mov	r3, r0
 8002786:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002788:	e005      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	75fb      	strb	r3, [r7, #23]
      break;
 800278e:	e002      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8002790:	bf00      	nop
 8002792:	e000      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8002794:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002796:	7dfb      	ldrb	r3, [r7, #23]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d109      	bne.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800279c:	4b7d      	ldr	r3, [pc, #500]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 800279e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027a0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027a8:	497a      	ldr	r1, [pc, #488]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	650b      	str	r3, [r1, #80]	; 0x50
 80027ae:	e001      	b.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027b0:	7dfb      	ldrb	r3, [r7, #23]
 80027b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d042      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80027c8:	d01b      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80027ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80027ce:	d805      	bhi.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x408>
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d022      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x446>
 80027d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027d8:	d00a      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80027da:	e01b      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80027dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80027e0:	d01d      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80027e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027e6:	d01c      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80027e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80027ec:	d01b      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x452>
 80027ee:	e011      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	3304      	adds	r3, #4
 80027f4:	2101      	movs	r1, #1
 80027f6:	4618      	mov	r0, r3
 80027f8:	f000 fd06 	bl	8003208 <RCCEx_PLL2_Config>
 80027fc:	4603      	mov	r3, r0
 80027fe:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002800:	e012      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	3324      	adds	r3, #36	; 0x24
 8002806:	2101      	movs	r1, #1
 8002808:	4618      	mov	r0, r3
 800280a:	f000 fdaf 	bl	800336c <RCCEx_PLL3_Config>
 800280e:	4603      	mov	r3, r0
 8002810:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002812:	e009      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	75fb      	strb	r3, [r7, #23]
      break;
 8002818:	e006      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800281a:	bf00      	nop
 800281c:	e004      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800281e:	bf00      	nop
 8002820:	e002      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002822:	bf00      	nop
 8002824:	e000      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002826:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002828:	7dfb      	ldrb	r3, [r7, #23]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d109      	bne.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800282e:	4b59      	ldr	r3, [pc, #356]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002832:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800283a:	4956      	ldr	r1, [pc, #344]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 800283c:	4313      	orrs	r3, r2
 800283e:	650b      	str	r3, [r1, #80]	; 0x50
 8002840:	e001      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002842:	7dfb      	ldrb	r3, [r7, #23]
 8002844:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d044      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002858:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800285c:	d01b      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800285e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002862:	d805      	bhi.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8002864:	2b00      	cmp	r3, #0
 8002866:	d022      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002868:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800286c:	d00a      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800286e:	e01b      	b.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8002870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002874:	d01d      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002876:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800287a:	d01c      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 800287c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002880:	d01b      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002882:	e011      	b.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3304      	adds	r3, #4
 8002888:	2101      	movs	r1, #1
 800288a:	4618      	mov	r0, r3
 800288c:	f000 fcbc 	bl	8003208 <RCCEx_PLL2_Config>
 8002890:	4603      	mov	r3, r0
 8002892:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002894:	e012      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	3324      	adds	r3, #36	; 0x24
 800289a:	2101      	movs	r1, #1
 800289c:	4618      	mov	r0, r3
 800289e:	f000 fd65 	bl	800336c <RCCEx_PLL3_Config>
 80028a2:	4603      	mov	r3, r0
 80028a4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80028a6:	e009      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	75fb      	strb	r3, [r7, #23]
      break;
 80028ac:	e006      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80028ae:	bf00      	nop
 80028b0:	e004      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80028b2:	bf00      	nop
 80028b4:	e002      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80028b6:	bf00      	nop
 80028b8:	e000      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80028ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028bc:	7dfb      	ldrb	r3, [r7, #23]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10a      	bne.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80028c2:	4b34      	ldr	r3, [pc, #208]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 80028c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80028d0:	4930      	ldr	r1, [pc, #192]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	658b      	str	r3, [r1, #88]	; 0x58
 80028d6:	e001      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028d8:	7dfb      	ldrb	r3, [r7, #23]
 80028da:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d022      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x55a>
  {
    switch(PeriphClkInit->DsiClockSelection)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00e      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x53a>
 80028f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028f4:	d108      	bne.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	3304      	adds	r3, #4
 80028fa:	2101      	movs	r1, #1
 80028fc:	4618      	mov	r0, r3
 80028fe:	f000 fc83 	bl	8003208 <RCCEx_PLL2_Config>
 8002902:	4603      	mov	r3, r0
 8002904:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 8002906:	e003      	b.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	75fb      	strb	r3, [r7, #23]
      break;
 800290c:	e000      	b.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      break;
 800290e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002910:	7dfb      	ldrb	r3, [r7, #23]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d109      	bne.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x556>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8002916:	4b1f      	ldr	r3, [pc, #124]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002922:	491c      	ldr	r1, [pc, #112]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002924:	4313      	orrs	r3, r2
 8002926:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002928:	e001      	b.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x55a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800292a:	7dfb      	ldrb	r3, [r7, #23]
 800292c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d030      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002942:	d005      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002944:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002948:	d009      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800294a:	2b00      	cmp	r3, #0
 800294c:	d013      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800294e:	e00f      	b.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002950:	4b10      	ldr	r3, [pc, #64]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002954:	4a0f      	ldr	r2, [pc, #60]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002956:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800295a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800295c:	e00c      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x5a4>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	3304      	adds	r3, #4
 8002962:	2101      	movs	r1, #1
 8002964:	4618      	mov	r0, r3
 8002966:	f000 fc4f 	bl	8003208 <RCCEx_PLL2_Config>
 800296a:	4603      	mov	r3, r0
 800296c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800296e:	e003      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	75fb      	strb	r3, [r7, #23]
      break;
 8002974:	e000      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
      break;
 8002976:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002978:	7dfb      	ldrb	r3, [r7, #23]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10c      	bne.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800297e:	4b05      	ldr	r3, [pc, #20]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002982:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800298a:	4902      	ldr	r1, [pc, #8]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 800298c:	4313      	orrs	r3, r2
 800298e:	650b      	str	r3, [r1, #80]	; 0x50
 8002990:	e004      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8002992:	bf00      	nop
 8002994:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002998:	7dfb      	ldrb	r3, [r7, #23]
 800299a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d032      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x63a>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ac:	2b03      	cmp	r3, #3
 80029ae:	d81b      	bhi.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x614>
 80029b0:	a201      	add	r2, pc, #4	; (adr r2, 80029b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80029b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b6:	bf00      	nop
 80029b8:	080029ef 	.word	0x080029ef
 80029bc:	080029c9 	.word	0x080029c9
 80029c0:	080029d7 	.word	0x080029d7
 80029c4:	080029ef 	.word	0x080029ef
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029c8:	4bb8      	ldr	r3, [pc, #736]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 80029ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029cc:	4ab7      	ldr	r2, [pc, #732]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 80029ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80029d4:	e00c      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x61c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	3304      	adds	r3, #4
 80029da:	2102      	movs	r1, #2
 80029dc:	4618      	mov	r0, r3
 80029de:	f000 fc13 	bl	8003208 <RCCEx_PLL2_Config>
 80029e2:	4603      	mov	r3, r0
 80029e4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80029e6:	e003      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x61c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	75fb      	strb	r3, [r7, #23]
      break;
 80029ec:	e000      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x61c>
      break;
 80029ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029f0:	7dfb      	ldrb	r3, [r7, #23]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d109      	bne.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x636>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80029f6:	4bad      	ldr	r3, [pc, #692]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 80029f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029fa:	f023 0203 	bic.w	r2, r3, #3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a02:	49aa      	ldr	r1, [pc, #680]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002a08:	e001      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a0a:	7dfb      	ldrb	r3, [r7, #23]
 8002a0c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 8086 	beq.w	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x754>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a1c:	4ba4      	ldr	r3, [pc, #656]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4aa3      	ldr	r2, [pc, #652]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8002a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a28:	f7fd fff8 	bl	8000a1c <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a2e:	e009      	b.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x670>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a30:	f7fd fff4 	bl	8000a1c <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b64      	cmp	r3, #100	; 0x64
 8002a3c:	d902      	bls.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x670>
      {
        ret = HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	75fb      	strb	r3, [r7, #23]
        break;
 8002a42:	e005      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a44:	4b9a      	ldr	r3, [pc, #616]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d0ef      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      }
    }

    if(ret == HAL_OK)
 8002a50:	7dfb      	ldrb	r3, [r7, #23]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d166      	bne.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x750>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002a56:	4b95      	ldr	r3, [pc, #596]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002a58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002a60:	4053      	eors	r3, r2
 8002a62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d013      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x6be>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a6a:	4b90      	ldr	r3, [pc, #576]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a72:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a74:	4b8d      	ldr	r3, [pc, #564]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a78:	4a8c      	ldr	r2, [pc, #560]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002a7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a7e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a80:	4b8a      	ldr	r3, [pc, #552]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a84:	4a89      	ldr	r2, [pc, #548]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a8a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002a8c:	4a87      	ldr	r2, [pc, #540]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002a98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a9c:	d115      	bne.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9e:	f7fd ffbd 	bl	8000a1c <HAL_GetTick>
 8002aa2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002aa4:	e00b      	b.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa6:	f7fd ffb9 	bl	8000a1c <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d902      	bls.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
          {
            ret = HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	75fb      	strb	r3, [r7, #23]
            break;
 8002abc:	e005      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002abe:	4b7b      	ldr	r3, [pc, #492]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d0ed      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
          }
        }
      }

      if(ret == HAL_OK)
 8002aca:	7dfb      	ldrb	r3, [r7, #23]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d126      	bne.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002ad6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ada:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ade:	d10d      	bne.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x728>
 8002ae0:	4b72      	ldr	r3, [pc, #456]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002aee:	0919      	lsrs	r1, r3, #4
 8002af0:	4b70      	ldr	r3, [pc, #448]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8002af2:	400b      	ands	r3, r1
 8002af4:	496d      	ldr	r1, [pc, #436]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	610b      	str	r3, [r1, #16]
 8002afa:	e005      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x734>
 8002afc:	4b6b      	ldr	r3, [pc, #428]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	4a6a      	ldr	r2, [pc, #424]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002b02:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002b06:	6113      	str	r3, [r2, #16]
 8002b08:	4b68      	ldr	r3, [pc, #416]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002b0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002b12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b16:	4965      	ldr	r1, [pc, #404]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	670b      	str	r3, [r1, #112]	; 0x70
 8002b1c:	e004      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x754>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b1e:	7dfb      	ldrb	r3, [r7, #23]
 8002b20:	75bb      	strb	r3, [r7, #22]
 8002b22:	e001      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x754>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b24:	7dfb      	ldrb	r3, [r7, #23]
 8002b26:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d07e      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x85e>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b38:	2b28      	cmp	r3, #40	; 0x28
 8002b3a:	d867      	bhi.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x838>
 8002b3c:	a201      	add	r2, pc, #4	; (adr r2, 8002b44 <HAL_RCCEx_PeriphCLKConfig+0x770>)
 8002b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b42:	bf00      	nop
 8002b44:	08002c13 	.word	0x08002c13
 8002b48:	08002c0d 	.word	0x08002c0d
 8002b4c:	08002c0d 	.word	0x08002c0d
 8002b50:	08002c0d 	.word	0x08002c0d
 8002b54:	08002c0d 	.word	0x08002c0d
 8002b58:	08002c0d 	.word	0x08002c0d
 8002b5c:	08002c0d 	.word	0x08002c0d
 8002b60:	08002c0d 	.word	0x08002c0d
 8002b64:	08002be9 	.word	0x08002be9
 8002b68:	08002c0d 	.word	0x08002c0d
 8002b6c:	08002c0d 	.word	0x08002c0d
 8002b70:	08002c0d 	.word	0x08002c0d
 8002b74:	08002c0d 	.word	0x08002c0d
 8002b78:	08002c0d 	.word	0x08002c0d
 8002b7c:	08002c0d 	.word	0x08002c0d
 8002b80:	08002c0d 	.word	0x08002c0d
 8002b84:	08002bfb 	.word	0x08002bfb
 8002b88:	08002c0d 	.word	0x08002c0d
 8002b8c:	08002c0d 	.word	0x08002c0d
 8002b90:	08002c0d 	.word	0x08002c0d
 8002b94:	08002c0d 	.word	0x08002c0d
 8002b98:	08002c0d 	.word	0x08002c0d
 8002b9c:	08002c0d 	.word	0x08002c0d
 8002ba0:	08002c0d 	.word	0x08002c0d
 8002ba4:	08002c13 	.word	0x08002c13
 8002ba8:	08002c0d 	.word	0x08002c0d
 8002bac:	08002c0d 	.word	0x08002c0d
 8002bb0:	08002c0d 	.word	0x08002c0d
 8002bb4:	08002c0d 	.word	0x08002c0d
 8002bb8:	08002c0d 	.word	0x08002c0d
 8002bbc:	08002c0d 	.word	0x08002c0d
 8002bc0:	08002c0d 	.word	0x08002c0d
 8002bc4:	08002c13 	.word	0x08002c13
 8002bc8:	08002c0d 	.word	0x08002c0d
 8002bcc:	08002c0d 	.word	0x08002c0d
 8002bd0:	08002c0d 	.word	0x08002c0d
 8002bd4:	08002c0d 	.word	0x08002c0d
 8002bd8:	08002c0d 	.word	0x08002c0d
 8002bdc:	08002c0d 	.word	0x08002c0d
 8002be0:	08002c0d 	.word	0x08002c0d
 8002be4:	08002c13 	.word	0x08002c13
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3304      	adds	r3, #4
 8002bec:	2101      	movs	r1, #1
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 fb0a 	bl	8003208 <RCCEx_PLL2_Config>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002bf8:	e00c      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x840>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	3324      	adds	r3, #36	; 0x24
 8002bfe:	2101      	movs	r1, #1
 8002c00:	4618      	mov	r0, r3
 8002c02:	f000 fbb3 	bl	800336c <RCCEx_PLL3_Config>
 8002c06:	4603      	mov	r3, r0
 8002c08:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002c0a:	e003      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x840>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	75fb      	strb	r3, [r7, #23]
      break;
 8002c10:	e000      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x840>
      break;
 8002c12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c14:	7dfb      	ldrb	r3, [r7, #23]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d109      	bne.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x85a>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002c1a:	4b24      	ldr	r3, [pc, #144]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c1e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c26:	4921      	ldr	r1, [pc, #132]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	654b      	str	r3, [r1, #84]	; 0x54
 8002c2c:	e001      	b.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c2e:	7dfb      	ldrb	r3, [r7, #23]
 8002c30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d03e      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x8e8>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c42:	2b05      	cmp	r3, #5
 8002c44:	d820      	bhi.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8002c46:	a201      	add	r2, pc, #4	; (adr r2, 8002c4c <HAL_RCCEx_PeriphCLKConfig+0x878>)
 8002c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c4c:	08002c8f 	.word	0x08002c8f
 8002c50:	08002c65 	.word	0x08002c65
 8002c54:	08002c77 	.word	0x08002c77
 8002c58:	08002c8f 	.word	0x08002c8f
 8002c5c:	08002c8f 	.word	0x08002c8f
 8002c60:	08002c8f 	.word	0x08002c8f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3304      	adds	r3, #4
 8002c68:	2101      	movs	r1, #1
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f000 facc 	bl	8003208 <RCCEx_PLL2_Config>
 8002c70:	4603      	mov	r3, r0
 8002c72:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002c74:	e00c      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x8bc>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	3324      	adds	r3, #36	; 0x24
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f000 fb75 	bl	800336c <RCCEx_PLL3_Config>
 8002c82:	4603      	mov	r3, r0
 8002c84:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002c86:	e003      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	75fb      	strb	r3, [r7, #23]
      break;
 8002c8c:	e000      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
      break;
 8002c8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c90:	7dfb      	ldrb	r3, [r7, #23]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d110      	bne.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002c96:	4b05      	ldr	r3, [pc, #20]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9a:	f023 0207 	bic.w	r2, r3, #7
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ca2:	4902      	ldr	r1, [pc, #8]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	654b      	str	r3, [r1, #84]	; 0x54
 8002ca8:	e008      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 8002caa:	bf00      	nop
 8002cac:	58024400 	.word	0x58024400
 8002cb0:	58024800 	.word	0x58024800
 8002cb4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cb8:	7dfb      	ldrb	r3, [r7, #23]
 8002cba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d039      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x968>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cce:	2b05      	cmp	r3, #5
 8002cd0:	d820      	bhi.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x940>
 8002cd2:	a201      	add	r2, pc, #4	; (adr r2, 8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x904>)
 8002cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd8:	08002d1b 	.word	0x08002d1b
 8002cdc:	08002cf1 	.word	0x08002cf1
 8002ce0:	08002d03 	.word	0x08002d03
 8002ce4:	08002d1b 	.word	0x08002d1b
 8002ce8:	08002d1b 	.word	0x08002d1b
 8002cec:	08002d1b 	.word	0x08002d1b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	3304      	adds	r3, #4
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f000 fa86 	bl	8003208 <RCCEx_PLL2_Config>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002d00:	e00c      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x948>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	3324      	adds	r3, #36	; 0x24
 8002d06:	2101      	movs	r1, #1
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f000 fb2f 	bl	800336c <RCCEx_PLL3_Config>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002d12:	e003      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x948>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	75fb      	strb	r3, [r7, #23]
      break;
 8002d18:	e000      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x948>
      break;
 8002d1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d1c:	7dfb      	ldrb	r3, [r7, #23]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10a      	bne.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x964>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d22:	4bb2      	ldr	r3, [pc, #712]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8002d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d26:	f023 0207 	bic.w	r2, r3, #7
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d30:	49ae      	ldr	r1, [pc, #696]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	658b      	str	r3, [r1, #88]	; 0x58
 8002d36:	e001      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x968>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d38:	7dfb      	ldrb	r3, [r7, #23]
 8002d3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0320 	and.w	r3, r3, #32
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d044      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x9fe>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d52:	d01b      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 8002d54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d58:	d805      	bhi.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x992>
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d022      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002d5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d62:	d00a      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 8002d64:	e01b      	b.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x9ca>
 8002d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d6a:	d01d      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8002d6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d70:	d01c      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x9d8>
 8002d72:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002d76:	d01b      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x9dc>
 8002d78:	e011      	b.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x9ca>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	3304      	adds	r3, #4
 8002d7e:	2100      	movs	r1, #0
 8002d80:	4618      	mov	r0, r3
 8002d82:	f000 fa41 	bl	8003208 <RCCEx_PLL2_Config>
 8002d86:	4603      	mov	r3, r0
 8002d88:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002d8a:	e012      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x9de>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3324      	adds	r3, #36	; 0x24
 8002d90:	2102      	movs	r1, #2
 8002d92:	4618      	mov	r0, r3
 8002d94:	f000 faea 	bl	800336c <RCCEx_PLL3_Config>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002d9c:	e009      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	75fb      	strb	r3, [r7, #23]
      break;
 8002da2:	e006      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      break;
 8002da4:	bf00      	nop
 8002da6:	e004      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      break;
 8002da8:	bf00      	nop
 8002daa:	e002      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      break;
 8002dac:	bf00      	nop
 8002dae:	e000      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      break;
 8002db0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002db2:	7dfb      	ldrb	r3, [r7, #23]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10a      	bne.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x9fa>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002db8:	4b8c      	ldr	r3, [pc, #560]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8002dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dbc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc6:	4989      	ldr	r1, [pc, #548]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	654b      	str	r3, [r1, #84]	; 0x54
 8002dcc:	e001      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x9fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dce:	7dfb      	ldrb	r3, [r7, #23]
 8002dd0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d044      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0xa94>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002de4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002de8:	d01b      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0xa4e>
 8002dea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dee:	d805      	bhi.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d022      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8002df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002df8:	d00a      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
 8002dfa:	e01b      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8002dfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e00:	d01d      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8002e02:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002e06:	d01c      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0xa6e>
 8002e08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e0c:	d01b      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0xa72>
 8002e0e:	e011      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0xa60>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3304      	adds	r3, #4
 8002e14:	2100      	movs	r1, #0
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 f9f6 	bl	8003208 <RCCEx_PLL2_Config>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002e20:	e012      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0xa74>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	3324      	adds	r3, #36	; 0x24
 8002e26:	2102      	movs	r1, #2
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f000 fa9f 	bl	800336c <RCCEx_PLL3_Config>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002e32:	e009      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	75fb      	strb	r3, [r7, #23]
      break;
 8002e38:	e006      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      break;
 8002e3a:	bf00      	nop
 8002e3c:	e004      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      break;
 8002e3e:	bf00      	nop
 8002e40:	e002      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      break;
 8002e42:	bf00      	nop
 8002e44:	e000      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      break;
 8002e46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e48:	7dfb      	ldrb	r3, [r7, #23]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10a      	bne.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0xa90>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e4e:	4b67      	ldr	r3, [pc, #412]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8002e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e52:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e5c:	4963      	ldr	r1, [pc, #396]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	658b      	str	r3, [r1, #88]	; 0x58
 8002e62:	e001      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0xa94>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e64:	7dfb      	ldrb	r3, [r7, #23]
 8002e66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d044      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0xb2a>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002e7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e7e:	d01b      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0xae4>
 8002e80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e84:	d805      	bhi.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0xabe>
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d022      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
 8002e8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e8e:	d00a      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0xad2>
 8002e90:	e01b      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8002e92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e96:	d01d      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0xb00>
 8002e98:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002e9c:	d01c      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
 8002e9e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002ea2:	d01b      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0xb08>
 8002ea4:	e011      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	2100      	movs	r1, #0
 8002eac:	4618      	mov	r0, r3
 8002eae:	f000 f9ab 	bl	8003208 <RCCEx_PLL2_Config>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002eb6:	e012      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0xb0a>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	3324      	adds	r3, #36	; 0x24
 8002ebc:	2102      	movs	r1, #2
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f000 fa54 	bl	800336c <RCCEx_PLL3_Config>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002ec8:	e009      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0xb0a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	75fb      	strb	r3, [r7, #23]
      break;
 8002ece:	e006      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0xb0a>
      break;
 8002ed0:	bf00      	nop
 8002ed2:	e004      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0xb0a>
      break;
 8002ed4:	bf00      	nop
 8002ed6:	e002      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0xb0a>
      break;
 8002ed8:	bf00      	nop
 8002eda:	e000      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0xb0a>
      break;
 8002edc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ede:	7dfb      	ldrb	r3, [r7, #23]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10a      	bne.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0xb26>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002ee4:	4b41      	ldr	r3, [pc, #260]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8002ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002ef2:	493e      	ldr	r1, [pc, #248]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	658b      	str	r3, [r1, #88]	; 0x58
 8002ef8:	e001      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0xb2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002efa:	7dfb      	ldrb	r3, [r7, #23]
 8002efc:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0308 	and.w	r3, r3, #8
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d01a      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0xb6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f14:	d10a      	bne.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0xb58>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	3324      	adds	r3, #36	; 0x24
 8002f1a:	2102      	movs	r1, #2
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f000 fa25 	bl	800336c <RCCEx_PLL3_Config>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0xb58>
        {
          status = HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002f2c:	4b2f      	ldr	r3, [pc, #188]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8002f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f30:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f3a:	492c      	ldr	r1, [pc, #176]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0310 	and.w	r3, r3, #16
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d01a      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0xbae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f56:	d10a      	bne.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0xb9a>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3324      	adds	r3, #36	; 0x24
 8002f5c:	2102      	movs	r1, #2
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 fa04 	bl	800336c <RCCEx_PLL3_Config>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0xb9a>
      {
        status = HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f6e:	4b1f      	ldr	r3, [pc, #124]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8002f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f7c:	491b      	ldr	r1, [pc, #108]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d032      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xc20>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f98:	d00d      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
 8002f9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f9e:	d016      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d111      	bne.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	3304      	adds	r3, #4
 8002fa8:	2100      	movs	r1, #0
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 f92c 	bl	8003208 <RCCEx_PLL2_Config>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002fb4:	e00c      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0xbfc>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	3324      	adds	r3, #36	; 0x24
 8002fba:	2102      	movs	r1, #2
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f000 f9d5 	bl	800336c <RCCEx_PLL3_Config>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002fc6:	e003      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0xbfc>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	75fb      	strb	r3, [r7, #23]
      break;
 8002fcc:	e000      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0xbfc>
      break;
 8002fce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fd0:	7dfb      	ldrb	r3, [r7, #23]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10c      	bne.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fd6:	4b05      	ldr	r3, [pc, #20]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8002fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fda:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002fe4:	4901      	ldr	r1, [pc, #4]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	658b      	str	r3, [r1, #88]	; 0x58
 8002fea:	e003      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8002fec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ff0:	7dfb      	ldrb	r3, [r7, #23]
 8002ff2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d02f      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003006:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800300a:	d00c      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800300c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003010:	d015      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
 8003012:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003016:	d10f      	bne.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0xc64>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003018:	4b7a      	ldr	r3, [pc, #488]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 800301a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301c:	4a79      	ldr	r2, [pc, #484]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 800301e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003022:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003024:	e00c      	b.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0xc6c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	3324      	adds	r3, #36	; 0x24
 800302a:	2101      	movs	r1, #1
 800302c:	4618      	mov	r0, r3
 800302e:	f000 f99d 	bl	800336c <RCCEx_PLL3_Config>
 8003032:	4603      	mov	r3, r0
 8003034:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003036:	e003      	b.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	75fb      	strb	r3, [r7, #23]
      break;
 800303c:	e000      	b.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
      break;
 800303e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003040:	7dfb      	ldrb	r3, [r7, #23]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d10a      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003046:	4b6f      	ldr	r3, [pc, #444]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 8003048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003054:	496b      	ldr	r1, [pc, #428]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 8003056:	4313      	orrs	r3, r2
 8003058:	654b      	str	r3, [r1, #84]	; 0x54
 800305a:	e001      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800305c:	7dfb      	ldrb	r3, [r7, #23]
 800305e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d029      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xcec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003070:	2b00      	cmp	r3, #0
 8003072:	d003      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8003074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003078:	d007      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
 800307a:	e00f      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800307c:	4b61      	ldr	r3, [pc, #388]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 800307e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003080:	4a60      	ldr	r2, [pc, #384]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 8003082:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003086:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003088:	e00b      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0xcce>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	3304      	adds	r3, #4
 800308e:	2102      	movs	r1, #2
 8003090:	4618      	mov	r0, r3
 8003092:	f000 f8b9 	bl	8003208 <RCCEx_PLL2_Config>
 8003096:	4603      	mov	r3, r0
 8003098:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800309a:	e002      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0xcce>

    default:
      ret = HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	75fb      	strb	r3, [r7, #23]
      break;
 80030a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030a2:	7dfb      	ldrb	r3, [r7, #23]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d109      	bne.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0xce8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80030a8:	4b56      	ldr	r3, [pc, #344]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 80030aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030b4:	4953      	ldr	r1, [pc, #332]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80030ba:	e001      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xcec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030bc:	7dfb      	ldrb	r3, [r7, #23]
 80030be:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00a      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	3324      	adds	r3, #36	; 0x24
 80030d0:	2102      	movs	r1, #2
 80030d2:	4618      	mov	r0, r3
 80030d4:	f000 f94a 	bl	800336c <RCCEx_PLL3_Config>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
      status=HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d031      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0xd7e>
  {

    switch(PeriphClkInit->RngClockSelection)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030f8:	d00c      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0xd40>
 80030fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030fe:	d802      	bhi.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0xd32>
 8003100:	2b00      	cmp	r3, #0
 8003102:	d011      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0xd54>
 8003104:	e00d      	b.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003106:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800310a:	d00f      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0xd58>
 800310c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003110:	d00e      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 8003112:	e006      	b.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003114:	4b3b      	ldr	r3, [pc, #236]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 8003116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003118:	4a3a      	ldr	r2, [pc, #232]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 800311a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800311e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003120:	e007      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0xd5e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	75fb      	strb	r3, [r7, #23]
      break;
 8003126:	e004      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0xd5e>
      break;
 8003128:	bf00      	nop
 800312a:	e002      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0xd5e>
      break;
 800312c:	bf00      	nop
 800312e:	e000      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0xd5e>
      break;
 8003130:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003132:	7dfb      	ldrb	r3, [r7, #23]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10a      	bne.n	800314e <HAL_RCCEx_PeriphCLKConfig+0xd7a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003138:	4b32      	ldr	r3, [pc, #200]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 800313a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800313c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003146:	492f      	ldr	r1, [pc, #188]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 8003148:	4313      	orrs	r3, r2
 800314a:	654b      	str	r3, [r1, #84]	; 0x54
 800314c:	e001      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0xd7e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800314e:	7dfb      	ldrb	r3, [r7, #23]
 8003150:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d008      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0xd9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800315e:	4b29      	ldr	r3, [pc, #164]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 8003160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003162:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800316a:	4926      	ldr	r1, [pc, #152]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 800316c:	4313      	orrs	r3, r2
 800316e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d009      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800317c:	4b21      	ldr	r3, [pc, #132]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800318a:	491e      	ldr	r1, [pc, #120]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 800318c:	4313      	orrs	r3, r2
 800318e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d008      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800319c:	4b19      	ldr	r3, [pc, #100]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 800319e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031a0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031a8:	4916      	ldr	r1, [pc, #88]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00d      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0xe02>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80031ba:	4b12      	ldr	r3, [pc, #72]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	4a11      	ldr	r2, [pc, #68]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 80031c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80031c4:	6113      	str	r3, [r2, #16]
 80031c6:	4b0f      	ldr	r3, [pc, #60]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 80031c8:	691a      	ldr	r2, [r3, #16]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80031d0:	490c      	ldr	r1, [pc, #48]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	da08      	bge.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0xe1c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80031de:	4b09      	ldr	r3, [pc, #36]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 80031e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ea:	4906      	ldr	r1, [pc, #24]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80031f0:	7dbb      	ldrb	r3, [r7, #22]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {
    return HAL_OK;
 80031f6:	2300      	movs	r3, #0
 80031f8:	e000      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0xe28>
  }
  return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3718      	adds	r7, #24
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	58024400 	.word	0x58024400

08003208 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003212:	2300      	movs	r3, #0
 8003214:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003216:	4b53      	ldr	r3, [pc, #332]	; (8003364 <RCCEx_PLL2_Config+0x15c>)
 8003218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321a:	f003 0303 	and.w	r3, r3, #3
 800321e:	2b03      	cmp	r3, #3
 8003220:	d101      	bne.n	8003226 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e099      	b.n	800335a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003226:	4b4f      	ldr	r3, [pc, #316]	; (8003364 <RCCEx_PLL2_Config+0x15c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a4e      	ldr	r2, [pc, #312]	; (8003364 <RCCEx_PLL2_Config+0x15c>)
 800322c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003230:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003232:	f7fd fbf3 	bl	8000a1c <HAL_GetTick>
 8003236:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003238:	e008      	b.n	800324c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800323a:	f7fd fbef 	bl	8000a1c <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d901      	bls.n	800324c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e086      	b.n	800335a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800324c:	4b45      	ldr	r3, [pc, #276]	; (8003364 <RCCEx_PLL2_Config+0x15c>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1f0      	bne.n	800323a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003258:	4b42      	ldr	r3, [pc, #264]	; (8003364 <RCCEx_PLL2_Config+0x15c>)
 800325a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	031b      	lsls	r3, r3, #12
 8003266:	493f      	ldr	r1, [pc, #252]	; (8003364 <RCCEx_PLL2_Config+0x15c>)
 8003268:	4313      	orrs	r3, r2
 800326a:	628b      	str	r3, [r1, #40]	; 0x28
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	3b01      	subs	r3, #1
 8003272:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	3b01      	subs	r3, #1
 800327c:	025b      	lsls	r3, r3, #9
 800327e:	b29b      	uxth	r3, r3
 8003280:	431a      	orrs	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	3b01      	subs	r3, #1
 8003288:	041b      	lsls	r3, r3, #16
 800328a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800328e:	431a      	orrs	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	3b01      	subs	r3, #1
 8003296:	061b      	lsls	r3, r3, #24
 8003298:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800329c:	4931      	ldr	r1, [pc, #196]	; (8003364 <RCCEx_PLL2_Config+0x15c>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80032a2:	4b30      	ldr	r3, [pc, #192]	; (8003364 <RCCEx_PLL2_Config+0x15c>)
 80032a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	492d      	ldr	r1, [pc, #180]	; (8003364 <RCCEx_PLL2_Config+0x15c>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80032b4:	4b2b      	ldr	r3, [pc, #172]	; (8003364 <RCCEx_PLL2_Config+0x15c>)
 80032b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b8:	f023 0220 	bic.w	r2, r3, #32
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	4928      	ldr	r1, [pc, #160]	; (8003364 <RCCEx_PLL2_Config+0x15c>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80032c6:	4b27      	ldr	r3, [pc, #156]	; (8003364 <RCCEx_PLL2_Config+0x15c>)
 80032c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ca:	4a26      	ldr	r2, [pc, #152]	; (8003364 <RCCEx_PLL2_Config+0x15c>)
 80032cc:	f023 0310 	bic.w	r3, r3, #16
 80032d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80032d2:	4b24      	ldr	r3, [pc, #144]	; (8003364 <RCCEx_PLL2_Config+0x15c>)
 80032d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032d6:	4b24      	ldr	r3, [pc, #144]	; (8003368 <RCCEx_PLL2_Config+0x160>)
 80032d8:	4013      	ands	r3, r2
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	69d2      	ldr	r2, [r2, #28]
 80032de:	00d2      	lsls	r2, r2, #3
 80032e0:	4920      	ldr	r1, [pc, #128]	; (8003364 <RCCEx_PLL2_Config+0x15c>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80032e6:	4b1f      	ldr	r3, [pc, #124]	; (8003364 <RCCEx_PLL2_Config+0x15c>)
 80032e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ea:	4a1e      	ldr	r2, [pc, #120]	; (8003364 <RCCEx_PLL2_Config+0x15c>)
 80032ec:	f043 0310 	orr.w	r3, r3, #16
 80032f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d106      	bne.n	8003306 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80032f8:	4b1a      	ldr	r3, [pc, #104]	; (8003364 <RCCEx_PLL2_Config+0x15c>)
 80032fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fc:	4a19      	ldr	r2, [pc, #100]	; (8003364 <RCCEx_PLL2_Config+0x15c>)
 80032fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003302:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003304:	e00f      	b.n	8003326 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d106      	bne.n	800331a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800330c:	4b15      	ldr	r3, [pc, #84]	; (8003364 <RCCEx_PLL2_Config+0x15c>)
 800330e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003310:	4a14      	ldr	r2, [pc, #80]	; (8003364 <RCCEx_PLL2_Config+0x15c>)
 8003312:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003316:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003318:	e005      	b.n	8003326 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800331a:	4b12      	ldr	r3, [pc, #72]	; (8003364 <RCCEx_PLL2_Config+0x15c>)
 800331c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331e:	4a11      	ldr	r2, [pc, #68]	; (8003364 <RCCEx_PLL2_Config+0x15c>)
 8003320:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003324:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003326:	4b0f      	ldr	r3, [pc, #60]	; (8003364 <RCCEx_PLL2_Config+0x15c>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a0e      	ldr	r2, [pc, #56]	; (8003364 <RCCEx_PLL2_Config+0x15c>)
 800332c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003330:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003332:	f7fd fb73 	bl	8000a1c <HAL_GetTick>
 8003336:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003338:	e008      	b.n	800334c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800333a:	f7fd fb6f 	bl	8000a1c <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d901      	bls.n	800334c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e006      	b.n	800335a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800334c:	4b05      	ldr	r3, [pc, #20]	; (8003364 <RCCEx_PLL2_Config+0x15c>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0f0      	beq.n	800333a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003358:	7bfb      	ldrb	r3, [r7, #15]
}
 800335a:	4618      	mov	r0, r3
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	58024400 	.word	0x58024400
 8003368:	ffff0007 	.word	0xffff0007

0800336c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003376:	2300      	movs	r3, #0
 8003378:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800337a:	4b53      	ldr	r3, [pc, #332]	; (80034c8 <RCCEx_PLL3_Config+0x15c>)
 800337c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337e:	f003 0303 	and.w	r3, r3, #3
 8003382:	2b03      	cmp	r3, #3
 8003384:	d101      	bne.n	800338a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e099      	b.n	80034be <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800338a:	4b4f      	ldr	r3, [pc, #316]	; (80034c8 <RCCEx_PLL3_Config+0x15c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a4e      	ldr	r2, [pc, #312]	; (80034c8 <RCCEx_PLL3_Config+0x15c>)
 8003390:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003394:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003396:	f7fd fb41 	bl	8000a1c <HAL_GetTick>
 800339a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800339c:	e008      	b.n	80033b0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800339e:	f7fd fb3d 	bl	8000a1c <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d901      	bls.n	80033b0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e086      	b.n	80034be <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80033b0:	4b45      	ldr	r3, [pc, #276]	; (80034c8 <RCCEx_PLL3_Config+0x15c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1f0      	bne.n	800339e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80033bc:	4b42      	ldr	r3, [pc, #264]	; (80034c8 <RCCEx_PLL3_Config+0x15c>)
 80033be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	051b      	lsls	r3, r3, #20
 80033ca:	493f      	ldr	r1, [pc, #252]	; (80034c8 <RCCEx_PLL3_Config+0x15c>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	628b      	str	r3, [r1, #40]	; 0x28
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	3b01      	subs	r3, #1
 80033d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	3b01      	subs	r3, #1
 80033e0:	025b      	lsls	r3, r3, #9
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	431a      	orrs	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	3b01      	subs	r3, #1
 80033ec:	041b      	lsls	r3, r3, #16
 80033ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80033f2:	431a      	orrs	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	3b01      	subs	r3, #1
 80033fa:	061b      	lsls	r3, r3, #24
 80033fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003400:	4931      	ldr	r1, [pc, #196]	; (80034c8 <RCCEx_PLL3_Config+0x15c>)
 8003402:	4313      	orrs	r3, r2
 8003404:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003406:	4b30      	ldr	r3, [pc, #192]	; (80034c8 <RCCEx_PLL3_Config+0x15c>)
 8003408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	492d      	ldr	r1, [pc, #180]	; (80034c8 <RCCEx_PLL3_Config+0x15c>)
 8003414:	4313      	orrs	r3, r2
 8003416:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003418:	4b2b      	ldr	r3, [pc, #172]	; (80034c8 <RCCEx_PLL3_Config+0x15c>)
 800341a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	4928      	ldr	r1, [pc, #160]	; (80034c8 <RCCEx_PLL3_Config+0x15c>)
 8003426:	4313      	orrs	r3, r2
 8003428:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800342a:	4b27      	ldr	r3, [pc, #156]	; (80034c8 <RCCEx_PLL3_Config+0x15c>)
 800342c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342e:	4a26      	ldr	r2, [pc, #152]	; (80034c8 <RCCEx_PLL3_Config+0x15c>)
 8003430:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003434:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003436:	4b24      	ldr	r3, [pc, #144]	; (80034c8 <RCCEx_PLL3_Config+0x15c>)
 8003438:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800343a:	4b24      	ldr	r3, [pc, #144]	; (80034cc <RCCEx_PLL3_Config+0x160>)
 800343c:	4013      	ands	r3, r2
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	69d2      	ldr	r2, [r2, #28]
 8003442:	00d2      	lsls	r2, r2, #3
 8003444:	4920      	ldr	r1, [pc, #128]	; (80034c8 <RCCEx_PLL3_Config+0x15c>)
 8003446:	4313      	orrs	r3, r2
 8003448:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800344a:	4b1f      	ldr	r3, [pc, #124]	; (80034c8 <RCCEx_PLL3_Config+0x15c>)
 800344c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344e:	4a1e      	ldr	r2, [pc, #120]	; (80034c8 <RCCEx_PLL3_Config+0x15c>)
 8003450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003454:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d106      	bne.n	800346a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800345c:	4b1a      	ldr	r3, [pc, #104]	; (80034c8 <RCCEx_PLL3_Config+0x15c>)
 800345e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003460:	4a19      	ldr	r2, [pc, #100]	; (80034c8 <RCCEx_PLL3_Config+0x15c>)
 8003462:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003466:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003468:	e00f      	b.n	800348a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d106      	bne.n	800347e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003470:	4b15      	ldr	r3, [pc, #84]	; (80034c8 <RCCEx_PLL3_Config+0x15c>)
 8003472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003474:	4a14      	ldr	r2, [pc, #80]	; (80034c8 <RCCEx_PLL3_Config+0x15c>)
 8003476:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800347a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800347c:	e005      	b.n	800348a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800347e:	4b12      	ldr	r3, [pc, #72]	; (80034c8 <RCCEx_PLL3_Config+0x15c>)
 8003480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003482:	4a11      	ldr	r2, [pc, #68]	; (80034c8 <RCCEx_PLL3_Config+0x15c>)
 8003484:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003488:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800348a:	4b0f      	ldr	r3, [pc, #60]	; (80034c8 <RCCEx_PLL3_Config+0x15c>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a0e      	ldr	r2, [pc, #56]	; (80034c8 <RCCEx_PLL3_Config+0x15c>)
 8003490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003494:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003496:	f7fd fac1 	bl	8000a1c <HAL_GetTick>
 800349a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800349c:	e008      	b.n	80034b0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800349e:	f7fd fabd 	bl	8000a1c <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d901      	bls.n	80034b0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e006      	b.n	80034be <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80034b0:	4b05      	ldr	r3, [pc, #20]	; (80034c8 <RCCEx_PLL3_Config+0x15c>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0f0      	beq.n	800349e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80034bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	58024400 	.word	0x58024400
 80034cc:	ffff0007 	.word	0xffff0007

080034d0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 80034d8:	2300      	movs	r3, #0
 80034da:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e0e2      	b.n	80036ac <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a70      	ldr	r2, [pc, #448]	; (80036b4 <HAL_SPI_Init+0x1e4>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d00f      	beq.n	8003516 <HAL_SPI_Init+0x46>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a6f      	ldr	r2, [pc, #444]	; (80036b8 <HAL_SPI_Init+0x1e8>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d00a      	beq.n	8003516 <HAL_SPI_Init+0x46>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a6d      	ldr	r2, [pc, #436]	; (80036bc <HAL_SPI_Init+0x1ec>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d005      	beq.n	8003516 <HAL_SPI_Init+0x46>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	2b0f      	cmp	r3, #15
 8003510:	d901      	bls.n	8003516 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e0ca      	b.n	80036ac <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 fdb6 	bl	8004088 <SPI_GetPacketSize>
 800351c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a64      	ldr	r2, [pc, #400]	; (80036b4 <HAL_SPI_Init+0x1e4>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d00c      	beq.n	8003542 <HAL_SPI_Init+0x72>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a62      	ldr	r2, [pc, #392]	; (80036b8 <HAL_SPI_Init+0x1e8>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d007      	beq.n	8003542 <HAL_SPI_Init+0x72>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a61      	ldr	r2, [pc, #388]	; (80036bc <HAL_SPI_Init+0x1ec>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d002      	beq.n	8003542 <HAL_SPI_Init+0x72>
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	2b08      	cmp	r3, #8
 8003540:	d811      	bhi.n	8003566 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8003546:	4a5b      	ldr	r2, [pc, #364]	; (80036b4 <HAL_SPI_Init+0x1e4>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d009      	beq.n	8003560 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a59      	ldr	r2, [pc, #356]	; (80036b8 <HAL_SPI_Init+0x1e8>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d004      	beq.n	8003560 <HAL_SPI_Init+0x90>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a58      	ldr	r2, [pc, #352]	; (80036bc <HAL_SPI_Init+0x1ec>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d104      	bne.n	800356a <HAL_SPI_Init+0x9a>
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	2b10      	cmp	r3, #16
 8003564:	d901      	bls.n	800356a <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e0a0      	b.n	80036ac <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d106      	bne.n	8003584 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7fd f8f0 	bl	8000764 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2202      	movs	r2, #2
 8003588:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0201 	bic.w	r2, r2, #1
 800359a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035a4:	d110      	bne.n	80035c8 <HAL_SPI_Init+0xf8>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035ae:	d10b      	bne.n	80035c8 <HAL_SPI_Init+0xf8>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d107      	bne.n	80035c8 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80035c6:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	69da      	ldr	r2, [r3, #28]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d0:	431a      	orrs	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	431a      	orrs	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035da:	ea42 0103 	orr.w	r1, r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68da      	ldr	r2, [r3, #12]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	431a      	orrs	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f8:	431a      	orrs	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	431a      	orrs	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	431a      	orrs	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a1b      	ldr	r3, [r3, #32]
 8003610:	431a      	orrs	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	431a      	orrs	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800361c:	431a      	orrs	r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	431a      	orrs	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003628:	ea42 0103 	orr.w	r1, r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	430a      	orrs	r2, r1
 8003636:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d113      	bne.n	8003668 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003652:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003666:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 0201 	bic.w	r2, r2, #1
 8003676:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00a      	beq.n	800369a <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	430a      	orrs	r2, r1
 8003698:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	40013000 	.word	0x40013000
 80036b8:	40003800 	.word	0x40003800
 80036bc:	40003c00 	.word	0x40003c00

080036c0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b08a      	sub	sp, #40	; 0x28
 80036c4:	af02      	add	r7, sp, #8
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	603b      	str	r3, [r7, #0]
 80036cc:	4613      	mov	r3, r2
 80036ce:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	3320      	adds	r3, #32
 80036d6:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80036d8:	2300      	movs	r3, #0
 80036da:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d101      	bne.n	80036ea <HAL_SPI_Transmit+0x2a>
 80036e6:	2302      	movs	r3, #2
 80036e8:	e1d7      	b.n	8003a9a <HAL_SPI_Transmit+0x3da>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036f2:	f7fd f993 	bl	8000a1c <HAL_GetTick>
 80036f6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b01      	cmp	r3, #1
 8003702:	d007      	beq.n	8003714 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8003704:	2302      	movs	r3, #2
 8003706:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8003710:	7efb      	ldrb	r3, [r7, #27]
 8003712:	e1c2      	b.n	8003a9a <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d002      	beq.n	8003720 <HAL_SPI_Transmit+0x60>
 800371a:	88fb      	ldrh	r3, [r7, #6]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d107      	bne.n	8003730 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800372c:	7efb      	ldrb	r3, [r7, #27]
 800372e:	e1b4      	b.n	8003a9a <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2203      	movs	r2, #3
 8003734:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	68ba      	ldr	r2, [r7, #8]
 8003744:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	88fa      	ldrh	r2, [r7, #6]
 800374a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	88fa      	ldrh	r2, [r7, #6]
 8003752:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8003780:	d107      	bne.n	8003792 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003790:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	4b96      	ldr	r3, [pc, #600]	; (80039f4 <HAL_SPI_Transmit+0x334>)
 800379a:	4013      	ands	r3, r2
 800379c:	88f9      	ldrh	r1, [r7, #6]
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	6812      	ldr	r2, [r2, #0]
 80037a2:	430b      	orrs	r3, r1
 80037a4:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f042 0201 	orr.w	r2, r2, #1
 80037b4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037be:	d107      	bne.n	80037d0 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	2b0f      	cmp	r3, #15
 80037d6:	d947      	bls.n	8003868 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80037d8:	e03f      	b.n	800385a <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d114      	bne.n	8003812 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6812      	ldr	r2, [r2, #0]
 80037f2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f8:	1d1a      	adds	r2, r3, #4
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003804:	b29b      	uxth	r3, r3
 8003806:	3b01      	subs	r3, #1
 8003808:	b29a      	uxth	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8003810:	e023      	b.n	800385a <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003812:	f7fd f903 	bl	8000a1c <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	429a      	cmp	r2, r3
 8003820:	d803      	bhi.n	800382a <HAL_SPI_Transmit+0x16a>
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003828:	d102      	bne.n	8003830 <HAL_SPI_Transmit+0x170>
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d114      	bne.n	800385a <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f000 fb5b 	bl	8003eec <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003844:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e11f      	b.n	8003a9a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003860:	b29b      	uxth	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1b9      	bne.n	80037da <HAL_SPI_Transmit+0x11a>
 8003866:	e0f2      	b.n	8003a4e <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	2b07      	cmp	r3, #7
 800386e:	f240 80e7 	bls.w	8003a40 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8003872:	e05d      	b.n	8003930 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b02      	cmp	r3, #2
 8003880:	d132      	bne.n	80038e8 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003888:	b29b      	uxth	r3, r3
 800388a:	2b01      	cmp	r3, #1
 800388c:	d918      	bls.n	80038c0 <HAL_SPI_Transmit+0x200>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003892:	2b00      	cmp	r3, #0
 8003894:	d014      	beq.n	80038c0 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6812      	ldr	r2, [r2, #0]
 80038a0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a6:	1d1a      	adds	r2, r3, #4
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	3b02      	subs	r3, #2
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80038be:	e037      	b.n	8003930 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c4:	881a      	ldrh	r2, [r3, #0]
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ce:	1c9a      	adds	r2, r3, #2
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80038da:	b29b      	uxth	r3, r3
 80038dc:	3b01      	subs	r3, #1
 80038de:	b29a      	uxth	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80038e6:	e023      	b.n	8003930 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038e8:	f7fd f898 	bl	8000a1c <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	683a      	ldr	r2, [r7, #0]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d803      	bhi.n	8003900 <HAL_SPI_Transmit+0x240>
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038fe:	d102      	bne.n	8003906 <HAL_SPI_Transmit+0x246>
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d114      	bne.n	8003930 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f000 faf0 	bl	8003eec <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800391a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e0b4      	b.n	8003a9a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003936:	b29b      	uxth	r3, r3
 8003938:	2b00      	cmp	r3, #0
 800393a:	d19b      	bne.n	8003874 <HAL_SPI_Transmit+0x1b4>
 800393c:	e087      	b.n	8003a4e <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b02      	cmp	r3, #2
 800394a:	d155      	bne.n	80039f8 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003952:	b29b      	uxth	r3, r3
 8003954:	2b03      	cmp	r3, #3
 8003956:	d918      	bls.n	800398a <HAL_SPI_Transmit+0x2ca>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800395c:	2b40      	cmp	r3, #64	; 0x40
 800395e:	d914      	bls.n	800398a <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6812      	ldr	r2, [r2, #0]
 800396a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003970:	1d1a      	adds	r2, r3, #4
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800397c:	b29b      	uxth	r3, r3
 800397e:	3b04      	subs	r3, #4
 8003980:	b29a      	uxth	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8003988:	e05a      	b.n	8003a40 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003990:	b29b      	uxth	r3, r3
 8003992:	2b01      	cmp	r3, #1
 8003994:	d917      	bls.n	80039c6 <HAL_SPI_Transmit+0x306>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399a:	2b00      	cmp	r3, #0
 800399c:	d013      	beq.n	80039c6 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a2:	881a      	ldrh	r2, [r3, #0]
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ac:	1c9a      	adds	r2, r3, #2
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	3b02      	subs	r3, #2
 80039bc:	b29a      	uxth	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80039c4:	e03c      	b.n	8003a40 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	3320      	adds	r3, #32
 80039d0:	7812      	ldrb	r2, [r2, #0]
 80039d2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d8:	1c5a      	adds	r2, r3, #1
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	3b01      	subs	r3, #1
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80039f0:	e026      	b.n	8003a40 <HAL_SPI_Transmit+0x380>
 80039f2:	bf00      	nop
 80039f4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039f8:	f7fd f810 	bl	8000a1c <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d803      	bhi.n	8003a10 <HAL_SPI_Transmit+0x350>
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a0e:	d102      	bne.n	8003a16 <HAL_SPI_Transmit+0x356>
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d114      	bne.n	8003a40 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f000 fa68 	bl	8003eec <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e02c      	b.n	8003a9a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f47f af78 	bne.w	800393e <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	2200      	movs	r2, #0
 8003a56:	2108      	movs	r1, #8
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f000 fae7 	bl	800402c <SPI_WaitOnFlagUntilTimeout>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d007      	beq.n	8003a74 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a6a:	f043 0220 	orr.w	r2, r3, #32
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f000 fa39 	bl	8003eec <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d001      	beq.n	8003a98 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e000      	b.n	8003a9a <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8003a98:	7efb      	ldrb	r3, [r7, #27]
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3720      	adds	r7, #32
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop

08003aa4 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b08a      	sub	sp, #40	; 0x28
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8003abc:	6a3a      	ldr	r2, [r7, #32]
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8003acc:	2300      	movs	r3, #0
 8003ace:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003ad6:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	3330      	adds	r3, #48	; 0x30
 8003ade:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d113      	bne.n	8003b12 <HAL_SPI_IRQHandler+0x6e>
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	f003 0320 	and.w	r3, r3, #32
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d10e      	bne.n	8003b12 <HAL_SPI_IRQHandler+0x6e>
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	f003 0304 	and.w	r3, r3, #4
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d009      	beq.n	8003b12 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	4798      	blx	r3
    hspi->RxISR(hspi);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	4798      	blx	r3
    handled = 1UL;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d10f      	bne.n	8003b3c <HAL_SPI_IRQHandler+0x98>
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00a      	beq.n	8003b3c <HAL_SPI_IRQHandler+0x98>
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d105      	bne.n	8003b3c <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	4798      	blx	r3
    handled = 1UL;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	f003 0320 	and.w	r3, r3, #32
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10f      	bne.n	8003b66 <HAL_SPI_IRQHandler+0xc2>
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00a      	beq.n	8003b66 <HAL_SPI_IRQHandler+0xc2>
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	f003 0304 	and.w	r3, r3, #4
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d105      	bne.n	8003b66 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	4798      	blx	r3
    handled = 1UL;
 8003b62:	2301      	movs	r3, #1
 8003b64:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8003b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f040 8170 	bne.w	8003e4e <HAL_SPI_IRQHandler+0x3aa>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	f003 0308 	and.w	r3, r3, #8
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f000 80a0 	beq.w	8003cba <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	699a      	ldr	r2, [r3, #24]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f042 0208 	orr.w	r2, r2, #8
 8003b88:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	699a      	ldr	r2, [r3, #24]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f042 0210 	orr.w	r2, r2, #16
 8003b98:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	699a      	ldr	r2, [r3, #24]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ba8:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	691a      	ldr	r2, [r3, #16]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 0208 	bic.w	r2, r2, #8
 8003bb8:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00f      	beq.n	8003be4 <HAL_SPI_IRQHandler+0x140>
 8003bc4:	7cfb      	ldrb	r3, [r7, #19]
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	d004      	beq.n	8003bd4 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bce:	69db      	ldr	r3, [r3, #28]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d007      	beq.n	8003be4 <HAL_SPI_IRQHandler+0x140>
 8003bd4:	7cfb      	ldrb	r3, [r7, #19]
 8003bd6:	2b03      	cmp	r3, #3
 8003bd8:	d059      	beq.n	8003c8e <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bde:	69db      	ldr	r3, [r3, #28]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d154      	bne.n	8003c8e <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d13d      	bne.n	8003c6e <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 8003bf2:	e036      	b.n	8003c62 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	2b0f      	cmp	r3, #15
 8003bfa:	d90b      	bls.n	8003c14 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c04:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c06:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c0c:	1d1a      	adds	r2, r3, #4
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	665a      	str	r2, [r3, #100]	; 0x64
 8003c12:	e01d      	b.n	8003c50 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	2b07      	cmp	r3, #7
 8003c1a:	d90b      	bls.n	8003c34 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	8812      	ldrh	r2, [r2, #0]
 8003c24:	b292      	uxth	r2, r2
 8003c26:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c2c:	1c9a      	adds	r2, r3, #2
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	665a      	str	r2, [r3, #100]	; 0x64
 8003c32:	e00d      	b.n	8003c50 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c40:	7812      	ldrb	r2, [r2, #0]
 8003c42:	b2d2      	uxtb	r2, r2
 8003c44:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c4a:	1c5a      	adds	r2, r3, #1
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1c2      	bne.n	8003bf4 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f93c 	bl	8003eec <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f90c 	bl	8003ea4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8003c8c:	e0e4      	b.n	8003e58 <HAL_SPI_IRQHandler+0x3b4>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8003c8e:	7cfb      	ldrb	r3, [r7, #19]
 8003c90:	2b05      	cmp	r3, #5
 8003c92:	d103      	bne.n	8003c9c <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 f8fb 	bl	8003e90 <HAL_SPI_TxRxCpltCallback>
    {
      /* end of the appropriate call */
    }
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

    return;
 8003c9a:	e0da      	b.n	8003e52 <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8003c9c:	7cfb      	ldrb	r3, [r7, #19]
 8003c9e:	2b04      	cmp	r3, #4
 8003ca0:	d103      	bne.n	8003caa <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f8ea 	bl	8003e7c <HAL_SPI_RxCpltCallback>
    return;
 8003ca8:	e0d3      	b.n	8003e52 <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8003caa:	7cfb      	ldrb	r3, [r7, #19]
 8003cac:	2b03      	cmp	r3, #3
 8003cae:	f040 80d0 	bne.w	8003e52 <HAL_SPI_IRQHandler+0x3ae>
      HAL_SPI_TxCpltCallback(hspi);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f8d8 	bl	8003e68 <HAL_SPI_TxCpltCallback>
    return;
 8003cb8:	e0cb      	b.n	8003e52 <HAL_SPI_IRQHandler+0x3ae>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00d      	beq.n	8003ce0 <HAL_SPI_IRQHandler+0x23c>
 8003cc4:	6a3b      	ldr	r3, [r7, #32]
 8003cc6:	f003 0308 	and.w	r3, r3, #8
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d008      	beq.n	8003ce0 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	699a      	ldr	r2, [r3, #24]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cdc:	619a      	str	r2, [r3, #24]

    return;
 8003cde:	e0bb      	b.n	8003e58 <HAL_SPI_IRQHandler+0x3b4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f000 80b6 	beq.w	8003e58 <HAL_SPI_IRQHandler+0x3b4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00f      	beq.n	8003d16 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cfc:	f043 0204 	orr.w	r2, r3, #4
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	699a      	ldr	r2, [r3, #24]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d14:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00f      	beq.n	8003d40 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d26:	f043 0201 	orr.w	r2, r3, #1
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	699a      	ldr	r2, [r3, #24]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d3e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00f      	beq.n	8003d6a <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d50:	f043 0208 	orr.w	r2, r3, #8
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	699a      	ldr	r2, [r3, #24]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d68:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	f003 0320 	and.w	r3, r3, #32
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00f      	beq.n	8003d94 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d7a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	699a      	ldr	r2, [r3, #24]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 0220 	orr.w	r2, r2, #32
 8003d92:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d05b      	beq.n	8003e56 <HAL_SPI_IRQHandler+0x3b2>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f022 0201 	bic.w	r2, r2, #1
 8003dac:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	6919      	ldr	r1, [r3, #16]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	4b29      	ldr	r3, [pc, #164]	; (8003e60 <HAL_SPI_IRQHandler+0x3bc>)
 8003dba:	400b      	ands	r3, r1
 8003dbc:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003dc4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003dc8:	d138      	bne.n	8003e3c <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	689a      	ldr	r2, [r3, #8]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003dd8:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d013      	beq.n	8003e0a <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003de6:	4a1f      	ldr	r2, [pc, #124]	; (8003e64 <HAL_SPI_IRQHandler+0x3c0>)
 8003de8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7fc ff3c 	bl	8000c6c <HAL_DMA_Abort_IT>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d007      	beq.n	8003e0a <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e00:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d021      	beq.n	8003e56 <HAL_SPI_IRQHandler+0x3b2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e16:	4a13      	ldr	r2, [pc, #76]	; (8003e64 <HAL_SPI_IRQHandler+0x3c0>)
 8003e18:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7fc ff24 	bl	8000c6c <HAL_DMA_Abort_IT>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d015      	beq.n	8003e56 <HAL_SPI_IRQHandler+0x3b2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e30:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003e3a:	e00c      	b.n	8003e56 <HAL_SPI_IRQHandler+0x3b2>
        hspi->State = HAL_SPI_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 f82d 	bl	8003ea4 <HAL_SPI_ErrorCallback>
    return;
 8003e4a:	bf00      	nop
 8003e4c:	e003      	b.n	8003e56 <HAL_SPI_IRQHandler+0x3b2>
    return;
 8003e4e:	bf00      	nop
 8003e50:	e002      	b.n	8003e58 <HAL_SPI_IRQHandler+0x3b4>
    return;
 8003e52:	bf00      	nop
 8003e54:	e000      	b.n	8003e58 <HAL_SPI_IRQHandler+0x3b4>
    return;
 8003e56:	bf00      	nop
  }
}
 8003e58:	3728      	adds	r7, #40	; 0x28
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	fffffc94 	.word	0xfffffc94
 8003e64:	08003eb9 	.word	0x08003eb9

08003e68 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f7ff ffe0 	bl	8003ea4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003ee4:	bf00      	nop
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	699a      	ldr	r2, [r3, #24]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0208 	orr.w	r2, r2, #8
 8003f0a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	699a      	ldr	r2, [r3, #24]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f042 0210 	orr.w	r2, r2, #16
 8003f1a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f022 0201 	bic.w	r2, r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6919      	ldr	r1, [r3, #16]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	4b3c      	ldr	r3, [pc, #240]	; (8004028 <SPI_CloseTransfer+0x13c>)
 8003f38:	400b      	ands	r3, r1
 8003f3a:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	689a      	ldr	r2, [r3, #8]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003f4a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	2b04      	cmp	r3, #4
 8003f56:	d014      	beq.n	8003f82 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f003 0320 	and.w	r3, r3, #32
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00f      	beq.n	8003f82 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f68:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	699a      	ldr	r2, [r3, #24]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f042 0220 	orr.w	r2, r2, #32
 8003f80:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b03      	cmp	r3, #3
 8003f8c:	d014      	beq.n	8003fb8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00f      	beq.n	8003fb8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f9e:	f043 0204 	orr.w	r2, r3, #4
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	699a      	ldr	r2, [r3, #24]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fb6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00f      	beq.n	8003fe2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fc8:	f043 0201 	orr.w	r2, r3, #1
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	699a      	ldr	r2, [r3, #24]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fe0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00f      	beq.n	800400c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ff2:	f043 0208 	orr.w	r2, r3, #8
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	699a      	ldr	r2, [r3, #24]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800400a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800401c:	bf00      	nop
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	fffffc90 	.word	0xfffffc90

0800402c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	603b      	str	r3, [r7, #0]
 8004038:	4613      	mov	r3, r2
 800403a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800403c:	e010      	b.n	8004060 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800403e:	f7fc fced 	bl	8000a1c <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	69ba      	ldr	r2, [r7, #24]
 800404a:	429a      	cmp	r2, r3
 800404c:	d803      	bhi.n	8004056 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004054:	d102      	bne.n	800405c <SPI_WaitOnFlagUntilTimeout+0x30>
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d101      	bne.n	8004060 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e00f      	b.n	8004080 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	695a      	ldr	r2, [r3, #20]
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	4013      	ands	r3, r2
 800406a:	68ba      	ldr	r2, [r7, #8]
 800406c:	429a      	cmp	r2, r3
 800406e:	bf0c      	ite	eq
 8004070:	2301      	moveq	r3, #1
 8004072:	2300      	movne	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	461a      	mov	r2, r3
 8004078:	79fb      	ldrb	r3, [r7, #7]
 800407a:	429a      	cmp	r2, r3
 800407c:	d0df      	beq.n	800403e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004094:	095b      	lsrs	r3, r3, #5
 8004096:	3301      	adds	r3, #1
 8004098:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	3301      	adds	r3, #1
 80040a0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	3307      	adds	r3, #7
 80040a6:	08db      	lsrs	r3, r3, #3
 80040a8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	fb02 f303 	mul.w	r3, r2, r3
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3714      	adds	r7, #20
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
	...

080040c0 <__libc_init_array>:
 80040c0:	b570      	push	{r4, r5, r6, lr}
 80040c2:	4e0d      	ldr	r6, [pc, #52]	; (80040f8 <__libc_init_array+0x38>)
 80040c4:	4c0d      	ldr	r4, [pc, #52]	; (80040fc <__libc_init_array+0x3c>)
 80040c6:	1ba4      	subs	r4, r4, r6
 80040c8:	10a4      	asrs	r4, r4, #2
 80040ca:	2500      	movs	r5, #0
 80040cc:	42a5      	cmp	r5, r4
 80040ce:	d109      	bne.n	80040e4 <__libc_init_array+0x24>
 80040d0:	4e0b      	ldr	r6, [pc, #44]	; (8004100 <__libc_init_array+0x40>)
 80040d2:	4c0c      	ldr	r4, [pc, #48]	; (8004104 <__libc_init_array+0x44>)
 80040d4:	f000 f820 	bl	8004118 <_init>
 80040d8:	1ba4      	subs	r4, r4, r6
 80040da:	10a4      	asrs	r4, r4, #2
 80040dc:	2500      	movs	r5, #0
 80040de:	42a5      	cmp	r5, r4
 80040e0:	d105      	bne.n	80040ee <__libc_init_array+0x2e>
 80040e2:	bd70      	pop	{r4, r5, r6, pc}
 80040e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040e8:	4798      	blx	r3
 80040ea:	3501      	adds	r5, #1
 80040ec:	e7ee      	b.n	80040cc <__libc_init_array+0xc>
 80040ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040f2:	4798      	blx	r3
 80040f4:	3501      	adds	r5, #1
 80040f6:	e7f2      	b.n	80040de <__libc_init_array+0x1e>
 80040f8:	08004140 	.word	0x08004140
 80040fc:	08004140 	.word	0x08004140
 8004100:	08004140 	.word	0x08004140
 8004104:	08004144 	.word	0x08004144

08004108 <memset>:
 8004108:	4402      	add	r2, r0
 800410a:	4603      	mov	r3, r0
 800410c:	4293      	cmp	r3, r2
 800410e:	d100      	bne.n	8004112 <memset+0xa>
 8004110:	4770      	bx	lr
 8004112:	f803 1b01 	strb.w	r1, [r3], #1
 8004116:	e7f9      	b.n	800410c <memset+0x4>

08004118 <_init>:
 8004118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800411a:	bf00      	nop
 800411c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800411e:	bc08      	pop	{r3}
 8004120:	469e      	mov	lr, r3
 8004122:	4770      	bx	lr

08004124 <_fini>:
 8004124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004126:	bf00      	nop
 8004128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800412a:	bc08      	pop	{r3}
 800412c:	469e      	mov	lr, r3
 800412e:	4770      	bx	lr
